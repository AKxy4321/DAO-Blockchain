{"ast":null,"code":"import { constants } from 'ethers';\nimport { dK as NFT_BASE_CONTRACT_ROLES, dw as ContractWrapper, e as AbiSchema, ah as ContractMetadata, dL as DropErc1155ContractSchema, b0 as ContractAppURI, ai as ContractRoles, aj as ContractRoyalty, ak as ContractPrimarySale, an as DropErc1155ClaimConditions, aR as ContractEvents, ag as ContractEncoder, aQ as GasCostEstimator, aT as ContractPlatformFee, aS as ContractInterceptor, aV as ContractOwner, bI as getRoleHash, dx as buildTransactionFunction, aW as Transaction } from './contract-publisher-1ff1fe07.browser.esm.js';\nimport { D as DropErc1155History } from './drop-erc1155-history-bc8aed31.browser.esm.js';\nimport { S as StandardErc1155 } from './erc-1155-standard-c4641fc4.browser.esm.js';\nimport { a as PaperCheckout } from './thirdweb-checkout-49195812.browser.esm.js';\nimport './QueryParams-39bcad7a.browser.esm.js';\nimport 'bn.js';\nimport 'zod';\nimport 'tiny-invariant';\nimport 'uuid';\nimport '@thirdweb-dev/storage';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC165.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport 'fast-deep-equal';\nimport 'merkletreejs';\nimport '@thirdweb-dev/contracts-js/dist/abis/IThirdwebContract.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedRevealDeprecated.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ContractPublisher.json';\nimport '@thirdweb-dev/chains';\nimport 'bs58';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryLogic.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Permit.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721AQueryableUpgradeable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/SharedMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/zora_IERC721Drop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILoyaltyCard.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/INFTMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountFactoryCore.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccount.json';\nimport 'ethers/lib/utils';\nimport '@thirdweb-dev/contracts-js/dist/abis/Forwarder.json';\nimport 'cross-fetch';\nimport 'eventemitter3';\n\n/**\n * Setup a collection of NFTs with a customizable number of each NFT that are minted as users claim them.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"edition-drop\");\n * ```\n *\n * @public\n */\nclass EditionDrop extends StandardErc1155 {\n  static contractRoles = NFT_BASE_CONTRACT_ROLES;\n\n  /**\n   * Configure royalties\n   * @remarks Set your own royalties for the entire contract or per token\n   * @example\n   * ```javascript\n   * // royalties on the whole contract\n   * contract.royalties.setDefaultRoyaltyInfo({\n   *   seller_fee_basis_points: 100, // 1%\n   *   fee_recipient: \"0x...\"\n   * });\n   * // override royalty for a particular token\n   * contract.royalties.setTokenRoyaltyInfo(tokenId, {\n   *   seller_fee_basis_points: 500, // 5%\n   *   fee_recipient: \"0x...\"\n   * });\n   * ```\n   */\n\n  /**\n   * Configure claim conditions for each NFT\n   * @remarks Define who can claim each NFT in the edition, when and how many.\n   * @example\n   * ```javascript\n   * const presaleStartTime = new Date();\n   * const publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const claimConditions = [\n   *   {\n   *     startTime: presaleStartTime, // start the presale now\n   *     maxClaimableSupply: 2, // limit how many mints for this presale\n   *     price: 0.01, // presale price\n   *     snapshot: ['0x...', '0x...'], // limit minting to only certain addresses\n   *   },\n   *   {\n   *     startTime: publicSaleStartTime, // 24h after presale, start public sale\n   *     price: 0.08, // public sale price\n   *   }\n   * ]);\n   *\n   * const tokenId = 0; // the id of the NFT to set claim conditions on\n   * await contract.claimConditions.set(tokenId, claimConditions);\n   * ```\n   */\n\n  /**\n   * Checkout\n   * @remarks Create a FIAT currency checkout for your NFT drop.\n   */\n\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options, storage);\n    super(contractWrapper, storage, chainId);\n    this.abi = AbiSchema.parse(abi);\n    this.metadata = new ContractMetadata(this.contractWrapper, DropErc1155ContractSchema, this.storage);\n    this.app = new ContractAppURI(this.contractWrapper, this.metadata, this.storage);\n    this.roles = new ContractRoles(this.contractWrapper, EditionDrop.contractRoles);\n    this.royalties = new ContractRoyalty(this.contractWrapper, this.metadata);\n    this.sales = new ContractPrimarySale(this.contractWrapper);\n    this.claimConditions = new DropErc1155ClaimConditions(this.contractWrapper, this.metadata, this.storage);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.history = new DropErc1155History(this.events);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.platformFees = new ContractPlatformFee(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.checkout = new PaperCheckout(this.contractWrapper);\n    this.owner = new ContractOwner(this.contractWrapper);\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  // TODO getAllClaimerAddresses() - should be done via an indexer\n\n  /**\n   * Get all NFTs\n   *\n   * @remarks Get all the data associated with every NFT in this contract.\n   *\n   * By default, returns the first 100 NFTs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const nfts = await contract.getAll();\n   * ```\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs queried.\n   */\n  async getAll(queryParams) {\n    return this.erc1155.getAll(queryParams);\n  }\n\n  /**\n   * Get all NFTs owned by a specific wallet\n   *\n   * @remarks Get all the data associated with the NFTs owned by a specific wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to get the NFTs of\n   * const address = \"{{wallet_address}}\";\n   * const nfts = await contract.getOwned(address);\n   * ```\n   *\n   * @returns The NFT metadata for all NFTs in the contract.\n   */\n  async getOwned(walletAddress) {\n    return this.erc1155.getOwned(walletAddress);\n  }\n\n  /**\n   * Get the number of NFTs minted\n   * @returns the total number of NFTs minted in this contract\n   * @public\n   */\n  async getTotalCount() {\n    return this.erc1155.totalCount();\n  }\n\n  /**\n   * Get whether users can transfer NFTs from this contract\n   */\n  async isTransferRestricted() {\n    const anyoneCanTransfer = await this.contractWrapper.read(\"hasRole\", [getRoleHash(\"transfer\"), constants.AddressZero]);\n    return !anyoneCanTransfer;\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Create a batch of NFTs to be claimed in the future\n   *\n   * @remarks Create batch allows you to create a batch of many NFTs in one transaction.\n   *\n   * @example\n   * ```javascript\n   * // Custom metadata of the NFTs to create\n   * const metadatas = [{\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }, {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }];\n   *\n   * const results = await contract.createBatch(metadatas); // uploads and creates the NFTs on chain\n   * const firstTokenId = results[0].id; // token id of the first created NFT\n   * const firstNFT = await results[0].data(); // (optional) fetch details of the first created NFT\n   * ```\n   *\n   * @param metadatas - The metadata to include in the batch.\n   * @param options - optional upload progress callback\n   */\n  createBatch = /* @__PURE__ */buildTransactionFunction(async (metadatas, options) => {\n    return this.erc1155.lazyMint.prepare(metadatas, options);\n  });\n\n  /**\n   * Construct a claim transaction without executing it.\n   * This is useful for estimating the gas cost of a claim transaction, overriding transaction options and having fine grained control over the transaction execution.\n   * @param destinationAddress - Address you want to send the token to\n   * @param tokenId - Id of the token you want to claim\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer\n   * @param claimData - Optional claim verification data (e.g. price, allowlist proof, etc...)\n   *\n   * @deprecated Use `contract.erc1155.claim.prepare(...args)` instead\n   */\n  async getClaimTransaction(destinationAddress, tokenId, quantity) {\n    let checkERC20Allowance = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    return this.erc1155.getClaimTransaction(destinationAddress, tokenId, quantity, {\n      checkERC20Allowance\n    });\n  }\n\n  /**\n   * Claim NFTs to a specific Wallet\n   *\n   * @remarks Let the specified wallet claim NFTs.\n   *\n   * @example\n   * ```javascript\n   * const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\n   * const tokenId = 0; // the id of the NFT you want to claim\n   * const quantity = 1; // how many NFTs you want to claim\n   *\n   * const tx = await contract.claimTo(address, tokenId, quantity);\n   * const receipt = tx.receipt; // the transaction receipt\n   * ```\n   *\n   * @param destinationAddress - Address you want to send the token to\n   * @param tokenId - Id of the token you want to claim\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer\n   * @param proofs - Array of proofs\n   *\n   * @returns - Receipt for the transaction\n   */\n  claimTo = /* @__PURE__ */buildTransactionFunction((() => {\n    var _this = this;\n    return async function (destinationAddress, tokenId, quantity) {\n      let checkERC20Allowance = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n      return _this.erc1155.claimTo.prepare(destinationAddress, tokenId, quantity, {\n        checkERC20Allowance\n      });\n    };\n  })());\n\n  /**\n   * Claim a token to the connected wallet\n   *\n   * @remarks See {@link EditionDrop.claimTo}\n   *\n   * @param tokenId - Id of the token you want to claim\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer\n   * @param proofs - Array of proofs\n   *\n   * @returns - Receipt for the transaction\n   */\n  claim = /* @__PURE__ */buildTransactionFunction((() => {\n    var _this2 = this;\n    return async function (tokenId, quantity) {\n      let checkERC20Allowance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      const address = await _this2.contractWrapper.getSignerAddress();\n      return _this2.claimTo.prepare(address, tokenId, quantity, checkERC20Allowance);\n    };\n  })());\n\n  /**\n   * Burn a specified amount of a NFT\n   *\n   * @param tokenId - the token Id to burn\n   * @param amount - amount to burn\n   *\n   * @example\n   * ```javascript\n   * const result = await contract.burnTokens(tokenId, amount);\n   * ```\n   */\n  burnTokens = /* @__PURE__ */buildTransactionFunction(async (tokenId, amount) => {\n    return this.erc1155.burn.prepare(tokenId, amount);\n  });\n\n  /**\n   * @internal\n   */\n  async prepare(method, args, overrides) {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method,\n      args,\n      overrides\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName, args, overrides) {\n    return this.contractWrapper.call(functionName, args, overrides);\n  }\n}\nexport { EditionDrop };","map":{"version":3,"names":["constants","dK","NFT_BASE_CONTRACT_ROLES","dw","ContractWrapper","e","AbiSchema","ah","ContractMetadata","dL","DropErc1155ContractSchema","b0","ContractAppURI","ai","ContractRoles","aj","ContractRoyalty","ak","ContractPrimarySale","an","DropErc1155ClaimConditions","aR","ContractEvents","ag","ContractEncoder","aQ","GasCostEstimator","aT","ContractPlatformFee","aS","ContractInterceptor","aV","ContractOwner","bI","getRoleHash","dx","buildTransactionFunction","aW","Transaction","D","DropErc1155History","S","StandardErc1155","a","PaperCheckout","EditionDrop","contractRoles","constructor","network","address","storage","options","arguments","length","undefined","abi","chainId","contractWrapper","parse","metadata","app","roles","royalties","sales","claimConditions","events","history","encoder","estimator","platformFees","interceptor","checkout","owner","onNetworkUpdated","updateSignerOrProvider","getAddress","getAll","queryParams","erc1155","getOwned","walletAddress","getTotalCount","totalCount","isTransferRestricted","anyoneCanTransfer","read","AddressZero","createBatch","metadatas","lazyMint","prepare","getClaimTransaction","destinationAddress","tokenId","quantity","checkERC20Allowance","claimTo","_this","claim","_this2","getSignerAddress","burnTokens","amount","burn","method","args","overrides","fromContractWrapper","call","functionName"],"sources":["C:/Misc/Documents/Career/FinTech/BlockChain/FrontEnd/buildspace-dao-starter/node_modules/@thirdweb-dev/sdk/dist/edition-drop-24708d00.browser.esm.js"],"sourcesContent":["import { constants } from 'ethers';\nimport { dK as NFT_BASE_CONTRACT_ROLES, dw as ContractWrapper, e as AbiSchema, ah as ContractMetadata, dL as DropErc1155ContractSchema, b0 as ContractAppURI, ai as ContractRoles, aj as ContractRoyalty, ak as ContractPrimarySale, an as DropErc1155ClaimConditions, aR as ContractEvents, ag as ContractEncoder, aQ as GasCostEstimator, aT as ContractPlatformFee, aS as ContractInterceptor, aV as ContractOwner, bI as getRoleHash, dx as buildTransactionFunction, aW as Transaction } from './contract-publisher-1ff1fe07.browser.esm.js';\nimport { D as DropErc1155History } from './drop-erc1155-history-bc8aed31.browser.esm.js';\nimport { S as StandardErc1155 } from './erc-1155-standard-c4641fc4.browser.esm.js';\nimport { a as PaperCheckout } from './thirdweb-checkout-49195812.browser.esm.js';\nimport './QueryParams-39bcad7a.browser.esm.js';\nimport 'bn.js';\nimport 'zod';\nimport 'tiny-invariant';\nimport 'uuid';\nimport '@thirdweb-dev/storage';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC165.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport 'fast-deep-equal';\nimport 'merkletreejs';\nimport '@thirdweb-dev/contracts-js/dist/abis/IThirdwebContract.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedRevealDeprecated.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ContractPublisher.json';\nimport '@thirdweb-dev/chains';\nimport 'bs58';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryLogic.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Permit.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721AQueryableUpgradeable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/SharedMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/zora_IERC721Drop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILoyaltyCard.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/INFTMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountFactoryCore.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccount.json';\nimport 'ethers/lib/utils';\nimport '@thirdweb-dev/contracts-js/dist/abis/Forwarder.json';\nimport 'cross-fetch';\nimport 'eventemitter3';\n\n/**\n * Setup a collection of NFTs with a customizable number of each NFT that are minted as users claim them.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"edition-drop\");\n * ```\n *\n * @public\n */\nclass EditionDrop extends StandardErc1155 {\n  static contractRoles = NFT_BASE_CONTRACT_ROLES;\n\n  /**\n   * Configure royalties\n   * @remarks Set your own royalties for the entire contract or per token\n   * @example\n   * ```javascript\n   * // royalties on the whole contract\n   * contract.royalties.setDefaultRoyaltyInfo({\n   *   seller_fee_basis_points: 100, // 1%\n   *   fee_recipient: \"0x...\"\n   * });\n   * // override royalty for a particular token\n   * contract.royalties.setTokenRoyaltyInfo(tokenId, {\n   *   seller_fee_basis_points: 500, // 5%\n   *   fee_recipient: \"0x...\"\n   * });\n   * ```\n   */\n\n  /**\n   * Configure claim conditions for each NFT\n   * @remarks Define who can claim each NFT in the edition, when and how many.\n   * @example\n   * ```javascript\n   * const presaleStartTime = new Date();\n   * const publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const claimConditions = [\n   *   {\n   *     startTime: presaleStartTime, // start the presale now\n   *     maxClaimableSupply: 2, // limit how many mints for this presale\n   *     price: 0.01, // presale price\n   *     snapshot: ['0x...', '0x...'], // limit minting to only certain addresses\n   *   },\n   *   {\n   *     startTime: publicSaleStartTime, // 24h after presale, start public sale\n   *     price: 0.08, // public sale price\n   *   }\n   * ]);\n   *\n   * const tokenId = 0; // the id of the NFT to set claim conditions on\n   * await contract.claimConditions.set(tokenId, claimConditions);\n   * ```\n   */\n\n  /**\n   * Checkout\n   * @remarks Create a FIAT currency checkout for your NFT drop.\n   */\n\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options, storage);\n    super(contractWrapper, storage, chainId);\n    this.abi = AbiSchema.parse(abi);\n    this.metadata = new ContractMetadata(this.contractWrapper, DropErc1155ContractSchema, this.storage);\n    this.app = new ContractAppURI(this.contractWrapper, this.metadata, this.storage);\n    this.roles = new ContractRoles(this.contractWrapper, EditionDrop.contractRoles);\n    this.royalties = new ContractRoyalty(this.contractWrapper, this.metadata);\n    this.sales = new ContractPrimarySale(this.contractWrapper);\n    this.claimConditions = new DropErc1155ClaimConditions(this.contractWrapper, this.metadata, this.storage);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.history = new DropErc1155History(this.events);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.platformFees = new ContractPlatformFee(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.checkout = new PaperCheckout(this.contractWrapper);\n    this.owner = new ContractOwner(this.contractWrapper);\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  // TODO getAllClaimerAddresses() - should be done via an indexer\n\n  /**\n   * Get all NFTs\n   *\n   * @remarks Get all the data associated with every NFT in this contract.\n   *\n   * By default, returns the first 100 NFTs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const nfts = await contract.getAll();\n   * ```\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs queried.\n   */\n  async getAll(queryParams) {\n    return this.erc1155.getAll(queryParams);\n  }\n\n  /**\n   * Get all NFTs owned by a specific wallet\n   *\n   * @remarks Get all the data associated with the NFTs owned by a specific wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to get the NFTs of\n   * const address = \"{{wallet_address}}\";\n   * const nfts = await contract.getOwned(address);\n   * ```\n   *\n   * @returns The NFT metadata for all NFTs in the contract.\n   */\n  async getOwned(walletAddress) {\n    return this.erc1155.getOwned(walletAddress);\n  }\n\n  /**\n   * Get the number of NFTs minted\n   * @returns the total number of NFTs minted in this contract\n   * @public\n   */\n  async getTotalCount() {\n    return this.erc1155.totalCount();\n  }\n\n  /**\n   * Get whether users can transfer NFTs from this contract\n   */\n  async isTransferRestricted() {\n    const anyoneCanTransfer = await this.contractWrapper.read(\"hasRole\", [getRoleHash(\"transfer\"), constants.AddressZero]);\n    return !anyoneCanTransfer;\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Create a batch of NFTs to be claimed in the future\n   *\n   * @remarks Create batch allows you to create a batch of many NFTs in one transaction.\n   *\n   * @example\n   * ```javascript\n   * // Custom metadata of the NFTs to create\n   * const metadatas = [{\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }, {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }];\n   *\n   * const results = await contract.createBatch(metadatas); // uploads and creates the NFTs on chain\n   * const firstTokenId = results[0].id; // token id of the first created NFT\n   * const firstNFT = await results[0].data(); // (optional) fetch details of the first created NFT\n   * ```\n   *\n   * @param metadatas - The metadata to include in the batch.\n   * @param options - optional upload progress callback\n   */\n  createBatch = /* @__PURE__ */buildTransactionFunction(async (metadatas, options) => {\n    return this.erc1155.lazyMint.prepare(metadatas, options);\n  });\n\n  /**\n   * Construct a claim transaction without executing it.\n   * This is useful for estimating the gas cost of a claim transaction, overriding transaction options and having fine grained control over the transaction execution.\n   * @param destinationAddress - Address you want to send the token to\n   * @param tokenId - Id of the token you want to claim\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer\n   * @param claimData - Optional claim verification data (e.g. price, allowlist proof, etc...)\n   *\n   * @deprecated Use `contract.erc1155.claim.prepare(...args)` instead\n   */\n  async getClaimTransaction(destinationAddress, tokenId, quantity) {\n    let checkERC20Allowance = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    return this.erc1155.getClaimTransaction(destinationAddress, tokenId, quantity, {\n      checkERC20Allowance\n    });\n  }\n\n  /**\n   * Claim NFTs to a specific Wallet\n   *\n   * @remarks Let the specified wallet claim NFTs.\n   *\n   * @example\n   * ```javascript\n   * const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\n   * const tokenId = 0; // the id of the NFT you want to claim\n   * const quantity = 1; // how many NFTs you want to claim\n   *\n   * const tx = await contract.claimTo(address, tokenId, quantity);\n   * const receipt = tx.receipt; // the transaction receipt\n   * ```\n   *\n   * @param destinationAddress - Address you want to send the token to\n   * @param tokenId - Id of the token you want to claim\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer\n   * @param proofs - Array of proofs\n   *\n   * @returns - Receipt for the transaction\n   */\n  claimTo = /* @__PURE__ */buildTransactionFunction((() => {\n    var _this = this;\n    return async function (destinationAddress, tokenId, quantity) {\n      let checkERC20Allowance = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n      return _this.erc1155.claimTo.prepare(destinationAddress, tokenId, quantity, {\n        checkERC20Allowance\n      });\n    };\n  })());\n\n  /**\n   * Claim a token to the connected wallet\n   *\n   * @remarks See {@link EditionDrop.claimTo}\n   *\n   * @param tokenId - Id of the token you want to claim\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer\n   * @param proofs - Array of proofs\n   *\n   * @returns - Receipt for the transaction\n   */\n  claim = /* @__PURE__ */buildTransactionFunction((() => {\n    var _this2 = this;\n    return async function (tokenId, quantity) {\n      let checkERC20Allowance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      const address = await _this2.contractWrapper.getSignerAddress();\n      return _this2.claimTo.prepare(address, tokenId, quantity, checkERC20Allowance);\n    };\n  })());\n\n  /**\n   * Burn a specified amount of a NFT\n   *\n   * @param tokenId - the token Id to burn\n   * @param amount - amount to burn\n   *\n   * @example\n   * ```javascript\n   * const result = await contract.burnTokens(tokenId, amount);\n   * ```\n   */\n  burnTokens = /* @__PURE__ */buildTransactionFunction(async (tokenId, amount) => {\n    return this.erc1155.burn.prepare(tokenId, amount);\n  });\n\n  /**\n   * @internal\n   */\n  async prepare(method, args, overrides) {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method,\n      args,\n      overrides\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName, args, overrides) {\n    return this.contractWrapper.call(functionName, args, overrides);\n  }\n}\n\nexport { EditionDrop };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}