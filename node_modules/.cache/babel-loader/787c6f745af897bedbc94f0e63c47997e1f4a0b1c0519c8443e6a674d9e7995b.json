{"ast":null,"code":"import { constants, BigNumber } from 'ethers';\nimport { bc as fetchCurrencyValue } from './contract-publisher-1ff1fe07.browser.esm.js';\n\n/**\n * Manages history for Token contracts\n * @public\n */\nclass TokenERC20History {\n  constructor(contractWrapper, events) {\n    this.contractWrapper = contractWrapper;\n    this.events = events;\n  }\n\n  /**\n   * Get all holder balances\n   *\n   * @remarks Lets you get all token holders and their corresponding balances\n   * @returns - A JSON object of all token holders and their corresponding balances\n   * @example\n   * ```javascript\n   * const allHolderBalances = await contract.history.getAllHolderBalances();\n   * ```\n   */\n  async getAllHolderBalances() {\n    const a = await this.events.getEvents(\"Transfer\");\n    const txns = a.map(b => b.data);\n    const balances = {};\n    txns.forEach(item => {\n      const from = item === null || item === void 0 ? void 0 : item.from;\n      const to = item === null || item === void 0 ? void 0 : item.to;\n      const amount = item === null || item === void 0 ? void 0 : item.value;\n      if (!(from === constants.AddressZero)) {\n        if (!(from in balances)) {\n          balances[from] = BigNumber.from(0);\n        }\n        balances[from] = balances[from].sub(amount);\n      }\n      if (!(to === constants.AddressZero)) {\n        if (!(to in balances)) {\n          balances[to] = BigNumber.from(0);\n        }\n        balances[to] = balances[to].add(amount);\n      }\n    });\n    return Promise.all(Object.keys(balances).map(async addr => ({\n      holder: addr,\n      balance: await fetchCurrencyValue(this.contractWrapper.getProvider(), this.contractWrapper.address, balances[addr])\n    })));\n  }\n}\nexport { TokenERC20History as T };","map":{"version":3,"names":["constants","BigNumber","bc","fetchCurrencyValue","TokenERC20History","constructor","contractWrapper","events","getAllHolderBalances","a","getEvents","txns","map","b","data","balances","forEach","item","from","to","amount","value","AddressZero","sub","add","Promise","all","Object","keys","addr","holder","balance","getProvider","address","T"],"sources":["C:/Misc/Documents/Career/FinTech/BlockChain/FrontEnd/buildspace-dao-starter/node_modules/@thirdweb-dev/sdk/dist/erc-20-history-43f00dd8.browser.esm.js"],"sourcesContent":["import { constants, BigNumber } from 'ethers';\nimport { bc as fetchCurrencyValue } from './contract-publisher-1ff1fe07.browser.esm.js';\n\n/**\n * Manages history for Token contracts\n * @public\n */\nclass TokenERC20History {\n  constructor(contractWrapper, events) {\n    this.contractWrapper = contractWrapper;\n    this.events = events;\n  }\n\n  /**\n   * Get all holder balances\n   *\n   * @remarks Lets you get all token holders and their corresponding balances\n   * @returns - A JSON object of all token holders and their corresponding balances\n   * @example\n   * ```javascript\n   * const allHolderBalances = await contract.history.getAllHolderBalances();\n   * ```\n   */\n  async getAllHolderBalances() {\n    const a = await this.events.getEvents(\"Transfer\");\n    const txns = a.map(b => b.data);\n    const balances = {};\n    txns.forEach(item => {\n      const from = item?.from;\n      const to = item?.to;\n      const amount = item?.value;\n      if (!(from === constants.AddressZero)) {\n        if (!(from in balances)) {\n          balances[from] = BigNumber.from(0);\n        }\n        balances[from] = balances[from].sub(amount);\n      }\n      if (!(to === constants.AddressZero)) {\n        if (!(to in balances)) {\n          balances[to] = BigNumber.from(0);\n        }\n        balances[to] = balances[to].add(amount);\n      }\n    });\n    return Promise.all(Object.keys(balances).map(async addr => ({\n      holder: addr,\n      balance: await fetchCurrencyValue(this.contractWrapper.getProvider(), this.contractWrapper.address, balances[addr])\n    })));\n  }\n}\n\nexport { TokenERC20History as T };\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,SAAS,QAAQ,QAAQ;AAC7C,SAASC,EAAE,IAAIC,kBAAkB,QAAQ,8CAA8C;;AAEvF;AACA;AACA;AACA;AACA,MAAMC,iBAAiB,CAAC;EACtBC,WAAWA,CAACC,eAAe,EAAEC,MAAM,EAAE;IACnC,IAAI,CAACD,eAAe,GAAGA,eAAe;IACtC,IAAI,CAACC,MAAM,GAAGA,MAAM;EACtB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMC,oBAAoBA,CAAA,EAAG;IAC3B,MAAMC,CAAC,GAAG,MAAM,IAAI,CAACF,MAAM,CAACG,SAAS,CAAC,UAAU,CAAC;IACjD,MAAMC,IAAI,GAAGF,CAAC,CAACG,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,CAAC;IAC/B,MAAMC,QAAQ,GAAG,CAAC,CAAC;IACnBJ,IAAI,CAACK,OAAO,CAACC,IAAI,IAAI;MACnB,MAAMC,IAAI,GAAGD,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEC,IAAI;MACvB,MAAMC,EAAE,GAAGF,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEE,EAAE;MACnB,MAAMC,MAAM,GAAGH,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEI,KAAK;MAC1B,IAAI,EAAEH,IAAI,KAAKlB,SAAS,CAACsB,WAAW,CAAC,EAAE;QACrC,IAAI,EAAEJ,IAAI,IAAIH,QAAQ,CAAC,EAAE;UACvBA,QAAQ,CAACG,IAAI,CAAC,GAAGjB,SAAS,CAACiB,IAAI,CAAC,CAAC,CAAC;QACpC;QACAH,QAAQ,CAACG,IAAI,CAAC,GAAGH,QAAQ,CAACG,IAAI,CAAC,CAACK,GAAG,CAACH,MAAM,CAAC;MAC7C;MACA,IAAI,EAAED,EAAE,KAAKnB,SAAS,CAACsB,WAAW,CAAC,EAAE;QACnC,IAAI,EAAEH,EAAE,IAAIJ,QAAQ,CAAC,EAAE;UACrBA,QAAQ,CAACI,EAAE,CAAC,GAAGlB,SAAS,CAACiB,IAAI,CAAC,CAAC,CAAC;QAClC;QACAH,QAAQ,CAACI,EAAE,CAAC,GAAGJ,QAAQ,CAACI,EAAE,CAAC,CAACK,GAAG,CAACJ,MAAM,CAAC;MACzC;IACF,CAAC,CAAC;IACF,OAAOK,OAAO,CAACC,GAAG,CAACC,MAAM,CAACC,IAAI,CAACb,QAAQ,CAAC,CAACH,GAAG,CAAC,MAAMiB,IAAI,KAAK;MAC1DC,MAAM,EAAED,IAAI;MACZE,OAAO,EAAE,MAAM5B,kBAAkB,CAAC,IAAI,CAACG,eAAe,CAAC0B,WAAW,CAAC,CAAC,EAAE,IAAI,CAAC1B,eAAe,CAAC2B,OAAO,EAAElB,QAAQ,CAACc,IAAI,CAAC;IACpH,CAAC,CAAC,CAAC,CAAC;EACN;AACF;AAEA,SAASzB,iBAAiB,IAAI8B,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}