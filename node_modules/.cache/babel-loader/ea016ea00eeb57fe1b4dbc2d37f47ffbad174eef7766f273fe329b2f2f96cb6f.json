{"ast":null,"code":"import { _ as _classPrivateMethodInitSpec, a as _classPrivateMethodGet } from './classPrivateMethodGet-ea199cc3.browser.esm.js';\nimport { _ as _classPrivateFieldInitSpec, a as _classPrivateFieldSet, b as _classPrivateFieldGet } from './classPrivateFieldSet-a5db7c83.browser.esm.js';\nimport { _ as _defineProperty } from './defineProperty-c8ecdc07.browser.esm.js';\nimport { a as AbstractClientWallet } from './base-402f7b12.browser.esm.js';\nimport { w as walletIds } from './walletIds-a64268ca.browser.esm.js';\nimport { Core } from '@walletconnect/core';\nimport { Web3Wallet } from '@walletconnect/web3wallet';\nimport { utils } from 'ethers';\nimport EventEmitter from 'eventemitter3';\nimport { T as TW_WC_PROJECT_ID, W as WC_RELAY_URL, E as EIP155_SIGNING_METHODS } from './wc-c6a6a61c.browser.esm.js';\nimport { formatJsonRpcResult } from '@walletconnect/jsonrpc-utils';\nimport { isContractDeployed, ThirdwebSDK } from '@thirdweb-dev/sdk';\n\n// connect dapp support through wcv2 protocol\n\nclass WalletConnectHandler extends EventEmitter {}\nvar _core = /*#__PURE__*/new WeakMap();\nvar _wcWallet$1 = /*#__PURE__*/new WeakMap();\nvar _session = /*#__PURE__*/new WeakMap();\nvar _wcMetadata = /*#__PURE__*/new WeakMap();\nvar _activeProposal = /*#__PURE__*/new WeakMap();\nvar _activeRequestEvent = /*#__PURE__*/new WeakMap();\nvar _setupWalletConnectEventsListeners$1 = /*#__PURE__*/new WeakSet();\nvar _getSignParamsMessage = /*#__PURE__*/new WeakSet();\nclass WalletConnectV2Handler extends WalletConnectHandler {\n  constructor(options) {\n    super();\n    /**\n     * Gets message from various signing request methods by filtering out\n     * a value that is not an address (thus is a message).\n     * If it is a hex string, it gets converted to utf8 string\n     */\n    _classPrivateMethodInitSpec(this, _getSignParamsMessage);\n    _classPrivateMethodInitSpec(this, _setupWalletConnectEventsListeners$1);\n    _classPrivateFieldInitSpec(this, _core, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _wcWallet$1, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _session, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _wcMetadata, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _activeProposal, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _activeRequestEvent, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldSet(this, _wcMetadata, (options === null || options === void 0 ? void 0 : options.walletConnectWalletMetadata) || {\n      name: \"Thirdweb Smart Wallet\",\n      description: \"Thirdweb Smart Wallet\",\n      url: \"https://thirdweb.com\",\n      icons: [\"https://thirdweb.com/favicon.ico\"]\n    });\n    _classPrivateFieldSet(this, _core, new Core({\n      projectId: (options === null || options === void 0 ? void 0 : options.walletConenctV2ProjectId) || TW_WC_PROJECT_ID,\n      relayUrl: (options === null || options === void 0 ? void 0 : options.walletConnectV2RelayUrl) || WC_RELAY_URL\n    }));\n  }\n  async init() {\n    _classPrivateFieldSet(this, _wcWallet$1, await Web3Wallet.init({\n      core: _classPrivateFieldGet(this, _core),\n      metadata: _classPrivateFieldGet(this, _wcMetadata)\n    }));\n    const sessions = _classPrivateFieldGet(this, _wcWallet$1).getActiveSessions();\n    const keys = Object.keys(sessions);\n    if (keys[0]) {\n      _classPrivateFieldSet(this, _session, sessions[keys[0]]);\n    }\n    _classPrivateMethodGet(this, _setupWalletConnectEventsListeners$1, _setupWalletConnectEventsListeners2$1).call(this);\n  }\n  async connectApp(wcUri) {\n    if (!_classPrivateFieldGet(this, _wcWallet$1)) {\n      throw new Error(\"Please, init the wallet before connecting an app.\");\n    }\n    await _classPrivateFieldGet(this, _wcWallet$1).core.pairing.pair({\n      uri: wcUri\n    });\n  }\n  async approveSession(wallet) {\n    var _relays$;\n    if (!_classPrivateFieldGet(this, _wcWallet$1)) {\n      throw new Error(\"Please, init the wallet before making session requests.\");\n    }\n    if (!_classPrivateFieldGet(this, _activeProposal)) {\n      throw new Error(\"Please, pass a valid proposal.\");\n    }\n    const account = await wallet.getAddress();\n    const {\n      id,\n      params\n    } = _classPrivateFieldGet(this, _activeProposal);\n    const {\n      requiredNamespaces,\n      relays\n    } = params;\n    const namespaces = {};\n    Object.keys(requiredNamespaces).forEach(key => {\n      const accounts = [];\n      const namespace = requiredNamespaces[key];\n      if (namespace) {\n        var _namespace$chains;\n        (_namespace$chains = namespace.chains) === null || _namespace$chains === void 0 || _namespace$chains.map(chain => {\n          accounts.push(\"\".concat(chain, \":\").concat(account));\n        });\n        namespaces[key] = {\n          accounts,\n          methods: namespace.methods,\n          events: namespace.events\n        };\n      }\n    });\n    _classPrivateFieldSet(this, _session, await _classPrivateFieldGet(this, _wcWallet$1).approveSession({\n      id,\n      relayProtocol: (_relays$ = relays[0]) === null || _relays$ === void 0 ? void 0 : _relays$.protocol,\n      namespaces\n    }));\n    this.emit(\"session_approved\");\n  }\n  async rejectSession() {\n    if (!_classPrivateFieldGet(this, _wcWallet$1)) {\n      throw new Error(\"Please, init the wallet before making session requests.\");\n    }\n    if (!_classPrivateFieldGet(this, _activeProposal)) {\n      throw new Error(\"Please, pass a valid proposal.\");\n    }\n    const {\n      id\n    } = _classPrivateFieldGet(this, _activeProposal);\n    await _classPrivateFieldGet(this, _wcWallet$1).rejectSession({\n      id,\n      reason: {\n        message: \"User rejected methods.\",\n        code: 5002\n      }\n    });\n  }\n  async approveEIP155Request(wallet) {\n    var _classPrivateFieldGet2, _classPrivateFieldGet3;\n    if (!_classPrivateFieldGet(this, _activeRequestEvent)) {\n      return;\n    }\n    const {\n      topic,\n      params,\n      id\n    } = _classPrivateFieldGet(this, _activeRequestEvent);\n    const {\n      request\n    } = params;\n    let response;\n    switch (request.method) {\n      case EIP155_SIGNING_METHODS.PERSONAL_SIGN:\n      case EIP155_SIGNING_METHODS.ETH_SIGN:\n        const message = _classPrivateMethodGet(this, _getSignParamsMessage, _getSignParamsMessage2).call(this, request.params);\n        const signedMessage = await wallet.signMessage(message || \"\"); // TODO: handle empty message\n\n        response = formatJsonRpcResult(id, signedMessage);\n        break;\n      // case EIP155_SIGNING_METHODS.ETH_SIGN_TYPED_DATA:\n      // case EIP155_SIGNING_METHODS.ETH_SIGN_TYPED_DATA_V3:\n      // case EIP155_SIGNING_METHODS.ETH_SIGN_TYPED_DATA_V4:\n      //   const {\n      //     domain,\n      //     types,\n      //     message: data,\n      //   } = getSignTypedDataParamsData(request.params);\n      //   // https://github.com/ethers-io/ethers.js/issues/687#issuecomment-714069471\n      //   delete types.EIP712Domain;\n      //   const signedData = await wallet._signTypedData(domain, types, data);\n      //   return formatJsonRpcResult(id, signedData);\n      case EIP155_SIGNING_METHODS.ETH_SEND_TRANSACTION:\n        const signer = await wallet.getSigner();\n        const sendTransaction = request.params[0];\n        const tx = await signer.sendTransaction(sendTransaction);\n        const {\n          transactionHash\n        } = await tx.wait();\n        response = formatJsonRpcResult(id, transactionHash);\n        break;\n      case EIP155_SIGNING_METHODS.ETH_SIGN_TRANSACTION:\n        const signerSign = await wallet.getSigner();\n        const signTransaction = request.params[0];\n        const signature = await signerSign.signTransaction(signTransaction);\n        response = formatJsonRpcResult(id, signature);\n      default:\n        const error = {\n          id,\n          jsonrpc: \"2.0\",\n          error: {\n            message: \"Invalid event.\",\n            code: 1002\n          }\n        };\n        return (_classPrivateFieldGet2 = _classPrivateFieldGet(this, _wcWallet$1)) === null || _classPrivateFieldGet2 === void 0 ? void 0 : _classPrivateFieldGet2.respondSessionRequest({\n          topic,\n          response: error\n        });\n    }\n    return (_classPrivateFieldGet3 = _classPrivateFieldGet(this, _wcWallet$1)) === null || _classPrivateFieldGet3 === void 0 ? void 0 : _classPrivateFieldGet3.respondSessionRequest({\n      topic,\n      response\n    });\n  }\n  async rejectEIP155Request() {\n    var _classPrivateFieldGet4;\n    if (!_classPrivateFieldGet(this, _activeRequestEvent)) {\n      return;\n    }\n    const {\n      topic,\n      id\n    } = _classPrivateFieldGet(this, _activeRequestEvent);\n    const response = {\n      id,\n      jsonrpc: \"2.0\",\n      error: {\n        message: \"User rejected methods.\",\n        code: 5002\n      }\n    };\n    return (_classPrivateFieldGet4 = _classPrivateFieldGet(this, _wcWallet$1)) === null || _classPrivateFieldGet4 === void 0 ? void 0 : _classPrivateFieldGet4.respondSessionRequest({\n      topic,\n      response\n    });\n  }\n  getActiveSessions() {\n    if (!_classPrivateFieldGet(this, _wcWallet$1)) {\n      throw new Error(\"Please, init the wallet before getting sessions.\");\n    }\n    const sessions = _classPrivateFieldGet(this, _wcWallet$1).getActiveSessions();\n    const sessionKeys = Object.keys(sessions);\n    if (!sessions || sessionKeys.length === 0) {\n      return [];\n    }\n    const thisSessions = [];\n    for (const sessionKey of sessionKeys) {\n      const session = sessions[sessionKey];\n      if (session) {\n        const topic = session.topic;\n        const peerMeta = session.peer.metadata;\n        thisSessions.push({\n          topic,\n          peer: {\n            metadata: peerMeta\n          }\n        });\n      }\n    }\n    return thisSessions;\n  }\n  disconnectSession() {\n    var _classPrivateFieldGet5;\n    if (!_classPrivateFieldGet(this, _wcWallet$1)) {\n      throw new Error(\"Please, init the wallet before disconnecting sessions.\");\n    }\n    if (!_classPrivateFieldGet(this, _session)) {\n      return Promise.resolve();\n    }\n    const params = {\n      topic: _classPrivateFieldGet(this, _session).topic,\n      reason: {\n        message: \"User disconnected.\",\n        code: 6000\n      }\n    };\n    return (_classPrivateFieldGet5 = _classPrivateFieldGet(this, _wcWallet$1)) === null || _classPrivateFieldGet5 === void 0 ? void 0 : _classPrivateFieldGet5.disconnectSession(params);\n  }\n}\nfunction _setupWalletConnectEventsListeners2$1() {\n  if (!_classPrivateFieldGet(this, _wcWallet$1)) {\n    throw new Error(\"Please, init the wallet before making session requests.\");\n  }\n  _classPrivateFieldGet(this, _wcWallet$1).on(\"session_proposal\", proposal => {\n    _classPrivateFieldSet(this, _activeProposal, proposal);\n    this.emit(\"session_proposal\", {\n      proposer: {\n        metadata: proposal.params.proposer.metadata\n      }\n    });\n  });\n  _classPrivateFieldGet(this, _wcWallet$1).on(\"session_delete\", session => {\n    _classPrivateFieldSet(this, _session, undefined);\n    _classPrivateFieldSet(this, _activeProposal, undefined);\n    this.emit(\"session_delete\", {\n      topic: session.topic\n    });\n  });\n  _classPrivateFieldGet(this, _wcWallet$1).on(\"session_request\", async requestEvent => {\n    if (!_classPrivateFieldGet(this, _session)) {\n      return;\n    }\n    const {\n      params: requestParams\n    } = requestEvent;\n    const {\n      request\n    } = requestParams;\n    const {\n      params\n    } = request;\n    switch (request.method) {\n      case EIP155_SIGNING_METHODS.ETH_SIGN:\n      case EIP155_SIGNING_METHODS.PERSONAL_SIGN:\n        _classPrivateFieldSet(this, _activeRequestEvent, requestEvent);\n        const message = params[0];\n        const decodedMessage = new TextDecoder().decode(utils.arrayify(message));\n        const paramsCopy = [...params];\n        paramsCopy[0] = decodedMessage;\n        this.emit(\"session_request\", {\n          topic: _classPrivateFieldGet(this, _session).topic,\n          params: paramsCopy,\n          peer: {\n            metadata: _classPrivateFieldGet(this, _session).peer.metadata\n          },\n          method: request.method\n        });\n        return;\n      case EIP155_SIGNING_METHODS.ETH_SEND_TRANSACTION:\n      case EIP155_SIGNING_METHODS.ETH_SIGN_TRANSACTION:\n        _classPrivateFieldSet(this, _activeRequestEvent, requestEvent);\n        this.emit(\"session_request\", {\n          topic: _classPrivateFieldGet(this, _session).topic,\n          params: requestEvent.params.request.params,\n          peer: {\n            metadata: _classPrivateFieldGet(this, _session).peer.metadata\n          },\n          method: request.method\n        });\n        return;\n      default:\n        throw new Error(\"WCV2.Method not supported: \".concat(request.method));\n    }\n  });\n}\nfunction _getSignParamsMessage2(params) {\n  const message = params.filter(p => !utils.isAddress(p))[0] || \"\"; // TODO: handle empty message\n\n  if (utils.isHexString(message)) {\n    return utils.toUtf8String(message);\n  }\n  return message;\n}\nclass NoOpWalletConnectHandler extends WalletConnectHandler {\n  init() {\n    return Promise.resolve();\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  connectApp(uri) {\n    return Promise.resolve();\n  }\n  approveSession(\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  wallet) {\n    return Promise.resolve();\n  }\n  rejectSession() {\n    return Promise.resolve();\n  }\n  approveEIP155Request(\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  wallet) {\n    return Promise.resolve();\n  }\n  rejectEIP155Request() {\n    return Promise.resolve();\n  }\n  getActiveSessions() {\n    return [];\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  disconnectSession() {\n    return Promise.resolve();\n  }\n}\nconst sdkCache = new Map();\nfunction getSDK(chain) {\n  const cached = sdkCache.get(chain);\n  if (cached) {\n    return cached;\n  }\n  const sdk = new ThirdwebSDK(chain);\n  sdkCache.set(chain, sdk);\n  return sdk;\n}\n\n/**\n * Get all the signers added to the given smart wallet (excluding owner)\n * @param chain\n * @param factoryAddress\n * @param smartWalletAddress\n * @returns\n */\nasync function getAllSigners(chain, factoryAddress, smartWalletAddress) {\n  const readOnlySDK = getSDK(chain);\n  const factoryContract = await readOnlySDK.getContract(factoryAddress);\n  const signers = await factoryContract.call(\"getSignersOfAccount\", [smartWalletAddress]);\n  return signers;\n}\n\n/**\n * Get all the smart wallets associated with a personal wallet address\n * @param chain\n * @param factoryAddress\n * @param personalWalletAddress\n * @returns\n */\nasync function getAllSmartWallets(chain, factoryAddress, personalWalletAddress) {\n  const readOnlySDK = getSDK(chain);\n  const factoryContract = await readOnlySDK.getContract(factoryAddress);\n  const ownedAccount = await getSmartWalletAddress(chain, factoryAddress, personalWalletAddress);\n  const accessibleAccounts = await factoryContract.call(\"getAccountsOfSigner\", [personalWalletAddress]);\n  return {\n    owned: ownedAccount,\n    hasSignerRole: accessibleAccounts\n  };\n}\n\n/**\n * Check if a smart wallet is deployed for a given personal wallet address\n * @param chain\n * @param factoryAddress\n * @param personalWalletAddress\n * @returns\n */\nasync function isSmartWalletDeployed(chain, factoryAddress, personalWalletAddress) {\n  const readOnlySDK = getSDK(chain);\n  const factoryContract = await readOnlySDK.getContract(factoryAddress);\n  const accountAddress = await factoryContract.call(\"getAddress\", [personalWalletAddress]);\n  const isDeployed = await isContractDeployed(accountAddress, readOnlySDK.getProvider());\n  return isDeployed;\n}\n\n/**\n * Get the associated smart wallet address for a given personal wallet address\n * @param chain\n * @param factoryAddress\n * @param personalWalletAddress\n * @returns\n */\nasync function getSmartWalletAddress(chain, factoryAddress, personalWalletAddress) {\n  const readOnlySDK = getSDK(chain);\n  const factoryContract = await readOnlySDK.getContract(factoryAddress);\n  const accountAddress = await factoryContract.call(\"getAddress\", [personalWalletAddress]);\n  return accountAddress;\n}\nvar _wcWallet = /*#__PURE__*/new WeakMap();\nvar _setupWalletConnectEventsListeners = /*#__PURE__*/new WeakSet();\nclass SmartWallet extends AbstractClientWallet {\n  get walletName() {\n    return \"Smart Wallet\";\n  }\n  constructor(options) {\n    super(SmartWallet.id, {\n      ...options\n    });\n    _classPrivateMethodInitSpec(this, _setupWalletConnectEventsListeners);\n    _defineProperty(this, \"enableConnectApp\", false);\n    _classPrivateFieldInitSpec(this, _wcWallet, {\n      writable: true,\n      value: void 0\n    });\n    this.enableConnectApp = (options === null || options === void 0 ? void 0 : options.enableConnectApp) || false;\n    _classPrivateFieldSet(this, _wcWallet, this.enableConnectApp ? new WalletConnectV2Handler({\n      walletConnectWalletMetadata: options === null || options === void 0 ? void 0 : options.walletConnectWalletMetadata,\n      walletConenctV2ProjectId: options === null || options === void 0 ? void 0 : options.walletConenctV2ProjectId,\n      walletConnectV2RelayUrl: options === null || options === void 0 ? void 0 : options.walletConnectV2RelayUrl\n    }) : new NoOpWalletConnectHandler());\n  }\n  async getConnector() {\n    if (!this.connector) {\n      if (this.enableConnectApp) {\n        await _classPrivateFieldGet(this, _wcWallet).init();\n        _classPrivateMethodGet(this, _setupWalletConnectEventsListeners, _setupWalletConnectEventsListeners2).call(this);\n      }\n      const {\n        SmartWalletConnector\n      } = await import('../evm/connectors/smart-wallet/dist/thirdweb-dev-wallets-evm-connectors-smart-wallet.browser.esm.js');\n      this.connector = new SmartWalletConnector(this.options);\n    }\n    return this.connector;\n  }\n  getPersonalWallet() {\n    var _this$connector;\n    return (_this$connector = this.connector) === null || _this$connector === void 0 ? void 0 : _this$connector.personalWallet;\n  }\n\n  /**\n   * Check whether the connected signer can execute a given transaction using the smart wallet.\n   * @param transaction the transaction to execute using the smart wallet.\n   * @returns whether the connected signer can execute the transaction using the smart wallet.\n   */\n  async hasPermissionToExecute(transaction) {\n    const connector = await this.getConnector();\n    return connector.hasPermissionToExecute(transaction);\n  }\n\n  /**\n   * Execute a single transaction\n   * @param transactions\n   * @returns the transaction receipt\n   */\n  async execute(transaction) {\n    const connector = await this.getConnector();\n    return connector.execute(transaction);\n  }\n\n  /**\n   * Execute multiple transactions in a single batch\n   * @param transactions\n   * @returns the transaction receipt\n   */\n  async executeBatch(transactions) {\n    const connector = await this.getConnector();\n    return connector.executeBatch(transactions);\n  }\n\n  /**\n   * Manually deploy the smart wallet contract. If already deployed this will throw an error.\n   * Note that this is not necessary as the smart wallet will be deployed automatically on the first transaction the user makes.\n   * @returns the transaction receipt\n   */\n  async deploy() {\n    const connector = await this.getConnector();\n    return connector.deploy();\n  }\n\n  /**\n   * Manually deploy the smart wallet contract. If already deployed this will do nothing.\n   * Note that this is not necessary as the smart wallet will be deployed automatically on the first transaction the user makes.\n   * @returns the transaction receipt\n   */\n  async deployIfNeeded() {\n    const connector = await this.getConnector();\n    return connector.deployIfNeeded();\n  }\n\n  /**\n   * Check if the smart wallet contract is deployed\n   * @returns true if the smart wallet contract is deployed\n   */\n  async isDeployed() {\n    const connector = await this.getConnector();\n    return connector.isDeployed();\n  }\n\n  /**\n   * Create and add a session key to the smart wallet.\n   * @param keyAddress the address of the session key to add.\n   * @param permissions the permissions to grant to the session key.\n   */\n  async createSessionKey(keyAddress, permissions) {\n    const connector = await this.getConnector();\n    return connector.grantPermissions(keyAddress, permissions);\n  }\n\n  /**\n   * Remove a session key from the smart wallet.\n   * @param keyAddress the address of the session key to remove.\n   */\n  async revokeSessionKey(keyAddress) {\n    const connector = await this.getConnector();\n    return connector.revokePermissions(keyAddress);\n  }\n\n  /**\n   * Add another admin to the smart wallet.\n   * @param adminAddress the address of the admin to add.\n   */\n  async addAdmin(adminAddress) {\n    const connector = await this.getConnector();\n    return connector.addAdmin(adminAddress);\n  }\n\n  /**\n   * Remove an admin from the smart wallet.\n   * @param adminAddress the address of the admin to remove.\n   */\n  async removeAdmin(adminAddress) {\n    const connector = await this.getConnector();\n    return connector.removeAdmin(adminAddress);\n  }\n\n  /**\n   * Get all the admins and session keys active on the smart wallet.\n   */\n  async getAllActiveSigners() {\n    const connector = await this.getConnector();\n    return connector.getAllActiveSigners();\n  }\n\n  /**\n   * Get the underlying account contract of the smart wallet.\n   * @returns the account contract of the smart wallet.\n   */\n  async getAccountContract() {\n    const connector = await this.getConnector();\n    return connector.getAccountContract();\n  }\n\n  /**\n   * Get the underlying account factory contract of the smart wallet.\n   * @returns the account factory contract.\n   */\n  async getFactoryContract() {\n    const connector = await this.getConnector();\n    return connector.getFactoryContract();\n  }\n  autoConnect(params) {\n    return this.connect(params);\n  }\n\n  // wcv2\n  async connectApp(uri) {\n    var _classPrivateFieldGet6;\n    if (!this.enableConnectApp) {\n      throw new Error(\"enableConnectApp is set to false in this wallet config\");\n    }\n    (_classPrivateFieldGet6 = _classPrivateFieldGet(this, _wcWallet)) === null || _classPrivateFieldGet6 === void 0 || _classPrivateFieldGet6.connectApp(uri);\n  }\n  async approveSession() {\n    await _classPrivateFieldGet(this, _wcWallet).approveSession(this);\n    this.emit(\"message\", {\n      type: \"session_approved\"\n    });\n  }\n  rejectSession() {\n    return _classPrivateFieldGet(this, _wcWallet).rejectSession();\n  }\n  approveRequest() {\n    return _classPrivateFieldGet(this, _wcWallet).approveEIP155Request(this);\n  }\n  rejectRequest() {\n    return _classPrivateFieldGet(this, _wcWallet).rejectEIP155Request();\n  }\n  getActiveSessions() {\n    if (!_classPrivateFieldGet(this, _wcWallet)) {\n      throw new Error(\"Please, init the wallet before making session requests.\");\n    }\n    return _classPrivateFieldGet(this, _wcWallet).getActiveSessions();\n  }\n  disconnectSession() {\n    var _classPrivateFieldGet7;\n    return (_classPrivateFieldGet7 = _classPrivateFieldGet(this, _wcWallet)) === null || _classPrivateFieldGet7 === void 0 ? void 0 : _classPrivateFieldGet7.disconnectSession();\n  }\n  isWCReceiverEnabled() {\n    return this.enableConnectApp;\n  }\n}\nfunction _setupWalletConnectEventsListeners2() {\n  if (!_classPrivateFieldGet(this, _wcWallet)) {\n    throw new Error(\"Please, init the wallet before making session requests.\");\n  }\n  _classPrivateFieldGet(this, _wcWallet).on(\"session_proposal\", proposal => {\n    this.emit(\"message\", {\n      type: \"session_proposal\",\n      data: proposal\n    });\n  });\n  _classPrivateFieldGet(this, _wcWallet).on(\"session_delete\", () => {\n    this.emit(\"message\", {\n      type: \"session_delete\"\n    });\n  });\n  _classPrivateFieldGet(this, _wcWallet).on(\"switch_chain\", request => {\n    const chainId = request.params[0].chainId;\n    this.emit(\"message\", {\n      type: \"switch_chain\",\n      data: {\n        chainId\n      }\n    });\n    _classPrivateFieldGet(this, _wcWallet).disconnectSession();\n  });\n  _classPrivateFieldGet(this, _wcWallet).on(\"session_request\", request => {\n    this.emit(\"message\", {\n      type: \"session_request\",\n      data: request\n    });\n  });\n}\n_defineProperty(SmartWallet, \"meta\", {\n  name: \"Smart Wallet\",\n  iconURL: \"ipfs://QmeAJVqn17aDNQhjEU3kcWVZCFBrfta8LzaDGkS8Egdiyk/smart-wallet.svg\"\n});\n_defineProperty(SmartWallet, \"id\", walletIds.smartWallet);\nexport { SmartWallet as S, WalletConnectV2Handler as W, WalletConnectHandler as a, getAllSmartWallets as b, getSmartWalletAddress as c, getAllSigners as g, isSmartWalletDeployed as i };","map":{"version":3,"names":["_","_classPrivateMethodInitSpec","a","_classPrivateMethodGet","_classPrivateFieldInitSpec","_classPrivateFieldSet","b","_classPrivateFieldGet","_defineProperty","AbstractClientWallet","w","walletIds","Core","Web3Wallet","utils","EventEmitter","T","TW_WC_PROJECT_ID","W","WC_RELAY_URL","E","EIP155_SIGNING_METHODS","formatJsonRpcResult","isContractDeployed","ThirdwebSDK","WalletConnectHandler","_core","WeakMap","_wcWallet$1","_session","_wcMetadata","_activeProposal","_activeRequestEvent","_setupWalletConnectEventsListeners$1","WeakSet","_getSignParamsMessage","WalletConnectV2Handler","constructor","options","writable","value","walletConnectWalletMetadata","name","description","url","icons","projectId","walletConenctV2ProjectId","relayUrl","walletConnectV2RelayUrl","init","core","metadata","sessions","getActiveSessions","keys","Object","_setupWalletConnectEventsListeners2$1","call","connectApp","wcUri","Error","pairing","pair","uri","approveSession","wallet","_relays$","account","getAddress","id","params","requiredNamespaces","relays","namespaces","forEach","key","accounts","namespace","_namespace$chains","chains","map","chain","push","concat","methods","events","relayProtocol","protocol","emit","rejectSession","reason","message","code","approveEIP155Request","_classPrivateFieldGet2","_classPrivateFieldGet3","topic","request","response","method","PERSONAL_SIGN","ETH_SIGN","_getSignParamsMessage2","signedMessage","signMessage","ETH_SEND_TRANSACTION","signer","getSigner","sendTransaction","tx","transactionHash","wait","ETH_SIGN_TRANSACTION","signerSign","signTransaction","signature","error","jsonrpc","respondSessionRequest","rejectEIP155Request","_classPrivateFieldGet4","sessionKeys","length","thisSessions","sessionKey","session","peerMeta","peer","disconnectSession","_classPrivateFieldGet5","Promise","resolve","on","proposal","proposer","undefined","requestEvent","requestParams","decodedMessage","TextDecoder","decode","arrayify","paramsCopy","filter","p","isAddress","isHexString","toUtf8String","NoOpWalletConnectHandler","sdkCache","Map","getSDK","cached","get","sdk","set","getAllSigners","factoryAddress","smartWalletAddress","readOnlySDK","factoryContract","getContract","signers","getAllSmartWallets","personalWalletAddress","ownedAccount","getSmartWalletAddress","accessibleAccounts","owned","hasSignerRole","isSmartWalletDeployed","accountAddress","isDeployed","getProvider","_wcWallet","_setupWalletConnectEventsListeners","SmartWallet","walletName","enableConnectApp","getConnector","connector","_setupWalletConnectEventsListeners2","SmartWalletConnector","getPersonalWallet","_this$connector","personalWallet","hasPermissionToExecute","transaction","execute","executeBatch","transactions","deploy","deployIfNeeded","createSessionKey","keyAddress","permissions","grantPermissions","revokeSessionKey","revokePermissions","addAdmin","adminAddress","removeAdmin","getAllActiveSigners","getAccountContract","getFactoryContract","autoConnect","connect","_classPrivateFieldGet6","type","approveRequest","rejectRequest","_classPrivateFieldGet7","isWCReceiverEnabled","data","chainId","iconURL","smartWallet","S","c","g","i"],"sources":["C:/Misc/Documents/Career/FinTech/BlockChain/FrontEnd/buildspace-dao-starter/node_modules/@thirdweb-dev/react-core/node_modules/@thirdweb-dev/wallets/dist/smart-wallet-f5e628ca.browser.esm.js"],"sourcesContent":["import { _ as _classPrivateMethodInitSpec, a as _classPrivateMethodGet } from './classPrivateMethodGet-ea199cc3.browser.esm.js';\nimport { _ as _classPrivateFieldInitSpec, a as _classPrivateFieldSet, b as _classPrivateFieldGet } from './classPrivateFieldSet-a5db7c83.browser.esm.js';\nimport { _ as _defineProperty } from './defineProperty-c8ecdc07.browser.esm.js';\nimport { a as AbstractClientWallet } from './base-402f7b12.browser.esm.js';\nimport { w as walletIds } from './walletIds-a64268ca.browser.esm.js';\nimport { Core } from '@walletconnect/core';\nimport { Web3Wallet } from '@walletconnect/web3wallet';\nimport { utils } from 'ethers';\nimport EventEmitter from 'eventemitter3';\nimport { T as TW_WC_PROJECT_ID, W as WC_RELAY_URL, E as EIP155_SIGNING_METHODS } from './wc-c6a6a61c.browser.esm.js';\nimport { formatJsonRpcResult } from '@walletconnect/jsonrpc-utils';\nimport { isContractDeployed, ThirdwebSDK } from '@thirdweb-dev/sdk';\n\n// connect dapp support through wcv2 protocol\n\nclass WalletConnectHandler extends EventEmitter {}\n\nvar _core = /*#__PURE__*/new WeakMap();\nvar _wcWallet$1 = /*#__PURE__*/new WeakMap();\nvar _session = /*#__PURE__*/new WeakMap();\nvar _wcMetadata = /*#__PURE__*/new WeakMap();\nvar _activeProposal = /*#__PURE__*/new WeakMap();\nvar _activeRequestEvent = /*#__PURE__*/new WeakMap();\nvar _setupWalletConnectEventsListeners$1 = /*#__PURE__*/new WeakSet();\nvar _getSignParamsMessage = /*#__PURE__*/new WeakSet();\nclass WalletConnectV2Handler extends WalletConnectHandler {\n  constructor(options) {\n    super();\n    /**\n     * Gets message from various signing request methods by filtering out\n     * a value that is not an address (thus is a message).\n     * If it is a hex string, it gets converted to utf8 string\n     */\n    _classPrivateMethodInitSpec(this, _getSignParamsMessage);\n    _classPrivateMethodInitSpec(this, _setupWalletConnectEventsListeners$1);\n    _classPrivateFieldInitSpec(this, _core, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _wcWallet$1, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _session, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _wcMetadata, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _activeProposal, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _activeRequestEvent, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldSet(this, _wcMetadata, options?.walletConnectWalletMetadata || {\n      name: \"Thirdweb Smart Wallet\",\n      description: \"Thirdweb Smart Wallet\",\n      url: \"https://thirdweb.com\",\n      icons: [\"https://thirdweb.com/favicon.ico\"]\n    });\n    _classPrivateFieldSet(this, _core, new Core({\n      projectId: options?.walletConenctV2ProjectId || TW_WC_PROJECT_ID,\n      relayUrl: options?.walletConnectV2RelayUrl || WC_RELAY_URL\n    }));\n  }\n  async init() {\n    _classPrivateFieldSet(this, _wcWallet$1, await Web3Wallet.init({\n      core: _classPrivateFieldGet(this, _core),\n      metadata: _classPrivateFieldGet(this, _wcMetadata)\n    }));\n    const sessions = _classPrivateFieldGet(this, _wcWallet$1).getActiveSessions();\n    const keys = Object.keys(sessions);\n    if (keys[0]) {\n      _classPrivateFieldSet(this, _session, sessions[keys[0]]);\n    }\n    _classPrivateMethodGet(this, _setupWalletConnectEventsListeners$1, _setupWalletConnectEventsListeners2$1).call(this);\n  }\n  async connectApp(wcUri) {\n    if (!_classPrivateFieldGet(this, _wcWallet$1)) {\n      throw new Error(\"Please, init the wallet before connecting an app.\");\n    }\n    await _classPrivateFieldGet(this, _wcWallet$1).core.pairing.pair({\n      uri: wcUri\n    });\n  }\n  async approveSession(wallet) {\n    if (!_classPrivateFieldGet(this, _wcWallet$1)) {\n      throw new Error(\"Please, init the wallet before making session requests.\");\n    }\n    if (!_classPrivateFieldGet(this, _activeProposal)) {\n      throw new Error(\"Please, pass a valid proposal.\");\n    }\n    const account = await wallet.getAddress();\n    const {\n      id,\n      params\n    } = _classPrivateFieldGet(this, _activeProposal);\n    const {\n      requiredNamespaces,\n      relays\n    } = params;\n    const namespaces = {};\n    Object.keys(requiredNamespaces).forEach(key => {\n      const accounts = [];\n      const namespace = requiredNamespaces[key];\n      if (namespace) {\n        namespace.chains?.map(chain => {\n          accounts.push(`${chain}:${account}`);\n        });\n        namespaces[key] = {\n          accounts,\n          methods: namespace.methods,\n          events: namespace.events\n        };\n      }\n    });\n    _classPrivateFieldSet(this, _session, await _classPrivateFieldGet(this, _wcWallet$1).approveSession({\n      id,\n      relayProtocol: relays[0]?.protocol,\n      namespaces\n    }));\n    this.emit(\"session_approved\");\n  }\n  async rejectSession() {\n    if (!_classPrivateFieldGet(this, _wcWallet$1)) {\n      throw new Error(\"Please, init the wallet before making session requests.\");\n    }\n    if (!_classPrivateFieldGet(this, _activeProposal)) {\n      throw new Error(\"Please, pass a valid proposal.\");\n    }\n    const {\n      id\n    } = _classPrivateFieldGet(this, _activeProposal);\n    await _classPrivateFieldGet(this, _wcWallet$1).rejectSession({\n      id,\n      reason: {\n        message: \"User rejected methods.\",\n        code: 5002\n      }\n    });\n  }\n  async approveEIP155Request(wallet) {\n    if (!_classPrivateFieldGet(this, _activeRequestEvent)) {\n      return;\n    }\n    const {\n      topic,\n      params,\n      id\n    } = _classPrivateFieldGet(this, _activeRequestEvent);\n    const {\n      request\n    } = params;\n    let response;\n    switch (request.method) {\n      case EIP155_SIGNING_METHODS.PERSONAL_SIGN:\n      case EIP155_SIGNING_METHODS.ETH_SIGN:\n        const message = _classPrivateMethodGet(this, _getSignParamsMessage, _getSignParamsMessage2).call(this, request.params);\n        const signedMessage = await wallet.signMessage(message || \"\"); // TODO: handle empty message\n\n        response = formatJsonRpcResult(id, signedMessage);\n        break;\n      // case EIP155_SIGNING_METHODS.ETH_SIGN_TYPED_DATA:\n      // case EIP155_SIGNING_METHODS.ETH_SIGN_TYPED_DATA_V3:\n      // case EIP155_SIGNING_METHODS.ETH_SIGN_TYPED_DATA_V4:\n      //   const {\n      //     domain,\n      //     types,\n      //     message: data,\n      //   } = getSignTypedDataParamsData(request.params);\n      //   // https://github.com/ethers-io/ethers.js/issues/687#issuecomment-714069471\n      //   delete types.EIP712Domain;\n      //   const signedData = await wallet._signTypedData(domain, types, data);\n      //   return formatJsonRpcResult(id, signedData);\n      case EIP155_SIGNING_METHODS.ETH_SEND_TRANSACTION:\n        const signer = await wallet.getSigner();\n        const sendTransaction = request.params[0];\n        const tx = await signer.sendTransaction(sendTransaction);\n        const {\n          transactionHash\n        } = await tx.wait();\n        response = formatJsonRpcResult(id, transactionHash);\n        break;\n      case EIP155_SIGNING_METHODS.ETH_SIGN_TRANSACTION:\n        const signerSign = await wallet.getSigner();\n        const signTransaction = request.params[0];\n        const signature = await signerSign.signTransaction(signTransaction);\n        response = formatJsonRpcResult(id, signature);\n      default:\n        const error = {\n          id,\n          jsonrpc: \"2.0\",\n          error: {\n            message: \"Invalid event.\",\n            code: 1002\n          }\n        };\n        return _classPrivateFieldGet(this, _wcWallet$1)?.respondSessionRequest({\n          topic,\n          response: error\n        });\n    }\n    return _classPrivateFieldGet(this, _wcWallet$1)?.respondSessionRequest({\n      topic,\n      response\n    });\n  }\n  async rejectEIP155Request() {\n    if (!_classPrivateFieldGet(this, _activeRequestEvent)) {\n      return;\n    }\n    const {\n      topic,\n      id\n    } = _classPrivateFieldGet(this, _activeRequestEvent);\n    const response = {\n      id,\n      jsonrpc: \"2.0\",\n      error: {\n        message: \"User rejected methods.\",\n        code: 5002\n      }\n    };\n    return _classPrivateFieldGet(this, _wcWallet$1)?.respondSessionRequest({\n      topic,\n      response\n    });\n  }\n  getActiveSessions() {\n    if (!_classPrivateFieldGet(this, _wcWallet$1)) {\n      throw new Error(\"Please, init the wallet before getting sessions.\");\n    }\n    const sessions = _classPrivateFieldGet(this, _wcWallet$1).getActiveSessions();\n    const sessionKeys = Object.keys(sessions);\n    if (!sessions || sessionKeys.length === 0) {\n      return [];\n    }\n    const thisSessions = [];\n    for (const sessionKey of sessionKeys) {\n      const session = sessions[sessionKey];\n      if (session) {\n        const topic = session.topic;\n        const peerMeta = session.peer.metadata;\n        thisSessions.push({\n          topic,\n          peer: {\n            metadata: peerMeta\n          }\n        });\n      }\n    }\n    return thisSessions;\n  }\n  disconnectSession() {\n    if (!_classPrivateFieldGet(this, _wcWallet$1)) {\n      throw new Error(\"Please, init the wallet before disconnecting sessions.\");\n    }\n    if (!_classPrivateFieldGet(this, _session)) {\n      return Promise.resolve();\n    }\n    const params = {\n      topic: _classPrivateFieldGet(this, _session).topic,\n      reason: {\n        message: \"User disconnected.\",\n        code: 6000\n      }\n    };\n    return _classPrivateFieldGet(this, _wcWallet$1)?.disconnectSession(params);\n  }\n}\nfunction _setupWalletConnectEventsListeners2$1() {\n  if (!_classPrivateFieldGet(this, _wcWallet$1)) {\n    throw new Error(\"Please, init the wallet before making session requests.\");\n  }\n  _classPrivateFieldGet(this, _wcWallet$1).on(\"session_proposal\", proposal => {\n    _classPrivateFieldSet(this, _activeProposal, proposal);\n    this.emit(\"session_proposal\", {\n      proposer: {\n        metadata: proposal.params.proposer.metadata\n      }\n    });\n  });\n  _classPrivateFieldGet(this, _wcWallet$1).on(\"session_delete\", session => {\n    _classPrivateFieldSet(this, _session, undefined);\n    _classPrivateFieldSet(this, _activeProposal, undefined);\n    this.emit(\"session_delete\", {\n      topic: session.topic\n    });\n  });\n  _classPrivateFieldGet(this, _wcWallet$1).on(\"session_request\", async requestEvent => {\n    if (!_classPrivateFieldGet(this, _session)) {\n      return;\n    }\n    const {\n      params: requestParams\n    } = requestEvent;\n    const {\n      request\n    } = requestParams;\n    const {\n      params\n    } = request;\n    switch (request.method) {\n      case EIP155_SIGNING_METHODS.ETH_SIGN:\n      case EIP155_SIGNING_METHODS.PERSONAL_SIGN:\n        _classPrivateFieldSet(this, _activeRequestEvent, requestEvent);\n        const message = params[0];\n        const decodedMessage = new TextDecoder().decode(utils.arrayify(message));\n        const paramsCopy = [...params];\n        paramsCopy[0] = decodedMessage;\n        this.emit(\"session_request\", {\n          topic: _classPrivateFieldGet(this, _session).topic,\n          params: paramsCopy,\n          peer: {\n            metadata: _classPrivateFieldGet(this, _session).peer.metadata\n          },\n          method: request.method\n        });\n        return;\n      case EIP155_SIGNING_METHODS.ETH_SEND_TRANSACTION:\n      case EIP155_SIGNING_METHODS.ETH_SIGN_TRANSACTION:\n        _classPrivateFieldSet(this, _activeRequestEvent, requestEvent);\n        this.emit(\"session_request\", {\n          topic: _classPrivateFieldGet(this, _session).topic,\n          params: requestEvent.params.request.params,\n          peer: {\n            metadata: _classPrivateFieldGet(this, _session).peer.metadata\n          },\n          method: request.method\n        });\n        return;\n      default:\n        throw new Error(`WCV2.Method not supported: ${request.method}`);\n    }\n  });\n}\nfunction _getSignParamsMessage2(params) {\n  const message = params.filter(p => !utils.isAddress(p))[0] || \"\"; // TODO: handle empty message\n\n  if (utils.isHexString(message)) {\n    return utils.toUtf8String(message);\n  }\n  return message;\n}\n\nclass NoOpWalletConnectHandler extends WalletConnectHandler {\n  init() {\n    return Promise.resolve();\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  connectApp(uri) {\n    return Promise.resolve();\n  }\n  approveSession(\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  wallet) {\n    return Promise.resolve();\n  }\n  rejectSession() {\n    return Promise.resolve();\n  }\n  approveEIP155Request(\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  wallet) {\n    return Promise.resolve();\n  }\n  rejectEIP155Request() {\n    return Promise.resolve();\n  }\n  getActiveSessions() {\n    return [];\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  disconnectSession() {\n    return Promise.resolve();\n  }\n}\n\nconst sdkCache = new Map();\nfunction getSDK(chain) {\n  const cached = sdkCache.get(chain);\n  if (cached) {\n    return cached;\n  }\n  const sdk = new ThirdwebSDK(chain);\n  sdkCache.set(chain, sdk);\n  return sdk;\n}\n\n/**\n * Get all the signers added to the given smart wallet (excluding owner)\n * @param chain\n * @param factoryAddress\n * @param smartWalletAddress\n * @returns\n */\nasync function getAllSigners(chain, factoryAddress, smartWalletAddress) {\n  const readOnlySDK = getSDK(chain);\n  const factoryContract = await readOnlySDK.getContract(factoryAddress);\n  const signers = await factoryContract.call(\"getSignersOfAccount\", [smartWalletAddress]);\n  return signers;\n}\n\n/**\n * Get all the smart wallets associated with a personal wallet address\n * @param chain\n * @param factoryAddress\n * @param personalWalletAddress\n * @returns\n */\nasync function getAllSmartWallets(chain, factoryAddress, personalWalletAddress) {\n  const readOnlySDK = getSDK(chain);\n  const factoryContract = await readOnlySDK.getContract(factoryAddress);\n  const ownedAccount = await getSmartWalletAddress(chain, factoryAddress, personalWalletAddress);\n  const accessibleAccounts = await factoryContract.call(\"getAccountsOfSigner\", [personalWalletAddress]);\n  return {\n    owned: ownedAccount,\n    hasSignerRole: accessibleAccounts\n  };\n}\n\n/**\n * Check if a smart wallet is deployed for a given personal wallet address\n * @param chain\n * @param factoryAddress\n * @param personalWalletAddress\n * @returns\n */\nasync function isSmartWalletDeployed(chain, factoryAddress, personalWalletAddress) {\n  const readOnlySDK = getSDK(chain);\n  const factoryContract = await readOnlySDK.getContract(factoryAddress);\n  const accountAddress = await factoryContract.call(\"getAddress\", [personalWalletAddress]);\n  const isDeployed = await isContractDeployed(accountAddress, readOnlySDK.getProvider());\n  return isDeployed;\n}\n\n/**\n * Get the associated smart wallet address for a given personal wallet address\n * @param chain\n * @param factoryAddress\n * @param personalWalletAddress\n * @returns\n */\nasync function getSmartWalletAddress(chain, factoryAddress, personalWalletAddress) {\n  const readOnlySDK = getSDK(chain);\n  const factoryContract = await readOnlySDK.getContract(factoryAddress);\n  const accountAddress = await factoryContract.call(\"getAddress\", [personalWalletAddress]);\n  return accountAddress;\n}\n\nvar _wcWallet = /*#__PURE__*/new WeakMap();\nvar _setupWalletConnectEventsListeners = /*#__PURE__*/new WeakSet();\nclass SmartWallet extends AbstractClientWallet {\n  get walletName() {\n    return \"Smart Wallet\";\n  }\n  constructor(options) {\n    super(SmartWallet.id, {\n      ...options\n    });\n    _classPrivateMethodInitSpec(this, _setupWalletConnectEventsListeners);\n    _defineProperty(this, \"enableConnectApp\", false);\n    _classPrivateFieldInitSpec(this, _wcWallet, {\n      writable: true,\n      value: void 0\n    });\n    this.enableConnectApp = options?.enableConnectApp || false;\n    _classPrivateFieldSet(this, _wcWallet, this.enableConnectApp ? new WalletConnectV2Handler({\n      walletConnectWalletMetadata: options?.walletConnectWalletMetadata,\n      walletConenctV2ProjectId: options?.walletConenctV2ProjectId,\n      walletConnectV2RelayUrl: options?.walletConnectV2RelayUrl\n    }) : new NoOpWalletConnectHandler());\n  }\n  async getConnector() {\n    if (!this.connector) {\n      if (this.enableConnectApp) {\n        await _classPrivateFieldGet(this, _wcWallet).init();\n        _classPrivateMethodGet(this, _setupWalletConnectEventsListeners, _setupWalletConnectEventsListeners2).call(this);\n      }\n      const {\n        SmartWalletConnector\n      } = await import('../evm/connectors/smart-wallet/dist/thirdweb-dev-wallets-evm-connectors-smart-wallet.browser.esm.js');\n      this.connector = new SmartWalletConnector(this.options);\n    }\n    return this.connector;\n  }\n  getPersonalWallet() {\n    return this.connector?.personalWallet;\n  }\n\n  /**\n   * Check whether the connected signer can execute a given transaction using the smart wallet.\n   * @param transaction the transaction to execute using the smart wallet.\n   * @returns whether the connected signer can execute the transaction using the smart wallet.\n   */\n  async hasPermissionToExecute(transaction) {\n    const connector = await this.getConnector();\n    return connector.hasPermissionToExecute(transaction);\n  }\n\n  /**\n   * Execute a single transaction\n   * @param transactions\n   * @returns the transaction receipt\n   */\n  async execute(transaction) {\n    const connector = await this.getConnector();\n    return connector.execute(transaction);\n  }\n\n  /**\n   * Execute multiple transactions in a single batch\n   * @param transactions\n   * @returns the transaction receipt\n   */\n  async executeBatch(transactions) {\n    const connector = await this.getConnector();\n    return connector.executeBatch(transactions);\n  }\n\n  /**\n   * Manually deploy the smart wallet contract. If already deployed this will throw an error.\n   * Note that this is not necessary as the smart wallet will be deployed automatically on the first transaction the user makes.\n   * @returns the transaction receipt\n   */\n  async deploy() {\n    const connector = await this.getConnector();\n    return connector.deploy();\n  }\n\n  /**\n   * Manually deploy the smart wallet contract. If already deployed this will do nothing.\n   * Note that this is not necessary as the smart wallet will be deployed automatically on the first transaction the user makes.\n   * @returns the transaction receipt\n   */\n  async deployIfNeeded() {\n    const connector = await this.getConnector();\n    return connector.deployIfNeeded();\n  }\n\n  /**\n   * Check if the smart wallet contract is deployed\n   * @returns true if the smart wallet contract is deployed\n   */\n  async isDeployed() {\n    const connector = await this.getConnector();\n    return connector.isDeployed();\n  }\n\n  /**\n   * Create and add a session key to the smart wallet.\n   * @param keyAddress the address of the session key to add.\n   * @param permissions the permissions to grant to the session key.\n   */\n  async createSessionKey(keyAddress, permissions) {\n    const connector = await this.getConnector();\n    return connector.grantPermissions(keyAddress, permissions);\n  }\n\n  /**\n   * Remove a session key from the smart wallet.\n   * @param keyAddress the address of the session key to remove.\n   */\n  async revokeSessionKey(keyAddress) {\n    const connector = await this.getConnector();\n    return connector.revokePermissions(keyAddress);\n  }\n\n  /**\n   * Add another admin to the smart wallet.\n   * @param adminAddress the address of the admin to add.\n   */\n  async addAdmin(adminAddress) {\n    const connector = await this.getConnector();\n    return connector.addAdmin(adminAddress);\n  }\n\n  /**\n   * Remove an admin from the smart wallet.\n   * @param adminAddress the address of the admin to remove.\n   */\n  async removeAdmin(adminAddress) {\n    const connector = await this.getConnector();\n    return connector.removeAdmin(adminAddress);\n  }\n\n  /**\n   * Get all the admins and session keys active on the smart wallet.\n   */\n  async getAllActiveSigners() {\n    const connector = await this.getConnector();\n    return connector.getAllActiveSigners();\n  }\n\n  /**\n   * Get the underlying account contract of the smart wallet.\n   * @returns the account contract of the smart wallet.\n   */\n  async getAccountContract() {\n    const connector = await this.getConnector();\n    return connector.getAccountContract();\n  }\n\n  /**\n   * Get the underlying account factory contract of the smart wallet.\n   * @returns the account factory contract.\n   */\n  async getFactoryContract() {\n    const connector = await this.getConnector();\n    return connector.getFactoryContract();\n  }\n  autoConnect(params) {\n    return this.connect(params);\n  }\n\n  // wcv2\n  async connectApp(uri) {\n    if (!this.enableConnectApp) {\n      throw new Error(\"enableConnectApp is set to false in this wallet config\");\n    }\n    _classPrivateFieldGet(this, _wcWallet)?.connectApp(uri);\n  }\n  async approveSession() {\n    await _classPrivateFieldGet(this, _wcWallet).approveSession(this);\n    this.emit(\"message\", {\n      type: \"session_approved\"\n    });\n  }\n  rejectSession() {\n    return _classPrivateFieldGet(this, _wcWallet).rejectSession();\n  }\n  approveRequest() {\n    return _classPrivateFieldGet(this, _wcWallet).approveEIP155Request(this);\n  }\n  rejectRequest() {\n    return _classPrivateFieldGet(this, _wcWallet).rejectEIP155Request();\n  }\n  getActiveSessions() {\n    if (!_classPrivateFieldGet(this, _wcWallet)) {\n      throw new Error(\"Please, init the wallet before making session requests.\");\n    }\n    return _classPrivateFieldGet(this, _wcWallet).getActiveSessions();\n  }\n  disconnectSession() {\n    return _classPrivateFieldGet(this, _wcWallet)?.disconnectSession();\n  }\n  isWCReceiverEnabled() {\n    return this.enableConnectApp;\n  }\n}\nfunction _setupWalletConnectEventsListeners2() {\n  if (!_classPrivateFieldGet(this, _wcWallet)) {\n    throw new Error(\"Please, init the wallet before making session requests.\");\n  }\n  _classPrivateFieldGet(this, _wcWallet).on(\"session_proposal\", proposal => {\n    this.emit(\"message\", {\n      type: \"session_proposal\",\n      data: proposal\n    });\n  });\n  _classPrivateFieldGet(this, _wcWallet).on(\"session_delete\", () => {\n    this.emit(\"message\", {\n      type: \"session_delete\"\n    });\n  });\n  _classPrivateFieldGet(this, _wcWallet).on(\"switch_chain\", request => {\n    const chainId = request.params[0].chainId;\n    this.emit(\"message\", {\n      type: \"switch_chain\",\n      data: {\n        chainId\n      }\n    });\n    _classPrivateFieldGet(this, _wcWallet).disconnectSession();\n  });\n  _classPrivateFieldGet(this, _wcWallet).on(\"session_request\", request => {\n    this.emit(\"message\", {\n      type: \"session_request\",\n      data: request\n    });\n  });\n}\n_defineProperty(SmartWallet, \"meta\", {\n  name: \"Smart Wallet\",\n  iconURL: \"ipfs://QmeAJVqn17aDNQhjEU3kcWVZCFBrfta8LzaDGkS8Egdiyk/smart-wallet.svg\"\n});\n_defineProperty(SmartWallet, \"id\", walletIds.smartWallet);\n\nexport { SmartWallet as S, WalletConnectV2Handler as W, WalletConnectHandler as a, getAllSmartWallets as b, getSmartWalletAddress as c, getAllSigners as g, isSmartWalletDeployed as i };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}