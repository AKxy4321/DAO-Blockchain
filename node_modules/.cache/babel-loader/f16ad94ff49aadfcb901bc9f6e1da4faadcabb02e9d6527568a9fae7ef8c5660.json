{"ast":null,"code":"import { _ as _classPrivateFieldInitSpec, a as _classPrivateFieldSet, b as _classPrivateFieldGet } from '../../../../dist/classPrivateFieldSet-a5db7c83.browser.esm.js';\nimport { _ as _defineProperty } from '../../../../dist/defineProperty-c8ecdc07.browser.esm.js';\nimport { RecoveryShareManagement, UserStatus } from '@paperxyz/embedded-wallet-service-sdk';\nimport { utils } from 'ethers';\nimport { w as walletIds } from '../../../../dist/walletIds-a64268ca.browser.esm.js';\nimport { C as Connector } from '../../../../dist/connector-05689d68.browser.esm.js';\nimport { n as normalizeChainId } from '../../../../dist/normalizeChainId-e4cc0175.browser.esm.js';\nimport 'eventemitter3';\nvar _signer = /*#__PURE__*/new WeakMap();\nclass PaperWalletConnector extends Connector {\n  constructor(options) {\n    super();\n    _defineProperty(this, \"id\", walletIds.paper);\n    _defineProperty(this, \"name\", \"Paper Wallet\");\n    _defineProperty(this, \"ready\", true);\n    _defineProperty(this, \"user\", null);\n    _classPrivateFieldInitSpec(this, _signer, {\n      writable: true,\n      value: void 0\n    });\n    _defineProperty(this, \"onAccountsChanged\", async accounts => {\n      if (accounts.length === 0) {\n        await this.onDisconnect();\n      } else {\n        this.emit(\"change\", {\n          account: utils.getAddress(accounts[0])\n        });\n      }\n    });\n    _defineProperty(this, \"onChainChanged\", chainId => {\n      const id = normalizeChainId(chainId);\n      const unsupported = this.options.chains.findIndex(c => c.chainId === id) === -1;\n      this.emit(\"change\", {\n        chain: {\n          id,\n          unsupported\n        }\n      });\n    });\n    _defineProperty(this, \"onDisconnect\", async () => {\n      this.emit(\"disconnect\");\n    });\n    this.options = options;\n  }\n  getPaperSDK() {\n    if (!this.paper) {\n      this.paper = new Promise(async (resolve, reject) => {\n        const recoveryMethod = this.options.advancedOptions?.recoveryShareManagement;\n        try {\n          const {\n            PaperEmbeddedWalletSdk\n          } = await import('@paperxyz/embedded-wallet-service-sdk');\n          const methodToEnum = {\n            AWS_MANAGED: RecoveryShareManagement.AWS_MANAGED,\n            USER_MANAGED: RecoveryShareManagement.USER_MANAGED\n          };\n          const recoveryShareManagement = recoveryMethod ? methodToEnum[recoveryMethod] : undefined;\n          resolve(new PaperEmbeddedWalletSdk({\n            advancedOptions: {\n              recoveryShareManagement\n            },\n            clientId: this.options.clientId,\n            chain: \"Ethereum\",\n            styles: this.options.styles\n          }));\n        } catch (err) {\n          reject(err);\n        }\n      });\n    }\n    return this.paper;\n  }\n  async connect(options) {\n    const paperSDK = await this.getPaperSDK();\n    if (!paperSDK) {\n      throw new Error(\"Paper SDK not initialized\");\n    }\n    const user = await paperSDK.getUser();\n    switch (user.status) {\n      case UserStatus.LOGGED_OUT:\n        {\n          let authResult;\n\n          // Show Google popup\n          if (options?.googleLogin) {\n            const arg = options.googleLogin;\n            authResult = await paperSDK.auth.loginWithGoogle(typeof arg === \"object\" ? arg : undefined);\n          }\n\n          // Headless\n          else if (options?.email && options?.otp) {\n            authResult = await paperSDK.auth.verifyPaperEmailLoginOtp({\n              email: options.email,\n              otp: options.otp,\n              recoveryCode: options.recoveryCode\n            });\n          }\n\n          // Show OTP modal\n          else if (options?.email) {\n            authResult = await paperSDK.auth.loginWithPaperEmailOtp({\n              email: options.email\n            });\n          }\n\n          // Show Full Modal\n          else {\n            authResult = await paperSDK.auth.loginWithPaperModal();\n          }\n          this.user = authResult.user;\n          break;\n        }\n      case UserStatus.LOGGED_IN_WALLET_INITIALIZED:\n        {\n          if (typeof options?.googleLogin === \"object\") {\n            if (options.googleLogin.closeOpenedWindow && options.googleLogin.openedWindow) {\n              options.googleLogin.closeOpenedWindow(options.googleLogin.openedWindow);\n            }\n          }\n          this.user = user;\n          break;\n        }\n    }\n    if (!this.user) {\n      throw new Error(\"Error connecting User\");\n    }\n    if (options?.chainId) {\n      this.switchChain(options.chainId);\n    }\n    this.setupListeners();\n    return this.getAddress();\n  }\n  async disconnect() {\n    const paper = await this.paper;\n    await paper?.auth.logout();\n    _classPrivateFieldSet(this, _signer, undefined);\n    this.user = null;\n  }\n  async getAddress() {\n    const signer = await this.getSigner();\n    return signer.getAddress();\n  }\n  async isConnected() {\n    try {\n      const addr = await this.getAddress();\n      return !!addr;\n    } catch (e) {\n      return false;\n    }\n  }\n  async getProvider() {\n    const signer = await this.getSigner();\n    if (!signer.provider) {\n      throw new Error(\"Provider not found\");\n    }\n    return signer.provider;\n  }\n  async getSigner() {\n    if (_classPrivateFieldGet(this, _signer)) {\n      return _classPrivateFieldGet(this, _signer);\n    }\n    if (!this.user) {\n      const paperSDK = await this.getPaperSDK();\n      const user = await paperSDK.getUser();\n      switch (user.status) {\n        case UserStatus.LOGGED_IN_WALLET_INITIALIZED:\n          {\n            this.user = user;\n            break;\n          }\n      }\n    }\n    const signer = await this.user?.wallet.getEthersJsSigner({\n      rpcEndpoint: this.options.chain.rpc[0] || \"\" // TODO: handle chain.rpc being empty array\n    });\n\n    if (!signer) {\n      throw new Error(\"Signer not found\");\n    }\n    _classPrivateFieldSet(this, _signer, signer);\n    return signer;\n  }\n  async isAuthorized() {\n    return false;\n  }\n  async switchChain(chainId) {\n    const chain = this.options.chains.find(c => c.chainId === chainId);\n    if (!chain) {\n      throw new Error(\"Chain not configured\");\n    }\n\n    // update chain in wallet\n    await this.user?.wallet.setChain({\n      chain: \"Ethereum\"\n    }); // just pass Ethereum no matter what chain we are going to connect\n\n    // update signer\n    _classPrivateFieldSet(this, _signer, await this.user?.wallet.getEthersJsSigner({\n      rpcEndpoint: chain.rpc[0] || \"\" // TODO: handle chain.rpc being empty array\n    }));\n\n    this.emit(\"change\", {\n      chain: {\n        id: chainId,\n        unsupported: false\n      }\n    });\n  }\n\n  // private getUser() {\n  //   if (!this.user) {\n  //     throw new Error(\"User not found\");\n  //   }\n  //   return this.user;\n  // }\n\n  async setupListeners() {\n    const provider = await this.getProvider();\n    if (provider.on) {\n      provider.on(\"accountsChanged\", this.onAccountsChanged);\n      provider.on(\"chainChanged\", this.onChainChanged);\n      provider.on(\"disconnect\", this.onDisconnect);\n    }\n  }\n  updateChains(chains) {\n    this.options.chains = chains;\n  }\n  async getEmail() {\n    await this.getProvider();\n    if (!this.user) {\n      throw new Error(\"No user found, Paper Wallet is not connected\");\n    }\n    return this.user.authDetails.email;\n  }\n}\nexport { PaperWalletConnector };","map":{"version":3,"names":["_","_classPrivateFieldInitSpec","a","_classPrivateFieldSet","b","_classPrivateFieldGet","_defineProperty","RecoveryShareManagement","UserStatus","utils","w","walletIds","C","Connector","n","normalizeChainId","_signer","WeakMap","PaperWalletConnector","constructor","options","paper","writable","value","accounts","length","onDisconnect","emit","account","getAddress","chainId","id","unsupported","chains","findIndex","c","chain","getPaperSDK","Promise","resolve","reject","recoveryMethod","advancedOptions","recoveryShareManagement","PaperEmbeddedWalletSdk","methodToEnum","AWS_MANAGED","USER_MANAGED","undefined","clientId","styles","err","connect","paperSDK","Error","user","getUser","status","LOGGED_OUT","authResult","googleLogin","arg","auth","loginWithGoogle","email","otp","verifyPaperEmailLoginOtp","recoveryCode","loginWithPaperEmailOtp","loginWithPaperModal","LOGGED_IN_WALLET_INITIALIZED","closeOpenedWindow","openedWindow","switchChain","setupListeners","disconnect","logout","signer","getSigner","isConnected","addr","e","getProvider","provider","wallet","getEthersJsSigner","rpcEndpoint","rpc","isAuthorized","find","setChain","on","onAccountsChanged","onChainChanged","updateChains","getEmail","authDetails"],"sources":["C:/Misc/Documents/Career/FinTech/BlockChain/FrontEnd/buildspace-dao-starter/node_modules/@thirdweb-dev/react/node_modules/@thirdweb-dev/wallets/evm/connectors/paper/dist/thirdweb-dev-wallets-evm-connectors-paper.browser.esm.js"],"sourcesContent":["import { _ as _classPrivateFieldInitSpec, a as _classPrivateFieldSet, b as _classPrivateFieldGet } from '../../../../dist/classPrivateFieldSet-a5db7c83.browser.esm.js';\nimport { _ as _defineProperty } from '../../../../dist/defineProperty-c8ecdc07.browser.esm.js';\nimport { RecoveryShareManagement, UserStatus } from '@paperxyz/embedded-wallet-service-sdk';\nimport { utils } from 'ethers';\nimport { w as walletIds } from '../../../../dist/walletIds-a64268ca.browser.esm.js';\nimport { C as Connector } from '../../../../dist/connector-05689d68.browser.esm.js';\nimport { n as normalizeChainId } from '../../../../dist/normalizeChainId-e4cc0175.browser.esm.js';\nimport 'eventemitter3';\n\nvar _signer = /*#__PURE__*/new WeakMap();\nclass PaperWalletConnector extends Connector {\n  constructor(options) {\n    super();\n    _defineProperty(this, \"id\", walletIds.paper);\n    _defineProperty(this, \"name\", \"Paper Wallet\");\n    _defineProperty(this, \"ready\", true);\n    _defineProperty(this, \"user\", null);\n    _classPrivateFieldInitSpec(this, _signer, {\n      writable: true,\n      value: void 0\n    });\n    _defineProperty(this, \"onAccountsChanged\", async accounts => {\n      if (accounts.length === 0) {\n        await this.onDisconnect();\n      } else {\n        this.emit(\"change\", {\n          account: utils.getAddress(accounts[0])\n        });\n      }\n    });\n    _defineProperty(this, \"onChainChanged\", chainId => {\n      const id = normalizeChainId(chainId);\n      const unsupported = this.options.chains.findIndex(c => c.chainId === id) === -1;\n      this.emit(\"change\", {\n        chain: {\n          id,\n          unsupported\n        }\n      });\n    });\n    _defineProperty(this, \"onDisconnect\", async () => {\n      this.emit(\"disconnect\");\n    });\n    this.options = options;\n  }\n  getPaperSDK() {\n    if (!this.paper) {\n      this.paper = new Promise(async (resolve, reject) => {\n        const recoveryMethod = this.options.advancedOptions?.recoveryShareManagement;\n        try {\n          const {\n            PaperEmbeddedWalletSdk\n          } = await import('@paperxyz/embedded-wallet-service-sdk');\n          const methodToEnum = {\n            AWS_MANAGED: RecoveryShareManagement.AWS_MANAGED,\n            USER_MANAGED: RecoveryShareManagement.USER_MANAGED\n          };\n          const recoveryShareManagement = recoveryMethod ? methodToEnum[recoveryMethod] : undefined;\n          resolve(new PaperEmbeddedWalletSdk({\n            advancedOptions: {\n              recoveryShareManagement\n            },\n            clientId: this.options.clientId,\n            chain: \"Ethereum\",\n            styles: this.options.styles\n          }));\n        } catch (err) {\n          reject(err);\n        }\n      });\n    }\n    return this.paper;\n  }\n  async connect(options) {\n    const paperSDK = await this.getPaperSDK();\n    if (!paperSDK) {\n      throw new Error(\"Paper SDK not initialized\");\n    }\n    const user = await paperSDK.getUser();\n    switch (user.status) {\n      case UserStatus.LOGGED_OUT:\n        {\n          let authResult;\n\n          // Show Google popup\n          if (options?.googleLogin) {\n            const arg = options.googleLogin;\n            authResult = await paperSDK.auth.loginWithGoogle(typeof arg === \"object\" ? arg : undefined);\n          }\n\n          // Headless\n          else if (options?.email && options?.otp) {\n            authResult = await paperSDK.auth.verifyPaperEmailLoginOtp({\n              email: options.email,\n              otp: options.otp,\n              recoveryCode: options.recoveryCode\n            });\n          }\n\n          // Show OTP modal\n          else if (options?.email) {\n            authResult = await paperSDK.auth.loginWithPaperEmailOtp({\n              email: options.email\n            });\n          }\n\n          // Show Full Modal\n          else {\n            authResult = await paperSDK.auth.loginWithPaperModal();\n          }\n          this.user = authResult.user;\n          break;\n        }\n      case UserStatus.LOGGED_IN_WALLET_INITIALIZED:\n        {\n          if (typeof options?.googleLogin === \"object\") {\n            if (options.googleLogin.closeOpenedWindow && options.googleLogin.openedWindow) {\n              options.googleLogin.closeOpenedWindow(options.googleLogin.openedWindow);\n            }\n          }\n          this.user = user;\n          break;\n        }\n    }\n    if (!this.user) {\n      throw new Error(\"Error connecting User\");\n    }\n    if (options?.chainId) {\n      this.switchChain(options.chainId);\n    }\n    this.setupListeners();\n    return this.getAddress();\n  }\n  async disconnect() {\n    const paper = await this.paper;\n    await paper?.auth.logout();\n    _classPrivateFieldSet(this, _signer, undefined);\n    this.user = null;\n  }\n  async getAddress() {\n    const signer = await this.getSigner();\n    return signer.getAddress();\n  }\n  async isConnected() {\n    try {\n      const addr = await this.getAddress();\n      return !!addr;\n    } catch (e) {\n      return false;\n    }\n  }\n  async getProvider() {\n    const signer = await this.getSigner();\n    if (!signer.provider) {\n      throw new Error(\"Provider not found\");\n    }\n    return signer.provider;\n  }\n  async getSigner() {\n    if (_classPrivateFieldGet(this, _signer)) {\n      return _classPrivateFieldGet(this, _signer);\n    }\n    if (!this.user) {\n      const paperSDK = await this.getPaperSDK();\n      const user = await paperSDK.getUser();\n      switch (user.status) {\n        case UserStatus.LOGGED_IN_WALLET_INITIALIZED:\n          {\n            this.user = user;\n            break;\n          }\n      }\n    }\n    const signer = await this.user?.wallet.getEthersJsSigner({\n      rpcEndpoint: this.options.chain.rpc[0] || \"\" // TODO: handle chain.rpc being empty array\n    });\n\n    if (!signer) {\n      throw new Error(\"Signer not found\");\n    }\n    _classPrivateFieldSet(this, _signer, signer);\n    return signer;\n  }\n  async isAuthorized() {\n    return false;\n  }\n  async switchChain(chainId) {\n    const chain = this.options.chains.find(c => c.chainId === chainId);\n    if (!chain) {\n      throw new Error(\"Chain not configured\");\n    }\n\n    // update chain in wallet\n    await this.user?.wallet.setChain({\n      chain: \"Ethereum\"\n    }); // just pass Ethereum no matter what chain we are going to connect\n\n    // update signer\n    _classPrivateFieldSet(this, _signer, await this.user?.wallet.getEthersJsSigner({\n      rpcEndpoint: chain.rpc[0] || \"\" // TODO: handle chain.rpc being empty array\n    }));\n\n    this.emit(\"change\", {\n      chain: {\n        id: chainId,\n        unsupported: false\n      }\n    });\n  }\n\n  // private getUser() {\n  //   if (!this.user) {\n  //     throw new Error(\"User not found\");\n  //   }\n  //   return this.user;\n  // }\n\n  async setupListeners() {\n    const provider = await this.getProvider();\n    if (provider.on) {\n      provider.on(\"accountsChanged\", this.onAccountsChanged);\n      provider.on(\"chainChanged\", this.onChainChanged);\n      provider.on(\"disconnect\", this.onDisconnect);\n    }\n  }\n  updateChains(chains) {\n    this.options.chains = chains;\n  }\n  async getEmail() {\n    await this.getProvider();\n    if (!this.user) {\n      throw new Error(\"No user found, Paper Wallet is not connected\");\n    }\n    return this.user.authDetails.email;\n  }\n}\n\nexport { PaperWalletConnector };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}