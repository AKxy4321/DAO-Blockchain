{"ast":null,"code":"/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { AnimationMixer, Box3, Euler, LoopPingPong, LoopRepeat, Matrix3, Object3D, PerspectiveCamera, Raycaster, Scene, Sphere, Vector2, Vector3 } from 'three';\nimport { CSS2DRenderer } from 'three/examples/jsm/renderers/CSS2DRenderer.js';\nimport { $currentGLTF, $model, $originalGltfJson } from '../features/scene-graph.js';\nimport { $renderer } from '../model-viewer-base.js';\nimport { normalizeUnit } from '../styles/conversions.js';\nimport { parseExpressions } from '../styles/parsers.js';\nimport { resolveDpr } from '../utilities.js';\nimport { Damper, SETTLING_TIME } from './Damper.js';\nimport { Hotspot } from './Hotspot.js';\nimport { reduceVertices } from './ModelUtils.js';\nimport { Shadow } from './Shadow.js';\nconst MIN_SHADOW_RATIO = 100;\nexport const IlluminationRole = {\n  Primary: 'primary',\n  Secondary: 'secondary'\n};\nconst view = new Vector3();\nconst target = new Vector3();\nconst normalWorld = new Vector3();\nconst raycaster = new Raycaster();\nconst vector3 = new Vector3();\nconst ndc = new Vector2();\n/**\n * A THREE.Scene object that takes a Model and CanvasHTMLElement and\n * constructs a framed scene based off of the canvas dimensions.\n * Provides lights and cameras to be used in a renderer.\n */\nexport class ModelScene extends Scene {\n  constructor(_ref) {\n    let {\n      canvas,\n      element,\n      width,\n      height\n    } = _ref;\n    super();\n    this.annotationRenderer = new CSS2DRenderer();\n    this.schemaElement = document.createElement('script');\n    this.width = 1;\n    this.height = 1;\n    this.aspect = 1;\n    this.scaleStep = 0;\n    this.renderCount = 0;\n    this.externalRenderer = null;\n    // These default camera values are never used, as they are reset once the\n    // model is loaded and framing is computed.\n    this.camera = new PerspectiveCamera(45, 1, 0.1, 100);\n    this.xrCamera = null;\n    this.url = null;\n    this.target = new Object3D();\n    this.animationNames = [];\n    this.boundingBox = new Box3();\n    this.boundingSphere = new Sphere();\n    this.size = new Vector3();\n    this.idealAspect = 0;\n    this.framedFoVDeg = 0;\n    this.shadow = null;\n    this.shadowIntensity = 0;\n    this.shadowSoftness = 1;\n    this.bakedShadows = new Set();\n    this.exposure = 1;\n    this.canScale = true;\n    this.isDirty = false;\n    this.goalTarget = new Vector3();\n    this.targetDamperX = new Damper();\n    this.targetDamperY = new Damper();\n    this.targetDamperZ = new Damper();\n    this._currentGLTF = null;\n    this._model = null;\n    this.cancelPendingSourceChange = null;\n    this.animationsByName = new Map();\n    this.currentAnimationAction = null;\n    this.name = 'ModelScene';\n    this.element = element;\n    this.canvas = canvas;\n    // These default camera values are never used, as they are reset once the\n    // model is loaded and framing is computed.\n    this.camera = new PerspectiveCamera(45, 1, 0.1, 100);\n    this.camera.name = 'MainCamera';\n    this.add(this.target);\n    this.setSize(width, height);\n    this.target.name = 'Target';\n    this.mixer = new AnimationMixer(this.target);\n    const {\n      domElement\n    } = this.annotationRenderer;\n    const {\n      style\n    } = domElement;\n    style.display = 'none';\n    style.pointerEvents = 'none';\n    style.position = 'absolute';\n    style.top = '0';\n    this.element.shadowRoot.querySelector('.default').appendChild(domElement);\n    this.schemaElement.setAttribute('type', 'application/ld+json');\n  }\n  /**\n   * Function to create the context lazily, as when there is only one\n   * <model-viewer> element, the renderer's 3D context can be displayed\n   * directly. This extra context is necessary to copy the renderings into when\n   * there are more than one.\n   */\n  get context() {\n    return this.canvas.getContext('2d');\n  }\n  getCamera() {\n    return this.xrCamera != null ? this.xrCamera : this.camera;\n  }\n  queueRender() {\n    this.isDirty = true;\n  }\n  shouldRender() {\n    return this.isDirty;\n  }\n  hasRendered() {\n    this.isDirty = false;\n  }\n  forceRescale() {\n    this.scaleStep = -1;\n    this.queueRender();\n  }\n  /**\n   * Pass in a THREE.Object3D to be controlled\n   * by this model.\n   */\n  async setObject(model) {\n    this.reset();\n    this._model = model;\n    this.target.add(model);\n    await this.setupScene();\n  }\n  /**\n   * Sets the model via URL.\n   */\n  async setSource(url) {\n    let progressCallback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : () => {};\n    if (!url || url === this.url) {\n      progressCallback(1);\n      return;\n    }\n    this.reset();\n    this.url = url;\n    if (this.externalRenderer != null) {\n      const framingInfo = await this.externalRenderer.load(progressCallback);\n      this.boundingSphere.radius = framingInfo.framedRadius;\n      this.idealAspect = framingInfo.fieldOfViewAspect;\n      return;\n    }\n    // If we have pending work due to a previous source change in progress,\n    // cancel it so that we do not incur a race condition:\n    if (this.cancelPendingSourceChange != null) {\n      this.cancelPendingSourceChange();\n      this.cancelPendingSourceChange = null;\n    }\n    let gltf;\n    try {\n      gltf = await new Promise(async (resolve, reject) => {\n        this.cancelPendingSourceChange = () => reject();\n        try {\n          const result = await this.element[$renderer].loader.load(url, this.element, progressCallback);\n          resolve(result);\n        } catch (error) {\n          reject(error);\n        }\n      });\n    } catch (error) {\n      if (error == null) {\n        // Loading was cancelled, so silently return\n        return;\n      }\n      throw error;\n    }\n    this.cancelPendingSourceChange = null;\n    this.reset();\n    this.url = url;\n    this._currentGLTF = gltf;\n    if (gltf != null) {\n      this._model = gltf.scene;\n      this.target.add(gltf.scene);\n    }\n    const {\n      animations\n    } = gltf;\n    const animationsByName = new Map();\n    const animationNames = [];\n    for (const animation of animations) {\n      animationsByName.set(animation.name, animation);\n      animationNames.push(animation.name);\n    }\n    this.animations = animations;\n    this.animationsByName = animationsByName;\n    this.animationNames = animationNames;\n    await this.setupScene();\n  }\n  async setupScene() {\n    this.applyTransform();\n    this.updateBoundingBox();\n    await this.updateFraming();\n    this.updateShadow();\n    this.setShadowIntensity(this.shadowIntensity);\n  }\n  reset() {\n    this.url = null;\n    this.queueRender();\n    if (this.shadow != null) {\n      this.shadow.setIntensity(0);\n    }\n    this.bakedShadows.clear();\n    const {\n      _model\n    } = this;\n    if (_model != null) {\n      _model.removeFromParent();\n      this._model = null;\n    }\n    const gltf = this._currentGLTF;\n    if (gltf != null) {\n      gltf.dispose();\n      this._currentGLTF = null;\n    }\n    if (this.currentAnimationAction != null) {\n      this.currentAnimationAction.stop();\n      this.currentAnimationAction = null;\n    }\n    this.mixer.stopAllAction();\n    this.mixer.uncacheRoot(this);\n  }\n  dispose() {\n    this.reset();\n    if (this.shadow != null) {\n      this.shadow.dispose();\n      this.shadow = null;\n    }\n    this.element[$currentGLTF] = null;\n    this.element[$originalGltfJson] = null;\n    this.element[$model] = null;\n  }\n  get currentGLTF() {\n    return this._currentGLTF;\n  }\n  /**\n   * Updates the ModelScene for a new container size in CSS pixels.\n   */\n  setSize(width, height) {\n    if (this.width === width && this.height === height) {\n      return;\n    }\n    this.width = Math.max(width, 1);\n    this.height = Math.max(height, 1);\n    this.annotationRenderer.setSize(width, height);\n    this.aspect = this.width / this.height;\n    if (this.externalRenderer != null) {\n      const dpr = resolveDpr();\n      this.externalRenderer.resize(width * dpr, height * dpr);\n    }\n    this.queueRender();\n  }\n  markBakedShadow(mesh) {\n    mesh.userData.shadow = true;\n    this.bakedShadows.add(mesh);\n  }\n  unmarkBakedShadow(mesh) {\n    mesh.userData.shadow = false;\n    mesh.visible = true;\n    this.bakedShadows.delete(mesh);\n    this.boundingBox.expandByObject(mesh);\n  }\n  findBakedShadows(group) {\n    const boundingBox = new Box3();\n    group.traverse(object => {\n      const mesh = object;\n      if (!mesh.isMesh) {\n        return;\n      }\n      const material = mesh.material;\n      if (!material.transparent) {\n        return;\n      }\n      boundingBox.setFromObject(mesh);\n      const size = boundingBox.getSize(vector3);\n      const minDim = Math.min(size.x, size.y, size.z);\n      const maxDim = Math.max(size.x, size.y, size.z);\n      if (maxDim < MIN_SHADOW_RATIO * minDim) {\n        return;\n      }\n      this.markBakedShadow(mesh);\n    });\n  }\n  checkBakedShadows() {\n    const {\n      min,\n      max\n    } = this.boundingBox;\n    const shadowBox = new Box3();\n    this.boundingBox.getSize(this.size);\n    for (const mesh of this.bakedShadows) {\n      shadowBox.setFromObject(mesh);\n      if (shadowBox.min.y < min.y + this.size.y / MIN_SHADOW_RATIO && shadowBox.min.x <= min.x && shadowBox.max.x >= max.x && shadowBox.min.z <= min.z && shadowBox.max.z >= max.z) {\n        // floor shadow\n        continue;\n      }\n      if (shadowBox.min.z < min.z + this.size.z / MIN_SHADOW_RATIO && shadowBox.min.x <= min.x && shadowBox.max.x >= max.x && shadowBox.min.y <= min.y && shadowBox.max.y >= max.y) {\n        // wall shadow\n        continue;\n      }\n      this.unmarkBakedShadow(mesh);\n    }\n  }\n  applyTransform() {\n    const {\n      model\n    } = this;\n    if (model == null) {\n      return;\n    }\n    const orientation = parseExpressions(this.element.orientation)[0].terms;\n    const roll = normalizeUnit(orientation[0]).number;\n    const pitch = normalizeUnit(orientation[1]).number;\n    const yaw = normalizeUnit(orientation[2]).number;\n    model.quaternion.setFromEuler(new Euler(pitch, yaw, roll, 'YXZ'));\n    const scale = parseExpressions(this.element.scale)[0].terms;\n    model.scale.set(scale[0].number, scale[1].number, scale[2].number);\n  }\n  updateBoundingBox() {\n    const {\n      model\n    } = this;\n    if (model == null) {\n      return;\n    }\n    this.target.remove(model);\n    this.findBakedShadows(model);\n    const bound = (box, vertex) => {\n      return box.expandByPoint(vertex);\n    };\n    this.setBakedShadowVisibility(false);\n    this.boundingBox = reduceVertices(model, bound, new Box3());\n    // If there's nothing but the baked shadow, then it's not a baked shadow.\n    if (this.boundingBox.isEmpty()) {\n      this.setBakedShadowVisibility(true);\n      this.bakedShadows.forEach(mesh => this.unmarkBakedShadow(mesh));\n      this.boundingBox = reduceVertices(model, bound, new Box3());\n    }\n    this.checkBakedShadows();\n    this.setBakedShadowVisibility();\n    this.boundingBox.getSize(this.size);\n    this.target.add(model);\n  }\n  /**\n   * Calculates the boundingSphere and idealAspect that allows the 3D\n   * object to be framed tightly in a 2D window of any aspect ratio without\n   * clipping at any camera orbit. The camera's center target point can be\n   * optionally specified. If no center is specified, it defaults to the center\n   * of the bounding box, which means asymmetric models will tend to be tight on\n   * one side instead of both. Proper choice of center can correct this.\n   */\n  async updateFraming() {\n    const {\n      model\n    } = this;\n    if (model == null) {\n      return;\n    }\n    this.target.remove(model);\n    this.setBakedShadowVisibility(false);\n    const {\n      center\n    } = this.boundingSphere;\n    this.element.requestUpdate('cameraTarget');\n    await this.element.updateComplete;\n    center.copy(this.getTarget());\n    const radiusSquared = (value, vertex) => {\n      return Math.max(value, center.distanceToSquared(vertex));\n    };\n    this.boundingSphere.radius = Math.sqrt(reduceVertices(model, radiusSquared, 0));\n    const horizontalTanFov = (value, vertex) => {\n      vertex.sub(center);\n      const radiusXZ = Math.sqrt(vertex.x * vertex.x + vertex.z * vertex.z);\n      return Math.max(value, radiusXZ / (this.idealCameraDistance() - Math.abs(vertex.y)));\n    };\n    this.idealAspect = reduceVertices(model, horizontalTanFov, 0) / Math.tan(this.framedFoVDeg / 2 * Math.PI / 180);\n    this.setBakedShadowVisibility();\n    this.target.add(model);\n  }\n  setBakedShadowVisibility() {\n    let visible = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.shadowIntensity <= 0;\n    for (const shadow of this.bakedShadows) {\n      shadow.visible = visible;\n    }\n  }\n  idealCameraDistance() {\n    const halfFovRad = this.framedFoVDeg / 2 * Math.PI / 180;\n    return this.boundingSphere.radius / Math.sin(halfFovRad);\n  }\n  /**\n   * Set's the framedFieldOfView based on the aspect ratio of the window in\n   * order to keep the model fully visible at any camera orientation.\n   */\n  adjustedFoV(fovDeg) {\n    const vertical = Math.tan(fovDeg / 2 * Math.PI / 180) * Math.max(1, this.idealAspect / this.aspect);\n    return 2 * Math.atan(vertical) * 180 / Math.PI;\n  }\n  getNDC(clientX, clientY) {\n    if (this.xrCamera != null) {\n      ndc.set(clientX / window.screen.width, clientY / window.screen.height);\n    } else {\n      const rect = this.element.getBoundingClientRect();\n      ndc.set((clientX - rect.x) / this.width, (clientY - rect.y) / this.height);\n    }\n    ndc.multiplyScalar(2).subScalar(1);\n    ndc.y *= -1;\n    return ndc;\n  }\n  /**\n   * Returns the size of the corresponding canvas element.\n   */\n  getSize() {\n    return {\n      width: this.width,\n      height: this.height\n    };\n  }\n  setEnvironmentAndSkybox(environment, skybox) {\n    if (this.element[$renderer].arRenderer.presentedScene === this) {\n      return;\n    }\n    this.environment = environment;\n    this.background = skybox;\n    this.queueRender();\n  }\n  /**\n   * Sets the point in model coordinates the model should orbit/pivot around.\n   */\n  setTarget(modelX, modelY, modelZ) {\n    this.goalTarget.set(-modelX, -modelY, -modelZ);\n  }\n  /**\n   * Set the decay time of, affects the speed of target transitions.\n   */\n  setTargetDamperDecayTime(decayMilliseconds) {\n    this.targetDamperX.setDecayTime(decayMilliseconds);\n    this.targetDamperY.setDecayTime(decayMilliseconds);\n    this.targetDamperZ.setDecayTime(decayMilliseconds);\n  }\n  /**\n   * Gets the point in model coordinates the model should orbit/pivot around.\n   */\n  getTarget() {\n    return this.goalTarget.clone().multiplyScalar(-1);\n  }\n  /**\n   * Shifts the model to the target point immediately instead of easing in.\n   */\n  jumpToGoal() {\n    this.updateTarget(SETTLING_TIME);\n  }\n  /**\n   * This should be called every frame with the frame delta to cause the target\n   * to transition to its set point.\n   */\n  updateTarget(delta) {\n    const goal = this.goalTarget;\n    const target = this.target.position;\n    if (!goal.equals(target)) {\n      const normalization = this.boundingSphere.radius / 10;\n      let {\n        x,\n        y,\n        z\n      } = target;\n      x = this.targetDamperX.update(x, goal.x, delta, normalization);\n      y = this.targetDamperY.update(y, goal.y, delta, normalization);\n      z = this.targetDamperZ.update(z, goal.z, delta, normalization);\n      this.target.position.set(x, y, z);\n      this.target.updateMatrixWorld();\n      this.queueRender();\n      return true;\n    } else {\n      return false;\n    }\n  }\n  /**\n   * Yaw the +z (front) of the model toward the indicated world coordinates.\n   */\n  pointTowards(worldX, worldZ) {\n    const {\n      x,\n      z\n    } = this.position;\n    this.yaw = Math.atan2(worldX - x, worldZ - z);\n  }\n  get model() {\n    return this._model;\n  }\n  /**\n   * Yaw is the scene's orientation about the y-axis, around the rotation\n   * center.\n   */\n  set yaw(radiansY) {\n    this.rotation.y = radiansY;\n    this.queueRender();\n  }\n  get yaw() {\n    return this.rotation.y;\n  }\n  set animationTime(value) {\n    this.mixer.setTime(value);\n    this.queueShadowRender();\n  }\n  get animationTime() {\n    if (this.currentAnimationAction != null) {\n      const loopCount = Math.max(this.currentAnimationAction._loopCount, 0);\n      if (this.currentAnimationAction.loop === LoopPingPong && (loopCount & 1) === 1) {\n        return this.duration - this.currentAnimationAction.time;\n      } else {\n        return this.currentAnimationAction.time;\n      }\n    }\n    return 0;\n  }\n  set animationTimeScale(value) {\n    this.mixer.timeScale = value;\n  }\n  get animationTimeScale() {\n    return this.mixer.timeScale;\n  }\n  get duration() {\n    if (this.currentAnimationAction != null && this.currentAnimationAction.getClip()) {\n      return this.currentAnimationAction.getClip().duration;\n    }\n    return 0;\n  }\n  get hasActiveAnimation() {\n    return this.currentAnimationAction != null;\n  }\n  /**\n   * Plays an animation if there are any associated with the current model.\n   * Accepts an optional string name of an animation to play. If no name is\n   * provided, or if no animation is found by the given name, always falls back\n   * to playing the first animation.\n   */\n  playAnimation() {\n    let name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    let crossfadeTime = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let loopMode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : LoopRepeat;\n    let repetitionCount = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Infinity;\n    if (this._currentGLTF == null) {\n      return;\n    }\n    const {\n      animations\n    } = this;\n    if (animations == null || animations.length === 0) {\n      console.warn(\"Cannot play animation (model does not have any animations)\");\n      return;\n    }\n    let animationClip = null;\n    if (name != null) {\n      animationClip = this.animationsByName.get(name);\n      if (animationClip == null) {\n        const parsedAnimationIndex = parseInt(name);\n        if (!isNaN(parsedAnimationIndex) && parsedAnimationIndex >= 0 && parsedAnimationIndex < animations.length) {\n          animationClip = animations[parsedAnimationIndex];\n        }\n      }\n    }\n    if (animationClip == null) {\n      animationClip = animations[0];\n    }\n    try {\n      const {\n        currentAnimationAction: lastAnimationAction\n      } = this;\n      const action = this.mixer.clipAction(animationClip, this);\n      this.currentAnimationAction = action;\n      if (this.element.paused) {\n        this.mixer.stopAllAction();\n      } else {\n        action.paused = false;\n        if (lastAnimationAction != null && action !== lastAnimationAction) {\n          action.crossFadeFrom(lastAnimationAction, crossfadeTime, false);\n        } else if (this.animationTimeScale > 0 && this.animationTime == this.duration) {\n          // This is a workaround for what I believe is a three.js bug.\n          this.animationTime = 0;\n        }\n      }\n      action.setLoop(loopMode, repetitionCount);\n      action.enabled = true;\n      action.clampWhenFinished = true;\n      action.play();\n    } catch (error) {\n      console.error(error);\n    }\n  }\n  stopAnimation() {\n    this.currentAnimationAction = null;\n    this.mixer.stopAllAction();\n  }\n  updateAnimation(step) {\n    this.mixer.update(step);\n    this.queueShadowRender();\n  }\n  subscribeMixerEvent(event, callback) {\n    this.mixer.addEventListener(event, callback);\n  }\n  /**\n   * Call if the object has been changed in such a way that the shadow's shape\n   * has changed (not a rotation about the Y axis).\n   */\n  updateShadow() {\n    const shadow = this.shadow;\n    if (shadow != null) {\n      const side = this.element.arPlacement === 'wall' ? 'back' : 'bottom';\n      shadow.setScene(this, this.shadowSoftness, side);\n      shadow.needsUpdate = true;\n    }\n  }\n  renderShadow(renderer) {\n    const shadow = this.shadow;\n    if (shadow != null && shadow.needsUpdate == true) {\n      shadow.render(renderer, this);\n      shadow.needsUpdate = false;\n    }\n  }\n  queueShadowRender() {\n    if (this.shadow != null) {\n      this.shadow.needsUpdate = true;\n    }\n  }\n  /**\n   * Sets the shadow's intensity, lazily creating the shadow as necessary.\n   */\n  setShadowIntensity(shadowIntensity) {\n    this.shadowIntensity = shadowIntensity;\n    if (this._currentGLTF == null) {\n      return;\n    }\n    this.setBakedShadowVisibility();\n    if (shadowIntensity <= 0 && this.shadow == null) {\n      return;\n    }\n    if (this.shadow == null) {\n      const side = this.element.arPlacement === 'wall' ? 'back' : 'bottom';\n      this.shadow = new Shadow(this, this.shadowSoftness, side);\n    }\n    this.shadow.setIntensity(shadowIntensity);\n  }\n  /**\n   * Sets the shadow's softness by mapping a [0, 1] softness parameter to the\n   * shadow's resolution. This involves reallocation, so it should not be\n   * changed frequently. Softer shadows are cheaper to render.\n   */\n  setShadowSoftness(softness) {\n    this.shadowSoftness = softness;\n    const shadow = this.shadow;\n    if (shadow != null) {\n      shadow.setSoftness(softness);\n    }\n  }\n  /**\n   * Shift the floor vertically from the bottom of the model's bounding box by\n   * offset (should generally be negative).\n   */\n  setShadowOffset(offset) {\n    const shadow = this.shadow;\n    if (shadow != null) {\n      shadow.setOffset(offset);\n    }\n  }\n  get raycaster() {\n    return raycaster;\n  }\n  /**\n   * This method returns the world position, model-space normal and texture\n   * coordinate of the point on the mesh corresponding to the input pixel\n   * coordinates given relative to the model-viewer element. If the mesh\n   * is not hit, the result is null.\n   */\n  positionAndNormalFromPoint(ndcPosition) {\n    let object = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this;\n    this.raycaster.setFromCamera(ndcPosition, this.getCamera());\n    const hits = this.raycaster.intersectObject(object, true);\n    const hit = hits.find(hit => hit.object.visible && !hit.object.userData.shadow);\n    if (hit == null || hit.face == null) {\n      return null;\n    }\n    if (hit.uv == null) {\n      return {\n        position: hit.point,\n        normal: hit.face.normal,\n        uv: null\n      };\n    }\n    hit.face.normal.applyNormalMatrix(new Matrix3().getNormalMatrix(hit.object.matrixWorld));\n    return {\n      position: hit.point,\n      normal: hit.face.normal,\n      uv: hit.uv\n    };\n  }\n  /**\n   * The following methods are for operating on the set of Hotspot objects\n   * attached to the scene. These come from DOM elements, provided to slots by\n   * the Annotation Mixin.\n   */\n  addHotspot(hotspot) {\n    this.target.add(hotspot);\n    // This happens automatically in render(), but we do it early so that\n    // the slots appear in the shadow DOM and the elements get attached,\n    // allowing us to dispatch events on them.\n    this.annotationRenderer.domElement.appendChild(hotspot.element);\n  }\n  removeHotspot(hotspot) {\n    this.target.remove(hotspot);\n  }\n  /**\n   * Helper method to apply a function to all hotspots.\n   */\n  forHotspots(func) {\n    const {\n      children\n    } = this.target;\n    for (let i = 0, l = children.length; i < l; i++) {\n      const hotspot = children[i];\n      if (hotspot instanceof Hotspot) {\n        func(hotspot);\n      }\n    }\n  }\n  /**\n   * Update the CSS visibility of the hotspots based on whether their normals\n   * point toward the camera.\n   */\n  updateHotspots(viewerPosition) {\n    this.forHotspots(hotspot => {\n      view.copy(viewerPosition);\n      target.setFromMatrixPosition(hotspot.matrixWorld);\n      view.sub(target);\n      normalWorld.copy(hotspot.normal).transformDirection(this.target.matrixWorld);\n      if (view.dot(normalWorld) < 0) {\n        hotspot.hide();\n      } else {\n        hotspot.show();\n      }\n    });\n  }\n  /**\n   * Rotate all hotspots to an absolute orientation given by the input number of\n   * radians. Zero returns them to upright.\n   */\n  orientHotspots(radians) {\n    this.forHotspots(hotspot => {\n      hotspot.orient(radians);\n    });\n  }\n  /**\n   * Set the rendering visibility of all hotspots. This is used to hide them\n   * during transitions and such.\n   */\n  setHotspotsVisibility(visible) {\n    this.forHotspots(hotspot => {\n      hotspot.visible = visible;\n    });\n  }\n  updateSchema(src) {\n    var _a;\n    const {\n      schemaElement,\n      element\n    } = this;\n    const {\n      alt,\n      poster,\n      iosSrc\n    } = element;\n    if (src != null) {\n      const encoding = [{\n        '@type': 'MediaObject',\n        contentUrl: src,\n        encodingFormat: ((_a = src.split('.').pop()) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === 'gltf' ? 'model/gltf+json' : 'model/gltf-binary'\n      }];\n      if (iosSrc) {\n        encoding.push({\n          '@type': 'MediaObject',\n          contentUrl: iosSrc,\n          encodingFormat: 'model/vnd.usdz+zip'\n        });\n      }\n      const structuredData = {\n        '@context': 'http://schema.org/',\n        '@type': '3DModel',\n        image: poster !== null && poster !== void 0 ? poster : undefined,\n        name: alt !== null && alt !== void 0 ? alt : undefined,\n        encoding\n      };\n      schemaElement.textContent = JSON.stringify(structuredData);\n      document.head.appendChild(schemaElement);\n    } else if (schemaElement.parentElement != null) {\n      schemaElement.parentElement.removeChild(schemaElement);\n    }\n  }\n}","map":{"version":3,"names":["AnimationMixer","Box3","Euler","LoopPingPong","LoopRepeat","Matrix3","Object3D","PerspectiveCamera","Raycaster","Scene","Sphere","Vector2","Vector3","CSS2DRenderer","$currentGLTF","$model","$originalGltfJson","$renderer","normalizeUnit","parseExpressions","resolveDpr","Damper","SETTLING_TIME","Hotspot","reduceVertices","Shadow","MIN_SHADOW_RATIO","IlluminationRole","Primary","Secondary","view","target","normalWorld","raycaster","vector3","ndc","ModelScene","constructor","_ref","canvas","element","width","height","annotationRenderer","schemaElement","document","createElement","aspect","scaleStep","renderCount","externalRenderer","camera","xrCamera","url","animationNames","boundingBox","boundingSphere","size","idealAspect","framedFoVDeg","shadow","shadowIntensity","shadowSoftness","bakedShadows","Set","exposure","canScale","isDirty","goalTarget","targetDamperX","targetDamperY","targetDamperZ","_currentGLTF","_model","cancelPendingSourceChange","animationsByName","Map","currentAnimationAction","name","add","setSize","mixer","domElement","style","display","pointerEvents","position","top","shadowRoot","querySelector","appendChild","setAttribute","context","getContext","getCamera","queueRender","shouldRender","hasRendered","forceRescale","setObject","model","reset","setupScene","setSource","progressCallback","arguments","length","undefined","framingInfo","load","radius","framedRadius","fieldOfViewAspect","gltf","Promise","resolve","reject","result","loader","error","scene","animations","animation","set","push","applyTransform","updateBoundingBox","updateFraming","updateShadow","setShadowIntensity","setIntensity","clear","removeFromParent","dispose","stop","stopAllAction","uncacheRoot","currentGLTF","Math","max","dpr","resize","markBakedShadow","mesh","userData","unmarkBakedShadow","visible","delete","expandByObject","findBakedShadows","group","traverse","object","isMesh","material","transparent","setFromObject","getSize","minDim","min","x","y","z","maxDim","checkBakedShadows","shadowBox","orientation","terms","roll","number","pitch","yaw","quaternion","setFromEuler","scale","remove","bound","box","vertex","expandByPoint","setBakedShadowVisibility","isEmpty","forEach","center","requestUpdate","updateComplete","copy","getTarget","radiusSquared","value","distanceToSquared","sqrt","horizontalTanFov","sub","radiusXZ","idealCameraDistance","abs","tan","PI","halfFovRad","sin","adjustedFoV","fovDeg","vertical","atan","getNDC","clientX","clientY","window","screen","rect","getBoundingClientRect","multiplyScalar","subScalar","setEnvironmentAndSkybox","environment","skybox","arRenderer","presentedScene","background","setTarget","modelX","modelY","modelZ","setTargetDamperDecayTime","decayMilliseconds","setDecayTime","clone","jumpToGoal","updateTarget","delta","goal","equals","normalization","update","updateMatrixWorld","pointTowards","worldX","worldZ","atan2","radiansY","rotation","animationTime","setTime","queueShadowRender","loopCount","_loopCount","loop","duration","time","animationTimeScale","timeScale","getClip","hasActiveAnimation","playAnimation","crossfadeTime","loopMode","repetitionCount","Infinity","console","warn","animationClip","get","parsedAnimationIndex","parseInt","isNaN","lastAnimationAction","action","clipAction","paused","crossFadeFrom","setLoop","enabled","clampWhenFinished","play","stopAnimation","updateAnimation","step","subscribeMixerEvent","event","callback","addEventListener","side","arPlacement","setScene","needsUpdate","renderShadow","renderer","render","setShadowSoftness","softness","setSoftness","setShadowOffset","offset","setOffset","positionAndNormalFromPoint","ndcPosition","setFromCamera","hits","intersectObject","hit","find","face","uv","point","normal","applyNormalMatrix","getNormalMatrix","matrixWorld","addHotspot","hotspot","removeHotspot","forHotspots","func","children","i","l","updateHotspots","viewerPosition","setFromMatrixPosition","transformDirection","dot","hide","show","orientHotspots","radians","orient","setHotspotsVisibility","updateSchema","src","alt","poster","iosSrc","encoding","contentUrl","encodingFormat","_a","split","pop","toLowerCase","structuredData","image","textContent","JSON","stringify","head","parentElement","removeChild"],"sources":["C:\\Misc\\Documents\\Career\\FinTech\\BlockChain\\FrontEnd\\buildspace-dao-starter\\node_modules\\@google\\model-viewer\\src\\three-components\\ModelScene.ts"],"sourcesContent":["/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {AnimationAction, AnimationClip, AnimationMixer, Box3, Camera, Euler, Event as ThreeEvent, LoopPingPong, LoopRepeat, Material, Matrix3, Mesh, Object3D, PerspectiveCamera, Raycaster, Scene, Sphere, Texture, Vector2, Vector3, WebGLRenderer} from 'three';\nimport {CSS2DRenderer} from 'three/examples/jsm/renderers/CSS2DRenderer.js';\n\nimport {$currentGLTF, $model, $originalGltfJson} from '../features/scene-graph.js';\nimport ModelViewerElementBase, {$renderer, RendererInterface} from '../model-viewer-base.js';\nimport {ModelViewerElement} from '../model-viewer.js';\nimport {normalizeUnit} from '../styles/conversions.js';\nimport {NumberNode, parseExpressions} from '../styles/parsers.js';\nimport {resolveDpr} from '../utilities.js';\n\nimport {Damper, SETTLING_TIME} from './Damper.js';\nimport {ModelViewerGLTFInstance} from './gltf-instance/ModelViewerGLTFInstance.js';\nimport {Hotspot} from './Hotspot.js';\nimport {reduceVertices} from './ModelUtils.js';\nimport {Shadow} from './Shadow.js';\n\nconst MIN_SHADOW_RATIO = 100;\n\nexport interface ModelLoadEvent extends ThreeEvent {\n  url: string;\n}\n\nexport interface ModelSceneConfig {\n  element: ModelViewerElementBase;\n  canvas: HTMLCanvasElement;\n  width: number;\n  height: number;\n}\n\nexport type IlluminationRole = 'primary'|'secondary';\n\nexport const IlluminationRole: {[index: string]: IlluminationRole} = {\n  Primary: 'primary',\n  Secondary: 'secondary'\n};\n\nconst view = new Vector3();\nconst target = new Vector3();\nconst normalWorld = new Vector3();\n\nconst raycaster = new Raycaster();\nconst vector3 = new Vector3();\nconst ndc = new Vector2();\n\n/**\n * A THREE.Scene object that takes a Model and CanvasHTMLElement and\n * constructs a framed scene based off of the canvas dimensions.\n * Provides lights and cameras to be used in a renderer.\n */\nexport class ModelScene extends Scene {\n  public element: ModelViewerElement;\n  public canvas: HTMLCanvasElement;\n  public annotationRenderer = new CSS2DRenderer();\n  public schemaElement = document.createElement('script');\n  public width = 1;\n  public height = 1;\n  public aspect = 1;\n  public scaleStep = 0;\n  public renderCount = 0;\n  public externalRenderer: RendererInterface|null = null;\n\n  // These default camera values are never used, as they are reset once the\n  // model is loaded and framing is computed.\n  public camera = new PerspectiveCamera(45, 1, 0.1, 100);\n  public xrCamera: Camera|null = null;\n\n  public url: string|null = null;\n  public target = new Object3D();\n  public animationNames: Array<string> = [];\n  public boundingBox = new Box3();\n  public boundingSphere = new Sphere();\n  public size = new Vector3();\n  public idealAspect = 0;\n  public framedFoVDeg = 0;\n\n  public shadow: Shadow|null = null;\n  public shadowIntensity = 0;\n  public shadowSoftness = 1;\n  public bakedShadows = new Set<Mesh>();\n\n  public exposure = 1;\n  public canScale = true;\n\n  private isDirty = false;\n\n  private goalTarget = new Vector3();\n  private targetDamperX = new Damper();\n  private targetDamperY = new Damper();\n  private targetDamperZ = new Damper();\n\n  private _currentGLTF: ModelViewerGLTFInstance|null = null;\n  private _model: Object3D|null = null;\n  private mixer: AnimationMixer;\n  private cancelPendingSourceChange: (() => void)|null = null;\n  private animationsByName: Map<string, AnimationClip> = new Map();\n  private currentAnimationAction: AnimationAction|null = null;\n\n  constructor({canvas, element, width, height}: ModelSceneConfig) {\n    super();\n\n    this.name = 'ModelScene';\n\n    this.element = element as ModelViewerElement;\n    this.canvas = canvas;\n\n    // These default camera values are never used, as they are reset once the\n    // model is loaded and framing is computed.\n    this.camera = new PerspectiveCamera(45, 1, 0.1, 100);\n    this.camera.name = 'MainCamera';\n\n    this.add(this.target);\n\n    this.setSize(width, height);\n\n    this.target.name = 'Target';\n\n    this.mixer = new AnimationMixer(this.target);\n\n    const {domElement} = this.annotationRenderer;\n    const {style} = domElement;\n    style.display = 'none';\n    style.pointerEvents = 'none';\n    style.position = 'absolute';\n    style.top = '0';\n    this.element.shadowRoot!.querySelector('.default')!.appendChild(domElement);\n\n    this.schemaElement.setAttribute('type', 'application/ld+json');\n  }\n\n  /**\n   * Function to create the context lazily, as when there is only one\n   * <model-viewer> element, the renderer's 3D context can be displayed\n   * directly. This extra context is necessary to copy the renderings into when\n   * there are more than one.\n   */\n  get context() {\n    return this.canvas.getContext('2d');\n  }\n\n  getCamera(): Camera {\n    return this.xrCamera != null ? this.xrCamera : this.camera;\n  }\n\n  queueRender() {\n    this.isDirty = true;\n  }\n\n  shouldRender() {\n    return this.isDirty;\n  }\n\n  hasRendered() {\n    this.isDirty = false;\n  }\n\n  forceRescale() {\n    this.scaleStep = -1;\n    this.queueRender();\n  }\n\n  /**\n   * Pass in a THREE.Object3D to be controlled\n   * by this model.\n   */\n  async setObject(model: Object3D) {\n    this.reset();\n    this._model = model;\n    this.target.add(model);\n    await this.setupScene();\n  }\n\n  /**\n   * Sets the model via URL.\n   */\n\n  async setSource(\n      url: string|null,\n      progressCallback: (progress: number) => void = () => {}) {\n    if (!url || url === this.url) {\n      progressCallback(1);\n      return;\n    }\n    this.reset();\n    this.url = url;\n\n    if (this.externalRenderer != null) {\n      const framingInfo = await this.externalRenderer.load(progressCallback);\n\n      this.boundingSphere.radius = framingInfo.framedRadius;\n      this.idealAspect = framingInfo.fieldOfViewAspect;\n      return;\n    }\n\n    // If we have pending work due to a previous source change in progress,\n    // cancel it so that we do not incur a race condition:\n    if (this.cancelPendingSourceChange != null) {\n      this.cancelPendingSourceChange!();\n      this.cancelPendingSourceChange = null;\n    }\n\n    let gltf: ModelViewerGLTFInstance;\n\n    try {\n      gltf = await new Promise<ModelViewerGLTFInstance>(\n          async (resolve, reject) => {\n            this.cancelPendingSourceChange = () => reject();\n            try {\n              const result = await this.element[$renderer].loader.load(\n                  url, this.element, progressCallback);\n              resolve(result);\n            } catch (error) {\n              reject(error);\n            }\n          });\n    } catch (error) {\n      if (error == null) {\n        // Loading was cancelled, so silently return\n        return;\n      }\n\n      throw error;\n    }\n\n    this.cancelPendingSourceChange = null;\n    this.reset();\n    this.url = url;\n    this._currentGLTF = gltf;\n\n    if (gltf != null) {\n      this._model = gltf.scene;\n      this.target.add(gltf.scene);\n    }\n\n    const {animations} = gltf!;\n    const animationsByName = new Map();\n    const animationNames = [];\n\n    for (const animation of animations) {\n      animationsByName.set(animation.name, animation);\n      animationNames.push(animation.name);\n    }\n\n    this.animations = animations;\n    this.animationsByName = animationsByName;\n    this.animationNames = animationNames;\n\n    await this.setupScene();\n  }\n\n  private async setupScene() {\n    this.applyTransform();\n    this.updateBoundingBox();\n\n    await this.updateFraming();\n\n    this.updateShadow();\n    this.setShadowIntensity(this.shadowIntensity);\n  }\n\n  reset() {\n    this.url = null;\n    this.queueRender();\n    if (this.shadow != null) {\n      this.shadow.setIntensity(0);\n    }\n    this.bakedShadows.clear();\n\n    const {_model} = this;\n    if (_model != null) {\n      _model.removeFromParent();\n      this._model = null;\n    }\n\n    const gltf = this._currentGLTF;\n    if (gltf != null) {\n      gltf.dispose();\n      this._currentGLTF = null;\n    }\n\n    if (this.currentAnimationAction != null) {\n      this.currentAnimationAction.stop();\n      this.currentAnimationAction = null;\n    }\n\n    this.mixer.stopAllAction();\n    this.mixer.uncacheRoot(this);\n  }\n\n  dispose() {\n    this.reset();\n    if (this.shadow != null) {\n      this.shadow.dispose();\n      this.shadow = null;\n    }\n    (this.element as any)[$currentGLTF] = null;\n    (this.element as any)[$originalGltfJson] = null;\n    (this.element as any)[$model] = null;\n  }\n\n  get currentGLTF() {\n    return this._currentGLTF;\n  }\n\n  /**\n   * Updates the ModelScene for a new container size in CSS pixels.\n   */\n  setSize(width: number, height: number) {\n    if (this.width === width && this.height === height) {\n      return;\n    }\n    this.width = Math.max(width, 1);\n    this.height = Math.max(height, 1);\n    this.annotationRenderer.setSize(width, height);\n\n    this.aspect = this.width / this.height;\n\n    if (this.externalRenderer != null) {\n      const dpr = resolveDpr();\n      this.externalRenderer.resize(width * dpr, height * dpr);\n    }\n\n    this.queueRender();\n  }\n\n  markBakedShadow(mesh: Mesh) {\n    mesh.userData.shadow = true;\n    this.bakedShadows.add(mesh);\n  }\n\n  unmarkBakedShadow(mesh: Mesh) {\n    mesh.userData.shadow = false;\n    mesh.visible = true;\n    this.bakedShadows.delete(mesh);\n    this.boundingBox.expandByObject(mesh);\n  }\n\n  findBakedShadows(group: Object3D) {\n    const boundingBox = new Box3();\n\n    group.traverse((object: Object3D) => {\n      const mesh = object as Mesh;\n      if (!mesh.isMesh) {\n        return;\n      }\n      const material = mesh.material as Material;\n      if (!material.transparent) {\n        return;\n      }\n      boundingBox.setFromObject(mesh);\n      const size = boundingBox.getSize(vector3);\n      const minDim = Math.min(size.x, size.y, size.z);\n      const maxDim = Math.max(size.x, size.y, size.z);\n      if (maxDim < MIN_SHADOW_RATIO * minDim) {\n        return;\n      }\n      this.markBakedShadow(mesh);\n    });\n  }\n\n  checkBakedShadows() {\n    const {min, max} = this.boundingBox;\n    const shadowBox = new Box3();\n    this.boundingBox.getSize(this.size);\n\n    for (const mesh of this.bakedShadows) {\n      shadowBox.setFromObject(mesh);\n      if (shadowBox.min.y < min.y + this.size.y / MIN_SHADOW_RATIO &&\n          shadowBox.min.x <= min.x && shadowBox.max.x >= max.x &&\n          shadowBox.min.z <= min.z && shadowBox.max.z >= max.z) {\n        // floor shadow\n        continue;\n      }\n      if (shadowBox.min.z < min.z + this.size.z / MIN_SHADOW_RATIO &&\n          shadowBox.min.x <= min.x && shadowBox.max.x >= max.x &&\n          shadowBox.min.y <= min.y && shadowBox.max.y >= max.y) {\n        // wall shadow\n        continue;\n      }\n      this.unmarkBakedShadow(mesh);\n    }\n  }\n\n  applyTransform() {\n    const {model} = this;\n    if (model == null) {\n      return;\n    }\n    const orientation = parseExpressions(this.element.orientation)[0]\n                            .terms as [NumberNode, NumberNode, NumberNode];\n\n    const roll = normalizeUnit(orientation[0]).number;\n    const pitch = normalizeUnit(orientation[1]).number;\n    const yaw = normalizeUnit(orientation[2]).number;\n\n    model.quaternion.setFromEuler(new Euler(pitch, yaw, roll, 'YXZ'));\n\n    const scale = parseExpressions(this.element.scale)[0]\n                      .terms as [NumberNode, NumberNode, NumberNode];\n\n    model.scale.set(scale[0].number, scale[1].number, scale[2].number);\n  }\n\n  updateBoundingBox() {\n    const {model} = this;\n    if (model == null) {\n      return;\n    }\n    this.target.remove(model);\n\n    this.findBakedShadows(model);\n\n    const bound = (box: Box3, vertex: Vector3): Box3 => {\n      return box.expandByPoint(vertex);\n    };\n    this.setBakedShadowVisibility(false);\n    this.boundingBox = reduceVertices(model, bound, new Box3());\n    // If there's nothing but the baked shadow, then it's not a baked shadow.\n    if (this.boundingBox.isEmpty()) {\n      this.setBakedShadowVisibility(true);\n      this.bakedShadows.forEach((mesh) => this.unmarkBakedShadow(mesh));\n      this.boundingBox = reduceVertices(model, bound, new Box3());\n    }\n    this.checkBakedShadows();\n    this.setBakedShadowVisibility();\n\n    this.boundingBox.getSize(this.size);\n\n    this.target.add(model);\n  }\n\n  /**\n   * Calculates the boundingSphere and idealAspect that allows the 3D\n   * object to be framed tightly in a 2D window of any aspect ratio without\n   * clipping at any camera orbit. The camera's center target point can be\n   * optionally specified. If no center is specified, it defaults to the center\n   * of the bounding box, which means asymmetric models will tend to be tight on\n   * one side instead of both. Proper choice of center can correct this.\n   */\n  async updateFraming() {\n    const {model} = this;\n    if (model == null) {\n      return;\n    }\n    this.target.remove(model);\n    this.setBakedShadowVisibility(false);\n    const {center} = this.boundingSphere;\n\n    this.element.requestUpdate('cameraTarget');\n    await this.element.updateComplete;\n    center.copy(this.getTarget());\n\n    const radiusSquared = (value: number, vertex: Vector3): number => {\n      return Math.max(value, center!.distanceToSquared(vertex));\n    };\n    this.boundingSphere.radius =\n        Math.sqrt(reduceVertices(model, radiusSquared, 0));\n\n    const horizontalTanFov = (value: number, vertex: Vector3): number => {\n      vertex.sub(center!);\n      const radiusXZ = Math.sqrt(vertex.x * vertex.x + vertex.z * vertex.z);\n      return Math.max(\n          value, radiusXZ / (this.idealCameraDistance() - Math.abs(vertex.y)));\n    };\n    this.idealAspect = reduceVertices(model, horizontalTanFov, 0) /\n        Math.tan((this.framedFoVDeg / 2) * Math.PI / 180);\n\n    this.setBakedShadowVisibility();\n    this.target.add(model);\n  }\n\n  setBakedShadowVisibility(visible: boolean = this.shadowIntensity <= 0) {\n    for (const shadow of this.bakedShadows) {\n      shadow.visible = visible;\n    }\n  }\n\n  idealCameraDistance(): number {\n    const halfFovRad = (this.framedFoVDeg / 2) * Math.PI / 180;\n    return this.boundingSphere.radius / Math.sin(halfFovRad);\n  }\n\n  /**\n   * Set's the framedFieldOfView based on the aspect ratio of the window in\n   * order to keep the model fully visible at any camera orientation.\n   */\n  adjustedFoV(fovDeg: number): number {\n    const vertical = Math.tan((fovDeg / 2) * Math.PI / 180) *\n        Math.max(1, this.idealAspect / this.aspect);\n    return 2 * Math.atan(vertical) * 180 / Math.PI;\n  }\n\n  getNDC(clientX: number, clientY: number): Vector2 {\n    if (this.xrCamera != null) {\n      ndc.set(clientX / window.screen.width, clientY / window.screen.height);\n    } else {\n      const rect = this.element.getBoundingClientRect();\n      ndc.set(\n          (clientX - rect.x) / this.width, (clientY - rect.y) / this.height);\n    }\n\n    ndc.multiplyScalar(2).subScalar(1);\n    ndc.y *= -1;\n    return ndc;\n  }\n\n  /**\n   * Returns the size of the corresponding canvas element.\n   */\n  getSize(): {width: number, height: number} {\n    return {width: this.width, height: this.height};\n  }\n\n  setEnvironmentAndSkybox(environment: Texture|null, skybox: Texture|null) {\n    if (this.element[$renderer].arRenderer.presentedScene === this) {\n      return;\n    }\n    this.environment = environment;\n    this.background = skybox;\n    this.queueRender();\n  }\n\n  /**\n   * Sets the point in model coordinates the model should orbit/pivot around.\n   */\n  setTarget(modelX: number, modelY: number, modelZ: number) {\n    this.goalTarget.set(-modelX, -modelY, -modelZ);\n  }\n\n  /**\n   * Set the decay time of, affects the speed of target transitions.\n   */\n  setTargetDamperDecayTime(decayMilliseconds: number) {\n    this.targetDamperX.setDecayTime(decayMilliseconds);\n    this.targetDamperY.setDecayTime(decayMilliseconds);\n    this.targetDamperZ.setDecayTime(decayMilliseconds);\n  }\n\n  /**\n   * Gets the point in model coordinates the model should orbit/pivot around.\n   */\n  getTarget(): Vector3 {\n    return this.goalTarget.clone().multiplyScalar(-1);\n  }\n\n  /**\n   * Shifts the model to the target point immediately instead of easing in.\n   */\n  jumpToGoal() {\n    this.updateTarget(SETTLING_TIME);\n  }\n\n  /**\n   * This should be called every frame with the frame delta to cause the target\n   * to transition to its set point.\n   */\n  updateTarget(delta: number): boolean {\n    const goal = this.goalTarget;\n    const target = this.target.position;\n    if (!goal.equals(target)) {\n      const normalization = this.boundingSphere.radius / 10;\n      let {x, y, z} = target;\n      x = this.targetDamperX.update(x, goal.x, delta, normalization);\n      y = this.targetDamperY.update(y, goal.y, delta, normalization);\n      z = this.targetDamperZ.update(z, goal.z, delta, normalization);\n      this.target.position.set(x, y, z);\n      this.target.updateMatrixWorld();\n      this.queueRender();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Yaw the +z (front) of the model toward the indicated world coordinates.\n   */\n  pointTowards(worldX: number, worldZ: number) {\n    const {x, z} = this.position;\n    this.yaw = Math.atan2(worldX - x, worldZ - z);\n  }\n\n  get model() {\n    return this._model;\n  }\n\n  /**\n   * Yaw is the scene's orientation about the y-axis, around the rotation\n   * center.\n   */\n  set yaw(radiansY: number) {\n    this.rotation.y = radiansY;\n    this.queueRender();\n  }\n\n  get yaw(): number {\n    return this.rotation.y;\n  }\n\n  set animationTime(value: number) {\n    this.mixer.setTime(value);\n    this.queueShadowRender();\n  }\n\n  get animationTime(): number {\n    if (this.currentAnimationAction != null) {\n      const loopCount =\n          Math.max((this.currentAnimationAction as any)._loopCount, 0);\n      if (this.currentAnimationAction.loop === LoopPingPong &&\n          (loopCount & 1) === 1) {\n        return this.duration - this.currentAnimationAction.time\n      } else {\n        return this.currentAnimationAction.time;\n      }\n    }\n\n    return 0;\n  }\n\n  set animationTimeScale(value: number) {\n    this.mixer.timeScale = value;\n  }\n\n  get animationTimeScale(): number {\n    return this.mixer.timeScale;\n  }\n\n  get duration(): number {\n    if (this.currentAnimationAction != null &&\n        this.currentAnimationAction.getClip()) {\n      return this.currentAnimationAction.getClip().duration;\n    }\n\n    return 0;\n  }\n\n  get hasActiveAnimation(): boolean {\n    return this.currentAnimationAction != null;\n  }\n\n  /**\n   * Plays an animation if there are any associated with the current model.\n   * Accepts an optional string name of an animation to play. If no name is\n   * provided, or if no animation is found by the given name, always falls back\n   * to playing the first animation.\n   */\n  playAnimation(\n      name: string|null = null, crossfadeTime: number = 0,\n      loopMode: number = LoopRepeat, repetitionCount: number = Infinity) {\n    if (this._currentGLTF == null) {\n      return;\n    }\n    const {animations} = this;\n    if (animations == null || animations.length === 0) {\n      console.warn(\n          `Cannot play animation (model does not have any animations)`);\n      return;\n    }\n\n    let animationClip = null;\n\n    if (name != null) {\n      animationClip = this.animationsByName.get(name);\n\n      if (animationClip == null) {\n        const parsedAnimationIndex = parseInt(name);\n\n        if (!isNaN(parsedAnimationIndex) && parsedAnimationIndex >= 0 &&\n            parsedAnimationIndex < animations.length) {\n          animationClip = animations[parsedAnimationIndex];\n        }\n      }\n    }\n\n    if (animationClip == null) {\n      animationClip = animations[0];\n    }\n\n    try {\n      const {currentAnimationAction: lastAnimationAction} = this;\n\n      const action = this.mixer.clipAction(animationClip, this);\n      this.currentAnimationAction = action;\n\n      if (this.element.paused) {\n        this.mixer.stopAllAction();\n      } else {\n        action.paused = false;\n        if (lastAnimationAction != null && action !== lastAnimationAction) {\n          action.crossFadeFrom(lastAnimationAction, crossfadeTime, false);\n        } else if (\n            this.animationTimeScale > 0 &&\n            this.animationTime == this.duration) {\n          // This is a workaround for what I believe is a three.js bug.\n          this.animationTime = 0;\n        }\n      }\n\n      action.setLoop(loopMode, repetitionCount);\n\n      action.enabled = true;\n      action.clampWhenFinished = true;\n\n      action.play();\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  stopAnimation() {\n    this.currentAnimationAction = null;\n    this.mixer.stopAllAction();\n  }\n\n  updateAnimation(step: number) {\n    this.mixer.update(step);\n    this.queueShadowRender();\n  }\n\n  subscribeMixerEvent(event: string, callback: (...args: any[]) => void) {\n    this.mixer.addEventListener(event, callback);\n  }\n\n  /**\n   * Call if the object has been changed in such a way that the shadow's shape\n   * has changed (not a rotation about the Y axis).\n   */\n  updateShadow() {\n    const shadow = this.shadow;\n    if (shadow != null) {\n      const side = this.element.arPlacement === 'wall' ? 'back' : 'bottom';\n      shadow.setScene(this, this.shadowSoftness, side);\n      shadow.needsUpdate = true;\n    }\n  }\n\n  renderShadow(renderer: WebGLRenderer) {\n    const shadow = this.shadow;\n    if (shadow != null && shadow.needsUpdate == true) {\n      shadow.render(renderer, this);\n      shadow.needsUpdate = false;\n    }\n  }\n\n  private queueShadowRender() {\n    if (this.shadow != null) {\n      this.shadow.needsUpdate = true;\n    }\n  }\n\n  /**\n   * Sets the shadow's intensity, lazily creating the shadow as necessary.\n   */\n  setShadowIntensity(shadowIntensity: number) {\n    this.shadowIntensity = shadowIntensity;\n    if (this._currentGLTF == null) {\n      return;\n    }\n    this.setBakedShadowVisibility();\n    if (shadowIntensity <= 0 && this.shadow == null) {\n      return;\n    }\n\n    if (this.shadow == null) {\n      const side = this.element.arPlacement === 'wall' ? 'back' : 'bottom';\n      this.shadow = new Shadow(this, this.shadowSoftness, side);\n    }\n    this.shadow.setIntensity(shadowIntensity);\n  }\n\n  /**\n   * Sets the shadow's softness by mapping a [0, 1] softness parameter to the\n   * shadow's resolution. This involves reallocation, so it should not be\n   * changed frequently. Softer shadows are cheaper to render.\n   */\n  setShadowSoftness(softness: number) {\n    this.shadowSoftness = softness;\n    const shadow = this.shadow;\n    if (shadow != null) {\n      shadow.setSoftness(softness);\n    }\n  }\n\n  /**\n   * Shift the floor vertically from the bottom of the model's bounding box by\n   * offset (should generally be negative).\n   */\n  setShadowOffset(offset: number) {\n    const shadow = this.shadow;\n    if (shadow != null) {\n      shadow.setOffset(offset);\n    }\n  }\n\n  get raycaster() {\n    return raycaster;\n  }\n\n  /**\n   * This method returns the world position, model-space normal and texture\n   * coordinate of the point on the mesh corresponding to the input pixel\n   * coordinates given relative to the model-viewer element. If the mesh\n   * is not hit, the result is null.\n   */\n  positionAndNormalFromPoint(ndcPosition: Vector2, object: Object3D = this):\n      {position: Vector3, normal: Vector3, uv: Vector2|null}|null {\n    this.raycaster.setFromCamera(ndcPosition, this.getCamera());\n    const hits = this.raycaster.intersectObject(object, true);\n\n    const hit =\n        hits.find((hit) => hit.object.visible && !hit.object.userData.shadow);\n    if (hit == null || hit.face == null) {\n      return null;\n    }\n\n    if (hit.uv == null) {\n      return {position: hit.point, normal: hit.face.normal, uv: null};\n    }\n\n    hit.face.normal.applyNormalMatrix(\n        new Matrix3().getNormalMatrix(hit.object.matrixWorld));\n\n    return {position: hit.point, normal: hit.face.normal, uv: hit.uv};\n  }\n\n  /**\n   * The following methods are for operating on the set of Hotspot objects\n   * attached to the scene. These come from DOM elements, provided to slots by\n   * the Annotation Mixin.\n   */\n  addHotspot(hotspot: Hotspot) {\n    this.target.add(hotspot);\n    // This happens automatically in render(), but we do it early so that\n    // the slots appear in the shadow DOM and the elements get attached,\n    // allowing us to dispatch events on them.\n    this.annotationRenderer.domElement.appendChild(hotspot.element);\n  }\n\n  removeHotspot(hotspot: Hotspot) {\n    this.target.remove(hotspot);\n  }\n\n  /**\n   * Helper method to apply a function to all hotspots.\n   */\n  forHotspots(func: (hotspot: Hotspot) => void) {\n    const {children} = this.target;\n    for (let i = 0, l = children.length; i < l; i++) {\n      const hotspot = children[i];\n      if (hotspot instanceof Hotspot) {\n        func(hotspot);\n      }\n    }\n  }\n\n  /**\n   * Update the CSS visibility of the hotspots based on whether their normals\n   * point toward the camera.\n   */\n  updateHotspots(viewerPosition: Vector3) {\n    this.forHotspots((hotspot) => {\n      view.copy(viewerPosition);\n      target.setFromMatrixPosition(hotspot.matrixWorld);\n      view.sub(target);\n      normalWorld.copy(hotspot.normal)\n          .transformDirection(this.target.matrixWorld);\n      if (view.dot(normalWorld) < 0) {\n        hotspot.hide();\n      } else {\n        hotspot.show();\n      }\n    });\n  }\n\n  /**\n   * Rotate all hotspots to an absolute orientation given by the input number of\n   * radians. Zero returns them to upright.\n   */\n  orientHotspots(radians: number) {\n    this.forHotspots((hotspot) => {\n      hotspot.orient(radians);\n    });\n  }\n\n  /**\n   * Set the rendering visibility of all hotspots. This is used to hide them\n   * during transitions and such.\n   */\n  setHotspotsVisibility(visible: boolean) {\n    this.forHotspots((hotspot) => {\n      hotspot.visible = visible;\n    });\n  }\n\n  updateSchema(src: string|null) {\n    const {schemaElement, element} = this;\n    const {alt, poster, iosSrc} = element;\n    if (src != null) {\n      const encoding = [{\n        '@type': 'MediaObject',\n        contentUrl: src,\n        encodingFormat: src.split('.').pop()?.toLowerCase() === 'gltf' ?\n            'model/gltf+json' :\n            'model/gltf-binary'\n      }];\n\n      if (iosSrc) {\n        encoding.push({\n          '@type': 'MediaObject',\n          contentUrl: iosSrc,\n          encodingFormat: 'model/vnd.usdz+zip'\n        });\n      }\n\n      const structuredData = {\n        '@context': 'http://schema.org/',\n        '@type': '3DModel',\n        image: poster ?? undefined,\n        name: alt ?? undefined,\n        encoding\n      };\n\n      schemaElement.textContent = JSON.stringify(structuredData);\n      document.head.appendChild(schemaElement);\n    } else if (schemaElement.parentElement != null) {\n      schemaElement.parentElement.removeChild(schemaElement);\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}