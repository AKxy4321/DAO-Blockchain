{"ast":null,"code":"import { _ as _classPrivateMethodInitSpec, a as _classPrivateMethodGet } from '../../../../dist/classPrivateMethodGet-ea199cc3.browser.esm.js';\nimport { _ as _classPrivateFieldInitSpec, b as _classPrivateFieldGet, a as _classPrivateFieldSet } from '../../../../dist/classPrivateFieldSet-a5db7c83.browser.esm.js';\nimport { _ as _defineProperty } from '../../../../dist/defineProperty-c8ecdc07.browser.esm.js';\nimport { utils, providers } from 'ethers';\nimport { w as walletIds } from '../../../../dist/walletIds-a64268ca.browser.esm.js';\nimport { g as getValidPublicRPCUrl } from '../../../../dist/url-bc88b2b6.browser.esm.js';\nimport { W as WagmiConnector } from '../../../../dist/WagmiConnector-2f14002d.browser.esm.js';\nimport { U as UserRejectedRequestError, S as SwitchChainError } from '../../../../dist/errors-d961f852.browser.esm.js';\nimport '@thirdweb-dev/chains';\nimport 'eventemitter3';\nconst chainsToRequest = new Set([1, 137, 10, 42161, 56]);\nconst NAMESPACE = \"eip155\";\nconst REQUESTED_CHAINS_KEY = \"wagmi.requestedChains\";\nconst ADD_ETH_CHAIN_METHOD = \"wallet_addEthereumChain\";\nconst LAST_USED_CHAIN_ID = \"last-used-chain-id\";\nvar _provider = /*#__PURE__*/new WeakMap();\nvar _initProviderPromise = /*#__PURE__*/new WeakMap();\nvar _storage = /*#__PURE__*/new WeakMap();\nvar _createProvider = /*#__PURE__*/new WeakSet();\nvar _initProvider = /*#__PURE__*/new WeakSet();\nvar _isChainsStale = /*#__PURE__*/new WeakSet();\nvar _removeListeners = /*#__PURE__*/new WeakSet();\nvar _setRequestedChainsIds = /*#__PURE__*/new WeakSet();\nvar _getRequestedChainsIds = /*#__PURE__*/new WeakSet();\nvar _getNamespaceChainsIds = /*#__PURE__*/new WeakSet();\nvar _getNamespaceMethods = /*#__PURE__*/new WeakSet();\nclass WalletConnectConnector extends WagmiConnector {\n  constructor(config) {\n    super({\n      ...config,\n      options: {\n        isNewChainsStale: true,\n        ...config.options\n      }\n    });\n    _classPrivateMethodInitSpec(this, _getNamespaceMethods);\n    _classPrivateMethodInitSpec(this, _getNamespaceChainsIds);\n    _classPrivateMethodInitSpec(this, _getRequestedChainsIds);\n    _classPrivateMethodInitSpec(this, _setRequestedChainsIds);\n    _classPrivateMethodInitSpec(this, _removeListeners);\n    /**\n     * Checks if the target chains match the chains that were\n     * initially requested by the connector for the WalletConnect session.\n     * If there is a mismatch, this means that the chains on the connector\n     * are considered stale, and need to be revalidated at a later point (via\n     * connection).\n     *\n     * There may be a scenario where a dapp adds a chain to the\n     * connector later on, however, this chain will not have been approved or rejected\n     * by the wallet. In this case, the chain is considered stale.\n     *\n     * There are exceptions however:\n     * -  If the wallet supports dynamic chain addition via `eth_addEthereumChain`,\n     *    then the chain is not considered stale.\n     * -  If the `isNewChainsStale` flag is falsy on the connector, then the chain is\n     *    not considered stale.\n     *\n     * For the above cases, chain validation occurs dynamically when the user\n     * attempts to switch chain.\n     *\n     * Also check that dapp supports at least 1 chain from previously approved session.\n     */\n    _classPrivateMethodInitSpec(this, _isChainsStale);\n    _classPrivateMethodInitSpec(this, _initProvider);\n    _classPrivateMethodInitSpec(this, _createProvider);\n    _defineProperty(this, \"id\", walletIds.walletConnect);\n    _defineProperty(this, \"name\", \"WalletConnect\");\n    _defineProperty(this, \"ready\", true);\n    _classPrivateFieldInitSpec(this, _provider, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _initProviderPromise, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _storage, {\n      writable: true,\n      value: void 0\n    });\n    _defineProperty(this, \"onAccountsChanged\", accounts => {\n      if (accounts.length === 0) {\n        this.emit(\"disconnect\");\n      } else {\n        if (accounts[0]) {\n          this.emit(\"change\", {\n            account: utils.getAddress(accounts[0])\n          });\n        }\n      }\n    });\n    _defineProperty(this, \"onChainChanged\", async chainId => {\n      const id = Number(chainId);\n      const unsupported = this.isChainUnsupported(id);\n      await _classPrivateFieldGet(this, _storage).setItem(LAST_USED_CHAIN_ID, String(chainId));\n      this.emit(\"change\", {\n        chain: {\n          id,\n          unsupported\n        }\n      });\n    });\n    _defineProperty(this, \"onDisconnect\", async () => {\n      await _classPrivateMethodGet(this, _setRequestedChainsIds, _setRequestedChainsIds2).call(this, []);\n      await _classPrivateFieldGet(this, _storage).removeItem(LAST_USED_CHAIN_ID);\n      this.emit(\"disconnect\");\n    });\n    _defineProperty(this, \"onDisplayUri\", uri => {\n      this.emit(\"message\", {\n        type: \"display_uri\",\n        data: uri\n      });\n    });\n    _defineProperty(this, \"onConnect\", () => {\n      this.emit(\"connect\", {\n        provider: _classPrivateFieldGet(this, _provider)\n      });\n    });\n    _classPrivateFieldSet(this, _storage, config.options.storage);\n    _classPrivateMethodGet(this, _createProvider, _createProvider2).call(this);\n    this.filteredChains = this.chains.length > 50 ? this.chains.filter(c => {\n      return chainsToRequest.has(c.chainId);\n    }) : this.chains;\n  }\n  async connect() {\n    let {\n      chainId: chainIdP,\n      pairingTopic\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    try {\n      let targetChainId = chainIdP;\n      if (!targetChainId) {\n        const lastUsedChainIdStr = await _classPrivateFieldGet(this, _storage).getItem(LAST_USED_CHAIN_ID);\n        const lastUsedChainId = lastUsedChainIdStr ? parseInt(lastUsedChainIdStr) : undefined;\n        if (lastUsedChainId && !this.isChainUnsupported(lastUsedChainId)) {\n          targetChainId = lastUsedChainId;\n        } else {\n          var _this$filteredChains$;\n          targetChainId = (_this$filteredChains$ = this.filteredChains[0]) === null || _this$filteredChains$ === void 0 ? void 0 : _this$filteredChains$.chainId;\n        }\n      }\n      if (!targetChainId) {\n        throw new Error(\"No chains found on connector.\");\n      }\n      const provider = await this.getProvider();\n      this.setupListeners();\n      const isChainsStale = await _classPrivateMethodGet(this, _isChainsStale, _isChainsStale2).call(this);\n\n      // If there is an active session with stale chains, disconnect the current session.\n      if (provider.session && isChainsStale) {\n        await provider.disconnect();\n      }\n\n      // If there no active session, or the chains are stale, connect.\n      if (!provider.session || isChainsStale) {\n        const optionalChains = this.filteredChains.filter(chain => chain.chainId !== targetChainId).map(optionalChain => optionalChain.chainId);\n        this.emit(\"message\", {\n          type: \"connecting\"\n        });\n        await provider.connect({\n          pairingTopic,\n          chains: [targetChainId],\n          optionalChains: optionalChains.length > 0 ? optionalChains : [targetChainId]\n        });\n        await _classPrivateMethodGet(this, _setRequestedChainsIds, _setRequestedChainsIds2).call(this, this.filteredChains.map(_ref => {\n          let {\n            chainId\n          } = _ref;\n          return chainId;\n        }));\n      }\n\n      // If session exists and chains are authorized, enable provider for required chain\n      const accounts = await provider.enable();\n      if (!accounts[0]) {\n        throw new Error(\"No accounts found on provider.\");\n      }\n      const account = utils.getAddress(accounts[0]);\n      const id = await this.getChainId();\n      const unsupported = this.isChainUnsupported(id);\n      return {\n        account,\n        chain: {\n          id,\n          unsupported\n        },\n        provider: new providers.Web3Provider(provider)\n      };\n    } catch (error) {\n      if (/user rejected/i.test(error === null || error === void 0 ? void 0 : error.message)) {\n        throw new UserRejectedRequestError(error);\n      }\n      throw error;\n    }\n  }\n  async disconnect() {\n    const cleanup = () => {\n      if (typeof localStorage === \"undefined\") {\n        return;\n      }\n      for (const key in localStorage) {\n        if (key.startsWith(\"wc@2\")) {\n          localStorage.removeItem(key);\n        }\n      }\n    };\n    cleanup();\n    const provider = await this.getProvider();\n    const disconnectProvider = async () => {\n      try {\n        await provider.disconnect();\n      } catch (error) {\n        if (!/No matching key/i.test(error.message)) {\n          throw error;\n        }\n      } finally {\n        _classPrivateMethodGet(this, _removeListeners, _removeListeners2).call(this);\n        await _classPrivateMethodGet(this, _setRequestedChainsIds, _setRequestedChainsIds2).call(this, []);\n        cleanup();\n      }\n    };\n    disconnectProvider();\n  }\n  async getAccount() {\n    const {\n      accounts\n    } = await this.getProvider();\n    if (!accounts[0]) {\n      throw new Error(\"No accounts found on provider.\");\n    }\n    return utils.getAddress(accounts[0]);\n  }\n  async getChainId() {\n    const {\n      chainId\n    } = await this.getProvider();\n    return chainId;\n  }\n  async getProvider() {\n    let {\n      chainId\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!_classPrivateFieldGet(this, _provider)) {\n      await _classPrivateMethodGet(this, _createProvider, _createProvider2).call(this);\n    }\n    if (chainId) {\n      await this.switchChain(chainId);\n    }\n    if (!_classPrivateFieldGet(this, _provider)) {\n      throw new Error(\"No provider found.\");\n    }\n    return _classPrivateFieldGet(this, _provider);\n  }\n  async getSigner() {\n    let {\n      chainId\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const [provider, account] = await Promise.all([this.getProvider({\n      chainId\n    }), this.getAccount()]);\n    return new providers.Web3Provider(provider, chainId).getSigner(account);\n  }\n  async isAuthorized() {\n    try {\n      const [account, provider] = await Promise.all([this.getAccount(), this.getProvider()]);\n      const isChainsStale = await _classPrivateMethodGet(this, _isChainsStale, _isChainsStale2).call(this);\n\n      // If an account does not exist on the session, then the connector is unauthorized.\n      if (!account) {\n        return false;\n      }\n\n      // If the chains are stale on the session, then the connector is unauthorized.\n      if (isChainsStale && provider.session) {\n        try {\n          await provider.disconnect();\n        } catch {} // eslint-disable-line no-empty\n        return false;\n      }\n      return true;\n    } catch {\n      return false;\n    }\n  }\n  async switchChain(chainId) {\n    const chain = this.chains.find(chain_ => chain_.chainId === chainId);\n    if (!chain) {\n      throw new SwitchChainError(\"Chain with ID: \".concat(chainId, \", not found on connector.\"));\n    }\n    try {\n      const provider = await this.getProvider();\n      const namespaceChains = _classPrivateMethodGet(this, _getNamespaceChainsIds, _getNamespaceChainsIds2).call(this);\n      const namespaceMethods = _classPrivateMethodGet(this, _getNamespaceMethods, _getNamespaceMethods2).call(this);\n      const isChainApproved = namespaceChains.includes(chainId);\n      if (!isChainApproved && namespaceMethods.includes(ADD_ETH_CHAIN_METHOD)) {\n        const firstExplorer = chain.explorers && chain.explorers[0];\n        const blockExplorerUrls = firstExplorer ? {\n          blockExplorerUrls: [firstExplorer.url]\n        } : {};\n        await provider.request({\n          method: ADD_ETH_CHAIN_METHOD,\n          params: [{\n            chainId: utils.hexValue(chain.chainId),\n            chainName: chain.name,\n            nativeCurrency: chain.nativeCurrency,\n            rpcUrls: getValidPublicRPCUrl(chain),\n            // no clientId on purpose\n            ...blockExplorerUrls\n          }]\n        });\n        const requestedChains = await _classPrivateMethodGet(this, _getRequestedChainsIds, _getRequestedChainsIds2).call(this);\n        requestedChains.push(chainId);\n        await _classPrivateMethodGet(this, _setRequestedChainsIds, _setRequestedChainsIds2).call(this, requestedChains);\n      }\n      await provider.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{\n          chainId: utils.hexValue(chainId)\n        }]\n      });\n      return chain;\n    } catch (error) {\n      const message = typeof error === \"string\" ? error : error === null || error === void 0 ? void 0 : error.message;\n      if (/user rejected request/i.test(message)) {\n        throw new UserRejectedRequestError(error);\n      }\n      throw new SwitchChainError(error);\n    }\n  }\n  async setupListeners() {\n    if (!_classPrivateFieldGet(this, _provider)) {\n      return;\n    }\n    _classPrivateMethodGet(this, _removeListeners, _removeListeners2).call(this);\n    _classPrivateFieldGet(this, _provider).on(\"accountsChanged\", this.onAccountsChanged);\n    _classPrivateFieldGet(this, _provider).on(\"chainChanged\", this.onChainChanged);\n    _classPrivateFieldGet(this, _provider).on(\"disconnect\", this.onDisconnect);\n    _classPrivateFieldGet(this, _provider).on(\"session_delete\", this.onDisconnect);\n    _classPrivateFieldGet(this, _provider).on(\"display_uri\", this.onDisplayUri);\n    _classPrivateFieldGet(this, _provider).on(\"connect\", this.onConnect);\n  }\n}\nasync function _createProvider2() {\n  if (!_classPrivateFieldGet(this, _initProviderPromise) && \"object\" !== \"undefined\") {\n    _classPrivateFieldSet(this, _initProviderPromise, _classPrivateMethodGet(this, _initProvider, _initProvider2).call(this));\n  }\n  return _classPrivateFieldGet(this, _initProviderPromise);\n}\nasync function _initProvider2() {\n  const {\n    default: EthereumProvider,\n    OPTIONAL_EVENTS,\n    OPTIONAL_METHODS\n  } = await import('@walletconnect/ethereum-provider');\n  const [defaultChain, ...optionalChains] = this.filteredChains.map(_ref2 => {\n    let {\n      chainId\n    } = _ref2;\n    return chainId;\n  });\n  if (defaultChain) {\n    // EthereumProvider populates & deduplicates required methods and events internally\n    _classPrivateFieldSet(this, _provider, await EthereumProvider.init({\n      showQrModal: this.options.qrcode !== false,\n      projectId: this.options.projectId,\n      optionalMethods: OPTIONAL_METHODS,\n      optionalEvents: OPTIONAL_EVENTS,\n      chains: [defaultChain],\n      optionalChains: optionalChains,\n      metadata: {\n        name: this.options.dappMetadata.name,\n        description: this.options.dappMetadata.description || \"\",\n        url: this.options.dappMetadata.url,\n        icons: [this.options.dappMetadata.logoUrl || \"\"]\n      },\n      rpcMap: Object.fromEntries(this.filteredChains.map(chain => [chain.chainId, chain.rpc[0] || \"\" // TODO: handle chain.rpc being empty array\n      ])),\n\n      qrModalOptions: this.options.qrModalOptions\n    }));\n  }\n}\nasync function _isChainsStale2() {\n  const namespaceMethods = _classPrivateMethodGet(this, _getNamespaceMethods, _getNamespaceMethods2).call(this);\n  if (namespaceMethods.includes(ADD_ETH_CHAIN_METHOD)) {\n    return false;\n  }\n  if (!this.options.isNewChainsStale) {\n    return false;\n  }\n  const requestedChains = await _classPrivateMethodGet(this, _getRequestedChainsIds, _getRequestedChainsIds2).call(this);\n  const connectorChains = this.filteredChains.map(_ref3 => {\n    let {\n      chainId\n    } = _ref3;\n    return chainId;\n  });\n  const namespaceChains = _classPrivateMethodGet(this, _getNamespaceChainsIds, _getNamespaceChainsIds2).call(this);\n  if (namespaceChains.length && !namespaceChains.some(id => connectorChains.includes(id))) {\n    return false;\n  }\n  return !connectorChains.every(id => requestedChains.includes(id));\n}\nfunction _removeListeners2() {\n  if (!_classPrivateFieldGet(this, _provider)) {\n    return;\n  }\n  _classPrivateFieldGet(this, _provider).removeListener(\"accountsChanged\", this.onAccountsChanged);\n  _classPrivateFieldGet(this, _provider).removeListener(\"chainChanged\", this.onChainChanged);\n  _classPrivateFieldGet(this, _provider).removeListener(\"disconnect\", this.onDisconnect);\n  _classPrivateFieldGet(this, _provider).removeListener(\"session_delete\", this.onDisconnect);\n  _classPrivateFieldGet(this, _provider).removeListener(\"display_uri\", this.onDisplayUri);\n  _classPrivateFieldGet(this, _provider).removeListener(\"connect\", this.onConnect);\n}\nasync function _setRequestedChainsIds2(chains) {\n  await _classPrivateFieldGet(this, _storage).setItem(REQUESTED_CHAINS_KEY, JSON.stringify(chains));\n}\nasync function _getRequestedChainsIds2() {\n  const data = await _classPrivateFieldGet(this, _storage).getItem(REQUESTED_CHAINS_KEY);\n  return data ? JSON.parse(data) : [];\n}\nfunction _getNamespaceChainsIds2() {\n  var _classPrivateFieldGet2;\n  if (!_classPrivateFieldGet(this, _provider)) {\n    return [];\n  }\n  const chainIds = (_classPrivateFieldGet2 = _classPrivateFieldGet(this, _provider).session) === null || _classPrivateFieldGet2 === void 0 || (_classPrivateFieldGet2 = _classPrivateFieldGet2.namespaces[NAMESPACE]) === null || _classPrivateFieldGet2 === void 0 || (_classPrivateFieldGet2 = _classPrivateFieldGet2.chains) === null || _classPrivateFieldGet2 === void 0 ? void 0 : _classPrivateFieldGet2.map(chain => parseInt(chain.split(\":\")[1] || \"\"));\n  return chainIds !== null && chainIds !== void 0 ? chainIds : [];\n}\nfunction _getNamespaceMethods2() {\n  var _classPrivateFieldGet3;\n  if (!_classPrivateFieldGet(this, _provider)) {\n    return [];\n  }\n  const methods = (_classPrivateFieldGet3 = _classPrivateFieldGet(this, _provider).session) === null || _classPrivateFieldGet3 === void 0 || (_classPrivateFieldGet3 = _classPrivateFieldGet3.namespaces[NAMESPACE]) === null || _classPrivateFieldGet3 === void 0 ? void 0 : _classPrivateFieldGet3.methods;\n  return methods !== null && methods !== void 0 ? methods : [];\n}\nexport { WalletConnectConnector };","map":{"version":3,"names":["_","_classPrivateMethodInitSpec","a","_classPrivateMethodGet","_classPrivateFieldInitSpec","b","_classPrivateFieldGet","_classPrivateFieldSet","_defineProperty","utils","providers","w","walletIds","g","getValidPublicRPCUrl","W","WagmiConnector","U","UserRejectedRequestError","S","SwitchChainError","chainsToRequest","Set","NAMESPACE","REQUESTED_CHAINS_KEY","ADD_ETH_CHAIN_METHOD","LAST_USED_CHAIN_ID","_provider","WeakMap","_initProviderPromise","_storage","_createProvider","WeakSet","_initProvider","_isChainsStale","_removeListeners","_setRequestedChainsIds","_getRequestedChainsIds","_getNamespaceChainsIds","_getNamespaceMethods","WalletConnectConnector","constructor","config","options","isNewChainsStale","walletConnect","writable","value","accounts","length","emit","account","getAddress","chainId","id","Number","unsupported","isChainUnsupported","setItem","String","chain","_setRequestedChainsIds2","call","removeItem","uri","type","data","provider","storage","_createProvider2","filteredChains","chains","filter","c","has","connect","chainIdP","pairingTopic","arguments","undefined","targetChainId","lastUsedChainIdStr","getItem","lastUsedChainId","parseInt","_this$filteredChains$","Error","getProvider","setupListeners","isChainsStale","_isChainsStale2","session","disconnect","optionalChains","map","optionalChain","_ref","enable","getChainId","Web3Provider","error","test","message","cleanup","localStorage","key","startsWith","disconnectProvider","_removeListeners2","getAccount","switchChain","getSigner","Promise","all","isAuthorized","find","chain_","concat","namespaceChains","_getNamespaceChainsIds2","namespaceMethods","_getNamespaceMethods2","isChainApproved","includes","firstExplorer","explorers","blockExplorerUrls","url","request","method","params","hexValue","chainName","name","nativeCurrency","rpcUrls","requestedChains","_getRequestedChainsIds2","push","on","onAccountsChanged","onChainChanged","onDisconnect","onDisplayUri","onConnect","_initProvider2","default","EthereumProvider","OPTIONAL_EVENTS","OPTIONAL_METHODS","defaultChain","_ref2","init","showQrModal","qrcode","projectId","optionalMethods","optionalEvents","metadata","dappMetadata","description","icons","logoUrl","rpcMap","Object","fromEntries","rpc","qrModalOptions","connectorChains","_ref3","some","every","removeListener","JSON","stringify","parse","_classPrivateFieldGet2","chainIds","namespaces","split","_classPrivateFieldGet3","methods"],"sources":["C:/Misc/Documents/Career/FinTech/BlockChain/FrontEnd/buildspace-dao-starter/node_modules/@thirdweb-dev/react-core/node_modules/@thirdweb-dev/wallets/evm/connectors/wallet-connect/dist/thirdweb-dev-wallets-evm-connectors-wallet-connect.browser.esm.js"],"sourcesContent":["import { _ as _classPrivateMethodInitSpec, a as _classPrivateMethodGet } from '../../../../dist/classPrivateMethodGet-ea199cc3.browser.esm.js';\nimport { _ as _classPrivateFieldInitSpec, b as _classPrivateFieldGet, a as _classPrivateFieldSet } from '../../../../dist/classPrivateFieldSet-a5db7c83.browser.esm.js';\nimport { _ as _defineProperty } from '../../../../dist/defineProperty-c8ecdc07.browser.esm.js';\nimport { utils, providers } from 'ethers';\nimport { w as walletIds } from '../../../../dist/walletIds-a64268ca.browser.esm.js';\nimport { g as getValidPublicRPCUrl } from '../../../../dist/url-bc88b2b6.browser.esm.js';\nimport { W as WagmiConnector } from '../../../../dist/WagmiConnector-2f14002d.browser.esm.js';\nimport { U as UserRejectedRequestError, S as SwitchChainError } from '../../../../dist/errors-d961f852.browser.esm.js';\nimport '@thirdweb-dev/chains';\nimport 'eventemitter3';\n\nconst chainsToRequest = new Set([1, 137, 10, 42161, 56]);\nconst NAMESPACE = \"eip155\";\nconst REQUESTED_CHAINS_KEY = \"wagmi.requestedChains\";\nconst ADD_ETH_CHAIN_METHOD = \"wallet_addEthereumChain\";\nconst LAST_USED_CHAIN_ID = \"last-used-chain-id\";\nvar _provider = /*#__PURE__*/new WeakMap();\nvar _initProviderPromise = /*#__PURE__*/new WeakMap();\nvar _storage = /*#__PURE__*/new WeakMap();\nvar _createProvider = /*#__PURE__*/new WeakSet();\nvar _initProvider = /*#__PURE__*/new WeakSet();\nvar _isChainsStale = /*#__PURE__*/new WeakSet();\nvar _removeListeners = /*#__PURE__*/new WeakSet();\nvar _setRequestedChainsIds = /*#__PURE__*/new WeakSet();\nvar _getRequestedChainsIds = /*#__PURE__*/new WeakSet();\nvar _getNamespaceChainsIds = /*#__PURE__*/new WeakSet();\nvar _getNamespaceMethods = /*#__PURE__*/new WeakSet();\nclass WalletConnectConnector extends WagmiConnector {\n  constructor(config) {\n    super({\n      ...config,\n      options: {\n        isNewChainsStale: true,\n        ...config.options\n      }\n    });\n    _classPrivateMethodInitSpec(this, _getNamespaceMethods);\n    _classPrivateMethodInitSpec(this, _getNamespaceChainsIds);\n    _classPrivateMethodInitSpec(this, _getRequestedChainsIds);\n    _classPrivateMethodInitSpec(this, _setRequestedChainsIds);\n    _classPrivateMethodInitSpec(this, _removeListeners);\n    /**\n     * Checks if the target chains match the chains that were\n     * initially requested by the connector for the WalletConnect session.\n     * If there is a mismatch, this means that the chains on the connector\n     * are considered stale, and need to be revalidated at a later point (via\n     * connection).\n     *\n     * There may be a scenario where a dapp adds a chain to the\n     * connector later on, however, this chain will not have been approved or rejected\n     * by the wallet. In this case, the chain is considered stale.\n     *\n     * There are exceptions however:\n     * -  If the wallet supports dynamic chain addition via `eth_addEthereumChain`,\n     *    then the chain is not considered stale.\n     * -  If the `isNewChainsStale` flag is falsy on the connector, then the chain is\n     *    not considered stale.\n     *\n     * For the above cases, chain validation occurs dynamically when the user\n     * attempts to switch chain.\n     *\n     * Also check that dapp supports at least 1 chain from previously approved session.\n     */\n    _classPrivateMethodInitSpec(this, _isChainsStale);\n    _classPrivateMethodInitSpec(this, _initProvider);\n    _classPrivateMethodInitSpec(this, _createProvider);\n    _defineProperty(this, \"id\", walletIds.walletConnect);\n    _defineProperty(this, \"name\", \"WalletConnect\");\n    _defineProperty(this, \"ready\", true);\n    _classPrivateFieldInitSpec(this, _provider, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _initProviderPromise, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _storage, {\n      writable: true,\n      value: void 0\n    });\n    _defineProperty(this, \"onAccountsChanged\", accounts => {\n      if (accounts.length === 0) {\n        this.emit(\"disconnect\");\n      } else {\n        if (accounts[0]) {\n          this.emit(\"change\", {\n            account: utils.getAddress(accounts[0])\n          });\n        }\n      }\n    });\n    _defineProperty(this, \"onChainChanged\", async chainId => {\n      const id = Number(chainId);\n      const unsupported = this.isChainUnsupported(id);\n      await _classPrivateFieldGet(this, _storage).setItem(LAST_USED_CHAIN_ID, String(chainId));\n      this.emit(\"change\", {\n        chain: {\n          id,\n          unsupported\n        }\n      });\n    });\n    _defineProperty(this, \"onDisconnect\", async () => {\n      await _classPrivateMethodGet(this, _setRequestedChainsIds, _setRequestedChainsIds2).call(this, []);\n      await _classPrivateFieldGet(this, _storage).removeItem(LAST_USED_CHAIN_ID);\n      this.emit(\"disconnect\");\n    });\n    _defineProperty(this, \"onDisplayUri\", uri => {\n      this.emit(\"message\", {\n        type: \"display_uri\",\n        data: uri\n      });\n    });\n    _defineProperty(this, \"onConnect\", () => {\n      this.emit(\"connect\", {\n        provider: _classPrivateFieldGet(this, _provider)\n      });\n    });\n    _classPrivateFieldSet(this, _storage, config.options.storage);\n    _classPrivateMethodGet(this, _createProvider, _createProvider2).call(this);\n    this.filteredChains = this.chains.length > 50 ? this.chains.filter(c => {\n      return chainsToRequest.has(c.chainId);\n    }) : this.chains;\n  }\n  async connect() {\n    let {\n      chainId: chainIdP,\n      pairingTopic\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    try {\n      let targetChainId = chainIdP;\n      if (!targetChainId) {\n        const lastUsedChainIdStr = await _classPrivateFieldGet(this, _storage).getItem(LAST_USED_CHAIN_ID);\n        const lastUsedChainId = lastUsedChainIdStr ? parseInt(lastUsedChainIdStr) : undefined;\n        if (lastUsedChainId && !this.isChainUnsupported(lastUsedChainId)) {\n          targetChainId = lastUsedChainId;\n        } else {\n          targetChainId = this.filteredChains[0]?.chainId;\n        }\n      }\n      if (!targetChainId) {\n        throw new Error(\"No chains found on connector.\");\n      }\n      const provider = await this.getProvider();\n      this.setupListeners();\n      const isChainsStale = await _classPrivateMethodGet(this, _isChainsStale, _isChainsStale2).call(this);\n\n      // If there is an active session with stale chains, disconnect the current session.\n      if (provider.session && isChainsStale) {\n        await provider.disconnect();\n      }\n\n      // If there no active session, or the chains are stale, connect.\n      if (!provider.session || isChainsStale) {\n        const optionalChains = this.filteredChains.filter(chain => chain.chainId !== targetChainId).map(optionalChain => optionalChain.chainId);\n        this.emit(\"message\", {\n          type: \"connecting\"\n        });\n        await provider.connect({\n          pairingTopic,\n          chains: [targetChainId],\n          optionalChains: optionalChains.length > 0 ? optionalChains : [targetChainId]\n        });\n        await _classPrivateMethodGet(this, _setRequestedChainsIds, _setRequestedChainsIds2).call(this, this.filteredChains.map(_ref => {\n          let {\n            chainId\n          } = _ref;\n          return chainId;\n        }));\n      }\n\n      // If session exists and chains are authorized, enable provider for required chain\n      const accounts = await provider.enable();\n      if (!accounts[0]) {\n        throw new Error(\"No accounts found on provider.\");\n      }\n      const account = utils.getAddress(accounts[0]);\n      const id = await this.getChainId();\n      const unsupported = this.isChainUnsupported(id);\n      return {\n        account,\n        chain: {\n          id,\n          unsupported\n        },\n        provider: new providers.Web3Provider(provider)\n      };\n    } catch (error) {\n      if (/user rejected/i.test(error?.message)) {\n        throw new UserRejectedRequestError(error);\n      }\n      throw error;\n    }\n  }\n  async disconnect() {\n    const cleanup = () => {\n      if (typeof localStorage === \"undefined\") {\n        return;\n      }\n      for (const key in localStorage) {\n        if (key.startsWith(\"wc@2\")) {\n          localStorage.removeItem(key);\n        }\n      }\n    };\n    cleanup();\n    const provider = await this.getProvider();\n    const disconnectProvider = async () => {\n      try {\n        await provider.disconnect();\n      } catch (error) {\n        if (!/No matching key/i.test(error.message)) {\n          throw error;\n        }\n      } finally {\n        _classPrivateMethodGet(this, _removeListeners, _removeListeners2).call(this);\n        await _classPrivateMethodGet(this, _setRequestedChainsIds, _setRequestedChainsIds2).call(this, []);\n        cleanup();\n      }\n    };\n    disconnectProvider();\n  }\n  async getAccount() {\n    const {\n      accounts\n    } = await this.getProvider();\n    if (!accounts[0]) {\n      throw new Error(\"No accounts found on provider.\");\n    }\n    return utils.getAddress(accounts[0]);\n  }\n  async getChainId() {\n    const {\n      chainId\n    } = await this.getProvider();\n    return chainId;\n  }\n  async getProvider() {\n    let {\n      chainId\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!_classPrivateFieldGet(this, _provider)) {\n      await _classPrivateMethodGet(this, _createProvider, _createProvider2).call(this);\n    }\n    if (chainId) {\n      await this.switchChain(chainId);\n    }\n    if (!_classPrivateFieldGet(this, _provider)) {\n      throw new Error(\"No provider found.\");\n    }\n    return _classPrivateFieldGet(this, _provider);\n  }\n  async getSigner() {\n    let {\n      chainId\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const [provider, account] = await Promise.all([this.getProvider({\n      chainId\n    }), this.getAccount()]);\n    return new providers.Web3Provider(provider, chainId).getSigner(account);\n  }\n  async isAuthorized() {\n    try {\n      const [account, provider] = await Promise.all([this.getAccount(), this.getProvider()]);\n      const isChainsStale = await _classPrivateMethodGet(this, _isChainsStale, _isChainsStale2).call(this);\n\n      // If an account does not exist on the session, then the connector is unauthorized.\n      if (!account) {\n        return false;\n      }\n\n      // If the chains are stale on the session, then the connector is unauthorized.\n      if (isChainsStale && provider.session) {\n        try {\n          await provider.disconnect();\n        } catch {} // eslint-disable-line no-empty\n        return false;\n      }\n      return true;\n    } catch {\n      return false;\n    }\n  }\n  async switchChain(chainId) {\n    const chain = this.chains.find(chain_ => chain_.chainId === chainId);\n    if (!chain) {\n      throw new SwitchChainError(`Chain with ID: ${chainId}, not found on connector.`);\n    }\n    try {\n      const provider = await this.getProvider();\n      const namespaceChains = _classPrivateMethodGet(this, _getNamespaceChainsIds, _getNamespaceChainsIds2).call(this);\n      const namespaceMethods = _classPrivateMethodGet(this, _getNamespaceMethods, _getNamespaceMethods2).call(this);\n      const isChainApproved = namespaceChains.includes(chainId);\n      if (!isChainApproved && namespaceMethods.includes(ADD_ETH_CHAIN_METHOD)) {\n        const firstExplorer = chain.explorers && chain.explorers[0];\n        const blockExplorerUrls = firstExplorer ? {\n          blockExplorerUrls: [firstExplorer.url]\n        } : {};\n        await provider.request({\n          method: ADD_ETH_CHAIN_METHOD,\n          params: [{\n            chainId: utils.hexValue(chain.chainId),\n            chainName: chain.name,\n            nativeCurrency: chain.nativeCurrency,\n            rpcUrls: getValidPublicRPCUrl(chain),\n            // no clientId on purpose\n            ...blockExplorerUrls\n          }]\n        });\n        const requestedChains = await _classPrivateMethodGet(this, _getRequestedChainsIds, _getRequestedChainsIds2).call(this);\n        requestedChains.push(chainId);\n        await _classPrivateMethodGet(this, _setRequestedChainsIds, _setRequestedChainsIds2).call(this, requestedChains);\n      }\n      await provider.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{\n          chainId: utils.hexValue(chainId)\n        }]\n      });\n      return chain;\n    } catch (error) {\n      const message = typeof error === \"string\" ? error : error?.message;\n      if (/user rejected request/i.test(message)) {\n        throw new UserRejectedRequestError(error);\n      }\n      throw new SwitchChainError(error);\n    }\n  }\n  async setupListeners() {\n    if (!_classPrivateFieldGet(this, _provider)) {\n      return;\n    }\n    _classPrivateMethodGet(this, _removeListeners, _removeListeners2).call(this);\n    _classPrivateFieldGet(this, _provider).on(\"accountsChanged\", this.onAccountsChanged);\n    _classPrivateFieldGet(this, _provider).on(\"chainChanged\", this.onChainChanged);\n    _classPrivateFieldGet(this, _provider).on(\"disconnect\", this.onDisconnect);\n    _classPrivateFieldGet(this, _provider).on(\"session_delete\", this.onDisconnect);\n    _classPrivateFieldGet(this, _provider).on(\"display_uri\", this.onDisplayUri);\n    _classPrivateFieldGet(this, _provider).on(\"connect\", this.onConnect);\n  }\n}\nasync function _createProvider2() {\n  if (!_classPrivateFieldGet(this, _initProviderPromise) && \"object\" !== \"undefined\") {\n    _classPrivateFieldSet(this, _initProviderPromise, _classPrivateMethodGet(this, _initProvider, _initProvider2).call(this));\n  }\n  return _classPrivateFieldGet(this, _initProviderPromise);\n}\nasync function _initProvider2() {\n  const {\n    default: EthereumProvider,\n    OPTIONAL_EVENTS,\n    OPTIONAL_METHODS\n  } = await import('@walletconnect/ethereum-provider');\n  const [defaultChain, ...optionalChains] = this.filteredChains.map(_ref2 => {\n    let {\n      chainId\n    } = _ref2;\n    return chainId;\n  });\n  if (defaultChain) {\n    // EthereumProvider populates & deduplicates required methods and events internally\n    _classPrivateFieldSet(this, _provider, await EthereumProvider.init({\n      showQrModal: this.options.qrcode !== false,\n      projectId: this.options.projectId,\n      optionalMethods: OPTIONAL_METHODS,\n      optionalEvents: OPTIONAL_EVENTS,\n      chains: [defaultChain],\n      optionalChains: optionalChains,\n      metadata: {\n        name: this.options.dappMetadata.name,\n        description: this.options.dappMetadata.description || \"\",\n        url: this.options.dappMetadata.url,\n        icons: [this.options.dappMetadata.logoUrl || \"\"]\n      },\n      rpcMap: Object.fromEntries(this.filteredChains.map(chain => [chain.chainId, chain.rpc[0] || \"\" // TODO: handle chain.rpc being empty array\n      ])),\n\n      qrModalOptions: this.options.qrModalOptions\n    }));\n  }\n}\nasync function _isChainsStale2() {\n  const namespaceMethods = _classPrivateMethodGet(this, _getNamespaceMethods, _getNamespaceMethods2).call(this);\n  if (namespaceMethods.includes(ADD_ETH_CHAIN_METHOD)) {\n    return false;\n  }\n  if (!this.options.isNewChainsStale) {\n    return false;\n  }\n  const requestedChains = await _classPrivateMethodGet(this, _getRequestedChainsIds, _getRequestedChainsIds2).call(this);\n  const connectorChains = this.filteredChains.map(_ref3 => {\n    let {\n      chainId\n    } = _ref3;\n    return chainId;\n  });\n  const namespaceChains = _classPrivateMethodGet(this, _getNamespaceChainsIds, _getNamespaceChainsIds2).call(this);\n  if (namespaceChains.length && !namespaceChains.some(id => connectorChains.includes(id))) {\n    return false;\n  }\n  return !connectorChains.every(id => requestedChains.includes(id));\n}\nfunction _removeListeners2() {\n  if (!_classPrivateFieldGet(this, _provider)) {\n    return;\n  }\n  _classPrivateFieldGet(this, _provider).removeListener(\"accountsChanged\", this.onAccountsChanged);\n  _classPrivateFieldGet(this, _provider).removeListener(\"chainChanged\", this.onChainChanged);\n  _classPrivateFieldGet(this, _provider).removeListener(\"disconnect\", this.onDisconnect);\n  _classPrivateFieldGet(this, _provider).removeListener(\"session_delete\", this.onDisconnect);\n  _classPrivateFieldGet(this, _provider).removeListener(\"display_uri\", this.onDisplayUri);\n  _classPrivateFieldGet(this, _provider).removeListener(\"connect\", this.onConnect);\n}\nasync function _setRequestedChainsIds2(chains) {\n  await _classPrivateFieldGet(this, _storage).setItem(REQUESTED_CHAINS_KEY, JSON.stringify(chains));\n}\nasync function _getRequestedChainsIds2() {\n  const data = await _classPrivateFieldGet(this, _storage).getItem(REQUESTED_CHAINS_KEY);\n  return data ? JSON.parse(data) : [];\n}\nfunction _getNamespaceChainsIds2() {\n  if (!_classPrivateFieldGet(this, _provider)) {\n    return [];\n  }\n  const chainIds = _classPrivateFieldGet(this, _provider).session?.namespaces[NAMESPACE]?.chains?.map(chain => parseInt(chain.split(\":\")[1] || \"\"));\n  return chainIds ?? [];\n}\nfunction _getNamespaceMethods2() {\n  if (!_classPrivateFieldGet(this, _provider)) {\n    return [];\n  }\n  const methods = _classPrivateFieldGet(this, _provider).session?.namespaces[NAMESPACE]?.methods;\n  return methods ?? [];\n}\n\nexport { WalletConnectConnector };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}