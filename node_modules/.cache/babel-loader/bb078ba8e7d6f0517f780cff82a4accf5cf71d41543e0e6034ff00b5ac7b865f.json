{"ast":null,"code":"\"use strict\";\n\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nvar _Safe_ethAdapter, _Safe_contractManager, _Safe_ownerManager, _Safe_moduleManager, _Safe_guardManager, _Safe_fallbackHandlerManager;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst bignumber_1 = require(\"@ethersproject/bignumber\");\nconst safe_core_sdk_types_1 = require(\"@safe-global/safe-core-sdk-types\");\nconst safe_core_sdk_utils_1 = require(\"@safe-global/safe-core-sdk-utils\");\nconst contractManager_1 = __importDefault(require(\"./managers/contractManager\"));\nconst fallbackHandlerManager_1 = __importDefault(require(\"./managers/fallbackHandlerManager\"));\nconst guardManager_1 = __importDefault(require(\"./managers/guardManager\"));\nconst moduleManager_1 = __importDefault(require(\"./managers/moduleManager\"));\nconst ownerManager_1 = __importDefault(require(\"./managers/ownerManager\"));\nconst utils_1 = require(\"./utils\");\nconst signatures_1 = require(\"./utils/signatures\");\nconst SafeSignature_1 = __importDefault(require(\"./utils/signatures/SafeSignature\"));\nconst SafeTransaction_1 = __importDefault(require(\"./utils/transactions/SafeTransaction\"));\nconst utils_2 = require(\"./utils/transactions/utils\");\nclass Safe {\n  constructor() {\n    _Safe_ethAdapter.set(this, void 0);\n    _Safe_contractManager.set(this, void 0);\n    _Safe_ownerManager.set(this, void 0);\n    _Safe_moduleManager.set(this, void 0);\n    _Safe_guardManager.set(this, void 0);\n    _Safe_fallbackHandlerManager.set(this, void 0);\n  }\n  /**\n   * Creates an instance of the Safe Core SDK.\n   * @param config - Ethers Safe configuration\n   * @returns The Safe Core SDK instance\n   * @throws \"SafeProxy contract is not deployed on the current network\"\n   * @throws \"MultiSend contract is not deployed on the current network\"\n   * @throws \"MultiSendCallOnly contract is not deployed on the current network\"\n   */\n  static async create(_ref) {\n    let {\n      ethAdapter,\n      safeAddress,\n      isL1SafeMasterCopy,\n      contractNetworks\n    } = _ref;\n    const safeSdk = new Safe();\n    await safeSdk.init({\n      ethAdapter,\n      safeAddress,\n      isL1SafeMasterCopy,\n      contractNetworks\n    });\n    return safeSdk;\n  }\n  /**\n   * Initializes the Safe Core SDK instance.\n   * @param config - Safe configuration\n   * @throws \"Signer must be connected to a provider\"\n   * @throws \"SafeProxy contract is not deployed on the current network\"\n   * @throws \"MultiSend contract is not deployed on the current network\"\n   * @throws \"MultiSendCallOnly contract is not deployed on the current network\"\n   */\n  async init(_ref2) {\n    let {\n      ethAdapter,\n      safeAddress,\n      isL1SafeMasterCopy,\n      contractNetworks\n    } = _ref2;\n    __classPrivateFieldSet(this, _Safe_ethAdapter, ethAdapter, \"f\");\n    __classPrivateFieldSet(this, _Safe_contractManager, await contractManager_1.default.create({\n      ethAdapter: __classPrivateFieldGet(this, _Safe_ethAdapter, \"f\"),\n      safeAddress,\n      isL1SafeMasterCopy,\n      contractNetworks\n    }), \"f\");\n    __classPrivateFieldSet(this, _Safe_ownerManager, new ownerManager_1.default(__classPrivateFieldGet(this, _Safe_ethAdapter, \"f\"), __classPrivateFieldGet(this, _Safe_contractManager, \"f\").safeContract), \"f\");\n    __classPrivateFieldSet(this, _Safe_moduleManager, new moduleManager_1.default(__classPrivateFieldGet(this, _Safe_ethAdapter, \"f\"), __classPrivateFieldGet(this, _Safe_contractManager, \"f\").safeContract), \"f\");\n    __classPrivateFieldSet(this, _Safe_guardManager, new guardManager_1.default(__classPrivateFieldGet(this, _Safe_ethAdapter, \"f\"), __classPrivateFieldGet(this, _Safe_contractManager, \"f\").safeContract), \"f\");\n    __classPrivateFieldSet(this, _Safe_fallbackHandlerManager, new fallbackHandlerManager_1.default(__classPrivateFieldGet(this, _Safe_ethAdapter, \"f\"), __classPrivateFieldGet(this, _Safe_contractManager, \"f\").safeContract), \"f\");\n  }\n  /**\n   * Returns a new instance of the Safe Core SDK.\n   * @param config - Connect Safe configuration\n   * @throws \"SafeProxy contract is not deployed on the current network\"\n   * @throws \"MultiSend contract is not deployed on the current network\"\n   * @throws \"MultiSendCallOnly contract is not deployed on the current network\"\n   */\n  async connect(_ref3) {\n    let {\n      ethAdapter,\n      safeAddress,\n      isL1SafeMasterCopy,\n      contractNetworks\n    } = _ref3;\n    return await Safe.create({\n      ethAdapter: ethAdapter || __classPrivateFieldGet(this, _Safe_ethAdapter, \"f\"),\n      safeAddress: safeAddress || this.getAddress(),\n      isL1SafeMasterCopy: isL1SafeMasterCopy || __classPrivateFieldGet(this, _Safe_contractManager, \"f\").isL1SafeMasterCopy,\n      contractNetworks: contractNetworks || __classPrivateFieldGet(this, _Safe_contractManager, \"f\").contractNetworks\n    });\n  }\n  /**\n   * Returns the address of the current SafeProxy contract.\n   *\n   * @returns The address of the SafeProxy contract\n   */\n  getAddress() {\n    return __classPrivateFieldGet(this, _Safe_contractManager, \"f\").safeContract.getAddress();\n  }\n  /**\n   * Returns the ContractManager\n   *\n   * @returns The current ContractManager\n   * */\n  getContractManager() {\n    return __classPrivateFieldGet(this, _Safe_contractManager, \"f\");\n  }\n  /**\n   * Returns the current EthAdapter.\n   *\n   * @returns The current EthAdapter\n   */\n  getEthAdapter() {\n    return __classPrivateFieldGet(this, _Safe_ethAdapter, \"f\");\n  }\n  /**\n   * Returns the address of the MultiSend contract.\n   *\n   * @returns The address of the MultiSend contract\n   */\n  getMultiSendAddress() {\n    return __classPrivateFieldGet(this, _Safe_contractManager, \"f\").multiSendContract.getAddress();\n  }\n  /**\n   * Returns the address of the MultiSendCallOnly contract.\n   *\n   * @returns The address of the MultiSendCallOnly contract\n   */\n  getMultiSendCallOnlyAddress() {\n    return __classPrivateFieldGet(this, _Safe_contractManager, \"f\").multiSendCallOnlyContract.getAddress();\n  }\n  /**\n   * Returns the Safe Master Copy contract version.\n   *\n   * @returns The Safe Master Copy contract version\n   */\n  async getContractVersion() {\n    return __classPrivateFieldGet(this, _Safe_contractManager, \"f\").safeContract.getVersion();\n  }\n  /**\n   * Returns the list of Safe owner accounts.\n   *\n   * @returns The list of owners\n   */\n  async getOwners() {\n    return __classPrivateFieldGet(this, _Safe_ownerManager, \"f\").getOwners();\n  }\n  /**\n   * Returns the Safe nonce.\n   *\n   * @returns The Safe nonce\n   */\n  async getNonce() {\n    return __classPrivateFieldGet(this, _Safe_contractManager, \"f\").safeContract.getNonce();\n  }\n  /**\n   * Returns the Safe threshold.\n   *\n   * @returns The Safe threshold\n   */\n  async getThreshold() {\n    return __classPrivateFieldGet(this, _Safe_ownerManager, \"f\").getThreshold();\n  }\n  /**\n   * Returns the chainId of the connected network.\n   *\n   * @returns The chainId of the connected network\n   */\n  async getChainId() {\n    return __classPrivateFieldGet(this, _Safe_ethAdapter, \"f\").getChainId();\n  }\n  /**\n   * Returns the ETH balance of the Safe.\n   *\n   * @returns The ETH balance of the Safe\n   */\n  async getBalance() {\n    return __classPrivateFieldGet(this, _Safe_ethAdapter, \"f\").getBalance(this.getAddress());\n  }\n  /**\n   * Returns the address of the FallbackHandler contract.\n   *\n   * @returns The address of the FallbackHandler contract\n   */\n  getFallbackHandler() {\n    return __classPrivateFieldGet(this, _Safe_fallbackHandlerManager, \"f\").getFallbackHandler();\n  }\n  /**\n   * Returns the enabled Safe guard or 0x address if no guards are enabled.\n   *\n   * @returns The address of the enabled Safe guard\n   * @throws \"Current version of the Safe does not support Safe transaction guards functionality\"\n   */\n  async getGuard() {\n    return __classPrivateFieldGet(this, _Safe_guardManager, \"f\").getGuard();\n  }\n  /**\n   * Returns the list of addresses of all the enabled Safe modules.\n   *\n   * @returns The list of addresses of all the enabled Safe modules\n   */\n  async getModules() {\n    return __classPrivateFieldGet(this, _Safe_moduleManager, \"f\").getModules();\n  }\n  /**\n   * Checks if a specific Safe module is enabled for the current Safe.\n   *\n   * @param moduleAddress - The desired module address\n   * @returns TRUE if the module is enabled\n   */\n  async isModuleEnabled(moduleAddress) {\n    return __classPrivateFieldGet(this, _Safe_moduleManager, \"f\").isModuleEnabled(moduleAddress);\n  }\n  /**\n   * Checks if a specific address is an owner of the current Safe.\n   *\n   * @param ownerAddress - The account address\n   * @returns TRUE if the account is an owner\n   */\n  async isOwner(ownerAddress) {\n    return __classPrivateFieldGet(this, _Safe_ownerManager, \"f\").isOwner(ownerAddress);\n  }\n  /**\n   * Returns a Safe transaction ready to be signed by the owners.\n   *\n   * @param createTransactionProps - The createTransaction props\n   * @returns The Safe transaction\n   * @throws \"Invalid empty array of transactions\"\n   */\n  async createTransaction(_ref4) {\n    let {\n      safeTransactionData,\n      onlyCalls = false,\n      options\n    } = _ref4;\n    if ((0, utils_1.isMetaTransactionArray)(safeTransactionData) && safeTransactionData.length === 0) {\n      throw new Error('Invalid empty array of transactions');\n    }\n    let newTransaction;\n    if ((0, utils_1.isMetaTransactionArray)(safeTransactionData) && safeTransactionData.length > 1) {\n      const multiSendContract = onlyCalls ? __classPrivateFieldGet(this, _Safe_contractManager, \"f\").multiSendCallOnlyContract : __classPrivateFieldGet(this, _Safe_contractManager, \"f\").multiSendContract;\n      const multiSendData = (0, utils_2.encodeMultiSendData)(safeTransactionData.map(utils_2.standardizeMetaTransactionData));\n      const multiSendTransaction = {\n        ...options,\n        to: multiSendContract.getAddress(),\n        value: '0',\n        data: multiSendContract.encode('multiSend', [multiSendData]),\n        operation: safe_core_sdk_types_1.OperationType.DelegateCall\n      };\n      newTransaction = multiSendTransaction;\n    } else {\n      newTransaction = (0, utils_1.isMetaTransactionArray)(safeTransactionData) ? {\n        ...options,\n        ...safeTransactionData[0]\n      } : safeTransactionData;\n    }\n    const standardizedTransaction = await (0, utils_2.standardizeSafeTransactionData)(__classPrivateFieldGet(this, _Safe_contractManager, \"f\").safeContract, __classPrivateFieldGet(this, _Safe_ethAdapter, \"f\"), newTransaction);\n    return new SafeTransaction_1.default(standardizedTransaction);\n  }\n  /**\n   * Returns a Safe transaction ready to be signed by the owners that invalidates the pending Safe transaction/s with a specific nonce.\n   *\n   * @param nonce - The nonce of the transaction/s that are going to be rejected\n   * @returns The Safe transaction that invalidates the pending Safe transaction/s\n   */\n  async createRejectionTransaction(nonce) {\n    const safeTransactionData = {\n      to: this.getAddress(),\n      nonce,\n      value: '0',\n      data: '0x',\n      safeTxGas: 0\n    };\n    return this.createTransaction({\n      safeTransactionData\n    });\n  }\n  /**\n   * Copies a Safe transaction\n   *\n   * @param safeTransaction - The Safe transaction\n   * @returns The new Safe transaction\n   */\n  async copyTransaction(safeTransaction) {\n    const signedSafeTransaction = await this.createTransaction({\n      safeTransactionData: safeTransaction.data\n    });\n    safeTransaction.signatures.forEach(signature => {\n      signedSafeTransaction.addSignature(signature);\n    });\n    return signedSafeTransaction;\n  }\n  /**\n   * Returns the transaction hash of a Safe transaction.\n   *\n   * @param safeTransaction - The Safe transaction\n   * @returns The transaction hash of the Safe transaction\n   */\n  async getTransactionHash(safeTransaction) {\n    const safeTransactionData = safeTransaction.data;\n    const txHash = await __classPrivateFieldGet(this, _Safe_contractManager, \"f\").safeContract.getTransactionHash(safeTransactionData);\n    return txHash;\n  }\n  /**\n   * Signs a hash using the current signer account.\n   *\n   * @param hash - The hash to sign\n   * @returns The Safe signature\n   */\n  async signTransactionHash(hash) {\n    return (0, signatures_1.generateSignature)(__classPrivateFieldGet(this, _Safe_ethAdapter, \"f\"), hash);\n  }\n  /**\n   * Signs a transaction according to the EIP-712 using the current signer account.\n   *\n   * @param safeTransaction - The Safe transaction to be signed\n   * @param methodVersion - EIP-712 version. Optional\n   * @returns The Safe signature\n   */\n  async signTypedData(safeTransaction, methodVersion) {\n    const safeTransactionEIP712Args = {\n      safeAddress: this.getAddress(),\n      safeVersion: await this.getContractVersion(),\n      chainId: await this.getEthAdapter().getChainId(),\n      safeTransactionData: safeTransaction.data\n    };\n    return (0, signatures_1.generateEIP712Signature)(__classPrivateFieldGet(this, _Safe_ethAdapter, \"f\"), safeTransactionEIP712Args, methodVersion);\n  }\n  /**\n   * Adds the signature of the current signer to the Safe transaction object.\n   *\n   * @param safeTransaction - The Safe transaction to be signed\n   * @param signingMethod - Method followed to sign a transaction. Optional. Default value is \"eth_sign\"\n   * @returns The signed Safe transaction\n   * @throws \"Transactions can only be signed by Safe owners\"\n   */\n  async signTransaction(safeTransaction) {\n    let signingMethod = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'eth_signTypedData_v4';\n    let transaction = (0, utils_1.isSafeMultisigTransactionResponse)(safeTransaction) ? await this.toSafeTransactionType(safeTransaction) : safeTransaction;\n    const owners = await this.getOwners();\n    const signerAddress = await __classPrivateFieldGet(this, _Safe_ethAdapter, \"f\").getSignerAddress();\n    if (!signerAddress) {\n      throw new Error('EthAdapter must be initialized with a signer to use this method');\n    }\n    const addressIsOwner = owners.find(owner => signerAddress && (0, utils_1.sameString)(owner, signerAddress));\n    if (!addressIsOwner) {\n      throw new Error('Transactions can only be signed by Safe owners');\n    }\n    let signature;\n    if (signingMethod === 'eth_signTypedData_v4') {\n      signature = await this.signTypedData(transaction, 'v4');\n    } else if (signingMethod === 'eth_signTypedData_v3') {\n      signature = await this.signTypedData(transaction, 'v3');\n    } else if (signingMethod === 'eth_signTypedData') {\n      signature = await this.signTypedData(transaction);\n    } else {\n      const safeVersion = await this.getContractVersion();\n      if (!(0, safe_core_sdk_utils_1.hasSafeFeature)(safe_core_sdk_utils_1.SAFE_FEATURES.ETH_SIGN, safeVersion)) {\n        throw new Error('eth_sign is only supported by Safes >= v1.1.0');\n      }\n      const txHash = await this.getTransactionHash(transaction);\n      signature = await this.signTransactionHash(txHash);\n    }\n    const signedSafeTransaction = await this.createTransaction({\n      safeTransactionData: transaction.data\n    });\n    transaction.signatures.forEach(signature => {\n      signedSafeTransaction.addSignature(signature);\n    });\n    signedSafeTransaction.addSignature(signature);\n    return signedSafeTransaction;\n  }\n  /**\n   * Approves on-chain a hash using the current signer account.\n   *\n   * @param hash - The hash to approve\n   * @param options - The Safe transaction execution options. Optional\n   * @returns The Safe transaction response\n   * @throws \"Transaction hashes can only be approved by Safe owners\"\n   * @throws \"Cannot specify gas and gasLimit together in transaction options\"\n   */\n  async approveTransactionHash(hash, options) {\n    const owners = await this.getOwners();\n    const signerAddress = await __classPrivateFieldGet(this, _Safe_ethAdapter, \"f\").getSignerAddress();\n    if (!signerAddress) {\n      throw new Error('EthAdapter must be initialized with a signer to use this method');\n    }\n    const addressIsOwner = owners.find(owner => signerAddress && (0, utils_1.sameString)(owner, signerAddress));\n    if (!addressIsOwner) {\n      throw new Error('Transaction hashes can only be approved by Safe owners');\n    }\n    if ((options === null || options === void 0 ? void 0 : options.gas) && (options === null || options === void 0 ? void 0 : options.gasLimit)) {\n      throw new Error('Cannot specify gas and gasLimit together in transaction options');\n    }\n    return __classPrivateFieldGet(this, _Safe_contractManager, \"f\").safeContract.approveHash(hash, {\n      from: signerAddress,\n      ...options\n    });\n  }\n  /**\n   * Returns a list of owners who have approved a specific Safe transaction.\n   *\n   * @param txHash - The Safe transaction hash\n   * @returns The list of owners\n   */\n  async getOwnersWhoApprovedTx(txHash) {\n    const owners = await this.getOwners();\n    let ownersWhoApproved = [];\n    for (const owner of owners) {\n      const approved = await __classPrivateFieldGet(this, _Safe_contractManager, \"f\").safeContract.approvedHashes(owner, txHash);\n      if (approved.gt(0)) {\n        ownersWhoApproved.push(owner);\n      }\n    }\n    return ownersWhoApproved;\n  }\n  /**\n   * Returns the Safe transaction to enable the fallback handler.\n   *\n   * @param address - The new fallback handler address\n   * @param options - The transaction optional properties\n   * @returns The Safe transaction ready to be signed\n   * @throws \"Invalid fallback handler address provided\"\n   * @throws \"Fallback handler provided is already enabled\"\n   * @throws \"Current version of the Safe does not support the fallback handler functionality\"\n   */\n  async createEnableFallbackHandlerTx(fallbackHandlerAddress, options) {\n    const safeTransactionData = {\n      to: this.getAddress(),\n      value: '0',\n      data: await __classPrivateFieldGet(this, _Safe_fallbackHandlerManager, \"f\").encodeEnableFallbackHandlerData(fallbackHandlerAddress),\n      ...options\n    };\n    const safeTransaction = await this.createTransaction({\n      safeTransactionData\n    });\n    return safeTransaction;\n  }\n  /**\n   * Returns the Safe transaction to disable the fallback handler.\n   *\n   * @param options - The transaction optional properties\n   * @returns The Safe transaction ready to be signed\n   * @throws \"There is no fallback handler enabled yet\"\n   * @throws \"Current version of the Safe does not support the fallback handler functionality\"\n   */\n  async createDisableFallbackHandlerTx(options) {\n    const safeTransactionData = {\n      to: this.getAddress(),\n      value: '0',\n      data: await __classPrivateFieldGet(this, _Safe_fallbackHandlerManager, \"f\").encodeDisableFallbackHandlerData(),\n      ...options\n    };\n    const safeTransaction = await this.createTransaction({\n      safeTransactionData\n    });\n    return safeTransaction;\n  }\n  /**\n   * Returns the Safe transaction to enable a Safe guard.\n   *\n   * @param guardAddress - The desired guard address\n   * @param options - The transaction optional properties\n   * @returns The Safe transaction ready to be signed\n   * @throws \"Invalid guard address provided\"\n   * @throws \"Guard provided is already enabled\"\n   * @throws \"Current version of the Safe does not support Safe transaction guards functionality\"\n   */\n  async createEnableGuardTx(guardAddress, options) {\n    const safeTransactionData = {\n      to: this.getAddress(),\n      value: '0',\n      data: await __classPrivateFieldGet(this, _Safe_guardManager, \"f\").encodeEnableGuardData(guardAddress),\n      ...options\n    };\n    const safeTransaction = await this.createTransaction({\n      safeTransactionData\n    });\n    return safeTransaction;\n  }\n  /**\n   * Returns the Safe transaction to disable a Safe guard.\n   *\n   * @param options - The transaction optional properties\n   * @returns The Safe transaction ready to be signed\n   * @throws \"There is no guard enabled yet\"\n   * @throws \"Current version of the Safe does not support Safe transaction guards functionality\"\n   */\n  async createDisableGuardTx(options) {\n    const safeTransactionData = {\n      to: this.getAddress(),\n      value: '0',\n      data: await __classPrivateFieldGet(this, _Safe_guardManager, \"f\").encodeDisableGuardData(),\n      ...options\n    };\n    const safeTransaction = await this.createTransaction({\n      safeTransactionData\n    });\n    return safeTransaction;\n  }\n  /**\n   * Returns the Safe transaction to enable a Safe module.\n   *\n   * @param moduleAddress - The desired module address\n   * @param options - The transaction optional properties\n   * @returns The Safe transaction ready to be signed\n   * @throws \"Invalid module address provided\"\n   * @throws \"Module provided is already enabled\"\n   */\n  async createEnableModuleTx(moduleAddress, options) {\n    const safeTransactionData = {\n      to: this.getAddress(),\n      value: '0',\n      data: await __classPrivateFieldGet(this, _Safe_moduleManager, \"f\").encodeEnableModuleData(moduleAddress),\n      ...options\n    };\n    const safeTransaction = await this.createTransaction({\n      safeTransactionData\n    });\n    return safeTransaction;\n  }\n  /**\n   * Returns the Safe transaction to disable a Safe module.\n   *\n   * @param moduleAddress - The desired module address\n   * @param options - The transaction optional properties\n   * @returns The Safe transaction ready to be signed\n   * @throws \"Invalid module address provided\"\n   * @throws \"Module provided is not enabled already\"\n   */\n  async createDisableModuleTx(moduleAddress, options) {\n    const safeTransactionData = {\n      to: this.getAddress(),\n      value: '0',\n      data: await __classPrivateFieldGet(this, _Safe_moduleManager, \"f\").encodeDisableModuleData(moduleAddress),\n      ...options\n    };\n    const safeTransaction = await this.createTransaction({\n      safeTransactionData\n    });\n    return safeTransaction;\n  }\n  /**\n   * Returns the Safe transaction to add an owner and optionally change the threshold.\n   *\n   * @param params - The transaction params\n   * @param options - The transaction optional properties\n   * @returns The Safe transaction ready to be signed\n   * @throws \"Invalid owner address provided\"\n   * @throws \"Address provided is already an owner\"\n   * @throws \"Threshold needs to be greater than 0\"\n   * @throws \"Threshold cannot exceed owner count\"\n   */\n  async createAddOwnerTx(_ref5, options) {\n    let {\n      ownerAddress,\n      threshold\n    } = _ref5;\n    const safeTransactionData = {\n      to: this.getAddress(),\n      value: '0',\n      data: await __classPrivateFieldGet(this, _Safe_ownerManager, \"f\").encodeAddOwnerWithThresholdData(ownerAddress, threshold),\n      ...options\n    };\n    const safeTransaction = await this.createTransaction({\n      safeTransactionData\n    });\n    return safeTransaction;\n  }\n  /**\n   * Returns the Safe transaction to remove an owner and optionally change the threshold.\n   *\n   * @param params - The transaction params\n   * @param options - The transaction optional properties\n   * @returns The Safe transaction ready to be signed\n   * @throws \"Invalid owner address provided\"\n   * @throws \"Address provided is not an owner\"\n   * @throws \"Threshold needs to be greater than 0\"\n   * @throws \"Threshold cannot exceed owner count\"\n   */\n  async createRemoveOwnerTx(_ref6, options) {\n    let {\n      ownerAddress,\n      threshold\n    } = _ref6;\n    const safeTransactionData = {\n      to: this.getAddress(),\n      value: '0',\n      data: await __classPrivateFieldGet(this, _Safe_ownerManager, \"f\").encodeRemoveOwnerData(ownerAddress, threshold),\n      ...options\n    };\n    const safeTransaction = await this.createTransaction({\n      safeTransactionData\n    });\n    return safeTransaction;\n  }\n  /**\n   * Returns the Safe transaction to replace an owner of the Safe with a new one.\n   *\n   * @param params - The transaction params\n   * @param options - The transaction optional properties\n   * @returns The Safe transaction ready to be signed\n   * @throws \"Invalid new owner address provided\"\n   * @throws \"Invalid old owner address provided\"\n   * @throws \"New address provided is already an owner\"\n   * @throws \"Old address provided is not an owner\"\n   */\n  async createSwapOwnerTx(_ref7, options) {\n    let {\n      oldOwnerAddress,\n      newOwnerAddress\n    } = _ref7;\n    const safeTransactionData = {\n      to: this.getAddress(),\n      value: '0',\n      data: await __classPrivateFieldGet(this, _Safe_ownerManager, \"f\").encodeSwapOwnerData(oldOwnerAddress, newOwnerAddress),\n      ...options\n    };\n    const safeTransaction = await this.createTransaction({\n      safeTransactionData\n    });\n    return safeTransaction;\n  }\n  /**\n   * Returns the Safe transaction to change the threshold.\n   *\n   * @param threshold - The new threshold\n   * @param options - The transaction optional properties\n   * @returns The Safe transaction ready to be signed\n   * @throws \"Threshold needs to be greater than 0\"\n   * @throws \"Threshold cannot exceed owner count\"\n   */\n  async createChangeThresholdTx(threshold, options) {\n    const safeTransactionData = {\n      to: this.getAddress(),\n      value: '0',\n      data: await __classPrivateFieldGet(this, _Safe_ownerManager, \"f\").encodeChangeThresholdData(threshold),\n      ...options\n    };\n    const safeTransaction = await this.createTransaction({\n      safeTransactionData\n    });\n    return safeTransaction;\n  }\n  /**\n   * Converts a transaction from type SafeMultisigTransactionResponse to type SafeTransaction\n   *\n   * @param serviceTransactionResponse - The transaction to convert\n   * @returns The converted transaction with type SafeTransaction\n   */\n  async toSafeTransactionType(serviceTransactionResponse) {\n    var _a;\n    const safeTransactionData = {\n      to: serviceTransactionResponse.to,\n      value: serviceTransactionResponse.value,\n      data: serviceTransactionResponse.data || '0x',\n      operation: serviceTransactionResponse.operation,\n      safeTxGas: serviceTransactionResponse.safeTxGas,\n      baseGas: serviceTransactionResponse.baseGas,\n      gasPrice: Number(serviceTransactionResponse.gasPrice),\n      gasToken: serviceTransactionResponse.gasToken,\n      refundReceiver: serviceTransactionResponse.refundReceiver,\n      nonce: serviceTransactionResponse.nonce\n    };\n    const safeTransaction = await this.createTransaction({\n      safeTransactionData\n    });\n    (_a = serviceTransactionResponse.confirmations) === null || _a === void 0 ? void 0 : _a.map(confirmation => {\n      const signature = new SafeSignature_1.default(confirmation.owner, confirmation.signature);\n      safeTransaction.addSignature(signature);\n    });\n    return safeTransaction;\n  }\n  /**\n   * Checks if a Safe transaction can be executed successfully with no errors.\n   *\n   * @param safeTransaction - The Safe transaction to check\n   * @param options - The Safe transaction execution options. Optional\n   * @returns TRUE if the Safe transaction can be executed successfully with no errors\n   */\n  async isValidTransaction(safeTransaction, options) {\n    let transaction = (0, utils_1.isSafeMultisigTransactionResponse)(safeTransaction) ? await this.toSafeTransactionType(safeTransaction) : safeTransaction;\n    const signedSafeTransaction = await this.copyTransaction(transaction);\n    const txHash = await this.getTransactionHash(signedSafeTransaction);\n    const ownersWhoApprovedTx = await this.getOwnersWhoApprovedTx(txHash);\n    for (const owner of ownersWhoApprovedTx) {\n      signedSafeTransaction.addSignature((0, signatures_1.generatePreValidatedSignature)(owner));\n    }\n    const owners = await this.getOwners();\n    const signerAddress = await __classPrivateFieldGet(this, _Safe_ethAdapter, \"f\").getSignerAddress();\n    if (!signerAddress) {\n      throw new Error('EthAdapter must be initialized with a signer to use this method');\n    }\n    if (owners.includes(signerAddress)) {\n      signedSafeTransaction.addSignature((0, signatures_1.generatePreValidatedSignature)(signerAddress));\n    }\n    const isTxValid = await __classPrivateFieldGet(this, _Safe_contractManager, \"f\").safeContract.isValidTransaction(signedSafeTransaction, {\n      from: signerAddress,\n      ...options\n    });\n    return isTxValid;\n  }\n  /**\n   * Executes a Safe transaction.\n   *\n   * @param safeTransaction - The Safe transaction to execute\n   * @param options - The Safe transaction execution options. Optional\n   * @returns The Safe transaction response\n   * @throws \"No signer provided\"\n   * @throws \"There are X signatures missing\"\n   * @throws \"Cannot specify gas and gasLimit together in transaction options\"\n   */\n  async executeTransaction(safeTransaction, options) {\n    let transaction = (0, utils_1.isSafeMultisigTransactionResponse)(safeTransaction) ? await this.toSafeTransactionType(safeTransaction) : safeTransaction;\n    const signedSafeTransaction = await this.copyTransaction(transaction);\n    const txHash = await this.getTransactionHash(signedSafeTransaction);\n    const ownersWhoApprovedTx = await this.getOwnersWhoApprovedTx(txHash);\n    for (const owner of ownersWhoApprovedTx) {\n      signedSafeTransaction.addSignature((0, signatures_1.generatePreValidatedSignature)(owner));\n    }\n    const owners = await this.getOwners();\n    const signerAddress = await __classPrivateFieldGet(this, _Safe_ethAdapter, \"f\").getSignerAddress();\n    if (signerAddress && owners.includes(signerAddress)) {\n      signedSafeTransaction.addSignature((0, signatures_1.generatePreValidatedSignature)(signerAddress));\n    }\n    const threshold = await this.getThreshold();\n    if (threshold > signedSafeTransaction.signatures.size) {\n      const signaturesMissing = threshold - signedSafeTransaction.signatures.size;\n      throw new Error(\"There \".concat(signaturesMissing > 1 ? 'are' : 'is', \" \").concat(signaturesMissing, \" signature\").concat(signaturesMissing > 1 ? 's' : '', \" missing\"));\n    }\n    const value = bignumber_1.BigNumber.from(signedSafeTransaction.data.value);\n    if (!value.isZero()) {\n      const balance = await this.getBalance();\n      if (value.gt(bignumber_1.BigNumber.from(balance))) {\n        throw new Error('Not enough Ether funds');\n      }\n    }\n    if ((options === null || options === void 0 ? void 0 : options.gas) && (options === null || options === void 0 ? void 0 : options.gasLimit)) {\n      throw new Error('Cannot specify gas and gasLimit together in transaction options');\n    }\n    const txResponse = await __classPrivateFieldGet(this, _Safe_contractManager, \"f\").safeContract.execTransaction(signedSafeTransaction, {\n      from: signerAddress,\n      ...options\n    });\n    return txResponse;\n  }\n}\n_Safe_ethAdapter = new WeakMap(), _Safe_contractManager = new WeakMap(), _Safe_ownerManager = new WeakMap(), _Safe_moduleManager = new WeakMap(), _Safe_guardManager = new WeakMap(), _Safe_fallbackHandlerManager = new WeakMap();\nexports.default = Safe;","map":{"version":3,"names":["bignumber_1","require","safe_core_sdk_types_1","safe_core_sdk_utils_1","contractManager_1","__importDefault","fallbackHandlerManager_1","guardManager_1","moduleManager_1","ownerManager_1","utils_1","signatures_1","SafeSignature_1","SafeTransaction_1","utils_2","Safe","constructor","_Safe_ethAdapter","set","_Safe_contractManager","_Safe_ownerManager","_Safe_moduleManager","_Safe_guardManager","_Safe_fallbackHandlerManager","create","_ref","ethAdapter","safeAddress","isL1SafeMasterCopy","contractNetworks","safeSdk","init","_ref2","__classPrivateFieldSet","default","__classPrivateFieldGet","safeContract","connect","_ref3","getAddress","getContractManager","getEthAdapter","getMultiSendAddress","multiSendContract","getMultiSendCallOnlyAddress","multiSendCallOnlyContract","getContractVersion","getVersion","getOwners","getNonce","getThreshold","getChainId","getBalance","getFallbackHandler","getGuard","getModules","isModuleEnabled","moduleAddress","isOwner","ownerAddress","createTransaction","_ref4","safeTransactionData","onlyCalls","options","isMetaTransactionArray","length","Error","newTransaction","multiSendData","encodeMultiSendData","map","standardizeMetaTransactionData","multiSendTransaction","to","value","data","encode","operation","OperationType","DelegateCall","standardizedTransaction","standardizeSafeTransactionData","createRejectionTransaction","nonce","safeTxGas","copyTransaction","safeTransaction","signedSafeTransaction","signatures","forEach","signature","addSignature","getTransactionHash","txHash","signTransactionHash","hash","generateSignature","signTypedData","methodVersion","safeTransactionEIP712Args","safeVersion","chainId","generateEIP712Signature","signTransaction","signingMethod","arguments","undefined","transaction","isSafeMultisigTransactionResponse","toSafeTransactionType","owners","signerAddress","getSignerAddress","addressIsOwner","find","owner","sameString","hasSafeFeature","SAFE_FEATURES","ETH_SIGN","approveTransactionHash","gas","gasLimit","approveHash","from","getOwnersWhoApprovedTx","ownersWhoApproved","approved","approvedHashes","gt","push","createEnableFallbackHandlerTx","fallbackHandlerAddress","encodeEnableFallbackHandlerData","createDisableFallbackHandlerTx","encodeDisableFallbackHandlerData","createEnableGuardTx","guardAddress","encodeEnableGuardData","createDisableGuardTx","encodeDisableGuardData","createEnableModuleTx","encodeEnableModuleData","createDisableModuleTx","encodeDisableModuleData","createAddOwnerTx","_ref5","threshold","encodeAddOwnerWithThresholdData","createRemoveOwnerTx","_ref6","encodeRemoveOwnerData","createSwapOwnerTx","_ref7","oldOwnerAddress","newOwnerAddress","encodeSwapOwnerData","createChangeThresholdTx","encodeChangeThresholdData","serviceTransactionResponse","baseGas","gasPrice","Number","gasToken","refundReceiver","_a","confirmations","confirmation","isValidTransaction","ownersWhoApprovedTx","generatePreValidatedSignature","includes","isTxValid","executeTransaction","size","signaturesMissing","concat","BigNumber","isZero","balance","txResponse","execTransaction","exports"],"sources":["../../src/Safe.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}