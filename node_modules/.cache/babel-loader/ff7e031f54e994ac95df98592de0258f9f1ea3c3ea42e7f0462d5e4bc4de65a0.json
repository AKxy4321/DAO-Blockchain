{"ast":null,"code":"export function assertType(obj, key) {\n  let type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"string\";\n  if (!obj[key] || typeof obj[key] !== type) {\n    throw new Error(\"Missing or invalid \\\"\".concat(key, \"\\\" param\"));\n  }\n}\nexport function hasRequiredParams(params, required) {\n  let matches = true;\n  required.forEach(key => {\n    const exists = (key in params);\n    if (!exists) {\n      matches = false;\n    }\n  });\n  return matches;\n}\nexport function hasExactParamsLength(params, length) {\n  return Array.isArray(params) ? params.length === length : Object.keys(params).length === length;\n}\nexport function hasRequiredParamsLength(params, minLength) {\n  return Array.isArray(params) ? params.length >= minLength : Object.keys(params).length >= minLength;\n}\nexport function checkParams(params, required, optional) {\n  const exact = !optional.length;\n  const matchesLength = exact ? hasExactParamsLength(params, required.length) : hasRequiredParamsLength(params, required.length);\n  if (!matchesLength) return false;\n  return hasRequiredParams(params, required);\n}\nexport function methodEndsWith(method, expected) {\n  let separator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"_\";\n  const split = method.split(separator);\n  return split[split.length - 1].trim().toLowerCase() === expected.trim().toLowerCase();\n}","map":{"version":3,"names":["assertType","obj","key","type","arguments","length","undefined","Error","concat","hasRequiredParams","params","required","matches","forEach","exists","hasExactParamsLength","Array","isArray","Object","keys","hasRequiredParamsLength","minLength","checkParams","optional","exact","matchesLength","methodEndsWith","method","expected","separator","split","trim","toLowerCase"],"sources":["../../src/misc.ts"],"sourcesContent":[null],"mappings":"AAAA,OAAM,SAAUA,UAAUA,CAACC,GAAQ,EAAEC,GAAW,EAAiB;EAAA,IAAfC,IAAI,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,QAAQ;EAC/D,IAAI,CAACH,GAAG,CAACC,GAAG,CAAC,IAAI,OAAOD,GAAG,CAACC,GAAG,CAAC,KAAKC,IAAI,EAAE;IACzC,MAAM,IAAII,KAAK,yBAAAC,MAAA,CAAwBN,GAAG,aAAS,CAAC;;AAExD;AAEA,OAAM,SAAUO,iBAAiBA,CAACC,MAAW,EAAEC,QAAkB;EAC/D,IAAIC,OAAO,GAAG,IAAI;EAClBD,QAAQ,CAACE,OAAO,CAACX,GAAG,IAAG;IACrB,MAAMY,MAAM,IAAGZ,GAAG,IAAIQ,MAAM;IAC5B,IAAI,CAACI,MAAM,EAAE;MACXF,OAAO,GAAG,KAAK;;EAEnB,CAAC,CAAC;EACF,OAAOA,OAAO;AAChB;AAEA,OAAM,SAAUG,oBAAoBA,CAACL,MAAW,EAAEL,MAAc;EAC9D,OAAOW,KAAK,CAACC,OAAO,CAACP,MAAM,CAAC,GACxBA,MAAM,CAACL,MAAM,KAAKA,MAAM,GACxBa,MAAM,CAACC,IAAI,CAACT,MAAM,CAAC,CAACL,MAAM,KAAKA,MAAM;AAC3C;AAEA,OAAM,SAAUe,uBAAuBA,CACrCV,MAAW,EACXW,SAAiB;EAEjB,OAAOL,KAAK,CAACC,OAAO,CAACP,MAAM,CAAC,GACxBA,MAAM,CAACL,MAAM,IAAIgB,SAAS,GAC1BH,MAAM,CAACC,IAAI,CAACT,MAAM,CAAC,CAACL,MAAM,IAAIgB,SAAS;AAC7C;AAEA,OAAM,SAAUC,WAAWA,CACzBZ,MAAW,EACXC,QAAkB,EAClBY,QAAkB;EAElB,MAAMC,KAAK,GAAG,CAACD,QAAQ,CAAClB,MAAM;EAC9B,MAAMoB,aAAa,GAAGD,KAAK,GACvBT,oBAAoB,CAACL,MAAM,EAAEC,QAAQ,CAACN,MAAM,CAAC,GAC7Ce,uBAAuB,CAACV,MAAM,EAAEC,QAAQ,CAACN,MAAM,CAAC;EACpD,IAAI,CAACoB,aAAa,EAAE,OAAO,KAAK;EAChC,OAAOhB,iBAAiB,CAACC,MAAM,EAAEC,QAAQ,CAAC;AAC5C;AAEA,OAAM,SAAUe,cAAcA,CAC5BC,MAAc,EACdC,QAAgB,EACD;EAAA,IAAfC,SAAS,GAAAzB,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,GAAG;EAEf,MAAM0B,KAAK,GAAGH,MAAM,CAACG,KAAK,CAACD,SAAS,CAAC;EACrC,OACEC,KAAK,CAACA,KAAK,CAACzB,MAAM,GAAG,CAAC,CAAC,CAAC0B,IAAI,EAAE,CAACC,WAAW,EAAE,KAC5CJ,QAAQ,CAACG,IAAI,EAAE,CAACC,WAAW,EAAE;AAEjC"},"metadata":{},"sourceType":"module","externalDependencies":[]}