{"ast":null,"code":"/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;\nimport { ReactiveElement } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { HAS_INTERSECTION_OBSERVER, HAS_RESIZE_OBSERVER } from './constants.js';\nimport { $updateEnvironment } from './features/environment.js';\nimport { makeTemplate } from './template.js';\nimport { $evictionPolicy, CachingGLTFLoader } from './three-components/CachingGLTFLoader.js';\nimport { ModelScene } from './three-components/ModelScene.js';\nimport { Renderer } from './three-components/Renderer.js';\nimport { clamp, debounce } from './utilities.js';\nimport { dataUrlToBlob } from './utilities/data-conversion.js';\nimport { ProgressTracker } from './utilities/progress-tracker.js';\nconst CLEAR_MODEL_TIMEOUT_MS = 1000;\nconst FALLBACK_SIZE_UPDATE_THRESHOLD_MS = 50;\nconst ANNOUNCE_MODEL_VISIBILITY_DEBOUNCE_THRESHOLD = 0;\nconst UNSIZED_MEDIA_WIDTH = 300;\nconst UNSIZED_MEDIA_HEIGHT = 150;\nexport const blobCanvas = document.createElement('canvas');\nconst $fallbackResizeHandler = Symbol('fallbackResizeHandler');\nconst $defaultAriaLabel = Symbol('defaultAriaLabel');\nconst $resizeObserver = Symbol('resizeObserver');\nconst $clearModelTimeout = Symbol('clearModelTimeout');\nconst $onContextLost = Symbol('onContextLost');\nconst $loaded = Symbol('loaded');\nconst $status = Symbol('status');\nconst $onFocus = Symbol('onFocus');\nconst $onBlur = Symbol('onBlur');\nexport const $updateSize = Symbol('updateSize');\nexport const $intersectionObserver = Symbol('intersectionObserver');\nexport const $isElementInViewport = Symbol('isElementInViewport');\nexport const $announceModelVisibility = Symbol('announceModelVisibility');\nexport const $ariaLabel = Symbol('ariaLabel');\nexport const $altDefaulted = Symbol('altDefaulted');\nexport const $statusElement = Symbol('statusElement');\nexport const $updateStatus = Symbol('updateStatus');\nexport const $loadedTime = Symbol('loadedTime');\nexport const $updateSource = Symbol('updateSource');\nexport const $markLoaded = Symbol('markLoaded');\nexport const $container = Symbol('container');\nexport const $userInputElement = Symbol('input');\nexport const $canvas = Symbol('canvas');\nexport const $scene = Symbol('scene');\nexport const $needsRender = Symbol('needsRender');\nexport const $tick = Symbol('tick');\nexport const $onModelLoad = Symbol('onModelLoad');\nexport const $onResize = Symbol('onResize');\nexport const $renderer = Symbol('renderer');\nexport const $progressTracker = Symbol('progressTracker');\nexport const $getLoaded = Symbol('getLoaded');\nexport const $getModelIsVisible = Symbol('getModelIsVisible');\nexport const $shouldAttemptPreload = Symbol('shouldAttemptPreload');\nexport const toVector3D = v => {\n  return {\n    x: v.x,\n    y: v.y,\n    z: v.z,\n    toString() {\n      return \"\".concat(this.x, \"m \").concat(this.y, \"m \").concat(this.z, \"m\");\n    }\n  };\n};\nexport const toVector2D = v => {\n  return {\n    u: v.x,\n    v: v.y,\n    toString() {\n      return \"\".concat(this.u, \" \").concat(this.v);\n    }\n  };\n};\n/**\n * Definition for a basic <model-viewer> element.\n */\nexport default class ModelViewerElementBase extends ReactiveElement {\n  /**\n   * Creates a new ModelViewerElement.\n   */\n  constructor() {\n    super();\n    this.alt = null;\n    this.src = null;\n    this.withCredentials = false;\n    /**\n     * Generates a 3D model schema https://schema.org/3DModel associated with\n     * the loaded src and inserts it into the header of the page for search\n     * engines to crawl.\n     */\n    this.generateSchema = false;\n    this[_a] = false;\n    this[_b] = false;\n    this[_c] = 0;\n    this[_d] = '';\n    this[_e] = null;\n    this[_f] = debounce(() => {\n      const boundingRect = this.getBoundingClientRect();\n      this[$updateSize](boundingRect);\n    }, FALLBACK_SIZE_UPDATE_THRESHOLD_MS);\n    this[_g] = debounce(oldVisibility => {\n      const newVisibility = this.modelIsVisible;\n      if (newVisibility !== oldVisibility) {\n        this.dispatchEvent(new CustomEvent('model-visibility', {\n          detail: {\n            visible: newVisibility\n          }\n        }));\n      }\n    }, ANNOUNCE_MODEL_VISIBILITY_DEBOUNCE_THRESHOLD);\n    this[_h] = null;\n    this[_j] = null;\n    this[_k] = new ProgressTracker();\n    this[_l] = () => {\n      this[$statusElement].textContent = this[$status];\n    };\n    this[_m] = () => {\n      this[$statusElement].textContent = '';\n    };\n    this[_o] = event => {\n      this.dispatchEvent(new CustomEvent('error', {\n        detail: {\n          type: 'webglcontextlost',\n          sourceError: event.sourceEvent\n        }\n      }));\n    };\n    this.attachShadow({\n      mode: 'open'\n    });\n    const shadowRoot = this.shadowRoot;\n    makeTemplate(shadowRoot);\n    this[$container] = shadowRoot.querySelector('.container');\n    this[$userInputElement] = shadowRoot.querySelector('.userInput');\n    this[$canvas] = shadowRoot.querySelector('canvas');\n    this[$statusElement] = shadowRoot.querySelector('#status');\n    this[$defaultAriaLabel] = this[$userInputElement].getAttribute('aria-label');\n    // Because of potential race conditions related to invoking the constructor\n    // we only use the bounding rect to set the initial size if the element is\n    // already connected to the document:\n    let width, height;\n    if (this.isConnected) {\n      const rect = this.getBoundingClientRect();\n      width = rect.width;\n      height = rect.height;\n    } else {\n      width = UNSIZED_MEDIA_WIDTH;\n      height = UNSIZED_MEDIA_HEIGHT;\n    }\n    // Create the underlying ModelScene.\n    this[$scene] = new ModelScene({\n      canvas: this[$canvas],\n      element: this,\n      width,\n      height\n    });\n    // Update initial size on microtask timing so that subclasses have a\n    // chance to initialize\n    Promise.resolve().then(() => {\n      this[$updateSize](this.getBoundingClientRect());\n    });\n    if (HAS_RESIZE_OBSERVER) {\n      // Set up a resize observer so we can scale our canvas\n      // if our <model-viewer> changes\n      this[$resizeObserver] = new ResizeObserver(entries => {\n        // Don't resize anything if in AR mode; otherwise the canvas\n        // scaling to fullscreen on entering AR will clobber the flat/2d\n        // dimensions of the element.\n        if (this[$renderer].isPresenting) {\n          return;\n        }\n        for (let entry of entries) {\n          if (entry.target === this) {\n            this[$updateSize](entry.contentRect);\n          }\n        }\n      });\n    }\n    if (HAS_INTERSECTION_OBSERVER) {\n      this[$intersectionObserver] = new IntersectionObserver(entries => {\n        for (let entry of entries) {\n          if (entry.target === this) {\n            const oldVisibility = this.modelIsVisible;\n            this[$isElementInViewport] = entry.isIntersecting;\n            this[$announceModelVisibility](oldVisibility);\n            if (this[$isElementInViewport] && !this.loaded) {\n              this[$updateSource]();\n            }\n          }\n        }\n      }, {\n        root: null,\n        // We used to have margin here, but it was causing animated models below\n        // the fold to steal the frame budget. Weirder still, it would also\n        // cause input events to be swallowed, sometimes for seconds on the\n        // model above the fold, but only when the animated model was completely\n        // below. Setting this margin to zero fixed it.\n        rootMargin: '0px',\n        // With zero threshold, an element adjacent to but not intersecting the\n        // viewport will be reported as intersecting, which will cause\n        // unnecessary rendering. Any slight positive threshold alleviates this.\n        threshold: 0.00001\n      });\n    } else {\n      // If there is no intersection observer, then all models should be visible\n      // at all times:\n      this[$isElementInViewport] = true;\n    }\n  }\n  static get is() {\n    return 'model-viewer';\n  }\n  /** @export */\n  static set modelCacheSize(value) {\n    CachingGLTFLoader[$evictionPolicy].evictionThreshold = value;\n  }\n  /** @export */\n  static get modelCacheSize() {\n    return CachingGLTFLoader[$evictionPolicy].evictionThreshold;\n  }\n  /** @export */\n  static set minimumRenderScale(value) {\n    if (value > 1) {\n      console.warn('<model-viewer> minimumRenderScale has been clamped to a maximum value of 1.');\n    }\n    if (value <= 0) {\n      console.warn('<model-viewer> minimumRenderScale has been clamped to a minimum value of 0.25.');\n    }\n    Renderer.singleton.minScale = value;\n  }\n  /** @export */\n  static get minimumRenderScale() {\n    return Renderer.singleton.minScale;\n  }\n  /** @export */\n  get loaded() {\n    return this[$getLoaded]();\n  }\n  get [(_a = $isElementInViewport, _b = $loaded, _c = $loadedTime, _d = $status, _e = $clearModelTimeout, _f = $fallbackResizeHandler, _g = $announceModelVisibility, _h = $resizeObserver, _j = $intersectionObserver, _k = $progressTracker, $renderer)]() {\n    return Renderer.singleton;\n  }\n  /** @export */\n  get modelIsVisible() {\n    return this[$getModelIsVisible]();\n  }\n  connectedCallback() {\n    super.connectedCallback && super.connectedCallback();\n    if (HAS_RESIZE_OBSERVER) {\n      this[$resizeObserver].observe(this);\n    } else {\n      self.addEventListener('resize', this[$fallbackResizeHandler]);\n    }\n    if (HAS_INTERSECTION_OBSERVER) {\n      this[$intersectionObserver].observe(this);\n    }\n    this.addEventListener('focus', this[$onFocus]);\n    this.addEventListener('blur', this[$onBlur]);\n    const renderer = this[$renderer];\n    renderer.addEventListener('contextlost', this[$onContextLost]);\n    renderer.registerScene(this[$scene]);\n    if (this[$clearModelTimeout] != null) {\n      self.clearTimeout(this[$clearModelTimeout]);\n      this[$clearModelTimeout] = null;\n      // Force an update in case the model has been evicted from our GLTF cache\n      // @see https://lit-element.polymer-project.org/guide/lifecycle#requestupdate\n      this.requestUpdate('src', null);\n    }\n  }\n  disconnectedCallback() {\n    super.disconnectedCallback && super.disconnectedCallback();\n    if (HAS_RESIZE_OBSERVER) {\n      this[$resizeObserver].unobserve(this);\n    } else {\n      self.removeEventListener('resize', this[$fallbackResizeHandler]);\n    }\n    if (HAS_INTERSECTION_OBSERVER) {\n      this[$intersectionObserver].unobserve(this);\n    }\n    this.removeEventListener('focus', this[$onFocus]);\n    this.removeEventListener('blur', this[$onBlur]);\n    const renderer = this[$renderer];\n    renderer.removeEventListener('contextlost', this[$onContextLost]);\n    renderer.unregisterScene(this[$scene]);\n    this[$clearModelTimeout] = self.setTimeout(() => {\n      this[$scene].dispose();\n      this[$clearModelTimeout] = null;\n    }, CLEAR_MODEL_TIMEOUT_MS);\n  }\n  updated(changedProperties) {\n    super.updated(changedProperties);\n    // NOTE(cdata): If a property changes from values A -> B -> A in the space\n    // of a microtask, LitElement/UpdatingElement will notify of a change even\n    // though the value has effectively not changed, so we need to check to make\n    // sure that the value has actually changed before changing the loaded flag.\n    if (changedProperties.has('src')) {\n      if (this.src == null) {\n        this[$loaded] = false;\n        this[$loadedTime] = 0;\n        this[$scene].reset();\n      } else if (this.src !== this[$scene].url) {\n        this[$loaded] = false;\n        this[$loadedTime] = 0;\n        this[$updateSource]();\n      }\n    }\n    if (changedProperties.has('alt')) {\n      this[$userInputElement].setAttribute('aria-label', this[$ariaLabel]);\n    }\n    if (changedProperties.has('withCredentials')) {\n      CachingGLTFLoader.withCredentials = this.withCredentials;\n    }\n    if (changedProperties.has('generateSchema')) {\n      if (this.generateSchema) {\n        this[$scene].updateSchema(this.src);\n      } else {\n        this[$scene].updateSchema(null);\n      }\n    }\n  }\n  /** @export */\n  toDataURL(type, encoderOptions) {\n    return this[$renderer].displayCanvas(this[$scene]).toDataURL(type, encoderOptions);\n  }\n  /** @export */\n  async toBlob(options) {\n    const mimeType = options ? options.mimeType : undefined;\n    const qualityArgument = options ? options.qualityArgument : undefined;\n    const useIdealAspect = options ? options.idealAspect : undefined;\n    const {\n      width,\n      height,\n      idealAspect,\n      aspect\n    } = this[$scene];\n    const {\n      dpr,\n      scaleFactor\n    } = this[$renderer];\n    let outputWidth = width * scaleFactor * dpr;\n    let outputHeight = height * scaleFactor * dpr;\n    let offsetX = 0;\n    let offsetY = 0;\n    if (useIdealAspect === true) {\n      if (idealAspect > aspect) {\n        const oldHeight = outputHeight;\n        outputHeight = Math.round(outputWidth / idealAspect);\n        offsetY = (oldHeight - outputHeight) / 2;\n      } else {\n        const oldWidth = outputWidth;\n        outputWidth = Math.round(outputHeight * idealAspect);\n        offsetX = (oldWidth - outputWidth) / 2;\n      }\n    }\n    blobCanvas.width = outputWidth;\n    blobCanvas.height = outputHeight;\n    try {\n      return new Promise(async (resolve, reject) => {\n        blobCanvas.getContext('2d').drawImage(this[$renderer].displayCanvas(this[$scene]), offsetX, offsetY, outputWidth, outputHeight, 0, 0, outputWidth, outputHeight);\n        if (blobCanvas.msToBlob) {\n          // NOTE: msToBlob only returns image/png\n          // so ensure mimeType is not specified (defaults to image/png)\n          // or is image/png, otherwise fallback to using toDataURL on IE.\n          if (!mimeType || mimeType === 'image/png') {\n            return resolve(blobCanvas.msToBlob());\n          }\n        }\n        if (!blobCanvas.toBlob) {\n          return resolve(await dataUrlToBlob(blobCanvas.toDataURL(mimeType, qualityArgument)));\n        }\n        blobCanvas.toBlob(blob => {\n          if (!blob) {\n            return reject(new Error('Unable to retrieve canvas blob'));\n          }\n          resolve(blob);\n        }, mimeType, qualityArgument);\n      });\n    } finally {\n      this[$updateSize]({\n        width,\n        height\n      });\n    }\n    ;\n  }\n  registerRenderer(renderer) {\n    this[$scene].externalRenderer = renderer;\n  }\n  unregisterRenderer() {\n    this[$scene].externalRenderer = null;\n  }\n  get [$ariaLabel]() {\n    return this[$altDefaulted];\n  }\n  get [$altDefaulted]() {\n    return this.alt == null || this.alt === 'null' ? this[$defaultAriaLabel] : this.alt;\n  }\n  // NOTE(cdata): Although this may seem extremely redundant, it is required in\n  // order to support overloading when TypeScript is compiled to ES5\n  // @see https://github.com/Polymer/lit-element/pull/745\n  // @see https://github.com/microsoft/TypeScript/issues/338\n  [$getLoaded]() {\n    return this[$loaded];\n  }\n  // @see [$getLoaded]\n  [$getModelIsVisible]() {\n    return this.loaded && this[$isElementInViewport];\n  }\n  [$shouldAttemptPreload]() {\n    return !!this.src && this[$isElementInViewport];\n  }\n  /**\n   * Called on initialization and when the resize observer fires.\n   */\n  [$updateSize](_ref) {\n    let {\n      width,\n      height\n    } = _ref;\n    this[$container].style.width = \"\".concat(width, \"px\");\n    this[$container].style.height = \"\".concat(height, \"px\");\n    this[$onResize]({\n      width: parseFloat(width),\n      height: parseFloat(height)\n    });\n  }\n  [$tick](_time, _delta) {}\n  [$markLoaded]() {\n    if (this[$loaded]) {\n      return;\n    }\n    this[$loaded] = true;\n    this[$loadedTime] = performance.now();\n  }\n  [$needsRender]() {\n    this[$scene].queueRender();\n  }\n  [$onModelLoad]() {}\n  [$updateStatus](status) {\n    this[$status] = status;\n    const rootNode = this.getRootNode();\n    // Only change the aria-label if <model-viewer> is currently focused:\n    if (rootNode != null && rootNode.activeElement === this && this[$statusElement].textContent != status) {\n      this[$statusElement].textContent = status;\n    }\n  }\n  [(_l = $onFocus, _m = $onBlur, $onResize)](e) {\n    this[$scene].setSize(e.width, e.height);\n  }\n  /**\n   * Parses the element for an appropriate source URL and\n   * sets the views to use the new model based.\n   */\n  async [(_o = $onContextLost, $updateSource)]() {\n    const scene = this[$scene];\n    if (this.loaded || !this[$shouldAttemptPreload]() || this.src === scene.url) {\n      return;\n    }\n    if (this.generateSchema) {\n      scene.updateSchema(this.src);\n    }\n    this[$updateStatus]('Loading');\n    // If we are loading a new model, we need to stop the animation of\n    // the current one (if any is playing). Otherwise, we might lose\n    // the reference to the scene root and running actions start to\n    // throw exceptions and/or behave in unexpected ways:\n    scene.stopAnimation();\n    const updateSourceProgress = this[$progressTracker].beginActivity();\n    const source = this.src;\n    try {\n      const srcUpdated = scene.setSource(source, progress => updateSourceProgress(clamp(progress, 0, 1) * 0.95));\n      const envUpdated = this[$updateEnvironment]();\n      await Promise.all([srcUpdated, envUpdated]);\n      this[$markLoaded]();\n      this[$onModelLoad]();\n      // Wait for shaders to compile and pixels to be drawn.\n      await new Promise(resolve => {\n        requestAnimationFrame(() => {\n          requestAnimationFrame(() => {\n            this.dispatchEvent(new CustomEvent('load', {\n              detail: {\n                url: source\n              }\n            }));\n            resolve();\n          });\n        });\n      });\n    } catch (error) {\n      this.dispatchEvent(new CustomEvent('error', {\n        detail: {\n          type: 'loadfailure',\n          sourceError: error\n        }\n      }));\n    } finally {\n      updateSourceProgress(1.0);\n    }\n  }\n}\n__decorate([property({\n  type: String\n})], ModelViewerElementBase.prototype, \"alt\", void 0);\n__decorate([property({\n  type: String\n})], ModelViewerElementBase.prototype, \"src\", void 0);\n__decorate([property({\n  type: Boolean,\n  attribute: 'with-credentials'\n})], ModelViewerElementBase.prototype, \"withCredentials\", void 0);\n__decorate([property({\n  type: Boolean,\n  attribute: 'generate-schema'\n})], ModelViewerElementBase.prototype, \"generateSchema\", void 0);","map":{"version":3,"names":["ReactiveElement","property","HAS_INTERSECTION_OBSERVER","HAS_RESIZE_OBSERVER","$updateEnvironment","makeTemplate","$evictionPolicy","CachingGLTFLoader","ModelScene","Renderer","clamp","debounce","dataUrlToBlob","ProgressTracker","CLEAR_MODEL_TIMEOUT_MS","FALLBACK_SIZE_UPDATE_THRESHOLD_MS","ANNOUNCE_MODEL_VISIBILITY_DEBOUNCE_THRESHOLD","UNSIZED_MEDIA_WIDTH","UNSIZED_MEDIA_HEIGHT","blobCanvas","document","createElement","$fallbackResizeHandler","Symbol","$defaultAriaLabel","$resizeObserver","$clearModelTimeout","$onContextLost","$loaded","$status","$onFocus","$onBlur","$updateSize","$intersectionObserver","$isElementInViewport","$announceModelVisibility","$ariaLabel","$altDefaulted","$statusElement","$updateStatus","$loadedTime","$updateSource","$markLoaded","$container","$userInputElement","$canvas","$scene","$needsRender","$tick","$onModelLoad","$onResize","$renderer","$progressTracker","$getLoaded","$getModelIsVisible","$shouldAttemptPreload","toVector3D","v","x","y","z","toString","concat","toVector2D","u","ModelViewerElementBase","constructor","alt","src","withCredentials","generateSchema","_a","_b","_c","_d","_e","_f","boundingRect","getBoundingClientRect","_g","oldVisibility","newVisibility","modelIsVisible","dispatchEvent","CustomEvent","detail","visible","_h","_j","_k","_l","textContent","_m","_o","event","type","sourceError","sourceEvent","attachShadow","mode","shadowRoot","querySelector","getAttribute","width","height","isConnected","rect","canvas","element","Promise","resolve","then","ResizeObserver","entries","isPresenting","entry","target","contentRect","IntersectionObserver","isIntersecting","loaded","root","rootMargin","threshold","is","modelCacheSize","value","evictionThreshold","minimumRenderScale","console","warn","singleton","minScale","connectedCallback","observe","self","addEventListener","renderer","registerScene","clearTimeout","requestUpdate","disconnectedCallback","unobserve","removeEventListener","unregisterScene","setTimeout","dispose","updated","changedProperties","has","reset","url","setAttribute","updateSchema","toDataURL","encoderOptions","displayCanvas","toBlob","options","mimeType","undefined","qualityArgument","useIdealAspect","idealAspect","aspect","dpr","scaleFactor","outputWidth","outputHeight","offsetX","offsetY","oldHeight","Math","round","oldWidth","reject","getContext","drawImage","msToBlob","blob","Error","registerRenderer","externalRenderer","unregisterRenderer","_ref","style","parseFloat","_time","_delta","performance","now","queueRender","status","rootNode","getRootNode","activeElement","e","setSize","scene","stopAnimation","updateSourceProgress","beginActivity","source","srcUpdated","setSource","progress","envUpdated","all","requestAnimationFrame","error","__decorate","String","Boolean","attribute"],"sources":["C:\\Misc\\Documents\\Career\\FinTech\\BlockChain\\FrontEnd\\buildspace-dao-starter\\node_modules\\@google\\model-viewer\\src\\model-viewer-base.ts"],"sourcesContent":["/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {ReactiveElement} from 'lit';\nimport {property} from 'lit/decorators.js';\nimport {Event as ThreeEvent, Vector2, Vector3} from 'three';\n\nimport {HAS_INTERSECTION_OBSERVER, HAS_RESIZE_OBSERVER} from './constants.js';\nimport {$updateEnvironment} from './features/environment.js';\nimport {makeTemplate} from './template.js';\nimport {$evictionPolicy, CachingGLTFLoader} from './three-components/CachingGLTFLoader.js';\nimport {ModelScene} from './three-components/ModelScene.js';\nimport {ContextLostEvent, Renderer} from './three-components/Renderer.js';\nimport {clamp, debounce} from './utilities.js';\nimport {dataUrlToBlob} from './utilities/data-conversion.js';\nimport {ProgressTracker} from './utilities/progress-tracker.js';\n\nconst CLEAR_MODEL_TIMEOUT_MS = 1000;\nconst FALLBACK_SIZE_UPDATE_THRESHOLD_MS = 50;\nconst ANNOUNCE_MODEL_VISIBILITY_DEBOUNCE_THRESHOLD = 0;\nconst UNSIZED_MEDIA_WIDTH = 300;\nconst UNSIZED_MEDIA_HEIGHT = 150;\n\nexport const blobCanvas = document.createElement('canvas');\n\nconst $fallbackResizeHandler = Symbol('fallbackResizeHandler');\nconst $defaultAriaLabel = Symbol('defaultAriaLabel');\n\nconst $resizeObserver = Symbol('resizeObserver');\nconst $clearModelTimeout = Symbol('clearModelTimeout');\nconst $onContextLost = Symbol('onContextLost');\nconst $loaded = Symbol('loaded');\nconst $status = Symbol('status');\nconst $onFocus = Symbol('onFocus');\nconst $onBlur = Symbol('onBlur');\n\nexport const $updateSize = Symbol('updateSize');\nexport const $intersectionObserver = Symbol('intersectionObserver');\nexport const $isElementInViewport = Symbol('isElementInViewport');\nexport const $announceModelVisibility = Symbol('announceModelVisibility');\nexport const $ariaLabel = Symbol('ariaLabel');\nexport const $altDefaulted = Symbol('altDefaulted');\nexport const $statusElement = Symbol('statusElement');\nexport const $updateStatus = Symbol('updateStatus');\nexport const $loadedTime = Symbol('loadedTime');\nexport const $updateSource = Symbol('updateSource');\nexport const $markLoaded = Symbol('markLoaded');\nexport const $container = Symbol('container');\nexport const $userInputElement = Symbol('input');\nexport const $canvas = Symbol('canvas');\nexport const $scene = Symbol('scene');\nexport const $needsRender = Symbol('needsRender');\nexport const $tick = Symbol('tick');\nexport const $onModelLoad = Symbol('onModelLoad');\nexport const $onResize = Symbol('onResize');\nexport const $renderer = Symbol('renderer');\nexport const $progressTracker = Symbol('progressTracker');\nexport const $getLoaded = Symbol('getLoaded');\nexport const $getModelIsVisible = Symbol('getModelIsVisible');\nexport const $shouldAttemptPreload = Symbol('shouldAttemptPreload');\n\nexport interface Vector3D {\n  x: number\n  y: number\n  z: number\n  toString(): string\n}\n\nexport const toVector3D = (v: Vector3) => {\n  return {\n    x: v.x,\n    y: v.y,\n    z: v.z,\n    toString() {\n      return `${this.x}m ${this.y}m ${this.z}m`;\n    }\n  };\n};\n\nexport interface Vector2D {\n  u: number\n  v: number\n  toString(): string\n}\n\nexport const toVector2D = (v: Vector2) => {\n  return {\n    u: v.x,\n    v: v.y,\n    toString() {\n      return `${this.u} ${this.v}`;\n    }\n  };\n};\n\ninterface ToBlobOptions {\n  mimeType?: string, qualityArgument?: number, idealAspect?: boolean\n}\n\nexport interface FramingInfo {\n  framedRadius: number;\n  fieldOfViewAspect: number;\n}\n\nexport interface Camera {\n  viewMatrix: Array<number>;\n  projectionMatrix: Array<number>;\n}\n\nexport interface RendererInterface {\n  load(progressCallback: (progress: number) => void): Promise<FramingInfo>;\n  render(camera: Camera): void;\n  resize(width: number, height: number): void;\n}\n\n/**\n * Definition for a basic <model-viewer> element.\n */\nexport default class ModelViewerElementBase extends ReactiveElement {\n  static get is() {\n    return 'model-viewer';\n  }\n\n  /** @export */\n  static set modelCacheSize(value: number) {\n    CachingGLTFLoader[$evictionPolicy].evictionThreshold = value;\n  }\n\n  /** @export */\n  static get modelCacheSize(): number {\n    return CachingGLTFLoader[$evictionPolicy].evictionThreshold\n  }\n\n  /** @export */\n  static set minimumRenderScale(value: number) {\n    if (value > 1) {\n      console.warn(\n          '<model-viewer> minimumRenderScale has been clamped to a maximum value of 1.');\n    }\n    if (value <= 0) {\n      console.warn(\n          '<model-viewer> minimumRenderScale has been clamped to a minimum value of 0.25.');\n    }\n    Renderer.singleton.minScale = value;\n  }\n\n  /** @export */\n  static get minimumRenderScale(): number {\n    return Renderer.singleton.minScale;\n  }\n\n  @property({type: String}) alt: string|null = null;\n\n  @property({type: String}) src: string|null = null;\n\n  @property({type: Boolean, attribute: 'with-credentials'})\n  withCredentials: boolean = false;\n\n  /**\n   * Generates a 3D model schema https://schema.org/3DModel associated with\n   * the loaded src and inserts it into the header of the page for search\n   * engines to crawl.\n   */\n  @property({type: Boolean, attribute: 'generate-schema'})\n  generateSchema = false;\n\n  protected[$isElementInViewport] = false;\n  protected[$loaded] = false;\n  protected[$loadedTime] = 0;\n  protected[$scene]: ModelScene;\n  protected[$container]: HTMLDivElement;\n  protected[$userInputElement]: HTMLDivElement;\n  protected[$canvas]: HTMLCanvasElement;\n  protected[$statusElement]: HTMLSpanElement;\n  protected[$status] = '';\n  protected[$defaultAriaLabel]: string;\n  protected[$clearModelTimeout]: number|null = null;\n\n  protected[$fallbackResizeHandler] = debounce(() => {\n    const boundingRect = this.getBoundingClientRect();\n    this[$updateSize](boundingRect);\n  }, FALLBACK_SIZE_UPDATE_THRESHOLD_MS);\n\n  protected[$announceModelVisibility] = debounce((oldVisibility: boolean) => {\n    const newVisibility = this.modelIsVisible;\n    if (newVisibility !== oldVisibility) {\n      this.dispatchEvent(new CustomEvent(\n          'model-visibility', {detail: {visible: newVisibility}}));\n    }\n  }, ANNOUNCE_MODEL_VISIBILITY_DEBOUNCE_THRESHOLD);\n\n  protected[$resizeObserver]: ResizeObserver|null = null;\n  protected[$intersectionObserver]: IntersectionObserver|null = null;\n\n  protected[$progressTracker]: ProgressTracker = new ProgressTracker();\n\n  /** @export */\n  get loaded() {\n    return this[$getLoaded]();\n  }\n\n  get[$renderer]() {\n    return Renderer.singleton;\n  }\n\n  /** @export */\n  get modelIsVisible() {\n    return this[$getModelIsVisible]();\n  }\n\n  /**\n   * Creates a new ModelViewerElement.\n   */\n  constructor() {\n    super();\n\n    this.attachShadow({mode: 'open'});\n\n    const shadowRoot = this.shadowRoot!;\n\n    makeTemplate(shadowRoot);\n\n    this[$container] = shadowRoot.querySelector('.container') as HTMLDivElement;\n    this[$userInputElement] =\n        shadowRoot.querySelector('.userInput') as HTMLDivElement;\n    this[$canvas] = shadowRoot.querySelector('canvas') as HTMLCanvasElement;\n    this[$statusElement] =\n        shadowRoot.querySelector('#status') as HTMLSpanElement;\n    this[$defaultAriaLabel] =\n        this[$userInputElement].getAttribute('aria-label')!;\n\n    // Because of potential race conditions related to invoking the constructor\n    // we only use the bounding rect to set the initial size if the element is\n    // already connected to the document:\n    let width, height;\n    if (this.isConnected) {\n      const rect = this.getBoundingClientRect();\n      width = rect.width;\n      height = rect.height;\n    } else {\n      width = UNSIZED_MEDIA_WIDTH;\n      height = UNSIZED_MEDIA_HEIGHT;\n    }\n\n    // Create the underlying ModelScene.\n    this[$scene] =\n        new ModelScene({canvas: this[$canvas], element: this, width, height});\n\n    // Update initial size on microtask timing so that subclasses have a\n    // chance to initialize\n    Promise.resolve().then(() => {\n      this[$updateSize](this.getBoundingClientRect());\n    });\n\n    if (HAS_RESIZE_OBSERVER) {\n      // Set up a resize observer so we can scale our canvas\n      // if our <model-viewer> changes\n      this[$resizeObserver] =\n          new ResizeObserver((entries: Array<ResizeObserverEntry>) => {\n            // Don't resize anything if in AR mode; otherwise the canvas\n            // scaling to fullscreen on entering AR will clobber the flat/2d\n            // dimensions of the element.\n            if (this[$renderer].isPresenting) {\n              return;\n            }\n\n            for (let entry of entries) {\n              if (entry.target === this) {\n                this[$updateSize](entry.contentRect);\n              }\n            }\n          });\n    }\n\n    if (HAS_INTERSECTION_OBSERVER) {\n      this[$intersectionObserver] = new IntersectionObserver(entries => {\n        for (let entry of entries) {\n          if (entry.target === this) {\n            const oldVisibility = this.modelIsVisible;\n            this[$isElementInViewport] = entry.isIntersecting;\n            this[$announceModelVisibility](oldVisibility);\n            if (this[$isElementInViewport] && !this.loaded) {\n              this[$updateSource]();\n            }\n          }\n        }\n      }, {\n        root: null,\n        // We used to have margin here, but it was causing animated models below\n        // the fold to steal the frame budget. Weirder still, it would also\n        // cause input events to be swallowed, sometimes for seconds on the\n        // model above the fold, but only when the animated model was completely\n        // below. Setting this margin to zero fixed it.\n        rootMargin: '0px',\n        // With zero threshold, an element adjacent to but not intersecting the\n        // viewport will be reported as intersecting, which will cause\n        // unnecessary rendering. Any slight positive threshold alleviates this.\n        threshold: 0.00001,\n      });\n    } else {\n      // If there is no intersection observer, then all models should be visible\n      // at all times:\n      this[$isElementInViewport] = true;\n    }\n  }\n\n  connectedCallback() {\n    super.connectedCallback && super.connectedCallback();\n    if (HAS_RESIZE_OBSERVER) {\n      this[$resizeObserver]!.observe(this);\n    } else {\n      self.addEventListener('resize', this[$fallbackResizeHandler]);\n    }\n\n    if (HAS_INTERSECTION_OBSERVER) {\n      this[$intersectionObserver]!.observe(this);\n    }\n\n    this.addEventListener('focus', this[$onFocus]);\n    this.addEventListener('blur', this[$onBlur]);\n\n    const renderer = this[$renderer];\n    renderer.addEventListener(\n        'contextlost', this[$onContextLost] as (event: ThreeEvent) => void);\n\n    renderer.registerScene(this[$scene]);\n\n    if (this[$clearModelTimeout] != null) {\n      self.clearTimeout(this[$clearModelTimeout]!);\n      this[$clearModelTimeout] = null;\n      // Force an update in case the model has been evicted from our GLTF cache\n      // @see https://lit-element.polymer-project.org/guide/lifecycle#requestupdate\n      this.requestUpdate('src', null);\n    }\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback && super.disconnectedCallback();\n    if (HAS_RESIZE_OBSERVER) {\n      this[$resizeObserver]!.unobserve(this);\n    } else {\n      self.removeEventListener('resize', this[$fallbackResizeHandler]);\n    }\n\n    if (HAS_INTERSECTION_OBSERVER) {\n      this[$intersectionObserver]!.unobserve(this);\n    }\n\n    this.removeEventListener('focus', this[$onFocus]);\n    this.removeEventListener('blur', this[$onBlur]);\n\n    const renderer = this[$renderer];\n    renderer.removeEventListener(\n        'contextlost', this[$onContextLost] as (event: ThreeEvent) => void);\n\n    renderer.unregisterScene(this[$scene]);\n\n    this[$clearModelTimeout] = self.setTimeout(() => {\n      this[$scene].dispose();\n      this[$clearModelTimeout] = null;\n    }, CLEAR_MODEL_TIMEOUT_MS);\n  }\n\n  updated(changedProperties: Map<string|number|symbol, any>) {\n    super.updated(changedProperties);\n\n    // NOTE(cdata): If a property changes from values A -> B -> A in the space\n    // of a microtask, LitElement/UpdatingElement will notify of a change even\n    // though the value has effectively not changed, so we need to check to make\n    // sure that the value has actually changed before changing the loaded flag.\n    if (changedProperties.has('src')) {\n      if (this.src == null) {\n        this[$loaded] = false;\n        this[$loadedTime] = 0;\n        this[$scene].reset();\n      } else if (this.src !== this[$scene].url) {\n        this[$loaded] = false;\n        this[$loadedTime] = 0;\n        this[$updateSource]();\n      }\n    }\n\n    if (changedProperties.has('alt')) {\n      this[$userInputElement].setAttribute('aria-label', this[$ariaLabel]);\n    }\n\n    if (changedProperties.has('withCredentials')) {\n      CachingGLTFLoader.withCredentials = this.withCredentials\n    }\n\n    if (changedProperties.has('generateSchema')) {\n      if (this.generateSchema) {\n        this[$scene].updateSchema(this.src);\n      } else {\n        this[$scene].updateSchema(null);\n      }\n    }\n  }\n\n  /** @export */\n  toDataURL(type?: string, encoderOptions?: number): string {\n    return this[$renderer]\n        .displayCanvas(this[$scene])\n        .toDataURL(type, encoderOptions);\n  }\n\n  /** @export */\n  async toBlob(options?: ToBlobOptions): Promise<Blob> {\n    const mimeType = options ? options.mimeType : undefined;\n    const qualityArgument = options ? options.qualityArgument : undefined;\n    const useIdealAspect = options ? options.idealAspect : undefined;\n\n    const {width, height, idealAspect, aspect} = this[$scene];\n    const {dpr, scaleFactor} = this[$renderer];\n    let outputWidth = width * scaleFactor * dpr;\n    let outputHeight = height * scaleFactor * dpr;\n    let offsetX = 0;\n    let offsetY = 0;\n    if (useIdealAspect === true) {\n      if (idealAspect > aspect) {\n        const oldHeight = outputHeight;\n        outputHeight = Math.round(outputWidth / idealAspect);\n        offsetY = (oldHeight - outputHeight) / 2;\n      } else {\n        const oldWidth = outputWidth;\n        outputWidth = Math.round(outputHeight * idealAspect);\n        offsetX = (oldWidth - outputWidth) / 2;\n      }\n    }\n    blobCanvas.width = outputWidth;\n    blobCanvas.height = outputHeight;\n    try {\n      return new Promise<Blob>(async (resolve, reject) => {\n        blobCanvas.getContext('2d')!.drawImage(\n            this[$renderer].displayCanvas(this[$scene]),\n            offsetX,\n            offsetY,\n            outputWidth,\n            outputHeight,\n            0,\n            0,\n            outputWidth,\n            outputHeight);\n        if ((blobCanvas as any).msToBlob) {\n          // NOTE: msToBlob only returns image/png\n          // so ensure mimeType is not specified (defaults to image/png)\n          // or is image/png, otherwise fallback to using toDataURL on IE.\n          if (!mimeType || mimeType === 'image/png') {\n            return resolve((blobCanvas as any).msToBlob());\n          }\n        }\n\n        if (!blobCanvas.toBlob) {\n          return resolve(await dataUrlToBlob(\n              blobCanvas.toDataURL(mimeType, qualityArgument)));\n        }\n\n        blobCanvas.toBlob((blob) => {\n          if (!blob) {\n            return reject(new Error('Unable to retrieve canvas blob'));\n          }\n\n          resolve(blob);\n        }, mimeType, qualityArgument);\n      });\n    } finally {\n      this[$updateSize]({width, height});\n    };\n  }\n\n  registerRenderer(renderer: RendererInterface) {\n    this[$scene].externalRenderer = renderer;\n  }\n\n  unregisterRenderer() {\n    this[$scene].externalRenderer = null;\n  }\n\n  get[$ariaLabel]() {\n    return this[$altDefaulted];\n  }\n\n  get[$altDefaulted]() {\n    return (this.alt == null || this.alt === 'null') ? this[$defaultAriaLabel] :\n                                                       this.alt;\n  }\n\n  // NOTE(cdata): Although this may seem extremely redundant, it is required in\n  // order to support overloading when TypeScript is compiled to ES5\n  // @see https://github.com/Polymer/lit-element/pull/745\n  // @see https://github.com/microsoft/TypeScript/issues/338\n  [$getLoaded](): boolean {\n    return this[$loaded];\n  }\n\n  // @see [$getLoaded]\n  [$getModelIsVisible](): boolean {\n    return this.loaded && this[$isElementInViewport];\n  }\n\n  [$shouldAttemptPreload](): boolean {\n    return !!this.src && this[$isElementInViewport];\n  }\n\n  /**\n   * Called on initialization and when the resize observer fires.\n   */\n  [$updateSize]({width, height}: {width: any, height: any}) {\n    this[$container].style.width = `${width}px`;\n    this[$container].style.height = `${height}px`;\n\n    this[$onResize]({width: parseFloat(width), height: parseFloat(height)});\n  }\n\n  [$tick](_time: number, _delta: number) {\n  }\n\n  [$markLoaded]() {\n    if (this[$loaded]) {\n      return;\n    }\n\n    this[$loaded] = true;\n    this[$loadedTime] = performance.now();\n  }\n\n  [$needsRender]() {\n    this[$scene].queueRender();\n  }\n\n  [$onModelLoad]() {\n  }\n\n  [$updateStatus](status: string) {\n    this[$status] = status;\n    const rootNode = this.getRootNode() as Document | ShadowRoot | null;\n    // Only change the aria-label if <model-viewer> is currently focused:\n    if (rootNode != null && rootNode.activeElement === this &&\n        this[$statusElement].textContent != status) {\n      this[$statusElement].textContent = status;\n    }\n  }\n\n  [$onFocus] = () => {\n    this[$statusElement].textContent = this[$status];\n  };\n\n  [$onBlur] = () => {\n    this[$statusElement].textContent = '';\n  };\n\n  [$onResize](e: {width: number, height: number}) {\n    this[$scene].setSize(e.width, e.height);\n  }\n\n  [$onContextLost] = (event: ContextLostEvent) => {\n    this.dispatchEvent(new CustomEvent(\n        'error',\n        {detail: {type: 'webglcontextlost', sourceError: event.sourceEvent}}));\n  };\n\n  /**\n   * Parses the element for an appropriate source URL and\n   * sets the views to use the new model based.\n   */\n  async[$updateSource]() {\n    const scene = this[$scene];\n    if (this.loaded || !this[$shouldAttemptPreload]() ||\n        this.src === scene.url) {\n      return;\n    }\n\n    if (this.generateSchema) {\n      scene.updateSchema(this.src);\n    }\n    this[$updateStatus]('Loading');\n    // If we are loading a new model, we need to stop the animation of\n    // the current one (if any is playing). Otherwise, we might lose\n    // the reference to the scene root and running actions start to\n    // throw exceptions and/or behave in unexpected ways:\n    scene.stopAnimation();\n\n    const updateSourceProgress = this[$progressTracker].beginActivity();\n    const source = this.src;\n    try {\n      const srcUpdated = scene.setSource(\n          source,\n          (progress: number) =>\n              updateSourceProgress(clamp(progress, 0, 1) * 0.95));\n\n      const envUpdated = (this as any)[$updateEnvironment]();\n\n      await Promise.all([srcUpdated, envUpdated]);\n\n      this[$markLoaded]();\n      this[$onModelLoad]();\n\n      // Wait for shaders to compile and pixels to be drawn.\n      await new Promise<void>(resolve => {\n        requestAnimationFrame(() => {\n          requestAnimationFrame(() => {\n            this.dispatchEvent(\n                new CustomEvent('load', {detail: {url: source}}));\n            resolve();\n          });\n        });\n      });\n    } catch (error) {\n      this.dispatchEvent(new CustomEvent(\n          'error', {detail: {type: 'loadfailure', sourceError: error}}));\n    } finally {\n      updateSourceProgress(1.0);\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}