{"ast":null,"code":"import _defineProperty from \"C:/Misc/Documents/Career/FinTech/BlockChain/FrontEnd/buildspace-dao-starter/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { BigNumber, utils, constants } from 'ethers';\nimport { a8 as BigNumberishSchema, ab as AddressOrEnsSchema, ac as RawDateSchema, dX as FEATURE_PACK_VRF, dw as ContractWrapper, aR as ContractEvents, dx as buildTransactionFunction, aW as Transaction, bb as fetchCurrencyMetadata, cL as resolveAddress, cZ as LINK_TOKEN_ADDRESS, au as Erc20, dY as PACK_CONTRACT_ROLES, cc as assertEnabled, e as AbiSchema, ah as ContractMetadata, dZ as PackContractSchema, b0 as ContractAppURI, ai as ContractRoles, aj as ContractRoyalty, ag as ContractEncoder, aQ as GasCostEstimator, aS as ContractInterceptor, aV as ContractOwner, bI as getRoleHash, ba as normalizePriceValue, dG as isTokenApprovedForTransfer, cd as detectContractFeature, dU as uploadOrExtractURI } from './contract-publisher-1ff1fe07.browser.esm.js';\nimport { h as hasERC20Allowance } from './hasERC20Allowance-1499f181.browser.esm.js';\nimport { S as StandardErc1155 } from './erc-1155-standard-c4641fc4.browser.esm.js';\nimport ERC20Abi from '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport IPackVRFAbi from '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport { A as AmountSchema, N as NFTInputOrUriSchema } from './QueryParams-39bcad7a.browser.esm.js';\nimport { z } from 'zod';\nimport 'tiny-invariant';\nimport 'uuid';\nimport '@thirdweb-dev/storage';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC165.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport 'fast-deep-equal';\nimport 'merkletreejs';\nimport '@thirdweb-dev/contracts-js/dist/abis/IThirdwebContract.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedRevealDeprecated.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ContractPublisher.json';\nimport '@thirdweb-dev/chains';\nimport 'bs58';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryLogic.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Permit.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721AQueryableUpgradeable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/SharedMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/zora_IERC721Drop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILoyaltyCard.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/INFTMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountFactoryCore.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccount.json';\nimport 'ethers/lib/utils';\nimport '@thirdweb-dev/contracts-js/dist/abis/Forwarder.json';\nimport 'cross-fetch';\nimport 'eventemitter3';\nimport 'bn.js';\n\n/**\n * @internal\n */\nconst CommonWrappableSchema = /* @__PURE__ */z.object({\n  contractAddress: AddressOrEnsSchema\n});\n\n/**\n * @internal\n */\nconst ERC20WrappableSchema = /* @__PURE__ */CommonWrappableSchema.extend({\n  quantity: AmountSchema\n});\n\n/**\n * @internal\n */\nconst ERC721WrappableSchema = /* @__PURE__ */CommonWrappableSchema.extend({\n  tokenId: BigNumberishSchema\n});\n\n/**\n * @internal\n */\nconst ERC1155WrappableSchema = /* @__PURE__ */CommonWrappableSchema.extend({\n  tokenId: BigNumberishSchema,\n  quantity: BigNumberishSchema\n});\n\n/**\n * @internal\n */\nconst ERC20RewardSchema = /* @__PURE__ */ERC20WrappableSchema.omit({\n  quantity: true\n}).extend({\n  quantityPerReward: AmountSchema\n});\n\n/**\n * @internal\n */\nconst ERC721RewardSchema = ERC721WrappableSchema;\n\n/**\n * @internal\n */\nconst ERC1155RewardSchema = /* @__PURE__ */ERC1155WrappableSchema.omit({\n  quantity: true\n}).extend({\n  quantityPerReward: BigNumberishSchema\n});\n\n/**\n * @internal\n */\nconst ERC20RewardContentsSchema = /* @__PURE__ */(() => ERC20RewardSchema.extend({\n  totalRewards: BigNumberishSchema.default(\"1\")\n}))();\n\n/**\n * @internal\n */\nconst ERC721RewardContentsSchema = ERC721RewardSchema;\n\n/**\n * @internal\n */\nconst ERC1155RewardContentsSchema = /* @__PURE__ */(() => ERC1155RewardSchema.extend({\n  totalRewards: BigNumberishSchema.default(\"1\")\n}))();\n\n/**\n * @internal\n */\nconst PackRewardsOutputSchema = /* @__PURE__ */(() => z.object({\n  erc20Rewards: z.array(ERC20RewardContentsSchema).default([]),\n  erc721Rewards: z.array(ERC721RewardContentsSchema).default([]),\n  erc1155Rewards: z.array(ERC1155RewardContentsSchema).default([])\n}))();\n\n/**\n * @internal\n */\nconst PackMetadataInputSchema = /* @__PURE__ */(() => PackRewardsOutputSchema.extend({\n  packMetadata: NFTInputOrUriSchema,\n  rewardsPerPack: BigNumberishSchema.default(\"1\"),\n  openStartTime: RawDateSchema.default(new Date())\n}))();\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\nclass PackVRF {\n  constructor(network, address, storage, options, chainId) {\n    _defineProperty(this, \"featureName\", FEATURE_PACK_VRF.name);\n    /**\n     * Open pack\n     *\n     * @example\n     * ```javascript\n     * const tokenId = 0;\n     * const amount = 1;\n     * const receipt = await contract.pack.open(tokenId, amount);\n     * ```\n     *\n     * @remarks Open a pack using Chainlink VRFs random number generation\n     * @remarks This will return a transaction result with the requestId of the open request, NOT the contents of the pack\n     * @remarks To get the contents of the pack, you must call claimRewards once the VRF request has been fulfilled\n     * @remarks You can use the canClaimRewards method to check if the VRF request has been fulfilled\n     * @param tokenId\n     * @param amount\n     * @returns\n     * @twfeature PackVRF\n     */\n    _defineProperty(this, \"open\", /* @__PURE__ */buildTransactionFunction((() => {\n      var _this = this;\n      return async function (tokenId) {\n        let amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n        let gasLimit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 500000;\n        return Transaction.fromContractWrapper({\n          contractWrapper: _this.contractWrapper,\n          method: \"openPack\",\n          args: [tokenId, amount],\n          overrides: {\n            // Higher gas limit for opening packs\n            gasLimit\n          },\n          parse: receipt => {\n            let id = BigNumber.from(0);\n            try {\n              const event = _this.contractWrapper.parseLogs(\"PackOpenRequested\", receipt === null || receipt === void 0 ? void 0 : receipt.logs);\n              id = event[0].args.requestId;\n            } catch (e) {}\n            return {\n              receipt,\n              id\n            };\n          }\n        });\n      };\n    })()));\n    /**\n     * Claim the rewards from an opened pack\n     *\n     * @example\n     * ```javascript\n     * const rewards = await contract.pack.claimRewards();\n     * ```\n     *\n     * @remarks This will return the contents of the pack\n     * @remarks Make sure to check if the VRF request has been fulfilled using canClaimRewards() before calling this method\n     * @returns the random rewards from opening a pack\n     * @twfeature PackVRF\n     */\n    _defineProperty(this, \"claimRewards\", /* @__PURE__ */buildTransactionFunction((() => {\n      var _this2 = this;\n      return async function () {\n        let gasLimit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 500000;\n        return Transaction.fromContractWrapper({\n          contractWrapper: _this2.contractWrapper,\n          method: \"claimRewards\",\n          args: [],\n          overrides: {\n            // Higher gas limit for opening packs\n            gasLimit\n          },\n          parse: async receipt => {\n            const event = _this2.contractWrapper.parseLogs(\"PackOpened\", receipt === null || receipt === void 0 ? void 0 : receipt.logs);\n            if (event.length === 0) {\n              throw new Error(\"PackOpened event not found\");\n            }\n            const rewards = event[0].args.rewardUnitsDistributed;\n            return await _this2.parseRewards(rewards);\n          }\n        });\n      };\n    })()));\n    let contractWrapper = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : new ContractWrapper(network, address, IPackVRFAbi, options, storage);\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.chainId = chainId;\n    this.events = new ContractEvents(this.contractWrapper);\n  }\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n  async parseRewards(rewards) {\n    const erc20Rewards = [];\n    const erc721Rewards = [];\n    const erc1155Rewards = [];\n    for (const reward of rewards) {\n      switch (reward.tokenType) {\n        case 0:\n          {\n            const tokenMetadata = await fetchCurrencyMetadata(this.contractWrapper.getProvider(), reward.assetContract);\n            erc20Rewards.push({\n              contractAddress: reward.assetContract,\n              quantityPerReward: utils.formatUnits(reward.totalAmount, tokenMetadata.decimals).toString()\n            });\n            break;\n          }\n        case 1:\n          {\n            erc721Rewards.push({\n              contractAddress: reward.assetContract,\n              tokenId: reward.tokenId.toString()\n            });\n            break;\n          }\n        case 2:\n          {\n            erc1155Rewards.push({\n              contractAddress: reward.assetContract,\n              tokenId: reward.tokenId.toString(),\n              quantityPerReward: reward.totalAmount.toString()\n            });\n            break;\n          }\n      }\n    }\n    return {\n      erc20Rewards,\n      erc721Rewards,\n      erc1155Rewards\n    };\n  }\n\n  /**\n   * Setup a listener for when a pack is opened\n   *\n   * @example\n   * ```javascript\n   * const unsubscribe = await contract.pack.addPackOpenEventListener((packId, openerAddress, rewards) => {\n   *  console.log(`Pack ${packId} was opened by ${openerAddress} and contained:`, rewards);\n   * });\n   * @param callback the listener to call when a pack is opened\n   * @returns a unsubscribe function to cleanup the listener\n   * @twfeature PackVRF\n   */\n  async addPackOpenEventListener(callback) {\n    return this.events.addEventListener(\"PackOpened\", async event => {\n      callback(event.data.packId.toString(), event.data.opener, await this.parseRewards(event.data.rewardUnitsDistributed));\n    });\n  }\n\n  /**\n   * Check if a specific wallet can claim rewards after opening a pack\n   *\n   * @example\n   * ```javascript\n   * const canClaim = await contract.pack.canClaimRewards(\"{{wallet_address}}\");\n   * ```\n   * @param claimerAddress Optional: the address to check if they can claim rewards, defaults to the connected address\n   * @returns whether the connected address can claim rewards after opening a pack\n   * @twfeature PackVRF\n   */\n  async canClaimRewards(claimerAddress) {\n    const address = await resolveAddress(claimerAddress || (await this.contractWrapper.getSignerAddress()));\n    return await this.contractWrapper.read(\"canClaimRewards\", [address]);\n  }\n\n  /**\n   * Open a pack and claim the rewards\n   * @remarks This function will only start the flow of opening a pack, the rewards will be granted automatically to the connected address after VRF request is fulfilled\n   *\n   * @example\n   * ```javascript\n   * const packId = 0;\n   * const amount = 1;\n   * const { id } = await contract.pack.openAndClaim(packId, amount);\n   * ```\n   *\n   * @param packId The id of the pack to open\n   * @param amount Optional: the amount of packs to open, defaults to 1\n   * @param gasLimit Optional: the gas limit to use for the VRF callback transaction, defaults to 500000\n   * @returns\n   * @twfeature PackVRF\n   */\n  async openAndClaim(packId) {\n    let amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let gasLimit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 500000;\n    const receipt = await this.contractWrapper.sendTransaction(\"openPackAndClaimRewards\", [packId, amount, gasLimit], {\n      // Higher gas limit for opening packs\n      gasLimit: BigNumber.from(500000)\n    });\n    let id = BigNumber.from(0);\n    try {\n      const event = this.contractWrapper.parseLogs(\"PackOpenRequested\", receipt === null || receipt === void 0 ? void 0 : receipt.logs);\n      id = event[0].args.requestId;\n    } catch (e) {}\n    return {\n      receipt,\n      id\n    };\n  }\n\n  /**\n   * Get the LINK balance of the contract\n   *\n   * @example\n   * ```javascript\n   * const balance = await contract.pack.getLinkBalance();\n   * ```\n   *\n   * @returns the balance of LINK in the contract\n   * @twfeature PackVRF\n   */\n  async getLinkBalance() {\n    return this.getLinkContract().balanceOf(this.contractWrapper.address);\n  }\n\n  /**\n   * Transfer LINK to this contract\n   *\n   * @example\n   * ```javascript\n   * const amount = 1;\n   * await contract.pack.transferLink(amount);\n   * ```\n   *\n   * @param amount the amount of LINK to transfer to the contract\n   * @twfeature PackVRF\n   */\n  async transferLink(amount) {\n    await this.getLinkContract().transfer(this.contractWrapper.address, amount);\n  }\n  getLinkContract() {\n    const linkAddress = LINK_TOKEN_ADDRESS[this.chainId];\n    if (!linkAddress) {\n      throw new Error(\"No LINK token address found for chainId \".concat(this.chainId));\n    }\n    const contract = new ContractWrapper(this.contractWrapper.getSignerOrProvider(), linkAddress, ERC20Abi, this.contractWrapper.options, this.storage);\n    return new Erc20(contract, this.storage, this.chainId);\n  }\n}\n\n/**\n * Create lootboxes of NFTs with rarity based open mechanics.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"pack\");\n * ```\n *\n * @public\n */\nclass Pack extends StandardErc1155 {\n  /**\n   * Configure royalties\n   * @remarks Set your own royalties for the entire contract or per pack\n   * @example\n   * ```javascript\n   * // royalties on the whole contract\n   * contract.royalties.setDefaultRoyaltyInfo({\n   *   seller_fee_basis_points: 100, // 1%\n   *   fee_recipient: \"0x...\"\n   * });\n   * // override royalty for a particular pack\n   * contract.royalties.setTokenRoyaltyInfo(packId, {\n   *   seller_fee_basis_points: 500, // 5%\n   *   fee_recipient: \"0x...\"\n   * });\n   * ```\n   */\n\n  /**\n   * @internal\n   */\n  /**\n   * If enabled in the contract, use the Chainlink VRF functionality to open packs\n   */\n  get vrf() {\n    return assertEnabled(this._vrf, FEATURE_PACK_VRF);\n  }\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options.gasless && \"openzeppelin\" in options.gasless ? {\n      ...options,\n      gasless: {\n        ...options.gasless,\n        openzeppelin: {\n          ...options.gasless.openzeppelin,\n          useEOAForwarder: true\n        }\n      }\n    } : options, storage);\n    super(contractWrapper, storage, chainId);\n    /** ******************************\n     * WRITE FUNCTIONS\n     *******************************/\n    /**\n     * Create Pack\n     * @remarks Create a new pack with the given metadata and rewards and mint it to the connected wallet.\n     * @remarks See {@link Pack.createTo}\n     *\n     * @param metadataWithRewards - the metadata and rewards to include in the pack\n     * @example\n     * ```javascript\n     * const pack = {\n     *   // The metadata for the pack NFT itself\n     *   packMetadata: {\n     *     name: \"My Pack\",\n     *     description: \"This is a new pack\",\n     *     image: \"ipfs://...\",\n     *   },\n     *   // ERC20 rewards to be included in the pack\n     *   erc20Rewards: [\n     *     {\n     *       contractAddress: \"0x...\",\n     *       quantityPerReward: 5,\n     *       quantity: 100,\n     *       totalRewards: 20,\n     *     }\n     *   ],\n     *   // ERC721 rewards to be included in the pack\n     *   erc721Rewards: [\n     *     {\n     *       contractAddress: \"0x...\",\n     *       tokenId: 0,\n     *     }\n     *   ],\n     *   // ERC1155 rewards to be included in the pack\n     *   erc1155Rewards: [\n     *     {\n     *       contractAddress: \"0x...\",\n     *       tokenId: 0,\n     *       quantityPerReward: 1,\n     *       totalRewards: 100,\n     *     }\n     *   ],\n     *   openStartTime: new Date(), // the date that packs can start to be opened, defaults to now\n     *   rewardsPerPack: 1, // the number of rewards in each pack, defaults to 1\n     * }\n     *\n     * const tx = await contract.create(pack);\n     * ```\n     */\n    _defineProperty(this, \"create\", /* @__PURE__ */buildTransactionFunction(async metadataWithRewards => {\n      const signerAddress = await this.contractWrapper.getSignerAddress();\n      return this.createTo.prepare(signerAddress, metadataWithRewards);\n    }));\n    /**\n     * Add Pack Contents\n     * @remarks Add contents to an existing pack.\n     * @remarks See {@link Pack.addPackContents}\n     *\n     * @param packId - token Id of the pack to add contents to\n     * @param packContents - the rewards to include in the pack\n     * @example\n     * ```javascript\n     * const packContents = {\n     *   // ERC20 rewards to be included in the pack\n     *   erc20Rewards: [\n     *     {\n     *       contractAddress: \"0x...\",\n     *       quantityPerReward: 5,\n     *       quantity: 100,\n     *       totalRewards: 20,\n     *     }\n     *   ],\n     *   // ERC721 rewards to be included in the pack\n     *   erc721Rewards: [\n     *     {\n     *       contractAddress: \"0x...\",\n     *       tokenId: 0,\n     *     }\n     *   ],\n     *   // ERC1155 rewards to be included in the pack\n     *   erc1155Rewards: [\n     *     {\n     *       contractAddress: \"0x...\",\n     *       tokenId: 0,\n     *       quantityPerReward: 1,\n     *       totalRewards: 100,\n     *     }\n     *   ],\n     * }\n     *\n     * const tx = await contract.addPackContents(packId, packContents);\n     * ```\n     */\n    _defineProperty(this, \"addPackContents\", /* @__PURE__ */buildTransactionFunction(async (packId, packContents) => {\n      const signerAddress = await this.contractWrapper.getSignerAddress();\n      const parsedContents = await PackRewardsOutputSchema.parseAsync(packContents);\n      const {\n        contents,\n        numOfRewardUnits\n      } = await this.toPackContentArgs(parsedContents);\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"addPackContents\",\n        args: [packId, contents, numOfRewardUnits, signerAddress],\n        parse: receipt => {\n          const event = this.contractWrapper.parseLogs(\"PackUpdated\", receipt === null || receipt === void 0 ? void 0 : receipt.logs);\n          if (event.length === 0) {\n            throw new Error(\"PackUpdated event not found\");\n          }\n          const id = event[0].args.packId;\n          return {\n            id: id,\n            receipt,\n            data: () => this.erc1155.get(id)\n          };\n        }\n      });\n    }));\n    /**\n     * Create Pack To Wallet\n     * @remarks Create a new pack with the given metadata and rewards and mint it to the specified address.\n     *\n     * @param to - the address to mint the pack to\n     * @param metadataWithRewards - the metadata and rewards to include in the pack\n     *\n     * @example\n     * ```javascript\n     * const pack = {\n     *   // The metadata for the pack NFT itself\n     *   packMetadata: {\n     *     name: \"My Pack\",\n     *     description: \"This is a new pack\",\n     *     image: \"ipfs://...\",\n     *   },\n     *   // ERC20 rewards to be included in the pack\n     *   erc20Rewards: [\n     *     {\n     *       contractAddress: \"0x...\",\n     *       quantityPerReward: 5,\n     *       quantity: 100,\n     *       totalRewards: 20,\n     *     }\n     *   ],\n     *   // ERC721 rewards to be included in the pack\n     *   erc721Rewards: [\n     *     {\n     *       contractAddress: \"0x...\",\n     *       tokenId: 0,\n     *     }\n     *   ],\n     *   // ERC1155 rewards to be included in the pack\n     *   erc1155Rewards: [\n     *     {\n     *       contractAddress: \"0x...\",\n     *       tokenId: 0,\n     *       quantityPerReward: 1,\n     *       totalRewards: 100,\n     *     }\n     *   ],\n     *   openStartTime: new Date(), // the date that packs can start to be opened, defaults to now\n     *   rewardsPerPack: 1, // the number of rewards in each pack, defaults to 1\n     * }\n     *\n     * const tx = await contract.createTo(\"0x...\", pack);\n     * ```\n     */\n    _defineProperty(this, \"createTo\", /* @__PURE__ */buildTransactionFunction(async (to, metadataWithRewards) => {\n      const uri = await uploadOrExtractURI(metadataWithRewards.packMetadata, this.storage);\n      const parsedMetadata = await PackMetadataInputSchema.parseAsync(metadataWithRewards);\n      const {\n        erc20Rewards,\n        erc721Rewards,\n        erc1155Rewards\n      } = parsedMetadata;\n      const rewardsData = {\n        erc20Rewards,\n        erc721Rewards,\n        erc1155Rewards\n      };\n      const {\n        contents,\n        numOfRewardUnits\n      } = await this.toPackContentArgs(rewardsData);\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"createPack\",\n        args: [contents, numOfRewardUnits, uri, parsedMetadata.openStartTime, parsedMetadata.rewardsPerPack, await resolveAddress(to)],\n        parse: receipt => {\n          const event = this.contractWrapper.parseLogs(\"PackCreated\", receipt === null || receipt === void 0 ? void 0 : receipt.logs);\n          if (event.length === 0) {\n            throw new Error(\"PackCreated event not found\");\n          }\n          const packId = event[0].args.packId;\n          return {\n            id: packId,\n            receipt,\n            data: () => this.erc1155.get(packId)\n          };\n        }\n      });\n    }));\n    /**\n     * Open Pack\n     *\n     * @remarks - Open a pack to reveal the contained rewards. This will burn the specified pack and\n     * the contained assets will be transferred to the opening users wallet.\n     *\n     * @param tokenId - the token ID of the pack you want to open\n     * @param amount - the amount of packs you want to open\n     *\n     * @example\n     * ```javascript\n     * const tokenId = 0\n     * const amount = 1\n     * const tx = await contract.open(tokenId, amount);\n     * ```\n     */\n    _defineProperty(this, \"open\", /* @__PURE__ */buildTransactionFunction((() => {\n      var _this = this;\n      return async function (tokenId) {\n        let amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n        let gasLimit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 500000;\n        if (_this._vrf) {\n          throw new Error(\"This contract is using Chainlink VRF, use `contract.vrf.open()` or `contract.vrf.openAndClaim()` instead\");\n        }\n        return Transaction.fromContractWrapper({\n          contractWrapper: _this.contractWrapper,\n          method: \"openPack\",\n          args: [tokenId, amount],\n          overrides: {\n            // Higher gas limit for opening packs\n            gasLimit\n          },\n          parse: async receipt => {\n            const event = _this.contractWrapper.parseLogs(\"PackOpened\", receipt === null || receipt === void 0 ? void 0 : receipt.logs);\n            if (event.length === 0) {\n              throw new Error(\"PackOpened event not found\");\n            }\n            const rewards = event[0].args.rewardUnitsDistributed;\n            const erc20Rewards = [];\n            const erc721Rewards = [];\n            const erc1155Rewards = [];\n            for (const reward of rewards) {\n              switch (reward.tokenType) {\n                case 0:\n                  {\n                    const tokenMetadata = await fetchCurrencyMetadata(_this.contractWrapper.getProvider(), reward.assetContract);\n                    erc20Rewards.push({\n                      contractAddress: reward.assetContract,\n                      quantityPerReward: utils.formatUnits(reward.totalAmount, tokenMetadata.decimals).toString()\n                    });\n                    break;\n                  }\n                case 1:\n                  {\n                    erc721Rewards.push({\n                      contractAddress: reward.assetContract,\n                      tokenId: reward.tokenId.toString()\n                    });\n                    break;\n                  }\n                case 2:\n                  {\n                    erc1155Rewards.push({\n                      contractAddress: reward.assetContract,\n                      tokenId: reward.tokenId.toString(),\n                      quantityPerReward: reward.totalAmount.toString()\n                    });\n                    break;\n                  }\n              }\n            }\n            return {\n              erc20Rewards,\n              erc721Rewards,\n              erc1155Rewards\n            };\n          }\n        });\n      };\n    })()));\n    this.abi = AbiSchema.parse(abi || []);\n    this.metadata = new ContractMetadata(this.contractWrapper, PackContractSchema, this.storage);\n    this.app = new ContractAppURI(this.contractWrapper, this.metadata, this.storage);\n    this.roles = new ContractRoles(this.contractWrapper, Pack.contractRoles);\n    this.royalties = new ContractRoyalty(this.contractWrapper, this.metadata);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.owner = new ContractOwner(this.contractWrapper);\n    this._vrf = this.detectVrf();\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    var _this$_vrf;\n    this.contractWrapper.updateSignerOrProvider(network);\n    (_this$_vrf = this._vrf) === null || _this$_vrf === void 0 || _this$_vrf.onNetworkUpdated(network);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get a single Pack\n   *\n   * @remarks Get all the data associated with every pack in this contract.\n   *\n   * By default, returns the first 100 packs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const pack = await contract.get(0);\n   * console.log(packs;\n   * ```\n   */\n  async get(tokenId) {\n    return this.erc1155.get(tokenId);\n  }\n\n  /**\n   * Get All Packs\n   *\n   * @remarks Get all the data associated with every pack in this contract.\n   *\n   * By default, returns the first 100 packs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const packs = await contract.getAll();\n   * console.log(packs;\n   * ```\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The pack metadata for all packs queried.\n   */\n  async getAll(queryParams) {\n    return this.erc1155.getAll(queryParams);\n  }\n\n  /**\n   * Get Owned Packs\n   *\n   * @remarks Get all the data associated with the packs owned by a specific wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to get the packs of\n   * const address = \"{{wallet_address}}\";\n   * const packss = await contract.getOwned(address);\n   * ```\n   *\n   * @returns The pack metadata for all the owned packs in the contract.\n   */\n  async getOwned(walletAddress) {\n    return this.erc1155.getOwned(walletAddress);\n  }\n\n  /**\n   * Get the number of packs created\n   * @returns the total number of packs minted in this contract\n   * @public\n   */\n  async getTotalCount() {\n    return this.erc1155.totalCount();\n  }\n\n  /**\n   * Get whether users can transfer packs from this contract\n   */\n  async isTransferRestricted() {\n    const anyoneCanTransfer = await this.contractWrapper.read(\"hasRole\", [getRoleHash(\"transfer\"), constants.AddressZero]);\n    return !anyoneCanTransfer;\n  }\n\n  /**\n   * Get Pack Contents\n   * @remarks Get the rewards contained inside a pack.\n   *\n   * @param packId - The id of the pack to get the contents of.\n   * @returns - The contents of the pack.\n   *\n   * @example\n   * ```javascript\n   * const packId = 0;\n   * const contents = await contract.getPackContents(packId);\n   * console.log(contents.erc20Rewards);\n   * console.log(contents.erc721Rewards);\n   * console.log(contents.erc1155Rewards);\n   * ```\n   */\n  async getPackContents(packId) {\n    const {\n      contents,\n      perUnitAmounts\n    } = await this.contractWrapper.read(\"getPackContents\", [packId]);\n    const erc20Rewards = [];\n    const erc721Rewards = [];\n    const erc1155Rewards = [];\n    for (let i = 0; i < contents.length; i++) {\n      const reward = contents[i];\n      const amount = perUnitAmounts[i];\n      switch (reward.tokenType) {\n        case 0:\n          {\n            const tokenMetadata = await fetchCurrencyMetadata(this.contractWrapper.getProvider(), reward.assetContract);\n            const quantityPerReward = utils.formatUnits(amount, tokenMetadata.decimals);\n            const totalRewards = utils.formatUnits(BigNumber.from(reward.totalAmount).div(amount), tokenMetadata.decimals);\n            erc20Rewards.push({\n              contractAddress: reward.assetContract,\n              quantityPerReward,\n              totalRewards\n            });\n            break;\n          }\n        case 1:\n          {\n            erc721Rewards.push({\n              contractAddress: reward.assetContract,\n              tokenId: reward.tokenId.toString()\n            });\n            break;\n          }\n        case 2:\n          {\n            erc1155Rewards.push({\n              contractAddress: reward.assetContract,\n              tokenId: reward.tokenId.toString(),\n              quantityPerReward: amount.toString(),\n              totalRewards: BigNumber.from(reward.totalAmount).div(amount).toString()\n            });\n            break;\n          }\n      }\n    }\n    return {\n      erc20Rewards,\n      erc721Rewards,\n      erc1155Rewards\n    };\n  }\n  /** *****************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  async toPackContentArgs(metadataWithRewards) {\n    const contents = [];\n    const numOfRewardUnits = [];\n    const {\n      erc20Rewards,\n      erc721Rewards,\n      erc1155Rewards\n    } = metadataWithRewards;\n    const provider = this.contractWrapper.getProvider();\n    const owner = await this.contractWrapper.getSignerAddress();\n    for (const erc20 of erc20Rewards) {\n      const normalizedQuantity = await normalizePriceValue(provider, erc20.quantityPerReward, erc20.contractAddress);\n      // Multiply the quantity of one reward by the number of rewards\n      const totalQuantity = normalizedQuantity.mul(erc20.totalRewards);\n      const hasAllowance = await hasERC20Allowance(this.contractWrapper, erc20.contractAddress, totalQuantity);\n      if (!hasAllowance) {\n        throw new Error(\"ERC20 token with contract address \\\"\".concat(erc20.contractAddress, \"\\\" does not have enough allowance to transfer.\\n\\nYou can set allowance to the multiwrap contract to transfer these tokens by running:\\n\\nawait sdk.getToken(\\\"\").concat(erc20.contractAddress, \"\\\").setAllowance(\\\"\").concat(this.getAddress(), \"\\\", \").concat(totalQuantity, \");\\n\\n\"));\n      }\n      numOfRewardUnits.push(erc20.totalRewards);\n      contents.push({\n        assetContract: erc20.contractAddress,\n        tokenType: 0,\n        totalAmount: totalQuantity,\n        tokenId: 0\n      });\n    }\n    for (const erc721 of erc721Rewards) {\n      const isApproved = await isTokenApprovedForTransfer(this.contractWrapper.getProvider(), this.getAddress(), erc721.contractAddress, erc721.tokenId, owner);\n      if (!isApproved) {\n        throw new Error(\"ERC721 token \\\"\".concat(erc721.tokenId, \"\\\" with contract address \\\"\").concat(erc721.contractAddress, \"\\\" is not approved for transfer.\\n\\nYou can give approval the multiwrap contract to transfer this token by running:\\n\\nawait sdk.getNFTCollection(\\\"\").concat(erc721.contractAddress, \"\\\").setApprovalForToken(\\\"\").concat(this.getAddress(), \"\\\", \").concat(erc721.tokenId, \");\\n\\n\"));\n      }\n      numOfRewardUnits.push(\"1\");\n      contents.push({\n        assetContract: erc721.contractAddress,\n        tokenType: 1,\n        totalAmount: 1,\n        tokenId: erc721.tokenId\n      });\n    }\n    for (const erc1155 of erc1155Rewards) {\n      const isApproved = await isTokenApprovedForTransfer(this.contractWrapper.getProvider(), this.getAddress(), erc1155.contractAddress, erc1155.tokenId, owner);\n      if (!isApproved) {\n        throw new Error(\"ERC1155 token \\\"\".concat(erc1155.tokenId, \"\\\" with contract address \\\"\").concat(erc1155.contractAddress, \"\\\" is not approved for transfer.\\n\\nYou can give approval the multiwrap contract to transfer this token by running:\\n\\nawait sdk.getEdition(\\\"\").concat(erc1155.contractAddress, \"\\\").setApprovalForAll(\\\"\").concat(this.getAddress(), \"\\\", true);\\n\\n\"));\n      }\n      numOfRewardUnits.push(erc1155.totalRewards);\n      contents.push({\n        assetContract: erc1155.contractAddress,\n        tokenType: 2,\n        totalAmount: BigNumber.from(erc1155.quantityPerReward).mul(BigNumber.from(erc1155.totalRewards)),\n        tokenId: erc1155.tokenId\n      });\n    }\n    return {\n      contents,\n      numOfRewardUnits\n    };\n  }\n\n  /**\n   * @internal\n   */\n  async prepare(method, args, overrides) {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method,\n      args,\n      overrides\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName, args, overrides) {\n    return this.contractWrapper.call(functionName, args, overrides);\n  }\n  detectVrf() {\n    if (detectContractFeature(this.contractWrapper, \"PackVRF\")) {\n      return new PackVRF(this.contractWrapper.getSignerOrProvider(), this.contractWrapper.address, this.storage, this.contractWrapper.options, this.chainId);\n    }\n    return undefined;\n  }\n}\n_defineProperty(Pack, \"contractRoles\", PACK_CONTRACT_ROLES);\nexport { Pack };","map":{"version":3,"names":["BigNumber","utils","constants","a8","BigNumberishSchema","ab","AddressOrEnsSchema","ac","RawDateSchema","dX","FEATURE_PACK_VRF","dw","ContractWrapper","aR","ContractEvents","dx","buildTransactionFunction","aW","Transaction","bb","fetchCurrencyMetadata","cL","resolveAddress","cZ","LINK_TOKEN_ADDRESS","au","Erc20","dY","PACK_CONTRACT_ROLES","cc","assertEnabled","e","AbiSchema","ah","ContractMetadata","dZ","PackContractSchema","b0","ContractAppURI","ai","ContractRoles","aj","ContractRoyalty","ag","ContractEncoder","aQ","GasCostEstimator","aS","ContractInterceptor","aV","ContractOwner","bI","getRoleHash","ba","normalizePriceValue","dG","isTokenApprovedForTransfer","cd","detectContractFeature","dU","uploadOrExtractURI","h","hasERC20Allowance","S","StandardErc1155","ERC20Abi","IPackVRFAbi","A","AmountSchema","N","NFTInputOrUriSchema","z","CommonWrappableSchema","object","contractAddress","ERC20WrappableSchema","extend","quantity","ERC721WrappableSchema","tokenId","ERC1155WrappableSchema","ERC20RewardSchema","omit","quantityPerReward","ERC721RewardSchema","ERC1155RewardSchema","ERC20RewardContentsSchema","totalRewards","default","ERC721RewardContentsSchema","ERC1155RewardContentsSchema","PackRewardsOutputSchema","erc20Rewards","array","erc721Rewards","erc1155Rewards","PackMetadataInputSchema","packMetadata","rewardsPerPack","openStartTime","Date","PackVRF","constructor","network","address","storage","options","chainId","_defineProperty","name","_this","amount","arguments","length","undefined","gasLimit","fromContractWrapper","contractWrapper","method","args","overrides","parse","receipt","id","from","event","parseLogs","logs","requestId","_this2","Error","rewards","rewardUnitsDistributed","parseRewards","events","onNetworkUpdated","updateSignerOrProvider","getAddress","reward","tokenType","tokenMetadata","getProvider","assetContract","push","formatUnits","totalAmount","decimals","toString","addPackOpenEventListener","callback","addEventListener","data","packId","opener","canClaimRewards","claimerAddress","getSignerAddress","read","openAndClaim","sendTransaction","getLinkBalance","getLinkContract","balanceOf","transferLink","transfer","linkAddress","concat","contract","getSignerOrProvider","Pack","vrf","_vrf","abi","gasless","openzeppelin","useEOAForwarder","metadataWithRewards","signerAddress","createTo","prepare","packContents","parsedContents","parseAsync","contents","numOfRewardUnits","toPackContentArgs","erc1155","get","to","uri","parsedMetadata","rewardsData","metadata","app","roles","contractRoles","royalties","encoder","estimator","interceptor","owner","detectVrf","_this$_vrf","getAll","queryParams","getOwned","walletAddress","getTotalCount","totalCount","isTransferRestricted","anyoneCanTransfer","AddressZero","getPackContents","perUnitAmounts","i","div","provider","erc20","normalizedQuantity","totalQuantity","mul","hasAllowance","erc721","isApproved","call","functionName"],"sources":["C:/Misc/Documents/Career/FinTech/BlockChain/FrontEnd/buildspace-dao-starter/node_modules/@thirdweb-dev/sdk/dist/pack-bd61f578.browser.esm.js"],"sourcesContent":["import { BigNumber, utils, constants } from 'ethers';\nimport { a8 as BigNumberishSchema, ab as AddressOrEnsSchema, ac as RawDateSchema, dX as FEATURE_PACK_VRF, dw as ContractWrapper, aR as ContractEvents, dx as buildTransactionFunction, aW as Transaction, bb as fetchCurrencyMetadata, cL as resolveAddress, cZ as LINK_TOKEN_ADDRESS, au as Erc20, dY as PACK_CONTRACT_ROLES, cc as assertEnabled, e as AbiSchema, ah as ContractMetadata, dZ as PackContractSchema, b0 as ContractAppURI, ai as ContractRoles, aj as ContractRoyalty, ag as ContractEncoder, aQ as GasCostEstimator, aS as ContractInterceptor, aV as ContractOwner, bI as getRoleHash, ba as normalizePriceValue, dG as isTokenApprovedForTransfer, cd as detectContractFeature, dU as uploadOrExtractURI } from './contract-publisher-1ff1fe07.browser.esm.js';\nimport { h as hasERC20Allowance } from './hasERC20Allowance-1499f181.browser.esm.js';\nimport { S as StandardErc1155 } from './erc-1155-standard-c4641fc4.browser.esm.js';\nimport ERC20Abi from '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport IPackVRFAbi from '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport { A as AmountSchema, N as NFTInputOrUriSchema } from './QueryParams-39bcad7a.browser.esm.js';\nimport { z } from 'zod';\nimport 'tiny-invariant';\nimport 'uuid';\nimport '@thirdweb-dev/storage';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC165.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport 'fast-deep-equal';\nimport 'merkletreejs';\nimport '@thirdweb-dev/contracts-js/dist/abis/IThirdwebContract.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedRevealDeprecated.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ContractPublisher.json';\nimport '@thirdweb-dev/chains';\nimport 'bs58';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryLogic.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Permit.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721AQueryableUpgradeable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/SharedMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/zora_IERC721Drop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILoyaltyCard.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/INFTMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountFactoryCore.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccount.json';\nimport 'ethers/lib/utils';\nimport '@thirdweb-dev/contracts-js/dist/abis/Forwarder.json';\nimport 'cross-fetch';\nimport 'eventemitter3';\nimport 'bn.js';\n\n/**\n * @internal\n */\nconst CommonWrappableSchema = /* @__PURE__ */z.object({\n  contractAddress: AddressOrEnsSchema\n});\n\n/**\n * @internal\n */\nconst ERC20WrappableSchema = /* @__PURE__ */CommonWrappableSchema.extend({\n  quantity: AmountSchema\n});\n\n/**\n * @internal\n */\nconst ERC721WrappableSchema = /* @__PURE__ */CommonWrappableSchema.extend({\n  tokenId: BigNumberishSchema\n});\n\n/**\n * @internal\n */\nconst ERC1155WrappableSchema = /* @__PURE__ */CommonWrappableSchema.extend({\n  tokenId: BigNumberishSchema,\n  quantity: BigNumberishSchema\n});\n\n/**\n * @internal\n */\nconst ERC20RewardSchema = /* @__PURE__ */ERC20WrappableSchema.omit({\n  quantity: true\n}).extend({\n  quantityPerReward: AmountSchema\n});\n\n/**\n * @internal\n */\nconst ERC721RewardSchema = ERC721WrappableSchema;\n\n/**\n * @internal\n */\nconst ERC1155RewardSchema = /* @__PURE__ */ERC1155WrappableSchema.omit({\n  quantity: true\n}).extend({\n  quantityPerReward: BigNumberishSchema\n});\n\n/**\n * @internal\n */\nconst ERC20RewardContentsSchema = /* @__PURE__ */(() => ERC20RewardSchema.extend({\n  totalRewards: BigNumberishSchema.default(\"1\")\n}))();\n\n/**\n * @internal\n */\nconst ERC721RewardContentsSchema = ERC721RewardSchema;\n\n/**\n * @internal\n */\nconst ERC1155RewardContentsSchema = /* @__PURE__ */(() => ERC1155RewardSchema.extend({\n  totalRewards: BigNumberishSchema.default(\"1\")\n}))();\n\n/**\n * @internal\n */\nconst PackRewardsOutputSchema = /* @__PURE__ */(() => z.object({\n  erc20Rewards: z.array(ERC20RewardContentsSchema).default([]),\n  erc721Rewards: z.array(ERC721RewardContentsSchema).default([]),\n  erc1155Rewards: z.array(ERC1155RewardContentsSchema).default([])\n}))();\n\n/**\n * @internal\n */\nconst PackMetadataInputSchema = /* @__PURE__ */(() => PackRewardsOutputSchema.extend({\n  packMetadata: NFTInputOrUriSchema,\n  rewardsPerPack: BigNumberishSchema.default(\"1\"),\n  openStartTime: RawDateSchema.default(new Date())\n}))();\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\nclass PackVRF {\n  featureName = FEATURE_PACK_VRF.name;\n  constructor(network, address, storage, options, chainId) {\n    let contractWrapper = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : new ContractWrapper(network, address, IPackVRFAbi, options, storage);\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.chainId = chainId;\n    this.events = new ContractEvents(this.contractWrapper);\n  }\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /**\n   * Open pack\n   *\n   * @example\n   * ```javascript\n   * const tokenId = 0;\n   * const amount = 1;\n   * const receipt = await contract.pack.open(tokenId, amount);\n   * ```\n   *\n   * @remarks Open a pack using Chainlink VRFs random number generation\n   * @remarks This will return a transaction result with the requestId of the open request, NOT the contents of the pack\n   * @remarks To get the contents of the pack, you must call claimRewards once the VRF request has been fulfilled\n   * @remarks You can use the canClaimRewards method to check if the VRF request has been fulfilled\n   * @param tokenId\n   * @param amount\n   * @returns\n   * @twfeature PackVRF\n   */\n  open = /* @__PURE__ */buildTransactionFunction((() => {\n    var _this = this;\n    return async function (tokenId) {\n      let amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      let gasLimit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 500000;\n      return Transaction.fromContractWrapper({\n        contractWrapper: _this.contractWrapper,\n        method: \"openPack\",\n        args: [tokenId, amount],\n        overrides: {\n          // Higher gas limit for opening packs\n          gasLimit\n        },\n        parse: receipt => {\n          let id = BigNumber.from(0);\n          try {\n            const event = _this.contractWrapper.parseLogs(\"PackOpenRequested\", receipt?.logs);\n            id = event[0].args.requestId;\n          } catch (e) {}\n          return {\n            receipt,\n            id\n          };\n        }\n      });\n    };\n  })());\n\n  /**\n   * Claim the rewards from an opened pack\n   *\n   * @example\n   * ```javascript\n   * const rewards = await contract.pack.claimRewards();\n   * ```\n   *\n   * @remarks This will return the contents of the pack\n   * @remarks Make sure to check if the VRF request has been fulfilled using canClaimRewards() before calling this method\n   * @returns the random rewards from opening a pack\n   * @twfeature PackVRF\n   */\n  claimRewards = /* @__PURE__ */buildTransactionFunction((() => {\n    var _this2 = this;\n    return async function () {\n      let gasLimit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 500000;\n      return Transaction.fromContractWrapper({\n        contractWrapper: _this2.contractWrapper,\n        method: \"claimRewards\",\n        args: [],\n        overrides: {\n          // Higher gas limit for opening packs\n          gasLimit\n        },\n        parse: async receipt => {\n          const event = _this2.contractWrapper.parseLogs(\"PackOpened\", receipt?.logs);\n          if (event.length === 0) {\n            throw new Error(\"PackOpened event not found\");\n          }\n          const rewards = event[0].args.rewardUnitsDistributed;\n          return await _this2.parseRewards(rewards);\n        }\n      });\n    };\n  })());\n  async parseRewards(rewards) {\n    const erc20Rewards = [];\n    const erc721Rewards = [];\n    const erc1155Rewards = [];\n    for (const reward of rewards) {\n      switch (reward.tokenType) {\n        case 0:\n          {\n            const tokenMetadata = await fetchCurrencyMetadata(this.contractWrapper.getProvider(), reward.assetContract);\n            erc20Rewards.push({\n              contractAddress: reward.assetContract,\n              quantityPerReward: utils.formatUnits(reward.totalAmount, tokenMetadata.decimals).toString()\n            });\n            break;\n          }\n        case 1:\n          {\n            erc721Rewards.push({\n              contractAddress: reward.assetContract,\n              tokenId: reward.tokenId.toString()\n            });\n            break;\n          }\n        case 2:\n          {\n            erc1155Rewards.push({\n              contractAddress: reward.assetContract,\n              tokenId: reward.tokenId.toString(),\n              quantityPerReward: reward.totalAmount.toString()\n            });\n            break;\n          }\n      }\n    }\n    return {\n      erc20Rewards,\n      erc721Rewards,\n      erc1155Rewards\n    };\n  }\n\n  /**\n   * Setup a listener for when a pack is opened\n   *\n   * @example\n   * ```javascript\n   * const unsubscribe = await contract.pack.addPackOpenEventListener((packId, openerAddress, rewards) => {\n   *  console.log(`Pack ${packId} was opened by ${openerAddress} and contained:`, rewards);\n   * });\n   * @param callback the listener to call when a pack is opened\n   * @returns a unsubscribe function to cleanup the listener\n   * @twfeature PackVRF\n   */\n  async addPackOpenEventListener(callback) {\n    return this.events.addEventListener(\"PackOpened\", async event => {\n      callback(event.data.packId.toString(), event.data.opener, await this.parseRewards(event.data.rewardUnitsDistributed));\n    });\n  }\n\n  /**\n   * Check if a specific wallet can claim rewards after opening a pack\n   *\n   * @example\n   * ```javascript\n   * const canClaim = await contract.pack.canClaimRewards(\"{{wallet_address}}\");\n   * ```\n   * @param claimerAddress Optional: the address to check if they can claim rewards, defaults to the connected address\n   * @returns whether the connected address can claim rewards after opening a pack\n   * @twfeature PackVRF\n   */\n  async canClaimRewards(claimerAddress) {\n    const address = await resolveAddress(claimerAddress || (await this.contractWrapper.getSignerAddress()));\n    return await this.contractWrapper.read(\"canClaimRewards\", [address]);\n  }\n\n  /**\n   * Open a pack and claim the rewards\n   * @remarks This function will only start the flow of opening a pack, the rewards will be granted automatically to the connected address after VRF request is fulfilled\n   *\n   * @example\n   * ```javascript\n   * const packId = 0;\n   * const amount = 1;\n   * const { id } = await contract.pack.openAndClaim(packId, amount);\n   * ```\n   *\n   * @param packId The id of the pack to open\n   * @param amount Optional: the amount of packs to open, defaults to 1\n   * @param gasLimit Optional: the gas limit to use for the VRF callback transaction, defaults to 500000\n   * @returns\n   * @twfeature PackVRF\n   */\n  async openAndClaim(packId) {\n    let amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let gasLimit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 500000;\n    const receipt = await this.contractWrapper.sendTransaction(\"openPackAndClaimRewards\", [packId, amount, gasLimit], {\n      // Higher gas limit for opening packs\n      gasLimit: BigNumber.from(500000)\n    });\n    let id = BigNumber.from(0);\n    try {\n      const event = this.contractWrapper.parseLogs(\"PackOpenRequested\", receipt?.logs);\n      id = event[0].args.requestId;\n    } catch (e) {}\n    return {\n      receipt,\n      id\n    };\n  }\n\n  /**\n   * Get the LINK balance of the contract\n   *\n   * @example\n   * ```javascript\n   * const balance = await contract.pack.getLinkBalance();\n   * ```\n   *\n   * @returns the balance of LINK in the contract\n   * @twfeature PackVRF\n   */\n  async getLinkBalance() {\n    return this.getLinkContract().balanceOf(this.contractWrapper.address);\n  }\n\n  /**\n   * Transfer LINK to this contract\n   *\n   * @example\n   * ```javascript\n   * const amount = 1;\n   * await contract.pack.transferLink(amount);\n   * ```\n   *\n   * @param amount the amount of LINK to transfer to the contract\n   * @twfeature PackVRF\n   */\n  async transferLink(amount) {\n    await this.getLinkContract().transfer(this.contractWrapper.address, amount);\n  }\n  getLinkContract() {\n    const linkAddress = LINK_TOKEN_ADDRESS[this.chainId];\n    if (!linkAddress) {\n      throw new Error(`No LINK token address found for chainId ${this.chainId}`);\n    }\n    const contract = new ContractWrapper(this.contractWrapper.getSignerOrProvider(), linkAddress, ERC20Abi, this.contractWrapper.options, this.storage);\n    return new Erc20(contract, this.storage, this.chainId);\n  }\n}\n\n/**\n * Create lootboxes of NFTs with rarity based open mechanics.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"pack\");\n * ```\n *\n * @public\n */\nclass Pack extends StandardErc1155 {\n  static contractRoles = PACK_CONTRACT_ROLES;\n\n  /**\n   * Configure royalties\n   * @remarks Set your own royalties for the entire contract or per pack\n   * @example\n   * ```javascript\n   * // royalties on the whole contract\n   * contract.royalties.setDefaultRoyaltyInfo({\n   *   seller_fee_basis_points: 100, // 1%\n   *   fee_recipient: \"0x...\"\n   * });\n   * // override royalty for a particular pack\n   * contract.royalties.setTokenRoyaltyInfo(packId, {\n   *   seller_fee_basis_points: 500, // 5%\n   *   fee_recipient: \"0x...\"\n   * });\n   * ```\n   */\n\n  /**\n   * @internal\n   */\n\n  /**\n   * If enabled in the contract, use the Chainlink VRF functionality to open packs\n   */\n  get vrf() {\n    return assertEnabled(this._vrf, FEATURE_PACK_VRF);\n  }\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options.gasless && \"openzeppelin\" in options.gasless ? {\n      ...options,\n      gasless: {\n        ...options.gasless,\n        openzeppelin: {\n          ...options.gasless.openzeppelin,\n          useEOAForwarder: true\n        }\n      }\n    } : options, storage);\n    super(contractWrapper, storage, chainId);\n    this.abi = AbiSchema.parse(abi || []);\n    this.metadata = new ContractMetadata(this.contractWrapper, PackContractSchema, this.storage);\n    this.app = new ContractAppURI(this.contractWrapper, this.metadata, this.storage);\n    this.roles = new ContractRoles(this.contractWrapper, Pack.contractRoles);\n    this.royalties = new ContractRoyalty(this.contractWrapper, this.metadata);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.owner = new ContractOwner(this.contractWrapper);\n    this._vrf = this.detectVrf();\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n    this._vrf?.onNetworkUpdated(network);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get a single Pack\n   *\n   * @remarks Get all the data associated with every pack in this contract.\n   *\n   * By default, returns the first 100 packs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const pack = await contract.get(0);\n   * console.log(packs;\n   * ```\n   */\n  async get(tokenId) {\n    return this.erc1155.get(tokenId);\n  }\n\n  /**\n   * Get All Packs\n   *\n   * @remarks Get all the data associated with every pack in this contract.\n   *\n   * By default, returns the first 100 packs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const packs = await contract.getAll();\n   * console.log(packs;\n   * ```\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The pack metadata for all packs queried.\n   */\n  async getAll(queryParams) {\n    return this.erc1155.getAll(queryParams);\n  }\n\n  /**\n   * Get Owned Packs\n   *\n   * @remarks Get all the data associated with the packs owned by a specific wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to get the packs of\n   * const address = \"{{wallet_address}}\";\n   * const packss = await contract.getOwned(address);\n   * ```\n   *\n   * @returns The pack metadata for all the owned packs in the contract.\n   */\n  async getOwned(walletAddress) {\n    return this.erc1155.getOwned(walletAddress);\n  }\n\n  /**\n   * Get the number of packs created\n   * @returns the total number of packs minted in this contract\n   * @public\n   */\n  async getTotalCount() {\n    return this.erc1155.totalCount();\n  }\n\n  /**\n   * Get whether users can transfer packs from this contract\n   */\n  async isTransferRestricted() {\n    const anyoneCanTransfer = await this.contractWrapper.read(\"hasRole\", [getRoleHash(\"transfer\"), constants.AddressZero]);\n    return !anyoneCanTransfer;\n  }\n\n  /**\n   * Get Pack Contents\n   * @remarks Get the rewards contained inside a pack.\n   *\n   * @param packId - The id of the pack to get the contents of.\n   * @returns - The contents of the pack.\n   *\n   * @example\n   * ```javascript\n   * const packId = 0;\n   * const contents = await contract.getPackContents(packId);\n   * console.log(contents.erc20Rewards);\n   * console.log(contents.erc721Rewards);\n   * console.log(contents.erc1155Rewards);\n   * ```\n   */\n  async getPackContents(packId) {\n    const {\n      contents,\n      perUnitAmounts\n    } = await this.contractWrapper.read(\"getPackContents\", [packId]);\n    const erc20Rewards = [];\n    const erc721Rewards = [];\n    const erc1155Rewards = [];\n    for (let i = 0; i < contents.length; i++) {\n      const reward = contents[i];\n      const amount = perUnitAmounts[i];\n      switch (reward.tokenType) {\n        case 0:\n          {\n            const tokenMetadata = await fetchCurrencyMetadata(this.contractWrapper.getProvider(), reward.assetContract);\n            const quantityPerReward = utils.formatUnits(amount, tokenMetadata.decimals);\n            const totalRewards = utils.formatUnits(BigNumber.from(reward.totalAmount).div(amount), tokenMetadata.decimals);\n            erc20Rewards.push({\n              contractAddress: reward.assetContract,\n              quantityPerReward,\n              totalRewards\n            });\n            break;\n          }\n        case 1:\n          {\n            erc721Rewards.push({\n              contractAddress: reward.assetContract,\n              tokenId: reward.tokenId.toString()\n            });\n            break;\n          }\n        case 2:\n          {\n            erc1155Rewards.push({\n              contractAddress: reward.assetContract,\n              tokenId: reward.tokenId.toString(),\n              quantityPerReward: amount.toString(),\n              totalRewards: BigNumber.from(reward.totalAmount).div(amount).toString()\n            });\n            break;\n          }\n      }\n    }\n    return {\n      erc20Rewards,\n      erc721Rewards,\n      erc1155Rewards\n    };\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Create Pack\n   * @remarks Create a new pack with the given metadata and rewards and mint it to the connected wallet.\n   * @remarks See {@link Pack.createTo}\n   *\n   * @param metadataWithRewards - the metadata and rewards to include in the pack\n   * @example\n   * ```javascript\n   * const pack = {\n   *   // The metadata for the pack NFT itself\n   *   packMetadata: {\n   *     name: \"My Pack\",\n   *     description: \"This is a new pack\",\n   *     image: \"ipfs://...\",\n   *   },\n   *   // ERC20 rewards to be included in the pack\n   *   erc20Rewards: [\n   *     {\n   *       contractAddress: \"0x...\",\n   *       quantityPerReward: 5,\n   *       quantity: 100,\n   *       totalRewards: 20,\n   *     }\n   *   ],\n   *   // ERC721 rewards to be included in the pack\n   *   erc721Rewards: [\n   *     {\n   *       contractAddress: \"0x...\",\n   *       tokenId: 0,\n   *     }\n   *   ],\n   *   // ERC1155 rewards to be included in the pack\n   *   erc1155Rewards: [\n   *     {\n   *       contractAddress: \"0x...\",\n   *       tokenId: 0,\n   *       quantityPerReward: 1,\n   *       totalRewards: 100,\n   *     }\n   *   ],\n   *   openStartTime: new Date(), // the date that packs can start to be opened, defaults to now\n   *   rewardsPerPack: 1, // the number of rewards in each pack, defaults to 1\n   * }\n   *\n   * const tx = await contract.create(pack);\n   * ```\n   */\n  create = /* @__PURE__ */buildTransactionFunction(async metadataWithRewards => {\n    const signerAddress = await this.contractWrapper.getSignerAddress();\n    return this.createTo.prepare(signerAddress, metadataWithRewards);\n  });\n\n  /**\n   * Add Pack Contents\n   * @remarks Add contents to an existing pack.\n   * @remarks See {@link Pack.addPackContents}\n   *\n   * @param packId - token Id of the pack to add contents to\n   * @param packContents - the rewards to include in the pack\n   * @example\n   * ```javascript\n   * const packContents = {\n   *   // ERC20 rewards to be included in the pack\n   *   erc20Rewards: [\n   *     {\n   *       contractAddress: \"0x...\",\n   *       quantityPerReward: 5,\n   *       quantity: 100,\n   *       totalRewards: 20,\n   *     }\n   *   ],\n   *   // ERC721 rewards to be included in the pack\n   *   erc721Rewards: [\n   *     {\n   *       contractAddress: \"0x...\",\n   *       tokenId: 0,\n   *     }\n   *   ],\n   *   // ERC1155 rewards to be included in the pack\n   *   erc1155Rewards: [\n   *     {\n   *       contractAddress: \"0x...\",\n   *       tokenId: 0,\n   *       quantityPerReward: 1,\n   *       totalRewards: 100,\n   *     }\n   *   ],\n   * }\n   *\n   * const tx = await contract.addPackContents(packId, packContents);\n   * ```\n   */\n  addPackContents = /* @__PURE__ */buildTransactionFunction(async (packId, packContents) => {\n    const signerAddress = await this.contractWrapper.getSignerAddress();\n    const parsedContents = await PackRewardsOutputSchema.parseAsync(packContents);\n    const {\n      contents,\n      numOfRewardUnits\n    } = await this.toPackContentArgs(parsedContents);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"addPackContents\",\n      args: [packId, contents, numOfRewardUnits, signerAddress],\n      parse: receipt => {\n        const event = this.contractWrapper.parseLogs(\"PackUpdated\", receipt?.logs);\n        if (event.length === 0) {\n          throw new Error(\"PackUpdated event not found\");\n        }\n        const id = event[0].args.packId;\n        return {\n          id: id,\n          receipt,\n          data: () => this.erc1155.get(id)\n        };\n      }\n    });\n  });\n\n  /**\n   * Create Pack To Wallet\n   * @remarks Create a new pack with the given metadata and rewards and mint it to the specified address.\n   *\n   * @param to - the address to mint the pack to\n   * @param metadataWithRewards - the metadata and rewards to include in the pack\n   *\n   * @example\n   * ```javascript\n   * const pack = {\n   *   // The metadata for the pack NFT itself\n   *   packMetadata: {\n   *     name: \"My Pack\",\n   *     description: \"This is a new pack\",\n   *     image: \"ipfs://...\",\n   *   },\n   *   // ERC20 rewards to be included in the pack\n   *   erc20Rewards: [\n   *     {\n   *       contractAddress: \"0x...\",\n   *       quantityPerReward: 5,\n   *       quantity: 100,\n   *       totalRewards: 20,\n   *     }\n   *   ],\n   *   // ERC721 rewards to be included in the pack\n   *   erc721Rewards: [\n   *     {\n   *       contractAddress: \"0x...\",\n   *       tokenId: 0,\n   *     }\n   *   ],\n   *   // ERC1155 rewards to be included in the pack\n   *   erc1155Rewards: [\n   *     {\n   *       contractAddress: \"0x...\",\n   *       tokenId: 0,\n   *       quantityPerReward: 1,\n   *       totalRewards: 100,\n   *     }\n   *   ],\n   *   openStartTime: new Date(), // the date that packs can start to be opened, defaults to now\n   *   rewardsPerPack: 1, // the number of rewards in each pack, defaults to 1\n   * }\n   *\n   * const tx = await contract.createTo(\"0x...\", pack);\n   * ```\n   */\n  createTo = /* @__PURE__ */buildTransactionFunction(async (to, metadataWithRewards) => {\n    const uri = await uploadOrExtractURI(metadataWithRewards.packMetadata, this.storage);\n    const parsedMetadata = await PackMetadataInputSchema.parseAsync(metadataWithRewards);\n    const {\n      erc20Rewards,\n      erc721Rewards,\n      erc1155Rewards\n    } = parsedMetadata;\n    const rewardsData = {\n      erc20Rewards,\n      erc721Rewards,\n      erc1155Rewards\n    };\n    const {\n      contents,\n      numOfRewardUnits\n    } = await this.toPackContentArgs(rewardsData);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"createPack\",\n      args: [contents, numOfRewardUnits, uri, parsedMetadata.openStartTime, parsedMetadata.rewardsPerPack, await resolveAddress(to)],\n      parse: receipt => {\n        const event = this.contractWrapper.parseLogs(\"PackCreated\", receipt?.logs);\n        if (event.length === 0) {\n          throw new Error(\"PackCreated event not found\");\n        }\n        const packId = event[0].args.packId;\n        return {\n          id: packId,\n          receipt,\n          data: () => this.erc1155.get(packId)\n        };\n      }\n    });\n  });\n\n  /**\n   * Open Pack\n   *\n   * @remarks - Open a pack to reveal the contained rewards. This will burn the specified pack and\n   * the contained assets will be transferred to the opening users wallet.\n   *\n   * @param tokenId - the token ID of the pack you want to open\n   * @param amount - the amount of packs you want to open\n   *\n   * @example\n   * ```javascript\n   * const tokenId = 0\n   * const amount = 1\n   * const tx = await contract.open(tokenId, amount);\n   * ```\n   */\n  open = /* @__PURE__ */buildTransactionFunction((() => {\n    var _this = this;\n    return async function (tokenId) {\n      let amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      let gasLimit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 500000;\n      if (_this._vrf) {\n        throw new Error(\"This contract is using Chainlink VRF, use `contract.vrf.open()` or `contract.vrf.openAndClaim()` instead\");\n      }\n      return Transaction.fromContractWrapper({\n        contractWrapper: _this.contractWrapper,\n        method: \"openPack\",\n        args: [tokenId, amount],\n        overrides: {\n          // Higher gas limit for opening packs\n          gasLimit\n        },\n        parse: async receipt => {\n          const event = _this.contractWrapper.parseLogs(\"PackOpened\", receipt?.logs);\n          if (event.length === 0) {\n            throw new Error(\"PackOpened event not found\");\n          }\n          const rewards = event[0].args.rewardUnitsDistributed;\n          const erc20Rewards = [];\n          const erc721Rewards = [];\n          const erc1155Rewards = [];\n          for (const reward of rewards) {\n            switch (reward.tokenType) {\n              case 0:\n                {\n                  const tokenMetadata = await fetchCurrencyMetadata(_this.contractWrapper.getProvider(), reward.assetContract);\n                  erc20Rewards.push({\n                    contractAddress: reward.assetContract,\n                    quantityPerReward: utils.formatUnits(reward.totalAmount, tokenMetadata.decimals).toString()\n                  });\n                  break;\n                }\n              case 1:\n                {\n                  erc721Rewards.push({\n                    contractAddress: reward.assetContract,\n                    tokenId: reward.tokenId.toString()\n                  });\n                  break;\n                }\n              case 2:\n                {\n                  erc1155Rewards.push({\n                    contractAddress: reward.assetContract,\n                    tokenId: reward.tokenId.toString(),\n                    quantityPerReward: reward.totalAmount.toString()\n                  });\n                  break;\n                }\n            }\n          }\n          return {\n            erc20Rewards,\n            erc721Rewards,\n            erc1155Rewards\n          };\n        }\n      });\n    };\n  })());\n\n  /** *****************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  async toPackContentArgs(metadataWithRewards) {\n    const contents = [];\n    const numOfRewardUnits = [];\n    const {\n      erc20Rewards,\n      erc721Rewards,\n      erc1155Rewards\n    } = metadataWithRewards;\n    const provider = this.contractWrapper.getProvider();\n    const owner = await this.contractWrapper.getSignerAddress();\n    for (const erc20 of erc20Rewards) {\n      const normalizedQuantity = await normalizePriceValue(provider, erc20.quantityPerReward, erc20.contractAddress);\n      // Multiply the quantity of one reward by the number of rewards\n      const totalQuantity = normalizedQuantity.mul(erc20.totalRewards);\n      const hasAllowance = await hasERC20Allowance(this.contractWrapper, erc20.contractAddress, totalQuantity);\n      if (!hasAllowance) {\n        throw new Error(`ERC20 token with contract address \"${erc20.contractAddress}\" does not have enough allowance to transfer.\\n\\nYou can set allowance to the multiwrap contract to transfer these tokens by running:\\n\\nawait sdk.getToken(\"${erc20.contractAddress}\").setAllowance(\"${this.getAddress()}\", ${totalQuantity});\\n\\n`);\n      }\n      numOfRewardUnits.push(erc20.totalRewards);\n      contents.push({\n        assetContract: erc20.contractAddress,\n        tokenType: 0,\n        totalAmount: totalQuantity,\n        tokenId: 0\n      });\n    }\n    for (const erc721 of erc721Rewards) {\n      const isApproved = await isTokenApprovedForTransfer(this.contractWrapper.getProvider(), this.getAddress(), erc721.contractAddress, erc721.tokenId, owner);\n      if (!isApproved) {\n        throw new Error(`ERC721 token \"${erc721.tokenId}\" with contract address \"${erc721.contractAddress}\" is not approved for transfer.\\n\\nYou can give approval the multiwrap contract to transfer this token by running:\\n\\nawait sdk.getNFTCollection(\"${erc721.contractAddress}\").setApprovalForToken(\"${this.getAddress()}\", ${erc721.tokenId});\\n\\n`);\n      }\n      numOfRewardUnits.push(\"1\");\n      contents.push({\n        assetContract: erc721.contractAddress,\n        tokenType: 1,\n        totalAmount: 1,\n        tokenId: erc721.tokenId\n      });\n    }\n    for (const erc1155 of erc1155Rewards) {\n      const isApproved = await isTokenApprovedForTransfer(this.contractWrapper.getProvider(), this.getAddress(), erc1155.contractAddress, erc1155.tokenId, owner);\n      if (!isApproved) {\n        throw new Error(`ERC1155 token \"${erc1155.tokenId}\" with contract address \"${erc1155.contractAddress}\" is not approved for transfer.\\n\\nYou can give approval the multiwrap contract to transfer this token by running:\\n\\nawait sdk.getEdition(\"${erc1155.contractAddress}\").setApprovalForAll(\"${this.getAddress()}\", true);\\n\\n`);\n      }\n      numOfRewardUnits.push(erc1155.totalRewards);\n      contents.push({\n        assetContract: erc1155.contractAddress,\n        tokenType: 2,\n        totalAmount: BigNumber.from(erc1155.quantityPerReward).mul(BigNumber.from(erc1155.totalRewards)),\n        tokenId: erc1155.tokenId\n      });\n    }\n    return {\n      contents,\n      numOfRewardUnits\n    };\n  }\n\n  /**\n   * @internal\n   */\n  async prepare(method, args, overrides) {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method,\n      args,\n      overrides\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName, args, overrides) {\n    return this.contractWrapper.call(functionName, args, overrides);\n  }\n  detectVrf() {\n    if (detectContractFeature(this.contractWrapper, \"PackVRF\")) {\n      return new PackVRF(this.contractWrapper.getSignerOrProvider(), this.contractWrapper.address, this.storage, this.contractWrapper.options, this.chainId);\n    }\n    return undefined;\n  }\n}\n\nexport { Pack };\n"],"mappings":"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AGnE,OAAO;MACVmE,OAAO,EAAE;QACP,GAAGnE,OAAO,CAACmE,OAAO;QAClBC,YAAY,EAAE;UACZ,GAAGpE,OAAO,CAACmE,OAAO,CAACC,YAAY;UAC/BC,eAAe,EAAE;QACnB;MACF;IACF,CAAC,GAAGrE,OAAO,EAAED,OAAO,CAAC;IACrB,KAAK,CAACY,eAAe,EAAEZ,OAAO,EAAEE,OAAO,CAAC;IAuK1C;AACF;AACA;IAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IA9CEC,eAAA,iBA+CS,eAAe5F,wBAAwB,CAAC,MAAMgK,mBAAmB,IAAI;MAC5E,MAAMC,aAAa,GAAG,MAAM,IAAI,CAAC5D,eAAe,CAACuC,gBAAgB,CAAC,CAAC;MACnE,OAAO,IAAI,CAACsB,QAAQ,CAACC,OAAO,CAACF,aAAa,EAAED,mBAAmB,CAAC;IAClE,CAAC,CAAC;IAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAvCEpE,eAAA,0BAwCkB,eAAe5F,wBAAwB,CAAC,OAAOwI,MAAM,EAAE4B,YAAY,KAAK;MACxF,MAAMH,aAAa,GAAG,MAAM,IAAI,CAAC5D,eAAe,CAACuC,gBAAgB,CAAC,CAAC;MACnE,MAAMyB,cAAc,GAAG,MAAM1F,uBAAuB,CAAC2F,UAAU,CAACF,YAAY,CAAC;MAC7E,MAAM;QACJG,QAAQ;QACRC;MACF,CAAC,GAAG,MAAM,IAAI,CAACC,iBAAiB,CAACJ,cAAc,CAAC;MAChD,OAAOnK,WAAW,CAACkG,mB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"},"metadata":{},"sourceType":"module","externalDependencies":[]}