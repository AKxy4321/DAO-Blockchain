{"ast":null,"code":"import { _ as _defineProperty } from '../../../../dist/defineProperty-c8ecdc07.browser.esm.js';\nimport { W as WagmiAdapter } from '../../../../dist/connector-05689d68.browser.esm.js';\nimport { a as assertWindowEthereum } from '../../../../dist/assertWindowEthereum-b48c1686.browser.esm.js';\nimport { a as AbstractClientWallet } from '../../../../dist/base-402f7b12.browser.esm.js';\nimport { w as walletIds } from '../../../../dist/walletIds-a64268ca.browser.esm.js';\nimport { T as TW_WC_PROJECT_ID } from '../../../../dist/wc-c6a6a61c.browser.esm.js';\nimport 'eventemitter3';\nimport '../../../../dist/classPrivateMethodGet-ea199cc3.browser.esm.js';\nimport '../../../../dist/classPrivateFieldSet-a5db7c83.browser.esm.js';\nimport '@thirdweb-dev/chains';\nimport '../../abstract/dist/thirdweb-dev-wallets-evm-wallets-abstract.browser.esm.js';\nimport 'ethers';\nimport '@thirdweb-dev/sdk';\nclass TrustWallet extends AbstractClientWallet {\n  get walletName() {\n    return \"Trust Wallet\";\n  }\n  constructor(options) {\n    super(TrustWallet.id, options);\n    if (assertWindowEthereum(globalThis.window)) {\n      var _globalThis$window$et;\n      this.isInjected = !!((_globalThis$window$et = globalThis.window.ethereum) !== null && _globalThis$window$et !== void 0 && _globalThis$window$et.isTrust);\n    } else {\n      this.isInjected = false;\n    }\n  }\n  async getConnector() {\n    if (!this.connector) {\n      // if trust is injected, use the injected connector\n      // otherwise, use the wallet connect connector for using the trust app on mobile via QR code scan\n\n      if (this.isInjected) {\n        // import the connector dynamically\n        const {\n          TrustConnector\n        } = await import('../../../connectors/trust/dist/thirdweb-dev-wallets-evm-connectors-trust.browser.esm.js');\n        const trustConnector = new TrustConnector({\n          chains: this.chains,\n          connectorStorage: this.walletStorage,\n          options: {\n            shimDisconnect: true\n          }\n        });\n        this.trustConnector = trustConnector;\n        this.connector = new WagmiAdapter(trustConnector);\n      } else {\n        var _this$options, _this$options2, _this$options3;\n        const {\n          WalletConnectConnector\n        } = await import('../../../connectors/wallet-connect/dist/thirdweb-dev-wallets-evm-connectors-wallet-connect.browser.esm.js');\n        const walletConnectConnector = new WalletConnectConnector({\n          chains: this.chains,\n          options: {\n            projectId: ((_this$options = this.options) === null || _this$options === void 0 ? void 0 : _this$options.projectId) || TW_WC_PROJECT_ID,\n            // TODO,\n            storage: this.walletStorage,\n            qrcode: (_this$options2 = this.options) === null || _this$options2 === void 0 ? void 0 : _this$options2.qrcode,\n            dappMetadata: this.dappMetadata,\n            qrModalOptions: (_this$options3 = this.options) === null || _this$options3 === void 0 ? void 0 : _this$options3.qrModalOptions\n          }\n        });\n        walletConnectConnector.getProvider().then(provider => {\n          provider.signer.client.on(\"session_request_sent\", () => {\n            this.emit(\"wc_session_request_sent\");\n          });\n        });\n\n        // need to save this for getting the QR code URI\n        this.walletConnectConnector = walletConnectConnector;\n        this.connector = new WagmiAdapter(walletConnectConnector);\n      }\n    }\n    return this.connector;\n  }\n\n  /**\n   * connect to wallet with QR code\n   *\n   * @example\n   * ```typescript\n   * trust.connectWithQrCode({\n   *  chainId: 1,\n   *  onQrCodeUri(qrCodeUri) {\n   *    // render the QR code with `qrCodeUri`\n   *  },\n   *  onConnected(accountAddress)  {\n   *    // update UI to show connected state\n   *  },\n   * })\n   * ```\n   */\n  async connectWithQrCode(options) {\n    await this.getConnector();\n    const wcConnector = this.walletConnectConnector;\n    if (!wcConnector) {\n      throw new Error(\"WalletConnect connector not found\");\n    }\n    const wcProvider = await wcConnector.getProvider();\n\n    // set a listener for display_uri event\n    wcProvider.on(\"display_uri\", uri => {\n      options.onQrCodeUri(uri);\n    });\n\n    // trigger connect flow\n    this.connect({\n      chainId: options.chainId\n    }).then(options.onConnected);\n  }\n}\n_defineProperty(TrustWallet, \"meta\", {\n  name: \"Trust Wallet\",\n  iconURL: \"ipfs://QmNigQbXk7wKZwDcgN38Znj1ZZQ3JEG3DD6fUKLBU8SUTP/trust%20wallet.svg\",\n  urls: {\n    chrome: \"https://chrome.google.com/webstore/detail/trust-wallet/egjidjbpglichdcondbcbdnbeeppgdph\",\n    android: \"https://play.google.com/store/apps/details?id=com.wallet.crypto.trustapp\",\n    ios: \"https://apps.apple.com/us/app/trust-crypto-bitcoin-wallet/id1288339409\"\n  }\n});\n_defineProperty(TrustWallet, \"id\", walletIds.trust);\nexport { TrustWallet };","map":{"version":3,"names":["_","_defineProperty","W","WagmiAdapter","a","assertWindowEthereum","AbstractClientWallet","w","walletIds","T","TW_WC_PROJECT_ID","TrustWallet","walletName","constructor","options","id","globalThis","window","_globalThis$window$et","isInjected","ethereum","isTrust","getConnector","connector","TrustConnector","trustConnector","chains","connectorStorage","walletStorage","shimDisconnect","_this$options","_this$options2","_this$options3","WalletConnectConnector","walletConnectConnector","projectId","storage","qrcode","dappMetadata","qrModalOptions","getProvider","then","provider","signer","client","on","emit","connectWithQrCode","wcConnector","Error","wcProvider","uri","onQrCodeUri","connect","chainId","onConnected","name","iconURL","urls","chrome","android","ios","trust"],"sources":["C:/Misc/Documents/Career/FinTech/BlockChain/FrontEnd/buildspace-dao-starter/node_modules/@thirdweb-dev/react/node_modules/@thirdweb-dev/wallets/evm/wallets/trust/dist/thirdweb-dev-wallets-evm-wallets-trust.browser.esm.js"],"sourcesContent":["import { _ as _defineProperty } from '../../../../dist/defineProperty-c8ecdc07.browser.esm.js';\nimport { W as WagmiAdapter } from '../../../../dist/connector-05689d68.browser.esm.js';\nimport { a as assertWindowEthereum } from '../../../../dist/assertWindowEthereum-b48c1686.browser.esm.js';\nimport { a as AbstractClientWallet } from '../../../../dist/base-402f7b12.browser.esm.js';\nimport { w as walletIds } from '../../../../dist/walletIds-a64268ca.browser.esm.js';\nimport { T as TW_WC_PROJECT_ID } from '../../../../dist/wc-c6a6a61c.browser.esm.js';\nimport 'eventemitter3';\nimport '../../../../dist/classPrivateMethodGet-ea199cc3.browser.esm.js';\nimport '../../../../dist/classPrivateFieldSet-a5db7c83.browser.esm.js';\nimport '@thirdweb-dev/chains';\nimport '../../abstract/dist/thirdweb-dev-wallets-evm-wallets-abstract.browser.esm.js';\nimport 'ethers';\nimport '@thirdweb-dev/sdk';\n\nclass TrustWallet extends AbstractClientWallet {\n  get walletName() {\n    return \"Trust Wallet\";\n  }\n  constructor(options) {\n    super(TrustWallet.id, options);\n    if (assertWindowEthereum(globalThis.window)) {\n      this.isInjected = !!globalThis.window.ethereum?.isTrust;\n    } else {\n      this.isInjected = false;\n    }\n  }\n  async getConnector() {\n    if (!this.connector) {\n      // if trust is injected, use the injected connector\n      // otherwise, use the wallet connect connector for using the trust app on mobile via QR code scan\n\n      if (this.isInjected) {\n        // import the connector dynamically\n        const {\n          TrustConnector\n        } = await import('../../../connectors/trust/dist/thirdweb-dev-wallets-evm-connectors-trust.browser.esm.js');\n        const trustConnector = new TrustConnector({\n          chains: this.chains,\n          connectorStorage: this.walletStorage,\n          options: {\n            shimDisconnect: true\n          }\n        });\n        this.trustConnector = trustConnector;\n        this.connector = new WagmiAdapter(trustConnector);\n      } else {\n        const {\n          WalletConnectConnector\n        } = await import('../../../connectors/wallet-connect/dist/thirdweb-dev-wallets-evm-connectors-wallet-connect.browser.esm.js');\n        const walletConnectConnector = new WalletConnectConnector({\n          chains: this.chains,\n          options: {\n            projectId: this.options?.projectId || TW_WC_PROJECT_ID,\n            // TODO,\n            storage: this.walletStorage,\n            qrcode: this.options?.qrcode,\n            dappMetadata: this.dappMetadata,\n            qrModalOptions: this.options?.qrModalOptions\n          }\n        });\n        walletConnectConnector.getProvider().then(provider => {\n          provider.signer.client.on(\"session_request_sent\", () => {\n            this.emit(\"wc_session_request_sent\");\n          });\n        });\n\n        // need to save this for getting the QR code URI\n        this.walletConnectConnector = walletConnectConnector;\n        this.connector = new WagmiAdapter(walletConnectConnector);\n      }\n    }\n    return this.connector;\n  }\n\n  /**\n   * connect to wallet with QR code\n   *\n   * @example\n   * ```typescript\n   * trust.connectWithQrCode({\n   *  chainId: 1,\n   *  onQrCodeUri(qrCodeUri) {\n   *    // render the QR code with `qrCodeUri`\n   *  },\n   *  onConnected(accountAddress)  {\n   *    // update UI to show connected state\n   *  },\n   * })\n   * ```\n   */\n  async connectWithQrCode(options) {\n    await this.getConnector();\n    const wcConnector = this.walletConnectConnector;\n    if (!wcConnector) {\n      throw new Error(\"WalletConnect connector not found\");\n    }\n    const wcProvider = await wcConnector.getProvider();\n\n    // set a listener for display_uri event\n    wcProvider.on(\"display_uri\", uri => {\n      options.onQrCodeUri(uri);\n    });\n\n    // trigger connect flow\n    this.connect({\n      chainId: options.chainId\n    }).then(options.onConnected);\n  }\n}\n_defineProperty(TrustWallet, \"meta\", {\n  name: \"Trust Wallet\",\n  iconURL: \"ipfs://QmNigQbXk7wKZwDcgN38Znj1ZZQ3JEG3DD6fUKLBU8SUTP/trust%20wallet.svg\",\n  urls: {\n    chrome: \"https://chrome.google.com/webstore/detail/trust-wallet/egjidjbpglichdcondbcbdnbeeppgdph\",\n    android: \"https://play.google.com/store/apps/details?id=com.wallet.crypto.trustapp\",\n    ios: \"https://apps.apple.com/us/app/trust-crypto-bitcoin-wallet/id1288339409\"\n  }\n});\n_defineProperty(TrustWallet, \"id\", walletIds.trust);\n\nexport { TrustWallet };\n"],"mappings":"AAAA,SAASA,CAAC,IAAIC,eAAe,QAAQ,yDAAyD;AAC9F,SAASC,CAAC,IAAIC,YAAY,QAAQ,oDAAoD;AACtF,SAASC,CAAC,IAAIC,oBAAoB,QAAQ,+DAA+D;AACzG,SAASD,CAAC,IAAIE,oBAAoB,QAAQ,+CAA+C;AACzF,SAASC,CAAC,IAAIC,SAAS,QAAQ,oDAAoD;AACnF,SAASC,CAAC,IAAIC,gBAAgB,QAAQ,6CAA6C;AACnF,OAAO,eAAe;AACtB,OAAO,gEAAgE;AACvE,OAAO,+DAA+D;AACtE,OAAO,sBAAsB;AAC7B,OAAO,8EAA8E;AACrF,OAAO,QAAQ;AACf,OAAO,mBAAmB;AAE1B,MAAMC,WAAW,SAASL,oBAAoB,CAAC;EAC7C,IAAIM,UAAUA,CAAA,EAAG;IACf,OAAO,cAAc;EACvB;EACAC,WAAWA,CAACC,OAAO,EAAE;IACnB,KAAK,CAACH,WAAW,CAACI,EAAE,EAAED,OAAO,CAAC;IAC9B,IAAIT,oBAAoB,CAACW,UAAU,CAACC,MAAM,CAAC,EAAE;MAAA,IAAAC,qBAAA;MAC3C,IAAI,CAACC,UAAU,GAAG,CAAC,GAAAD,qBAAA,GAACF,UAAU,CAACC,MAAM,CAACG,QAAQ,cAAAF,qBAAA,eAA1BA,qBAAA,CAA4BG,OAAO;IACzD,CAAC,MAAM;MACL,IAAI,CAACF,UAAU,GAAG,KAAK;IACzB;EACF;EACA,MAAMG,YAAYA,CAAA,EAAG;IACnB,IAAI,CAAC,IAAI,CAACC,SAAS,EAAE;MACnB;MACA;;MAEA,IAAI,IAAI,CAACJ,UAAU,EAAE;QACnB;QACA,MAAM;UACJK;QACF,CAAC,GAAG,MAAM,MAAM,CAAC,yFAAyF,CAAC;QAC3G,MAAMC,cAAc,GAAG,IAAID,cAAc,CAAC;UACxCE,MAAM,EAAE,IAAI,CAACA,MAAM;UACnBC,gBAAgB,EAAE,IAAI,CAACC,aAAa;UACpCd,OAAO,EAAE;YACPe,cAAc,EAAE;UAClB;QACF,CAAC,CAAC;QACF,IAAI,CAACJ,cAAc,GAAGA,cAAc;QACpC,IAAI,CAACF,SAAS,GAAG,IAAIpB,YAAY,CAACsB,cAAc,CAAC;MACnD,CAAC,MAAM;QAAA,IAAAK,aAAA,EAAAC,cAAA,EAAAC,cAAA;QACL,MAAM;UACJC;QACF,CAAC,GAAG,MAAM,MAAM,CAAC,2GAA2G,CAAC;QAC7H,MAAMC,sBAAsB,GAAG,IAAID,sBAAsB,CAAC;UACxDP,MAAM,EAAE,IAAI,CAACA,MAAM;UACnBZ,OAAO,EAAE;YACPqB,SAAS,EAAE,EAAAL,aAAA,OAAI,CAAChB,OAAO,cAAAgB,aAAA,uBAAZA,aAAA,CAAcK,SAAS,KAAIzB,gBAAgB;YACtD;YACA0B,OAAO,EAAE,IAAI,CAACR,aAAa;YAC3BS,MAAM,GAAAN,cAAA,GAAE,IAAI,CAACjB,OAAO,cAAAiB,cAAA,uBAAZA,cAAA,CAAcM,MAAM;YAC5BC,YAAY,EAAE,IAAI,CAACA,YAAY;YAC/BC,cAAc,GAAAP,cAAA,GAAE,IAAI,CAAClB,OAAO,cAAAkB,cAAA,uBAAZA,cAAA,CAAcO;UAChC;QACF,CAAC,CAAC;QACFL,sBAAsB,CAACM,WAAW,CAAC,CAAC,CAACC,IAAI,CAACC,QAAQ,IAAI;UACpDA,QAAQ,CAACC,MAAM,CAACC,MAAM,CAACC,EAAE,CAAC,sBAAsB,EAAE,MAAM;YACtD,IAAI,CAACC,IAAI,CAAC,yBAAyB,CAAC;UACtC,CAAC,CAAC;QACJ,CAAC,CAAC;;QAEF;QACA,IAAI,CAACZ,sBAAsB,GAAGA,sBAAsB;QACpD,IAAI,CAACX,SAAS,GAAG,IAAIpB,YAAY,CAAC+B,sBAAsB,CAAC;MAC3D;IACF;IACA,OAAO,IAAI,CAACX,SAAS;EACvB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMwB,iBAAiBA,CAACjC,OAAO,EAAE;IAC/B,MAAM,IAAI,CAACQ,YAAY,CAAC,CAAC;IACzB,MAAM0B,WAAW,GAAG,IAAI,CAACd,sBAAsB;IAC/C,IAAI,CAACc,WAAW,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,mCAAmC,CAAC;IACtD;IACA,MAAMC,UAAU,GAAG,MAAMF,WAAW,CAACR,WAAW,CAAC,CAAC;;IAElD;IACAU,UAAU,CAACL,EAAE,CAAC,aAAa,EAAEM,GAAG,IAAI;MAClCrC,OAAO,CAACsC,WAAW,CAACD,GAAG,CAAC;IAC1B,CAAC,CAAC;;IAEF;IACA,IAAI,CAACE,OAAO,CAAC;MACXC,OAAO,EAAExC,OAAO,CAACwC;IACnB,CAAC,CAAC,CAACb,IAAI,CAAC3B,OAAO,CAACyC,WAAW,CAAC;EAC9B;AACF;AACAtD,eAAe,CAACU,WAAW,EAAE,MAAM,EAAE;EACnC6C,IAAI,EAAE,cAAc;EACpBC,OAAO,EAAE,0EAA0E;EACnFC,IAAI,EAAE;IACJC,MAAM,EAAE,yFAAyF;IACjGC,OAAO,EAAE,0EAA0E;IACnFC,GAAG,EAAE;EACP;AACF,CAAC,CAAC;AACF5D,eAAe,CAACU,WAAW,EAAE,IAAI,EAAEH,SAAS,CAACsD,KAAK,CAAC;AAEnD,SAASnD,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}