{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ContractFactory = exports.Contract = void 0;\nconst ethers_1 = require(\"ethers\");\nconst utils_1 = require(\"./utils\");\nconst types_1 = require(\"./types\");\nvar ethers_2 = require(\"ethers\");\nObject.defineProperty(exports, \"Contract\", {\n  enumerable: true,\n  get: function () {\n    return ethers_2.Contract;\n  }\n});\nclass ContractFactory extends ethers_1.ethers.ContractFactory {\n  constructor(abi, bytecode, signer, deploymentType) {\n    super(abi, bytecode, signer);\n    this.deploymentType = deploymentType || 'create';\n  }\n  encodeCalldata(salt, bytecodeHash, constructorCalldata) {\n    if (this.deploymentType == 'create') {\n      return utils_1.CONTRACT_DEPLOYER.encodeFunctionData('create', [salt, bytecodeHash, constructorCalldata]);\n    } else if (this.deploymentType == 'createAccount') {\n      return utils_1.CONTRACT_DEPLOYER.encodeFunctionData('createAccount', [salt, bytecodeHash, constructorCalldata, types_1.AccountAbstractionVersion.Version1]);\n    } else {\n      throw new Error(\"Unsupported deployment type \".concat(this.deploymentType));\n    }\n  }\n  getDeployTransaction() {\n    var _a, _b, _c;\n    var _d, _e;\n    // TODO (SMA-1585): Users should be able to provide the salt.\n    let salt = '0x0000000000000000000000000000000000000000000000000000000000000000';\n    // The overrides will be popped out in this call:\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    const txRequest = super.getDeployTransaction(...args);\n    // Removing overrides\n    if (this.interface.deploy.inputs.length + 1 == args.length) {\n      args.pop();\n    }\n    // Salt argument is not used, so we provide a placeholder value.\n    const bytecodeHash = (0, utils_1.hashBytecode)(this.bytecode);\n    const constructorCalldata = ethers_1.utils.arrayify(this.interface.encodeDeploy(args));\n    const deployCalldata = this.encodeCalldata(salt, bytecodeHash, constructorCalldata);\n    txRequest.type = utils_1.EIP712_TX_TYPE;\n    txRequest.to = utils_1.CONTRACT_DEPLOYER_ADDRESS;\n    txRequest.data = deployCalldata;\n    (_a = txRequest.customData) !== null && _a !== void 0 ? _a : txRequest.customData = {};\n    (_b = (_d = txRequest.customData).factoryDeps) !== null && _b !== void 0 ? _b : _d.factoryDeps = [];\n    (_c = (_e = txRequest.customData).gasPerPubdata) !== null && _c !== void 0 ? _c : _e.gasPerPubdata = utils_1.DEFAULT_GAS_PER_PUBDATA_LIMIT;\n    // The number of factory deps is relatively low, so it is efficient enough.\n    if (!txRequest.customData.factoryDeps.includes(this.bytecode)) {\n      txRequest.customData.factoryDeps.push(this.bytecode);\n    }\n    return txRequest;\n  }\n  async deploy() {\n    const contract = await super.deploy(...arguments);\n    const deployTxReceipt = await contract.deployTransaction.wait();\n    const deployedAddresses = (0, utils_1.getDeployedContracts)(deployTxReceipt).map(info => info.deployedAddress);\n    const contractWithCorrectAddress = new ethers_1.ethers.Contract(deployedAddresses[deployedAddresses.length - 1], contract.interface, contract.signer);\n    ethers_1.utils.defineReadOnly(contractWithCorrectAddress, 'deployTransaction', contract.deployTransaction);\n    return contractWithCorrectAddress;\n  }\n}\nexports.ContractFactory = ContractFactory;","map":{"version":3,"names":["Object","defineProperty","exports","value","ContractFactory","Contract","ethers_1","require","utils_1","types_1","ethers_2","enumerable","get","ethers","constructor","abi","bytecode","signer","deploymentType","encodeCalldata","salt","bytecodeHash","constructorCalldata","CONTRACT_DEPLOYER","encodeFunctionData","AccountAbstractionVersion","Version1","Error","concat","getDeployTransaction","_a","_b","_c","_d","_e","_len","arguments","length","args","Array","_key","txRequest","interface","deploy","inputs","pop","hashBytecode","utils","arrayify","encodeDeploy","deployCalldata","type","EIP712_TX_TYPE","to","CONTRACT_DEPLOYER_ADDRESS","data","customData","factoryDeps","gasPerPubdata","DEFAULT_GAS_PER_PUBDATA_LIMIT","includes","push","contract","deployTxReceipt","deployTransaction","wait","deployedAddresses","getDeployedContracts","map","info","deployedAddress","contractWithCorrectAddress","defineReadOnly"],"sources":["C:/Misc/Documents/Career/FinTech/BlockChain/FrontEnd/buildspace-dao-starter/node_modules/zksync-web3/build/src/contract.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ContractFactory = exports.Contract = void 0;\nconst ethers_1 = require(\"ethers\");\nconst utils_1 = require(\"./utils\");\nconst types_1 = require(\"./types\");\nvar ethers_2 = require(\"ethers\");\nObject.defineProperty(exports, \"Contract\", { enumerable: true, get: function () { return ethers_2.Contract; } });\nclass ContractFactory extends ethers_1.ethers.ContractFactory {\n    constructor(abi, bytecode, signer, deploymentType) {\n        super(abi, bytecode, signer);\n        this.deploymentType = deploymentType || 'create';\n    }\n    encodeCalldata(salt, bytecodeHash, constructorCalldata) {\n        if (this.deploymentType == 'create') {\n            return utils_1.CONTRACT_DEPLOYER.encodeFunctionData('create', [salt, bytecodeHash, constructorCalldata]);\n        }\n        else if (this.deploymentType == 'createAccount') {\n            return utils_1.CONTRACT_DEPLOYER.encodeFunctionData('createAccount', [\n                salt,\n                bytecodeHash,\n                constructorCalldata,\n                types_1.AccountAbstractionVersion.Version1\n            ]);\n        }\n        else {\n            throw new Error(`Unsupported deployment type ${this.deploymentType}`);\n        }\n    }\n    getDeployTransaction(...args) {\n        var _a, _b, _c;\n        var _d, _e;\n        // TODO (SMA-1585): Users should be able to provide the salt.\n        let salt = '0x0000000000000000000000000000000000000000000000000000000000000000';\n        // The overrides will be popped out in this call:\n        const txRequest = super.getDeployTransaction(...args);\n        // Removing overrides\n        if (this.interface.deploy.inputs.length + 1 == args.length) {\n            args.pop();\n        }\n        // Salt argument is not used, so we provide a placeholder value.\n        const bytecodeHash = (0, utils_1.hashBytecode)(this.bytecode);\n        const constructorCalldata = ethers_1.utils.arrayify(this.interface.encodeDeploy(args));\n        const deployCalldata = this.encodeCalldata(salt, bytecodeHash, constructorCalldata);\n        txRequest.type = utils_1.EIP712_TX_TYPE;\n        txRequest.to = utils_1.CONTRACT_DEPLOYER_ADDRESS;\n        txRequest.data = deployCalldata;\n        (_a = txRequest.customData) !== null && _a !== void 0 ? _a : (txRequest.customData = {});\n        (_b = (_d = txRequest.customData).factoryDeps) !== null && _b !== void 0 ? _b : (_d.factoryDeps = []);\n        (_c = (_e = txRequest.customData).gasPerPubdata) !== null && _c !== void 0 ? _c : (_e.gasPerPubdata = utils_1.DEFAULT_GAS_PER_PUBDATA_LIMIT);\n        // The number of factory deps is relatively low, so it is efficient enough.\n        if (!txRequest.customData.factoryDeps.includes(this.bytecode)) {\n            txRequest.customData.factoryDeps.push(this.bytecode);\n        }\n        return txRequest;\n    }\n    async deploy(...args) {\n        const contract = await super.deploy(...args);\n        const deployTxReceipt = await contract.deployTransaction.wait();\n        const deployedAddresses = (0, utils_1.getDeployedContracts)(deployTxReceipt).map((info) => info.deployedAddress);\n        const contractWithCorrectAddress = new ethers_1.ethers.Contract(deployedAddresses[deployedAddresses.length - 1], contract.interface, contract.signer);\n        ethers_1.utils.defineReadOnly(contractWithCorrectAddress, 'deployTransaction', contract.deployTransaction);\n        return contractWithCorrectAddress;\n    }\n}\nexports.ContractFactory = ContractFactory;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}