{"ast":null,"code":"import _defineProperty from \"C:/Misc/Documents/Career/FinTech/BlockChain/FrontEnd/buildspace-dao-starter/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport Erc1155Abi from '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport ERC165Abi from '@thirdweb-dev/contracts-js/dist/abis/IERC165.json';\nimport Erc721Abi from '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport { constants, BigNumber, utils, Contract } from 'ethers';\nimport invariant from 'tiny-invariant';\nimport { bx as ListingNotFoundError, by as WrongListingTypeError, cL as resolveAddress, dE as mapOffer, dx as buildTransactionFunction, bc as fetchCurrencyValue, dF as fetchTokenMetadataForContract, dG as isTokenApprovedForTransfer, cU as InterfaceId_IERC721, cV as InterfaceId_IERC1155, dH as validateNewListingParam, dI as handleTokenApproval, ba as normalizePriceValue, aW as Transaction, b9 as cleanCurrencyAddress, b8 as isNativeToken, bd as setErc20Allowance, ag as ContractEncoder, aR as ContractEvents, bb as fetchCurrencyMetadata, dJ as isWinningBid, bv as AuctionAlreadyStartedError, bB as AuctionHasNotEndedError } from './contract-publisher-1ff1fe07.browser.esm.js';\nlet ListingType = /*#__PURE__*/function (ListingType) {\n  ListingType[ListingType[\"Direct\"] = 0] = \"Direct\";\n  ListingType[ListingType[\"Auction\"] = 1] = \"Auction\";\n  return ListingType;\n}({});\n\n/**\n * Handles direct listings\n * @public\n */\nclass MarketplaceDirect {\n  constructor(contractWrapper, storage) {\n    /** ******************************\n     * WRITE FUNCTIONS\n     *******************************/\n    /**\n     * Create Direct Listing\n     *\n     * @remarks Create a new listing on the marketplace where people can buy an asset directly.\n     *\n     * @example\n     * ```javascript\n     * // Data of the listing you want to create\n     * const listing = {\n     *   // address of the contract the asset you want to list is on\n     *   assetContractAddress: \"0x...\",\n     *   // token ID of the asset you want to list\n     *   tokenId: \"0\",\n     *   // when should the listing open up for offers\n     *   startTimestamp: new Date(),\n     *   // how long the listing will be open for\n     *   listingDurationInSeconds: 86400,\n     *   // how many of the asset you want to list\n     *   quantity: 1,\n     *   // address of the currency contract that will be used to pay for the listing\n     *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n     *   // how much the asset will be sold for\n     *   buyoutPricePerToken: \"1.5\",\n     * }\n     *\n     * const tx = await contract.direct.createListing(listing);\n     * const receipt = tx.receipt; // the transaction receipt\n     * const id = tx.id; // the id of the newly created listing\n     * ```\n     */\n    _defineProperty(this, \"createListing\", /* @__PURE__ */buildTransactionFunction(async listing => {\n      validateNewListingParam(listing);\n      const resolvedAssetAddress = await resolveAddress(listing.assetContractAddress);\n      const resolvedCurrencyAddress = await resolveAddress(listing.currencyContractAddress);\n      await handleTokenApproval(this.contractWrapper, this.getAddress(), resolvedAssetAddress, listing.tokenId, await this.contractWrapper.getSignerAddress());\n      const normalizedPricePerToken = await normalizePriceValue(this.contractWrapper.getProvider(), listing.buyoutPricePerToken, resolvedCurrencyAddress);\n      let listingStartTime = Math.floor(listing.startTimestamp.getTime() / 1000);\n      const block = await this.contractWrapper.getProvider().getBlock(\"latest\");\n      const blockTime = block.timestamp;\n      if (listingStartTime < blockTime) {\n        listingStartTime = blockTime;\n      }\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"createListing\",\n        args: [{\n          assetContract: resolvedAssetAddress,\n          tokenId: listing.tokenId,\n          buyoutPricePerToken: normalizedPricePerToken,\n          currencyToAccept: cleanCurrencyAddress(resolvedCurrencyAddress),\n          listingType: ListingType.Direct,\n          quantityToList: listing.quantity,\n          reservePricePerToken: normalizedPricePerToken,\n          secondsUntilEndTime: listing.listingDurationInSeconds,\n          startTime: BigNumber.from(listingStartTime)\n        }],\n        parse: receipt => {\n          const event = this.contractWrapper.parseLogs(\"ListingAdded\", receipt === null || receipt === void 0 ? void 0 : receipt.logs);\n          return {\n            id: event[0].args.listingId,\n            receipt\n          };\n        }\n      });\n    }));\n    /**\n     * Create a batch of new listings\n     *\n     * @remarks Create a batch of new listings on the marketplace\n     *\n     * @example\n     * ```javascript\n     * const listings = [...];\n     * const tx = await contract.direct.createListingsBatch(listings);\n     * ```\n     */\n    _defineProperty(this, \"createListingsBatch\", /* @__PURE__ */buildTransactionFunction(async listings => {\n      const data = await Promise.all(listings.map(async listing => {\n        const tx = await this.createListing.prepare(listing);\n        return tx.encode();\n      }));\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"multicall\",\n        args: [data],\n        parse: receipt => {\n          const events = this.contractWrapper.parseLogs(\"ListingAdded\", receipt === null || receipt === void 0 ? void 0 : receipt.logs);\n          return events.map(event => {\n            return {\n              id: event.args.listingId,\n              receipt\n            };\n          });\n        }\n      });\n    }));\n    /**\n     * Make an offer for a Direct Listing\n     *\n     * @remarks Make an offer on a direct listing\n     *\n     * @example\n     * ```javascript\n     * import { ChainId, NATIVE_TOKENS } from \"@thirdweb-dev/sdk\";\n     *\n     * // The listing ID of the asset you want to offer on\n     * const listingId = 0;\n     * // The price you are willing to offer per token\n     * const pricePerToken = 1;\n     * // The quantity of tokens you want to receive for this offer\n     * const quantity = 1;\n     * // The address of the currency you are making the offer in (must be ERC-20)\n     * const currencyContractAddress = NATIVE_TOKENS[ChainId.Rinkeby].wrapped.address\n     *\n     * await contract.direct.makeOffer(\n     *   listingId,\n     *   quantity,\n     *   currencyContractAddress,\n     *   pricePerToken\n     * );\n     * ```\n     */\n    _defineProperty(this, \"makeOffer\", /* @__PURE__ */buildTransactionFunction(async (listingId, quantityDesired, currencyContractAddress, pricePerToken, expirationDate) => {\n      if (isNativeToken(currencyContractAddress)) {\n        throw new Error(\"You must use the wrapped native token address when making an offer with a native token\");\n      }\n      const normalizedPrice = await normalizePriceValue(this.contractWrapper.getProvider(), pricePerToken, currencyContractAddress);\n      try {\n        await this.getListing(listingId);\n      } catch (err) {\n        console.error(\"Failed to get listing, err =\", err);\n        throw new Error(\"Error getting the listing with id \".concat(listingId));\n      }\n      const quantity = BigNumber.from(quantityDesired);\n      const value = BigNumber.from(normalizedPrice).mul(quantity);\n      const overrides = (await this.contractWrapper.getCallOverrides()) || {};\n      await setErc20Allowance(this.contractWrapper, value, currencyContractAddress, overrides);\n      let expirationTimestamp = constants.MaxUint256;\n      if (expirationDate) {\n        expirationTimestamp = BigNumber.from(Math.floor(expirationDate.getTime() / 1000));\n      }\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"offer\",\n        args: [listingId, quantityDesired, currencyContractAddress, normalizedPrice, expirationTimestamp],\n        overrides\n      });\n    }));\n    /**\n     * Accept an offer on a direct listing\n     *\n     * @remarks Accept an offer on a direct listing\n     *\n     * @example\n     * ```javascript\n     * // The listing ID of the asset you want to bid on\n     * const listingId = 0;\n     * // The price you are willing to bid for a single token of the listing\n     * const offeror = \"0x...\";\n     *\n     * await contract.direct.acceptOffer(listingId, offeror);\n     * ```\n     */\n    _defineProperty(this, \"acceptOffer\", /* @__PURE__ */buildTransactionFunction(async (listingId, addressOfOfferor) => {\n      /**\n       * TODO:\n       * - Provide better error handling if offer is too low.\n       */\n      await this.validateListing(BigNumber.from(listingId));\n      const resolvedAddress = await resolveAddress(addressOfOfferor);\n      const offer = await this.contractWrapper.read(\"offers\", [listingId, resolvedAddress]);\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"acceptOffer\",\n        args: [listingId, resolvedAddress, offer.currency, offer.pricePerToken]\n      });\n    }));\n    /**\n     * Buy a Listing\n     *\n     * @remarks Buy a specific direct listing from the marketplace.\n     *\n     * @example\n     * ```javascript\n     * // The listing ID of the asset you want to buy\n     * const listingId = 0;\n     * // Quantity of the asset you want to buy\n     * const quantityDesired = 1;\n     *\n     * await contract.direct.buyoutListing(listingId, quantityDesired);\n     * ```\n     *\n     * @param listingId - The listing id to buy\n     * @param quantityDesired - the quantity to buy\n     * @param receiver - optional receiver of the bought listing if different from the connected wallet\n     */\n    _defineProperty(this, \"buyoutListing\", /* @__PURE__ */buildTransactionFunction(async (listingId, quantityDesired, receiver) => {\n      const listing = await this.validateListing(BigNumber.from(listingId));\n      const {\n        valid,\n        error\n      } = await this.isStillValidListing(listing, quantityDesired);\n      if (!valid) {\n        throw new Error(\"Listing \".concat(listingId, \" is no longer valid. \").concat(error));\n      }\n      const buyFor = receiver ? receiver : await this.contractWrapper.getSignerAddress();\n      const quantity = BigNumber.from(quantityDesired);\n      const value = BigNumber.from(listing.buyoutPrice).mul(quantity);\n      const overrides = (await this.contractWrapper.getCallOverrides()) || {};\n      await setErc20Allowance(this.contractWrapper, value, listing.currencyContractAddress, overrides);\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"buy\",\n        args: [listingId, buyFor, quantity, listing.currencyContractAddress, value],\n        overrides\n      });\n    }));\n    /**\n     * Update a Direct listing with new metadata.\n     *\n     * Note: cannot update a listing with a new quantity of 0. Use `cancelDirectListing` to remove a listing instead.\n     *\n     * @param listing - the new listing information\n     */\n    _defineProperty(this, \"updateListing\", /* @__PURE__ */buildTransactionFunction(async listing => {\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"updateListing\",\n        args: [listing.id, listing.quantity, listing.buyoutPrice,\n        // reserve price, doesn't matter for direct listing\n        listing.buyoutPrice, await resolveAddress(listing.currencyContractAddress), listing.startTimeInSeconds, listing.secondsUntilEnd]\n      });\n    }));\n    /**\n     * Cancel Direct Listing\n     *\n     * @remarks Cancel a direct listing on the marketplace\n     *\n     * @example\n     * ```javascript\n     * // The listing ID of the direct listing you want to cancel\n     * const listingId = \"0\";\n     *\n     * await contract.direct.cancelListing(listingId);\n     * ```\n     */\n    _defineProperty(this, \"cancelListing\", /* @__PURE__ */buildTransactionFunction(async listingId => {\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"cancelDirectListing\",\n        args: [listingId]\n      });\n    }));\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get a direct listing by id\n   *\n   * @param listingId - the listing id\n   * @returns the Direct listing object\n   */\n  async getListing(listingId) {\n    const listing = await this.contractWrapper.read(\"listings\", [listingId]);\n    if (listing.assetContract === constants.AddressZero) {\n      throw new ListingNotFoundError(this.getAddress(), listingId.toString());\n    }\n    if (listing.listingType !== ListingType.Direct) {\n      throw new WrongListingTypeError(this.getAddress(), listingId.toString(), \"Auction\", \"Direct\");\n    }\n    return await this.mapListing(listing);\n  }\n\n  /**\n   * Get the active offer on a listing\n   * @param listingId - the listing id\n   * @param address - the address that made the offer\n   */\n  async getActiveOffer(listingId, address) {\n    await this.validateListing(BigNumber.from(listingId));\n    invariant(utils.isAddress(address), \"Address must be a valid address\");\n    const offers = await this.contractWrapper.read(\"offers\", [listingId, await resolveAddress(address)]);\n    if (offers.offeror === constants.AddressZero) {\n      return undefined;\n    }\n    return await mapOffer(this.contractWrapper.getProvider(), BigNumber.from(listingId), offers);\n  }\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n  /**\n   * Throws error if listing could not be found\n   *\n   * @param listingId - Listing to check for\n   */\n  async validateListing(listingId) {\n    try {\n      return await this.getListing(listingId);\n    } catch (err) {\n      console.error(\"Error getting the listing with id \".concat(listingId));\n      throw err;\n    }\n  }\n\n  /**\n   * Helper method maps the auction listing to the direct listing interface.\n   *\n   * @internal\n   * @param listing - The listing to map, as returned from the contract.\n   * @returns - The mapped interface.\n   */\n  async mapListing(listing) {\n    return {\n      assetContractAddress: listing.assetContract,\n      buyoutPrice: BigNumber.from(listing.buyoutPricePerToken),\n      currencyContractAddress: listing.currency,\n      buyoutCurrencyValuePerToken: await fetchCurrencyValue(this.contractWrapper.getProvider(), listing.currency, listing.buyoutPricePerToken),\n      id: listing.listingId.toString(),\n      tokenId: listing.tokenId,\n      quantity: listing.quantity,\n      startTimeInSeconds: listing.startTime,\n      asset: await fetchTokenMetadataForContract(listing.assetContract, this.contractWrapper.getProvider(), listing.tokenId, this.storage),\n      secondsUntilEnd: listing.endTime,\n      sellerAddress: listing.tokenOwner,\n      type: ListingType.Direct\n    };\n  }\n\n  /**\n   * Use this method to check if a direct listing is still valid.\n   *\n   * Ways a direct listing can become invalid:\n   * 1. The asset holder transferred the asset to another wallet\n   * 2. The asset holder burned the asset\n   * 3. The asset holder removed the approval on the marketplace\n   *\n   * @internal\n   * @param listing - The listing to check.\n   * @returns - True if the listing is valid, false otherwise.\n   */\n  async isStillValidListing(listing, quantity) {\n    const approved = await isTokenApprovedForTransfer(this.contractWrapper.getProvider(), this.getAddress(), listing.assetContractAddress, listing.tokenId, listing.sellerAddress);\n    if (!approved) {\n      return {\n        valid: false,\n        error: \"Token '\".concat(listing.tokenId, \"' from contract '\").concat(listing.assetContractAddress, \"' is not approved for transfer\")\n      };\n    }\n    const provider = this.contractWrapper.getProvider();\n    const erc165 = new Contract(listing.assetContractAddress, ERC165Abi, provider);\n    const isERC721 = await erc165.supportsInterface(InterfaceId_IERC721);\n    const isERC1155 = await erc165.supportsInterface(InterfaceId_IERC1155);\n    if (isERC721) {\n      var _owner;\n      const asset = new Contract(listing.assetContractAddress, Erc721Abi, provider);\n\n      // Handle reverts in case of non-existent tokens\n      let owner;\n      try {\n        owner = await asset.ownerOf(listing.tokenId);\n      } catch (e) {}\n      const valid = ((_owner = owner) === null || _owner === void 0 ? void 0 : _owner.toLowerCase()) === listing.sellerAddress.toLowerCase();\n      return {\n        valid,\n        error: valid ? undefined : \"Seller is not the owner of Token '\".concat(listing.tokenId, \"' from contract '\").concat(listing.assetContractAddress, \" anymore'\")\n      };\n    } else if (isERC1155) {\n      const asset = new Contract(listing.assetContractAddress, Erc1155Abi, provider);\n      const balance = await asset.balanceOf(listing.sellerAddress, listing.tokenId);\n      const valid = balance.gte(quantity || listing.quantity);\n      return {\n        valid,\n        error: valid ? undefined : \"Seller does not have enough balance of Token '\".concat(listing.tokenId, \"' from contract '\").concat(listing.assetContractAddress, \" to fulfill the listing\")\n      };\n    } else {\n      return {\n        valid: false,\n        error: \"Contract does not implement ERC 1155 or ERC 721.\"\n      };\n    }\n  }\n}\n\n/**\n * Handles auction listings\n * @public\n */\nclass MarketplaceAuction {\n  constructor(contractWrapper, storage) {\n    /** ******************************\n     * WRITE FUNCTIONS\n     *******************************/\n    /**\n     * Create Auction\n     *\n     * @remarks Create a new auction where people can bid on an asset.\n     *\n     * @example\n     * ```javascript\n     * // Data of the auction you want to create\n     * const auction = {\n     *   // address of the contract the asset you want to list is on\n     *   assetContractAddress: \"0x...\",\n     *   // token ID of the asset you want to list\n     *   tokenId: \"0\",\n     *  // when should the listing open up for offers\n     *   startTimestamp: new Date(),\n     *   // how long the listing will be open for\n     *   listingDurationInSeconds: 86400,\n     *   // how many of the asset you want to list\n     *   quantity: 1,\n     *   // address of the currency contract that will be used to pay for the listing\n     *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n     *   // how much people would have to bid to instantly buy the asset\n     *   buyoutPricePerToken: \"10\",\n     *   // the minimum bid that will be accepted for the token\n     *   reservePricePerToken: \"1.5\",\n     * }\n     *\n     * const tx = await contract.auction.createListing(auction);\n     * const receipt = tx.receipt; // the transaction receipt\n     * const id = tx.id; // the id of the newly created listing\n     * ```\n     */\n    _defineProperty(this, \"createListing\", /* @__PURE__ */buildTransactionFunction(async listing => {\n      validateNewListingParam(listing);\n      const resolvedAssetAddress = await resolveAddress(listing.assetContractAddress);\n      const resolvedCurrencyAddress = await resolveAddress(listing.currencyContractAddress);\n      await handleTokenApproval(this.contractWrapper, this.getAddress(), resolvedAssetAddress, listing.tokenId, await this.contractWrapper.getSignerAddress());\n      const normalizedPricePerToken = await normalizePriceValue(this.contractWrapper.getProvider(), listing.buyoutPricePerToken, resolvedCurrencyAddress);\n      const normalizedReservePrice = await normalizePriceValue(this.contractWrapper.getProvider(), listing.reservePricePerToken, resolvedCurrencyAddress);\n      let listingStartTime = Math.floor(listing.startTimestamp.getTime() / 1000);\n      const block = await this.contractWrapper.getProvider().getBlock(\"latest\");\n      const blockTime = block.timestamp;\n      if (listingStartTime < blockTime) {\n        listingStartTime = blockTime;\n      }\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"createListing\",\n        args: [{\n          assetContract: resolvedAssetAddress,\n          tokenId: listing.tokenId,\n          buyoutPricePerToken: normalizedPricePerToken,\n          currencyToAccept: cleanCurrencyAddress(resolvedCurrencyAddress),\n          listingType: ListingType.Auction,\n          quantityToList: listing.quantity,\n          reservePricePerToken: normalizedReservePrice,\n          secondsUntilEndTime: listing.listingDurationInSeconds,\n          startTime: BigNumber.from(listingStartTime)\n        }],\n        parse: receipt => {\n          const event = this.contractWrapper.parseLogs(\"ListingAdded\", receipt === null || receipt === void 0 ? void 0 : receipt.logs);\n          return {\n            id: event[0].args.listingId,\n            receipt\n          };\n        }\n      });\n    }));\n    /**\n     * Create a batch of new auctions\n     *\n     * @remarks Create a batch of new auctions on the marketplace\n     *\n     * @example\n     * ```javascript\n     * const auctions = [...];\n     * const tx = await contract.auction.createListingsBatch(auctions);\n     * ```\n     */\n    _defineProperty(this, \"createListingsBatch\", /* @__PURE__ */buildTransactionFunction(async listings => {\n      const data = await Promise.all(listings.map(async listing => {\n        const tx = await this.createListing.prepare(listing);\n        return tx.encode();\n      }));\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"multicall\",\n        args: [data],\n        parse: receipt => {\n          const events = this.contractWrapper.parseLogs(\"ListingAdded\", receipt === null || receipt === void 0 ? void 0 : receipt.logs);\n          return events.map(event => {\n            return {\n              id: event.args.listingId,\n              receipt\n            };\n          });\n        }\n      });\n    }));\n    /**\n     * Buyout Auction\n     *\n     * @remarks Buy a specific direct listing from the marketplace.\n     *\n     * @example\n     * ```javascript\n     * // The listing ID of the asset you want to buy\n     * const listingId = 0;\n     *\n     * await contract.auction.buyoutListing(listingId);\n     * ```\n     */\n    _defineProperty(this, \"buyoutListing\", /* @__PURE__ */buildTransactionFunction(async listingId => {\n      const listing = await this.validateListing(BigNumber.from(listingId));\n      const currencyMetadata = await fetchCurrencyMetadata(this.contractWrapper.getProvider(), listing.currencyContractAddress);\n      return this.makeBid.prepare(listingId, utils.formatUnits(listing.buyoutPrice, currencyMetadata.decimals));\n    }));\n    /**\n     * Bid On Auction\n     *\n     * @remarks Make a bid on an auction listing\n     *\n     * @example\n     * ```javascript\n     * // The listing ID of the asset you want to bid on\n     * const listingId = 0;\n     * // The price you are willing to bid for a single token of the listing\n     * const pricePerToken = 1;\n     *\n     * await contract.auction.makeBid(listingId, pricePerToken);\n     * ```\n     */\n    _defineProperty(this, \"makeBid\", /* @__PURE__ */buildTransactionFunction(async (listingId, pricePerToken) => {\n      const listing = await this.validateListing(BigNumber.from(listingId));\n      const normalizedPrice = await normalizePriceValue(this.contractWrapper.getProvider(), pricePerToken, listing.currencyContractAddress);\n      if (normalizedPrice.eq(BigNumber.from(0))) {\n        throw new Error(\"Cannot make a bid with 0 value\");\n      }\n      const bidBuffer = await this.contractWrapper.read(\"bidBufferBps\", []);\n      const winningBid = await this.getWinningBid(listingId);\n      if (winningBid) {\n        const isWinner = isWinningBid(winningBid.pricePerToken, normalizedPrice, bidBuffer);\n        invariant(isWinner, \"Bid price is too low based on the current winning bid and the bid buffer\");\n      } else {\n        const tokenPrice = normalizedPrice;\n        const reservePrice = BigNumber.from(listing.reservePrice);\n        invariant(tokenPrice.gte(reservePrice), \"Bid price is too low based on reserve price\");\n      }\n      const quantity = BigNumber.from(listing.quantity);\n      const value = normalizedPrice.mul(quantity);\n      const overrides = (await this.contractWrapper.getCallOverrides()) || {};\n      await setErc20Allowance(this.contractWrapper, value, listing.currencyContractAddress, overrides);\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"offer\",\n        args: [listingId, listing.quantity, listing.currencyContractAddress, normalizedPrice, constants.MaxUint256],\n        overrides\n      });\n    }));\n    /**\n     * Cancel Auction Listing\n     *\n     * @remarks Cancel an auction listing on the marketplace\n     *\n     * @example\n     * ```javascript\n     * // The listing ID of the auction listing you want to cancel\n     * const listingId = \"0\";\n     *\n     * await contract.auction.cancelListing(listingId);\n     * ```\n     */\n    _defineProperty(this, \"cancelListing\", /* @__PURE__ */buildTransactionFunction(async listingId => {\n      const listing = await this.validateListing(BigNumber.from(listingId));\n      const now = BigNumber.from(Math.floor(Date.now() / 1000));\n      const startTime = BigNumber.from(listing.startTimeInEpochSeconds);\n      const offers = await this.contractWrapper.read(\"winningBid\", [listingId]);\n      if (now.gt(startTime) && offers.offeror !== constants.AddressZero) {\n        throw new AuctionAlreadyStartedError(listingId.toString());\n      }\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"closeAuction\",\n        args: [BigNumber.from(listingId), await this.contractWrapper.getSignerAddress()]\n      });\n    }));\n    /**\n     * Close the Auction for the buyer or the seller\n     *\n     * @remarks Closes the Auction and executes the sale for the buyer or the seller.\n     *\n     * @example\n     * ```javascript\n     * // The listing ID of the auction listing you want to close\n     * const listingId = \"0\";\n     * await contract.auction.closeListing(listingId);\n     * ```\n     *\n     * @param listingId - the auction  listing ud to close\n     * @param closeFor - optionally pass the auction creator address or winning bid offeror address to close the auction on their behalf\n     */\n    _defineProperty(this, \"closeListing\", /* @__PURE__ */buildTransactionFunction(async (listingId, closeFor) => {\n      if (!closeFor) {\n        closeFor = await this.contractWrapper.getSignerAddress();\n      }\n      const listing = await this.validateListing(BigNumber.from(listingId));\n      try {\n        return Transaction.fromContractWrapper({\n          contractWrapper: this.contractWrapper,\n          method: \"closeAuction\",\n          args: [BigNumber.from(listingId), closeFor]\n        });\n      } catch (err) {\n        if (err.message.includes(\"cannot close auction before it has ended\")) {\n          throw new AuctionHasNotEndedError(listingId.toString(), listing.endTimeInEpochSeconds.toString());\n        } else {\n          throw err;\n        }\n      }\n    }));\n    /**\n     * Execute the Auction Sale\n     *\n     * @remarks Closes the Auction and executes the sale for both parties.\n     *\n     * @example\n     * ```javascript\n     * // The listing ID of the auction listing you want to close\n     * const listingId = \"0\";\n     * await contract.auction.executeSale(listingId);\n     * ```\n     *\n     * @param listingId - the auction  listing ud to close\n     */\n    _defineProperty(this, \"executeSale\", /* @__PURE__ */buildTransactionFunction(async listingId => {\n      const listing = await this.validateListing(BigNumber.from(listingId));\n      try {\n        const winningBid = await this.getWinningBid(listingId);\n        invariant(winningBid, \"No winning bid found\");\n        const closeForSeller = this.encoder.encode(\"closeAuction\", [listingId, listing.sellerAddress]);\n        const closeForBuyer = this.encoder.encode(\"closeAuction\", [listingId, winningBid.buyerAddress]);\n        return Transaction.fromContractWrapper({\n          contractWrapper: this.contractWrapper,\n          method: \"multicall\",\n          args: [closeForSeller, closeForBuyer]\n        });\n      } catch (err) {\n        if (err.message.includes(\"cannot close auction before it has ended\")) {\n          throw new AuctionHasNotEndedError(listingId.toString(), listing.endTimeInEpochSeconds.toString());\n        } else {\n          throw err;\n        }\n      }\n    }));\n    /**\n     * Update an Auction listing with new metadata\n     * @param listing - the listing id to update\n     */\n    _defineProperty(this, \"updateListing\", /* @__PURE__ */buildTransactionFunction(async listing => {\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"updateListing\",\n        args: [listing.id, listing.quantity, listing.reservePrice, listing.buyoutPrice, listing.currencyContractAddress, listing.startTimeInEpochSeconds, listing.endTimeInEpochSeconds]\n      });\n    }));\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.encoder = new ContractEncoder(contractWrapper);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get an Auction listing by id\n   *\n   * @param listingId - the listing Id\n   * @returns the Auction listing object\n   */\n  async getListing(listingId) {\n    const listing = await this.contractWrapper.read(\"listings\", [listingId]);\n    if (listing.listingId.toString() !== listingId.toString()) {\n      throw new ListingNotFoundError(this.getAddress(), listingId.toString());\n    }\n    if (listing.listingType !== ListingType.Auction) {\n      throw new WrongListingTypeError(this.getAddress(), listingId.toString(), \"Direct\", \"Auction\");\n    }\n    return await this.mapListing(listing);\n  }\n\n  /**\n   * Get Highest Bid\n   *\n   * @remarks Get the current highest bid of an active auction.\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the auction that closed\n   * const listingId = 0;\n   *\n   * contract.auction.\n   *   .getWinningBid(listingId)\n   *   .then((offer) => console.log(offer))\n   *   .catch((err) => console.error(err));\n   * ```\n   */\n  async getWinningBid(listingId) {\n    await this.validateListing(BigNumber.from(listingId));\n    const offers = await this.contractWrapper.read(\"winningBid\", [listingId]);\n    if (offers.offeror === constants.AddressZero) {\n      return undefined;\n    }\n    return await mapOffer(this.contractWrapper.getProvider(), BigNumber.from(listingId), offers);\n  }\n\n  /**\n   * Get Auction Winner\n   *\n   * @remarks Get the winner of the auction after an auction ends.\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the auction that closed\n   * const listingId = 0;\n   *\n   * contract.auction.\n   *   .getWinner(listingId)\n   *   .then((auctionWinner) => console.log(auctionWinner))\n   *   .catch((err) => console.error(err));\n   * ```\n   */\n  async getWinner(listingId) {\n    const listing = await this.validateListing(BigNumber.from(listingId));\n    const offers = await this.contractWrapper.read(\"winningBid\", [listingId]);\n    const now = BigNumber.from(Math.floor(Date.now() / 1000));\n    const endTime = BigNumber.from(listing.endTimeInEpochSeconds);\n\n    // if we have a winner in the map and the current time is past the endtime of the auction return the address of the winner\n    if (now.gt(endTime) && offers.offeror !== constants.AddressZero) {\n      return offers.offeror;\n    }\n    // otherwise fall back to query filter things\n\n    // TODO this should be via indexer or direct contract call\n    const contractEvents = new ContractEvents(this.contractWrapper);\n    const closedAuctions = await contractEvents.getEvents(\"AuctionClosed\");\n    const auction = closedAuctions.find(a => a.data.listingId.eq(BigNumber.from(listingId)));\n    if (!auction) {\n      throw new Error(\"Could not find auction with listingId \".concat(listingId, \" in closed auctions\"));\n    }\n    return auction.data.winningBidder;\n  }\n  /**\n   * Get the buffer in basis points between offers\n   */\n  async getBidBufferBps() {\n    return this.contractWrapper.read(\"bidBufferBps\", []);\n  }\n\n  /**\n   * returns the minimum bid a user can place to outbid the previous highest bid\n   * @param listingId - the listing id of the auction\n   */\n  async getMinimumNextBid(listingId) {\n    // we can fetch all of these at the same time using promise.all\n    const [currentBidBufferBps, winningBid, listing] = await Promise.all([this.getBidBufferBps(), this.getWinningBid(listingId), await this.validateListing(BigNumber.from(listingId))]);\n    const currentBidOrReservePrice = winningBid ?\n    // if there is a winning bid use the value of it\n    winningBid.currencyValue.value :\n    // if there is no winning bid use the reserve price\n    listing.reservePrice;\n    const minimumNextBid = currentBidOrReservePrice.add(\n    // the addition of the current bid and the buffer\n    // (have to divide by 10000 to get the fraction of the buffer (since it's in basis points))\n    currentBidOrReservePrice.mul(currentBidBufferBps).div(10000));\n\n    // it's more useful to return a currency value here\n    return fetchCurrencyValue(this.contractWrapper.getProvider(), listing.currencyContractAddress, minimumNextBid);\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  /**\n   * Throws error if listing could not be found\n   *\n   * @param listingId - Listing to check for\n   */\n  async validateListing(listingId) {\n    try {\n      return await this.getListing(listingId);\n    } catch (err) {\n      console.error(\"Error getting the listing with id \".concat(listingId));\n      throw err;\n    }\n  }\n\n  /**\n   * Helper method maps the auction listing to the auction listing interface.\n   *\n   * @internal\n   * @param listing - The listing to map, as returned from the contract.\n   * @returns - The mapped interface.\n   */\n  async mapListing(listing) {\n    return {\n      assetContractAddress: listing.assetContract,\n      buyoutPrice: BigNumber.from(listing.buyoutPricePerToken),\n      currencyContractAddress: listing.currency,\n      buyoutCurrencyValuePerToken: await fetchCurrencyValue(this.contractWrapper.getProvider(), listing.currency, listing.buyoutPricePerToken),\n      id: listing.listingId.toString(),\n      tokenId: listing.tokenId,\n      quantity: listing.quantity,\n      startTimeInEpochSeconds: listing.startTime,\n      asset: await fetchTokenMetadataForContract(listing.assetContract, this.contractWrapper.getProvider(), listing.tokenId, this.storage),\n      reservePriceCurrencyValuePerToken: await fetchCurrencyValue(this.contractWrapper.getProvider(), listing.currency, listing.reservePricePerToken),\n      reservePrice: BigNumber.from(listing.reservePricePerToken),\n      endTimeInEpochSeconds: listing.endTime,\n      sellerAddress: listing.tokenOwner,\n      type: ListingType.Auction\n    };\n  }\n}\nexport { ListingType as L, MarketplaceDirect as M, MarketplaceAuction as a };","map":{"version":3,"names":["Erc1155Abi","ERC165Abi","Erc721Abi","constants","BigNumber","utils","Contract","invariant","bx","ListingNotFoundError","by","WrongListingTypeError","cL","resolveAddress","dE","mapOffer","dx","buildTransactionFunction","bc","fetchCurrencyValue","dF","fetchTokenMetadataForContract","dG","isTokenApprovedForTransfer","cU","InterfaceId_IERC721","cV","InterfaceId_IERC1155","dH","validateNewListingParam","dI","handleTokenApproval","ba","normalizePriceValue","aW","Transaction","b9","cleanCurrencyAddress","b8","isNativeToken","bd","setErc20Allowance","ag","ContractEncoder","aR","ContractEvents","bb","fetchCurrencyMetadata","dJ","isWinningBid","bv","AuctionAlreadyStartedError","bB","AuctionHasNotEndedError","ListingType","MarketplaceDirect","constructor","contractWrapper","storage","_defineProperty","listing","resolvedAssetAddress","assetContractAddress","resolvedCurrencyAddress","currencyContractAddress","getAddress","tokenId","getSignerAddress","normalizedPricePerToken","getProvider","buyoutPricePerToken","listingStartTime","Math","floor","startTimestamp","getTime","block","getBlock","blockTime","timestamp","fromContractWrapper","method","args","assetContract","currencyToAccept","listingType","Direct","quantityToList","quantity","reservePricePerToken","secondsUntilEndTime","listingDurationInSeconds","startTime","from","parse","receipt","event","parseLogs","logs","id","listingId","listings","data","Promise","all","map","tx","createListing","prepare","encode","events","quantityDesired","pricePerToken","expirationDate","Error","normalizedPrice","getListing","err","console","error","concat","value","mul","overrides","getCallOverrides","expirationTimestamp","MaxUint256","addressOfOfferor","validateListing","resolvedAddress","offer","read","currency","receiver","valid","isStillValidListing","buyFor","buyoutPrice","startTimeInSeconds","secondsUntilEnd","address","AddressZero","toString","mapListing","getActiveOffer","isAddress","offers","offeror","undefined","buyoutCurrencyValuePerToken","asset","endTime","sellerAddress","tokenOwner","type","approved","provider","erc165","isERC721","supportsInterface","isERC1155","_owner","owner","ownerOf","e","toLowerCase","balance","balanceOf","gte","MarketplaceAuction","normalizedReservePrice","Auction","currencyMetadata","makeBid","formatUnits","decimals","eq","bidBuffer","winningBid","getWinningBid","isWinner","tokenPrice","reservePrice","now","Date","startTimeInEpochSeconds","gt","closeFor","message","includes","endTimeInEpochSeconds","closeForSeller","encoder","closeForBuyer","buyerAddress","getWinner","contractEvents","closedAuctions","getEvents","auction","find","a","winningBidder","getBidBufferBps","getMinimumNextBid","currentBidBufferBps","currentBidOrReservePrice","currencyValue","minimumNextBid","add","div","reservePriceCurrencyValuePerToken","L","M"],"sources":["C:/Misc/Documents/Career/FinTech/BlockChain/FrontEnd/buildspace-dao-starter/node_modules/@thirdweb-dev/sdk/dist/marketplace-auction-f78a3c87.browser.esm.js"],"sourcesContent":["import Erc1155Abi from '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport ERC165Abi from '@thirdweb-dev/contracts-js/dist/abis/IERC165.json';\nimport Erc721Abi from '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport { constants, BigNumber, utils, Contract } from 'ethers';\nimport invariant from 'tiny-invariant';\nimport { bx as ListingNotFoundError, by as WrongListingTypeError, cL as resolveAddress, dE as mapOffer, dx as buildTransactionFunction, bc as fetchCurrencyValue, dF as fetchTokenMetadataForContract, dG as isTokenApprovedForTransfer, cU as InterfaceId_IERC721, cV as InterfaceId_IERC1155, dH as validateNewListingParam, dI as handleTokenApproval, ba as normalizePriceValue, aW as Transaction, b9 as cleanCurrencyAddress, b8 as isNativeToken, bd as setErc20Allowance, ag as ContractEncoder, aR as ContractEvents, bb as fetchCurrencyMetadata, dJ as isWinningBid, bv as AuctionAlreadyStartedError, bB as AuctionHasNotEndedError } from './contract-publisher-1ff1fe07.browser.esm.js';\n\nlet ListingType = /*#__PURE__*/function (ListingType) {\n  ListingType[ListingType[\"Direct\"] = 0] = \"Direct\";\n  ListingType[ListingType[\"Auction\"] = 1] = \"Auction\";\n  return ListingType;\n}({});\n\n/**\n * Handles direct listings\n * @public\n */\nclass MarketplaceDirect {\n  constructor(contractWrapper, storage) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get a direct listing by id\n   *\n   * @param listingId - the listing id\n   * @returns the Direct listing object\n   */\n  async getListing(listingId) {\n    const listing = await this.contractWrapper.read(\"listings\", [listingId]);\n    if (listing.assetContract === constants.AddressZero) {\n      throw new ListingNotFoundError(this.getAddress(), listingId.toString());\n    }\n    if (listing.listingType !== ListingType.Direct) {\n      throw new WrongListingTypeError(this.getAddress(), listingId.toString(), \"Auction\", \"Direct\");\n    }\n    return await this.mapListing(listing);\n  }\n\n  /**\n   * Get the active offer on a listing\n   * @param listingId - the listing id\n   * @param address - the address that made the offer\n   */\n  async getActiveOffer(listingId, address) {\n    await this.validateListing(BigNumber.from(listingId));\n    invariant(utils.isAddress(address), \"Address must be a valid address\");\n    const offers = await this.contractWrapper.read(\"offers\", [listingId, await resolveAddress(address)]);\n    if (offers.offeror === constants.AddressZero) {\n      return undefined;\n    }\n    return await mapOffer(this.contractWrapper.getProvider(), BigNumber.from(listingId), offers);\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Create Direct Listing\n   *\n   * @remarks Create a new listing on the marketplace where people can buy an asset directly.\n   *\n   * @example\n   * ```javascript\n   * // Data of the listing you want to create\n   * const listing = {\n   *   // address of the contract the asset you want to list is on\n   *   assetContractAddress: \"0x...\",\n   *   // token ID of the asset you want to list\n   *   tokenId: \"0\",\n   *   // when should the listing open up for offers\n   *   startTimestamp: new Date(),\n   *   // how long the listing will be open for\n   *   listingDurationInSeconds: 86400,\n   *   // how many of the asset you want to list\n   *   quantity: 1,\n   *   // address of the currency contract that will be used to pay for the listing\n   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n   *   // how much the asset will be sold for\n   *   buyoutPricePerToken: \"1.5\",\n   * }\n   *\n   * const tx = await contract.direct.createListing(listing);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const id = tx.id; // the id of the newly created listing\n   * ```\n   */\n  createListing = /* @__PURE__ */buildTransactionFunction(async listing => {\n    validateNewListingParam(listing);\n    const resolvedAssetAddress = await resolveAddress(listing.assetContractAddress);\n    const resolvedCurrencyAddress = await resolveAddress(listing.currencyContractAddress);\n    await handleTokenApproval(this.contractWrapper, this.getAddress(), resolvedAssetAddress, listing.tokenId, await this.contractWrapper.getSignerAddress());\n    const normalizedPricePerToken = await normalizePriceValue(this.contractWrapper.getProvider(), listing.buyoutPricePerToken, resolvedCurrencyAddress);\n    let listingStartTime = Math.floor(listing.startTimestamp.getTime() / 1000);\n    const block = await this.contractWrapper.getProvider().getBlock(\"latest\");\n    const blockTime = block.timestamp;\n    if (listingStartTime < blockTime) {\n      listingStartTime = blockTime;\n    }\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"createListing\",\n      args: [{\n        assetContract: resolvedAssetAddress,\n        tokenId: listing.tokenId,\n        buyoutPricePerToken: normalizedPricePerToken,\n        currencyToAccept: cleanCurrencyAddress(resolvedCurrencyAddress),\n        listingType: ListingType.Direct,\n        quantityToList: listing.quantity,\n        reservePricePerToken: normalizedPricePerToken,\n        secondsUntilEndTime: listing.listingDurationInSeconds,\n        startTime: BigNumber.from(listingStartTime)\n      }],\n      parse: receipt => {\n        const event = this.contractWrapper.parseLogs(\"ListingAdded\", receipt?.logs);\n        return {\n          id: event[0].args.listingId,\n          receipt\n        };\n      }\n    });\n  });\n\n  /**\n   * Create a batch of new listings\n   *\n   * @remarks Create a batch of new listings on the marketplace\n   *\n   * @example\n   * ```javascript\n   * const listings = [...];\n   * const tx = await contract.direct.createListingsBatch(listings);\n   * ```\n   */\n  createListingsBatch = /* @__PURE__ */buildTransactionFunction(async listings => {\n    const data = await Promise.all(listings.map(async listing => {\n      const tx = await this.createListing.prepare(listing);\n      return tx.encode();\n    }));\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"multicall\",\n      args: [data],\n      parse: receipt => {\n        const events = this.contractWrapper.parseLogs(\"ListingAdded\", receipt?.logs);\n        return events.map(event => {\n          return {\n            id: event.args.listingId,\n            receipt\n          };\n        });\n      }\n    });\n  });\n\n  /**\n   * Make an offer for a Direct Listing\n   *\n   * @remarks Make an offer on a direct listing\n   *\n   * @example\n   * ```javascript\n   * import { ChainId, NATIVE_TOKENS } from \"@thirdweb-dev/sdk\";\n   *\n   * // The listing ID of the asset you want to offer on\n   * const listingId = 0;\n   * // The price you are willing to offer per token\n   * const pricePerToken = 1;\n   * // The quantity of tokens you want to receive for this offer\n   * const quantity = 1;\n   * // The address of the currency you are making the offer in (must be ERC-20)\n   * const currencyContractAddress = NATIVE_TOKENS[ChainId.Rinkeby].wrapped.address\n   *\n   * await contract.direct.makeOffer(\n   *   listingId,\n   *   quantity,\n   *   currencyContractAddress,\n   *   pricePerToken\n   * );\n   * ```\n   */\n  makeOffer = /* @__PURE__ */buildTransactionFunction(async (listingId, quantityDesired, currencyContractAddress, pricePerToken, expirationDate) => {\n    if (isNativeToken(currencyContractAddress)) {\n      throw new Error(\"You must use the wrapped native token address when making an offer with a native token\");\n    }\n    const normalizedPrice = await normalizePriceValue(this.contractWrapper.getProvider(), pricePerToken, currencyContractAddress);\n    try {\n      await this.getListing(listingId);\n    } catch (err) {\n      console.error(\"Failed to get listing, err =\", err);\n      throw new Error(`Error getting the listing with id ${listingId}`);\n    }\n    const quantity = BigNumber.from(quantityDesired);\n    const value = BigNumber.from(normalizedPrice).mul(quantity);\n    const overrides = (await this.contractWrapper.getCallOverrides()) || {};\n    await setErc20Allowance(this.contractWrapper, value, currencyContractAddress, overrides);\n    let expirationTimestamp = constants.MaxUint256;\n    if (expirationDate) {\n      expirationTimestamp = BigNumber.from(Math.floor(expirationDate.getTime() / 1000));\n    }\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"offer\",\n      args: [listingId, quantityDesired, currencyContractAddress, normalizedPrice, expirationTimestamp],\n      overrides\n    });\n  });\n\n  /**\n   * Accept an offer on a direct listing\n   *\n   * @remarks Accept an offer on a direct listing\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the asset you want to bid on\n   * const listingId = 0;\n   * // The price you are willing to bid for a single token of the listing\n   * const offeror = \"0x...\";\n   *\n   * await contract.direct.acceptOffer(listingId, offeror);\n   * ```\n   */\n  acceptOffer = /* @__PURE__ */buildTransactionFunction(async (listingId, addressOfOfferor) => {\n    /**\n     * TODO:\n     * - Provide better error handling if offer is too low.\n     */\n    await this.validateListing(BigNumber.from(listingId));\n    const resolvedAddress = await resolveAddress(addressOfOfferor);\n    const offer = await this.contractWrapper.read(\"offers\", [listingId, resolvedAddress]);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"acceptOffer\",\n      args: [listingId, resolvedAddress, offer.currency, offer.pricePerToken]\n    });\n  });\n\n  /**\n   * Buy a Listing\n   *\n   * @remarks Buy a specific direct listing from the marketplace.\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the asset you want to buy\n   * const listingId = 0;\n   * // Quantity of the asset you want to buy\n   * const quantityDesired = 1;\n   *\n   * await contract.direct.buyoutListing(listingId, quantityDesired);\n   * ```\n   *\n   * @param listingId - The listing id to buy\n   * @param quantityDesired - the quantity to buy\n   * @param receiver - optional receiver of the bought listing if different from the connected wallet\n   */\n  buyoutListing = /* @__PURE__ */buildTransactionFunction(async (listingId, quantityDesired, receiver) => {\n    const listing = await this.validateListing(BigNumber.from(listingId));\n    const {\n      valid,\n      error\n    } = await this.isStillValidListing(listing, quantityDesired);\n    if (!valid) {\n      throw new Error(`Listing ${listingId} is no longer valid. ${error}`);\n    }\n    const buyFor = receiver ? receiver : await this.contractWrapper.getSignerAddress();\n    const quantity = BigNumber.from(quantityDesired);\n    const value = BigNumber.from(listing.buyoutPrice).mul(quantity);\n    const overrides = (await this.contractWrapper.getCallOverrides()) || {};\n    await setErc20Allowance(this.contractWrapper, value, listing.currencyContractAddress, overrides);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"buy\",\n      args: [listingId, buyFor, quantity, listing.currencyContractAddress, value],\n      overrides\n    });\n  });\n\n  /**\n   * Update a Direct listing with new metadata.\n   *\n   * Note: cannot update a listing with a new quantity of 0. Use `cancelDirectListing` to remove a listing instead.\n   *\n   * @param listing - the new listing information\n   */\n  updateListing = /* @__PURE__ */buildTransactionFunction(async listing => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"updateListing\",\n      args: [listing.id, listing.quantity, listing.buyoutPrice,\n      // reserve price, doesn't matter for direct listing\n      listing.buyoutPrice, await resolveAddress(listing.currencyContractAddress), listing.startTimeInSeconds, listing.secondsUntilEnd]\n    });\n  });\n\n  /**\n   * Cancel Direct Listing\n   *\n   * @remarks Cancel a direct listing on the marketplace\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the direct listing you want to cancel\n   * const listingId = \"0\";\n   *\n   * await contract.direct.cancelListing(listingId);\n   * ```\n   */\n  cancelListing = /* @__PURE__ */buildTransactionFunction(async listingId => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"cancelDirectListing\",\n      args: [listingId]\n    });\n  });\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  /**\n   * Throws error if listing could not be found\n   *\n   * @param listingId - Listing to check for\n   */\n  async validateListing(listingId) {\n    try {\n      return await this.getListing(listingId);\n    } catch (err) {\n      console.error(`Error getting the listing with id ${listingId}`);\n      throw err;\n    }\n  }\n\n  /**\n   * Helper method maps the auction listing to the direct listing interface.\n   *\n   * @internal\n   * @param listing - The listing to map, as returned from the contract.\n   * @returns - The mapped interface.\n   */\n  async mapListing(listing) {\n    return {\n      assetContractAddress: listing.assetContract,\n      buyoutPrice: BigNumber.from(listing.buyoutPricePerToken),\n      currencyContractAddress: listing.currency,\n      buyoutCurrencyValuePerToken: await fetchCurrencyValue(this.contractWrapper.getProvider(), listing.currency, listing.buyoutPricePerToken),\n      id: listing.listingId.toString(),\n      tokenId: listing.tokenId,\n      quantity: listing.quantity,\n      startTimeInSeconds: listing.startTime,\n      asset: await fetchTokenMetadataForContract(listing.assetContract, this.contractWrapper.getProvider(), listing.tokenId, this.storage),\n      secondsUntilEnd: listing.endTime,\n      sellerAddress: listing.tokenOwner,\n      type: ListingType.Direct\n    };\n  }\n\n  /**\n   * Use this method to check if a direct listing is still valid.\n   *\n   * Ways a direct listing can become invalid:\n   * 1. The asset holder transferred the asset to another wallet\n   * 2. The asset holder burned the asset\n   * 3. The asset holder removed the approval on the marketplace\n   *\n   * @internal\n   * @param listing - The listing to check.\n   * @returns - True if the listing is valid, false otherwise.\n   */\n  async isStillValidListing(listing, quantity) {\n    const approved = await isTokenApprovedForTransfer(this.contractWrapper.getProvider(), this.getAddress(), listing.assetContractAddress, listing.tokenId, listing.sellerAddress);\n    if (!approved) {\n      return {\n        valid: false,\n        error: `Token '${listing.tokenId}' from contract '${listing.assetContractAddress}' is not approved for transfer`\n      };\n    }\n    const provider = this.contractWrapper.getProvider();\n    const erc165 = new Contract(listing.assetContractAddress, ERC165Abi, provider);\n    const isERC721 = await erc165.supportsInterface(InterfaceId_IERC721);\n    const isERC1155 = await erc165.supportsInterface(InterfaceId_IERC1155);\n    if (isERC721) {\n      const asset = new Contract(listing.assetContractAddress, Erc721Abi, provider);\n\n      // Handle reverts in case of non-existent tokens\n      let owner;\n      try {\n        owner = await asset.ownerOf(listing.tokenId);\n      } catch (e) {}\n      const valid = owner?.toLowerCase() === listing.sellerAddress.toLowerCase();\n      return {\n        valid,\n        error: valid ? undefined : `Seller is not the owner of Token '${listing.tokenId}' from contract '${listing.assetContractAddress} anymore'`\n      };\n    } else if (isERC1155) {\n      const asset = new Contract(listing.assetContractAddress, Erc1155Abi, provider);\n      const balance = await asset.balanceOf(listing.sellerAddress, listing.tokenId);\n      const valid = balance.gte(quantity || listing.quantity);\n      return {\n        valid,\n        error: valid ? undefined : `Seller does not have enough balance of Token '${listing.tokenId}' from contract '${listing.assetContractAddress} to fulfill the listing`\n      };\n    } else {\n      return {\n        valid: false,\n        error: \"Contract does not implement ERC 1155 or ERC 721.\"\n      };\n    }\n  }\n}\n\n/**\n * Handles auction listings\n * @public\n */\nclass MarketplaceAuction {\n  constructor(contractWrapper, storage) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.encoder = new ContractEncoder(contractWrapper);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get an Auction listing by id\n   *\n   * @param listingId - the listing Id\n   * @returns the Auction listing object\n   */\n  async getListing(listingId) {\n    const listing = await this.contractWrapper.read(\"listings\", [listingId]);\n    if (listing.listingId.toString() !== listingId.toString()) {\n      throw new ListingNotFoundError(this.getAddress(), listingId.toString());\n    }\n    if (listing.listingType !== ListingType.Auction) {\n      throw new WrongListingTypeError(this.getAddress(), listingId.toString(), \"Direct\", \"Auction\");\n    }\n    return await this.mapListing(listing);\n  }\n\n  /**\n   * Get Highest Bid\n   *\n   * @remarks Get the current highest bid of an active auction.\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the auction that closed\n   * const listingId = 0;\n   *\n   * contract.auction.\n   *   .getWinningBid(listingId)\n   *   .then((offer) => console.log(offer))\n   *   .catch((err) => console.error(err));\n   * ```\n   */\n  async getWinningBid(listingId) {\n    await this.validateListing(BigNumber.from(listingId));\n    const offers = await this.contractWrapper.read(\"winningBid\", [listingId]);\n    if (offers.offeror === constants.AddressZero) {\n      return undefined;\n    }\n    return await mapOffer(this.contractWrapper.getProvider(), BigNumber.from(listingId), offers);\n  }\n\n  /**\n   * Get Auction Winner\n   *\n   * @remarks Get the winner of the auction after an auction ends.\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the auction that closed\n   * const listingId = 0;\n   *\n   * contract.auction.\n   *   .getWinner(listingId)\n   *   .then((auctionWinner) => console.log(auctionWinner))\n   *   .catch((err) => console.error(err));\n   * ```\n   */\n  async getWinner(listingId) {\n    const listing = await this.validateListing(BigNumber.from(listingId));\n    const offers = await this.contractWrapper.read(\"winningBid\", [listingId]);\n    const now = BigNumber.from(Math.floor(Date.now() / 1000));\n    const endTime = BigNumber.from(listing.endTimeInEpochSeconds);\n\n    // if we have a winner in the map and the current time is past the endtime of the auction return the address of the winner\n    if (now.gt(endTime) && offers.offeror !== constants.AddressZero) {\n      return offers.offeror;\n    }\n    // otherwise fall back to query filter things\n\n    // TODO this should be via indexer or direct contract call\n    const contractEvents = new ContractEvents(this.contractWrapper);\n    const closedAuctions = await contractEvents.getEvents(\"AuctionClosed\");\n    const auction = closedAuctions.find(a => a.data.listingId.eq(BigNumber.from(listingId)));\n    if (!auction) {\n      throw new Error(`Could not find auction with listingId ${listingId} in closed auctions`);\n    }\n    return auction.data.winningBidder;\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Create Auction\n   *\n   * @remarks Create a new auction where people can bid on an asset.\n   *\n   * @example\n   * ```javascript\n   * // Data of the auction you want to create\n   * const auction = {\n   *   // address of the contract the asset you want to list is on\n   *   assetContractAddress: \"0x...\",\n   *   // token ID of the asset you want to list\n   *   tokenId: \"0\",\n   *  // when should the listing open up for offers\n   *   startTimestamp: new Date(),\n   *   // how long the listing will be open for\n   *   listingDurationInSeconds: 86400,\n   *   // how many of the asset you want to list\n   *   quantity: 1,\n   *   // address of the currency contract that will be used to pay for the listing\n   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n   *   // how much people would have to bid to instantly buy the asset\n   *   buyoutPricePerToken: \"10\",\n   *   // the minimum bid that will be accepted for the token\n   *   reservePricePerToken: \"1.5\",\n   * }\n   *\n   * const tx = await contract.auction.createListing(auction);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const id = tx.id; // the id of the newly created listing\n   * ```\n   */\n  createListing = /* @__PURE__ */buildTransactionFunction(async listing => {\n    validateNewListingParam(listing);\n    const resolvedAssetAddress = await resolveAddress(listing.assetContractAddress);\n    const resolvedCurrencyAddress = await resolveAddress(listing.currencyContractAddress);\n    await handleTokenApproval(this.contractWrapper, this.getAddress(), resolvedAssetAddress, listing.tokenId, await this.contractWrapper.getSignerAddress());\n    const normalizedPricePerToken = await normalizePriceValue(this.contractWrapper.getProvider(), listing.buyoutPricePerToken, resolvedCurrencyAddress);\n    const normalizedReservePrice = await normalizePriceValue(this.contractWrapper.getProvider(), listing.reservePricePerToken, resolvedCurrencyAddress);\n    let listingStartTime = Math.floor(listing.startTimestamp.getTime() / 1000);\n    const block = await this.contractWrapper.getProvider().getBlock(\"latest\");\n    const blockTime = block.timestamp;\n    if (listingStartTime < blockTime) {\n      listingStartTime = blockTime;\n    }\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"createListing\",\n      args: [{\n        assetContract: resolvedAssetAddress,\n        tokenId: listing.tokenId,\n        buyoutPricePerToken: normalizedPricePerToken,\n        currencyToAccept: cleanCurrencyAddress(resolvedCurrencyAddress),\n        listingType: ListingType.Auction,\n        quantityToList: listing.quantity,\n        reservePricePerToken: normalizedReservePrice,\n        secondsUntilEndTime: listing.listingDurationInSeconds,\n        startTime: BigNumber.from(listingStartTime)\n      }],\n      parse: receipt => {\n        const event = this.contractWrapper.parseLogs(\"ListingAdded\", receipt?.logs);\n        return {\n          id: event[0].args.listingId,\n          receipt\n        };\n      }\n    });\n  });\n\n  /**\n   * Create a batch of new auctions\n   *\n   * @remarks Create a batch of new auctions on the marketplace\n   *\n   * @example\n   * ```javascript\n   * const auctions = [...];\n   * const tx = await contract.auction.createListingsBatch(auctions);\n   * ```\n   */\n  createListingsBatch = /* @__PURE__ */buildTransactionFunction(async listings => {\n    const data = await Promise.all(listings.map(async listing => {\n      const tx = await this.createListing.prepare(listing);\n      return tx.encode();\n    }));\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"multicall\",\n      args: [data],\n      parse: receipt => {\n        const events = this.contractWrapper.parseLogs(\"ListingAdded\", receipt?.logs);\n        return events.map(event => {\n          return {\n            id: event.args.listingId,\n            receipt\n          };\n        });\n      }\n    });\n  });\n\n  /**\n   * Buyout Auction\n   *\n   * @remarks Buy a specific direct listing from the marketplace.\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the asset you want to buy\n   * const listingId = 0;\n   *\n   * await contract.auction.buyoutListing(listingId);\n   * ```\n   */\n  buyoutListing = /* @__PURE__ */buildTransactionFunction(async listingId => {\n    const listing = await this.validateListing(BigNumber.from(listingId));\n    const currencyMetadata = await fetchCurrencyMetadata(this.contractWrapper.getProvider(), listing.currencyContractAddress);\n    return this.makeBid.prepare(listingId, utils.formatUnits(listing.buyoutPrice, currencyMetadata.decimals));\n  });\n\n  /**\n   * Bid On Auction\n   *\n   * @remarks Make a bid on an auction listing\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the asset you want to bid on\n   * const listingId = 0;\n   * // The price you are willing to bid for a single token of the listing\n   * const pricePerToken = 1;\n   *\n   * await contract.auction.makeBid(listingId, pricePerToken);\n   * ```\n   */\n  makeBid = /* @__PURE__ */buildTransactionFunction(async (listingId, pricePerToken) => {\n    const listing = await this.validateListing(BigNumber.from(listingId));\n    const normalizedPrice = await normalizePriceValue(this.contractWrapper.getProvider(), pricePerToken, listing.currencyContractAddress);\n    if (normalizedPrice.eq(BigNumber.from(0))) {\n      throw new Error(\"Cannot make a bid with 0 value\");\n    }\n    const bidBuffer = await this.contractWrapper.read(\"bidBufferBps\", []);\n    const winningBid = await this.getWinningBid(listingId);\n    if (winningBid) {\n      const isWinner = isWinningBid(winningBid.pricePerToken, normalizedPrice, bidBuffer);\n      invariant(isWinner, \"Bid price is too low based on the current winning bid and the bid buffer\");\n    } else {\n      const tokenPrice = normalizedPrice;\n      const reservePrice = BigNumber.from(listing.reservePrice);\n      invariant(tokenPrice.gte(reservePrice), \"Bid price is too low based on reserve price\");\n    }\n    const quantity = BigNumber.from(listing.quantity);\n    const value = normalizedPrice.mul(quantity);\n    const overrides = (await this.contractWrapper.getCallOverrides()) || {};\n    await setErc20Allowance(this.contractWrapper, value, listing.currencyContractAddress, overrides);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"offer\",\n      args: [listingId, listing.quantity, listing.currencyContractAddress, normalizedPrice, constants.MaxUint256],\n      overrides\n    });\n  });\n\n  /**\n   * Cancel Auction Listing\n   *\n   * @remarks Cancel an auction listing on the marketplace\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the auction listing you want to cancel\n   * const listingId = \"0\";\n   *\n   * await contract.auction.cancelListing(listingId);\n   * ```\n   */\n  cancelListing = /* @__PURE__ */buildTransactionFunction(async listingId => {\n    const listing = await this.validateListing(BigNumber.from(listingId));\n    const now = BigNumber.from(Math.floor(Date.now() / 1000));\n    const startTime = BigNumber.from(listing.startTimeInEpochSeconds);\n    const offers = await this.contractWrapper.read(\"winningBid\", [listingId]);\n    if (now.gt(startTime) && offers.offeror !== constants.AddressZero) {\n      throw new AuctionAlreadyStartedError(listingId.toString());\n    }\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"closeAuction\",\n      args: [BigNumber.from(listingId), await this.contractWrapper.getSignerAddress()]\n    });\n  });\n\n  /**\n   * Close the Auction for the buyer or the seller\n   *\n   * @remarks Closes the Auction and executes the sale for the buyer or the seller.\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the auction listing you want to close\n   * const listingId = \"0\";\n   * await contract.auction.closeListing(listingId);\n   * ```\n   *\n   * @param listingId - the auction  listing ud to close\n   * @param closeFor - optionally pass the auction creator address or winning bid offeror address to close the auction on their behalf\n   */\n  closeListing = /* @__PURE__ */buildTransactionFunction(async (listingId, closeFor) => {\n    if (!closeFor) {\n      closeFor = await this.contractWrapper.getSignerAddress();\n    }\n    const listing = await this.validateListing(BigNumber.from(listingId));\n    try {\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"closeAuction\",\n        args: [BigNumber.from(listingId), closeFor]\n      });\n    } catch (err) {\n      if (err.message.includes(\"cannot close auction before it has ended\")) {\n        throw new AuctionHasNotEndedError(listingId.toString(), listing.endTimeInEpochSeconds.toString());\n      } else {\n        throw err;\n      }\n    }\n  });\n\n  /**\n   * Execute the Auction Sale\n   *\n   * @remarks Closes the Auction and executes the sale for both parties.\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the auction listing you want to close\n   * const listingId = \"0\";\n   * await contract.auction.executeSale(listingId);\n   * ```\n   *\n   * @param listingId - the auction  listing ud to close\n   */\n  executeSale = /* @__PURE__ */buildTransactionFunction(async listingId => {\n    const listing = await this.validateListing(BigNumber.from(listingId));\n    try {\n      const winningBid = await this.getWinningBid(listingId);\n      invariant(winningBid, \"No winning bid found\");\n      const closeForSeller = this.encoder.encode(\"closeAuction\", [listingId, listing.sellerAddress]);\n      const closeForBuyer = this.encoder.encode(\"closeAuction\", [listingId, winningBid.buyerAddress]);\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"multicall\",\n        args: [closeForSeller, closeForBuyer]\n      });\n    } catch (err) {\n      if (err.message.includes(\"cannot close auction before it has ended\")) {\n        throw new AuctionHasNotEndedError(listingId.toString(), listing.endTimeInEpochSeconds.toString());\n      } else {\n        throw err;\n      }\n    }\n  });\n\n  /**\n   * Update an Auction listing with new metadata\n   * @param listing - the listing id to update\n   */\n  updateListing = /* @__PURE__ */buildTransactionFunction(async listing => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"updateListing\",\n      args: [listing.id, listing.quantity, listing.reservePrice, listing.buyoutPrice, listing.currencyContractAddress, listing.startTimeInEpochSeconds, listing.endTimeInEpochSeconds]\n    });\n  });\n\n  /**\n   * Get the buffer in basis points between offers\n   */\n  async getBidBufferBps() {\n    return this.contractWrapper.read(\"bidBufferBps\", []);\n  }\n\n  /**\n   * returns the minimum bid a user can place to outbid the previous highest bid\n   * @param listingId - the listing id of the auction\n   */\n  async getMinimumNextBid(listingId) {\n    // we can fetch all of these at the same time using promise.all\n    const [currentBidBufferBps, winningBid, listing] = await Promise.all([this.getBidBufferBps(), this.getWinningBid(listingId), await this.validateListing(BigNumber.from(listingId))]);\n    const currentBidOrReservePrice = winningBid ?\n    // if there is a winning bid use the value of it\n    winningBid.currencyValue.value :\n    // if there is no winning bid use the reserve price\n    listing.reservePrice;\n    const minimumNextBid = currentBidOrReservePrice.add(\n    // the addition of the current bid and the buffer\n    // (have to divide by 10000 to get the fraction of the buffer (since it's in basis points))\n    currentBidOrReservePrice.mul(currentBidBufferBps).div(10000));\n\n    // it's more useful to return a currency value here\n    return fetchCurrencyValue(this.contractWrapper.getProvider(), listing.currencyContractAddress, minimumNextBid);\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  /**\n   * Throws error if listing could not be found\n   *\n   * @param listingId - Listing to check for\n   */\n  async validateListing(listingId) {\n    try {\n      return await this.getListing(listingId);\n    } catch (err) {\n      console.error(`Error getting the listing with id ${listingId}`);\n      throw err;\n    }\n  }\n\n  /**\n   * Helper method maps the auction listing to the auction listing interface.\n   *\n   * @internal\n   * @param listing - The listing to map, as returned from the contract.\n   * @returns - The mapped interface.\n   */\n  async mapListing(listing) {\n    return {\n      assetContractAddress: listing.assetContract,\n      buyoutPrice: BigNumber.from(listing.buyoutPricePerToken),\n      currencyContractAddress: listing.currency,\n      buyoutCurrencyValuePerToken: await fetchCurrencyValue(this.contractWrapper.getProvider(), listing.currency, listing.buyoutPricePerToken),\n      id: listing.listingId.toString(),\n      tokenId: listing.tokenId,\n      quantity: listing.quantity,\n      startTimeInEpochSeconds: listing.startTime,\n      asset: await fetchTokenMetadataForContract(listing.assetContract, this.contractWrapper.getProvider(), listing.tokenId, this.storage),\n      reservePriceCurrencyValuePerToken: await fetchCurrencyValue(this.contractWrapper.getProvider(), listing.currency, listing.reservePricePerToken),\n      reservePrice: BigNumber.from(listing.reservePricePerToken),\n      endTimeInEpochSeconds: listing.endTime,\n      sellerAddress: listing.tokenOwner,\n      type: ListingType.Auction\n    };\n  }\n}\n\nexport { ListingType as L, MarketplaceDirect as M, MarketplaceAuction as a };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}