{"ast":null,"code":"import _defineProperty from \"C:/Misc/Documents/Career/FinTech/BlockChain/FrontEnd/buildspace-dao-starter/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport ERC20Abi from '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport { BigNumber, utils, Contract } from 'ethers';\nimport { dw as ContractWrapper, e as AbiSchema, ah as ContractMetadata, e3 as VoteContractSchema, b0 as ContractAppURI, ag as ContractEncoder, aQ as GasCostEstimator, aR as ContractEvents, aS as ContractInterceptor, cL as resolveAddress, bc as fetchCurrencyValue, bb as fetchCurrencyMetadata, dx as buildTransactionFunction, aW as Transaction } from './contract-publisher-1ff1fe07.browser.esm.js';\nimport { V as VoteType } from './Vote-3b66775c.browser.esm.js';\nimport './QueryParams-39bcad7a.browser.esm.js';\nimport 'bn.js';\nimport 'zod';\nimport 'tiny-invariant';\nimport 'uuid';\nimport '@thirdweb-dev/storage';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC165.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport 'fast-deep-equal';\nimport 'merkletreejs';\nimport '@thirdweb-dev/contracts-js/dist/abis/IThirdwebContract.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedRevealDeprecated.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ContractPublisher.json';\nimport '@thirdweb-dev/chains';\nimport 'bs58';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryLogic.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Permit.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721AQueryableUpgradeable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/SharedMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/zora_IERC721Drop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILoyaltyCard.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/INFTMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountFactoryCore.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccount.json';\nimport 'ethers/lib/utils';\nimport '@thirdweb-dev/contracts-js/dist/abis/Forwarder.json';\nimport 'cross-fetch';\nimport 'eventemitter3';\n\n/**\n * Create a decentralized organization for token holders to vote on proposals.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"vote\");\n * ```\n *\n * @public\n */\nclass Vote {\n  /**\n   * @internal\n   */\n\n  get chainId() {\n    return this._chainId;\n  }\n  constructor(network, address, storage) {\n    /** ******************************\n     * WRITE FUNCTIONS\n     *******************************/\n    /**\n     * Create Proposal\n     *\n     * @remarks Create a new proposal for token holders to vote on.\n     *\n     * @example\n     * ```javascript\n     * // The description of the proposal you want to pass\n     * const description = \"This is a great proposal - vote for it!\"\n     * // You can (optionally) pass in contract calls that will get executed when the proposal is executed.\n     * const executions = [\n     *   {\n     *     // The contract you want to make a call to\n     *     toAddress: \"0x...\",\n     *     // The amount of the native currency to send in this transaction\n     *     nativeTokenValue: 0,\n     *     // Transaction data that will be executed when the proposal is executed\n     *     // This is an example transfer transaction with a token contract (which you would need to set up in code)\n     *     transactionData: tokenContract.encoder.encode(\n     *       \"transfer\", [\n     *         fromAddress,\n     *         amount,\n     *       ]\n     *     ),\n     *   }\n     * ]\n     *\n     * const proposal = await contract.propose(description, executions);\n     * ```\n     *\n     * @param description - The description of the proposal.\n     * @param executions - A set of executable transactions that will be run if the proposal is passed and executed.\n     * @returns - The id of the created proposal and the transaction receipt.\n     */\n    _defineProperty(this, \"propose\", /* @__PURE__ */buildTransactionFunction(async (description, executions) => {\n      if (!executions) {\n        executions = [{\n          toAddress: this.contractWrapper.address,\n          nativeTokenValue: 0,\n          transactionData: \"0x\"\n        }];\n      }\n      const tos = executions.map(p => p.toAddress);\n      const values = executions.map(p => p.nativeTokenValue);\n      const datas = executions.map(p => p.transactionData);\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"propose\",\n        args: [tos, values, datas, description],\n        parse: receipt => {\n          const event = this.contractWrapper.parseLogs(\"ProposalCreated\", receipt === null || receipt === void 0 ? void 0 : receipt.logs);\n          return {\n            id: event[0].args.proposalId,\n            receipt\n          };\n        }\n      });\n    }));\n    /**\n     * Vote\n     *\n     * @remarks Vote on an active proposal\n     *\n     * @example\n     * ```javascript\n     * // The proposal ID of the proposal you want to vote on\n     * const proposalId = \"0\";\n     * // The vote type you want to cast, can be VoteType.Against, VoteType.For, or VoteType.Abstain\n     * const voteType = VoteType.For;\n     * // The (optional) reason for the vote\n     * const reason = \"I like this proposal!\";\n     *\n     * await contract.vote(proposalId, voteType, reason);\n     * ```\n     * @param proposalId - The proposal to cast a vote on.\n     * @param voteType - The position the voter is taking on their vote.\n     * @param reason - (optional) The reason for the vote.\n     */\n    _defineProperty(this, \"vote\", /* @__PURE__ */buildTransactionFunction((() => {\n      var _this = this;\n      return async function (proposalId, voteType) {\n        let reason = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"\";\n        await _this.ensureExists(proposalId);\n        return Transaction.fromContractWrapper({\n          contractWrapper: _this.contractWrapper,\n          method: \"castVoteWithReason\",\n          args: [proposalId, voteType, reason]\n        });\n      };\n    })()));\n    /**\n     * Execute Proposal\n     *\n     * @remarks Execute the related transactions for a proposal if the proposal succeeded.\n     *\n     * @example\n     * ```javascript\n     * // The proposal ID of the proposal you want to execute\n     * const proposalId = \"0\"\n     * await contract.execute(proposalId);\n     * ```\n     *\n     * @param proposalId - The proposal id to execute.\n     */\n    _defineProperty(this, \"execute\", /* @__PURE__ */buildTransactionFunction(async proposalId => {\n      await this.ensureExists(proposalId);\n      const proposal = await this.get(proposalId);\n      const tos = proposal.executions.map(p => p.toAddress);\n      const values = proposal.executions.map(p => p.nativeTokenValue);\n      const datas = proposal.executions.map(p => p.transactionData);\n      const descriptionHash = utils.id(proposal.description);\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"execute\",\n        args: [tos, values, datas, descriptionHash]\n      });\n    }));\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options, storage);\n    this._chainId = chainId;\n    this.abi = AbiSchema.parse(abi || []);\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.metadata = new ContractMetadata(this.contractWrapper, VoteContractSchema, this.storage);\n    this.app = new ContractAppURI(this.contractWrapper, this.metadata, this.storage);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n  }\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get a proposal by id.\n   *\n   * @param proposalId - The proposal id to get.\n   * @returns - The proposal.\n   */\n  async get(proposalId) {\n    const all = await this.getAll();\n    const proposals = all.filter(p => p.proposalId.eq(BigNumber.from(proposalId)));\n    if (proposals.length === 0) {\n      throw new Error(\"proposal not found\");\n    }\n    return proposals[0];\n  }\n\n  /**\n   * Get All Proposals\n   *\n   * @remarks Get all the proposals in this contract.\n   *\n   * @example\n   * ```javascript\n   * const proposals = await contract.getAll();\n   * console.log(proposals);\n   * ```\n   *\n   * @returns - All the proposals in the contract.\n   */\n  async getAll() {\n    return Promise.all((await this.contractWrapper.read(\"getAllProposals\", [])).map(async data => ({\n      proposalId: data.proposalId,\n      proposer: data.proposer,\n      description: data.description,\n      startBlock: data.startBlock,\n      endBlock: data.endBlock,\n      state: await this.contractWrapper.read(\"state\", [data.proposalId]),\n      votes: await this.getProposalVotes(data.proposalId),\n      executions: data[3].map((c, i) => ({\n        toAddress: data.targets[i],\n        nativeTokenValue: c,\n        transactionData: data.calldatas[i]\n      }))\n    })));\n  }\n\n  /**\n   * Get the votes for a specific proposal\n   * @param proposalId - the proposalId\n   */\n  async getProposalVotes(proposalId) {\n    const votes = await this.contractWrapper.read(\"proposalVotes\", [proposalId]);\n    return [{\n      type: VoteType.Against,\n      label: \"Against\",\n      count: votes.againstVotes\n    }, {\n      type: VoteType.For,\n      label: \"For\",\n      count: votes.forVotes\n    }, {\n      type: VoteType.Abstain,\n      label: \"Abstain\",\n      count: votes.abstainVotes\n    }];\n  }\n\n  /**\n   * Check If Wallet Voted\n   *\n   * @remarks Check if a specified wallet has voted a specific proposal\n   *\n   * @example\n   * ```javascript\n   * // The proposal ID of the proposal you want to check\n   * const proposalId = \"0\";\n   * // The address of the wallet you want to check to see if they voted\n   * const address = \"{{wallet_address}}\";\n   *\n   * await contract.hasVoted(proposalId, address);\n   * ```\n   *\n   * @param proposalId - The unique identifier of a proposal .\n   * @param account - (optional) wallet account address. Defaults to connected signer.\n   * @returns - True if the account has already voted on the proposal.\n   */\n  async hasVoted(proposalId, account) {\n    if (!account) {\n      account = await this.contractWrapper.getSignerAddress();\n    }\n    return this.contractWrapper.read(\"hasVoted\", [proposalId, await resolveAddress(account)]);\n  }\n\n  /**\n   * Can Execute\n   *\n   * @remarks Check if a proposal can be executed (if the proposal has succeeded).\n   *\n   * @example\n   * ```javascript\n   * // The proposal ID of the proposal you want to check\n   * const proposalId = \"0\";\n   * const canExecute = await contract.canExecute(proposalId);\n   * console.log(canExecute);\n   * ```\n   *\n   * @param proposalId - The proposal ID to check.\n   * @returns - True if the proposal can be executed, false otherwise.\n   */\n  async canExecute(proposalId) {\n    await this.ensureExists(proposalId);\n    const proposal = await this.get(proposalId);\n    const tos = proposal.executions.map(p => p.toAddress);\n    const values = proposal.executions.map(p => p.nativeTokenValue);\n    const datas = proposal.executions.map(p => p.transactionData);\n    const descriptionHash = utils.id(proposal.description);\n    try {\n      await this.contractWrapper.callStatic().execute(tos, values, datas, descriptionHash);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  /**\n   * Check the balance of the project wallet in the native token of the chain\n   *\n   * @returns - The balance of the project in the native token of the chain\n   */\n  async balance() {\n    const balance = await this.contractWrapper.getProvider().getBalance(this.contractWrapper.address);\n    return {\n      name: \"\",\n      symbol: \"\",\n      decimals: 18,\n      value: balance,\n      displayValue: utils.formatUnits(balance, 18)\n    };\n  }\n\n  /**\n   * Check the balance of the project wallet in a particular\n   * ERC20 token contract\n   *\n   * @returns - The balance of the project in the native token of the chain\n   */\n  async balanceOfToken(tokenAddress) {\n    const erc20 = new Contract(await resolveAddress(tokenAddress), ERC20Abi, this.contractWrapper.getProvider());\n    return await fetchCurrencyValue(this.contractWrapper.getProvider(), tokenAddress, await erc20.balanceOf(this.contractWrapper.address));\n  }\n\n  /**\n   * Find a proposal by its id.\n   *\n   * @internal\n   * @param proposalId - Proposal to check for\n   */\n  async ensureExists(proposalId) {\n    try {\n      await this.contractWrapper.read(\"state\", [proposalId]);\n    } catch (e) {\n      throw Error(\"Proposal \".concat(proposalId, \" not found\"));\n    }\n  }\n\n  /**\n   * Get the Vote contract configuration\n   */\n  async settings() {\n    const [votingDelay, votingPeriod, votingTokenAddress, votingQuorumFraction, proposalTokenThreshold] = await Promise.all([this.contractWrapper.read(\"votingDelay\", []), this.contractWrapper.read(\"votingPeriod\", []), this.contractWrapper.read(\"token\", []), this.contractWrapper.read(\"quorumNumerator\", []), this.contractWrapper.read(\"proposalThreshold\", [])]);\n    const votingTokenMetadata = await fetchCurrencyMetadata(this.contractWrapper.getProvider(), votingTokenAddress);\n    return {\n      votingDelay: votingDelay.toString(),\n      votingPeriod: votingPeriod.toString(),\n      votingTokenAddress,\n      votingTokenMetadata,\n      votingQuorumFraction: votingQuorumFraction.toString(),\n      proposalTokenThreshold: proposalTokenThreshold.toString()\n    };\n  }\n  /**\n   * @internal\n   */\n  async prepare(method, args, overrides) {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method,\n      args,\n      overrides\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName, args, overrides) {\n    return this.contractWrapper.call(functionName, args, overrides);\n  }\n}\nexport { Vote };","map":{"version":3,"names":["ERC20Abi","BigNumber","utils","Contract","dw","ContractWrapper","e","AbiSchema","ah","ContractMetadata","e3","VoteContractSchema","b0","ContractAppURI","ag","ContractEncoder","aQ","GasCostEstimator","aR","ContractEvents","aS","ContractInterceptor","cL","resolveAddress","bc","fetchCurrencyValue","bb","fetchCurrencyMetadata","dx","buildTransactionFunction","aW","Transaction","V","VoteType","Vote","chainId","_chainId","constructor","network","address","storage","_defineProperty","description","executions","toAddress","contractWrapper","nativeTokenValue","transactionData","tos","map","p","values","datas","fromContractWrapper","method","args","parse","receipt","event","parseLogs","logs","id","proposalId","_this","voteType","reason","arguments","length","undefined","ensureExists","proposal","get","descriptionHash","options","abi","metadata","app","encoder","estimator","events","interceptor","onNetworkUpdated","updateSignerOrProvider","getAddress","all","getAll","proposals","filter","eq","from","Error","Promise","read","data","proposer","startBlock","endBlock","state","votes","getProposalVotes","c","i","targets","calldatas","type","Against","label","count","againstVotes","For","forVotes","Abstain","abstainVotes","hasVoted","account","getSignerAddress","canExecute","callStatic","execute","balance","getProvider","getBalance","name","symbol","decimals","value","displayValue","formatUnits","balanceOfToken","tokenAddress","erc20","balanceOf","concat","settings","votingDelay","votingPeriod","votingTokenAddress","votingQuorumFraction","proposalTokenThreshold","votingTokenMetadata","toString","prepare","overrides","call","functionName"],"sources":["C:/Misc/Documents/Career/FinTech/BlockChain/FrontEnd/buildspace-dao-starter/node_modules/@thirdweb-dev/sdk/dist/vote-8af4ac9b.browser.esm.js"],"sourcesContent":["import ERC20Abi from '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport { BigNumber, utils, Contract } from 'ethers';\nimport { dw as ContractWrapper, e as AbiSchema, ah as ContractMetadata, e3 as VoteContractSchema, b0 as ContractAppURI, ag as ContractEncoder, aQ as GasCostEstimator, aR as ContractEvents, aS as ContractInterceptor, cL as resolveAddress, bc as fetchCurrencyValue, bb as fetchCurrencyMetadata, dx as buildTransactionFunction, aW as Transaction } from './contract-publisher-1ff1fe07.browser.esm.js';\nimport { V as VoteType } from './Vote-3b66775c.browser.esm.js';\nimport './QueryParams-39bcad7a.browser.esm.js';\nimport 'bn.js';\nimport 'zod';\nimport 'tiny-invariant';\nimport 'uuid';\nimport '@thirdweb-dev/storage';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC165.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport 'fast-deep-equal';\nimport 'merkletreejs';\nimport '@thirdweb-dev/contracts-js/dist/abis/IThirdwebContract.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedRevealDeprecated.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ContractPublisher.json';\nimport '@thirdweb-dev/chains';\nimport 'bs58';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryLogic.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Permit.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721AQueryableUpgradeable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/SharedMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/zora_IERC721Drop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILoyaltyCard.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/INFTMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountFactoryCore.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccount.json';\nimport 'ethers/lib/utils';\nimport '@thirdweb-dev/contracts-js/dist/abis/Forwarder.json';\nimport 'cross-fetch';\nimport 'eventemitter3';\n\n/**\n * Create a decentralized organization for token holders to vote on proposals.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"vote\");\n * ```\n *\n * @public\n */\nclass Vote {\n  /**\n   * @internal\n   */\n\n  get chainId() {\n    return this._chainId;\n  }\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options, storage);\n    this._chainId = chainId;\n    this.abi = AbiSchema.parse(abi || []);\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.metadata = new ContractMetadata(this.contractWrapper, VoteContractSchema, this.storage);\n    this.app = new ContractAppURI(this.contractWrapper, this.metadata, this.storage);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n  }\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get a proposal by id.\n   *\n   * @param proposalId - The proposal id to get.\n   * @returns - The proposal.\n   */\n  async get(proposalId) {\n    const all = await this.getAll();\n    const proposals = all.filter(p => p.proposalId.eq(BigNumber.from(proposalId)));\n    if (proposals.length === 0) {\n      throw new Error(\"proposal not found\");\n    }\n    return proposals[0];\n  }\n\n  /**\n   * Get All Proposals\n   *\n   * @remarks Get all the proposals in this contract.\n   *\n   * @example\n   * ```javascript\n   * const proposals = await contract.getAll();\n   * console.log(proposals);\n   * ```\n   *\n   * @returns - All the proposals in the contract.\n   */\n  async getAll() {\n    return Promise.all((await this.contractWrapper.read(\"getAllProposals\", [])).map(async data => ({\n      proposalId: data.proposalId,\n      proposer: data.proposer,\n      description: data.description,\n      startBlock: data.startBlock,\n      endBlock: data.endBlock,\n      state: await this.contractWrapper.read(\"state\", [data.proposalId]),\n      votes: await this.getProposalVotes(data.proposalId),\n      executions: data[3].map((c, i) => ({\n        toAddress: data.targets[i],\n        nativeTokenValue: c,\n        transactionData: data.calldatas[i]\n      }))\n    })));\n  }\n\n  /**\n   * Get the votes for a specific proposal\n   * @param proposalId - the proposalId\n   */\n  async getProposalVotes(proposalId) {\n    const votes = await this.contractWrapper.read(\"proposalVotes\", [proposalId]);\n    return [{\n      type: VoteType.Against,\n      label: \"Against\",\n      count: votes.againstVotes\n    }, {\n      type: VoteType.For,\n      label: \"For\",\n      count: votes.forVotes\n    }, {\n      type: VoteType.Abstain,\n      label: \"Abstain\",\n      count: votes.abstainVotes\n    }];\n  }\n\n  /**\n   * Check If Wallet Voted\n   *\n   * @remarks Check if a specified wallet has voted a specific proposal\n   *\n   * @example\n   * ```javascript\n   * // The proposal ID of the proposal you want to check\n   * const proposalId = \"0\";\n   * // The address of the wallet you want to check to see if they voted\n   * const address = \"{{wallet_address}}\";\n   *\n   * await contract.hasVoted(proposalId, address);\n   * ```\n   *\n   * @param proposalId - The unique identifier of a proposal .\n   * @param account - (optional) wallet account address. Defaults to connected signer.\n   * @returns - True if the account has already voted on the proposal.\n   */\n  async hasVoted(proposalId, account) {\n    if (!account) {\n      account = await this.contractWrapper.getSignerAddress();\n    }\n    return this.contractWrapper.read(\"hasVoted\", [proposalId, await resolveAddress(account)]);\n  }\n\n  /**\n   * Can Execute\n   *\n   * @remarks Check if a proposal can be executed (if the proposal has succeeded).\n   *\n   * @example\n   * ```javascript\n   * // The proposal ID of the proposal you want to check\n   * const proposalId = \"0\";\n   * const canExecute = await contract.canExecute(proposalId);\n   * console.log(canExecute);\n   * ```\n   *\n   * @param proposalId - The proposal ID to check.\n   * @returns - True if the proposal can be executed, false otherwise.\n   */\n  async canExecute(proposalId) {\n    await this.ensureExists(proposalId);\n    const proposal = await this.get(proposalId);\n    const tos = proposal.executions.map(p => p.toAddress);\n    const values = proposal.executions.map(p => p.nativeTokenValue);\n    const datas = proposal.executions.map(p => p.transactionData);\n    const descriptionHash = utils.id(proposal.description);\n    try {\n      await this.contractWrapper.callStatic().execute(tos, values, datas, descriptionHash);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  /**\n   * Check the balance of the project wallet in the native token of the chain\n   *\n   * @returns - The balance of the project in the native token of the chain\n   */\n  async balance() {\n    const balance = await this.contractWrapper.getProvider().getBalance(this.contractWrapper.address);\n    return {\n      name: \"\",\n      symbol: \"\",\n      decimals: 18,\n      value: balance,\n      displayValue: utils.formatUnits(balance, 18)\n    };\n  }\n\n  /**\n   * Check the balance of the project wallet in a particular\n   * ERC20 token contract\n   *\n   * @returns - The balance of the project in the native token of the chain\n   */\n  async balanceOfToken(tokenAddress) {\n    const erc20 = new Contract(await resolveAddress(tokenAddress), ERC20Abi, this.contractWrapper.getProvider());\n    return await fetchCurrencyValue(this.contractWrapper.getProvider(), tokenAddress, await erc20.balanceOf(this.contractWrapper.address));\n  }\n\n  /**\n   * Find a proposal by its id.\n   *\n   * @internal\n   * @param proposalId - Proposal to check for\n   */\n  async ensureExists(proposalId) {\n    try {\n      await this.contractWrapper.read(\"state\", [proposalId]);\n    } catch (e) {\n      throw Error(`Proposal ${proposalId} not found`);\n    }\n  }\n\n  /**\n   * Get the Vote contract configuration\n   */\n  async settings() {\n    const [votingDelay, votingPeriod, votingTokenAddress, votingQuorumFraction, proposalTokenThreshold] = await Promise.all([this.contractWrapper.read(\"votingDelay\", []), this.contractWrapper.read(\"votingPeriod\", []), this.contractWrapper.read(\"token\", []), this.contractWrapper.read(\"quorumNumerator\", []), this.contractWrapper.read(\"proposalThreshold\", [])]);\n    const votingTokenMetadata = await fetchCurrencyMetadata(this.contractWrapper.getProvider(), votingTokenAddress);\n    return {\n      votingDelay: votingDelay.toString(),\n      votingPeriod: votingPeriod.toString(),\n      votingTokenAddress,\n      votingTokenMetadata,\n      votingQuorumFraction: votingQuorumFraction.toString(),\n      proposalTokenThreshold: proposalTokenThreshold.toString()\n    };\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Create Proposal\n   *\n   * @remarks Create a new proposal for token holders to vote on.\n   *\n   * @example\n   * ```javascript\n   * // The description of the proposal you want to pass\n   * const description = \"This is a great proposal - vote for it!\"\n   * // You can (optionally) pass in contract calls that will get executed when the proposal is executed.\n   * const executions = [\n   *   {\n   *     // The contract you want to make a call to\n   *     toAddress: \"0x...\",\n   *     // The amount of the native currency to send in this transaction\n   *     nativeTokenValue: 0,\n   *     // Transaction data that will be executed when the proposal is executed\n   *     // This is an example transfer transaction with a token contract (which you would need to set up in code)\n   *     transactionData: tokenContract.encoder.encode(\n   *       \"transfer\", [\n   *         fromAddress,\n   *         amount,\n   *       ]\n   *     ),\n   *   }\n   * ]\n   *\n   * const proposal = await contract.propose(description, executions);\n   * ```\n   *\n   * @param description - The description of the proposal.\n   * @param executions - A set of executable transactions that will be run if the proposal is passed and executed.\n   * @returns - The id of the created proposal and the transaction receipt.\n   */\n  propose = /* @__PURE__ */buildTransactionFunction(async (description, executions) => {\n    if (!executions) {\n      executions = [{\n        toAddress: this.contractWrapper.address,\n        nativeTokenValue: 0,\n        transactionData: \"0x\"\n      }];\n    }\n    const tos = executions.map(p => p.toAddress);\n    const values = executions.map(p => p.nativeTokenValue);\n    const datas = executions.map(p => p.transactionData);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"propose\",\n      args: [tos, values, datas, description],\n      parse: receipt => {\n        const event = this.contractWrapper.parseLogs(\"ProposalCreated\", receipt?.logs);\n        return {\n          id: event[0].args.proposalId,\n          receipt\n        };\n      }\n    });\n  });\n\n  /**\n   * Vote\n   *\n   * @remarks Vote on an active proposal\n   *\n   * @example\n   * ```javascript\n   * // The proposal ID of the proposal you want to vote on\n   * const proposalId = \"0\";\n   * // The vote type you want to cast, can be VoteType.Against, VoteType.For, or VoteType.Abstain\n   * const voteType = VoteType.For;\n   * // The (optional) reason for the vote\n   * const reason = \"I like this proposal!\";\n   *\n   * await contract.vote(proposalId, voteType, reason);\n   * ```\n   * @param proposalId - The proposal to cast a vote on.\n   * @param voteType - The position the voter is taking on their vote.\n   * @param reason - (optional) The reason for the vote.\n   */\n  vote = /* @__PURE__ */buildTransactionFunction((() => {\n    var _this = this;\n    return async function (proposalId, voteType) {\n      let reason = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"\";\n      await _this.ensureExists(proposalId);\n      return Transaction.fromContractWrapper({\n        contractWrapper: _this.contractWrapper,\n        method: \"castVoteWithReason\",\n        args: [proposalId, voteType, reason]\n      });\n    };\n  })());\n\n  /**\n   * Execute Proposal\n   *\n   * @remarks Execute the related transactions for a proposal if the proposal succeeded.\n   *\n   * @example\n   * ```javascript\n   * // The proposal ID of the proposal you want to execute\n   * const proposalId = \"0\"\n   * await contract.execute(proposalId);\n   * ```\n   *\n   * @param proposalId - The proposal id to execute.\n   */\n  execute = /* @__PURE__ */buildTransactionFunction(async proposalId => {\n    await this.ensureExists(proposalId);\n    const proposal = await this.get(proposalId);\n    const tos = proposal.executions.map(p => p.toAddress);\n    const values = proposal.executions.map(p => p.nativeTokenValue);\n    const datas = proposal.executions.map(p => p.transactionData);\n    const descriptionHash = utils.id(proposal.description);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"execute\",\n      args: [tos, values, datas, descriptionHash]\n    });\n  });\n\n  /**\n   * @internal\n   */\n  async prepare(method, args, overrides) {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method,\n      args,\n      overrides\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName, args, overrides) {\n    return this.contractWrapper.call(functionName, args, overrides);\n  }\n}\n\nexport { Vote };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}