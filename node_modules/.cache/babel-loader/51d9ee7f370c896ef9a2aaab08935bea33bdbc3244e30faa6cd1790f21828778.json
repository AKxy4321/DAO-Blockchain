{"ast":null,"code":"import ERC20Abi from '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport { BigNumber, Contract } from 'ethers';\nimport { d_ as ADMIN_ROLE, dw as ContractWrapper, e as AbiSchema, ah as ContractMetadata, d$ as SplitsContractSchema, b0 as ContractAppURI, ai as ContractRoles, ag as ContractEncoder, aQ as GasCostEstimator, aR as ContractEvents, aS as ContractInterceptor, cL as resolveAddress, bc as fetchCurrencyValue, dx as buildTransactionFunction, aW as Transaction } from './contract-publisher-1ff1fe07.browser.esm.js';\nimport './QueryParams-39bcad7a.browser.esm.js';\nimport 'bn.js';\nimport 'zod';\nimport 'tiny-invariant';\nimport 'uuid';\nimport '@thirdweb-dev/storage';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC165.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport 'fast-deep-equal';\nimport 'merkletreejs';\nimport '@thirdweb-dev/contracts-js/dist/abis/IThirdwebContract.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedRevealDeprecated.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ContractPublisher.json';\nimport '@thirdweb-dev/chains';\nimport 'bs58';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryLogic.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Permit.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721AQueryableUpgradeable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/SharedMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/zora_IERC721Drop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILoyaltyCard.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/INFTMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountFactoryCore.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccount.json';\nimport 'ethers/lib/utils';\nimport '@thirdweb-dev/contracts-js/dist/abis/Forwarder.json';\nimport 'cross-fetch';\nimport 'eventemitter3';\n\n/**\n * Create custom royalty splits to distribute funds.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"split\");\n * ```\n *\n * @public\n */\nclass Split {\n  static contractRoles = ADMIN_ROLE;\n\n  /**\n   * @internal\n   */\n\n  get chainId() {\n    return this._chainId;\n  }\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options, storage);\n    this._chainId = chainId;\n    this.abi = AbiSchema.parse(abi || []);\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.metadata = new ContractMetadata(this.contractWrapper, SplitsContractSchema, this.storage);\n    this.app = new ContractAppURI(this.contractWrapper, this.metadata, this.storage);\n    this.roles = new ContractRoles(this.contractWrapper, Split.contractRoles);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n  }\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get Recipients of this splits contract\n   *\n   * @remarks Get the data about the shares of every split recipient on the contract\n   *\n   * @example\n   * ```javascript\n   * const recipients = await contract.getAllRecipients();\n   * console.log(recipients);\n   * ```\n   */\n  async getAllRecipients() {\n    const recipients = [];\n    let index = BigNumber.from(0);\n    const totalRecipients = await this.contractWrapper.read(\"payeeCount\", []);\n    while (index.lt(totalRecipients)) {\n      try {\n        const recipientAddress = await this.contractWrapper.read(\"payee\", [index]);\n        recipients.push(await this.getRecipientSplitPercentage(recipientAddress));\n        index = index.add(1);\n      } catch (err) {\n        // The only way we know how to detect that we've found all recipients\n        // is if we get an error when trying to get the next recipient.\n        if (\"method\" in err && err[\"method\"].toLowerCase().includes(\"payee(uint256)\")) {\n          break;\n        } else {\n          throw err;\n        }\n      }\n    }\n    return recipients;\n  }\n\n  /**\n   * Returns all the recipients and their balances in the native currency.\n   *\n   * @returns A map of recipient addresses to their balances in the native currency.\n   */\n  async balanceOfAllRecipients() {\n    const recipients = await this.getAllRecipients();\n    const balances = {};\n    for (const recipient of recipients) {\n      balances[recipient.address] = await this.balanceOf(recipient.address);\n    }\n    return balances;\n  }\n\n  /**\n   * Returns all the recipients and their balances in a non-native currency.\n   *\n   * @param tokenAddress - The address of the currency to check the balances in.\n   * @returns A map of recipient addresses to their balances in the specified currency.\n   */\n  async balanceOfTokenAllRecipients(tokenAddress) {\n    const resolvedToken = await resolveAddress(tokenAddress);\n    const recipients = await this.getAllRecipients();\n    const balances = {};\n    for (const recipient of recipients) {\n      balances[recipient.address] = await this.balanceOfToken(recipient.address, resolvedToken);\n    }\n    return balances;\n  }\n\n  /**\n   * Get Funds owed to a particular wallet\n   *\n   * @remarks Get the amount of funds in the native currency held by the contract that is owed to a specific recipient.\n   *\n   * @example\n   * ```javascript\n   * // The address to check the funds of\n   * const address = \"{{wallet_address}}\";\n   * const funds = await contract.balanceOf(address);\n   * console.log(funds);\n   * ```\n   */\n  async balanceOf(address) {\n    const resolvedAddress = await resolveAddress(address);\n    const walletBalance = await this.contractWrapper.getProvider().getBalance(this.getAddress());\n    const totalReleased = await this.contractWrapper.read(\"totalReleased\", []);\n    const totalReceived = walletBalance.add(totalReleased);\n    return this._pendingPayment(resolvedAddress, totalReceived, await this.contractWrapper.read(\"released\", [resolvedAddress]));\n  }\n\n  /**\n   * Get non-native Token Funds owed to a particular wallet\n   *\n   * @remarks Get the amount of funds in the non-native tokens held by the contract that is owed to a specific recipient.\n   *\n   * @example\n   * ```javascript\n   * // The address to check the funds of\n   * const address = \"{{wallet_address}}\";\n   * // The address of the currency to check the contracts funds of\n   * const tokenAddress = \"0x...\"\n   * const funds = await contract.balanceOfToken(address, tokenAddress);\n   * console.log(funds);\n   * ```\n   */\n  async balanceOfToken(walletAddress, tokenAddress) {\n    const resolvedToken = await resolveAddress(tokenAddress);\n    const resolvedWallet = await resolveAddress(walletAddress);\n    const erc20 = new Contract(resolvedToken, ERC20Abi, this.contractWrapper.getProvider());\n    const walletBalance = await erc20.balanceOf(this.getAddress());\n    const totalReleased = await this.contractWrapper.read(\"totalReleased\", [resolvedToken]);\n    const totalReceived = walletBalance.add(totalReleased);\n    const value = await this._pendingPayment(resolvedWallet, totalReceived, await this.contractWrapper.read(\"released\", [resolvedToken, resolvedWallet]));\n    return await fetchCurrencyValue(this.contractWrapper.getProvider(), resolvedToken, value);\n  }\n\n  /**\n   * Get the % of funds owed to a given address\n   * @param address - the address to check percentage of\n   */\n  async getRecipientSplitPercentage(address) {\n    const resolvedAddress = await resolveAddress(address);\n    const [totalShares, walletsShares] = await Promise.all([this.contractWrapper.read(\"totalShares\", []), this.contractWrapper.read(\"shares\", [address])]);\n    // We convert to basis points to avoid floating point loss of precision\n    return {\n      address: resolvedAddress,\n      splitPercentage: walletsShares.mul(BigNumber.from(1e7)).div(totalShares).toNumber() / 1e5\n    };\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Withdraw Funds\n   * @remarks Triggers a transfer to account of the amount of native currency they are owed.\n   *\n   * @example\n   * ```javascript\n   * // the wallet address that wants to withdraw their funds\n   * const walletAddress = \"{{wallet_address}}\"\n   * await contract.withdraw(walletAddress);\n   * ```\n   *\n   * @param walletAddress - The address to distributes the amount to\n   */\n  withdraw = /* @__PURE__ */buildTransactionFunction(async walletAddress => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"release(address)\",\n      args: [await resolveAddress(walletAddress)]\n    });\n  });\n\n  /**\n   * Triggers a transfer to account of the amount of a given currency they are owed.\n   *\n   * @param walletAddress - The address to distributes the amount to\n   * @param tokenAddress - The address of the currency contract to distribute funds\n   */\n  withdrawToken = /* @__PURE__ */buildTransactionFunction(async (walletAddress, tokenAddress) => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"release(address,address)\",\n      args: [await resolveAddress(tokenAddress), await resolveAddress(walletAddress)]\n    });\n  });\n\n  /**\n   * Distribute Funds\n   *\n   * @remarks Distribute funds held by the contract in the native currency to all recipients.\n   *\n   * @example\n   * ```javascript\n   * await contract.distribute();\n   * ```\n   */\n  distribute = /* @__PURE__ */buildTransactionFunction(async () => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"distribute()\",\n      args: []\n    });\n  });\n\n  /**\n   * Distribute Funds\n   *\n   * @remarks Distribute funds held by the contract in the native currency to all recipients.\n   *\n   * @example\n   * ```javascript\n   * // The address of the currency to distribute funds\n   * const tokenAddress = \"0x...\"\n   * await contract.distributeToken(tokenAddress);\n   * ```\n   *\n   * @param tokenAddress - The address of the currency contract to distribute funds\n   */\n  distributeToken = /* @__PURE__ */buildTransactionFunction(async tokenAddress => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"distribute(address)\",\n      args: [await resolveAddress(tokenAddress)]\n    });\n  });\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  async _pendingPayment(address, totalReceived, alreadyReleased) {\n    const addressReceived = totalReceived.mul(await this.contractWrapper.read(\"shares\", [await resolveAddress(address)]));\n    const totalRoyaltyAvailable = addressReceived.div(await this.contractWrapper.read(\"totalShares\", []));\n    return totalRoyaltyAvailable.sub(alreadyReleased);\n  }\n\n  /**\n   * @internal\n   */\n  async prepare(method, args, overrides) {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method,\n      args,\n      overrides\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName, args, overrides) {\n    return this.contractWrapper.call(functionName, args, overrides);\n  }\n}\nexport { Split };","map":{"version":3,"names":["ERC20Abi","BigNumber","Contract","d_","ADMIN_ROLE","dw","ContractWrapper","e","AbiSchema","ah","ContractMetadata","d$","SplitsContractSchema","b0","ContractAppURI","ai","ContractRoles","ag","ContractEncoder","aQ","GasCostEstimator","aR","ContractEvents","aS","ContractInterceptor","cL","resolveAddress","bc","fetchCurrencyValue","dx","buildTransactionFunction","aW","Transaction","Split","contractRoles","chainId","_chainId","constructor","network","address","storage","options","arguments","length","undefined","abi","contractWrapper","parse","metadata","app","roles","encoder","estimator","events","interceptor","onNetworkUpdated","updateSignerOrProvider","getAddress","getAllRecipients","recipients","index","from","totalRecipients","read","lt","recipientAddress","push","getRecipientSplitPercentage","add","err","toLowerCase","includes","balanceOfAllRecipients","balances","recipient","balanceOf","balanceOfTokenAllRecipients","tokenAddress","resolvedToken","balanceOfToken","resolvedAddress","walletBalance","getProvider","getBalance","totalReleased","totalReceived","_pendingPayment","walletAddress","resolvedWallet","erc20","value","totalShares","walletsShares","Promise","all","splitPercentage","mul","div","toNumber","withdraw","fromContractWrapper","method","args","withdrawToken","distribute","distributeToken","alreadyReleased","addressReceived","totalRoyaltyAvailable","sub","prepare","overrides","call","functionName"],"sources":["C:/Misc/Documents/Career/FinTech/BlockChain/FrontEnd/buildspace-dao-starter/node_modules/@thirdweb-dev/sdk/dist/split-8c412664.browser.esm.js"],"sourcesContent":["import ERC20Abi from '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport { BigNumber, Contract } from 'ethers';\nimport { d_ as ADMIN_ROLE, dw as ContractWrapper, e as AbiSchema, ah as ContractMetadata, d$ as SplitsContractSchema, b0 as ContractAppURI, ai as ContractRoles, ag as ContractEncoder, aQ as GasCostEstimator, aR as ContractEvents, aS as ContractInterceptor, cL as resolveAddress, bc as fetchCurrencyValue, dx as buildTransactionFunction, aW as Transaction } from './contract-publisher-1ff1fe07.browser.esm.js';\nimport './QueryParams-39bcad7a.browser.esm.js';\nimport 'bn.js';\nimport 'zod';\nimport 'tiny-invariant';\nimport 'uuid';\nimport '@thirdweb-dev/storage';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC165.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport 'fast-deep-equal';\nimport 'merkletreejs';\nimport '@thirdweb-dev/contracts-js/dist/abis/IThirdwebContract.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedRevealDeprecated.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ContractPublisher.json';\nimport '@thirdweb-dev/chains';\nimport 'bs58';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryLogic.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Permit.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721AQueryableUpgradeable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/SharedMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/zora_IERC721Drop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILoyaltyCard.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/INFTMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountFactoryCore.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccount.json';\nimport 'ethers/lib/utils';\nimport '@thirdweb-dev/contracts-js/dist/abis/Forwarder.json';\nimport 'cross-fetch';\nimport 'eventemitter3';\n\n/**\n * Create custom royalty splits to distribute funds.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"split\");\n * ```\n *\n * @public\n */\nclass Split {\n  static contractRoles = ADMIN_ROLE;\n\n  /**\n   * @internal\n   */\n\n  get chainId() {\n    return this._chainId;\n  }\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options, storage);\n    this._chainId = chainId;\n    this.abi = AbiSchema.parse(abi || []);\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.metadata = new ContractMetadata(this.contractWrapper, SplitsContractSchema, this.storage);\n    this.app = new ContractAppURI(this.contractWrapper, this.metadata, this.storage);\n    this.roles = new ContractRoles(this.contractWrapper, Split.contractRoles);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n  }\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get Recipients of this splits contract\n   *\n   * @remarks Get the data about the shares of every split recipient on the contract\n   *\n   * @example\n   * ```javascript\n   * const recipients = await contract.getAllRecipients();\n   * console.log(recipients);\n   * ```\n   */\n  async getAllRecipients() {\n    const recipients = [];\n    let index = BigNumber.from(0);\n    const totalRecipients = await this.contractWrapper.read(\"payeeCount\", []);\n    while (index.lt(totalRecipients)) {\n      try {\n        const recipientAddress = await this.contractWrapper.read(\"payee\", [index]);\n        recipients.push(await this.getRecipientSplitPercentage(recipientAddress));\n        index = index.add(1);\n      } catch (err) {\n        // The only way we know how to detect that we've found all recipients\n        // is if we get an error when trying to get the next recipient.\n        if (\"method\" in err && err[\"method\"].toLowerCase().includes(\"payee(uint256)\")) {\n          break;\n        } else {\n          throw err;\n        }\n      }\n    }\n    return recipients;\n  }\n\n  /**\n   * Returns all the recipients and their balances in the native currency.\n   *\n   * @returns A map of recipient addresses to their balances in the native currency.\n   */\n  async balanceOfAllRecipients() {\n    const recipients = await this.getAllRecipients();\n    const balances = {};\n    for (const recipient of recipients) {\n      balances[recipient.address] = await this.balanceOf(recipient.address);\n    }\n    return balances;\n  }\n\n  /**\n   * Returns all the recipients and their balances in a non-native currency.\n   *\n   * @param tokenAddress - The address of the currency to check the balances in.\n   * @returns A map of recipient addresses to their balances in the specified currency.\n   */\n  async balanceOfTokenAllRecipients(tokenAddress) {\n    const resolvedToken = await resolveAddress(tokenAddress);\n    const recipients = await this.getAllRecipients();\n    const balances = {};\n    for (const recipient of recipients) {\n      balances[recipient.address] = await this.balanceOfToken(recipient.address, resolvedToken);\n    }\n    return balances;\n  }\n\n  /**\n   * Get Funds owed to a particular wallet\n   *\n   * @remarks Get the amount of funds in the native currency held by the contract that is owed to a specific recipient.\n   *\n   * @example\n   * ```javascript\n   * // The address to check the funds of\n   * const address = \"{{wallet_address}}\";\n   * const funds = await contract.balanceOf(address);\n   * console.log(funds);\n   * ```\n   */\n  async balanceOf(address) {\n    const resolvedAddress = await resolveAddress(address);\n    const walletBalance = await this.contractWrapper.getProvider().getBalance(this.getAddress());\n    const totalReleased = await this.contractWrapper.read(\"totalReleased\", []);\n    const totalReceived = walletBalance.add(totalReleased);\n    return this._pendingPayment(resolvedAddress, totalReceived, await this.contractWrapper.read(\"released\", [resolvedAddress]));\n  }\n\n  /**\n   * Get non-native Token Funds owed to a particular wallet\n   *\n   * @remarks Get the amount of funds in the non-native tokens held by the contract that is owed to a specific recipient.\n   *\n   * @example\n   * ```javascript\n   * // The address to check the funds of\n   * const address = \"{{wallet_address}}\";\n   * // The address of the currency to check the contracts funds of\n   * const tokenAddress = \"0x...\"\n   * const funds = await contract.balanceOfToken(address, tokenAddress);\n   * console.log(funds);\n   * ```\n   */\n  async balanceOfToken(walletAddress, tokenAddress) {\n    const resolvedToken = await resolveAddress(tokenAddress);\n    const resolvedWallet = await resolveAddress(walletAddress);\n    const erc20 = new Contract(resolvedToken, ERC20Abi, this.contractWrapper.getProvider());\n    const walletBalance = await erc20.balanceOf(this.getAddress());\n    const totalReleased = await this.contractWrapper.read(\"totalReleased\", [resolvedToken]);\n    const totalReceived = walletBalance.add(totalReleased);\n    const value = await this._pendingPayment(resolvedWallet, totalReceived, await this.contractWrapper.read(\"released\", [resolvedToken, resolvedWallet]));\n    return await fetchCurrencyValue(this.contractWrapper.getProvider(), resolvedToken, value);\n  }\n\n  /**\n   * Get the % of funds owed to a given address\n   * @param address - the address to check percentage of\n   */\n  async getRecipientSplitPercentage(address) {\n    const resolvedAddress = await resolveAddress(address);\n    const [totalShares, walletsShares] = await Promise.all([this.contractWrapper.read(\"totalShares\", []), this.contractWrapper.read(\"shares\", [address])]);\n    // We convert to basis points to avoid floating point loss of precision\n    return {\n      address: resolvedAddress,\n      splitPercentage: walletsShares.mul(BigNumber.from(1e7)).div(totalShares).toNumber() / 1e5\n    };\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Withdraw Funds\n   * @remarks Triggers a transfer to account of the amount of native currency they are owed.\n   *\n   * @example\n   * ```javascript\n   * // the wallet address that wants to withdraw their funds\n   * const walletAddress = \"{{wallet_address}}\"\n   * await contract.withdraw(walletAddress);\n   * ```\n   *\n   * @param walletAddress - The address to distributes the amount to\n   */\n  withdraw = /* @__PURE__ */buildTransactionFunction(async walletAddress => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"release(address)\",\n      args: [await resolveAddress(walletAddress)]\n    });\n  });\n\n  /**\n   * Triggers a transfer to account of the amount of a given currency they are owed.\n   *\n   * @param walletAddress - The address to distributes the amount to\n   * @param tokenAddress - The address of the currency contract to distribute funds\n   */\n  withdrawToken = /* @__PURE__ */buildTransactionFunction(async (walletAddress, tokenAddress) => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"release(address,address)\",\n      args: [await resolveAddress(tokenAddress), await resolveAddress(walletAddress)]\n    });\n  });\n\n  /**\n   * Distribute Funds\n   *\n   * @remarks Distribute funds held by the contract in the native currency to all recipients.\n   *\n   * @example\n   * ```javascript\n   * await contract.distribute();\n   * ```\n   */\n  distribute = /* @__PURE__ */buildTransactionFunction(async () => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"distribute()\",\n      args: []\n    });\n  });\n\n  /**\n   * Distribute Funds\n   *\n   * @remarks Distribute funds held by the contract in the native currency to all recipients.\n   *\n   * @example\n   * ```javascript\n   * // The address of the currency to distribute funds\n   * const tokenAddress = \"0x...\"\n   * await contract.distributeToken(tokenAddress);\n   * ```\n   *\n   * @param tokenAddress - The address of the currency contract to distribute funds\n   */\n  distributeToken = /* @__PURE__ */buildTransactionFunction(async tokenAddress => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"distribute(address)\",\n      args: [await resolveAddress(tokenAddress)]\n    });\n  });\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  async _pendingPayment(address, totalReceived, alreadyReleased) {\n    const addressReceived = totalReceived.mul(await this.contractWrapper.read(\"shares\", [await resolveAddress(address)]));\n    const totalRoyaltyAvailable = addressReceived.div(await this.contractWrapper.read(\"totalShares\", []));\n    return totalRoyaltyAvailable.sub(alreadyReleased);\n  }\n\n  /**\n   * @internal\n   */\n  async prepare(method, args, overrides) {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method,\n      args,\n      overrides\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName, args, overrides) {\n    return this.contractWrapper.call(functionName, args, overrides);\n  }\n}\n\nexport { Split };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}