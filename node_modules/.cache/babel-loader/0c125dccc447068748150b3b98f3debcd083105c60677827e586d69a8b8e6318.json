{"ast":null,"code":"import _defineProperty from \"C:/Misc/Documents/Career/FinTech/BlockChain/FrontEnd/buildspace-dao-starter/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { constants } from 'ethers';\nimport { dK as NFT_BASE_CONTRACT_ROLES, dw as ContractWrapper, e as AbiSchema, ah as ContractMetadata, dM as TokenErc1155ContractSchema, b0 as ContractAppURI, ai as ContractRoles, aj as ContractRoyalty, ak as ContractPrimarySale, ag as ContractEncoder, aQ as GasCostEstimator, aR as ContractEvents, aT as ContractPlatformFee, aS as ContractInterceptor, aM as Erc1155SignatureMintable, aV as ContractOwner, bI as getRoleHash, dx as buildTransactionFunction, aW as Transaction } from './contract-publisher-1ff1fe07.browser.esm.js';\nimport { S as StandardErc1155 } from './erc-1155-standard-c4641fc4.browser.esm.js';\nimport './QueryParams-39bcad7a.browser.esm.js';\nimport 'bn.js';\nimport 'zod';\nimport 'tiny-invariant';\nimport 'uuid';\nimport '@thirdweb-dev/storage';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC165.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport 'fast-deep-equal';\nimport 'merkletreejs';\nimport '@thirdweb-dev/contracts-js/dist/abis/IThirdwebContract.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedRevealDeprecated.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ContractPublisher.json';\nimport '@thirdweb-dev/chains';\nimport 'bs58';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryLogic.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Permit.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721AQueryableUpgradeable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/SharedMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/zora_IERC721Drop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILoyaltyCard.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/INFTMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountFactoryCore.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccount.json';\nimport 'ethers/lib/utils';\nimport '@thirdweb-dev/contracts-js/dist/abis/Forwarder.json';\nimport 'cross-fetch';\nimport 'eventemitter3';\n\n/**\n * Create a collection of NFTs that lets you mint multiple copies of each NFT.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"edition\");\n * ```\n *\n * @public\n */\nclass Edition extends StandardErc1155 {\n  /**\n   * Configure royalties\n   * @remarks Set your own royalties for the entire contract or per token\n   * @example\n   * ```javascript\n   * // royalties on the whole contract\n   * contract.royalties.setDefaultRoyaltyInfo({\n   *   seller_fee_basis_points: 100, // 1%\n   *   fee_recipient: \"0x...\"\n   * });\n   * // override royalty for a particular token\n   * contract.royalties.setTokenRoyaltyInfo(tokenId, {\n   *   seller_fee_basis_points: 500, // 5%\n   *   fee_recipient: \"0x...\"\n   * });\n   * ```\n   */\n  /**\n   * Signature Minting\n   * @remarks Generate dynamic NFTs with your own signature, and let others mint them using that signature.\n   * @example\n   * ```javascript\n   * // see how to craft a payload to sign in the `contract.signature.generate()` documentation\n   * const signedPayload = contract.signature.generate(payload);\n   *\n   * // now anyone can mint the NFT\n   * const tx = contract.signature.mint(signedPayload);\n   * const receipt = tx.receipt; // the mint transaction receipt\n   * const mintedId = tx.id; // the id of the NFT minted\n   * ```\n   */\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options, storage);\n    super(contractWrapper, storage, chainId);\n    /** ******************************\n     * WRITE FUNCTIONS\n     *******************************/\n    /**\n     * Mint NFT for the connected wallet\n     *\n     * @remarks See {@link Edition.mintTo}\n     */\n    _defineProperty(this, \"mint\", /* @__PURE__ */buildTransactionFunction(async metadataWithSupply => {\n      return this.erc1155.mint.prepare(metadataWithSupply);\n    }));\n    /**\n     * Mint an NFT with a limited supply\n     *\n     * @remarks Mint an NFT with a limited supply to a specified wallet.\n     *\n     * @example\n     * ```javascript\n     * // Address of the wallet you want to mint the NFT to\n     * const toAddress = \"{{wallet_address}}\"\n     *\n     * // Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\n     * const metadata = {\n     *   name: \"Cool NFT\",\n     *   description: \"This is a cool NFT\",\n     *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n     * }\n     *\n     * const metadataWithSupply = {\n     *   metadata,\n     *   supply: 1000, // The number of this NFT you want to mint\n     * }\n     *\n     * const tx = await contract.mintTo(toAddress, metadataWithSupply);\n     * const receipt = tx.receipt; // the transaction receipt\n     * const tokenId = tx.id; // the id of the NFT minted\n     * const nft = await tx.data(); // (optional) fetch details of minted NFT\n     * ```\n     */\n    _defineProperty(this, \"mintTo\", /* @__PURE__ */buildTransactionFunction(async (to, metadataWithSupply) => {\n      return this.erc1155.mintTo.prepare(to, metadataWithSupply);\n    }));\n    /**\n     * Increase the supply of an existing NFT and mint it to the connected wallet\n     *\n     * @param tokenId - the token id of the NFT to increase supply of\n     * @param additionalSupply - the additional amount to mint\n     */\n    _defineProperty(this, \"mintAdditionalSupply\", /* @__PURE__ */buildTransactionFunction(async (tokenId, additionalSupply) => {\n      return this.erc1155.mintAdditionalSupply.prepare(tokenId, additionalSupply);\n    }));\n    /**\n     * Increase the supply of an existing NFT and mint it to a given wallet address\n     *\n     * @param to - the address to mint to\n     * @param tokenId - the token id of the NFT to increase supply of\n     * @param additionalSupply - the additional amount to mint\n     */\n    _defineProperty(this, \"mintAdditionalSupplyTo\", /* @__PURE__ */buildTransactionFunction(async (to, tokenId, additionalSupply) => {\n      return this.erc1155.mintAdditionalSupplyTo.prepare(to, tokenId, additionalSupply);\n    }));\n    /**\n     * Mint Many NFTs for the connected wallet\n     *\n     * @remarks See {@link Edition.mintBatchTo}\n     */\n    _defineProperty(this, \"mintBatch\", /* @__PURE__ */buildTransactionFunction(async metadatas => {\n      return this.erc1155.mintBatch.prepare(metadatas);\n    }));\n    /**\n     * Mint Many NFTs with limited supplies\n     *\n     * @remarks Mint many different NFTs with limited supplies to a specified wallet.\n     *\n     * @example\n     * ```javascript\n     * // Address of the wallet you want to mint the NFT to\n     * const toAddress = \"{{wallet_address}}\"\n     *\n     * // Custom metadata and supplies of your NFTs\n     * const metadataWithSupply = [{\n     *   supply: 50, // The number of this NFT you want to mint\n     *   metadata: {\n     *     name: \"Cool NFT #1\",\n     *     description: \"This is a cool NFT\",\n     *     image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n     *   },\n     * }, {\n     *   supply: 100,\n     *   metadata: {\n     *     name: \"Cool NFT #2\",\n     *     description: \"This is a cool NFT\",\n     *     image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n     *   },\n     * }];\n     *\n     * const tx = await contract.mintBatchTo(toAddress, metadataWithSupply);\n     * const receipt = tx[0].receipt; // same transaction receipt for all minted NFTs\n     * const firstTokenId = tx[0].id; // token id of the first minted NFT\n     * const firstNFT = await tx[0].data(); // (optional) fetch details of the first minted NFT\n     * ```\n     */\n    _defineProperty(this, \"mintBatchTo\", /* @__PURE__ */buildTransactionFunction(async (to, metadataWithSupply) => {\n      return this.erc1155.mintBatchTo.prepare(to, metadataWithSupply);\n    }));\n    /**\n     * Burn a specified amount of a NFT\n     *\n     * @param tokenId - the token Id to burn\n     * @param amount - amount to burn\n     *\n     * @example\n     * ```javascript\n     * const result = await contract.burnTokens(tokenId, amount);\n     * ```\n     */\n    _defineProperty(this, \"burn\", /* @__PURE__ */buildTransactionFunction(async (tokenId, amount) => {\n      return this.erc1155.burn.prepare(tokenId, amount);\n    }));\n    this.abi = AbiSchema.parse(abi || []);\n    this.metadata = new ContractMetadata(this.contractWrapper, TokenErc1155ContractSchema, this.storage);\n    this.app = new ContractAppURI(this.contractWrapper, this.metadata, this.storage);\n    this.roles = new ContractRoles(this.contractWrapper, Edition.contractRoles);\n    this.royalties = new ContractRoyalty(this.contractWrapper, this.metadata);\n    this.sales = new ContractPrimarySale(this.contractWrapper);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.platformFees = new ContractPlatformFee(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.signature = new Erc1155SignatureMintable(this.contractWrapper, this.storage, this.roles);\n    this.owner = new ContractOwner(this.contractWrapper);\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get all NFTs\n   *\n   * @remarks Get all the data associated with every NFT in this contract.\n   *\n   * By default, returns the first 100 NFTs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const nfts = await contract.getAll();\n   * ```\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs queried.\n   */\n  async getAll(queryParams) {\n    return this.erc1155.getAll(queryParams);\n  }\n\n  /**\n   * Get all NFTs owned by a specific wallet\n   *\n   * @remarks Get all the data associated with the NFTs owned by a specific wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to get the NFTs of\n   * const address = \"{{wallet_address}}\";\n   * const nfts = await contract.getOwned(address);\n   * ```\n   *\n   * @returns The NFT metadata for all NFTs in the contract.\n   */\n  async getOwned(walletAddress) {\n    return this.erc1155.getOwned(walletAddress);\n  }\n\n  /**\n   * Get the number of NFTs minted\n   * @returns the total number of NFTs minted in this contract\n   * @public\n   */\n  async getTotalCount() {\n    return this.erc1155.totalCount();\n  }\n\n  /**\n   * Get whether users can transfer NFTs from this contract\n   */\n  async isTransferRestricted() {\n    const anyoneCanTransfer = await this.contractWrapper.read(\"hasRole\", [getRoleHash(\"transfer\"), constants.AddressZero]);\n    return !anyoneCanTransfer;\n  }\n  /**\n   * Construct a mint transaction without executing it.\n   * This is useful for estimating the gas cost of a mint transaction, overriding transaction options and having fine grained control over the transaction execution.\n   * @param receiver - Address you want to send the token to\n   * @param metadataWithSupply - The metadata of the NFT you want to mint\n   *\n   * @deprecated `contract.mint.prepare(...args)`\n   */\n  async getMintTransaction(receiver, metadataWithSupply) {\n    return this.erc1155.getMintTransaction(receiver, metadataWithSupply);\n  }\n  /**\n   * @internal\n   */\n  async prepare(method, args, overrides) {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method,\n      args,\n      overrides\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName, args, overrides) {\n    return this.contractWrapper.call(functionName, args, overrides);\n  }\n}\n_defineProperty(Edition, \"contractRoles\", NFT_BASE_CONTRACT_ROLES);\nexport { Edition };","map":{"version":3,"names":["constants","dK","NFT_BASE_CONTRACT_ROLES","dw","ContractWrapper","e","AbiSchema","ah","ContractMetadata","dM","TokenErc1155ContractSchema","b0","ContractAppURI","ai","ContractRoles","aj","ContractRoyalty","ak","ContractPrimarySale","ag","ContractEncoder","aQ","GasCostEstimator","aR","ContractEvents","aT","ContractPlatformFee","aS","ContractInterceptor","aM","Erc1155SignatureMintable","aV","ContractOwner","bI","getRoleHash","dx","buildTransactionFunction","aW","Transaction","S","StandardErc1155","Edition","constructor","network","address","storage","options","arguments","length","undefined","abi","chainId","contractWrapper","_defineProperty","metadataWithSupply","erc1155","mint","prepare","to","mintTo","tokenId","additionalSupply","mintAdditionalSupply","mintAdditionalSupplyTo","metadatas","mintBatch","mintBatchTo","amount","burn","parse","metadata","app","roles","contractRoles","royalties","sales","encoder","estimator","events","platformFees","interceptor","signature","owner","onNetworkUpdated","updateSignerOrProvider","getAddress","getAll","queryParams","getOwned","walletAddress","getTotalCount","totalCount","isTransferRestricted","anyoneCanTransfer","read","AddressZero","getMintTransaction","receiver","method","args","overrides","fromContractWrapper","call","functionName"],"sources":["C:/Misc/Documents/Career/FinTech/BlockChain/FrontEnd/buildspace-dao-starter/node_modules/@thirdweb-dev/sdk/dist/edition-b3122b64.browser.esm.js"],"sourcesContent":["import { constants } from 'ethers';\nimport { dK as NFT_BASE_CONTRACT_ROLES, dw as ContractWrapper, e as AbiSchema, ah as ContractMetadata, dM as TokenErc1155ContractSchema, b0 as ContractAppURI, ai as ContractRoles, aj as ContractRoyalty, ak as ContractPrimarySale, ag as ContractEncoder, aQ as GasCostEstimator, aR as ContractEvents, aT as ContractPlatformFee, aS as ContractInterceptor, aM as Erc1155SignatureMintable, aV as ContractOwner, bI as getRoleHash, dx as buildTransactionFunction, aW as Transaction } from './contract-publisher-1ff1fe07.browser.esm.js';\nimport { S as StandardErc1155 } from './erc-1155-standard-c4641fc4.browser.esm.js';\nimport './QueryParams-39bcad7a.browser.esm.js';\nimport 'bn.js';\nimport 'zod';\nimport 'tiny-invariant';\nimport 'uuid';\nimport '@thirdweb-dev/storage';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC165.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport 'fast-deep-equal';\nimport 'merkletreejs';\nimport '@thirdweb-dev/contracts-js/dist/abis/IThirdwebContract.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedRevealDeprecated.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ContractPublisher.json';\nimport '@thirdweb-dev/chains';\nimport 'bs58';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryLogic.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Permit.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721AQueryableUpgradeable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/SharedMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/zora_IERC721Drop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILoyaltyCard.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/INFTMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountFactoryCore.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccount.json';\nimport 'ethers/lib/utils';\nimport '@thirdweb-dev/contracts-js/dist/abis/Forwarder.json';\nimport 'cross-fetch';\nimport 'eventemitter3';\n\n/**\n * Create a collection of NFTs that lets you mint multiple copies of each NFT.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"edition\");\n * ```\n *\n * @public\n */\nclass Edition extends StandardErc1155 {\n  static contractRoles = NFT_BASE_CONTRACT_ROLES;\n\n  /**\n   * Configure royalties\n   * @remarks Set your own royalties for the entire contract or per token\n   * @example\n   * ```javascript\n   * // royalties on the whole contract\n   * contract.royalties.setDefaultRoyaltyInfo({\n   *   seller_fee_basis_points: 100, // 1%\n   *   fee_recipient: \"0x...\"\n   * });\n   * // override royalty for a particular token\n   * contract.royalties.setTokenRoyaltyInfo(tokenId, {\n   *   seller_fee_basis_points: 500, // 5%\n   *   fee_recipient: \"0x...\"\n   * });\n   * ```\n   */\n\n  /**\n   * Signature Minting\n   * @remarks Generate dynamic NFTs with your own signature, and let others mint them using that signature.\n   * @example\n   * ```javascript\n   * // see how to craft a payload to sign in the `contract.signature.generate()` documentation\n   * const signedPayload = contract.signature.generate(payload);\n   *\n   * // now anyone can mint the NFT\n   * const tx = contract.signature.mint(signedPayload);\n   * const receipt = tx.receipt; // the mint transaction receipt\n   * const mintedId = tx.id; // the id of the NFT minted\n   * ```\n   */\n\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options, storage);\n    super(contractWrapper, storage, chainId);\n    this.abi = AbiSchema.parse(abi || []);\n    this.metadata = new ContractMetadata(this.contractWrapper, TokenErc1155ContractSchema, this.storage);\n    this.app = new ContractAppURI(this.contractWrapper, this.metadata, this.storage);\n    this.roles = new ContractRoles(this.contractWrapper, Edition.contractRoles);\n    this.royalties = new ContractRoyalty(this.contractWrapper, this.metadata);\n    this.sales = new ContractPrimarySale(this.contractWrapper);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.platformFees = new ContractPlatformFee(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.signature = new Erc1155SignatureMintable(this.contractWrapper, this.storage, this.roles);\n    this.owner = new ContractOwner(this.contractWrapper);\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get all NFTs\n   *\n   * @remarks Get all the data associated with every NFT in this contract.\n   *\n   * By default, returns the first 100 NFTs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const nfts = await contract.getAll();\n   * ```\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs queried.\n   */\n  async getAll(queryParams) {\n    return this.erc1155.getAll(queryParams);\n  }\n\n  /**\n   * Get all NFTs owned by a specific wallet\n   *\n   * @remarks Get all the data associated with the NFTs owned by a specific wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to get the NFTs of\n   * const address = \"{{wallet_address}}\";\n   * const nfts = await contract.getOwned(address);\n   * ```\n   *\n   * @returns The NFT metadata for all NFTs in the contract.\n   */\n  async getOwned(walletAddress) {\n    return this.erc1155.getOwned(walletAddress);\n  }\n\n  /**\n   * Get the number of NFTs minted\n   * @returns the total number of NFTs minted in this contract\n   * @public\n   */\n  async getTotalCount() {\n    return this.erc1155.totalCount();\n  }\n\n  /**\n   * Get whether users can transfer NFTs from this contract\n   */\n  async isTransferRestricted() {\n    const anyoneCanTransfer = await this.contractWrapper.read(\"hasRole\", [getRoleHash(\"transfer\"), constants.AddressZero]);\n    return !anyoneCanTransfer;\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Mint NFT for the connected wallet\n   *\n   * @remarks See {@link Edition.mintTo}\n   */\n  mint = /* @__PURE__ */buildTransactionFunction(async metadataWithSupply => {\n    return this.erc1155.mint.prepare(metadataWithSupply);\n  });\n\n  /**\n   * Mint an NFT with a limited supply\n   *\n   * @remarks Mint an NFT with a limited supply to a specified wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to mint the NFT to\n   * const toAddress = \"{{wallet_address}}\"\n   *\n   * // Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\n   * const metadata = {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }\n   *\n   * const metadataWithSupply = {\n   *   metadata,\n   *   supply: 1000, // The number of this NFT you want to mint\n   * }\n   *\n   * const tx = await contract.mintTo(toAddress, metadataWithSupply);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const tokenId = tx.id; // the id of the NFT minted\n   * const nft = await tx.data(); // (optional) fetch details of minted NFT\n   * ```\n   */\n  mintTo = /* @__PURE__ */buildTransactionFunction(async (to, metadataWithSupply) => {\n    return this.erc1155.mintTo.prepare(to, metadataWithSupply);\n  });\n\n  /**\n   * Construct a mint transaction without executing it.\n   * This is useful for estimating the gas cost of a mint transaction, overriding transaction options and having fine grained control over the transaction execution.\n   * @param receiver - Address you want to send the token to\n   * @param metadataWithSupply - The metadata of the NFT you want to mint\n   *\n   * @deprecated `contract.mint.prepare(...args)`\n   */\n  async getMintTransaction(receiver, metadataWithSupply) {\n    return this.erc1155.getMintTransaction(receiver, metadataWithSupply);\n  }\n\n  /**\n   * Increase the supply of an existing NFT and mint it to the connected wallet\n   *\n   * @param tokenId - the token id of the NFT to increase supply of\n   * @param additionalSupply - the additional amount to mint\n   */\n  mintAdditionalSupply = /* @__PURE__ */buildTransactionFunction(async (tokenId, additionalSupply) => {\n    return this.erc1155.mintAdditionalSupply.prepare(tokenId, additionalSupply);\n  });\n\n  /**\n   * Increase the supply of an existing NFT and mint it to a given wallet address\n   *\n   * @param to - the address to mint to\n   * @param tokenId - the token id of the NFT to increase supply of\n   * @param additionalSupply - the additional amount to mint\n   */\n  mintAdditionalSupplyTo = /* @__PURE__ */buildTransactionFunction(async (to, tokenId, additionalSupply) => {\n    return this.erc1155.mintAdditionalSupplyTo.prepare(to, tokenId, additionalSupply);\n  });\n\n  /**\n   * Mint Many NFTs for the connected wallet\n   *\n   * @remarks See {@link Edition.mintBatchTo}\n   */\n  mintBatch = /* @__PURE__ */buildTransactionFunction(async metadatas => {\n    return this.erc1155.mintBatch.prepare(metadatas);\n  });\n\n  /**\n   * Mint Many NFTs with limited supplies\n   *\n   * @remarks Mint many different NFTs with limited supplies to a specified wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to mint the NFT to\n   * const toAddress = \"{{wallet_address}}\"\n   *\n   * // Custom metadata and supplies of your NFTs\n   * const metadataWithSupply = [{\n   *   supply: 50, // The number of this NFT you want to mint\n   *   metadata: {\n   *     name: \"Cool NFT #1\",\n   *     description: \"This is a cool NFT\",\n   *     image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   *   },\n   * }, {\n   *   supply: 100,\n   *   metadata: {\n   *     name: \"Cool NFT #2\",\n   *     description: \"This is a cool NFT\",\n   *     image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   *   },\n   * }];\n   *\n   * const tx = await contract.mintBatchTo(toAddress, metadataWithSupply);\n   * const receipt = tx[0].receipt; // same transaction receipt for all minted NFTs\n   * const firstTokenId = tx[0].id; // token id of the first minted NFT\n   * const firstNFT = await tx[0].data(); // (optional) fetch details of the first minted NFT\n   * ```\n   */\n  mintBatchTo = /* @__PURE__ */buildTransactionFunction(async (to, metadataWithSupply) => {\n    return this.erc1155.mintBatchTo.prepare(to, metadataWithSupply);\n  });\n\n  /**\n   * Burn a specified amount of a NFT\n   *\n   * @param tokenId - the token Id to burn\n   * @param amount - amount to burn\n   *\n   * @example\n   * ```javascript\n   * const result = await contract.burnTokens(tokenId, amount);\n   * ```\n   */\n  burn = /* @__PURE__ */buildTransactionFunction(async (tokenId, amount) => {\n    return this.erc1155.burn.prepare(tokenId, amount);\n  });\n\n  /**\n   * @internal\n   */\n  async prepare(method, args, overrides) {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method,\n      args,\n      overrides\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName, args, overrides) {\n    return this.contractWrapper.call(functionName, args, overrides);\n  }\n}\n\nexport { Edition };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}