{"ast":null,"code":"import mime from 'mime/lite.js';\nimport { useQueryClient, useMutation, useQuery } from '@tanstack/react-query';\nimport { signLoginPayload, ThirdwebAuth } from '@thirdweb-dev/auth';\nimport invariant from 'tiny-invariant';\nimport { createContext, useContext, useState, useMemo, useCallback, useEffect, useRef } from 'react';\nimport { constants, utils, BigNumber, providers } from 'ethers';\nimport { jsx, jsxs } from 'react/jsx-runtime';\nimport { updateChainRPCs, getValidChainRPCs, defaultChains } from '@thirdweb-dev/chains';\nimport { Q as QueryClientProviderWithDefault, r as requiredParamInvariant, n as neverPersist } from './required-param-d1f74675.browser.esm.js';\nimport { ThirdwebSDK, getChainProvider } from '@thirdweb-dev/sdk/evm';\nimport { UserWallet, checkClientIdOrSecretKey, fetchCurrencyMetadata, fetchCurrencyValue, getCachedAbiForContract, ListingType, ThirdwebSDK as ThirdwebSDK$1 } from '@thirdweb-dev/sdk';\nimport { walletIds, createAsyncLocalStorage, assertWindowEthereum } from '@thirdweb-dev/wallets';\nimport { watchTransactions } from '@thirdweb-dev/sdk/evm/functions';\n\n// TODO legacy remove this when possible\n\nasync function resolveMimeType(url) {\n  if (!url) {\n    return undefined;\n  }\n  const mimeType = mime.getType(url);\n  if (mimeType) {\n    return mimeType;\n  }\n  const res = await fetch(url, {\n    method: \"HEAD\"\n  });\n  if (res.ok && res.headers.has(\"content-type\")) {\n    return res.headers.get(\"content-type\") || undefined;\n  }\n  // we failed to resolve the mime type, return null\n  return undefined;\n}\nconst ThirdwebThemeContext = /* @__PURE__ */createContext(undefined);\n\n/**\n * The configuration to use the react SDK with an [auth](https://portal.thirdweb.com/auth) server.\n *\n * @beta\n */\n\nconst ThirdwebAuthContext = /* @__PURE__ */createContext(undefined);\nfunction useThirdwebAuthContext() {\n  return useContext(ThirdwebAuthContext);\n}\nconst LAST_CONNECTED_WALLET_STORAGE_KEY = \"lastConnectedWallet\";\nlet lastConnectedWalletStorage;\n// maps wallet instance to it's wallet config\nconst walletInstanceToConfig = new Map();\nconst ThirdwebWalletContext = /* @__PURE__ */createContext(undefined);\nfunction ThirdwebWalletProvider(props) {\n  const [signer, setSigner] = useState(undefined);\n  const [connectionStatus, setConnectionStatus] = useState(\"unknown\");\n  const autoConnectTimeout = props.autoConnectTimeout || 15000;\n  const [activeWallet, setActiveWallet] = useState();\n  const [createdWalletInstance, setCreatedWalletInstance] = useState();\n  const [activeWalletConfig, setActiveWalletConfig] = useState();\n  if (!lastConnectedWalletStorage) {\n    lastConnectedWalletStorage = props.createWalletStorage(\"coordinatorStorage\");\n  }\n\n  // if autoSwitch is enabled - enforce connection to activeChain\n  const chainToConnect = props.autoSwitch ? props.activeChain : undefined;\n  const walletParams = useMemo(() => {\n    return {\n      chains: props.chains,\n      dappMetadata: props.dAppMeta,\n      chain: props.activeChain || props.chains[0],\n      clientId: props.clientId\n    };\n  }, [props.chains, props.dAppMeta, props.activeChain, props.clientId]);\n  const createWalletInstance = useCallback(walletConfig => {\n    const walletInstance = walletConfig.create(walletParams);\n    if (walletInstance.walletId === walletIds.magicLink) {\n      // NOTE: removing this if statement causes the component to re-render\n      // Patch for magic link wallet in react native\n      // needed because we need to add a component to the view tree\n      // from the instance, right before calling connect.\n      // Check it out in RN's DappContextProvider.\n      setCreatedWalletInstance(walletInstance);\n    }\n    walletInstanceToConfig.set(walletInstance, walletConfig);\n    return walletInstance;\n  }, [walletParams]);\n\n  // if props.chains is updated, update the active wallet's chains\n  useEffect(() => {\n    if (activeWallet) {\n      activeWallet.updateChains(props.chains);\n    }\n  }, [activeWallet, props.chains]);\n  const setConnectedWallet = useCallback(async function (wallet, connectParams) {\n    let isAutoConnect = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    setActiveWallet(wallet);\n    const walletConfig = walletInstanceToConfig.get(wallet);\n    if (!walletConfig) {\n      throw new Error(\"Wallet config not found for given wallet instance. Do not create a wallet instance manually - use the useCreateWalletInstance() hook instead\");\n    }\n    setActiveWalletConfig(walletConfig);\n    setConnectionStatus(\"connected\");\n    const _signer = await wallet.getSigner();\n    setSigner(_signer);\n\n    // it autoconnected, then the details is already saved in storage, no need to store again\n    if (isAutoConnect) {\n      return;\n    }\n\n    // save to storage\n\n    const walletInfo = {\n      walletId: walletConfig.id,\n      connectParams\n    };\n\n    // if personal wallet exists, we need to replace the connectParams.personalWallet to a stringifiable version\n    const personalWallet = wallet.getPersonalWallet();\n    const personalWalletConfig = walletInstanceToConfig.get(personalWallet);\n    if (personalWallet && personalWalletConfig) {\n      walletInfo.connectParams = {\n        ...walletInfo.connectParams,\n        personalWallet: {\n          walletId: personalWalletConfig.id,\n          connectParams: personalWallet.getConnectParams()\n        }\n      };\n      saveLastConnectedWalletInfo(walletInfo);\n    } else {\n      saveLastConnectedWalletInfo(walletInfo);\n    }\n  }, []);\n  const storeLastActiveChainId = useCallback(async chainId => {\n    const lastConnectedWallet = await lastConnectedWalletStorage.getItem(LAST_CONNECTED_WALLET_STORAGE_KEY);\n    if (!lastConnectedWallet) {\n      return;\n    }\n    try {\n      const parsedWallet = JSON.parse(lastConnectedWallet);\n      if (parsedWallet.connectParams) {\n        parsedWallet.connectParams.chainId = chainId;\n      } else {\n        parsedWallet.connectParams = {\n          chainId\n        };\n      }\n      await lastConnectedWalletStorage.setItem(LAST_CONNECTED_WALLET_STORAGE_KEY, JSON.stringify(parsedWallet));\n    } catch (error) {\n      console.error(`Error saving the last active chain: ${error}`);\n    }\n  }, []);\n  const switchChain = useCallback(async chainId => {\n    if (!activeWallet) {\n      throw new Error(\"No active wallet\");\n    }\n    await activeWallet.switchChain(chainId);\n    const _signer = await activeWallet.getSigner();\n    await storeLastActiveChainId(chainId);\n    setSigner(_signer);\n  }, [activeWallet, storeLastActiveChainId]);\n  const autoConnectTriggered = useRef(false);\n\n  // Auto Connect\n  useEffect(() => {\n    // do not auto connect if signerWallet is given\n    if (props.signerWallet) {\n      return;\n    }\n    if (autoConnectTriggered.current) {\n      return;\n    }\n    // if explicitly set to false, don't auto connect\n    // by default, auto connect\n    if (props.shouldAutoConnect === false) {\n      setConnectionStatus(\"disconnected\");\n      return;\n    }\n    if (activeWallet) {\n      // there's already an active wallet, don't auto connect\n      return;\n    }\n    if (connectionStatus !== \"unknown\") {\n      // only try to auto connect if we're in the unknown state\n      return;\n    }\n    autoConnectTriggered.current = true;\n    async function autoconnect() {\n      const walletInfo = await getLastConnectedWalletInfo();\n      if (!walletInfo) {\n        setConnectionStatus(\"disconnected\");\n        return;\n      }\n      const walletObj = props.supportedWallets.find(W => W.id === walletInfo.walletId);\n      if (!walletObj) {\n        // last connected wallet is no longer present in the supported wallets\n        setConnectionStatus(\"disconnected\");\n        return;\n      }\n      const personalWalletInfo = walletInfo.connectParams?.personalWallet;\n      if (personalWalletInfo) {\n        const personalWallets = walletObj.personalWallets || [];\n        const personalWalleObj = personalWallets.find(W => W.id === personalWalletInfo.walletId);\n        if (personalWalleObj) {\n          // create a personal wallet instance and auto connect it\n          const personalWalletInstance = createWalletInstance(personalWalleObj);\n          try {\n            await timeoutPromise(personalWalletInstance.autoConnect(personalWalletInfo.connectParams), {\n              ms: autoConnectTimeout,\n              message: autoConnectTimeoutErrorMessage\n            });\n          } catch (e) {\n            console.error(\"Failed to auto connect wallet\");\n            console.error(e);\n            setConnectionStatus(\"disconnected\");\n            return;\n          }\n\n          // set the personal wallet instance to the connectParams\n          walletInfo.connectParams = {\n            ...walletInfo.connectParams,\n            personalWallet: personalWalletInstance\n          };\n        } else {\n          // last used personal wallet is no longer present in the supported wallets\n          setConnectionStatus(\"disconnected\");\n          return;\n        }\n      }\n\n      // create a wallet instance and auto connect it\n      const wallet = createWalletInstance(walletObj);\n      try {\n        setConnectionStatus(\"connecting\");\n        await timeoutPromise(wallet.autoConnect(walletInfo.connectParams), {\n          ms: autoConnectTimeout,\n          message: autoConnectTimeoutErrorMessage\n        });\n        setConnectedWallet(wallet, walletInfo.connectParams, true);\n      } catch (e) {\n        console.error(\"Failed to auto connect wallet\");\n        console.error(e);\n        lastConnectedWalletStorage.removeItem(LAST_CONNECTED_WALLET_STORAGE_KEY);\n        setConnectionStatus(\"disconnected\");\n      }\n    }\n    autoconnect();\n  }, [createWalletInstance, props.supportedWallets, setConnectedWallet, props.shouldAutoConnect, activeWallet, connectionStatus, autoConnectTimeout, props.signerWallet]);\n  const connectWallet = useCallback(async function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    const [WalletObj, connectParams] = args;\n    const _connectedParams = {\n      chainId: chainToConnect?.chainId,\n      ...(connectParams || {})\n    };\n    const wallet = createWalletInstance(WalletObj);\n    setConnectionStatus(\"connecting\");\n    try {\n      // if magic is using social login - it will redirect the page - so need to save walletInfo before connecting\n      // TODO: find a better way to handle this\n      if (WalletObj.id === walletIds.magicLink) {\n        saveLastConnectedWalletInfo({\n          walletId: WalletObj.id,\n          connectParams: _connectedParams\n        });\n      }\n      await wallet.connect(_connectedParams);\n      setConnectedWallet(wallet, _connectedParams);\n    } catch (e) {\n      console.error(`Error connecting to wallet: ${e}`);\n      setConnectionStatus(\"disconnected\");\n      throw e;\n    }\n    return wallet;\n  }, [createWalletInstance, setConnectedWallet, chainToConnect]);\n  const onWalletDisconnect = useCallback(async () => {\n    await lastConnectedWalletStorage.removeItem(LAST_CONNECTED_WALLET_STORAGE_KEY);\n    setConnectionStatus(\"disconnected\");\n    setSigner(undefined);\n    setActiveWallet(undefined);\n    setActiveWalletConfig(undefined);\n  }, []);\n  const disconnectWallet = useCallback(async () => {\n    // if disconnect is called before the wallet is connected\n    if (!activeWallet) {\n      onWalletDisconnect();\n      return;\n    }\n    const personalWallet = activeWallet.getPersonalWallet();\n    await activeWallet.disconnect();\n    if (personalWallet) {\n      await personalWallet?.disconnect();\n    }\n    onWalletDisconnect();\n  }, [activeWallet, onWalletDisconnect]);\n\n  // when wallet's network or account is changed using the extension, update UI\n  useEffect(() => {\n    if (!activeWallet) {\n      return;\n    }\n    const update = async () => {\n      const _signer = await activeWallet.getSigner();\n      setSigner(_signer);\n    };\n    activeWallet.addListener(\"change\", () => {\n      update();\n    });\n    activeWallet.addListener(\"disconnect\", () => {\n      onWalletDisconnect();\n    });\n    return () => {\n      activeWallet.removeListener(\"change\");\n      activeWallet.removeListener(\"disconnect\");\n    };\n  }, [activeWallet, onWalletDisconnect]);\n\n  // connect signerWallet immediately if it's passed\n  // and disconnect it if it's not passed\n  const signerConnected = useRef();\n  useEffect(() => {\n    if (!props.signerWallet) {\n      if (signerConnected.current) {\n        disconnectWallet();\n        signerConnected.current = undefined;\n      }\n      return;\n    }\n    if (signerConnected.current === props.signerWallet) {\n      return;\n    }\n    const wallet = createWalletInstance(props.signerWallet);\n    setConnectedWallet(wallet);\n    signerConnected.current = props.signerWallet;\n  }, [createWalletInstance, props.supportedWallets, setConnectedWallet, props.signerWallet, disconnectWallet]);\n  return /*#__PURE__*/jsx(ThirdwebWalletContext.Provider, {\n    value: {\n      disconnect: disconnectWallet,\n      wallets: props.supportedWallets,\n      connect: connectWallet,\n      signer,\n      activeWallet,\n      activeWalletConfig,\n      connectionStatus,\n      setConnectionStatus,\n      createWalletInstance: createWalletInstance,\n      createdWalletInstance: createdWalletInstance,\n      createWalletStorage: props.createWalletStorage,\n      switchChain,\n      setConnectedWallet: setConnectedWallet,\n      activeChain: props.activeChain,\n      chainToConnect,\n      getWalletConfig: walletInstance => {\n        return walletInstanceToConfig.get(walletInstance);\n      },\n      activeChainSetExplicitly: props.activeChainSetExplicitly,\n      clientId: props.clientId\n    },\n    children: props.children\n  });\n}\nfunction useWalletContext() {\n  const ctx = useContext(ThirdwebWalletContext);\n  if (!ctx) {\n    throw new Error(`useWalletContext() can only be used inside <ThirdwebProvider />`);\n  }\n  return ctx;\n}\nasync function getLastConnectedWalletInfo() {\n  const str = await lastConnectedWalletStorage.getItem(LAST_CONNECTED_WALLET_STORAGE_KEY);\n  if (!str) {\n    return null;\n  }\n  try {\n    return JSON.parse(str);\n  } catch {\n    await lastConnectedWalletStorage.removeItem(LAST_CONNECTED_WALLET_STORAGE_KEY);\n    return null;\n  }\n}\nasync function saveLastConnectedWalletInfo(walletInfo) {\n  try {\n    await lastConnectedWalletStorage.setItem(LAST_CONNECTED_WALLET_STORAGE_KEY, JSON.stringify(walletInfo));\n  } catch (e) {\n    console.error(\"Error saving the last connected wallet info\", e);\n  }\n}\n\n/**\n * Timeout a promise with a given Error message if the promise does not resolve in given time\n *\n * @param promise - Promise to track for timeout\n * @param option - timeout options\n * @returns\n */\nfunction timeoutPromise(promise, option) {\n  return new Promise((resolve, reject) => {\n    const timeoutId = setTimeout(() => {\n      reject(new Error(option.message));\n    }, option.ms);\n    promise.then(res => {\n      clearTimeout(timeoutId);\n      resolve(res);\n    }, err => {\n      clearTimeout(timeoutId);\n      reject(err);\n    });\n  });\n}\nconst autoConnectTimeoutErrorMessage = `Failed to Auto connect. Auto connect timed out. You can increase the timeout duration using the autoConnectTimeout prop on <ThirdwebProvider />`;\n\n/**\n * @returns the current active wallet instance\n */\n\nfunction useWallet(walletId) {\n  const context = useWalletContext();\n  invariant(context, \"useWallet() hook must be used within a <ThirdwebProvider/>\");\n  const activeWallet = context.activeWallet;\n  if (!activeWallet) {\n    return undefined;\n  }\n\n  // if walletId is provided, return the wallet instance only if it matches the walletId\n  if (walletId) {\n    if (activeWallet.walletId === walletId) {\n      return activeWallet;\n    } else {\n      return undefined;\n    }\n  }\n  return activeWallet;\n}\n\n/**\n * @returns the current active wallet's configuration object\n */\nfunction useWalletConfig() {\n  const context = useWalletContext();\n  invariant(context, \"useWallet() hook must be used within a <ThirdwebProvider/>\");\n  return context.activeWalletConfig;\n}\n\n/**\n *\n * @returns `supportedWallets` configured in the `<ThirdwebProvider/>`\n */\nfunction useWallets() {\n  const context = useWalletContext();\n  invariant(context, \"useWallets() hook must be used within a <ThirdwebProvider/>\");\n  return context.wallets;\n}\n\n/**\n *\n * @returns a method to connect to a wallet class\n */\nfunction useConnect() {\n  const context = useWalletContext();\n  invariant(context, \"useConnect() hook must be used within a <ThirdwebProvider/>\");\n  return context.connect;\n}\n\n/**\n *\n * @returns a method to disconnect from the current active wallet\n */\nfunction useDisconnect() {\n  const context = useWalletContext();\n  invariant(context, \"useDisconnect() hook must be used within a <ThirdwebProvider/>\");\n  return context.disconnect;\n}\n\n/**\n *\n * @returns the connection status of the wallet\n *\n * It can be one of the following:\n * 1. `unknown` - when wallet connection status is not yet known\n * 2. `connecting` - when wallet is connecting\n * 3. `connected` - when wallet is connected\n * 4. `disconnected` - when wallet is disconnected\n *\n */\nfunction useConnectionStatus() {\n  const context = useWalletContext();\n  invariant(context, \"useConnectionStatus() must be used within a <ThirdwebProvider/>\");\n  return context.connectionStatus;\n}\n\n/**\n *\n * @returns a method to create an instance of given wallet class\n */\nfunction useSetConnectionStatus() {\n  const context = useWalletContext();\n  invariant(context, \"useSetConnectionStatus() must be used within a <ThirdwebProvider/>\");\n  return context.setConnectionStatus;\n}\n\n/**\n *\n * @returns a method to create an instance of given wallet class\n */\nfunction useCreateWalletInstance() {\n  const context = useWalletContext();\n  invariant(context, \"useCreateWalletInstance() must be used within a <ThirdwebProvider/>\");\n  return context.createWalletInstance;\n}\n\n/**\n *\n * @returns a method to connect the wallet to network/chain with given chainId\n */\nfunction useSwitchChain() {\n  const context = useWalletContext();\n  invariant(context, \"useSwitchChain() must be used within a <ThirdwebProvider/>\");\n  return context.switchChain;\n}\n\n/**\n *\n * @returns a method to set a connected wallet instance\n */\nfunction useSetConnectedWallet() {\n  const context = useWalletContext();\n  invariant(context, \"useSwitchChain() must be used within a <ThirdwebProvider/>\");\n  return context.setConnectedWallet;\n}\nconst TW_CACHE_KEY_PREFIX = \"tw-cache\";\n\n/**\n * @internal\n */\nfunction enforceCachePrefix(input) {\n  return [TW_CACHE_KEY_PREFIX, ...input.filter(i => typeof i !== \"string\" || i !== TW_CACHE_KEY_PREFIX)];\n}\n\n/**\n * @internal\n */\nfunction createContractCacheKey() {\n  let contractAddress = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : constants.AddressZero;\n  let input = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return enforceCachePrefix([\"contract\", contractAddress, ...input]);\n}\n\n/**\n @internal\n */\nfunction createCacheKeyWithNetwork(input, chainId) {\n  return enforceCachePrefix(cacheKeys.network.active(chainId).concat(input));\n}\n\n/**\n * @internal\n */\nfunction invalidateContractAndBalances(queryClient, contractAddress, chainId) {\n  return Promise.all([queryClient.invalidateQueries(enforceCachePrefix(createCacheKeyWithNetwork(createContractCacheKey(contractAddress), chainId))), queryClient.invalidateQueries(enforceCachePrefix(createCacheKeyWithNetwork([\"balance\"], chainId)))]);\n}\n\n/**\n @internal\n */\nconst cacheKeys = {\n  auth: {\n    user: () => enforceCachePrefix([\"user\"])\n  },\n  network: {\n    active: chainId => enforceCachePrefix([\"chainId\", chainId])\n  },\n  wallet: {\n    balance: (chainId, walletAddress, tokenAddress) => enforceCachePrefix(createCacheKeyWithNetwork(enforceCachePrefix([\"balance\", {\n      walletAddress,\n      tokenAddress\n    }]), chainId))\n  },\n  contract: {\n    read: (contractAddress, fnIdentity) => createContractCacheKey(contractAddress, [\"read\", fnIdentity]),\n    type: contractAddress => createContractCacheKey(contractAddress, [\"contract-type\"]),\n    compilerMetadata: contractAddress => createContractCacheKey(contractAddress, [\"publish-metadata\"]),\n    typeAndCompilerMetadata: contractAddress => createContractCacheKey(contractAddress, [\"contract-type-and-metadata\"]),\n    metadata: contractAddress => createContractCacheKey(contractAddress, [\"metadata\"]),\n    extractFunctions: contractAddress => createContractCacheKey(contractAddress, [\"extractFunctions\"]),\n    call: (contractAddress, functionName, args, overrides) => createContractCacheKey(contractAddress, [\"call\", functionName, args, overrides]),\n    accountFactory: {\n      getAll: contractAddress => createContractCacheKey(contractAddress, [\"accountFactory\"]),\n      isAccountDeployed: (contractAdress, admin) => createContractCacheKey(contractAdress, [\"isAccountDeployed\", admin]),\n      getAllForAddress: (contractAdress, address) => createContractCacheKey(contractAdress, [\"getAllForAddress\", address])\n    },\n    account: {\n      signers: contractAddress => createContractCacheKey(contractAddress, [\"account\", \"signers\"])\n    },\n    app: {\n      get: contractAddress => createContractCacheKey(contractAddress, [\"appURI\"])\n    },\n    events: {\n      getEvents: (contractAddress, eventName) => createContractCacheKey(contractAddress, [\"events\", \"getEvents\", {\n        eventName\n      }]),\n      getAllEvents: contractAddress => createContractCacheKey(contractAddress, [\"events\", \"getAllEvents\"])\n    },\n    // specific contract types\n    nft: {\n      get: (contractAddress, tokenId) => createContractCacheKey(contractAddress, [\"get\", {\n        tokenId\n      }]),\n      balanceOf: (contractAddress, owner, tokenId) => createContractCacheKey(contractAddress, [\"balanceOf\", {\n        owner,\n        tokenId\n      }]),\n      query: {\n        all: (contractAddress, params) => createContractCacheKey(contractAddress, params ? [\"query\", \"all\", params] : [\"query\", \"all\"]),\n        totalCirculatingSupply: contractAddress => createContractCacheKey(contractAddress, [\"query\", \"totalCirculatingSupply\"]),\n        totalCount: contractAddress => createContractCacheKey(contractAddress, [\"query\", \"totalCount\"]),\n        owned: {\n          all: (contractAddress, owner) => createContractCacheKey(contractAddress, [\"query\", \"owned\", \"all\", owner])\n        }\n      },\n      sharedMetadata: {\n        get: contractAddress => createContractCacheKey(contractAddress)\n      },\n      drop: {\n        getAllUnclaimed: (contractAddress, params) => createContractCacheKey(contractAddress, params ? [\"getAllUnclaimed\", params] : [\"getAllUnclaimed\"]),\n        getAllClaimed: (contractAddress, params) => createContractCacheKey(contractAddress, params ? [\"getAllClaimed\", params] : [\"getAllClaimed\"]),\n        totalUnclaimedSupply: contractAddress => createContractCacheKey(contractAddress, [\"totalUnclaimedSupply\"]),\n        totalClaimedSupply: contractAddress => createContractCacheKey(contractAddress, [\"totalClaimedSupply\"]),\n        revealer: {\n          getBatchesToReveal: (contractAddress, params) => createContractCacheKey(contractAddress, params ? [\"getBatchesToReveal\", params] : [\"getBatchesToReveal\"])\n        }\n      }\n    },\n    token: {\n      totalSupply: contractAddress => createContractCacheKey(contractAddress, [\"totalSupply\"]),\n      decimals: contractAddress => createContractCacheKey(contractAddress, [\"decimals\"]),\n      balanceOf: (contractAddress, walletAddress) => createContractCacheKey(contractAddress, [\"balanceOf\", {\n        walletAddress\n      }])\n    },\n    marketplace: {\n      getListing: (contractAddress, listingId) => createContractCacheKey(contractAddress, [\"getListing\", {\n        listingId\n      }]),\n      getAllListings: (contractAddress, params) => createContractCacheKey(contractAddress, params ? [\"getAllListings\", params] : [\"getAllListings\"]),\n      getTotalCount: contractAddress => createContractCacheKey(contractAddress, [\"getTotalCount\"]),\n      getActiveListings: (contractAddress, params) => createContractCacheKey(contractAddress, params ? [\"getActiveListings\", params] : [\"getActiveListings\"]),\n      auction: {\n        getBidBufferBps: (contractAddress, listingId) => createContractCacheKey(contractAddress, [\"auction\", \"getBidBufferBps\", {\n          listingId\n        }]),\n        getWinningBid: (contractAddress, listingId) => createContractCacheKey(contractAddress, [\"auction\", \"getWinningBid\", {\n          listingId\n        }]),\n        getMinimumNextBid: (contractAddress, listingId) => createContractCacheKey(contractAddress, [\"auction\", \"getMinimumNextBid\", {\n          listingId\n        }]),\n        getWinner: (contractAddress, listingId) => createContractCacheKey(contractAddress, [\"auction\", \"getWinner\", {\n          listingId\n        }])\n      },\n      directListings: {\n        getAll: (contractAddress, params) => createContractCacheKey(contractAddress, params ? [\"directListings\", \"getAll\", params] : [\"directListings\", \"getAll\"]),\n        getAllValid: (contractAddress, params) => createContractCacheKey(contractAddress, params ? [\"directListings\", \"getAllValid\", params] : [\"directListings\", \"getAllValid\"]),\n        getListing: (contractAddress, listingId) => createContractCacheKey(contractAddress, [\"directListings\", \"getListing\", {\n          listingId\n        }]),\n        getTotalCount: contractAddress => createContractCacheKey(contractAddress, [\"directListings\", \"getTotalCount\"])\n      },\n      englishAuctions: {\n        getAll: (contractAddress, params) => createContractCacheKey(contractAddress, params ? [\"englishAuctions\", \"getAll\", params] : [\"englishAuctions\", \"getAll\"]),\n        getAllValid: (contractAddress, params) => createContractCacheKey(contractAddress, params ? [\"englishAuctions\", \"getAllValid\", params] : [\"englishAuctions\", \"getAllValid\"]),\n        getAuction: (contractAddress, auctionId) => createContractCacheKey(contractAddress, [\"englishAuctions\", \"getAuction\", {\n          auctionId\n        }]),\n        getWinningBid: (contractAddress, auctionId) => createContractCacheKey(contractAddress, [\"englishAuctions\", \"getWinningBid\", {\n          auctionId\n        }]),\n        getTotalCount: contractAddress => createContractCacheKey(contractAddress, [\"englishAuctions\", \"getTotalCount\"])\n      }\n    }\n  },\n  // extensions\n  extensions: {\n    claimConditions: {\n      getActive: (contractAddress, tokenId, options) => createContractCacheKey(contractAddress, tokenId ? [\"claimConditions\", \"getActive\", {\n        tokenId\n      }, options] : [\"claimConditions\", \"getActive\", options]),\n      getAll: (contractAddress, tokenId, options) => createContractCacheKey(contractAddress, tokenId ? [\"claimConditions\", \"getAll\", {\n        tokenId\n      }, options] : [\"claimConditions\", \"getAll\", options]),\n      getClaimerProofs: (contractAddress, tokenId) => createContractCacheKey(contractAddress, tokenId ? [\"claimConditions\", \"getClaimerProofs\", {\n        tokenId\n      }] : [\"claimConditions\", \"getClaimerProofs\"]),\n      getClaimIneligibilityReasons: (contractAddress, params, tokenId) => createContractCacheKey(contractAddress, tokenId ? [\"claimConditions\", \"getIneligibilityReasons\", {\n        tokenId\n      }, params] : [\"claimConditions\", \"getIneligibilityReasons\", params]),\n      // combinations of queries cache keys\n      useActiveClaimConditionForWallet: (contractAddress, walletAddress, tokenId) => createContractCacheKey(contractAddress, tokenId ? [\"claimConditions\", \"useActiveClaimConditionForWallet\", {\n        tokenId,\n        walletAddress\n      },,] : [\"claimConditions\", \"getIneligibilityReasons\", {\n        walletAddress\n      }])\n    },\n    // primary sale contracts\n    sales: {\n      getRecipient: contractAddress => createContractCacheKey(contractAddress, [\"sales\"])\n    },\n    // royalties\n    royalties: {\n      getDefaultRoyaltyInfo: contractAddress => createContractCacheKey(contractAddress, [\"royalties\"])\n    },\n    // platform fees\n    platformFees: {\n      get: contractAddress => createContractCacheKey(contractAddress, [\"platformFees\"])\n    },\n    // contract metadata\n    metadata: {\n      get: contractAddress => createContractCacheKey(contractAddress, [\"metadata\"])\n    },\n    roles: {\n      getAll: contractAddress => createContractCacheKey(contractAddress, [\"roles\"]),\n      get: (contractAddress, role) => createContractCacheKey(contractAddress, [\"roles\", {\n        role\n      }])\n    }\n  }\n};\nconst AUTH_TOKEN_STORAGE_KEY = \"auth_token_storage_key\";\n\n/**\n * Hook to securely login to a backend with the connected wallet. The backend\n * authentication URL must be configured on the ThirdwebProvider.\n *\n * @returns - A function to invoke to login with the connected wallet, and an isLoading state.\n *\n * @see {@link https://portal.thirdweb.com/react/react.uselogin?utm_source=sdk | Documentation}\n *\n * @beta\n */\nfunction useLogin() {\n  const queryClient = useQueryClient();\n  const authConfig = useThirdwebAuthContext();\n  const wallet = useWallet();\n  const login = useMutation({\n    mutationFn: async () => {\n      invariant(authConfig, \"Please specify an authConfig in the ThirdwebProvider\");\n      invariant(wallet, \"You need a connected wallet to login.\");\n      invariant(authConfig.authUrl, \"Please specify an authUrl in the authConfig.\");\n      const address = await wallet.getAddress();\n      const chainId = await wallet.getChainId();\n      let res = await fetch(`${authConfig.authUrl}/payload`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          address,\n          chainId: chainId.toString()\n        })\n      });\n      if (!res.ok) {\n        throw new Error(`Failed to get payload with status code ${res.status}`);\n      }\n      let payloadData;\n      try {\n        ({\n          payload: payloadData\n        } = await res.json());\n      } catch {\n        throw new Error(`Failed to get payload`);\n      }\n      const payload = await signLoginPayload({\n        wallet,\n        payload: payloadData\n      });\n      res = await fetch(`${authConfig.authUrl}/login`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          payload\n        }),\n        credentials: \"include\"\n      });\n      if (!res.ok) {\n        const data = await res.json();\n        if (data.error) {\n          throw new Error(data.error);\n        }\n        throw new Error(`Login request failed with status code ${res.status}`);\n      }\n      const {\n        token\n      } = await res.json();\n      await authConfig.secureStorage?.setItem(AUTH_TOKEN_STORAGE_KEY, token);\n      queryClient.invalidateQueries(cacheKeys.auth.user());\n      return token;\n    }\n  });\n  return {\n    login: () => login.mutateAsync(),\n    isLoading: login.isLoading\n  };\n}\n\n/**\n * Hook to logout the connected wallet from the backend.\n * The backend logout URL must be configured on the ThirdwebProvider.\n *\n * @returns - A function to invoke to logout.\n *\n * @see {@link https://portal.thirdweb.com/react/react.uselogout?utm_source=sdk | Documentation}\n *\n * @beta\n */\nfunction useLogout() {\n  const queryClient = useQueryClient();\n  const authConfig = useThirdwebAuthContext();\n  const logout = useMutation({\n    mutationFn: async () => {\n      invariant(authConfig, \"Please specify an authConfig in the ThirdwebProvider\");\n      invariant(authConfig.authUrl, \"Please specify an authUrl in the authConfig.\");\n      await fetch(`${authConfig.authUrl}/logout`, {\n        method: \"POST\",\n        credentials: \"include\"\n      });\n      authConfig.secureStorage?.removeItem(AUTH_TOKEN_STORAGE_KEY);\n      queryClient.invalidateQueries(cacheKeys.auth.user());\n    }\n  });\n  return {\n    logout: logout.mutateAsync,\n    isLoading: logout.isLoading\n  };\n}\n\n/**\n * Hook to get the currently logged in user.\n *\n * @returns - The currently logged in user or null if not logged in, as well as a loading state.\n *\n * @see {@link https://portal.thirdweb.com/react/react.useuser?utm_source=sdk | Documentation}\n *\n * @beta\n */\nfunction useUser() {\n  const authConfig = useThirdwebAuthContext();\n  const {\n    data: user,\n    isLoading\n  } = useQuery(cacheKeys.auth.user(), async () => {\n    invariant(authConfig, \"Please specify an authConfig in the ThirdwebProvider\");\n    invariant(authConfig.authUrl, \"Please specify an authUrl in the authConfig.\");\n    const token = await authConfig.secureStorage?.getItem(AUTH_TOKEN_STORAGE_KEY);\n    // We include credentials so we can getUser even if API is on different URL\n    const params = {\n      credentials: \"include\",\n      ...(token ? {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      } : {})\n    };\n    const res = await fetch(`${authConfig.authUrl}/user`, params);\n    return await res.json();\n  }, {\n    enabled: !!authConfig\n  });\n  return {\n    user,\n    isLoggedIn: !!user,\n    isLoading\n  };\n}\n\n/**\n * Hook to switch the account of the active wallet\n *\n * @returns - A function to invoke to switch account.\n *\n * @see {@link https://portal.thirdweb.com/react/react.useswitchaccount?utm_source=sdk | Documentation}\n *\n * @beta\n */\nfunction useSwitchAccount() {\n  const queryClient = useQueryClient();\n  const authConfig = useThirdwebAuthContext();\n  const switchAccount = useMutation({\n    mutationFn: async address => {\n      invariant(authConfig, \"Please specify an authConfig in the ThirdwebProvider\");\n      invariant(authConfig.authUrl, \"Please specify an authUrl in the authConfig.\");\n      await fetch(`${authConfig.authUrl}/switch-account`, {\n        method: \"POST\",\n        credentials: \"include\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          address\n        })\n      });\n      queryClient.invalidateQueries(cacheKeys.auth.user());\n    }\n  });\n  return {\n    switchAccount: switchAccount.mutateAsync,\n    isLoading: switchAccount.isLoading\n  };\n}\nfunction useAuth() {\n  const wallet = useWallet();\n  const authConfig = useThirdwebAuthContext();\n  return useMemo(() => {\n    if (!authConfig?.domain) {\n      return undefined;\n    }\n    if (!wallet) {\n      return undefined;\n    }\n    return new ThirdwebAuth(wallet, authConfig.domain);\n  }, [wallet, authConfig?.domain]);\n}\nconst ThirdwebAuthProvider = _ref => {\n  let {\n    value,\n    children\n  } = _ref;\n  // Remove trailing slash from URL if present\n  const authContext = useMemo(() => {\n    if (!value) {\n      return undefined;\n    }\n    const context = {\n      ...value,\n      authUrl: value.authUrl?.replace(/\\/$/, \"\")\n    };\n    return context;\n  }, [value]);\n  return /*#__PURE__*/jsxs(ThirdwebAuthContext.Provider, {\n    value: authContext,\n    children: [children, /*#__PURE__*/jsx(ChangeActiveWalletOnAccountSwitch, {})]\n  });\n};\nfunction ChangeActiveWalletOnAccountSwitch() {\n  const wallet = useWallet();\n  const {\n    logout\n  } = useLogout();\n  const {\n    switchAccount\n  } = useSwitchAccount();\n  const authConfig = useThirdwebAuthContext();\n  const queryClient = useQueryClient();\n\n  // When active wallet switches, switch the active account cookie and invalidate user query\n  useEffect(() => {\n    const handleSwitchAccount = async data => {\n      if (!data.address) {\n        return;\n      }\n      try {\n        await switchAccount(data.address);\n      } catch (err) {\n        console.debug(`[Auth] Failed to switch account to ${data.address} with error:\\n`, err);\n      }\n    };\n    const handleLogout = async () => {\n      try {\n        await logout();\n      } catch (err) {\n        console.debug(`[Auth] Failed to logout with error:\\n`, err);\n      }\n    };\n    const shouldAddListener = !!wallet && authConfig && authConfig.authUrl;\n    if (shouldAddListener) {\n      wallet.addListener(\"connect\", handleSwitchAccount);\n      wallet.addListener(\"change\", handleSwitchAccount);\n      wallet.addListener(\"disconnect\", handleLogout);\n    }\n    return () => {\n      if (shouldAddListener) {\n        wallet.removeListener(\"connect\", handleSwitchAccount);\n        wallet.removeListener(\"change\", handleSwitchAccount);\n        wallet.removeListener(\"disconnect\", handleLogout);\n      }\n    };\n  }, [wallet, queryClient, authConfig, logout, switchAccount]);\n  return null;\n}\nfunction useUpdateChainsWithClientId(supportedChains, activeChain, clientId) {\n  const supportedChainsWithKey = useMemo(() => {\n    return supportedChains.map(chain => updateChainRPCs(chain, clientId));\n  }, [supportedChains, clientId]);\n  const activeChainIdOrObjWithKey = useMemo(() => {\n    if (!activeChain || typeof activeChain === \"string\" || typeof activeChain === \"number\") {\n      return activeChain;\n    }\n    return updateChainRPCs(activeChain, clientId);\n  }, [activeChain, clientId]);\n  return [supportedChainsWithKey, activeChainIdOrObjWithKey];\n}\nconst ThirdwebConfigContext = /* @__PURE__ */createContext(undefined);\nconst ThirdwebConfigProvider = _ref => {\n  let {\n    value,\n    children\n  } = _ref;\n  return /*#__PURE__*/jsx(ThirdwebConfigContext.Provider, {\n    value: value,\n    children: children\n  });\n};\nfunction useThirdwebConfigContext() {\n  const context = useContext(ThirdwebConfigContext);\n  invariant(context, \"useThirdwebConfigContext() hook must be used within a <ThirdwebProvider/>\");\n  return context;\n}\nconst ThirdwebSDKContext = /* @__PURE__ */createContext({});\n\n// eslint-disable-next-line turbo/no-undeclared-env-vars, better-tree-shaking/no-top-level-side-effects\nconst __DEV__ = process.env.NODE_ENV !== \"production\";\n\n/**\n * @internal\n */\nfunction useSDKContext() {\n  const ctx = useContext(ThirdwebSDKContext);\n  invariant(ctx._inProvider, \"useSDK must be called from within a ThirdwebProvider, did you forget to wrap your app in a <ThirdwebProvider />?\");\n  return ctx;\n}\n\n/**\n *\n * @returns {@link ThirdwebSDK}\n * Access the instance of the thirdweb SDK created by the ThirdwebProvider\n * to call methods using the connected wallet on the desiredChainId.\n * @example\n * ```javascript\n * const sdk = useSDK();\n * ```\n */\nfunction useSDK() {\n  const {\n    sdk\n  } = useSDKContext();\n  return sdk;\n}\n\n/**\n * @internal\n */\nfunction useSDKChainId() {\n  const sdk = useSDK();\n  return sdk?._chainId;\n}\nconst INITIAL_CONTEXT_VALUE = {\n  wallet: undefined,\n  address: undefined,\n  chainId: undefined,\n  signer: undefined\n};\nconst ThirdwebConnectedWalletContext = /* @__PURE__ */createContext(undefined);\nconst ThirdwebConnectedWalletProvider = _ref => {\n  let {\n    signer,\n    children\n  } = _ref;\n  const {\n    chains,\n    clientId\n  } = useThirdwebConfigContext();\n  const storage = useSDK()?.storage;\n  const [contextValue, setContextValue] = useState({\n    ...INITIAL_CONTEXT_VALUE,\n    signer: signer ? signer : undefined\n  });\n  useEffect(() => {\n    setContextValue(val => ({\n      ...val,\n      signer: signer ? signer : undefined\n    }));\n  }, [signer]);\n  useEffect(() => {\n    if (!storage) {\n      return;\n    }\n    let s = signer;\n    if (signer) {\n      // just get both of these up front and keep them around with the context\n      Promise.all([signer.getAddress(), signer.getChainId()]).then(_ref2 => {\n        let [address, chainId] = _ref2;\n        const chain = chains.find(c => c.chainId === chainId);\n        let rpcUrl = undefined;\n        if (chain) {\n          try {\n            rpcUrl = getValidChainRPCs(chain, clientId)[0];\n          } catch (e) {\n            // failed to get a viable rpc url, nothing we can do\n            console.error(e);\n          }\n        }\n\n        // only if the signer is still the same!\n        if (signer === s) {\n          const wallet = new UserWallet(signer, {\n            readonlySettings: rpcUrl ? {\n              rpcUrl,\n              chainId\n            } : undefined\n          }, storage);\n          setContextValue({\n            wallet,\n            address,\n            chainId,\n            signer\n          });\n        }\n      }).catch(err => {\n        if (__DEV__) {\n          console.warn(\"failed to get wallet instance in `<ThirdwebConnectedWalletProvider />`\", err);\n        }\n      });\n    } else {\n      // if signer is not provided, re-set the context value to initial values\n      setContextValue(INITIAL_CONTEXT_VALUE);\n    }\n    return () => {\n      // set the previous signer to undefined because it is invalid now\n      s = undefined;\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [signer, clientId]);\n  return /*#__PURE__*/jsx(ThirdwebConnectedWalletContext.Provider, {\n    value: contextValue,\n    children: children\n  });\n};\nfunction useThirdwebConnectedWalletContext() {\n  const context = useContext(ThirdwebConnectedWalletContext);\n  invariant(context, \"useThirdwebConnectedWalletContext() hook must be used within a <ThirdwebProvider/>\");\n  return context;\n}\nconst WrappedThirdwebSDKProvider = _ref => {\n  let {\n    sdkOptions = {},\n    storageInterface,\n    supportedChains,\n    activeChain,\n    signer,\n    children,\n    clientId,\n    secretKey\n  } = _ref;\n  const activeChainId = useMemo(() => {\n    if (!activeChain) {\n      return supportedChains[0]?.chainId;\n    }\n    if (typeof activeChain === \"number\") {\n      return activeChain;\n    }\n    if (typeof activeChain === \"string\") {\n      return supportedChains.find(c => c.slug === activeChain)?.chainId;\n    }\n    return activeChain.chainId;\n  }, [activeChain, supportedChains]);\n  const sdk = useMemo(() => {\n    let chainId = activeChainId;\n    const supportedChain = supportedChains.find(c => c.chainId === chainId);\n    if (!supportedChain && chainId !== undefined) {\n      console.warn(`The chainId ${chainId} is not in the configured chains, please add it to the ThirdwebProvider`);\n      // reset the chainId as to not trigger an error in the sdk constructor\n      chainId = undefined;\n    }\n    let readonlySettings = undefined;\n    if (supportedChain && supportedChain.rpc.length > 0) {\n      try {\n        const rpcUrl = getValidChainRPCs(supportedChain, clientId)[0];\n        readonlySettings = {\n          chainId: supportedChain.chainId,\n          rpcUrl\n        };\n      } catch (e) {\n        // no-op\n      }\n    }\n\n    // TODO: find a better way to fix the type error\n\n    const mergedOptions = {\n      readonlySettings,\n      ...sdkOptions,\n      supportedChains: supportedChains\n    };\n    let sdk_ = undefined;\n    if (chainId) {\n      // sdk from chainId\n      sdk_ = new ThirdwebSDK(chainId, {\n        ...mergedOptions,\n        clientId,\n        secretKey\n      }, storageInterface);\n    }\n    // if we still have no sdk fall back to the first element in chains\n    if (!sdk_) {\n      if (supportedChains.length > 0) {\n        chainId = supportedChains[0].chainId;\n        sdk_ = new ThirdwebSDK(chainId, mergedOptions, storageInterface);\n      } else {\n        console.error(\"No chains configured, please pass a chain or chains to the ThirdwebProvider\");\n        return undefined;\n      }\n    }\n\n    // set the chainId on the sdk instance to compare things later\n    sdk_._chainId = chainId;\n    return sdk_;\n  }, [activeChainId, supportedChains, sdkOptions, storageInterface, clientId, secretKey]);\n  useEffect(() => {\n    // if we have an sdk and a signer update the signer\n    if (sdk && sdk._chainId === activeChainId) {\n      if (signer) {\n        sdk.updateSignerOrProvider(signer);\n      } else if (activeChainId) {\n        sdk.updateSignerOrProvider(activeChainId);\n      }\n    }\n    // we know what we're doing\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [sdk, sdk?._chainId, signer, activeChainId]);\n  const ctxValue = useMemo(() => ({\n    sdk: sdk && sdk._chainId === activeChainId ? sdk : undefined,\n    _inProvider: true\n  }), [activeChainId, sdk]);\n  return /*#__PURE__*/jsx(ThirdwebSDKContext.Provider, {\n    value: ctxValue,\n    children: children\n  });\n};\n\n/**\n * A basic wrapper around the Thirdweb SDK.\n *\n * You can use this in order to be able to pass a provider & signer directly to the SDK.\n *\n * @remarks Utilizing this provider will mean hooks for wallet management are not available, if you need those please use the {@link ThirdwebProvider} instead.\n *\n * @public\n */\nconst ThirdwebSDKProvider = _ref2 => {\n  let {\n    signer,\n    children,\n    queryClient,\n    supportedChains: _supportedChains,\n    activeChain,\n    clientId,\n    ...restProps\n  } = _ref2;\n  if (!clientId) {\n    checkClientIdOrSecretKey(\"No API key. Please provide a clientId. It is required to access thirdweb's services. You can create a key at https://thirdweb.com/create-api-key\", clientId, undefined);\n  }\n  const supportedChains = _supportedChains || defaultChains;\n  const supportedChainsNonNull = useMemo(() => {\n    const isActiveChainObject = typeof activeChain === \"object\" && activeChain !== null;\n    if (!isActiveChainObject) {\n      return supportedChains;\n    }\n    const isActiveChainInSupportedChains = supportedChains.find(c => c.chainId === activeChain.chainId);\n\n    // if activeChain is not in supportedChains - add it\n    if (!isActiveChainInSupportedChains) {\n      return [...supportedChains, activeChain];\n    }\n\n    // if active chain is in supportedChains - replace it with object in activeChain\n    return supportedChains.map(c => c.chainId === activeChain.chainId ? activeChain : c);\n  }, [supportedChains, activeChain]);\n  const [supportedChainsWithKey, activeChainIdOrObjWithKey] = useUpdateChainsWithClientId(supportedChainsNonNull, activeChain || supportedChainsNonNull[0], clientId);\n  const mergedChains = useMemo(() => {\n    if (!activeChainIdOrObjWithKey || typeof activeChainIdOrObjWithKey === \"string\" || typeof activeChainIdOrObjWithKey === \"number\") {\n      return supportedChainsWithKey;\n    }\n    const _mergedChains = [...supportedChainsWithKey.filter(c => c.chainId !== activeChainIdOrObjWithKey.chainId), activeChainIdOrObjWithKey];\n    // return a _mergedChains uniqued by chainId key\n    return _mergedChains.filter((chain, index, self) => index === self.findIndex(c => c.chainId === chain.chainId));\n  }, [supportedChainsWithKey, activeChainIdOrObjWithKey]);\n  return /*#__PURE__*/jsx(ThirdwebConfigProvider, {\n    value: {\n      chains: mergedChains,\n      clientId\n    },\n    children: /*#__PURE__*/jsx(QueryClientProviderWithDefault, {\n      queryClient: queryClient,\n      children: /*#__PURE__*/jsx(WrappedThirdwebSDKProvider, {\n        signer: signer,\n        supportedChains: mergedChains,\n        clientId: clientId,\n        activeChain: activeChainIdOrObjWithKey,\n        ...restProps,\n        children: /*#__PURE__*/jsx(ThirdwebConnectedWalletProvider, {\n          signer: signer,\n          children: children\n        })\n      })\n    })\n  });\n};\nconst ThirdwebProviderCore = _ref => {\n  let {\n    createWalletStorage = createAsyncLocalStorage,\n    ...props\n  } = _ref;\n  const {\n    activeChain\n  } = props;\n  const supportedChains = props.supportedChains || defaultChains;\n  const supportedChainsNonNull = useMemo(() => {\n    const isActiveChainObject = typeof activeChain === \"object\" && activeChain !== null;\n    if (!isActiveChainObject) {\n      return supportedChains;\n    }\n    const isActiveChainInSupportedChains = supportedChains.find(c => c.chainId === activeChain.chainId);\n\n    // if activeChain is not in supportedChains - add it\n    if (!isActiveChainInSupportedChains) {\n      return [...supportedChains, activeChain];\n    }\n\n    // if active chain is in supportedChains - replace it with object in activeChain\n    return supportedChains.map(c => c.chainId === activeChain.chainId ? activeChain : c);\n  }, [supportedChains, activeChain]);\n  const [supportedChainsWithKey, activeChainIdOrObjWithKey] = useUpdateChainsWithClientId(supportedChainsNonNull, props.activeChain || supportedChainsNonNull[0], props.clientId);\n  const activeChainWithKey = useMemo(() => {\n    if (typeof activeChainIdOrObjWithKey === \"number\") {\n      const resolveChain = supportedChainsWithKey.find(chain => chain.chainId === activeChainIdOrObjWithKey);\n      if (!resolveChain) {\n        throw new Error(`Invalid chainId: ${activeChainIdOrObjWithKey}. It is not one of supportedChains`);\n      }\n      return resolveChain;\n    }\n    if (typeof activeChainIdOrObjWithKey === \"string\") {\n      const resolvedChain = supportedChainsWithKey.find(chain => chain.slug === activeChainIdOrObjWithKey);\n      if (!resolvedChain) {\n        throw new Error(`Invalid chain: \"${activeChainIdOrObjWithKey}\". It is not one of supportedChains`);\n      }\n      return resolvedChain;\n    }\n    return activeChainIdOrObjWithKey;\n  }, [activeChainIdOrObjWithKey, supportedChainsWithKey]);\n  const dAppMeta = props.dAppMeta;\n  return /*#__PURE__*/jsx(ThirdwebThemeContext.Provider, {\n    value: props.theme,\n    children: /*#__PURE__*/jsx(ThirdwebWalletProvider, {\n      chains: supportedChainsWithKey,\n      supportedWallets: props.supportedWallets,\n      shouldAutoConnect: props.autoConnect,\n      createWalletStorage: createWalletStorage,\n      dAppMeta: dAppMeta,\n      activeChain: activeChainWithKey,\n      autoSwitch: props.autoSwitch,\n      autoConnectTimeout: props.autoConnectTimeout,\n      clientId: props.clientId,\n      activeChainSetExplicitly: !!props.activeChain,\n      signerWallet: props.signerWallet,\n      children: /*#__PURE__*/jsx(ThirdwebSDKProviderWrapper, {\n        queryClient: props.queryClient,\n        sdkOptions: props.sdkOptions,\n        supportedChains: supportedChainsWithKey,\n        activeChain: activeChainWithKey,\n        storageInterface: props.storageInterface,\n        authConfig: props.authConfig,\n        clientId: props.clientId,\n        secretKey: props.secretKey,\n        children: /*#__PURE__*/jsx(ThirdwebAuthProvider, {\n          value: props.authConfig,\n          children: props.children\n        })\n      })\n    })\n  });\n};\nconst ThirdwebSDKProviderWrapper = _ref2 => {\n  let {\n    children,\n    ...props\n  } = _ref2;\n  const signer = useWalletContext()?.signer;\n  return /*#__PURE__*/jsx(ThirdwebSDKProvider, {\n    signer: signer,\n    ...props,\n    children: children\n  });\n};\nfunction useSupportedChains() {\n  const context = useContext(ThirdwebConfigContext);\n  invariant(context, \"useSupportedChains() hook must be used within a <ThirdwebProvider/>\");\n  return context.chains;\n}\n\n/**\n * A hook to get the native or (optional) ERC20 token balance of the connected wallet.\n *\n * @param tokenAddress - the address of the token contract, if empty will use the chain's native token\n * @returns the balance of the connected wallet (native or ERC20)\n * @beta\n */\nfunction useBalance(tokenAddress) {\n  const walletAddress = useAddress();\n  const {\n    wallet,\n    address,\n    chainId\n  } = useThirdwebConnectedWalletContext();\n  const cacheKey = useMemo(() => {\n    return cacheKeys.wallet.balance(chainId || -1, address, tokenAddress);\n  }, [chainId, tokenAddress, address]);\n  return useQuery(cacheKey, () => {\n    return wallet?.balance(tokenAddress);\n  }, {\n    // if user is not logged in no reason to try to fetch\n    enabled: !!wallet && !!walletAddress && !!chainId,\n    retry: true,\n    keepPreviousData: false\n  });\n}\n\n/**\n * @internal\n */\nfunction useConnectedWallet() {\n  const context = useContext(ThirdwebConnectedWalletContext);\n  invariant(context, \"useConnectedWallet() hook must be used within a <ThirdwebProvider/>\");\n  return context.signer;\n}\n\n/**\n * Hook for accessing the address of the connected wallet\n *\n * ```javascript\n * import { useAddress } from \"@thirdweb-dev/react\"\n * ```\n *\n *\n * @example\n * To get the address of the connected wallet, you can use the hook as follows:\n *\n * ```javascript\n * import { useAddress } from \"@thirdweb-dev/react\"\n *\n * const App = () => {\n *   const address = useAddress()\n *\n *   return <div>{address}</div>\n * }\n * ```\n *\n * The `address` variable will hold the address of the connected wallet if a user has connected using one of the supported wallet connection hooks.\n *\n * @see {@link https://portal.thirdweb.com/react/react.useaddress?utm_source=sdk | Documentation}\n *\n * @public\n */\nfunction useAddress() {\n  const context = useContext(ThirdwebConnectedWalletContext);\n  invariant(context, \"useAddress() hook must be used within a <ThirdwebProvider/>\");\n  return context.address;\n}\n\n/**\n * Hook for accessing the chain ID of the network the current wallet is connected to\n *\n * ```javascript\n * import { useChainId } from \"@thirdweb-dev/react\"\n * ```\n *\n * @example\n * You can get the chain ID of the connected wallet by using the hook as follows:\n * ```javascript\n * import { useChainId } from \"@thirdweb-dev/react\"\n *\n * const App = () => {\n *   const chainId = useChainId()\n *\n *   return <div>{chainId}</div>\n * }\n * ```\n * @see {@link https://portal.thirdweb.com/react/react.usechainid?utm_source=sdk | Documentation}\n * @public\n */\nfunction useChainId() {\n  const context = useContext(ThirdwebConnectedWalletContext);\n  invariant(context, \"useChainId() hook must be used within a <ThirdwebProvider/>\");\n  return context.chainId;\n}\n\n/**\n * Hook for accessing the active Chain the current wallet is connected to\n *\n * ```javascript\n * import { useChain } from \"@thirdweb-dev/react-core\"\n * ```\n *\n * @example\n * You can get the chain of the connected wallet by using the hook as follows:\n * ```javascript\n * import { useChain } from \"@thirdweb-dev/react-core\"\n *\n * const App = () => {\n *   const chain = useChain()\n *\n *   return <div>{chain.chainId}</div>\n * }\n * ```\n * @see {@link https://portal.thirdweb.com/react/react.useActiveChain?utm_source=sdk | Documentation}\n * @public\n */\nfunction useChain() {\n  const chainId = useChainId();\n  const chains = useSupportedChains();\n  const chain = useMemo(() => {\n    return chains.find(_chain => _chain.chainId === chainId);\n  }, [chainId, chains]);\n  const unknownChain = useMemo(() => {\n    if (!chain) {\n      return defaultChains.find(c => c.chainId === chainId);\n    }\n  }, [chainId, chain]);\n  return chain || unknownChain;\n}\n\n/**\n * @deprecated\n *\n * This hook is renamed to `useChain`\n *\n * use the `useChain` hook instead\n */\nfunction useActiveChain() {\n  return useChain();\n}\n\n// this hook is only for backwards compatibility\n\n/**\n *\n * @deprecated - use `useChain`, `useSwitchChain`, `useChainId` instead\n *\n * Hook for getting metadata about the network the current wallet is connected to and switching networks\n *\n * @example\n * ```javascript\n * import { useNetwork } from \"@thirdweb-dev/react\";\n *\n * const App = () => {\n *   const [, switchNetwork] = useNetwork();\n *   return (\n *      // switchNetwork is undefined if the wallet does not support programmatic network switching\n *      // 137 is the chainId for Polygon in this example\n *     <button onClick={() => switchNetwork(137)}>\n *        Switch Network\n *     </button>\n *   );\n * };\n```\n *\n * It's important to note that some wallet apps do not support programmatic network switching and switchNetwork will be undefined.\n * For those situations, you can typically switch networks in the wallet app this hook will still work.\n *\n * @public\n */\nfunction useNetwork() {\n  const chain = useChain();\n  const chainId = useChainId();\n  const switchChain = useSwitchChain();\n  const supportedChains = useSupportedChains();\n  const wallet = useWallet();\n  const isMetamaskInstalled = assertWindowEthereum(globalThis.window) ? globalThis.window.ethereum.isMetaMask : false;\n  const isCoinbaseInstalled = assertWindowEthereum(globalThis.window) ? globalThis.window.ethereum.isCoinbaseWallet : false;\n\n  // switch not supported if connected to a mobile wallet\n  const switchChainNotSupported = !wallet || wallet.walletId === walletIds.walletConnectV1 || wallet.walletId === walletIds.walletConnect || wallet.walletId === walletIds.metamask && !isMetamaskInstalled || wallet.walletId === walletIds.coinbase && !isCoinbaseInstalled;\n\n  // error when switching network\n  const [error, setError] = useState(undefined);\n\n  // loading: true when switching network\n  const [loading, setLoading] = useState(false);\n  const switchNetwork = useCallback(async _chainId => {\n    // reset error and loading\n    setLoading(true);\n    setError(undefined);\n    try {\n      await switchChain(_chainId);\n    } catch (e) {\n      setError(e);\n      setLoading(false);\n      return {\n        data: undefined,\n        error: e\n      };\n    }\n    setLoading(false);\n    return {\n      data: supportedChains.find(c => c.chainId === _chainId) || defaultChains.find(c => c.chainId === _chainId),\n      error: undefined\n    };\n  }, [switchChain, supportedChains]);\n  return [{\n    data: {\n      chain: chainId === undefined ? undefined : chain || {\n        chainId,\n        unsupported: true\n      },\n      chains: wallet ? supportedChains : []\n    },\n    error: error,\n    loading\n  }, switchChainNotSupported ? undefined : switchNetwork];\n}\n\n/**\n * A wallet address.\n * @beta\n */\n\n/**\n * A contract address.\n * @beta\n */\n\n/**\n * The parameters to pass to the mint and transfer functions.\n *\n * @beta\n */\n\n/**\n * The parameters to pass to the burn function.\n *\n * @beta\n */\n\n// NFTS //\n/**\n * The possible NFT contract types.\n * @example\n * ```javascript\n * const { contract } = useContract(\"{{contract_address}}\");\n * ```\n * @beta\n */\n/**\n * The possible Token contract types.\n * @example\n * ```javascript\n * const { contract } = useContract(\"{{contract_address}}\");\n * ```\n * @beta\n */\n/**\n * Possible NFT contract types.\n * @beta\n */\n/**\n * The params to pass to `useTransferNFT`.\n * @beta\n */\n/**\n * The params to pass to `useTransferBatchNFT`.\n * @beta\n */\n/**\n * The params to pass to `useMintNFTSupply`.\n * @beta\n */\n/**\n * The params for the {@link useMintNFT} hook mutation.\n *\n * @beta\n */\n/**\n * The return type of the {@link useMintNFT} hook.\n *\n * @beta\n */\n/**\n * The params for the {@link useBurnNFT} hook mutation.\n *\n * @beta\n */\n// DROPS //\n/**\n * The possible DROP contract types.\n * @beta\n */\n/**\n * The possible revealable contract types.\n * @beta\n */\n/**\n * The params for the {@link useDelayedRevealLazyMint} hook mutation.\n *\n * @beta\n */\n/**\n * The params for the {@link useRevealLazyMint} hook mutation.\n *\n * @beta\n */\n/**\n * The params for the {@link useClaimNFT} hook mutation.\n *\n * @beta\n */\n/**\n * The return type of the {@link useClaimNFT} hook.\n *\n * @beta\n */\n// MARKETPLACE //\n// TOKEN DROP //\n// Helpers\nfunction getErcs(contract) {\n  return {\n    erc1155: getErc1155(contract),\n    erc721: getErc721(contract),\n    erc20: getErc20(contract)\n  };\n}\nfunction getErc1155(contract) {\n  if (!contract) {\n    return undefined;\n  }\n  try {\n    if (\"erc1155\" in contract) {\n      return contract.erc1155;\n    }\n  } catch (error) {\n    return undefined;\n  }\n  return undefined;\n}\nfunction getErc721(contract) {\n  if (!contract) {\n    return undefined;\n  }\n  try {\n    if (\"erc721\" in contract) {\n      return contract.erc721;\n    }\n  } catch (error) {\n    return undefined;\n  }\n  return undefined;\n}\nfunction getErc20(contract) {\n  if (!contract) {\n    return undefined;\n  }\n  try {\n    if (\"erc20\" in contract) {\n      return contract.erc20;\n    }\n  } catch (error) {\n    return undefined;\n  }\n  return undefined;\n}\n\n/** @internal */\nfunction useQueryWithNetwork(queryKey, queryFn, options) {\n  const activeChainId = useSDKChainId();\n  const mergedOptions = {\n    ...options,\n    enabled: !!(activeChainId && options?.enabled)\n  };\n  return useQuery(createCacheKeyWithNetwork(queryKey, activeChainId), queryFn, mergedOptions);\n}\n\n/**\n * The options to be passed as the second parameter to the {@link useClaimIneligibilityReasons}` hook.\n *\n * @beta\n */\n\n/**\n * The params for the {@link useSetClaimConditions} hook mutation.\n *\n * @beta\n */\n\n/** **********************/\n/**     READ  HOOKS     **/\n/** **********************/\n/**\n * Get the active claim condition\n *\n * @example\n * ```javascript\n * const { data: activeClaimCondition, isLoading, error } = useActiveClaimCondition(contract);\n * ```\n *\n * @param contract - an instance of a contract that extends the ERC721, ERC1155 or ERC20 spec and implements the `claimConditions` extension.\n * @param tokenId - the id of the token to fetch the claim conditions for (if the contract is an ERC1155 contract)\n * @returns a response object with the currently active claim condition\n * @twfeature ERC20ClaimPhasesV2 | ERC20ClaimPhasesV1 | ERC20ClaimConditionsV2 | ERC20ClaimConditionsV1 | ERC721ClaimPhasesV2 | ERC721ClaimPhasesV1 | ERC721ClaimConditionsV2 | ERC721ClaimConditionsV1 | ERC1155ClaimPhasesV2 | ERC1155ClaimPhasesV1 | ERC1155ClaimConditionsV2 | ERC1155ClaimConditionsV1\n * @see {@link https://portal.thirdweb.com/react/react.useactiveclaimcondition?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useActiveClaimCondition(contract, tokenId, options) {\n  const contractAddress = contract?.getAddress();\n  const {\n    erc1155,\n    erc721,\n    erc20\n  } = getErcs(contract);\n  return useQueryWithNetwork(cacheKeys.extensions.claimConditions.getActive(contractAddress, tokenId, options), () => {\n    if (erc1155) {\n      requiredParamInvariant(tokenId, \"tokenId is required for ERC1155 claim conditions\");\n      return erc1155.claimConditions.getActive(tokenId, options);\n    }\n    if (erc721) {\n      return erc721.claimConditions.getActive(options);\n    }\n    if (erc20) {\n      return erc20.claimConditions.getActive(options);\n    }\n    throw new Error(\"Contract must be ERC721, ERC1155 or ERC20\");\n  }, {\n    // Checks that happen here:\n    // 1. if the contract is based on ERC1155 contract => tokenId cannot be `undefined`\n    // 2. if the contract is NOT based on ERC1155 => we have to have either an ERC721 or ERC20 contract\n    enabled: erc1155 ? tokenId !== undefined : !!erc721 || !!erc20\n  });\n}\n\n/**\n * Get claimer proofs\n *\n * @example\n * ```javascript\n * const { data: claimerProofs, isLoading, error } = useClaimerProofs(contract);\n * ```\n *\n * @param contract - an instance of a contract that extends the ERC721, ERC1155 or ERC20 spec and implements the `claimConditions` extension.\n * @param claimerAddress - the address of the claimer to fetch the claimer proofs for\n * @param tokenId - the id of the token to fetch the claimer proofs for (if the contract is an ERC1155 contract)\n * @param claimConditionId - optional the claim condition id to get the proofs for\n * @returns a response object with the snapshot for the provided address\n * @twfeature ERC20ClaimPhasesV2 | ERC20ClaimPhasesV1 | ERC20ClaimConditionsV2 | ERC20ClaimConditionsV1 | ERC721ClaimPhasesV2 | ERC721ClaimPhasesV1 | ERC721ClaimConditionsV2 | ERC721ClaimConditionsV1 | ERC1155ClaimPhasesV2 | ERC1155ClaimPhasesV1 | ERC1155ClaimConditionsV2 | ERC1155ClaimConditionsV1\n * @see {@link https://portal.thirdweb.com/react/react.useclaimerproofs?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useClaimerProofs(contract, claimerAddress, tokenId, claimConditionId) {\n  const contractAddress = contract?.getAddress();\n  const {\n    erc1155,\n    erc721,\n    erc20\n  } = getErcs(contract);\n  return useQueryWithNetwork(cacheKeys.extensions.claimConditions.getClaimerProofs(contractAddress, tokenId), () => {\n    if (erc1155) {\n      requiredParamInvariant(tokenId, \"tokenId is required for ERC1155 claim conditions\");\n      return erc1155.claimConditions.getClaimerProofs(tokenId, claimerAddress, claimConditionId);\n    }\n    if (erc721) {\n      return erc721.claimConditions.getClaimerProofs(claimerAddress, claimConditionId);\n    }\n    if (erc20) {\n      return erc20.claimConditions.getClaimerProofs(claimerAddress, claimConditionId);\n    }\n    throw new Error(\"Contract must be ERC721, ERC1155 or ERC20\");\n  }, {\n    // Checks that happen here:\n    // 1. if the contract is based on ERC1155 contract => tokenId cannot be `undefined`\n    // 2. if the contract is NOT based on ERC1155 => we have to have either an ERC721 or ERC20 contract\n    enabled: erc1155 ? tokenId !== undefined : !!erc721 || !!erc20\n  });\n}\n\n/**\n * Get all claim conditions\n *\n * @example\n * ```javascript\n * const { data: claimConditions, isLoading, error } = useClaimConditions(contract);\n * ```\n *\n * @param contract - an instance of a contract that extends the ERC721, ERC1155 or ERC20 spec and implements the `claimConditions` extension.\n * @param tokenId - the id of the token to fetch the claim conditions for (if the contract is an ERC1155 contract)\n * @returns a response object with the list of claim conditions\n * @twfeature ERC20ClaimPhasesV2 | ERC20ClaimPhasesV1 | ERC20ClaimConditionsV2 | ERC20ClaimConditionsV1 | ERC721ClaimPhasesV2 | ERC721ClaimPhasesV1 | ERC721ClaimConditionsV2 | ERC721ClaimConditionsV1 | ERC1155ClaimPhasesV2 | ERC1155ClaimPhasesV1 | ERC1155ClaimConditionsV2 | ERC1155ClaimConditionsV1\n * @see {@link https://portal.thirdweb.com/react/react.useclaimconditions?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useClaimConditions(contract, tokenId, options) {\n  const contractAddress = contract?.getAddress();\n  const {\n    erc1155,\n    erc721,\n    erc20\n  } = getErcs(contract);\n  return useQueryWithNetwork(cacheKeys.extensions.claimConditions.getAll(contractAddress, tokenId, options), () => {\n    if (erc1155) {\n      requiredParamInvariant(tokenId, \"tokenId is required for ERC1155 claim conditions\");\n      return erc1155.claimConditions.getAll(tokenId, options);\n    }\n    if (erc721) {\n      return erc721.claimConditions.getAll(options);\n    }\n    if (erc20) {\n      return erc20.claimConditions.getAll(options);\n    }\n    throw new Error(\"Contract must be ERC721, ERC1155 or ERC20\");\n  }, {\n    // Checks that happen here:\n    // 1. if the contract is based on ERC1155 contract => tokenId cannot be `undefined`\n    // 2. if the contract is NOT based on ERC1155 => we have to have either an ERC721 or ERC20 contract\n    enabled: erc1155 ? tokenId !== undefined : !!erc721 || !!erc20\n  });\n}\n\n/**\n * Get the reasons why a specific wallet can't claim\n *\n * @example\n * ```javascript\n * const { data: claimIneligibilityReasons, isLoading, error } = useClaimIneligibilityReasons(contract, { walletAddress: \"{{wallet_address}}\" });\n * ```\n *\n * @param contract - an instance of a contract that extends the  ERC20, ERC721 or ERC1155 spec and implements the `claimConditions` extension.\n * @param eligibilityParams - the parameters for the eligibility check, see: {@link ClaimIneligibilityParams}\n * @param tokenId - the id of the token to fetch the claim conditions for (if the contract is an ERC1155 contract)\n * @returns a response object with the reasons for the claim ineligibility\n * @twfeature ERC20ClaimPhasesV2 | ERC20ClaimPhasesV1 | ERC20ClaimConditionsV2 | ERC20ClaimConditionsV1 | ERC721ClaimPhasesV2 | ERC721ClaimPhasesV1 | ERC721ClaimConditionsV2 | ERC721ClaimConditionsV1 | ERC1155ClaimPhasesV2 | ERC1155ClaimPhasesV1 | ERC1155ClaimConditionsV2 | ERC1155ClaimConditionsV1\n * @see {@link https://portal.thirdweb.com/react/react.useclaimineligibilityreasons?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useClaimIneligibilityReasons(contract, params, tokenId) {\n  const contractAddress = contract?.getAddress();\n  const {\n    erc1155,\n    erc721,\n    erc20\n  } = getErcs(contract);\n  return useQueryWithNetwork(cacheKeys.extensions.claimConditions.getClaimIneligibilityReasons(contractAddress, params, tokenId), () => {\n    if (erc1155) {\n      requiredParamInvariant(tokenId, \"tokenId is required for ERC1155 claim ineligibility reasons\");\n      return erc1155.claimConditions.getClaimIneligibilityReasons(tokenId, params.quantity, params.walletAddress);\n    }\n    if (erc721) {\n      return erc721.claimConditions.getClaimIneligibilityReasons(params.quantity, params.walletAddress);\n    }\n    if (erc20) {\n      return erc20.claimConditions.getClaimIneligibilityReasons(params.quantity, params.walletAddress);\n    }\n    throw new Error(\"Contract must be ERC721, ERC1155 or ERC20\");\n  }, {\n    // Checks that happen here:\n    // 1. if the contract is based on ERC1155 contract => tokenId cannot be `undefined`\n    // 2. if the contract is NOT based on ERC1155 => we have to have either an ERC721 or ERC20 contract\n    // 3. has a params object been passed?\n    // 4. does params have an address in it?\n    enabled: (erc1155 ? tokenId !== undefined : !!erc721 || !!erc20) && !!params && !!params.walletAddress\n  });\n}\n\n/**\n * Get the active claim condition for a specific wallet\n *\n * @example\n * ```javascript\n * const { data: activeClaimConditionForWallet, isLoading, error } = useActiveClaimConditionForWallet(contract, \"{{wallet_address}}\");\n * ```\n *\n * @param contract - an instance of a contract that extends the  ERC20, ERC721 or ERC1155 spec and implements the `claimConditions` extension.\n * @param walletAddress - the wallet address to check the active claim condition for\n * @param tokenId - the id of the token to fetch the claim conditions for (if the contract is an ERC1155 contract)\n * @returns the active claim conditon for the wallet address or null if there is no active claim condition\n * @twfeature ERC20ClaimPhasesV2 | ERC20ClaimPhasesV1 | ERC20ClaimConditionsV2 | ERC20ClaimConditionsV1 | ERC721ClaimPhasesV2 | ERC721ClaimPhasesV1 | ERC721ClaimConditionsV2 | ERC721ClaimConditionsV1 | ERC1155ClaimPhasesV2 | ERC1155ClaimPhasesV1 | ERC1155ClaimConditionsV2 | ERC1155ClaimConditionsV1\n * @see {@link https://portal.thirdweb.com/react/react.useactiveclaimconditionforwallet?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useActiveClaimConditionForWallet(contract, walletAddress, tokenId) {\n  const sdk = useSDK();\n  const contractAddress = contract?.getAddress();\n  const {\n    erc1155,\n    erc721,\n    erc20\n  } = getErcs(contract);\n  return useQueryWithNetwork(cacheKeys.extensions.claimConditions.useActiveClaimConditionForWallet(contractAddress, walletAddress || \"_NO_WALLET_\", tokenId), async () => {\n    // if we do not have a walletAddress just do the same logic as basic useClaimCondition\n    if (!walletAddress) {\n      if (erc1155) {\n        requiredParamInvariant(tokenId, \"tokenId is required for ERC1155 claim conditions\");\n        return erc1155.claimConditions.getActive(tokenId);\n      }\n      if (erc721) {\n        return erc721.claimConditions.getActive();\n      }\n      if (erc20) {\n        return erc20.claimConditions.getActive();\n      }\n      throw new Error(\"Contract must be ERC721, ERC1155 or ERC20\");\n    }\n    invariant(sdk, \"sdk is required\");\n    let activeGeneralClaimCondition = null;\n    let claimerProofForWallet = null;\n    if (erc1155) {\n      requiredParamInvariant(tokenId, \"tokenId is required for ERC1155\");\n      const [cc, cp] = await Promise.all([erc1155.claimConditions.getActive(tokenId), erc1155.claimConditions.getClaimerProofs(tokenId, walletAddress)]);\n      activeGeneralClaimCondition = cc;\n      claimerProofForWallet = cp;\n    }\n    if (erc721) {\n      const [cc, cp] = await Promise.all([erc721.claimConditions.getActive(), erc721.claimConditions.getClaimerProofs(walletAddress)]);\n      activeGeneralClaimCondition = cc;\n      claimerProofForWallet = cp;\n    }\n    if (erc20) {\n      const [cc, cp] = await Promise.all([erc20.claimConditions.getActive(), erc20.claimConditions.getClaimerProofs(walletAddress)]);\n      activeGeneralClaimCondition = cc;\n      claimerProofForWallet = cp;\n    }\n    // if there is no active claim condition nothing matters, return null\n    if (!activeGeneralClaimCondition) {\n      return null;\n    }\n\n    // if there is no claimer proof then just fall back to the active general claim condition\n    if (!claimerProofForWallet) {\n      return activeGeneralClaimCondition;\n    }\n    const {\n      maxClaimable,\n      currencyAddress,\n      price\n    } = claimerProofForWallet;\n    const currencyWithOverride = currencyAddress || activeGeneralClaimCondition.currencyAddress;\n    const currencyMetadata = await fetchCurrencyMetadata(sdk.getProvider(), currencyWithOverride);\n    const normalizedPrize = price ? price === \"unlimited\" ? constants.MaxUint256 : utils.parseUnits(price, currencyMetadata.decimals) : null;\n    const priceWithOverride = normalizedPrize || activeGeneralClaimCondition.price;\n    const maxClaimableWithOverride = maxClaimable || activeGeneralClaimCondition.maxClaimablePerWallet;\n    const currencyValueWithOverride = await fetchCurrencyValue(sdk.getProvider(), currencyWithOverride, priceWithOverride);\n    return {\n      // inherit the entire claim condition\n      ...activeGeneralClaimCondition,\n      // overwrite all keys that could be changed based on overwrites\n      maxClaimablePerWallet: maxClaimableWithOverride,\n      price: priceWithOverride,\n      currency: currencyWithOverride,\n      currencyAddress: currencyWithOverride,\n      currencyMetadata: currencyValueWithOverride\n    };\n  }, {\n    // Checks that happen here:\n    // 1. if the contract is based on ERC1155 contract => tokenId cannot be `undefined`\n    // 2. if the contract is NOT based on ERC1155 => we have to have either an ERC721 or ERC20 contract\n    enabled: erc1155 ? tokenId !== undefined : !!erc721 || !!erc20\n  });\n}\n\n/** **********************/\n/**     WRITE HOOKS     **/\n/** **********************/\n\n/**\n * Set claim conditions\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const { contract } = useContract(\"{{contract_address}}\");\n *   const {\n *     mutate: setClaimConditions,\n *     isLoading,\n *     error,\n *   } = useSetClaimConditions(contract);\n *\n *   if (error) {\n *     console.error(\"failed to set claim conditions\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={() => setClaimConditions({ phases: [{ price: 2, maxClaimableSupply: 100 }] })}\n *     >\n *       Set Claim Conditions!\n *     </button>\n *   );\n * };\n * ```\n *\n * @param contract - an instance of a {@link DropContract}\n * @returns a mutation object that can be used to set claim conditions\n * @twfeature ERC20ClaimPhasesV2 | ERC20ClaimPhasesV1 | ERC20ClaimConditionsV2 | ERC20ClaimConditionsV1 | ERC721ClaimPhasesV2 | ERC721ClaimPhasesV1 | ERC721ClaimConditionsV2 | ERC721ClaimConditionsV1 | ERC1155ClaimPhasesV2 | ERC1155ClaimPhasesV1 | ERC1155ClaimConditionsV2 | ERC1155ClaimConditionsV1\n * @see {@link https://portal.thirdweb.com/react/react.usesetclaimconditions?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useSetClaimConditions(contract, tokenId) {\n  const activeChainId = useSDKChainId();\n  const contractAddress = contract?.getAddress();\n  const queryClient = useQueryClient();\n  const {\n    erc1155,\n    erc721,\n    erc20\n  } = getErcs(contract);\n  return useMutation(async data => {\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    const {\n      phases,\n      reset = false\n    } = data;\n    invariant(phases, 'No \"phases\" provided');\n    if (erc1155) {\n      requiredParamInvariant(tokenId, \"tokenId is required for ERC1155 claim conditions\");\n      return erc1155.claimConditions.set(tokenId, phases, reset);\n    }\n    if (erc721) {\n      return erc721.claimConditions.set(phases, reset);\n    }\n    if (erc20) {\n      return erc20.claimConditions.set(phases, reset);\n    }\n    throw new Error(\"Contract must be ERC721, ERC1155 or ERC20\");\n  }, {\n    onSettled: () => {\n      invalidateContractAndBalances(queryClient, contractAddress, activeChainId);\n    }\n  });\n}\n\n/**\n * Reset claim conditions\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const { contract } = useContract(\"{{contract_address}}\");\n *   const {\n *     mutate: resetClaimConditions,\n *     isLoading,\n *     error,\n *   } = useResetClaimConditions(contract);\n *\n *   if (error) {\n *     console.error(\"failed to reset claim conditions\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={resetClaimConditions}\n *     >\n *       Reset Claim Conditions\n *     </button>\n *   );\n * };\n * ```\n *\n * @param contract - an instance of a {@link DropContract}\n * @returns a mutation object that can be used to reset claim conditions\n * @twfeature ERC20ClaimPhasesV2 | ERC20ClaimPhasesV1 | ERC20ClaimConditionsV2 | ERC20ClaimConditionsV1 | ERC721ClaimPhasesV2 | ERC721ClaimPhasesV1 | ERC721ClaimConditionsV2 | ERC721ClaimConditionsV1 | ERC1155ClaimPhasesV2 | ERC1155ClaimPhasesV1 | ERC1155ClaimConditionsV2 | ERC1155ClaimConditionsV1\n * @beta\n */\nfunction useResetClaimConditions(contract, tokenId) {\n  const activeChainId = useSDKChainId();\n  const contractAddress = contract?.getAddress();\n  const queryClient = useQueryClient();\n  const {\n    erc1155,\n    erc721,\n    erc20\n  } = getErcs(contract);\n  return useMutation(async () => {\n    const cleanConditions = async conditions => {\n      return conditions.map(c => ({\n        ...c,\n        price: c.currencyMetadata.displayValue\n      }));\n    };\n    if (erc1155) {\n      requiredParamInvariant(tokenId, \"tokenId is required for ERC1155 claim conditions\");\n      const claimConditions = await erc1155.claimConditions.getAll(tokenId, {\n        withAllowList: true\n      });\n      return erc1155.claimConditions.set(tokenId, await cleanConditions(claimConditions || []), true);\n    }\n    if (erc721) {\n      const claimConditions = await erc721.claimConditions.getAll({\n        withAllowList: true\n      });\n      return await erc721.claimConditions.set(await cleanConditions(claimConditions || []), true);\n    }\n    if (erc20) {\n      const claimConditions = await erc20.claimConditions.getAll({\n        withAllowList: true\n      });\n      return await erc20.claimConditions.set(await cleanConditions(claimConditions || []), true);\n    }\n    throw new Error(\"Contract must be ERC721, ERC1155 or ERC20\");\n  }, {\n    onSettled: () => {\n      invalidateContractAndBalances(queryClient, contractAddress, activeChainId);\n    }\n  });\n}\n\n// primary sales\n\n/**\n * Get the primary sale recipient\n *\n * @example\n * ```jsx\n * const { data: primarySaleRecipient, isLoading, error } = usePrimarySalesRecipient(contract);\n * ```\n *\n * Use this to get the primary sales recipient of your {@link SmartContract}\n * @param contract - an instance of a {@link SmartContract}\n * @returns the wallet address of the primary sales recipient\n * @twfeature PrimarySale\n * @see {@link https://portal.thirdweb.com/react/react.useprimarysalerecipient?utm_source=sdk | Documentation}\n * @beta\n */\nfunction usePrimarySaleRecipient(contract) {\n  const contractAddress = contract?.getAddress();\n  return useQueryWithNetwork(cacheKeys.extensions.sales.getRecipient(contractAddress), () => {\n    requiredParamInvariant(contract, \"No contract provided\");\n    invariant(\"sales\" in contract && contract.sales, \"Contract does not support primarySale\");\n    return contract.sales.getRecipient();\n  }, {\n    enabled: !!contract || !!contractAddress\n  });\n}\n\n/**\n * Set the primary sale recipient\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const { contract } = useContract(\"{{contract_address}}\");\n *   const {\n *     mutate: updatePrimarySalesRecipient,\n *     isLoading,\n *     error,\n *   } = useUpdatePrimarySaleRecipient(contract);\n *\n *   if (error) {\n *     console.error(\"failed to update recipient\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={() => updatePrimarySalesRecipient({ newRecipient: \"{{wallet_address}}\" })}\n *     >\n *       Update Recipient\n *     </button>\n *   );\n * };\n * ```\n *\n * @param contract - an instance of a {@link SmartContract}\n * @returns a mutation object that can be used to update the primary sales recipient\n * @twfeature PrimarySale\n * @see {@link https://portal.thirdweb.com/react/react.useupdateprimarysalerecipient?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useUpdatePrimarySaleRecipient(contract) {\n  const queryClient = useQueryClient();\n  const contractAddress = contract?.getAddress();\n  const activeChainId = useSDKChainId();\n  return useMutation(newRecipient => {\n    requiredParamInvariant(contract, \"No contract provided\");\n    invariant(\"sales\" in contract && contract.sales, \"Contract does not support primarySale\");\n    return contract.sales.setRecipient(newRecipient);\n  }, {\n    onSettled: () => invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n  });\n}\n\n// end primary sales\n\n// royalties\n\n/**\n * Get the royalty recipient and fee\n *\n * @example\n * ```jsx\n * const { data: settings, isLoading, error } = useRoyaltySettings(contract);\n * ```\n *\n * @param contract - an instance of a {@link SmartContract}\n * @returns an object containing recipient address and the royalty basis points\n * @twfeature Royalty\n * @see {@link https://portal.thirdweb.com/react/react.useroyaltysettings?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useRoyaltySettings(contract) {\n  const contractAddress = contract?.getAddress();\n  return useQueryWithNetwork(cacheKeys.extensions.royalties.getDefaultRoyaltyInfo(contractAddress), () => {\n    requiredParamInvariant(contract, \"No contract provided\");\n    invariant(\"royalties\" in contract && contract.royalties, \"Contract does not support royalties\");\n    return contract.royalties.getDefaultRoyaltyInfo();\n  }, {\n    enabled: !!contract || !!contractAddress\n  });\n}\n\n/**\n * Set the royalty recipient and fee\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const { contract } = useContract(\"{{contract_address}}\");\n *   const {\n *     mutate: updateRoyaltySettings,\n *     isLoading,\n *     error,\n *   } = useUpdateRoyaltySettings(contract);\n *\n *   if (error) {\n *     console.error(\"failed to update royalty settings\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={() => updateRoyaltySettings({ updatePayload: { fee_recipient: \"{{wallet_address}}\", seller_fee_basis_points: 5_00 } })}\n *     >\n *       Update Royalty Settings\n *     </button>\n *   );\n * };\n * ```\n *\n * @param contract - an instance of a {@link SmartContract}\n * @returns a mutation object that can be used to update the royalty settings\n * @twfeature Royalty\n * @see {@link https://portal.thirdweb.com/react/react.useupdateroyaltysettings?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useUpdateRoyaltySettings(contract) {\n  const queryClient = useQueryClient();\n  const contractAddress = contract?.getAddress();\n  const activeChainId = useSDKChainId();\n  return useMutation(updatePayload => {\n    requiredParamInvariant(contract, \"No contract provided\");\n    invariant(\"royalties\" in contract && contract.royalties, \"Contract does not support royalties\");\n    return contract.royalties.setDefaultRoyaltyInfo(updatePayload);\n  }, {\n    onSettled: () => invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n  });\n}\n\n// end royalties\n\n// platformFees\n\n/**\n * Get the platform fee recipient and basis points\n *\n * @example\n * ```jsx\n * const { data: platformFees, isLoading, error } = usePlatformFees(contract);\n * ```\n *\n * @param contract - an instance of a {@link SmartContract}\n * @returns an object containing the platform fee basis points and the fee recipient address\n * @twfeature PlatformFee\n * @see {@link https://portal.thirdweb.com/react/react.useplatformfees?utm_source=sdk | Documentation}\n * @beta\n */\nfunction usePlatformFees(contract) {\n  const contractAddress = contract?.getAddress();\n  return useQueryWithNetwork(cacheKeys.extensions.platformFees.get(contractAddress), () => {\n    requiredParamInvariant(contract, \"No contract provided\");\n    invariant(\"platformFees\" in contract && contract.platformFees, \"Contract does not support platformFees\");\n    return contract.platformFees.get();\n  }, {\n    enabled: !!contract || !!contractAddress\n  });\n}\n\n/**\n * Set the platform fee recipient and basis points\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const { contract } = useContract(\"{{contract_address}}\");\n *   const {\n *     mutate: updatePlatformFees,\n *     isLoading,\n *     error,\n *   } = useUpdatePlatformFees(contract);\n *\n *   if (error) {\n *     console.error(\"failed to update platform fees\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={() => updatePlatformFees({ updatePayload: { fee_recipient: \"{{wallet_address}}\", platform_fee_basis_points: 5_00 } })}\n *     >\n *       Update Platform fees\n *     </button>\n *   );\n * };\n * ```\n * @param contract - an instance of a {@link SmartContract}\n * @returns a mutation object that can be used to update the platform fees settings\n * @twfeature PlatformFee\n * @see {@link https://portal.thirdweb.com/react/react.useupdateplatformfees?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useUpdatePlatformFees(contract) {\n  const queryClient = useQueryClient();\n  const contractAddress = contract?.getAddress();\n  const activeChainId = useSDKChainId();\n  return useMutation(updatePayload => {\n    requiredParamInvariant(contract, \"No contract provided\");\n    invariant(\"platformFees\" in contract && contract.platformFees, \"Contract does not support platformFees\");\n    return contract.platformFees.set(updatePayload);\n  }, {\n    onSettled: () => invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n  });\n}\n\n// end platformFees\n\n// metadata\n\n/**\n * Get the metadata of this contract\n *\n * @example\n * ```jsx\n * const { data: metadata, isLoading, error } = useMetadata(contract);\n * ```\n *\n * @param contract - an instance of a {@link SmartContract}\n * @returns a {@link CustomContractMetadata} object containing the metadata\n * @see {@link https://portal.thirdweb.com/react/react.usemetadata?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useMetadata(contract\n// TODO figure out UseQueryResult type better\n) {\n  const contractAddress = contract?.getAddress();\n  return useQueryWithNetwork(cacheKeys.extensions.metadata.get(contractAddress), () => {\n    requiredParamInvariant(contract, \"No contract provided\");\n    invariant(\"metadata\" in contract && contract.metadata, \"Contract does not support metadata\");\n    return contract.metadata.get();\n  }, {\n    enabled: !!contract || !!contractAddress\n  });\n}\n\n/**\n * Set the metadata of this contract\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const { contract } = useContract(\"{{contract_address}}\");\n *   const {\n *     mutate: updateMetadata,\n *     isLoading,\n *     error,\n *   } = useUpdateMetadata(contract);\n *\n *   if (error) {\n *     console.error(\"failed to update metadata\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={() => updateMetadata({\n *        name: \"My Contract\",\n *        description: \"This is my contract\"\n *       })}\n *     >\n *       Update Contract Metadata\n *     </button>\n *   );\n * };\n * ```\n * @param contract - an instance of a {@link SmartContract}\n * @returns a mutation object that can be used to update the metadata\n * @see {@link https://portal.thirdweb.com/react/react.useupdatemetadata?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useUpdateMetadata(contract\n// TODO figure out UseMutationResult type better\n) {\n  const queryClient = useQueryClient();\n  const contractAddress = contract?.getAddress();\n  const activeChainId = useSDKChainId();\n  return useMutation(updatePayload => {\n    requiredParamInvariant(contract, \"No contract provided\");\n    invariant(\"metadata\" in contract && contract.metadata, \"Contract does not support metadata\");\n    return contract.metadata.update(updatePayload);\n  }, {\n    onSettled: () => invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n  });\n}\n\n// end metadata\n\n// contract type\nasync function fetchContractType(contractAddress, sdk) {\n  if (!contractAddress || !sdk) {\n    return null;\n  }\n  try {\n    return await sdk.resolveContractType(contractAddress);\n  } catch (err) {\n    console.error(\"failed to resolve contract type\", err);\n    // this error can happen if the contract is a custom contract -> assume \"custom\"\n    return \"custom\";\n  }\n}\nfunction useContractType(contractAddress) {\n  const sdk = useSDK();\n  return useQueryWithNetwork(cacheKeys.contract.type(contractAddress), () => fetchContractType(contractAddress, sdk),\n  // is immutable, so infinite stale time\n  {\n    cacheTime: Infinity,\n    staleTime: Infinity,\n    enabled: !!contractAddress && !!sdk\n  });\n}\nconst contractType = {\n  cacheKey: (contractAddress, chainId) => createCacheKeyWithNetwork(cacheKeys.contract.type(contractAddress), chainId),\n  useQuery: useContractType,\n  fetchQuery: fetchContractType\n};\n\n// end contract type\n\n// contract compiler metadata\nfunction fetchCompilerMetadata(contractAddress, sdk) {\n  if (!contractAddress || !sdk) {\n    return null;\n  }\n  try {\n    return sdk.getPublisher().fetchCompilerMetadataFromAddress(contractAddress);\n  } catch (err) {\n    // if we fail to get contract metadata just return null;\n    return null;\n  }\n}\nfunction useCompilerMetadata(contractAddress) {\n  const sdk = useSDK();\n  return useQueryWithNetwork(cacheKeys.contract.compilerMetadata(contractAddress), () => fetchCompilerMetadata(contractAddress, sdk),\n  // is immutable, so infinite stale time\n  {\n    cacheTime: Infinity,\n    staleTime: Infinity,\n    enabled: !!contractAddress && !!sdk\n  });\n}\nconst compilerMetadata = {\n  cacheKey: (contractAddress, chainId) => createCacheKeyWithNetwork(cacheKeys.contract.compilerMetadata(contractAddress), chainId),\n  useQuery: useCompilerMetadata,\n  fetchQuery: fetchCompilerMetadata\n};\n\n// end compiler metadata\n\n// useContract\n/**\n * Use this resolve a contract address to a smart contract instance.\n *\n * @example\n * ```javascript\n * const { contract, isLoading, error } = useContract(\"{{contract_address}}\");\n * ```\n *\n * @param contractAddress - the address of the deployed contract\n * @returns a response object that includes the contract once it is resolved\n * @see {@link https://portal.thirdweb.com/react/react.usecontract?utm_source=sdk | Documentation}\n * @public\n */\n/**\n * Use this resolve a contract address to a smart contract instance.\n *\n * @example\n * ```javascript\n * const { contract, isLoading, error } = useContract(\"{{contract_address}}\", \"nft-drop\");\n * ```\n *\n * @param contractAddress - the address of the deployed contract\n * @param _contractType - the type of the contract\n * @returns a response object that includes the contract once it is resolved\n * @see {@link https://portal.thirdweb.com/react/react.usecontract?utm_source=sdk | Documentation}\n * @public\n */\n/**\n * Use this resolve a contract address to a smart contract instance.\n *\n * @example\n * ```javascript\n * const { contract, isLoading, error } = useContract(\"{{contract_address}}\", ABI);\n * ```\n *\n * @param contractAddress - the address of the deployed contract\n * @param _abi - the ABI of the contract to use\n * @returns a response object that includes the contract once it is resolved\n * @see {@link https://portal.thirdweb.com/react/react.usecontract?utm_source=sdk | Documentation}\n * @public\n */\nfunction useContract(contractAddress, contractTypeOrABI) {\n  const sdk = useSDK();\n  const queryClient = useQueryClient();\n  const activeChainId = useSDKChainId();\n  const wallet = useAddress();\n  const walletChainId = useChainId();\n\n  // it's there because we put it there.\n  const sdkTimestamp = sdk?._constructedAt;\n  const contractQuery = useQueryWithNetwork(\n  // need to add the wallet and walletChainId into the query key so this gets refreshed when the wallet / chain changes!\n  neverPersist([\"contract-instance\", contractAddress, {\n    wallet,\n    walletChainId,\n    sdkTimestamp\n  }]), async () => {\n    requiredParamInvariant(contractAddress, \"contract address is required\");\n    invariant(sdk, \"SDK not initialized\");\n    invariant(activeChainId, \"active chain id is required\");\n\n    // if we don't have a contractType or ABI then we will have to resolve it regardless\n    // we also handle it being \"custom\" just in case...\n    if (!contractTypeOrABI || contractTypeOrABI === \"custom\") {\n      // First check local ABI cache\n      const cachedAbi = getCachedAbiForContract(contractAddress);\n      if (cachedAbi) {\n        return sdk.getContract(contractAddress, cachedAbi);\n      }\n\n      // we just resolve here (sdk does this internally anyway)\n      const resolvedContractType = await queryClient.fetchQuery(contractType.cacheKey(contractAddress, activeChainId), () => contractType.fetchQuery(contractAddress, sdk), {\n        cacheTime: Infinity,\n        staleTime: Infinity\n      });\n      let abi;\n      if (resolvedContractType === \"custom\") {\n        abi = (await queryClient.fetchQuery(compilerMetadata.cacheKey(contractAddress, activeChainId), () => compilerMetadata.fetchQuery(contractAddress, sdk), {\n          cacheTime: Infinity,\n          staleTime: Infinity,\n          retry: 0\n        }))?.abi;\n      }\n      invariant(resolvedContractType, \"failed to resolve contract type\");\n      // just let the sdk handle the rest\n      // if we have resolved an ABI for a custom contract, use that otherwise use contract type\n      return sdk.getContract(contractAddress, abi || resolvedContractType);\n    }\n    // every other case can just be handled by the sdk directly\n    return sdk.getContract(contractAddress, contractTypeOrABI);\n  }, {\n    // keep the previous value around while we fetch the new one\n    // this is important because otherwise it can lead to flickering (because we need to re-fetch the contract when sdk things change)\n    keepPreviousData: true,\n    // is immutable, so infinite cache & stale time (for a given key)\n    cacheTime: Infinity,\n    staleTime: Infinity,\n    enabled: !!contractAddress && !!sdk && !!activeChainId,\n    // never retry\n    retry: 0\n  });\n\n  // const previousCountract = usePrevious(contractQuery.data);\n\n  return {\n    ...contractQuery,\n    data: contractQuery.data,\n    contract: contractQuery.data\n  };\n}\n\n/**\n * Get the metadata of this contract\n *\n * @example\n * ```javascript\n * const { data: contractMetadata, isLoading } = useContractMetadata(contract);\n * ```\n *\n * @param contract - the {@link ValidContractInstance} instance of the contract to get the metadata for\n * @returns a response object that includes the contract metadata of the deployed contract\n * @twfeature ContractMetadata\n * @beta\n */\nfunction useContractMetadata(contract) {\n  return useQueryWithNetwork(cacheKeys.contract.metadata(contract?.getAddress()), async () => {\n    requiredParamInvariant(contract, \"contract is required\");\n    return await contract.metadata.get(); // FIXME types\n  }, {\n    enabled: !!contract\n  });\n}\n\n/**\n * Update the metadata of this contract\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const { contract } = useContract(\"{{contract_address}}\");\n *   const {\n *     mutate: updateContractMetadata,\n *     isLoading,\n *     error,\n *   } = useContractMetadataUpdate(contract);\n *\n *   if (error) {\n *     console.error(\"failed to update contract metadata\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={() => updateContractMetadata({ name: \"New name\", description: \"New description\" })}\n *     >\n *       Update contract metadata\n *     </button>\n *   );\n * };\n * ```\n *\n * @param contract - the {@link ValidContractInstance} instance of the contract to get the metadata for\n * @returns a response object that includes the contract metadata of the deployed contract\n * @twfeature ContractMetadata\n * @beta\n */\nfunction useContractMetadataUpdate(contract) {\n  const activeChainId = useSDKChainId();\n  const contractAddress = contract?.getAddress();\n  const queryClient = useQueryClient();\n  return useMutation(async metadata => {\n    requiredParamInvariant(contract, \"contract must be defined\");\n    return contract.metadata.update(metadata);\n  }, {\n    onSettled: () => queryClient.invalidateQueries(createCacheKeyWithNetwork(createContractCacheKey(contractAddress), activeChainId))\n  });\n}\n\n/**\n * CONTRACT EVENTS\n */\n\n/**\n * Get or subscribe to contract events\n *\n * @example\n * ```javascript\n * const { data: contractEvents, isLoading } = useContractEvents(contract);\n * ```\n *\n * @param contract - the {@link ValidContractInstance} instance of the contract to listen to events for\n * @param eventName - the name of the event to query for (omit this or pass `undefined` to query for all events)\n * @param options - options includes the filters ({@link QueryAllEvents}) for the query as well as if you want to subscribe to real-time updates (default: true)\n * @returns a response object that includes the contract events\n * @see {@link https://portal.thirdweb.com/react/react.usecontractevents?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useContractEvents(contract, eventName) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    subscribe: true\n  };\n  const contractAddress = contract?.getAddress();\n  const queryClient = useQueryClient();\n  const activeChainId = useSDKChainId();\n  const cacheKey = useMemo(() => createCacheKeyWithNetwork(eventName ? cacheKeys.contract.events.getEvents(contractAddress, eventName) : cacheKeys.contract.events.getAllEvents(contractAddress), activeChainId), [activeChainId, contractAddress, eventName]);\n  useEffect(() => {\n    // if we're not subscribing or query is not enabled yet we can early exit\n    if (!options.subscribe || !contract || !contract) {\n      return;\n    }\n    const cleanupListener = contract.events.listenToAllEvents(contractEvent => {\n      // if we have a specific event name we are looking for we can early exist if it doesn't match\n      if (eventName && eventName !== contractEvent.eventName) {\n        return;\n      }\n      // insert new event to the front of the array (no duplicates, though)\n      queryClient.setQueryData(cacheKey, oldData => {\n        if (!oldData) {\n          return [contractEvent];\n        }\n        const eventIsNotAlreadyInEventsList = oldData.findIndex(e => e.transaction.transactionHash === contractEvent.transaction.transactionHash && e.transaction.logIndex === contractEvent.transaction.logIndex) === -1;\n        if (eventIsNotAlreadyInEventsList) {\n          return [contractEvent, ...oldData];\n        }\n        return oldData;\n      });\n    });\n    // cleanup listener on unmount\n    return cleanupListener;\n  }, [options.subscribe, cacheKey, contract, queryClient, eventName]);\n  return useQuery(cacheKey, () => {\n    requiredParamInvariant(contract, \"contract must be defined\");\n    if (eventName) {\n      return contract.events.getEvents(eventName, options.queryFilter);\n    }\n    return contract.events.getAllEvents(options.queryFilter);\n  }, {\n    enabled: !!contract,\n    // we do not need to re-fetch if we're subscribing\n    refetchOnWindowFocus: !options.subscribe,\n    refetchOnMount: true,\n    refetchOnReconnect: true\n  });\n}\n\n/**\n * Get data from a contract read-function call\n *\n * @example\n * ```javascript\n * const { contract } = useContract(\"{{contract_address}}\");\n * const { data, isLoading, error } = useContractRead(contract, \"functionName\", ...args);\n *```\n *\n * @param contract - the contract instance of the contract to call a function on\n * @param functionName - the name of the function to call\n * @param args - The arguments to pass to the function (if any), with optional call arguments as the last parameter\n * @returns a response object that includes the data returned by the function call\n * @see {@link https://portal.thirdweb.com/react/react.usecontractread?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useContractRead(contract, functionName, args, overrides) {\n  const contractAddress = contract?.getAddress();\n  return useQueryWithNetwork(cacheKeys.contract.call(contractAddress, functionName, args, overrides), () => {\n    requiredParamInvariant(contract, \"contract must be defined\");\n    requiredParamInvariant(functionName, \"function name must be provided\");\n    return contract.call(functionName, args, overrides);\n  }, {\n    enabled: !!contract && !!functionName\n  });\n}\n\n/**\n * Mke a write call to your contract\n *\n * @example\n * ```javascript\n * const { contract } = useContract(\"{{contract_address}}\");\n * const { mutate: myFunction, isLoading, error } = useContractWrite(contract, \"myFunction\");\n *\n * // the function can be called as follows:\n * // myFunction([\"param 1\", \"param 2\", ...])\n *```\n *\n * @param contract - the contract instance of the contract to call a function on\n * @param functionName - the name of the function to call\n * @returns a response object that includes the write function to call\n * @see {@link https://portal.thirdweb.com/react/react.usecontractwrite?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useContractWrite(contract, functionName) {\n  const activeChainId = useSDKChainId();\n  const contractAddress = contract?.getAddress();\n  const queryClient = useQueryClient();\n  return useMutation(async _ref => {\n    let {\n      args,\n      overrides\n    } = _ref;\n    requiredParamInvariant(contract, \"contract must be defined\");\n    requiredParamInvariant(functionName, \"function name must be provided\");\n    return contract.call(functionName, args, overrides);\n  }, {\n    onSettled: () => queryClient.invalidateQueries(createCacheKeyWithNetwork(createContractCacheKey(contractAddress), activeChainId))\n  });\n}\n\n/** **********************/\n/**       READ HOOKS    **/\n/** **********************/\n\n/**\n * Get all unclaimed NFTs\n *\n * @example\n * ```javascript\n * const { data: unclaimedNfts, isLoading, error } = useUnclaimedNFTs(contract, { start: 0, count: 100 });\n * ```\n *\n * @param contract - an instance of a contract that extends the ERC721 spec (NFT drop, Signature Drop, or any custom contract that extends the ERC721 spec)\n * @param queryParams - query params to pass to the query for the sake of pagination\n * @returns a response object that includes an array of NFTs that are unclaimed\n * @twfeature ERC721LazyMintable\n * @see {@link https://portal.thirdweb.com/react/react.useunclaimednfts?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useUnclaimedNFTs(contract, queryParams) {\n  const contractAddress = contract?.getAddress();\n  return useQueryWithNetwork(cacheKeys.contract.nft.drop.getAllUnclaimed(contractAddress, queryParams), () => {\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    // TODO make this work for custom contracts (needs ABI change)\n    invariant(contract.getAllUnclaimed, \"Contract instance does not support getAllUnclaimed\");\n    return contract.getAllUnclaimed(queryParams);\n  }, {\n    enabled: !!contract\n  });\n}\n\n/**\n * Get all claimed NFTs\n *\n * @remarks Equivalent to using {@link useNFTs}.\n *\n * @example\n * ```javascript\n * const { data: claimedNFTs, isLoading, error } = useClaimedNFTs(contract, { start: 0, count: 100 });\n * ```\n *\n * @param contract - an instance of a contract that extends the ERC721 spec (NFT drop, Signature Drop, or any custom contract that extends the ERC721 spec)\n * @param queryParams - query params to pass to the query for the sake of pagination\n * @returns a response object that includes an array of NFTs that are claimed\n * @twfeature ERC721LazyMintable\n * @see {@link https://portal.thirdweb.com/react/react.useclaimednfts?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useClaimedNFTs(contract, queryParams) {\n  const contractAddress = contract?.getAddress();\n  return useQueryWithNetwork(cacheKeys.contract.nft.drop.getAllClaimed(contractAddress, queryParams), () => {\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    // TODO make this work for custom contracts (needs ABI change)\n    invariant(contract.getAllClaimed, \"Contract instance does not support getAllClaimed\");\n    return contract.getAllClaimed(queryParams);\n  }, {\n    enabled: !!contract\n  });\n}\n\n/**\n *\n * @param contract - an instance of a contract that extends the ERC721 spec (NFT drop, Signature Drop, or any custom contract that extends the ERC721 spec)\n * @returns a response object that includes the number of NFTs that are unclaimed\n * @twfeature ERC721LazyMintable\n * @see {@link https://portal.thirdweb.com/react/react.useunclaimednftsupply?utm_source=sdk | Documentation}\n */\nfunction useUnclaimedNFTSupply(contract) {\n  const contractAddress = contract?.getAddress();\n  const {\n    erc721\n  } = getErcs(contract);\n  return useQueryWithNetwork(cacheKeys.contract.nft.drop.totalUnclaimedSupply(contractAddress), () => {\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    if (erc721) {\n      invariant(erc721, \"No ERC721 Contract instance provided\");\n      return erc721.totalUnclaimedSupply();\n    }\n    invariant(false, \"Contract is not an instance of ERC721\");\n  }, {\n    enabled: !!erc721\n  });\n}\n\n/**\n * Get the total number of claimed NFTs\n *\n * @param contract - an instance of a contract that extends the ERC721 spec (NFT drop, Signature Drop, or any custom contract that extends the ERC721 spec)\n * @returns a response object that includes the number of NFTs that are claimed\n * @twfeature ERC721LazyMintable\n * @see {@link https://portal.thirdweb.com/react/react.useclaimednftsupply?utm_source=sdk | Documentation}\n */\nfunction useClaimedNFTSupply(contract) {\n  const contractAddress = contract?.getAddress();\n  const {\n    erc721\n  } = getErcs(contract);\n  return useQueryWithNetwork(cacheKeys.contract.nft.drop.totalClaimedSupply(contractAddress), () => {\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    if (erc721) {\n      return erc721.totalClaimedSupply();\n    }\n    invariant(false, \"Contract is not an instance of ERC721\");\n  }, {\n    enabled: !!erc721\n  });\n}\n\n/**\n * Get all unrevealed batches\n *\n * @param contract - an instance of a {@link RevealableContract}\n * @returns a response object that gets the batches to still be revealed\n * @twfeature ERC721Revealable | ERC1155Revealable\n * @see {@link https://portal.thirdweb.com/react/react.usebatchestoreveal?utm_source=sdk | Documentation}\n */\nfunction useBatchesToReveal(contract) {\n  const contractAddress = contract?.getAddress();\n  const {\n    erc721,\n    erc1155\n  } = getErcs(contract);\n  return useQueryWithNetwork(cacheKeys.contract.nft.drop.revealer.getBatchesToReveal(contractAddress), () => {\n    if (erc721) {\n      return erc721.revealer.getBatchesToReveal();\n    }\n    if (erc1155) {\n      return erc1155.revealer.getBatchesToReveal();\n    }\n    invariant(false, \"Contract instance does not support getBatchesToReveal\");\n  }, {\n    enabled: !!erc721 || !!erc1155\n  });\n}\n\n/** **********************/\n/**     WRITE HOOKS     **/\n/** **********************/\n/**\n * Claim an NFT to a specific wallet\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const { contract } = useContract(\"{{contract_address}}\");\n *   const {\n *     mutate: claimNFT,\n *     isLoading,\n *     error,\n *   } = useClaimNFT(contract);\n *\n *   if (error) {\n *     console.error(\"failed to claim nft\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={() => claimNFT({ to: \"{{wallet_address}}\", quantity: 1 })}\n *     >\n *       Claim NFT!\n *     </button>\n *   );\n * };\n * ```\n *\n * @param contract - an instance of a {@link DropContract}\n * @returns a mutation object that can be used to claim a NFT to the wallet specificed in the params\n * @twfeature ERC721Claimable | ERC1155Claimable | ERC721ClaimPhasesV2 | ERC721ClaimPhasesV1 | ERC721ClaimConditionsV2 | ERC721ClaimConditionsV1 | ERC1155ClaimPhasesV2 | ERC1155ClaimPhasesV1 | ERC1155ClaimConditionsV2 | ERC1155ClaimConditionsV1\n * @see {@link https://portal.thirdweb.com/react/react.useclaimnft?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useClaimNFT(contract) {\n  const activeChainId = useSDKChainId();\n  const contractAddress = contract?.getAddress();\n  const queryClient = useQueryClient();\n  const {\n    erc721,\n    erc1155\n  } = getErcs(contract);\n  return useMutation(async data => {\n    requiredParamInvariant(contract, \"contract is undefined\");\n    if (erc1155) {\n      requiredParamInvariant(data.tokenId, \"tokenId not provided\");\n      if (!data.to) {\n        return await erc1155.claim(data.tokenId, data.quantity, data.options);\n      }\n      return await erc1155.claimTo(data.to, data.tokenId, data.quantity, data.options);\n    }\n    if (erc721) {\n      if (!data.to) {\n        return await erc721.claim(data.quantity, data.options);\n      }\n      return await erc721.claimTo(data.to, data.quantity, data.options);\n    }\n    invariant(false, \"contract is not an Erc721 or Erc1155\");\n  }, {\n    onSettled: () => invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n  });\n}\n\n/**\n * Lazy mint NFTs\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const { contract } = useContract(\"{{contract_address}}\");\n *   const {\n *     mutate: lazyMint,\n *     isLoading,\n *     error,\n *   } = useLazyMint(contract);\n *\n *   if (error) {\n *     console.error(\"failed to lazy mint NFT\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={() => lazyMint({ metadatas: [{ name: \"My NFT!\"}] })}\n *     >\n *       Lazy mint NFT!\n *     </button>\n *   );\n * };\n * ```\n *\n * @param contract - an instance of a {@link NFTContract} with the drop extension\n * @param onProgress - an optional callback that will be called with the progress of the upload\n * @returns a mutation object that can be used to lazy mint a batch of NFTs\n * @twfeature ERC721LazyMintable | ERC1155LazyMintable\n * @see {@link https://portal.thirdweb.com/react/react.uselazymint?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useLazyMint(contract, onProgress) {\n  const activeChainId = useSDKChainId();\n  const contractAddress = contract?.getAddress();\n  const queryClient = useQueryClient();\n  const {\n    erc721,\n    erc1155\n  } = getErcs(contract);\n  return useMutation(async data => {\n    requiredParamInvariant(contract, \"contract is undefined\");\n    let options;\n    if (onProgress) {\n      options = {\n        onProgress\n      };\n    }\n    if (erc721) {\n      return erc721.lazyMint(data.metadatas, options);\n    }\n    if (erc1155) {\n      return erc1155.lazyMint(data.metadatas, options);\n    }\n    invariant(false, \"contract is not an Erc721 or Erc1155\");\n  }, {\n    onSettled: () => invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n  });\n}\n\n/**\n * Lazy mint NFTs with delayed reveal\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const { contract } = useContract(\"{{contract_address}}\");\n *   const {\n *     mutate: delayedRevealLazyMint,\n *     isLoading,\n *     error,\n *   } = useDelayedRevealLazyMint(contract);\n *\n *   if (error) {\n *     console.error(\"failed to lazy mint NFT\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={() => delayedRevealLazyMint({ metadatas: [{ name: \"My NFT!\"}] })}\n *     >\n *       Delayed Reveal Lazy mint NFT!\n *     </button>\n *   );\n * };\n * ```\n *\n * @param contract - an instance of a {@link DropContract}\n * @param onProgress - an optional callback that will be called with the progress of the upload\n * @returns a mutation object that can be used to lazy mint a batch of NFTs\n * @twfeature ERC721Revealable | ERC1155Revealable\n * @see {@link https://portal.thirdweb.com/react/react.usedelayedreveallazymint?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useDelayedRevealLazyMint(contract, onProgress) {\n  const activeChainId = useSDKChainId();\n  const contractAddress = contract?.getAddress();\n  const queryClient = useQueryClient();\n  return useMutation(async data => {\n    requiredParamInvariant(contract, \"contract is undefined\");\n    let options;\n    if (onProgress) {\n      options = {\n        onProgress\n      };\n    }\n    const {\n      erc721,\n      erc1155\n    } = getErcs(contract);\n    if (erc721) {\n      return await erc721.revealer.createDelayedRevealBatch(data.placeholder, data.metadatas, data.password, options);\n    }\n    if (erc1155) {\n      return await erc1155.revealer.createDelayedRevealBatch(data.placeholder, data.metadatas, data.password, options);\n    }\n    invariant(false, \"contract is not an Erc721 or Erc1155\");\n  }, {\n    onSettled: () => invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n  });\n}\n\n/**\n * Reveal a batch of delayed reveal NFTs\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const { contract } = useContract(\"{{contract_address}}\");\n *   const {\n *     mutate: revealLazyMint,\n *     isLoading,\n *     error,\n *   } = useRevealLazyMint(contract);\n *\n *   if (error) {\n *     console.error(\"failed to reveal batch\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={() => revealLazyMint({ batchId: \"0\", password: \"my-password\" })}\n *     >\n *       Reveal batch!\n *     </button>\n *   );\n * };\n * ```\n *\n * @param contract - an instance of a {@link RevealableContract}\n * @returns a mutation object that can be used to reveal a batch of delayed reveal NFTs\n * @twfeature ERC721Revealable | ERC1155Revealable\n * @see {@link https://portal.thirdweb.com/react/react.usereveallazymint?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useRevealLazyMint(contract) {\n  const activeChainId = useSDKChainId();\n  const contractAddress = contract?.getAddress();\n  const queryClient = useQueryClient();\n  return useMutation(async data => {\n    requiredParamInvariant(contract, \"contract is undefined\");\n    const {\n      erc721,\n      erc1155\n    } = getErcs(contract);\n    if (erc721) {\n      return await erc721.revealer.reveal(data.batchId, data.password);\n    }\n    if (erc1155) {\n      return await erc1155.revealer.reveal(data.batchId, data.password);\n    }\n    invariant(false, \"contract is not an Erc721 or Erc1155\");\n  }, {\n    onSettled: () => invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n  });\n}\n\n/** **********************/\n/**     READ  HOOKS     **/\n/** **********************/\n\n/**\n * Get a listing\n *\n * @example\n * ```javascript\n * const listingId = 0; // the listing id to check\n * const { data: listing, isLoading, error } = useListing(contract, listingId);\n * ```\n *\n * @param contract - an instance of a marketplace contract\n * @param listingId - the listing id to check\n * @returns a response object that includes the desired listing\n * @see {@link https://portal.thirdweb.com/react/react.uselisting?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useListing(contract, listingId) {\n  const contractAddress = contract?.getAddress();\n  return useQueryWithNetwork(cacheKeys.contract.marketplace.getListing(contractAddress, listingId), () => {\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    requiredParamInvariant(listingId, \"No listing id provided\");\n    return contract.getListing(listingId);\n  }, {\n    enabled: !!contract,\n    keepPreviousData: true\n  });\n}\n\n/**\n * Get a direct listing\n *\n * @example\n * ```javascript\n * const listingId = 0; // the listing id to check\n * const { data: directListing, isLoading, error } = useListing(contract, listingId);\n * ```\n *\n * @param contract - an instance of a marketplace v3 contract\n * @param listingId - the listing id to check\n * @returns a response object that includes the desired direct listing\n * @twfeature DirectListings\n * @see {@link https://portal.thirdweb.com/react/react.usedirectlisting?utm_source=sdk | Documentation}\n */\nfunction useDirectListing(contract, listingId) {\n  const contractAddress = contract?.getAddress();\n  return useQueryWithNetwork(cacheKeys.contract.marketplace.directListings.getListing(contractAddress, listingId), () => {\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    requiredParamInvariant(listingId, \"No listing id provided\");\n    return contract.directListings.getListing(listingId);\n  }, {\n    enabled: !!contract,\n    keepPreviousData: true\n  });\n}\n\n/**\n * Get an english auction\n *\n * @example\n * ```javascript\n * const auctionId = 0; // the listing id to check\n * const { data: englishAuction, isLoading, error } = useEnglishAuction(contract, auctionId);\n * ```\n *\n * @param contract - an instance of a marketplace v3 contract\n * @param auctionId - the auction id to check\n * @returns a response object that includes the desired english auction\n * @twfeature EnglishAuctions\n * @see {@link https://portal.thirdweb.com/react/react.useenglishauctions?utm_source=sdk | Documentation}\n */\nfunction useEnglishAuction(contract, auctionId) {\n  const contractAddress = contract?.getAddress();\n  return useQueryWithNetwork(cacheKeys.contract.marketplace.englishAuctions.getAuction(contractAddress, auctionId), () => {\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    requiredParamInvariant(auctionId, \"No auction id provided\");\n    return contract.englishAuctions.getAuction(auctionId);\n  }, {\n    enabled: !!contract,\n    keepPreviousData: true\n  });\n}\n\n/**\n * Get all listings\n *\n * @example\n * ```javascript\n * const { data: listings, isLoading, error } = useListings(contract, { start: 0, count: 100 });\n * ```\n *\n * @param contract - an instance of a marketplace contract\n * @param filter - filter to pass to the query for the sake of pagination & filtering\n * @returns a response object that includes an array of listings\n * @see {@link https://portal.thirdweb.com/react/react.uselistings?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useListings(contract, filter) {\n  const contractAddress = contract?.getAddress();\n  return useQueryWithNetwork(cacheKeys.contract.marketplace.getAllListings(contractAddress, filter), () => {\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    return contract.getAllListings(filter);\n  }, {\n    enabled: !!contract,\n    keepPreviousData: true\n  });\n}\n\n/**\n * Get all direct listings\n *\n * @example\n * ```javascript\n * const { data: directListings, isLoading, error } = useDirectListings(contract, { start: 0, count: 100 });\n * ```\n *\n * @param contract - an instance of a marketplace v3 contract\n * @param filter - filter to pass to the query for the sake of pagination & filtering\n * @returns a response object that includes an array of direct listings\n * @twfeature DirectListings\n * @see {@link https://portal.thirdweb.com/react/react.usedirectlistings?utm_source=sdk | Documentation}\n */\nfunction useDirectListings(contract, filter) {\n  const contractAddress = contract?.getAddress();\n  return useQueryWithNetwork(cacheKeys.contract.marketplace.directListings.getAll(contractAddress, filter), () => {\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    return contract.directListings.getAll(filter);\n  }, {\n    enabled: !!contract,\n    keepPreviousData: true\n  });\n}\n\n/**\n * Get all valid direct listings\n *\n * @example\n * ```javascript\n * const { data: validDirectListings, isLoading, error } = useValidDirectListings(contract, { start: 0, count: 100 });\n * ```\n *\n * @param contract - an instance of a marketplace v3 contract\n * @param filter - filter to pass to the query for the sake of pagination & filtering\n * @returns a response object that includes an array of direct listings\n * @twfeature DirectListings\n * @see {@link https://portal.thirdweb.com/react/react.usevaliddirectlistings?utm_source=sdk | Documentation}\n */\nfunction useValidDirectListings(contract, filter) {\n  const contractAddress = contract?.getAddress();\n  return useQueryWithNetwork(cacheKeys.contract.marketplace.directListings.getAllValid(contractAddress, filter), () => {\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    return contract.directListings.getAllValid(filter);\n  }, {\n    enabled: !!contract,\n    keepPreviousData: true\n  });\n}\n\n/**\n * Get all english auctions\n *\n * @example\n * ```javascript\n * const { data: englishAuctions, isLoading, error } = useEnglishAuctions(contract, { start: 0, count: 100 });\n * ```\n *\n * @param contract - an instance of a marketplace v3 contract\n * @param filter - filter to pass to the query for the sake of pagination & filtering\n * @returns a response object that includes an array of english auctions\n * @twfeature EnglishAuctions\n * @see {@link https://portal.thirdweb.com/react/react.useenglishauctions?utm_source=sdk | Documentation}\n */\nfunction useEnglishAuctions(contract, filter) {\n  const contractAddress = contract?.getAddress();\n  return useQueryWithNetwork(cacheKeys.contract.marketplace.englishAuctions.getAll(contractAddress, filter), () => {\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    return contract.englishAuctions.getAll(filter);\n  }, {\n    enabled: !!contract,\n    keepPreviousData: true\n  });\n}\n\n/**\n * Get all valid english auctions\n *\n * @example\n * ```javascript\n * const { data: validEnglishAuctions, isLoading, error } = useValidEnglishAuctions(contract, { start: 0, count: 100 });\n * ```\n *\n * @param contract - an instance of a marketplace v3 contract\n * @param filter - filter to pass to the query for the sake of pagination & filtering\n * @returns a response object that includes an array of english auctions\n * @twfeature EnglishAuctions\n * @see {@link https://portal.thirdweb.com/react/react.usevalidenglishauctions?utm_source=sdk | Documentation}\n */\nfunction useValidEnglishAuctions(contract, filter) {\n  const contractAddress = contract?.getAddress();\n  return useQueryWithNetwork(cacheKeys.contract.marketplace.englishAuctions.getAllValid(contractAddress, filter), () => {\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    return contract.englishAuctions.getAllValid(filter);\n  }, {\n    enabled: !!contract,\n    keepPreviousData: true\n  });\n}\n\n/**\n * Get the total count of listings\n *\n * @example\n * ```javascript\n * const { data: listingsCount, isLoading, error } = useListingsCount(contract);\n * ```\n *\n * @param contract - an instance of a marketplace contract\n * @returns a response object that includes the listing count\n * @see {@link https://portal.thirdweb.com/react/react.uselistingscount?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useListingsCount(contract) {\n  const contractAddress = contract?.getAddress();\n  return useQueryWithNetwork(cacheKeys.contract.marketplace.getTotalCount(contractAddress), () => {\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    return contract.getTotalCount();\n  }, {\n    enabled: !!contract\n  });\n}\n\n/**\n * Get the total count of direct listings\n *\n * @example\n * ```javascript\n * const { data: directListingsCount, isLoading, error } = useDirectListingsCount(contract);\n * ```\n *\n * @param contract - an instance of a marketplace v3 contract\n * @returns a response object that includes the direct listings count\n * @twfeature DirectListings\n * @see {@link https://portal.thirdweb.com/react/react.usedirectlistingscount?utm_source=sdk | Documentation}\n */\nfunction useDirectListingsCount(contract) {\n  const contractAddress = contract?.getAddress();\n  return useQueryWithNetwork(cacheKeys.contract.marketplace.directListings.getTotalCount(contractAddress), () => {\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    return contract.directListings.getTotalCount();\n  }, {\n    enabled: !!contract\n  });\n}\n\n/**\n * Get the total count of english auctions\n *\n * @example\n * ```javascript\n * const { data: englishAuctionsCount, isLoading, error } = useEnglishAuctionsCount(contract);\n * ```\n *\n * @param contract - an instance of a marketplace v3 contract\n * @returns a response object that includes the direct english actions count\n * @twfeature EnglishAuctions\n * @see {@link https://portal.thirdweb.com/react/react.useenglishauctionscount?utm_source=sdk | Documentation}\n */\nfunction useEnglishAuctionsCount(contract) {\n  const contractAddress = contract?.getAddress();\n  return useQueryWithNetwork(cacheKeys.contract.marketplace.englishAuctions.getTotalCount(contractAddress), () => {\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    return contract.englishAuctions.getTotalCount();\n  }, {\n    enabled: !!contract\n  });\n}\n\n/**\n * Get all active listings\n *\n * @example\n * ```javascript\n * const { data: listings, isLoading, error } = useActiveListings(contract, { seller: \"{{wallet_adress}}\", tokenContract: \"0x...\", tokenId: 1, start: 0, count: 100 });\n * ```\n *\n * @param contract - an instance of a marketplace contract\n * @param filter - filter to pass to the query for the sake of pagination & filtering\n * @returns a response object that includes an array of listings\n * @see {@link https://portal.thirdweb.com/react/react.useactivelistings?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useActiveListings(contract, filter) {\n  const contractAddress = contract?.getAddress();\n  return useQueryWithNetwork(cacheKeys.contract.marketplace.getActiveListings(contractAddress, filter), () => {\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    return contract.getActiveListings(filter);\n  }, {\n    enabled: !!contract,\n    keepPreviousData: true\n  });\n}\n\n/**\n * Get the winning bid for an auction\n *\n * @example\n * ```javascript\n * const listingId = 0;\n * const { data: winningBid, isLoading, error } = useWinningBid(contract, listingId);\n * ```\n *\n * @param contract - an instance of a marketplace contract\n * @param listingId - the listing id to check\n * @returns a response object that includes the {@link Offer} that is winning the auction\n * @see {@link https://portal.thirdweb.com/react/react.usewinningbid?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useWinningBid(contract, listingId) {\n  const contractAddress = contract?.getAddress();\n  return useQueryWithNetwork(cacheKeys.contract.marketplace.auction.getWinningBid(contractAddress, listingId), () => {\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    requiredParamInvariant(listingId, \"No listing id provided\");\n    invariant(contract.auction.getWinningBid, \"contract does not support auction.getWinningBid\");\n    return contract.auction.getWinningBid(listingId);\n  }, {\n    enabled: !!contract && listingId !== undefined\n  });\n}\n\n/**\n * Get the winning bid for an english auction\n *\n * @example\n * ```javascript\n * const listingId = 0;\n * const { data: winningBid, isLoading, error } = useWinningBid(contract, listingId);\n * ```\n *\n * @param contract - an instance of a marketplace contract\n * @param auctionId - the auction id to check\n * @returns a response object that includes the {@link Bid} that is winning the auction\n * @twfeature EnglishAuctions\n * @see {@link https://portal.thirdweb.com/react/react.useenglishauctionwinningbid?utm_source=sdk | Documentation}\n */\nfunction useEnglishAuctionWinningBid(contract, auctionId) {\n  const contractAddress = contract?.getAddress();\n  return useQueryWithNetwork(cacheKeys.contract.marketplace.englishAuctions.getWinningBid(contractAddress, auctionId), () => {\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    requiredParamInvariant(auctionId, \"No auction id provided\");\n    invariant(contract.englishAuctions.getWinningBid, \"contract does not support englishAuctions.getWinningBid\");\n    return contract.englishAuctions.getWinningBid(auctionId);\n  }, {\n    enabled: !!contract && auctionId !== undefined\n  });\n}\n\n/**\n * Get the winner of an english auction\n *\n * @example\n * ```javascript\n * const listingId = 0;\n * const { data: auctionWinner, isLoading, error } = useAuctionWinner(contract, listingId);\n * ```\n *\n * @param contract - an instance of a marketplace contract\n * @param listingId - the listing id to check\n * @returns a response object that includes the address of the winner of the auction or undefined if there is no winner yet\n * @twfeature EnglishAuctions\n * @see {@link https://portal.thirdweb.com/react/react.useauctionwinner?utm_source=sdk | Documentation}\n */\nfunction useAuctionWinner(contract, listingId) {\n  const contractAddress = contract?.getAddress();\n  return useQueryWithNetwork(cacheKeys.contract.marketplace.auction.getWinner(contractAddress, listingId), () => {\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    requiredParamInvariant(listingId, \"No listing id provided\");\n    const isV1 = isMarketplaceV1(contract);\n    if (isV1) {\n      invariant(contract.auction.getWinner, \"contract does not support auction.getWinner\");\n      return contract.auction.getWinner(listingId);\n    } else if (!isV1) {\n      invariant(contract.englishAuctions.getWinner, \"contract does not support englishAuctions.getWinner\");\n      return contract.englishAuctions.getWinner(listingId);\n    }\n    invariant(false, \"Contract is not a valid marketplace contract\");\n  }, {\n    enabled: !!contract && listingId !== undefined\n  });\n}\n\n/**\n * Get the bid buffer for an english auction\n *\n * @example\n * ```javascript\n * const { data: bidBuffer, isLoading, error } = useBidBuffer(contract);\n * ```\n *\n * @param contract - an instance of a marketplace contract\n * @param listingId - the listing id to check (only necessary for marketplace v3)\n\n * @returns a response object that includes an array of listings\n * @twfeature EnglishAuctions\n * @see {@link https://portal.thirdweb.com/react/react.usebidbuffer?utm_source=sdk | Documentation}\n */\nfunction useBidBuffer(contract, listingId) {\n  const contractAddress = contract?.getAddress();\n  return useQueryWithNetwork(cacheKeys.contract.marketplace.auction.getBidBufferBps(contractAddress, listingId), () => {\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    const isV1 = isMarketplaceV1(contract);\n    if (isV1) {\n      invariant(contract.getBidBufferBps, \"contract does not support getBidBufferBps\");\n      return contract.getBidBufferBps();\n    } else if (!isV1) {\n      invariant(contract.englishAuctions.getBidBufferBps, \"contract does not support englishAuctions.getBidBufferBps\");\n      requiredParamInvariant(listingId, \"No listing id provided\");\n      return BigNumber.from(contract.englishAuctions.getBidBufferBps(listingId));\n    }\n    invariant(false, \"Contract is not a valid marketplace contract\");\n  }, {\n    enabled: !!contract\n  });\n}\n\n/**\n * Get the minimum next bid for an english auction\n *\n * @example\n * ```javascript\n * const listingId = 0;\n * const { data: minimumNextBid, isLoading, error } = useMinimumNextBid(contract, listingId);\n * ```\n *\n * @param contract - an instance of a marketplace contract\n * @param listingId - the listing id to check\n * @returns a response object that includes the minimum next bid for the auction listing\n * @twfeature EnglishAucton\n * @see {@link https://portal.thirdweb.com/react/react.useminimumnextbid?utm_source=sdk | Documentation}\n */\nfunction useMinimumNextBid(contract, listingId) {\n  const contractAddress = contract?.getAddress();\n  return useQueryWithNetwork(cacheKeys.contract.marketplace.auction.getMinimumNextBid(contractAddress, listingId), async () => {\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    requiredParamInvariant(listingId, \"No listing id provided\");\n    const isV1 = isMarketplaceV1(contract);\n    if (isV1) {\n      invariant(contract.auction.getMinimumNextBid, \"contract does not support auction.getMinimumNextBid\");\n      return contract.auction.getMinimumNextBid(listingId);\n    } else if (!isV1) {\n      invariant(contract.englishAuctions.getMinimumNextBid, \"contract does not support englishAuctions.getMinimumNextBid\");\n      return contract.englishAuctions.getMinimumNextBid(listingId);\n    }\n    invariant(false, \"Contract is not a valid marketplace contract\");\n  }, {\n    enabled: !!contract && listingId !== undefined\n  });\n}\n\n/**\n * Get all the offers for a listing\n *\n * @remarks Fetch all the offers for a specified direct or auction listing.\n * @example\n * ```javascript\n * const listingId = 0;\n * const { data: offers, isLoading, error } = useOffers(contract, listingId);\n * ```\n *\n * @param contract - an instance of a Marketplace contract\n * @param listingId - the id of the listing to fetch offers for\n * @see {@link https://portal.thirdweb.com/react/react.useoffers?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useOffers(contract, listingId) {\n  const result = useContractEvents(contract, \"NewOffer\");\n  return {\n    ...result,\n    data: result.data?.filter(ev => ev.data.listingId.eq(listingId))?.map(ev => ev.data)\n  };\n}\n\n/** **********************/\n/**     WRITE HOOKS     **/\n/** **********************/\n\n/**\n * Create a new direct listing\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const { contract } = useContract(\"{{contract_address}}\");\n *   const {\n *     mutate: createDirectListing,\n *     isLoading,\n *     error,\n *   } = useCreateDirectListing(contract);\n *\n *   if (error) {\n *     console.error(\"failed to create direct listing\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={() => createDirectListing(directListingData)}\n *     >\n *       Create Direct Listing!\n *     </button>\n *   );\n * };\n * ```\n *\n * @param contract - an instance of a Marketplace contract\n * @returns a mutation object that can be used to create a new direct listing\n * @twfeature DirectListings\n * @see {@link https://portal.thirdweb.com/react/react.usecreatedirectlisting?utm_source=sdk | Documentation}\n */\nfunction useCreateDirectListing(contract) {\n  const activeChainId = useSDKChainId();\n  const contractAddress = contract?.getAddress();\n  const queryClient = useQueryClient();\n  const walletAddress = useAddress();\n  return useMutation(async data => {\n    invariant(walletAddress, \"No wallet connected, cannot create listing\");\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    const isV1 = isMarketplaceV1(contract);\n    if (isV1) {\n      invariant(contract.direct.createListing, \"contract does not support direct.createListing\");\n      return await contract.direct.createListing(data);\n    } else if (!isV1) {\n      invariant(contract.directListings.createListing, \"contract does not support directListings.createListing\");\n      return await contract.directListings.createListing(data);\n    }\n    invariant(false, \"Contract is not a valid marketplace contract\");\n  }, {\n    onSettled: () => invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n  });\n}\n\n/**\n * Create a new english auction\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const { contract } = useContract(\"{{contract_address}}\");\n *   const {\n *     mutate: createAuctionListing,\n *     isLoading,\n *     error,\n *   } = useCreateAuctionListing(contract);\n *\n *   if (error) {\n *     console.error(\"failed to create auction listing\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={() => createAuctionListing(auctionListingData)}\n *     >\n *       Create Auction Listing!\n *     </button>\n *   );\n * };\n * ```\n *\n * @param contract - an instance of a Marketplace contract\n * @returns a mutation object that can be used to create a new auction listing\n * @twfeature EnglishAuctions\n * @see {@link https://portal.thirdweb.com/react/react.usecreateauctionlisting?utm_source=sdk | Documentation}\n */\nfunction useCreateAuctionListing(contract) {\n  const activeChainId = useSDKChainId();\n  const contractAddress = contract?.getAddress();\n  const queryClient = useQueryClient();\n  const walletAddress = useAddress();\n  return useMutation(async data => {\n    invariant(walletAddress, \"no wallet connected, cannot create listing\");\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    const isV1 = isMarketplaceV1(contract);\n    if (isV1) {\n      invariant(contract.auction.createListing, \"contract does not support auction.createListing\");\n      return await contract.auction.createListing(data);\n    } else if (!isV1) {\n      invariant(contract.englishAuctions.createAuction, \"contract does not support englishAuctions.createAuction\");\n      return await contract.englishAuctions.createAuction(data);\n    }\n    invariant(false, \"Contract is not a valid marketplace contract\");\n  }, {\n    onSettled: () => invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n  });\n}\n\n/**\n * Cancel a listing\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const { contract } = useContract(\"{{contract_address}}\");\n *   const {\n *     mutate: cancelListing,\n *     isLoading,\n *     error,\n *   } = useCancelListing(contract);\n *\n *   if (error) {\n *     console.error(\"failed to cancel auction listing\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={cancelListing}\n *     >\n *       Cancel Auction Listing!\n *     </button>\n *   );\n * };\n * ```\n *\n * @param contract - an instance of a Marketplace contract\n * @returns a mutation object that can be used to cancel a listing\n * @see {@link https://portal.thirdweb.com/react/react.usecancellisting?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useCancelListing(contract) {\n  const activeChainId = useSDKChainId();\n  const contractAddress = contract?.getAddress();\n  const queryClient = useQueryClient();\n  const walletAddress = useAddress();\n  return useMutation(async data => {\n    invariant(walletAddress, \"no wallet connected, cannot create listing\");\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    if (data.type === ListingType.Auction) {\n      invariant(contract.auction.cancelListing, \"contract does not support auction.cancelListing\");\n      return await contract.auction.cancelListing(data.id);\n    } else {\n      invariant(contract.direct.cancelListing, \"contract does not support direct.cancelListing\");\n      return await contract.direct.cancelListing(data.id);\n    }\n  }, {\n    onSettled: () => invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n  });\n}\n\n/**\n * Cancel a direct listing\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const { contract } = useContract(\"{{contract_address}}\");\n *   const {\n *     mutate: cancelDirectListing,\n *     isLoading,\n *     error,\n *   } = useCancelDirectListing(contract);\n *\n *   if (error) {\n *     console.error(\"failed to cancel direct listing\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={cancelDirectListing}\n *     >\n *       Cancel Direct Listing\n *     </button>\n *   );\n * };\n * ```\n *\n * @param contract - an instance of a Marketplace v3 contract\n * @returns a mutation object that can be used to cancel a direct listing\n * @twfeature DirectListings\n * @see {@link https://portal.thirdweb.com/react/react.usecanceldirectlisting?utm_source=sdk | Documentation}\n */\nfunction useCancelDirectListing(contract) {\n  const activeChainId = useSDKChainId();\n  const contractAddress = contract?.getAddress();\n  const queryClient = useQueryClient();\n  const walletAddress = useAddress();\n  return useMutation(async listingId => {\n    invariant(walletAddress, \"no wallet connected, cannot create listing\");\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    requiredParamInvariant(listingId, \"No listing id provided\");\n    invariant(contract.directListings.cancelListing, \"contract does not support directListings.cancelListing\");\n    return await contract.directListings.cancelListing(listingId);\n  }, {\n    onSettled: () => invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n  });\n}\n\n/**\n * Cancel an english auction\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const { contract } = useContract(\"{{contract_address}}\");\n *   const {\n *     mutate: cancelEnglishAuction,\n *     isLoading,\n *     error,\n *   } = useCancelEnglishAuction(contract);\n *\n *   if (error) {\n *     console.error(\"failed to cancel english auction\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={cancelEnglishAuction}\n *     >\n *       Cancel English Auction\n *     </button>\n *   );\n * };\n * ```\n *\n * @param contract - an instance of a Marketplace v3 contract\n * @returns a mutation object that can be used to cancel an english auction\n * @twfeature EnglishAuctions\n * @see {@link https://portal.thirdweb.com/react/react.usecancelenglishauction?utm_source=sdk | Documentation}\n */\nfunction useCancelEnglishAuction(contract) {\n  const activeChainId = useSDKChainId();\n  const contractAddress = contract?.getAddress();\n  const queryClient = useQueryClient();\n  const walletAddress = useAddress();\n  return useMutation(async auctionId => {\n    invariant(walletAddress, \"no wallet connected, cannot create listing\");\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    requiredParamInvariant(auctionId, \"No auction id provided\");\n    invariant(contract.englishAuctions.cancelAuction, \"contract does not support englishAuctions.cancelAuction\");\n    return await contract.englishAuctions.cancelAuction(auctionId);\n  }, {\n    onSettled: () => invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n  });\n}\n\n/**\n * Make a bid on an auction listing\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const { contract } = useContract(\"{{contract_address}}\");\n *   const {\n *     mutate: makeBid,\n *     isLoading,\n *     error,\n *   } = useMakeBid(contract);\n *\n *   if (error) {\n *     console.error(\"failed to make a bid\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={() => makeBid({ listingId: 1, bid: 2 })}\n *     >\n *       Bid!\n *     </button>\n *   );\n * };\n * ```\n *\n * @param contract - an instance of a Marketplace contract\n * @returns a mutation object that can be used to make a bid on an auction listing\n * @see {@link https://portal.thirdweb.com/react/react.usemakebid?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useMakeBid(contract) {\n  const activeChainId = useSDKChainId();\n  const contractAddress = contract?.getAddress();\n  const queryClient = useQueryClient();\n  const walletAddress = useAddress();\n  return useMutation(async data => {\n    invariant(walletAddress, \"no wallet connected, cannot make bid\");\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    invariant(contract.auction.makeBid, \"contract does not support auction.makeBid\");\n    return await contract.auction.makeBid(data.listingId, data.bid);\n  }, {\n    onSettled: () => invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n  });\n}\n\n/**\n * Nake an offer on a direct or auction listing\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const { contract } = useContract(\"{{contract_address}}\");\n *   const {\n *     mutate: makeOffer,\n *     isLoading,\n *     error,\n *   } = useMakeOffer(contract);\n *\n *   if (error) {\n *     console.error(\"failed to make a bid\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={() => makeOffer({ listingId: 1, pricePerToken: 0.5, quantity: 1 })}\n *     >\n *       Bid!\n *     </button>\n *   );\n * };\n * ```\n *\n * @param contract - an instance of a Marketplace contract\n * @returns a mutation object that can be used to make a bid on an auction listing\n * @see {@link https://portal.thirdweb.com/react/react.usemakeoffer?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useMakeOffer(contract) {\n  const activeChainId = useSDKChainId();\n  const contractAddress = contract?.getAddress();\n  const queryClient = useQueryClient();\n  const walletAddress = useAddress();\n  return useMutation(async data => {\n    invariant(walletAddress, \"no wallet connected, cannot make bid\");\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    return await contract.makeOffer(data.listingId, data.pricePerToken, data.quantity);\n  }, {\n    onSettled: () => invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n  });\n}\n\n/**\n * Accept a specific offer on a direct listing\n *\n * @remarks will accept the latest offer by the given offeror.\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const { contract } = useContract(\"{{contract_address}}\");\n *   const {\n *     mutate: acceptOffer,\n *     isLoading,\n *     error,\n *   } = useAcceptDirectListingOffer(contract);\n *\n *   if (error) {\n *     console.error(\"failed to accept offer\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={() => acceptOffer({ listingId: 1, addressOfOfferor: \"{{wallet_address}}\" })}\n *     >\n *       Accept offer\n *     </button>\n *   );\n * };\n * ```\n *\n * @param contract - an instance of a Marketplace contract\n * @returns a mutation object that can be used to accept an offer on a direct listing\n * @see {@link https://portal.thirdweb.com/react/react.useacceptdirectlistingoffer?utm_source=sdk | Documentation}\n */\nfunction useAcceptDirectListingOffer(contract) {\n  const activeChainId = useSDKChainId();\n  const contractAddress = contract?.getAddress();\n  const queryClient = useQueryClient();\n  const walletAddress = useAddress();\n  return useMutation(async data => {\n    invariant(walletAddress, \"no wallet connected, cannot make bid\");\n    requiredParamInvariant(contract?.direct, \"No Direct instance provided\");\n    return await contract.direct.acceptOffer(data.listingId, data.addressOfOfferor);\n  }, {\n    onSettled: () => invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n  });\n}\n\n/**\n * Execute an auction sale. Can only be executed once the auction has ended and the auction has a winning bid.\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const { contract } = useContract(\"{{contract_address}}\");\n *   const {\n *     mutate: executeAuctionSale,\n *     isLoading,\n *     error,\n *   } = useExecuteAuctionSale(contract);\n *\n *   if (error) {\n *     console.error(\"failed to execute sale\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={() => executeAuctionSale({ listingId: 1 })}\n *     >\n *       Execute sale\n *     </button>\n *   );\n * };\n * ```\n *\n * @param contract - an instance of a Marketplace contract\n * @returns a mutation object that can be used to accept an offer on a direct listing\n * @see {@link https://portal.thirdweb.com/react/react.useexecuteauctionsale?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useExecuteAuctionSale(contract) {\n  const activeChainId = useSDKChainId();\n  const contractAddress = contract?.getAddress();\n  const queryClient = useQueryClient();\n  const walletAddress = useAddress();\n  return useMutation(async data => {\n    invariant(walletAddress, \"no wallet connected, cannot make bid\");\n    requiredParamInvariant(contract?.auction, \"No Auction marketplace instance provided\");\n    return await contract.auction.executeSale(data.listingId);\n  }, {\n    onSettled: () => invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n  });\n}\n\n/**\n * Buy out an auction listing\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const { contract } = useContract(\"{{contract_address}}\");\n *   const {\n *     mutate: buyNow,\n *     isLoading,\n *     error,\n *   } = useBuyNow(contract);\n *\n *   if (error) {\n *     console.error(\"failed to buyout listing\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={() => buyNow({listingId: 1, type: ListingType.Auction})}\n *     >\n *       Buy listing!\n *     </button>\n *   );\n * };\n * ```\n *\n * @param contract - an instance of a Marketplace contract\n * @returns a mutation object that can be used to buy out an auction listing\n * @see {@link https://portal.thirdweb.com/react/react.usebuynow?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useBuyNow(contract) {\n  const activeChainId = useSDKChainId();\n  const contractAddress = contract?.getAddress();\n  const queryClient = useQueryClient();\n  const walletAddress = useAddress();\n  return useMutation(async data => {\n    invariant(walletAddress, \"no wallet connected, cannot make bid\");\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    if (data.type === ListingType.Direct) {\n      invariant(contract.direct.buyoutListing, \"contract does not support direct.buyoutListing\");\n      return await contract.direct.buyoutListing(data.id, data.buyAmount, data.buyForWallet);\n    }\n    invariant(contract.auction.buyoutListing, \"contract does not support auction.buyoutListing\");\n    return await contract.auction.buyoutListing(data.id);\n  }, {\n    onSettled: () => invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n  });\n}\n\n/**\n * Buy a direct listing\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const { contract } = useContract(\"{{contract_address}}\", \"marketplace-v3\");\n *   const {\n *     mutate: buyNow,\n *     isLoading,\n *     error,\n *   } = useBuyDirectListing(contract);\n *\n *   if (error) {\n *     console.error(\"failed to buy direct listing\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={() => buyNow({listingId: 1, quantity: 1, buyer: \"{{address}}\"})}\n *     >\n *       Buy listing!\n *     </button>\n *   );\n * };\n * ```\n *\n * @param contract - an instance of a MarketplaceV3 contract\n * @returns a mutation object that can be used to buy out a direct listing\n * @see {@link https://portal.thirdweb.com/react/react.useBuyDirectListing?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useBuyDirectListing(contract) {\n  const activeChainId = useSDKChainId();\n  const contractAddress = contract?.getAddress();\n  const queryClient = useQueryClient();\n  const walletAddress = useAddress();\n  return useMutation(async data => {\n    invariant(walletAddress, \"no wallet connected, cannot buy from listing\");\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    invariant(contract.directListings.buyFromListing, \"contract does not support directListings.buyFromListing\");\n    return await contract.directListings.buyFromListing(data.listingId, data.quantity, data.buyer);\n  }, {\n    onSettled: () => invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n  });\n}\nfunction isMarketplaceV1(contract) {\n  return contract.getAllListings !== undefined;\n}\n\n/** **********************/\n/**     READ  HOOKS     **/\n/** **********************/\n\n/**\n * Get a single NFT\n *\n * @example\n * ```javascript\n * const tokenId = 0; // the tokenId to look up\n * const { data: nft, isLoading, error } = useNFT(contract, tokenId);\n * ```\n *\n * @param contract - an instance of a {@link NFTContract}\n * @param tokenId - the tokenId to look up\n * @returns a response object that includes the metadata for the given tokenId\n * @beta\n * @twfeature ERC721 | ERC1155\n * @see {@link https://portal.thirdweb.com/react/react.usenft?utm_source=sdk | Documentation}\n */\nfunction useNFT(contract, tokenId) {\n  const contractAddress = contract?.getAddress();\n  const {\n    erc721,\n    erc1155\n  } = getErcs(contract);\n  return useQueryWithNetwork(cacheKeys.contract.nft.get(contractAddress, tokenId), async () => {\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    if (erc1155) {\n      invariant(erc1155.get, \"Contract instance does not support get\");\n      return await erc1155.get(BigNumber.from(tokenId || 0));\n    }\n    if (erc721) {\n      invariant(erc721.get, \"Contract instance does not support get\");\n      return await erc721.get(BigNumber.from(tokenId || 0));\n    }\n    invariant(false, \"Unknown NFT type\");\n  }, {\n    enabled: !!erc721 || !!erc1155 && tokenId !== undefined\n  });\n}\n\n/**\n * Get all NFTs\n *\n * @example\n * ```javascript\n * const { data: nfts, isLoading, error } = useNFTs(contract, { start: 0, count: 100 });\n * ```\n *\n * @param contract - an instance of a {@link NFTContract}\n * @param queryParams - query params to pass to the query for pagination\n * @returns a response object that includes an array of NFTs\n * @twfeature ERC721Supply | ERC721Enumerable | ERC1155Enumerable\n * @beta\n * @see {@link https://portal.thirdweb.com/react/react.usenfts?utm_source=sdk | Documentation}\n */\nfunction useNFTs(contract, queryParams) {\n  const contractAddress = contract?.getAddress();\n  const {\n    erc721,\n    erc1155\n  } = getErcs(contract);\n  return useQueryWithNetwork(cacheKeys.contract.nft.query.all(contractAddress, queryParams), async () => {\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    if (erc721) {\n      invariant(erc721.getAll, \"Contract instance does not support getAll\");\n      return await erc721.getAll(queryParams);\n    }\n    if (erc1155) {\n      invariant(erc1155.getAll, \"Contract instance does not support getAll\");\n      return await erc1155.getAll(queryParams);\n    }\n    invariant(false, \"Unknown NFT type\");\n  }, {\n    enabled: !!erc721 || !!erc1155\n  });\n}\n\n/**\n * Get total supply count\n *\n * @example\n * ```javascript\n * const { contract } = useContract(\"{{contract_address}}\");\n * const { data: count, isLoading, error } = useTotalCount(contract);\n * ```\n *\n * @param contract - an instance of a {@link NFTContract}\n * @returns a response object that includes the total count of NFTs\n * @beta\n * @twfeature ERC721Supply | ERC1155Enumerable\n * @see {@link https://portal.thirdweb.com/react/react.usetotalcount?utm_source=sdk | Documentation}\n */\nfunction useTotalCount(contract) {\n  const contractAddress = contract?.getAddress();\n  const {\n    erc721,\n    erc1155\n  } = getErcs(contract);\n  return useQueryWithNetwork(cacheKeys.contract.nft.query.totalCount(contractAddress), async () => {\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    if (erc1155) {\n      invariant(erc1155.totalCount, \"Contract instance does not support totalCount\");\n      return await erc1155.totalCount();\n    }\n    if (erc721) {\n      invariant(erc721.totalCount, \"Contract instance does not support totalCount\");\n      return await erc721.totalCount();\n    }\n    invariant(false, \"Unknown NFT type\");\n  }, {\n    enabled: !!erc721 || !!erc1155\n  });\n}\n\n/**\n * Get total minted supply count\n *\n * @example\n * ```javascript\n * const { contract } = useContract(\"{{contract_address}}\");\n * const { data: totalCirculatingSupply, isLoading, error } = useTotalCirculatingSupply(contract);\n * ```\n *\n * @param contract - an instance of a {@link NFTContract}\n * @param tokenId - required for ERC1155, the tokenId to look up\n * @returns a response object that includes the total minted supply\n * @beta\n * @twfeature ERC721Supply | ERC1155Enumerable\n * @see {@link https://portal.thirdweb.com/react/react.usetotalcirculatingsupply?utm_source=sdk | Documentation}\n */\nfunction useTotalCirculatingSupply(contract, tokenId) {\n  const contractAddress = contract?.getAddress();\n  const {\n    erc721,\n    erc1155\n  } = getErcs(contract);\n  return useQueryWithNetwork(cacheKeys.contract.nft.query.totalCirculatingSupply(contractAddress), async () => {\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    if (erc1155) {\n      invariant(erc1155.totalCirculatingSupply, \"Contract instance does not support totalCirculatingSupply\");\n      requiredParamInvariant(tokenId, \"No tokenId provided\");\n      return await erc1155.totalCirculatingSupply(tokenId);\n    }\n    if (erc721) {\n      invariant(erc721.totalCirculatingSupply, \"Contract instance does not support totalCirculatingSupply\");\n      return await erc721.totalCirculatingSupply();\n    }\n    invariant(false, \"Unknown NFT type\");\n  }, {\n    enabled: !!erc721 || !!erc1155 && tokenId !== undefined\n  });\n}\n\n/**\n * Get all NFTs owned by a specific wallet\n *\n * @example\n * ```javascript\n * const { data: ownedNFTs, isLoading, error } = useOwnedNFTs(contract, \"{{wallet_address}}\");\n * ```\n *\n * @param contract - an instance of a {@link NFTContract}\n * @param ownerWalletAddress - the wallet address to get owned tokens for\n * @returns a response object that includes the list of owned tokens\n * @beta\n * @twfeature ERC721Enumerable | ERC1155Enumerable | ERC721Supply\n * @see {@link https://portal.thirdweb.com/react/react.useownednfts?utm_source=sdk | Documentation}\n */\nfunction useOwnedNFTs(contract, ownerWalletAddress) {\n  const contractAddress = contract?.getAddress();\n  const {\n    erc721,\n    erc1155\n  } = getErcs(contract);\n  return useQueryWithNetwork(cacheKeys.contract.nft.query.owned.all(contractAddress, ownerWalletAddress), async () => {\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    invariant(ownerWalletAddress, \"No wallet address provided\");\n    if (erc721) {\n      return await erc721.getOwned(ownerWalletAddress);\n    }\n    if (erc1155) {\n      return await erc1155.getOwned(ownerWalletAddress);\n    }\n    invariant(false, \"Unknown NFT type\");\n  }, {\n    enabled: (!!erc721 || !!erc1155) && !!ownerWalletAddress\n  });\n}\n\n/**\n * Get NFT balance of a specific wallet\n *\n * @example\n * ```javascript\n * const { data: ownerBalance, isLoading, error } = useNFTBalance(contract, \"{{wallet_address}}\");\n * // for ERC1155 contracts, you can also pass a tokenId\n * const tokenId = 0;\n * const { data: ownerBalance, isLoading, error } = useNFTBalance(contract, \"{{wallet_address}}\", tokenId);\n * ```\n *\n * @param contract - an instance of a {@link NFTContract}\n * @param ownerWalletAddress - the wallet address to check the balance of\n * @param tokenId - required for ERC1155, the tokenId to look up\n * @returns a response object that includes the total balance of the owner\n * @twfeature ERC721 | ERC1155\n * @see {@link https://portal.thirdweb.com/react/react.usenftbalance?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useNFTBalance(contract, ownerWalletAddress, tokenId) {\n  const contractAddress = contract?.getAddress();\n  const {\n    erc721,\n    erc1155\n  } = getErcs(contract);\n  return useQueryWithNetwork(cacheKeys.contract.nft.balanceOf(contractAddress, ownerWalletAddress, tokenId), () => {\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    invariant(ownerWalletAddress, \"No owner wallet address provided\");\n    if (erc1155) {\n      requiredParamInvariant(tokenId, \"No tokenId provided\");\n      invariant(erc1155.balanceOf, \"Contract instance does not support balanceOf\");\n      return erc1155.balanceOf(ownerWalletAddress, tokenId);\n    }\n    if (erc721) {\n      invariant(erc721.balanceOf, \"Contract instance does not support balanceOf\");\n      return erc721.balanceOf(ownerWalletAddress);\n    }\n    invariant(false, \"Unknown NFT type\");\n  }, {\n    enabled: !!erc721 || !!erc1155 && !!ownerWalletAddress\n  });\n}\n\n/**\n * Get the shared metadata of an Open Edition NFT contract\n *\n * @example\n * ```javascript\n * const { data: sharedMetadata, isLoading, error } = useSharedMetadata(contract);\n * ```\n *\n * @param contract - an instance of a {@link NFTContract}\n * @returns a response object that includes the shared metadata of the contract\n * @twfeature ERC721SharedMetadata\n * @see {@link https://portal.thirdweb.com/react/react.usesharedmetadata?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useSharedMetadata(contract) {\n  const contractAddress = contract?.getAddress();\n  const {\n    erc721\n  } = getErcs(contract);\n  return useQueryWithNetwork(cacheKeys.contract.nft.sharedMetadata.get(contractAddress), () => {\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    if (erc721) {\n      invariant(erc721.sharedMetadata.get, \"Contract instance does not support sharedMetadata.get\");\n      return erc721.sharedMetadata.get();\n    }\n    invariant(false, \"Unknown NFT type\");\n  }, {\n    enabled: !!contract\n  });\n}\n\n/** **********************/\n/**     WRITE HOOKS     **/\n/** **********************/\n\n/**\n * Mint an NFT to a specific wallet\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const { contract } = useContract(\"{{contract_address}}\");\n *   const {\n *     mutate: mintNft,\n *     isLoading,\n *     error,\n *   } = useMintNFT(contract);\n *\n *   if (error) {\n *     console.error(\"failed to mint NFT\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={() => mintNft({ name: \"My awesome NFT!\", to: \"{{wallet_address}}\" })}\n *     >\n *       Mint!\n *     </button>\n *   );\n * };\n * ```\n *\n * @param contract - an instance of a {@link NFTContract}\n * @returns a mutation object that can be used to mint a new NFT token to the connected wallet\n * @beta\n * @twfeature ERC721Mintable | ERC1155Mintable\n * @see {@link https://portal.thirdweb.com/react/react.usemintnft?utm_source=sdk | Documentation}\n */\nfunction useMintNFT(contract) {\n  const activeChainId = useSDKChainId();\n  const contractAddress = contract?.getAddress();\n  const queryClient = useQueryClient();\n  const {\n    erc1155,\n    erc721\n  } = getErcs(contract);\n  return useMutation(async data => {\n    invariant(data.to, 'No \"to\" address provided');\n    requiredParamInvariant(contract, \"contract is undefined\");\n    if (erc1155) {\n      invariant(\"supply\" in data, \"supply not provided\");\n      const {\n        to,\n        metadata,\n        supply\n      } = data;\n      return await erc1155.mintTo(to, {\n        metadata,\n        supply: BigNumber.from(supply || 1)\n      });\n    }\n    if (erc721) {\n      return await erc721.mintTo(data.to, data.metadata);\n    }\n    invariant(false, \"Unknown NFT type\");\n  }, {\n    onSettled: () => invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n  });\n}\n\n/**\n * Increase the supply of an existing NFT\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const { contract } = useContract(\"{{contract_address}}\");\n *   const {\n *     mutate: mintNftSupply,\n *     isLoading,\n *     error,\n *   } = useMintNFTSupply(contract);\n *\n *   if (error) {\n *     console.error(\"failed to mint additional supply\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={() => mintNftSupply({ tokenId: 0, additionalSupply: 100, to: \"{{wallet_address}}\"})}\n *     >\n *       Mint Additional Supply!\n *     </button>\n *   );\n * };\n * ```\n *\n * @param contract - an instance of a {@link Erc1155}\n * @returns a mutation object that can be used to mint a more supply of a token id to the provided wallet\n * @beta\n * @twfeature ERC1155Mintable\n * @see {@link https://portal.thirdweb.com/react/react.usemintnftsupply?utm_source=sdk | Documentation}\n */\nfunction useMintNFTSupply(contract) {\n  const activeChainId = useSDKChainId();\n  const contractAddress = contract?.getAddress();\n  const queryClient = useQueryClient();\n  return useMutation(async data => {\n    invariant(data.to, 'No \"to\" address provided');\n    requiredParamInvariant(contract, \"contract is undefined\");\n    requiredParamInvariant(data.tokenId, \"tokenId not provided\");\n    invariant(\"additionalSupply\" in data, \"additionalSupply not provided\");\n    const {\n      to,\n      tokenId,\n      additionalSupply\n    } = data;\n    return await contract.mintAdditionalSupplyTo(to, tokenId, additionalSupply);\n  }, {\n    onSettled: () => invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n  });\n}\n\n/**\n * Transfer an NFT\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const { contract } = useContract(\"{{contract_address}}\");\n *   const {\n *     mutate: transferNFT,\n *     isLoading,\n *     error,\n *   } = useTransferNFT(contract);\n *\n *   if (error) {\n *     console.error(\"failed to transfer NFT\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={() => transferNFT({\n *         to: \"{{wallet_address}}\",\n *         tokenId: 2\n *       })}\n *     >\n *       Transfer\n *     </button>\n *   );\n * };\n * ```\n *\n * @param contract - an instance of a {@link NFTContract}\n * @returns a mutation object that can be used to transfer NFTs\n * @beta\n * @twfeature ERC721 | ERC1155\n * @see {@link https://portal.thirdweb.com/react/react.usetransfernft?utm_source=sdk | Documentation}\n */\nfunction useTransferNFT(contract) {\n  const activeChainId = useSDKChainId();\n  const contractAddress = contract?.getAddress();\n  const queryClient = useQueryClient();\n  const {\n    erc1155,\n    erc721\n  } = getErcs(contract);\n  return useMutation(data => {\n    invariant(\"to\" in data, \"to not provided\");\n    if (erc1155) {\n      invariant(erc1155.transfer, \"contract does not support transfer\");\n      requiredParamInvariant(data.tokenId, \"tokenId not provided\");\n      invariant(\"amount\" in data, \"amount not provided\");\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      return erc1155.transfer(data.to, data.tokenId, data.amount);\n    }\n    if (erc721) {\n      return erc721.transfer(data.to, data.tokenId);\n    }\n    invariant(false, \"Unknown NFT type\");\n  }, {\n    onSettled: () => invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n  });\n}\n\n/**\n * Airdrop NFTs to a list of wallets\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const { contract } = useContract(\"{{contract_address}}\");\n *   const {\n *     mutate: airdropNFT,\n *     isLoading,\n *     error,\n *   } = useAirdropNFT(contract);\n *\n *   if (error) {\n *     console.error(\"failed to transfer batch NFTs\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={() => airdropNFT({\n *          tokenId: 2,\n *          addresses: [\n *            { address: \"{{wallet_address}}\", quantity: 2 },\n *            { address: \"{{wallet_address}}\", quantity: 4 } }\n *          ]\n *       )}\n *     >\n *       Airdrop NFT\n *     </button>\n *   );\n * };\n * ```\n *\n * @param contract - an instance of a {@link Erc1155}\n * @returns a mutation object that can be used to transfer batch NFTs\n * @twfeature ERC1155\n * @see {@link https://portal.thirdweb.com/react/react.useairdropnft?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useAirdropNFT(contract) {\n  const activeChainId = useSDKChainId();\n  const contractAddress = contract?.getAddress();\n  const queryClient = useQueryClient();\n  return useMutation(_ref => {\n    let {\n      tokenId,\n      addresses\n    } = _ref;\n    requiredParamInvariant(contract, \"contract is undefined\");\n    invariant(contract.airdrop, \"contract does not support airdrop\");\n    return contract.airdrop(tokenId, addresses);\n  }, {\n    onSettled: () => invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n  });\n}\n\n/**\n * Burn an NFT\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const { contract } = useContract(\"{{contract_address}}\");\n *   const {\n *     mutate: burnNFT,\n *     isLoading,\n *     error,\n *   } = useBurnNFT(contract);\n *\n *   if (error) {\n *     console.error(\"failed to burn NFT\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={() => burnNFT({ tokenId: 0, amount: 1 })}\n *     >\n *       Burn!\n *     </button>\n *   );\n * };\n * ```\n *\n * @param contract - an instance of a {@link NFTContract}\n * @returns a mutation object that can be used to burn an NFT token from the connected wallet\n * @twfeature ERC721Burnable | ERC1155Burnable\n * @see {@link https://portal.thirdweb.com/react/react.useburnnft?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useBurnNFT(contract) {\n  const activeChainId = useSDKChainId();\n  const contractAddress = contract?.getAddress();\n  const queryClient = useQueryClient();\n  const {\n    erc1155,\n    erc721\n  } = getErcs(contract);\n  return useMutation(async data => {\n    requiredParamInvariant(data.tokenId, \"No tokenId provided\");\n    requiredParamInvariant(contract, \"contract is undefined\");\n    if (erc1155) {\n      invariant(\"amount\" in data, \"amount not provided\");\n      const {\n        tokenId,\n        amount\n      } = data;\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      return await erc1155.burn(tokenId, amount);\n    }\n    if (erc721) {\n      const {\n        tokenId\n      } = data;\n      return await erc721.burn(tokenId);\n    }\n    invariant(false, \"Unknown NFT type\");\n  }, {\n    onSettled: () => invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n  });\n}\n\n/**\n * Set shared metadata\n * TODO add docs\n * @private\n */\nfunction useSetSharedMetadata(contract) {\n  const activeChainId = useSDKChainId();\n  const contractAddress = contract?.getAddress();\n  const queryClient = useQueryClient();\n  const {\n    erc721\n  } = getErcs(contract);\n  return useMutation(async data => {\n    if (erc721) {\n      return await erc721.sharedMetadata.set(data);\n    }\n    invariant(false, \"Unknown NFT type\");\n  }, {\n    onSettled: () => invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n  });\n}\n\n/** **********************/\n/**         UTILS       **/\n/** **********************/\n\n/**\n * @internal\n */\n/**\n * @internal\n */\n/**\n * @internal\n */\n/** **********************/\n/**     READ  HOOKS     **/\n/** **********************/\n/**\n * Get all members of all roles\n *\n * @example\n * ```jsx\n * const { data: roles, isLoading, error } = useAllRoleMembers(contract);\n * ```\n *\n * @param contract - an instance of a {@link SmartContract}\n * @returns a list of addresses for all supported roles on the contract.\n * @twfeature PermissionsEnumerable\n * @see {@link https://portal.thirdweb.com/react/react.useallrolemembers?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useAllRoleMembers(contract) {\n  const contractAddress = contract?.getAddress();\n  return useQueryWithNetwork(cacheKeys.extensions.roles.getAll(contractAddress), () => {\n    requiredParamInvariant(contract, \"No contract provided\");\n    invariant(contract.roles, \"Contract does not support roles\");\n    // have to cast to any because of role bs, type is defined in the useQueryWithNetwork definition above\n    return contract.roles.getAll();\n  }, {\n    enabled: !!contract && !!contractAddress\n  });\n}\n\n/**\n * Get all members of a specific role\n *\n * @example\n * ```jsx\n * const { data: members, isLoading, error } = useRoleMembers(SmartContract, \"admin\");\n * ```\n *\n * @param contract - an instance of a {@link SmartContract}\n * @param role - the role to get the members of, see {@link Role}\n * @returns a list of addresses that are members of the role\n * @twfeature Permissions\n * @see {@link https://portal.thirdweb.com/react/react.userolemembers?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useRoleMembers(contract, role) {\n  const contractAddress = contract?.getAddress();\n  return useQueryWithNetwork(cacheKeys.extensions.roles.get(contractAddress, role), () => {\n    requiredParamInvariant(contract, \"No contract provided\");\n    invariant(contract.roles, \"Contract does not support roles\");\n    return contract.roles.get(role);\n  }, {\n    enabled: !!contract && !!contractAddress && !!role\n  });\n}\n\n/**\n * Check if an address is a member of a specific role\n *\n * @example\n * ```jsx\n * const { data: isMember, isLoading, error } = useIsAddressRole(contract, \"admin\", \"{{wallet_address}}\");\n * ```\n *\n * @param contract - an instance of a {@link SmartContract}\n * @param role - the role to check the member against, see {@link Role}\n * @param walletAddress - the address to check\n * @returns true if the address is a member of the role, or false if not\n * @twfeature PermissionsEnumerable\n * @see {@link https://portal.thirdweb.com/react/react.useisaddressrole?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useIsAddressRole(contract, role, walletAddress) {\n  // TODO this might be possible to do with `verify` fn instead?\n  const contractHasRoles = !!(contract && contract.roles);\n  const {\n    data\n  } = useRoleMembers(contractHasRoles ? contract : undefined, role);\n\n  // if the contract does not have roles then everything is allowed === true\n  if (contractHasRoles === false) {\n    return true;\n  }\n\n  // switch logic (if address 0 is in the role list then anyone has permissions to it)\n  if (data?.includes(constants.AddressZero)) {\n    return true;\n  }\n\n  // actual role check logic\n  return !!(walletAddress && data?.includes(walletAddress));\n}\n\n/** **********************/\n/**     WRITE HOOKS     **/\n/** **********************/\n\n/**\n * Overwrite the list of members for specific roles\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const { contract } = useContract(\"{{contract_address}}\");\n *   const {\n *     mutate: overwriteRoles,\n *     isLoading,\n *     error,\n *   } = useSetAllRoleMembers(contract);\n *\n *   if (error) {\n *     console.error(\"failed to overwrite roles\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={() => overwriteRoles({ rolesWithAddresses: { minter: [\"{{wallet_address}\"] } })}\n *     >\n *       Overwrite Roles\n *     </button>\n *   );\n * };\n * ```\n *\n * @param contract - an instance of a {@link SmartContract}\n * @returns a mutation object that can be used to overwrite all roles on the contract\n * @twfeature Permissions\n * @beta\n */\nfunction useSetAllRoleMembers(contract) {\n  const activeChainId = useSDKChainId();\n  const contractAddress = contract?.getAddress();\n  const queryClient = useQueryClient();\n  return useMutation(async rolesWithAddresses => {\n    requiredParamInvariant(contract, \"No contract provided\");\n    invariant(contract.roles, \"Contract does not support roles\");\n    await contract.roles.setAll(rolesWithAddresses);\n  }, {\n    onSettled: () => invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n  });\n}\n\n/**\n * Grant a role to a specific address\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const { contract } = useContract(\"{{contract_address}}\");\n *   const {\n *     mutate: grantRole,\n *     isLoading,\n *     error,\n *   } = useGrantRole(contract);\n *\n *   if (error) {\n *     console.error(\"failed to grant role\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={() => grantRole({ role: \"admin\", address: {{wallet_address}} })}\n *     >\n *       Grant Role\n *     </button>\n *   );\n * };\n * ```\n *\n * @param contract - an instance of a {@link SmartContract}\n * @returns a mutation object that can be used to grant a member of a role on the contract\n * @twfeature Permissions | PermissionsEnumerable\n * @see {@link https://portal.thirdweb.com/react/react.usegrantrole?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useGrantRole(contract) {\n  const activeChainId = useSDKChainId();\n  const contractAddress = contract?.getAddress();\n  const queryClient = useQueryClient();\n  return useMutation(async params => {\n    requiredParamInvariant(contract, \"No contract provided\");\n    invariant(contract.roles, \"Contract does not support roles\");\n    await contract.roles.grant(params.role, params.address);\n  }, {\n    onSettled: () => invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n  });\n}\n\n/**\n * Revoke a role from a specific address\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const { contract } = useContract(\"{{contract_address}}\");\n *   const {\n *     mutate: revokeRole,\n *     isLoading,\n *     error,\n *   } = useRevokeRole(contract);\n *\n *   if (error) {\n *     console.error(\"failed to revoke role\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={() => revokeRole({ role: \"admin\", address: {{wallet_address}} })}\n *     >\n *       Revoke Role\n *     </button>\n *   );\n * };\n * ```\n *\n * @param contract - an instance of a {@link SmartContract}\n * @returns a mutation object that can be used to revoke a role from a member on the contract\n * @twfeature Permissions | PermissionsEnumerable\n * @see {@link https://portal.thirdweb.com/react/react.userevokerole?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useRevokeRole(contract) {\n  const activeChainId = useSDKChainId();\n  const contractAddress = contract?.getAddress();\n  const queryClient = useQueryClient();\n  return useMutation(async params => {\n    requiredParamInvariant(contract, \"No contract provided\");\n    invariant(contract.roles, \"Contract does not support roles\");\n    await contract.roles.revoke(params.role, params.address);\n  }, {\n    onSettled: () => invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n  });\n}\n\n/** **********************/\n/**     READ  HOOKS     **/\n/** **********************/\n\n/**\n * Get the total supply for this token\n *\n * @example\n * ```javascript\n * const { data: totalSupply, isLoading, error } = useTokenSupply(contract);\n * ```\n *\n * @param contract - an instance of a {@link TokenContract}\n * @returns a response object that includes the total minted supply\n * @twfeature ERC20\n * @see {@link https://portal.thirdweb.com/react/react.usetokensupply?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useTokenSupply(contract) {\n  const contractAddress = contract?.getAddress();\n  return useQueryWithNetwork(cacheKeys.contract.token.totalSupply(contractAddress), () => {\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    const erc20 = getErc20(contract);\n    if (erc20) {\n      return erc20.totalSupply();\n    }\n    invariant(false, \"Smart contract is not a valid erc20 contract\");\n  }, {\n    enabled: !!contract || !!contractAddress\n  });\n}\n\n/**\n * Get token balance for a specific wallet\n *\n * @example\n * ```javascript\n * const { data: balance, isLoading, error } = useTokenBalance(contract, \"{{wallet_address}}\");\n * ```\n *\n * @param contract - an instance of a {@link TokenContract}\n * @returns a response object that includes the balance of the address\n * @twfeature ERC20\n * @see {@link https://portal.thirdweb.com/react/react.usetokenbalance?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useTokenBalance(contract, walletAddress) {\n  const contractAddress = contract?.getAddress();\n  const erc20 = getErc20(contract);\n  return useQueryWithNetwork(cacheKeys.contract.token.balanceOf(contractAddress, walletAddress), async () => {\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    invariant(walletAddress, \"No address provided\");\n    if (erc20) {\n      return await erc20.balanceOf(walletAddress);\n    }\n    invariant(false, \"Smart contract is not a valid erc20 contract\");\n  }, {\n    enabled: !!walletAddress && !!contract\n  });\n}\n\n/**\n * Get token decimals\n *\n * @example\n * ```javascript\n * const { data: decimals, isLoading, error } = useTokenDecimals(contract);\n * ```\n *\n * @param contract - an instance of a {@link TokenContract}\n * @returns a response object that includes the decimals of the ERC20 token\n * @twfeature ERC20\n * @see {@link https://portal.thirdweb.com/react/react.usetokendecimals?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useTokenDecimals(contract) {\n  const contractAddress = contract?.getAddress();\n  const erc20 = getErc20(contract);\n  return useQueryWithNetwork(cacheKeys.contract.token.decimals(contractAddress), async () => {\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    if (erc20) {\n      return (await erc20.get()).decimals;\n    }\n    invariant(false, \"Smart contract is not a valid erc20 contract\");\n  }, {\n    enabled: !!contract\n  });\n}\n\n/** **********************/\n/**     WRITE HOOKS     **/\n/** **********************/\n\n/**\n * Mint tokens\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const { contract } = useContract(\"{{contract_address}}\");\n *   const {\n *     mutate: mintTokens,\n *     isLoading,\n *     error,\n *   } = useMintToken(contract);\n *\n *   if (error) {\n *     console.error(\"failed to mint tokens\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={() => mintTokens({ to: \"{{wallet_address}}\", amount: 1000 })}\n *     >\n *       Mint!\n *     </button>\n *   );\n * };\n * ```\n *\n * @param contract - an instance of a {@link TokenContract}\n * @returns a mutation object that can be used to mint new tokens to the connected wallet\n * @twfeature ERC20Mintable\n * @see {@link https://portal.thirdweb.com/react/react.useminttoken?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useMintToken(contract) {\n  const activeChainId = useSDKChainId();\n  const contractAddress = contract?.getAddress();\n  const queryClient = useQueryClient();\n  const erc20 = getErc20(contract);\n  return useMutation(data => {\n    const {\n      to,\n      amount\n    } = data;\n    requiredParamInvariant(contract, \"contract is undefined\");\n    if (erc20) {\n      return erc20.mintTo(to, amount);\n    }\n    invariant(false, \"Smart contract is not a valid erc20 contract\");\n  }, {\n    onSettled: () => invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n  });\n}\n\n/**\n * Claim tokens to a specific wallet\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const { contract } = useContract(\"{{contract_address}}\");\n *   const {\n *     mutate: claimTokens,\n *     isLoading,\n *     error,\n *   } = useClaimToken(contract);\n *\n *   if (error) {\n *     console.error(\"failed to claim tokens\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={() => claimTokens({ to: \"{{wallet_address}}\", amount: 100 })}\n *     >\n *       Claim Tokens!\n *     </button>\n *   );\n * };\n * ```\n *\n * @param contract - an instance of a {@link TokenContract}\n * @returns a mutation object that can be used to tokens to the wallet specified in the params\n * @twfeature ERC20ClaimPhasesV2 | ERC20ClaimPhasesV1 | ERC20ClaimConditionsV2 | ERC20ClaimConditionsV1\n * @see {@link https://portal.thirdweb.com/react/react.useclaimtoken?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useClaimToken(contract) {\n  const activeChainId = useSDKChainId();\n  const contractAddress = contract?.getAddress();\n  const queryClient = useQueryClient();\n  const erc20 = getErc20(contract);\n  return useMutation(async data => {\n    invariant(data.to, 'No \"to\" address provided');\n    if (erc20) {\n      invariant(erc20?.claimTo, \"contract does not support claimTo\");\n      return await erc20.claimTo(data.to, data.amount, {\n        checkERC20Allowance: data.checkERC20Allowance\n      });\n    }\n    invariant(false, \"Smart contract is not a valid erc20 contract\");\n  }, {\n    onSettled: () => invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n  });\n}\n\n/**\n * Transfer tokens to a specific wallet\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const { contract } = useContract(\"{{contract_address}}\");\n *   const {\n *     mutate: transferTokens,\n *     isLoading,\n *     error,\n *   } = useTransferToken(contract);\n *\n *   if (error) {\n *     console.error(\"failed to transfer tokens\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={() => transferTokens({ to: \"{{wallet_address}}\", amount: 1000 })}\n *     >\n *       Transfer\n *     </button>\n *   );\n * };\n * ```\n *\n * @param contract - an instance of a {@link TokenContract}\n * @returns a mutation object that can be used to transfer tokens\n * @twfeature ERC20\n * @see {@link https://portal.thirdweb.com/react/react.usetransfertoken?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useTransferToken(contract) {\n  const activeChainId = useSDKChainId();\n  const contractAddress = contract?.getAddress();\n  const queryClient = useQueryClient();\n  const erc20 = getErc20(contract);\n  return useMutation(data => {\n    const {\n      to,\n      amount\n    } = data;\n    if (erc20) {\n      invariant(erc20?.transfer, \"contract does not support transfer\");\n      return erc20.transfer(to, amount);\n    }\n    invariant(false, \"Smart contract is not a valid erc20 contract\");\n  }, {\n    onSettled: () => invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n  });\n}\n\n/**\n * Airdrop tokens to a list of wallets\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const { contract } = useContract(\"{{contract_address}}\");\n *   const {\n *     mutate: transferBatchTokens,\n *     isLoading,\n *     error,\n *   } = useTransferToken(contract);\n *\n *   if (error) {\n *     console.error(\"failed to transfer batch tokens\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={() => transferBatchTokens([{ to: \"{{wallet_address}}\", amount: 1000 }, { to: \"{{wallet_address}}\", amount: 2000 }])}\n *     >\n *       Airdrop\n *     </button>\n *   );\n * };\n * ```\n *\n * @param contract - an instance of a {@link TokenContract}\n * @returns a mutation object that can be used to transfer batch tokens\n * @twfeature ERC20\n * @see {@link https://portal.thirdweb.com/react/react.usetransferbatchtoken?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useTransferBatchToken(contract) {\n  const activeChainId = useSDKChainId();\n  const contractAddress = contract?.getAddress();\n  const queryClient = useQueryClient();\n  const erc20 = getErc20(contract);\n  return useMutation(data => {\n    if (erc20) {\n      invariant(erc20.transferBatch, \"contract does not support transferBatch\");\n      const convertedData = data.map(token => ({\n        toAddress: token.to,\n        amount: token.amount\n      }));\n      return erc20.transferBatch(convertedData);\n    }\n    invariant(false, \"Smart contract is not a valid erc20 contract\");\n  }, {\n    onSettled: () => invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n  });\n}\n\n/**\n * Burn tokens\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const { contract } = useContract(\"{{contract_address}}\");\n *   const {\n *     mutate: burnTokens,\n *     isLoading,\n *     error,\n *   } = useBurnToken(contract);\n *\n *   if (error) {\n *     console.error(\"failed to burn tokens\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={() => burnTokens({ amount: 1000 })}\n *     >\n *       Burn!\n *     </button>\n *   );\n * };\n * ```\n *\n * @param contract - an instance of a {@link TokenContract}\n * @returns a mutation object that can be used to burn tokens from the connected wallet\n * @twfeature ERC20Burnable\n * @see {@link https://portal.thirdweb.com/react/react.useburntoken?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useBurnToken(contract) {\n  const activeChainId = useSDKChainId();\n  const contractAddress = contract?.getAddress();\n  const queryClient = useQueryClient();\n  const erc20 = getErc20(contract);\n  return useMutation(data => {\n    const {\n      amount\n    } = data;\n    requiredParamInvariant(contract, \"contract is undefined\");\n    if (erc20) {\n      invariant(erc20.burn, \"contract does not support burn\");\n      return erc20.burn(amount);\n    }\n    invariant(false, \"Smart contract is not a valid erc20 contract\");\n  }, {\n    onSettled: () => invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n  });\n}\n\n/** **********************/\n/**       READ HOOKS    **/\n/** **********************/\n\n/**\n * Get all accounts\n *\n * @example\n * ```javascript\n * const { data: accounts, isLoading, error } = useAccounts(contract);\n * ```\n *\n * @param contract - an instance of a account factory contract\n * @returns a response object that includes an array of all accounts with their associated admin\n * @twfeature AccountFactory\n * @see {@link https://portal.thirdweb.com/react/react.useaccounts?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useAccounts(contract) {\n  const contractAddress = contract?.getAddress();\n  return useQueryWithNetwork(cacheKeys.contract.accountFactory.getAll(contractAddress), () => {\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    invariant(contract.accountFactory.getAllAccounts, \"Contract instance does not support contract.accountFactory.getAllAccounts\");\n    return contract.accountFactory.getAllAccounts();\n  }, {\n    enabled: !!contract\n  });\n}\n\n/**\n * Get all accounts associated with the provided address\n *\n * @example\n * ```javascript\n * const { data: accountsForAddress, isLoading, error } = useAccountsForAddress(contract, \"{{account_address}}\");\n * ```\n *\n * @param contract - an instance of a account factory contract\n * @returns a response object that includes an array of all accounts associated with the adress\n * @twfeature AccountFactory\n * @see {@link https://portal.thirdweb.com/react/react.useaccountsforaddress?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useAccountsForAddress(contract, address) {\n  const contractAddress = contract?.getAddress();\n  return useQueryWithNetwork(cacheKeys.contract.accountFactory.getAllForAddress(contractAddress, address), () => {\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    invariant(contract.accountFactory.getAssociatedAccounts, \"Contract instance does not support contract.accountFactory.getAssociatedAccounts\");\n    return contract.accountFactory.getAssociatedAccounts(address || \"\");\n  }, {\n    enabled: !!contract\n  });\n}\n\n/**\n * Check if a account has been deployed for the given admin\n *\n * @example\n * ```javascript\n * const { data: isAccountDeployed, isLoading, error } = useIsAccountDeployed(contract);\n * ```\n *\n * @param contract - an instance of a account factory contract\n * @returns a boolean indicating if a account has been deployed for the given admin\n * @twfeature AccountFactory\n * @see {@link https://portal.thirdweb.com/react/react.useisaccountdeployed?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useIsAccountDeployed(contract, admin, extraData) {\n  const contractAddress = contract?.getAddress();\n  return useQueryWithNetwork(cacheKeys.contract.accountFactory.isAccountDeployed(contractAddress, admin), () => {\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    invariant(contract.accountFactory.isAccountDeployed, \"Contract instance does not support contract.accountFactory.getAllAccounts\");\n    invariant(admin, \"No account address provided\");\n    return contract.accountFactory.isAccountDeployed(admin, extraData);\n  }, {\n    enabled: !!contract\n  });\n}\n\n/** **********************/\n/**     WRITE HOOKS     **/\n/** **********************/\n/**\n * Create a account\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const { contract } = useContract(\"{{contract_address}}\");\n *   const {\n *     mutate: createAccount,\n *     isLoading,\n *     error,\n *   } = useCreateAccount(contract);\n *\n *   if (error) {\n *     console.error(\"failed to create account\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={() => createAccount(\"0x...\")}\n *     >\n *       Create Account\n *     </button>\n *   );\n * };\n * ```\n *\n * @param contract - an instance of a account factory contract\n * @returns a mutation object that can be used to create a account\n * @twfeature AccountFactory\n * @see {@link https://portal.thirdweb.com/react/react.usecreateaccount?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useCreateAccount(contract) {\n  const activeChainId = useSDKChainId();\n  const contractAddress = contract?.getAddress();\n  const queryClient = useQueryClient();\n  return useMutation(async (admin, extraData) => {\n    requiredParamInvariant(contract, \"contract is undefined\");\n    return contract.accountFactory.createAccount(admin, extraData);\n  }, {\n    onSettled: () => invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n  });\n}\n\n/** **********************/\n/**       READ HOOKS    **/\n/** **********************/\n\n/**\n * Get all signers of account\n *\n * @example\n * ```javascript\n * const { data: accounts, isLoading, error } = useAccountSigners(contract);\n * ```\n *\n * @param contract - an instance of a account\n * @returns a response object that includes an array of all signers of the provided account\n * @twfeature Account\n * @see {@link https://portal.thirdweb.com/react/react.useaccountsigners?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useAccountSigners(contract) {\n  const contractAddress = contract?.getAddress();\n  return useQueryWithNetwork(cacheKeys.contract.account.signers(contractAddress), () => {\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    invariant(contract.account.getAllSigners, \"Contract instance does not support contract.account.getAllSigners\");\n    return contract.account.getAllSigners();\n  }, {\n    enabled: !!contract\n  });\n}\n\n/**\n * Get all admins of account\n *\n * @example\n * ```javascript\n * const { data: accounts, isLoading, error } = useAccountSigners(contract);\n * ```\n *\n * @param contract - an instance of a account\n * @returns a response object that includes an array of all admins of the provided account\n * @twfeature Account\n * @see {@link https://portal.thirdweb.com/react/react.useaccountadmins?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useAccountAdmins(contract) {\n  const contractAddress = contract?.getAddress();\n  return useQueryWithNetwork(cacheKeys.contract.account.signers(contractAddress), () => {\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    invariant(contract.account.getAllAdmins, \"Contract instance does not support contract.account.getAllAdmins\");\n    return contract.account.getAllAdmins();\n  }, {\n    enabled: !!contract\n  });\n}\n\n/**\n * Get all signers and admins of account\n *\n * @example\n * ```javascript\n * const { data: accounts, isLoading, error } = useAccountSigners(contract);\n * ```\n *\n * @param contract - an instance of a account\n * @returns a response object that includes an array of all admins of the provided account\n * @twfeature Account\n * @see {@link https://portal.thirdweb.com/react/react.useaccountadmins?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useAccountAdminsAndSigners(contract) {\n  const contractAddress = contract?.getAddress();\n  return useQueryWithNetwork(cacheKeys.contract.account.signers(contractAddress), () => {\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    invariant(contract.account.getAllAdminsAndSigners, \"Contract instance does not support contract.account.getAllAdminsAndSigners\");\n    return contract.account.getAllAdminsAndSigners();\n  }, {\n    enabled: !!contract\n  });\n}\n\n/** **********************/\n/**     WRITE HOOKS     **/\n/** **********************/\n/**\n * Create and add a session key for the smart wallet\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const {\n *     mutate: createSessionKey,\n *     isLoading,\n *     error,\n *   } = useCreateSessionKey();\n *\n *   if (error) {\n *     console.error(\"failed to create session key\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={() => createSessionKey(\n *         \"0x...\",\n *         {\n *           approvedCallTargets: [\"0x...\"], // the addresses of contracts that the session key can call\n *           nativeTokenLimitPerTransaction: 0.1, // the maximum amount of native token (in ETH) that the session key can spend per transaction\n *           startDate: new Date(), // the date when the session key becomes active\n *           expirationDate = new Date(Date.now() + 24 * 60 * 60 * 1000); // the date when the session key expires\n *         }\n *        )}\n *     >\n *       Create Session Key\n *     </button>\n *   );\n * };\n * ```\n *\n * @twfeature Account\n */\nfunction useCreateSessionKey() {\n  const smartWallet = useWallet(\"smartWallet\");\n  return useMutation(async args => {\n    requiredParamInvariant(smartWallet, \"wallet is not connected\");\n    return smartWallet.createSessionKey(args.keyAddress, args.permissions);\n  });\n}\n\n/**\n * Revoke a session key on the smart wallet\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const {\n *     mutate: revokeSessionKey,\n *     isLoading,\n *     error,\n *   } = useRevokeSessionKey();\n *\n *   if (error) {\n *     console.error(\"failed to revoke session key\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={() => revokeSessionKey(\"0x...\")}\n *     >\n *       Revoke Session Key\n *     </button>\n *   );\n * };\n * ```\n *\n * @twfeature Account\n */\nfunction useRevokeSessionKey() {\n  const smartWallet = useWallet(\"smartWallet\");\n  return useMutation(async keyAddress => {\n    requiredParamInvariant(smartWallet, \"wallet is not connected\");\n    return smartWallet.revokeSessionKey(keyAddress);\n  });\n}\n\n/**\n * Add an additional admin on the smart wallet\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const {\n *     mutate: addAdmin,\n *     isLoading,\n *     error,\n *   } = useAddAdmin();\n *\n *   if (error) {\n *     console.error(\"failed to add admin\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={() => addAdmin(\"0x...\")}\n *     >\n *       Add admin\n *     </button>\n *   );\n * };\n * ```\n *\n * @twfeature Account\n */\nfunction useAddAdmin() {\n  const smartWallet = useWallet(\"smartWallet\");\n  return useMutation(async adminAddress => {\n    requiredParamInvariant(smartWallet, \"wallet is not connected\");\n    return smartWallet.addAdmin(adminAddress);\n  });\n}\n\n/**\n * Add an additional admin on the smart wallet\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const {\n *     mutate: removeAdmin,\n *     isLoading,\n *     error,\n *   } = useRemoveAdmin();\n *\n *   if (error) {\n *     console.error(\"failed to remove admin\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={() => removeAdmin(\"0x...\")}\n *     >\n *       Remove admin\n *     </button>\n *   );\n * };\n * ```\n *\n * @twfeature Account\n */\nfunction useRemoveAdmin() {\n  const smartWallet = useWallet(\"smartWallet\");\n  return useMutation(async adminAddress => {\n    requiredParamInvariant(smartWallet, \"wallet is not connected\");\n    return smartWallet.removeAdmin(adminAddress);\n  });\n}\nconst warnSet = new Set();\nfunction showDeprecationWarning(deprecated, replacement) {\n  // deprecation warnings only in dev only in dev\n  if (__DEV__) {\n    if (warnSet.has(`${deprecated}:${replacement}`)) {\n      return;\n    }\n    warnSet.add(`${deprecated}:${replacement}`);\n    console.warn(`\\`${deprecated}\\` is deprecated and will be removed in a future major version. Please use \\`${replacement}\\` instead.`);\n  }\n}\n\n/**\n * Hook for getting an instance of an `EditionDrop` contract. This contract is used to interface with ERC1155 compliant NFTs that can be lazily minted.\n * @param contractAddress - the address of the Edition Drop contract, found in your thirdweb dashboard\n *\n * @example\n * ```javascript\n * import { useContract } from '@thirdweb-dev/react'\n *\n * export default function Component() {\n *   const { contract } = useContract(\"<YOUR-CONTRACT-ADDRESS>\", \"edition-drop\")\n *\n *   // Now you can use the edition drop contract in the rest of the component\n *\n *   // For example, this function will let the connected wallet claim a new NFT\n *   async function claim(tokenId, quantity) {\n *     await contract.claim(tokenId, quantity)\n *   }\n *\n *   ...\n * }\n * ```\n * @public\n * @deprecated\n * This hook is deprecated and will be removed in a future major version. You should use {@link useContract} instead.\n * ```diff\n * - const editionDrop = useEditionDrop(\"0x1234...\");\n * + const editionDrop = useContract(\"0x1234...\", \"edition-drop\").contract;\n * ```\n */\nfunction useEditionDrop(contractAddress) {\n  showDeprecationWarning(`useEditionDrop(\"${contractAddress || \"0x...\"}\")`, `useContract(\"${contractAddress || \"0x...\"}\", \"edition-drop\")`);\n  return useContract(contractAddress, \"edition-drop\").contract;\n}\n\n/**\n * Hook for getting an instance of an `Edition` contract. This contract is used to interface with ERC1155 compliant NFTs.\n * @param contractAddress - the address of the Edition contract, found in your thirdweb dashboard\n *\n * @example\n * ```javascript\n * import { useContract } from '@thirdweb-dev/react'\n *\n * export default function Component() {\n *   const { contract } = useContract(\"<YOUR-CONTRACT-ADDRESS>\", \"edition\")\n *\n *   // Now you can use the edition contract in the rest of the component\n *\n *   // For example, this function will return all the NFTs on this contract\n *   async function getNFTs() {\n *     const nfts = await contract.getAll()\n *     return nfts\n *   }\n *\n *   ...\n * }\n * ```\n * @public\n * @deprecated\n * This hook is deprecated and will be removed in a future major version. You should use {@link useContract} instead.\n * ```diff\n * - const edition = useEdition(\"0x1234...\");\n * + const edition = useContract(\"0x1234...\", \"edition\").contract;\n * ```\n */\nfunction useEdition(contractAddress) {\n  showDeprecationWarning(`useEdition(\"${contractAddress || \"0x...\"}\")`, `useContract(\"${contractAddress || \"0x...\"}\", \"edition\")`);\n  return useContract(contractAddress, \"edition\").contract;\n}\n\n/**\n * Hook for getting an instance of an `NFTDrop` contract. This contract is meant to interface with ERC721 compliant NFTs that can be lazily minted.\n * @param contractAddress - the address of the NFT Drop contract, found in your thirdweb dashboard\n *\n * @example\n * ```javascript\n * import { useContract } from '@thirdweb-dev/react'\n *\n * export default function Component() {\n *   const { contract } = useContract(\"<YOUR-CONTRACT-ADDRESS>\", \"nft-drop\")\n *\n *   // Now you can use the nft drop contract in the rest of the component\n *\n *   // For example, this function will let the connected wallet claim a new NFT\n *   async function claim(quantity) {\n *     await contract.claim(quantity)\n *   }\n *\n *   ...\n * }\n * ```\n * @public\n * @deprecated\n * This hook is deprecated and will be removed in a future major version. You should use {@link useContract} instead.\n * ```diff\n * - const nftDrop = useNFTDrop(\"0x1234...\");\n * + const nftDrop = useContract(\"0x1234...\", \"nft-drop\").contract;\n * ```\n */\nfunction useNFTDrop(contractAddress) {\n  showDeprecationWarning(`useNFTDrop(\"${contractAddress || \"0x...\"}\")`, `useContract(\"${contractAddress || \"0x...\"}\", \"nft-drop\")`);\n  return useContract(contractAddress, \"nft-drop\").contract;\n}\n\n/**\n * Hook for getting an instance of a `Marketplace` contract. This contract is used to support marketplace for purchase and sale of on-chain assets.\n * @param contractAddress - the address of the Marketplace contract, found in your thirdweb dashboard\n *\n * @example\n * ```javascript\n * import { useContract } from '@thirdweb-dev/react'\n *\n * export default function Component() {\n *   const { contract } = useContract(\"<YOUR-CONTRACT-ADDRESS>\", \"marketplace\")\n *\n *   // Now you can use the marketplace contract in the rest of the component\n *\n *   // For example, this function will return all the listings on the marketplace\n *   async function getListings() {\n *     const listings = await contract.getAll()\n *     return listings\n *   }\n *\n *   ...\n * }\n * ```\n * @public\n * @deprecated\n * This hook is deprecated and will be removed in a future major version. You should use {@link useContract} instead.\n * ```diff\n * - const marketplace = useMarketplace(\"0x1234...\");\n * + const marketplace = useContract(\"0x1234...\", \"marketplace\").contract;\n * ```\n */\nfunction useMarketplace(contractAddress) {\n  showDeprecationWarning(`useMarketplace(\"${contractAddress || \"0x...\"}\")`, `useContract(\"${contractAddress || \"0x...\"}\", \"marketplace\")`);\n  return useContract(contractAddress, \"marketplace\").contract;\n}\n\n/**\n * Hook for getting an instance of an `NFTCollection` contract. This contract is meant to interface with ERC721 compliant NFTs.\n * @param contractAddress - the address of the NFT Collection contract, found in your thirdweb dashboard\n *\n * @example\n * ```javascript\n * import { useContract } from '@thirdweb-dev/react'\n *\n * export default function Component() {\n *   const { contract, isLoading, error } = useContract(\"<YOUR-CONTRACT-ADDRESS>\", \"nft-collection\")\n *\n *   // Now you can use the nftCollection contract in the rest of the component\n *\n *   // For example, this function will return all the NFTs on this contract\n *   async function getNFTs() {\n *     const nfts = await contract.getAll()\n *     return nfts\n *   }\n *\n *   ...\n * }\n * ```\n * @public\n * @deprecated\n * This hook is deprecated and will be removed in a future major version. You should use {@link useContract} instead.\n * ```diff\n * - const nftCollection = useNFTCollection(\"0x1234...\");\n * + const nftCollection = useContract(\"0x1234...\", \"nft-collection\").contract;\n * ```\n */\nfunction useNFTCollection(contractAddress) {\n  showDeprecationWarning(`useNFTCollection(\"${contractAddress || \"0x...\"}\")`, `useContract(\"${contractAddress || \"0x...\"}\", \"nft-collection\")`);\n  return useContract(contractAddress, \"nft-collection\").contract;\n}\n\n/**\n * Hook for getting an instance of a `Pack` contract. This contract supports the creation of on-chain luck-based lootboxes.\n * @param contractAddress - the address of the Pack contract, found in your thirdweb dashboard\n *\n * @example\n * ```javascript\n * import { useContract } from '@thirdweb-dev/react'\n *\n * export default function Component() {\n *   const { contract } = usePack(\"<YOUR-CONTRACT-ADDRESS>\", \"pack\")\n *\n *   // Now you can use the pack contract in the rest of the component\n *\n *   // For example, this function will get all the packs on this contract\n *   async function getPacks() {\n *     const packs = await contract.getAll()\n *     return packs\n *   }\n *\n *   ...\n * }\n * ```\n * @public\n * @deprecated\n * This hook is deprecated and will be removed in a future major version. You should use {@link useContract} instead.\n * ```diff\n * - const pack = usePack(\"0x1234...\");\n * + const pack = useContract(\"0x1234...\", \"pack\").contract;\n * ```\n */\nfunction usePack(contractAddress) {\n  showDeprecationWarning(`usePack(\"${contractAddress || \"0x...\"}\")`, `useContract(\"${contractAddress || \"0x...\"}\", \"pack\")`);\n  return useContract(contractAddress, \"pack\").contract;\n}\n\n/**\n * Hook for getting an instance of a `Token` contract. This contract supports ERC20 compliant tokens.\n * @param contractAddress - the address of the Token contract, found in your thirdweb dashboard\n *\n * @example\n * ```javascript\n * import { useContract } from '@thirdweb-dev/react'\n *\n * export default function Component() {\n *   const { contract } = useContract(\"<YOUR-CONTRACT-ADDRESS>\", \"token\")\n *\n *   // Now you can use the token contract in the rest of the component\n *\n *   // For example, this function will get the connected wallets token balance\n *   async function balance() {\n *     const balance = await contract.balance()\n *     return balance\n *   }\n *\n *   ...\n * }\n * ```\n * @public\n * @deprecated\n * This hook is deprecated and will be removed in a future major version. You should use {@link useContract} instead.\n * ```diff\n * - const token = useToken(\"0x1234...\");\n * + const token = useContract(\"0x1234...\", \"token\").contract;\n * ```\n */\nfunction useToken(contractAddress) {\n  showDeprecationWarning(`useToken(\"${contractAddress || \"0x...\"}\")`, `useContract(\"${contractAddress || \"0x...\"}\", \"token\")`);\n  return useContract(contractAddress, \"token\").contract;\n}\n\n/**\n * Hook for getting an instance of a `Token Drop` contract.\n * @param contractAddress - the address of the Token Drop contract, found in your thirdweb dashboard\n *\n * @example\n * ```javascript\n * import { useContract } from '@thirdweb-dev/react'\n *\n * export default function Component() {\n *   const { contract } = useContract(\"<YOUR-CONTRACT-ADDRESS>\", \"token-drop\")\n *\n *   // Now you can use the token drop contract in the rest of the component\n *\n *   // For example, this function will get the connected wallets token balance\n *   async function balance() {\n *     const balance = await contract.balance()\n *     return balance\n *   }\n *\n *   ...\n * }\n * ```\n * @public\n * @deprecated\n * This hook is deprecated and will be removed in a future major version. You should use {@link useContract} instead.\n * ```diff\n * - const token = useTokenDrop(\"0x1234...\");\n * + const token = useContract(\"0x1234...\", \"token-drop\").contract;\n * ```\n */\nfunction useTokenDrop(contractAddress) {\n  showDeprecationWarning(`useTokenDrop(\"${contractAddress || \"0x...\"}\")`, `useContract(\"${contractAddress || \"0x...\"}\", \"token-drop\")`);\n  return useContract(contractAddress, \"token-drop\").contract;\n}\n\n/**\n * Hook for getting an instance of an `Vote` contract. This contract enables fully featured voting-based decentralized governance systems.\n * @param contractAddress - the address of the Vote contract, found in your thirdweb dashboard\n *\n * @example\n * ```javascript\n * import { useContract } from '@thirdweb-dev/react'\n *\n * export default function Component() {\n *   const { contract } = useContract(\"<YOUR-CONTRACT-ADDRESS>\", \"vote\")\n *\n *   // Now you can use the vote contract in the rest of the component\n *\n *   // For example, this function will get all the proposals on this contract\n *   async function getProposals() {\n *     const proposals = await contract.getAll()\n *     return proposals\n *   }\n *\n *   ...\n * }\n * ```\n * @public\n * @deprecated\n * This hook is deprecated and will be removed in a future major version. You should use {@link useContract} instead.\n * ```diff\n * - const vote = useVote(\"0x1234...\");\n * + const vote = useContract(\"0x1234...\", \"vote\").contract;\n * ```\n */\nfunction useVote(contractAddress) {\n  showDeprecationWarning(`useVote(\"${contractAddress || \"0x...\"}\")`, `useContract(\"${contractAddress || \"0x...\"}\", \"vote\")`);\n  return useContract(contractAddress, \"vote\").contract;\n}\n\n/**\n * Hook for getting an instance of a `Split` contract. This contract supports fund distribution to multiple parties.\n * @param contractAddress - the address of the Split contract, found in your thirdweb dashboard\n *\n * @example\n * ```javascript\n * import { useContract } from '@thirdweb-dev/react'\n *\n * export default function Component() {\n *   const { contract } = useContract(\"<YOUR-CONTRACT-ADDRESS>\", \"split\")\n *\n *   // Now you can use the split contract in the rest of the component\n *\n *   // For example, this function will return all the recipients of the split\n *   async function getRecipients() {\n *     const recipients = await contract.getAllRecipients()\n *     return recipients\n *   }\n *\n *   ...\n * }\n * ```\n * @public\n * @deprecated\n * This hook is deprecated and will be removed in a future major version. You should use {@link useContract} instead.\n * ```diff\n * - const split = useSplit(\"0x1234...\");\n * + const split = useContract(\"0x1234...\", \"split\").contract;\n * ```\n */\nfunction useSplit(contractAddress) {\n  showDeprecationWarning(`useSplit(\"${contractAddress || \"0x...\"}\")`, `useContract(\"${contractAddress || \"0x...\"}\", \"split\")`);\n  return useContract(contractAddress, \"split\").contract;\n}\n\n/**\n * Hook for getting an instance of an `Multiwrap` contract. This contract is an ERC721 in which you can wrap ERC721, ERC1155 and ERC20 tokens.\n * @param contractAddress - the address of the Multiwrap contract, found in your thirdweb dashboard\n *\n * @example\n * ```javascript\n * import { useContract } from '@thirdweb-dev/react'\n *\n * export default function Component() {\n *   const { contract } = useContract(\"<YOUR-CONTRACT-ADDRESS>\", \"multiwrap\")\n *\n *   // Now you can use the multiwrap contract in the rest of the component\n *\n *   // For example, this function will let the connected wallet wrap tokens\n *   async function wrap(tokensToWrap, wrappedNFTMetadata) {\n *     await contract.wrap(tokensToWrap, wrappedNFTMetadata)\n *   }\n *\n *   ...\n * }\n * ```\n * @public\n * @deprecated\n * This hook is deprecated and will be removed in a future major version. You should use {@link useContract} instead.\n * ```diff\n * - const multiwrap = useMultiwrap(\"0x1234...\");\n * + const multiwrap = useContract(\"0x1234...\", \"multiwrap\").contract;\n * ```\n */\nfunction useMultiwrap(contractAddress) {\n  showDeprecationWarning(`useMultiwrap(\"${contractAddress || \"0x...\"}\")`, `useContract(\"${contractAddress || \"0x...\"}\", \"multiwrap\")`);\n  return useContract(contractAddress, \"multiwrap\").contract;\n}\n\n/**\n * Hook for getting an instance of an `SignatureDrop` contract. This contract is meant to interface with ERC721 compliant NFTs that can be lazily minted.\n * @param contractAddress - the address of the NFT Drop contract, found in your thirdweb dashboard\n *\n * @example\n * ```javascript\n * import { useContract } from '@thirdweb-dev/react'\n *\n * export default function Component() {\n *   const { contract } = useContract(\"<YOUR-CONTRACT-ADDRESS>\", \"signature-drop\")\n *\n *   // Now you can use the Signature drop contract in the rest of the component\n *\n *   // For example, this function will let the connected wallet claim a new NFT\n *   async function claim(quantity) {\n *     await contract.claim(quantity)\n *   }\n *\n *   ...\n * }\n * ```\n * @public\n * @deprecated\n * This hook is deprecated and will be removed in a future major version. You should use {@link useContract} instead.\n * ```diff\n * - const signatureDrop = useSignatureDrop(\"0x1234...\");\n * + const signatureDrop = useContract(\"0x1234...\", \"signature-drop\").contract;\n * ```\n */\nfunction useSignatureDrop(contractAddress) {\n  showDeprecationWarning(`useSignatureDrop(\"${contractAddress || \"0x...\"}\")`, `useContract(\"${contractAddress || \"0x...\"}\", \"signature-drop\")`);\n  return useContract(contractAddress, \"signature-drop\").contract;\n}\n\n/**\n * Hook used to upload any files or JSON data to decentralized storage systems like IPFS,\n * using the `storageInterface` configured on the `ThirdwebProvider`\n *\n * @param options - Configure the options for your upload\n * @returns Function used to upload files or JSON to decentralized storage systems\n *\n * @example\n * ```jsx\n * import { useStorageUpload } from \"@thirdweb-dev/react\";\n *\n * export default function Component() {\n *   const { mutateAsync: upload, isLoading } = useStorageUpload();\n *\n *   async function uploadData() {\n *     const filesToUpload = [...];\n *     const uris = await upload({ data: files });\n *     console.log(uris);\n *   }\n *\n *   return (\n *     <button onClick={uploadData}>\n *       Upload\n *     </button>\n *   )\n * }\n * ```\n * @see {@link https://portal.thirdweb.com/react/react.usestorageupload?utm_source=sdk | Documentation}\n */\nfunction useStorageUpload(uploadOptions) {\n  const sdk = useSDK();\n  return useMutation(async _ref => {\n    let {\n      data,\n      options\n    } = _ref;\n    invariant(sdk, \"sdk must be defined\");\n    return await sdk.storage.uploadBatch(data, options || uploadOptions);\n  });\n}\n\n/**\n * Get the configured `ThirdwebStorage` instance\n * @returns The `storageInterface` configured on the `ThirdwebProvider`\n * @see {@link https://portal.thirdweb.com/react/react.usestorage?utm_source=sdk | Documentation}\n */\nfunction useStorage() {\n  const sdk = useSDK();\n  return sdk?.storage;\n}\n\n/**\n * Hook for checking whether the connected wallet is on the correct network specified by the `network` passed to the `<ThirdwebProvider />`.\n *\n * ```javascript\n * import { useNetworkMismatch } from \"@thirdweb-dev/react\"\n * ```\n *\n * @returns `true` if the chainId of the connected wallet is different from the chainId of the network passed into <ThirdwebProvider />\n *\n * @see {@link https://portal.thirdweb.com/react/react.usenetworkmismatch?utm_source=sdk | Documentation}\n *\n * @example\n * You can check if a users wallet is connected to the correct chain ID as follows:\n * ```javascript\n * import { useNetworkMismatch } from \"@thirdweb-dev/react\"\n *\n * const App = () => {\n *   const isMismatched = useNetworkMismatch()\n *\n *   return <div>{isMismatched}</div>\n * }\n * ```\n *\n * From here, you can prompt users to switch their network using the `useNetwork` hook.\n *\n * @public\n */\nfunction useNetworkMismatch() {\n  const walletChainId = useChainId();\n  const sdkChainId = useSDKChainId();\n  if (!sdkChainId) {\n    // we don't know yet\n    return false;\n  }\n  if (sdkChainId === -1) {\n    // means no network is set in the <ThirdwebProvider />, so we don't care about the network mismatch\n    return false;\n  }\n  if (!walletChainId) {\n    // means no wallet is connected yet, so we don't care about the network mismatch\n    return false;\n  }\n  // check if the chainIds are different\n  return sdkChainId !== walletChainId;\n}\n\n/**\n * @internal\n */\nfunction useReadonlySDK(readonlyRpcUrl, sdkOptions, storageInterface) {\n  return useMemo(() => {\n    return new ThirdwebSDK$1(readonlyRpcUrl, sdkOptions, storageInterface);\n    // storageInterface should be constant!\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [readonlyRpcUrl, sdkOptions]);\n}\n\n/**\n *\n * @internal\n */\nfunction useSigner() {\n  const context = useContext(ThirdwebConnectedWalletContext);\n  invariant(context, \"useSigner() hook must be used within a <ThirdwebProvider/>\");\n  return context.signer;\n}\nfunction useSupportedWallet(id) {\n  const context = useWalletContext();\n  const wallet = context?.wallets.find(_wallet => _wallet.id === id);\n  if (!wallet) {\n    throw new Error(`Wallet with id \"${id}\" is not supported`);\n  }\n  return wallet;\n}\n\n/**\n * Get App URI\n *\n * @example\n * ```javascript\n * const { data: contractMetadata, isLoading, error } = useAppURI(contract);\n * ```\n *\n * @param contract - the {@link SmartContract} instance of the contract to get the appURI of\n * @returns a response object that includes the appURI of the contract\n * @twfeature AppURI\n * @beta\n */\nfunction useAppURI(contract) {\n  return useQueryWithNetwork(cacheKeys.contract.app.get(contract?.getAddress()), async () => {\n    requiredParamInvariant(contract, \"Contract is required\");\n    invariant(contract.app, \"Contract does not support app\");\n    return await contract.app.get();\n  }, {\n    enabled: !!contract\n  });\n}\n\n/**\n * Set App URI\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const {\n *     mutate: useSetAppURI,\n *     isLoading,\n *     error,\n *   } = useSetAppURI(contract);\n *\n *   if (error) {\n *     console.error(\"failed to update appURI\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={() => useSetAppURI({ uri })}\n *     >\n *       Update App URI\n *     </button>\n *   );\n * };\n * ```\n * @param contract - an instance of a {@link SmartContract}\n * @returns a mutation object that can be used to update the appURI of a contract\n * @twfeature AppUR\n * @beta\n */\nfunction useSetAppURI(contract) {\n  const queryClient = useQueryClient();\n  const contractAddress = contract?.getAddress();\n  const activeChainId = useSDKChainId();\n  return useMutation(params => {\n    requiredParamInvariant(contract, \"Contract is required\");\n    invariant(contract.app, \"Contract does not support app\");\n    return contract.app.set(params.uri);\n  }, {\n    onSettled: () => invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n  });\n}\nfunction useENS() {\n  const address = useAddress();\n  const supportedChains = useSupportedChains();\n  const {\n    clientId\n  } = useWalletContext();\n  const ethereum = supportedChains.find(chain => chain.chainId === 1);\n  return useQuery({\n    queryKey: [\"ens\", address, ethereum?.rpc],\n    cacheTime: 60 * 60 * 24 * 1000,\n    // 24h\n    staleTime: 60 * 60 * 1000,\n    // 1h\n    retry: false,\n    enabled: !!address,\n    queryFn: async () => {\n      if (!address) {\n        return null;\n      }\n      const provider = getChainProvider(1, {\n        clientId,\n        supportedChains: ethereum ? [{\n          chainId: 1,\n          rpc: [...ethereum.rpc],\n          nativeCurrency: ethereum.nativeCurrency,\n          slug: ethereum.slug\n        }] : undefined\n      });\n      if (provider instanceof providers.JsonRpcProvider) {\n        const [ens, avatarUrl] = await Promise.all([provider.lookupAddress(address), provider.getAvatar(address)]);\n        return {\n          ens,\n          avatarUrl\n        };\n      }\n      return {\n        ens: await provider.lookupAddress(address),\n        avatarUrl: null\n      };\n    }\n  });\n}\n\n/**\n * Hook that listens to transactions on a given chain for a given address.\n *\n * ```javascript\n * import { useWatchTransactions } from \"@thirdweb-dev/react\"\n * ```\n *\n * @example\n * ```js\n * const transactions = useWatchTransactions({\n *  address: \"0x1234\",\n *  network: \"ethereum\",\n * });\n * ```\n *\n * @returns an array of {@link Transaction} objects\n */\nfunction useWatchTransactions(watchTransactionParams) {\n  const {\n    address,\n    network,\n    sdkOptions,\n    // default to 1000, max 10k\n    limit: paramLimit = 1000\n  } = watchTransactionParams;\n  // max limit of 10k transactions to let the array grow to, then we'll start dropping the oldest ones\n  const limit = Math.min(paramLimit, 10000);\n  const [transactions, setTransactions] = useState([]);\n  useEffect(() => {\n    if (!address || !network) {\n      // cant run yet\n      return;\n    }\n    // since this already returns a function to unsubscribe, we can just return it\n    return watchTransactions({\n      address,\n      network,\n      sdkOptions,\n      onTransactions: newTransactions => {\n        setTransactions(prevTransactions => {\n          const mergedTxns = [...newTransactions, ...prevTransactions];\n          // only keep the latest transactions\n          return mergedTxns.slice(0, limit);\n        });\n      }\n    });\n  }, [address, limit, network, sdkOptions]);\n  return transactions;\n}\nexport { useUnclaimedNFTs as $, useActiveClaimCondition as A, useClaimerProofs as B, useClaimConditions as C, useClaimIneligibilityReasons as D, useActiveClaimConditionForWallet as E, useSetClaimConditions as F, useResetClaimConditions as G, usePrimarySaleRecipient as H, useUpdatePrimarySaleRecipient as I, useRoyaltySettings as J, useUpdateRoyaltySettings as K, usePlatformFees as L, useUpdatePlatformFees as M, useMetadata as N, useUpdateMetadata as O, useContractType as P, contractType as Q, useCompilerMetadata as R, compilerMetadata as S, ThirdwebThemeContext as T, useContract as U, useContractMetadata as V, useContractMetadataUpdate as W, useContractEvents as X, useContractRead as Y, useContractWrite as Z, __DEV__ as _, ThirdwebProviderCore as a, useBurnToken as a$, useClaimedNFTs as a0, useUnclaimedNFTSupply as a1, useClaimedNFTSupply as a2, useBatchesToReveal as a3, useClaimNFT as a4, useLazyMint as a5, useDelayedRevealLazyMint as a6, useRevealLazyMint as a7, useListing as a8, useDirectListing as a9, useBuyDirectListing as aA, useNFT as aB, useNFTs as aC, useTotalCount as aD, useTotalCirculatingSupply as aE, useOwnedNFTs as aF, useNFTBalance as aG, useMintNFT as aH, useMintNFTSupply as aI, useTransferNFT as aJ, useAirdropNFT as aK, useBurnNFT as aL, useSharedMetadata as aM, useSetSharedMetadata as aN, useAllRoleMembers as aO, useRoleMembers as aP, useIsAddressRole as aQ, useSetAllRoleMembers as aR, useGrantRole as aS, useRevokeRole as aT, useTokenSupply as aU, useTokenBalance as aV, useTokenDecimals as aW, useMintToken as aX, useClaimToken as aY, useTransferToken as aZ, useTransferBatchToken as a_, useEnglishAuction as aa, useListings as ab, useDirectListings as ac, useValidDirectListings as ad, useEnglishAuctions as ae, useValidEnglishAuctions as af, useListingsCount as ag, useDirectListingsCount as ah, useEnglishAuctionsCount as ai, useActiveListings as aj, useWinningBid as ak, useEnglishAuctionWinningBid as al, useAuctionWinner as am, useBidBuffer as an, useMinimumNextBid as ao, useCreateDirectListing as ap, useCreateAuctionListing as aq, useCancelListing as ar, useCancelDirectListing as as, useCancelEnglishAuction as at, useMakeBid as au, useMakeOffer as av, useAcceptDirectListingOffer as aw, useExecuteAuctionSale as ax, useOffers as ay, useBuyNow as az, useConnect as b, useIsAccountDeployed as b0, useAccounts as b1, useCreateAccount as b2, useAccountsForAddress as b3, useAccountSigners as b4, useAddAdmin as b5, useRemoveAdmin as b6, useCreateSessionKey as b7, useRevokeSessionKey as b8, useAccountAdmins as b9, useSetAppURI as bA, useENS as bB, ThirdwebSDKProvider as bC, useSDK as bD, useSDKChainId as bE, invalidateContractAndBalances as bF, getErcs as bG, getErc1155 as bH, getErc721 as bI, getErc20 as bJ, useWatchTransactions as bK, useAccountAdminsAndSigners as ba, useLogin as bb, useLogout as bc, useUser as bd, useAuth as be, useSwitchAccount as bf, useEditionDrop as bg, useEdition as bh, useNFTDrop as bi, useMarketplace as bj, useNFTCollection as bk, usePack as bl, useToken as bm, useTokenDrop as bn, useVote as bo, useSplit as bp, useMultiwrap as bq, useSignatureDrop as br, useStorageUpload as bs, useStorage as bt, useNetworkMismatch as bu, useReadonlySDK as bv, useSigner as bw, useSupportedChains as bx, useSupportedWallet as by, useAppURI as bz, useConnectionStatus as c, useCreateWalletInstance as d, useDisconnect as e, useSwitchChain as f, useWallets as g, useWalletConfig as h, useSetConnectionStatus as i, useSetConnectedWallet as j, useNetwork as k, useWalletContext as l, useBalance as m, useConnectedWallet as n, useAddress as o, useChainId as p, useActiveChain as q, resolveMimeType as r, useChain as s, useThirdwebAuthContext as t, useWallet as u, ThirdwebAuthProvider as v, ThirdwebConfigProvider as w, useThirdwebConfigContext as x, ThirdwebConnectedWalletProvider as y, useThirdwebConnectedWalletContext as z };","map":{"version":3,"names":["mime","useQueryClient","useMutation","useQuery","signLoginPayload","ThirdwebAuth","invariant","createContext","useContext","useState","useMemo","useCallback","useEffect","useRef","constants","utils","BigNumber","providers","jsx","jsxs","updateChainRPCs","getValidChainRPCs","defaultChains","Q","QueryClientProviderWithDefault","r","requiredParamInvariant","n","neverPersist","ThirdwebSDK","getChainProvider","UserWallet","checkClientIdOrSecretKey","fetchCurrencyMetadata","fetchCurrencyValue","getCachedAbiForContract","ListingType","ThirdwebSDK$1","walletIds","createAsyncLocalStorage","assertWindowEthereum","watchTransactions","resolveMimeType","url","undefined","mimeType","getType","res","fetch","method","ok","headers","has","get","ThirdwebThemeContext","ThirdwebAuthContext","useThirdwebAuthContext","LAST_CONNECTED_WALLET_STORAGE_KEY","lastConnectedWalletStorage","walletInstanceToConfig","Map","ThirdwebWalletContext","ThirdwebWalletProvider","props","signer","setSigner","connectionStatus","setConnectionStatus","autoConnectTimeout","activeWallet","setActiveWallet","createdWalletInstance","setCreatedWalletInstance","activeWalletConfig","setActiveWalletConfig","createWalletStorage","chainToConnect","autoSwitch","activeChain","walletParams","chains","dappMetadata","dAppMeta","chain","clientId","createWalletInstance","walletConfig","walletInstance","create","walletId","magicLink","set","updateChains","setConnectedWallet","wallet","connectParams","isAutoConnect","arguments","length","Error","_signer","getSigner","walletInfo","id","personalWallet","getPersonalWallet","personalWalletConfig","getConnectParams","saveLastConnectedWalletInfo","storeLastActiveChainId","chainId","lastConnectedWallet","getItem","parsedWallet","JSON","parse","setItem","stringify","error","console","switchChain","autoConnectTriggered","signerWallet","current","shouldAutoConnect","autoconnect","getLastConnectedWalletInfo","walletObj","supportedWallets","find","W","personalWalletInfo","personalWallets","personalWalleObj","personalWalletInstance","timeoutPromise","autoConnect","ms","message","autoConnectTimeoutErrorMessage","e","removeItem","connectWallet","_len","args","Array","_key","WalletObj","_connectedParams","connect","onWalletDisconnect","disconnectWallet","disconnect","update","addListener","removeListener","signerConnected","Provider","value","wallets","getWalletConfig","activeChainSetExplicitly","children","useWalletContext","ctx","str","promise","option","Promise","resolve","reject","timeoutId","setTimeout","then","clearTimeout","err","useWallet","context","useWalletConfig","useWallets","useConnect","useDisconnect","useConnectionStatus","useSetConnectionStatus","useCreateWalletInstance","useSwitchChain","useSetConnectedWallet","TW_CACHE_KEY_PREFIX","enforceCachePrefix","input","filter","i","createContractCacheKey","contractAddress","AddressZero","createCacheKeyWithNetwork","cacheKeys","network","active","concat","invalidateContractAndBalances","queryClient","all","invalidateQueries","auth","user","balance","walletAddress","tokenAddress","contract","read","fnIdentity","type","compilerMetadata","typeAndCompilerMetadata","metadata","extractFunctions","call","functionName","overrides","accountFactory","getAll","isAccountDeployed","contractAdress","admin","getAllForAddress","address","account","signers","app","events","getEvents","eventName","getAllEvents","nft","tokenId","balanceOf","owner","query","params","totalCirculatingSupply","totalCount","owned","sharedMetadata","drop","getAllUnclaimed","getAllClaimed","totalUnclaimedSupply","totalClaimedSupply","revealer","getBatchesToReveal","token","totalSupply","decimals","marketplace","getListing","listingId","getAllListings","getTotalCount","getActiveListings","auction","getBidBufferBps","getWinningBid","getMinimumNextBid","getWinner","directListings","getAllValid","englishAuctions","getAuction","auctionId","extensions","claimConditions","getActive","options","getClaimerProofs","getClaimIneligibilityReasons","useActiveClaimConditionForWallet","sales","getRecipient","royalties","getDefaultRoyaltyInfo","platformFees","roles","role","AUTH_TOKEN_STORAGE_KEY","useLogin","authConfig","login","mutationFn","authUrl","getAddress","getChainId","body","toString","status","payloadData","payload","json","credentials","data","secureStorage","mutateAsync","isLoading","useLogout","logout","useUser","Authorization","enabled","isLoggedIn","useSwitchAccount","switchAccount","useAuth","domain","ThirdwebAuthProvider","_ref","authContext","replace","ChangeActiveWalletOnAccountSwitch","handleSwitchAccount","debug","handleLogout","shouldAddListener","useUpdateChainsWithClientId","supportedChains","supportedChainsWithKey","map","activeChainIdOrObjWithKey","ThirdwebConfigContext","ThirdwebConfigProvider","useThirdwebConfigContext","ThirdwebSDKContext","__DEV__","process","env","NODE_ENV","useSDKContext","_inProvider","useSDK","sdk","useSDKChainId","_chainId","INITIAL_CONTEXT_VALUE","ThirdwebConnectedWalletContext","ThirdwebConnectedWalletProvider","storage","contextValue","setContextValue","val","s","_ref2","c","rpcUrl","readonlySettings","catch","warn","useThirdwebConnectedWalletContext","WrappedThirdwebSDKProvider","sdkOptions","storageInterface","secretKey","activeChainId","slug","supportedChain","rpc","mergedOptions","sdk_","updateSignerOrProvider","ctxValue","ThirdwebSDKProvider","_supportedChains","restProps","supportedChainsNonNull","isActiveChainObject","isActiveChainInSupportedChains","mergedChains","_mergedChains","index","self","findIndex","ThirdwebProviderCore","activeChainWithKey","resolveChain","resolvedChain","theme","ThirdwebSDKProviderWrapper","useSupportedChains","useBalance","useAddress","cacheKey","retry","keepPreviousData","useConnectedWallet","useChainId","useChain","_chain","unknownChain","useActiveChain","useNetwork","isMetamaskInstalled","globalThis","window","ethereum","isMetaMask","isCoinbaseInstalled","isCoinbaseWallet","switchChainNotSupported","walletConnectV1","walletConnect","metamask","coinbase","setError","loading","setLoading","switchNetwork","unsupported","getErcs","erc1155","getErc1155","erc721","getErc721","erc20","getErc20","useQueryWithNetwork","queryKey","queryFn","useActiveClaimCondition","useClaimerProofs","claimerAddress","claimConditionId","useClaimConditions","useClaimIneligibilityReasons","quantity","activeGeneralClaimCondition","claimerProofForWallet","cc","cp","maxClaimable","currencyAddress","price","currencyWithOverride","currencyMetadata","getProvider","normalizedPrize","MaxUint256","parseUnits","priceWithOverride","maxClaimableWithOverride","maxClaimablePerWallet","currencyValueWithOverride","currency","useSetClaimConditions","phases","reset","onSettled","useResetClaimConditions","cleanConditions","conditions","displayValue","withAllowList","usePrimarySaleRecipient","useUpdatePrimarySaleRecipient","newRecipient","setRecipient","useRoyaltySettings","useUpdateRoyaltySettings","updatePayload","setDefaultRoyaltyInfo","usePlatformFees","useUpdatePlatformFees","useMetadata","useUpdateMetadata","fetchContractType","resolveContractType","useContractType","cacheTime","Infinity","staleTime","contractType","fetchQuery","fetchCompilerMetadata","getPublisher","fetchCompilerMetadataFromAddress","useCompilerMetadata","useContract","contractTypeOrABI","walletChainId","sdkTimestamp","_constructedAt","contractQuery","cachedAbi","getContract","resolvedContractType","abi","useContractMetadata","useContractMetadataUpdate","useContractEvents","subscribe","cleanupListener","listenToAllEvents","contractEvent","setQueryData","oldData","eventIsNotAlreadyInEventsList","transaction","transactionHash","logIndex","queryFilter","refetchOnWindowFocus","refetchOnMount","refetchOnReconnect","useContractRead","useContractWrite","useUnclaimedNFTs","queryParams","useClaimedNFTs","useUnclaimedNFTSupply","useClaimedNFTSupply","useBatchesToReveal","useClaimNFT","to","claim","claimTo","useLazyMint","onProgress","lazyMint","metadatas","useDelayedRevealLazyMint","createDelayedRevealBatch","placeholder","password","useRevealLazyMint","reveal","batchId","useListing","useDirectListing","useEnglishAuction","useListings","useDirectListings","useValidDirectListings","useEnglishAuctions","useValidEnglishAuctions","useListingsCount","useDirectListingsCount","useEnglishAuctionsCount","useActiveListings","useWinningBid","useEnglishAuctionWinningBid","useAuctionWinner","isV1","isMarketplaceV1","useBidBuffer","from","useMinimumNextBid","useOffers","result","ev","eq","useCreateDirectListing","direct","createListing","useCreateAuctionListing","createAuction","useCancelListing","Auction","cancelListing","useCancelDirectListing","useCancelEnglishAuction","cancelAuction","useMakeBid","makeBid","bid","useMakeOffer","makeOffer","pricePerToken","useAcceptDirectListingOffer","acceptOffer","addressOfOfferor","useExecuteAuctionSale","executeSale","useBuyNow","Direct","buyoutListing","buyAmount","buyForWallet","useBuyDirectListing","buyFromListing","buyer","useNFT","useNFTs","useTotalCount","useTotalCirculatingSupply","useOwnedNFTs","ownerWalletAddress","getOwned","useNFTBalance","useSharedMetadata","useMintNFT","supply","mintTo","useMintNFTSupply","additionalSupply","mintAdditionalSupplyTo","useTransferNFT","transfer","amount","useAirdropNFT","addresses","airdrop","useBurnNFT","burn","useSetSharedMetadata","useAllRoleMembers","useRoleMembers","useIsAddressRole","contractHasRoles","includes","useSetAllRoleMembers","rolesWithAddresses","setAll","useGrantRole","grant","useRevokeRole","revoke","useTokenSupply","useTokenBalance","useTokenDecimals","useMintToken","useClaimToken","checkERC20Allowance","useTransferToken","useTransferBatchToken","transferBatch","convertedData","toAddress","useBurnToken","useAccounts","getAllAccounts","useAccountsForAddress","getAssociatedAccounts","useIsAccountDeployed","extraData","useCreateAccount","createAccount","useAccountSigners","getAllSigners","useAccountAdmins","getAllAdmins","useAccountAdminsAndSigners","getAllAdminsAndSigners","useCreateSessionKey","smartWallet","createSessionKey","keyAddress","permissions","useRevokeSessionKey","revokeSessionKey","useAddAdmin","adminAddress","addAdmin","useRemoveAdmin","removeAdmin","warnSet","Set","showDeprecationWarning","deprecated","replacement","add","useEditionDrop","useEdition","useNFTDrop","useMarketplace","useNFTCollection","usePack","useToken","useTokenDrop","useVote","useSplit","useMultiwrap","useSignatureDrop","useStorageUpload","uploadOptions","uploadBatch","useStorage","useNetworkMismatch","sdkChainId","useReadonlySDK","readonlyRpcUrl","useSigner","useSupportedWallet","_wallet","useAppURI","useSetAppURI","uri","useENS","provider","nativeCurrency","JsonRpcProvider","ens","avatarUrl","lookupAddress","getAvatar","useWatchTransactions","watchTransactionParams","limit","paramLimit","Math","min","transactions","setTransactions","onTransactions","newTransactions","prevTransactions","mergedTxns","slice","$","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","R","S","T","U","V","X","Y","Z","_","a","a$","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","aA","aB","aC","aD","aE","aF","aG","aH","aI","aJ","aK","aL","aM","aN","aO","aP","aQ","aR","aS","aT","aU","aV","aW","aX","aY","aZ","a_","aa","ab","ac","ad","ae","af","ag","ah","ai","aj","ak","al","am","an","ao","ap","aq","ar","as","at","au","av","aw","ax","ay","az","b","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","bA","bB","bC","bD","bE","bF","bG","bH","bI","bJ","bK","ba","bb","bc","bd","be","bf","bg","bh","bi","bj","bk","bl","bm","bn","bo","bp","bq","br","bs","bt","bu","bv","bw","bx","by","bz","d","f","g","h","j","k","l","m","o","p","q","t","u","v","w","x","y","z"],"sources":["C:/Misc/Documents/Career/FinTech/BlockChain/FrontEnd/buildspace-dao-starter/node_modules/@thirdweb-dev/react-core/dist/useTransactions-961e942c.browser.esm.js"],"sourcesContent":["import mime from 'mime/lite.js';\nimport { useQueryClient, useMutation, useQuery } from '@tanstack/react-query';\nimport { signLoginPayload, ThirdwebAuth } from '@thirdweb-dev/auth';\nimport invariant from 'tiny-invariant';\nimport { createContext, useContext, useState, useMemo, useCallback, useEffect, useRef } from 'react';\nimport { constants, utils, BigNumber, providers } from 'ethers';\nimport { jsx, jsxs } from 'react/jsx-runtime';\nimport { updateChainRPCs, getValidChainRPCs, defaultChains } from '@thirdweb-dev/chains';\nimport { Q as QueryClientProviderWithDefault, r as requiredParamInvariant, n as neverPersist } from './required-param-d1f74675.browser.esm.js';\nimport { ThirdwebSDK, getChainProvider } from '@thirdweb-dev/sdk/evm';\nimport { UserWallet, checkClientIdOrSecretKey, fetchCurrencyMetadata, fetchCurrencyValue, getCachedAbiForContract, ListingType, ThirdwebSDK as ThirdwebSDK$1 } from '@thirdweb-dev/sdk';\nimport { walletIds, createAsyncLocalStorage, assertWindowEthereum } from '@thirdweb-dev/wallets';\nimport { watchTransactions } from '@thirdweb-dev/sdk/evm/functions';\n\n// TODO legacy remove this when possible\n\nasync function resolveMimeType(url) {\n  if (!url) {\n    return undefined;\n  }\n  const mimeType = mime.getType(url);\n  if (mimeType) {\n    return mimeType;\n  }\n  const res = await fetch(url, {\n    method: \"HEAD\"\n  });\n  if (res.ok && res.headers.has(\"content-type\")) {\n    return res.headers.get(\"content-type\") || undefined;\n  }\n  // we failed to resolve the mime type, return null\n  return undefined;\n}\n\nconst ThirdwebThemeContext = /* @__PURE__ */createContext(undefined);\n\n/**\n * The configuration to use the react SDK with an [auth](https://portal.thirdweb.com/auth) server.\n *\n * @beta\n */\n\nconst ThirdwebAuthContext = /* @__PURE__ */createContext(undefined);\nfunction useThirdwebAuthContext() {\n  return useContext(ThirdwebAuthContext);\n}\n\nconst LAST_CONNECTED_WALLET_STORAGE_KEY = \"lastConnectedWallet\";\nlet lastConnectedWalletStorage;\n// maps wallet instance to it's wallet config\nconst walletInstanceToConfig = new Map();\nconst ThirdwebWalletContext = /* @__PURE__ */createContext(undefined);\nfunction ThirdwebWalletProvider(props) {\n  const [signer, setSigner] = useState(undefined);\n  const [connectionStatus, setConnectionStatus] = useState(\"unknown\");\n  const autoConnectTimeout = props.autoConnectTimeout || 15000;\n  const [activeWallet, setActiveWallet] = useState();\n  const [createdWalletInstance, setCreatedWalletInstance] = useState();\n  const [activeWalletConfig, setActiveWalletConfig] = useState();\n  if (!lastConnectedWalletStorage) {\n    lastConnectedWalletStorage = props.createWalletStorage(\"coordinatorStorage\");\n  }\n\n  // if autoSwitch is enabled - enforce connection to activeChain\n  const chainToConnect = props.autoSwitch ? props.activeChain : undefined;\n  const walletParams = useMemo(() => {\n    return {\n      chains: props.chains,\n      dappMetadata: props.dAppMeta,\n      chain: props.activeChain || props.chains[0],\n      clientId: props.clientId\n    };\n  }, [props.chains, props.dAppMeta, props.activeChain, props.clientId]);\n  const createWalletInstance = useCallback(walletConfig => {\n    const walletInstance = walletConfig.create(walletParams);\n    if (walletInstance.walletId === walletIds.magicLink) {\n      // NOTE: removing this if statement causes the component to re-render\n      // Patch for magic link wallet in react native\n      // needed because we need to add a component to the view tree\n      // from the instance, right before calling connect.\n      // Check it out in RN's DappContextProvider.\n      setCreatedWalletInstance(walletInstance);\n    }\n    walletInstanceToConfig.set(walletInstance, walletConfig);\n    return walletInstance;\n  }, [walletParams]);\n\n  // if props.chains is updated, update the active wallet's chains\n  useEffect(() => {\n    if (activeWallet) {\n      activeWallet.updateChains(props.chains);\n    }\n  }, [activeWallet, props.chains]);\n  const setConnectedWallet = useCallback(async function (wallet, connectParams) {\n    let isAutoConnect = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    setActiveWallet(wallet);\n    const walletConfig = walletInstanceToConfig.get(wallet);\n    if (!walletConfig) {\n      throw new Error(\"Wallet config not found for given wallet instance. Do not create a wallet instance manually - use the useCreateWalletInstance() hook instead\");\n    }\n    setActiveWalletConfig(walletConfig);\n    setConnectionStatus(\"connected\");\n    const _signer = await wallet.getSigner();\n    setSigner(_signer);\n\n    // it autoconnected, then the details is already saved in storage, no need to store again\n    if (isAutoConnect) {\n      return;\n    }\n\n    // save to storage\n\n    const walletInfo = {\n      walletId: walletConfig.id,\n      connectParams\n    };\n\n    // if personal wallet exists, we need to replace the connectParams.personalWallet to a stringifiable version\n    const personalWallet = wallet.getPersonalWallet();\n    const personalWalletConfig = walletInstanceToConfig.get(personalWallet);\n    if (personalWallet && personalWalletConfig) {\n      walletInfo.connectParams = {\n        ...walletInfo.connectParams,\n        personalWallet: {\n          walletId: personalWalletConfig.id,\n          connectParams: personalWallet.getConnectParams()\n        }\n      };\n      saveLastConnectedWalletInfo(walletInfo);\n    } else {\n      saveLastConnectedWalletInfo(walletInfo);\n    }\n  }, []);\n  const storeLastActiveChainId = useCallback(async chainId => {\n    const lastConnectedWallet = await lastConnectedWalletStorage.getItem(LAST_CONNECTED_WALLET_STORAGE_KEY);\n    if (!lastConnectedWallet) {\n      return;\n    }\n    try {\n      const parsedWallet = JSON.parse(lastConnectedWallet);\n      if (parsedWallet.connectParams) {\n        parsedWallet.connectParams.chainId = chainId;\n      } else {\n        parsedWallet.connectParams = {\n          chainId\n        };\n      }\n      await lastConnectedWalletStorage.setItem(LAST_CONNECTED_WALLET_STORAGE_KEY, JSON.stringify(parsedWallet));\n    } catch (error) {\n      console.error(`Error saving the last active chain: ${error}`);\n    }\n  }, []);\n  const switchChain = useCallback(async chainId => {\n    if (!activeWallet) {\n      throw new Error(\"No active wallet\");\n    }\n    await activeWallet.switchChain(chainId);\n    const _signer = await activeWallet.getSigner();\n    await storeLastActiveChainId(chainId);\n    setSigner(_signer);\n  }, [activeWallet, storeLastActiveChainId]);\n  const autoConnectTriggered = useRef(false);\n\n  // Auto Connect\n  useEffect(() => {\n    // do not auto connect if signerWallet is given\n    if (props.signerWallet) {\n      return;\n    }\n    if (autoConnectTriggered.current) {\n      return;\n    }\n    // if explicitly set to false, don't auto connect\n    // by default, auto connect\n    if (props.shouldAutoConnect === false) {\n      setConnectionStatus(\"disconnected\");\n      return;\n    }\n    if (activeWallet) {\n      // there's already an active wallet, don't auto connect\n      return;\n    }\n    if (connectionStatus !== \"unknown\") {\n      // only try to auto connect if we're in the unknown state\n      return;\n    }\n    autoConnectTriggered.current = true;\n    async function autoconnect() {\n      const walletInfo = await getLastConnectedWalletInfo();\n      if (!walletInfo) {\n        setConnectionStatus(\"disconnected\");\n        return;\n      }\n      const walletObj = props.supportedWallets.find(W => W.id === walletInfo.walletId);\n      if (!walletObj) {\n        // last connected wallet is no longer present in the supported wallets\n        setConnectionStatus(\"disconnected\");\n        return;\n      }\n      const personalWalletInfo = walletInfo.connectParams?.personalWallet;\n      if (personalWalletInfo) {\n        const personalWallets = walletObj.personalWallets || [];\n        const personalWalleObj = personalWallets.find(W => W.id === personalWalletInfo.walletId);\n        if (personalWalleObj) {\n          // create a personal wallet instance and auto connect it\n          const personalWalletInstance = createWalletInstance(personalWalleObj);\n          try {\n            await timeoutPromise(personalWalletInstance.autoConnect(personalWalletInfo.connectParams), {\n              ms: autoConnectTimeout,\n              message: autoConnectTimeoutErrorMessage\n            });\n          } catch (e) {\n            console.error(\"Failed to auto connect wallet\");\n            console.error(e);\n            setConnectionStatus(\"disconnected\");\n            return;\n          }\n\n          // set the personal wallet instance to the connectParams\n          walletInfo.connectParams = {\n            ...walletInfo.connectParams,\n            personalWallet: personalWalletInstance\n          };\n        } else {\n          // last used personal wallet is no longer present in the supported wallets\n          setConnectionStatus(\"disconnected\");\n          return;\n        }\n      }\n\n      // create a wallet instance and auto connect it\n      const wallet = createWalletInstance(walletObj);\n      try {\n        setConnectionStatus(\"connecting\");\n        await timeoutPromise(wallet.autoConnect(walletInfo.connectParams), {\n          ms: autoConnectTimeout,\n          message: autoConnectTimeoutErrorMessage\n        });\n        setConnectedWallet(wallet, walletInfo.connectParams, true);\n      } catch (e) {\n        console.error(\"Failed to auto connect wallet\");\n        console.error(e);\n        lastConnectedWalletStorage.removeItem(LAST_CONNECTED_WALLET_STORAGE_KEY);\n        setConnectionStatus(\"disconnected\");\n      }\n    }\n    autoconnect();\n  }, [createWalletInstance, props.supportedWallets, setConnectedWallet, props.shouldAutoConnect, activeWallet, connectionStatus, autoConnectTimeout, props.signerWallet]);\n  const connectWallet = useCallback(async function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    const [WalletObj, connectParams] = args;\n    const _connectedParams = {\n      chainId: chainToConnect?.chainId,\n      ...(connectParams || {})\n    };\n    const wallet = createWalletInstance(WalletObj);\n    setConnectionStatus(\"connecting\");\n    try {\n      // if magic is using social login - it will redirect the page - so need to save walletInfo before connecting\n      // TODO: find a better way to handle this\n      if (WalletObj.id === walletIds.magicLink) {\n        saveLastConnectedWalletInfo({\n          walletId: WalletObj.id,\n          connectParams: _connectedParams\n        });\n      }\n      await wallet.connect(_connectedParams);\n      setConnectedWallet(wallet, _connectedParams);\n    } catch (e) {\n      console.error(`Error connecting to wallet: ${e}`);\n      setConnectionStatus(\"disconnected\");\n      throw e;\n    }\n    return wallet;\n  }, [createWalletInstance, setConnectedWallet, chainToConnect]);\n  const onWalletDisconnect = useCallback(async () => {\n    await lastConnectedWalletStorage.removeItem(LAST_CONNECTED_WALLET_STORAGE_KEY);\n    setConnectionStatus(\"disconnected\");\n    setSigner(undefined);\n    setActiveWallet(undefined);\n    setActiveWalletConfig(undefined);\n  }, []);\n  const disconnectWallet = useCallback(async () => {\n    // if disconnect is called before the wallet is connected\n    if (!activeWallet) {\n      onWalletDisconnect();\n      return;\n    }\n    const personalWallet = activeWallet.getPersonalWallet();\n    await activeWallet.disconnect();\n    if (personalWallet) {\n      await personalWallet?.disconnect();\n    }\n    onWalletDisconnect();\n  }, [activeWallet, onWalletDisconnect]);\n\n  // when wallet's network or account is changed using the extension, update UI\n  useEffect(() => {\n    if (!activeWallet) {\n      return;\n    }\n    const update = async () => {\n      const _signer = await activeWallet.getSigner();\n      setSigner(_signer);\n    };\n    activeWallet.addListener(\"change\", () => {\n      update();\n    });\n    activeWallet.addListener(\"disconnect\", () => {\n      onWalletDisconnect();\n    });\n    return () => {\n      activeWallet.removeListener(\"change\");\n      activeWallet.removeListener(\"disconnect\");\n    };\n  }, [activeWallet, onWalletDisconnect]);\n\n  // connect signerWallet immediately if it's passed\n  // and disconnect it if it's not passed\n  const signerConnected = useRef();\n  useEffect(() => {\n    if (!props.signerWallet) {\n      if (signerConnected.current) {\n        disconnectWallet();\n        signerConnected.current = undefined;\n      }\n      return;\n    }\n    if (signerConnected.current === props.signerWallet) {\n      return;\n    }\n    const wallet = createWalletInstance(props.signerWallet);\n    setConnectedWallet(wallet);\n    signerConnected.current = props.signerWallet;\n  }, [createWalletInstance, props.supportedWallets, setConnectedWallet, props.signerWallet, disconnectWallet]);\n  return /*#__PURE__*/jsx(ThirdwebWalletContext.Provider, {\n    value: {\n      disconnect: disconnectWallet,\n      wallets: props.supportedWallets,\n      connect: connectWallet,\n      signer,\n      activeWallet,\n      activeWalletConfig,\n      connectionStatus,\n      setConnectionStatus,\n      createWalletInstance: createWalletInstance,\n      createdWalletInstance: createdWalletInstance,\n      createWalletStorage: props.createWalletStorage,\n      switchChain,\n      setConnectedWallet: setConnectedWallet,\n      activeChain: props.activeChain,\n      chainToConnect,\n      getWalletConfig: walletInstance => {\n        return walletInstanceToConfig.get(walletInstance);\n      },\n      activeChainSetExplicitly: props.activeChainSetExplicitly,\n      clientId: props.clientId\n    },\n    children: props.children\n  });\n}\nfunction useWalletContext() {\n  const ctx = useContext(ThirdwebWalletContext);\n  if (!ctx) {\n    throw new Error(`useWalletContext() can only be used inside <ThirdwebProvider />`);\n  }\n  return ctx;\n}\nasync function getLastConnectedWalletInfo() {\n  const str = await lastConnectedWalletStorage.getItem(LAST_CONNECTED_WALLET_STORAGE_KEY);\n  if (!str) {\n    return null;\n  }\n  try {\n    return JSON.parse(str);\n  } catch {\n    await lastConnectedWalletStorage.removeItem(LAST_CONNECTED_WALLET_STORAGE_KEY);\n    return null;\n  }\n}\nasync function saveLastConnectedWalletInfo(walletInfo) {\n  try {\n    await lastConnectedWalletStorage.setItem(LAST_CONNECTED_WALLET_STORAGE_KEY, JSON.stringify(walletInfo));\n  } catch (e) {\n    console.error(\"Error saving the last connected wallet info\", e);\n  }\n}\n\n/**\n * Timeout a promise with a given Error message if the promise does not resolve in given time\n *\n * @param promise - Promise to track for timeout\n * @param option - timeout options\n * @returns\n */\nfunction timeoutPromise(promise, option) {\n  return new Promise((resolve, reject) => {\n    const timeoutId = setTimeout(() => {\n      reject(new Error(option.message));\n    }, option.ms);\n    promise.then(res => {\n      clearTimeout(timeoutId);\n      resolve(res);\n    }, err => {\n      clearTimeout(timeoutId);\n      reject(err);\n    });\n  });\n}\nconst autoConnectTimeoutErrorMessage = `Failed to Auto connect. Auto connect timed out. You can increase the timeout duration using the autoConnectTimeout prop on <ThirdwebProvider />`;\n\n/**\n * @returns the current active wallet instance\n */\n\nfunction useWallet(walletId) {\n  const context = useWalletContext();\n  invariant(context, \"useWallet() hook must be used within a <ThirdwebProvider/>\");\n  const activeWallet = context.activeWallet;\n  if (!activeWallet) {\n    return undefined;\n  }\n\n  // if walletId is provided, return the wallet instance only if it matches the walletId\n  if (walletId) {\n    if (activeWallet.walletId === walletId) {\n      return activeWallet;\n    } else {\n      return undefined;\n    }\n  }\n  return activeWallet;\n}\n\n/**\n * @returns the current active wallet's configuration object\n */\nfunction useWalletConfig() {\n  const context = useWalletContext();\n  invariant(context, \"useWallet() hook must be used within a <ThirdwebProvider/>\");\n  return context.activeWalletConfig;\n}\n\n/**\n *\n * @returns `supportedWallets` configured in the `<ThirdwebProvider/>`\n */\nfunction useWallets() {\n  const context = useWalletContext();\n  invariant(context, \"useWallets() hook must be used within a <ThirdwebProvider/>\");\n  return context.wallets;\n}\n\n/**\n *\n * @returns a method to connect to a wallet class\n */\nfunction useConnect() {\n  const context = useWalletContext();\n  invariant(context, \"useConnect() hook must be used within a <ThirdwebProvider/>\");\n  return context.connect;\n}\n\n/**\n *\n * @returns a method to disconnect from the current active wallet\n */\nfunction useDisconnect() {\n  const context = useWalletContext();\n  invariant(context, \"useDisconnect() hook must be used within a <ThirdwebProvider/>\");\n  return context.disconnect;\n}\n\n/**\n *\n * @returns the connection status of the wallet\n *\n * It can be one of the following:\n * 1. `unknown` - when wallet connection status is not yet known\n * 2. `connecting` - when wallet is connecting\n * 3. `connected` - when wallet is connected\n * 4. `disconnected` - when wallet is disconnected\n *\n */\nfunction useConnectionStatus() {\n  const context = useWalletContext();\n  invariant(context, \"useConnectionStatus() must be used within a <ThirdwebProvider/>\");\n  return context.connectionStatus;\n}\n\n/**\n *\n * @returns a method to create an instance of given wallet class\n */\nfunction useSetConnectionStatus() {\n  const context = useWalletContext();\n  invariant(context, \"useSetConnectionStatus() must be used within a <ThirdwebProvider/>\");\n  return context.setConnectionStatus;\n}\n\n/**\n *\n * @returns a method to create an instance of given wallet class\n */\nfunction useCreateWalletInstance() {\n  const context = useWalletContext();\n  invariant(context, \"useCreateWalletInstance() must be used within a <ThirdwebProvider/>\");\n  return context.createWalletInstance;\n}\n\n/**\n *\n * @returns a method to connect the wallet to network/chain with given chainId\n */\nfunction useSwitchChain() {\n  const context = useWalletContext();\n  invariant(context, \"useSwitchChain() must be used within a <ThirdwebProvider/>\");\n  return context.switchChain;\n}\n\n/**\n *\n * @returns a method to set a connected wallet instance\n */\nfunction useSetConnectedWallet() {\n  const context = useWalletContext();\n  invariant(context, \"useSwitchChain() must be used within a <ThirdwebProvider/>\");\n  return context.setConnectedWallet;\n}\n\nconst TW_CACHE_KEY_PREFIX = \"tw-cache\";\n\n/**\n * @internal\n */\nfunction enforceCachePrefix(input) {\n  return [TW_CACHE_KEY_PREFIX, ...input.filter(i => typeof i !== \"string\" || i !== TW_CACHE_KEY_PREFIX)];\n}\n\n/**\n * @internal\n */\nfunction createContractCacheKey() {\n  let contractAddress = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : constants.AddressZero;\n  let input = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return enforceCachePrefix([\"contract\", contractAddress, ...input]);\n}\n\n/**\n @internal\n */\nfunction createCacheKeyWithNetwork(input, chainId) {\n  return enforceCachePrefix(cacheKeys.network.active(chainId).concat(input));\n}\n\n/**\n * @internal\n */\nfunction invalidateContractAndBalances(queryClient, contractAddress, chainId) {\n  return Promise.all([queryClient.invalidateQueries(enforceCachePrefix(createCacheKeyWithNetwork(createContractCacheKey(contractAddress), chainId))), queryClient.invalidateQueries(enforceCachePrefix(createCacheKeyWithNetwork([\"balance\"], chainId)))]);\n}\n\n/**\n @internal\n */\nconst cacheKeys = {\n  auth: {\n    user: () => enforceCachePrefix([\"user\"])\n  },\n  network: {\n    active: chainId => enforceCachePrefix([\"chainId\", chainId])\n  },\n  wallet: {\n    balance: (chainId, walletAddress, tokenAddress) => enforceCachePrefix(createCacheKeyWithNetwork(enforceCachePrefix([\"balance\", {\n      walletAddress,\n      tokenAddress\n    }]), chainId))\n  },\n  contract: {\n    read: (contractAddress, fnIdentity) => createContractCacheKey(contractAddress, [\"read\", fnIdentity]),\n    type: contractAddress => createContractCacheKey(contractAddress, [\"contract-type\"]),\n    compilerMetadata: contractAddress => createContractCacheKey(contractAddress, [\"publish-metadata\"]),\n    typeAndCompilerMetadata: contractAddress => createContractCacheKey(contractAddress, [\"contract-type-and-metadata\"]),\n    metadata: contractAddress => createContractCacheKey(contractAddress, [\"metadata\"]),\n    extractFunctions: contractAddress => createContractCacheKey(contractAddress, [\"extractFunctions\"]),\n    call: (contractAddress, functionName, args, overrides) => createContractCacheKey(contractAddress, [\"call\", functionName, args, overrides]),\n    accountFactory: {\n      getAll: contractAddress => createContractCacheKey(contractAddress, [\"accountFactory\"]),\n      isAccountDeployed: (contractAdress, admin) => createContractCacheKey(contractAdress, [\"isAccountDeployed\", admin]),\n      getAllForAddress: (contractAdress, address) => createContractCacheKey(contractAdress, [\"getAllForAddress\", address])\n    },\n    account: {\n      signers: contractAddress => createContractCacheKey(contractAddress, [\"account\", \"signers\"])\n    },\n    app: {\n      get: contractAddress => createContractCacheKey(contractAddress, [\"appURI\"])\n    },\n    events: {\n      getEvents: (contractAddress, eventName) => createContractCacheKey(contractAddress, [\"events\", \"getEvents\", {\n        eventName\n      }]),\n      getAllEvents: contractAddress => createContractCacheKey(contractAddress, [\"events\", \"getAllEvents\"])\n    },\n    // specific contract types\n    nft: {\n      get: (contractAddress, tokenId) => createContractCacheKey(contractAddress, [\"get\", {\n        tokenId\n      }]),\n      balanceOf: (contractAddress, owner, tokenId) => createContractCacheKey(contractAddress, [\"balanceOf\", {\n        owner,\n        tokenId\n      }]),\n      query: {\n        all: (contractAddress, params) => createContractCacheKey(contractAddress, params ? [\"query\", \"all\", params] : [\"query\", \"all\"]),\n        totalCirculatingSupply: contractAddress => createContractCacheKey(contractAddress, [\"query\", \"totalCirculatingSupply\"]),\n        totalCount: contractAddress => createContractCacheKey(contractAddress, [\"query\", \"totalCount\"]),\n        owned: {\n          all: (contractAddress, owner) => createContractCacheKey(contractAddress, [\"query\", \"owned\", \"all\", owner])\n        }\n      },\n      sharedMetadata: {\n        get: contractAddress => createContractCacheKey(contractAddress)\n      },\n      drop: {\n        getAllUnclaimed: (contractAddress, params) => createContractCacheKey(contractAddress, params ? [\"getAllUnclaimed\", params] : [\"getAllUnclaimed\"]),\n        getAllClaimed: (contractAddress, params) => createContractCacheKey(contractAddress, params ? [\"getAllClaimed\", params] : [\"getAllClaimed\"]),\n        totalUnclaimedSupply: contractAddress => createContractCacheKey(contractAddress, [\"totalUnclaimedSupply\"]),\n        totalClaimedSupply: contractAddress => createContractCacheKey(contractAddress, [\"totalClaimedSupply\"]),\n        revealer: {\n          getBatchesToReveal: (contractAddress, params) => createContractCacheKey(contractAddress, params ? [\"getBatchesToReveal\", params] : [\"getBatchesToReveal\"])\n        }\n      }\n    },\n    token: {\n      totalSupply: contractAddress => createContractCacheKey(contractAddress, [\"totalSupply\"]),\n      decimals: contractAddress => createContractCacheKey(contractAddress, [\"decimals\"]),\n      balanceOf: (contractAddress, walletAddress) => createContractCacheKey(contractAddress, [\"balanceOf\", {\n        walletAddress\n      }])\n    },\n    marketplace: {\n      getListing: (contractAddress, listingId) => createContractCacheKey(contractAddress, [\"getListing\", {\n        listingId\n      }]),\n      getAllListings: (contractAddress, params) => createContractCacheKey(contractAddress, params ? [\"getAllListings\", params] : [\"getAllListings\"]),\n      getTotalCount: contractAddress => createContractCacheKey(contractAddress, [\"getTotalCount\"]),\n      getActiveListings: (contractAddress, params) => createContractCacheKey(contractAddress, params ? [\"getActiveListings\", params] : [\"getActiveListings\"]),\n      auction: {\n        getBidBufferBps: (contractAddress, listingId) => createContractCacheKey(contractAddress, [\"auction\", \"getBidBufferBps\", {\n          listingId\n        }]),\n        getWinningBid: (contractAddress, listingId) => createContractCacheKey(contractAddress, [\"auction\", \"getWinningBid\", {\n          listingId\n        }]),\n        getMinimumNextBid: (contractAddress, listingId) => createContractCacheKey(contractAddress, [\"auction\", \"getMinimumNextBid\", {\n          listingId\n        }]),\n        getWinner: (contractAddress, listingId) => createContractCacheKey(contractAddress, [\"auction\", \"getWinner\", {\n          listingId\n        }])\n      },\n      directListings: {\n        getAll: (contractAddress, params) => createContractCacheKey(contractAddress, params ? [\"directListings\", \"getAll\", params] : [\"directListings\", \"getAll\"]),\n        getAllValid: (contractAddress, params) => createContractCacheKey(contractAddress, params ? [\"directListings\", \"getAllValid\", params] : [\"directListings\", \"getAllValid\"]),\n        getListing: (contractAddress, listingId) => createContractCacheKey(contractAddress, [\"directListings\", \"getListing\", {\n          listingId\n        }]),\n        getTotalCount: contractAddress => createContractCacheKey(contractAddress, [\"directListings\", \"getTotalCount\"])\n      },\n      englishAuctions: {\n        getAll: (contractAddress, params) => createContractCacheKey(contractAddress, params ? [\"englishAuctions\", \"getAll\", params] : [\"englishAuctions\", \"getAll\"]),\n        getAllValid: (contractAddress, params) => createContractCacheKey(contractAddress, params ? [\"englishAuctions\", \"getAllValid\", params] : [\"englishAuctions\", \"getAllValid\"]),\n        getAuction: (contractAddress, auctionId) => createContractCacheKey(contractAddress, [\"englishAuctions\", \"getAuction\", {\n          auctionId\n        }]),\n        getWinningBid: (contractAddress, auctionId) => createContractCacheKey(contractAddress, [\"englishAuctions\", \"getWinningBid\", {\n          auctionId\n        }]),\n        getTotalCount: contractAddress => createContractCacheKey(contractAddress, [\"englishAuctions\", \"getTotalCount\"])\n      }\n    }\n  },\n  // extensions\n  extensions: {\n    claimConditions: {\n      getActive: (contractAddress, tokenId, options) => createContractCacheKey(contractAddress, tokenId ? [\"claimConditions\", \"getActive\", {\n        tokenId\n      }, options] : [\"claimConditions\", \"getActive\", options]),\n      getAll: (contractAddress, tokenId, options) => createContractCacheKey(contractAddress, tokenId ? [\"claimConditions\", \"getAll\", {\n        tokenId\n      }, options] : [\"claimConditions\", \"getAll\", options]),\n      getClaimerProofs: (contractAddress, tokenId) => createContractCacheKey(contractAddress, tokenId ? [\"claimConditions\", \"getClaimerProofs\", {\n        tokenId\n      }] : [\"claimConditions\", \"getClaimerProofs\"]),\n      getClaimIneligibilityReasons: (contractAddress, params, tokenId) => createContractCacheKey(contractAddress, tokenId ? [\"claimConditions\", \"getIneligibilityReasons\", {\n        tokenId\n      }, params] : [\"claimConditions\", \"getIneligibilityReasons\", params]),\n      // combinations of queries cache keys\n      useActiveClaimConditionForWallet: (contractAddress, walletAddress, tokenId) => createContractCacheKey(contractAddress, tokenId ? [\"claimConditions\", \"useActiveClaimConditionForWallet\", {\n        tokenId,\n        walletAddress\n      },,] : [\"claimConditions\", \"getIneligibilityReasons\", {\n        walletAddress\n      }])\n    },\n    // primary sale contracts\n    sales: {\n      getRecipient: contractAddress => createContractCacheKey(contractAddress, [\"sales\"])\n    },\n    // royalties\n    royalties: {\n      getDefaultRoyaltyInfo: contractAddress => createContractCacheKey(contractAddress, [\"royalties\"])\n    },\n    // platform fees\n    platformFees: {\n      get: contractAddress => createContractCacheKey(contractAddress, [\"platformFees\"])\n    },\n    // contract metadata\n    metadata: {\n      get: contractAddress => createContractCacheKey(contractAddress, [\"metadata\"])\n    },\n    roles: {\n      getAll: contractAddress => createContractCacheKey(contractAddress, [\"roles\"]),\n      get: (contractAddress, role) => createContractCacheKey(contractAddress, [\"roles\", {\n        role\n      }])\n    }\n  }\n};\n\nconst AUTH_TOKEN_STORAGE_KEY = \"auth_token_storage_key\";\n\n/**\n * Hook to securely login to a backend with the connected wallet. The backend\n * authentication URL must be configured on the ThirdwebProvider.\n *\n * @returns - A function to invoke to login with the connected wallet, and an isLoading state.\n *\n * @see {@link https://portal.thirdweb.com/react/react.uselogin?utm_source=sdk | Documentation}\n *\n * @beta\n */\nfunction useLogin() {\n  const queryClient = useQueryClient();\n  const authConfig = useThirdwebAuthContext();\n  const wallet = useWallet();\n  const login = useMutation({\n    mutationFn: async () => {\n      invariant(authConfig, \"Please specify an authConfig in the ThirdwebProvider\");\n      invariant(wallet, \"You need a connected wallet to login.\");\n      invariant(authConfig.authUrl, \"Please specify an authUrl in the authConfig.\");\n      const address = await wallet.getAddress();\n      const chainId = await wallet.getChainId();\n      let res = await fetch(`${authConfig.authUrl}/payload`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          address,\n          chainId: chainId.toString()\n        })\n      });\n      if (!res.ok) {\n        throw new Error(`Failed to get payload with status code ${res.status}`);\n      }\n      let payloadData;\n      try {\n        ({\n          payload: payloadData\n        } = await res.json());\n      } catch {\n        throw new Error(`Failed to get payload`);\n      }\n      const payload = await signLoginPayload({\n        wallet,\n        payload: payloadData\n      });\n      res = await fetch(`${authConfig.authUrl}/login`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          payload\n        }),\n        credentials: \"include\"\n      });\n      if (!res.ok) {\n        const data = await res.json();\n        if (data.error) {\n          throw new Error(data.error);\n        }\n        throw new Error(`Login request failed with status code ${res.status}`);\n      }\n      const {\n        token\n      } = await res.json();\n      await authConfig.secureStorage?.setItem(AUTH_TOKEN_STORAGE_KEY, token);\n      queryClient.invalidateQueries(cacheKeys.auth.user());\n      return token;\n    }\n  });\n  return {\n    login: () => login.mutateAsync(),\n    isLoading: login.isLoading\n  };\n}\n\n/**\n * Hook to logout the connected wallet from the backend.\n * The backend logout URL must be configured on the ThirdwebProvider.\n *\n * @returns - A function to invoke to logout.\n *\n * @see {@link https://portal.thirdweb.com/react/react.uselogout?utm_source=sdk | Documentation}\n *\n * @beta\n */\nfunction useLogout() {\n  const queryClient = useQueryClient();\n  const authConfig = useThirdwebAuthContext();\n  const logout = useMutation({\n    mutationFn: async () => {\n      invariant(authConfig, \"Please specify an authConfig in the ThirdwebProvider\");\n      invariant(authConfig.authUrl, \"Please specify an authUrl in the authConfig.\");\n      await fetch(`${authConfig.authUrl}/logout`, {\n        method: \"POST\",\n        credentials: \"include\"\n      });\n      authConfig.secureStorage?.removeItem(AUTH_TOKEN_STORAGE_KEY);\n      queryClient.invalidateQueries(cacheKeys.auth.user());\n    }\n  });\n  return {\n    logout: logout.mutateAsync,\n    isLoading: logout.isLoading\n  };\n}\n\n/**\n * Hook to get the currently logged in user.\n *\n * @returns - The currently logged in user or null if not logged in, as well as a loading state.\n *\n * @see {@link https://portal.thirdweb.com/react/react.useuser?utm_source=sdk | Documentation}\n *\n * @beta\n */\nfunction useUser() {\n  const authConfig = useThirdwebAuthContext();\n  const {\n    data: user,\n    isLoading\n  } = useQuery(cacheKeys.auth.user(), async () => {\n    invariant(authConfig, \"Please specify an authConfig in the ThirdwebProvider\");\n    invariant(authConfig.authUrl, \"Please specify an authUrl in the authConfig.\");\n    const token = await authConfig.secureStorage?.getItem(AUTH_TOKEN_STORAGE_KEY);\n    // We include credentials so we can getUser even if API is on different URL\n    const params = {\n      credentials: \"include\",\n      ...(token ? {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      } : {})\n    };\n    const res = await fetch(`${authConfig.authUrl}/user`, params);\n    return await res.json();\n  }, {\n    enabled: !!authConfig\n  });\n  return {\n    user,\n    isLoggedIn: !!user,\n    isLoading\n  };\n}\n\n/**\n * Hook to switch the account of the active wallet\n *\n * @returns - A function to invoke to switch account.\n *\n * @see {@link https://portal.thirdweb.com/react/react.useswitchaccount?utm_source=sdk | Documentation}\n *\n * @beta\n */\nfunction useSwitchAccount() {\n  const queryClient = useQueryClient();\n  const authConfig = useThirdwebAuthContext();\n  const switchAccount = useMutation({\n    mutationFn: async address => {\n      invariant(authConfig, \"Please specify an authConfig in the ThirdwebProvider\");\n      invariant(authConfig.authUrl, \"Please specify an authUrl in the authConfig.\");\n      await fetch(`${authConfig.authUrl}/switch-account`, {\n        method: \"POST\",\n        credentials: \"include\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          address\n        })\n      });\n      queryClient.invalidateQueries(cacheKeys.auth.user());\n    }\n  });\n  return {\n    switchAccount: switchAccount.mutateAsync,\n    isLoading: switchAccount.isLoading\n  };\n}\n\nfunction useAuth() {\n  const wallet = useWallet();\n  const authConfig = useThirdwebAuthContext();\n  return useMemo(() => {\n    if (!authConfig?.domain) {\n      return undefined;\n    }\n    if (!wallet) {\n      return undefined;\n    }\n    return new ThirdwebAuth(wallet, authConfig.domain);\n  }, [wallet, authConfig?.domain]);\n}\n\nconst ThirdwebAuthProvider = _ref => {\n  let {\n    value,\n    children\n  } = _ref;\n  // Remove trailing slash from URL if present\n  const authContext = useMemo(() => {\n    if (!value) {\n      return undefined;\n    }\n    const context = {\n      ...value,\n      authUrl: value.authUrl?.replace(/\\/$/, \"\")\n    };\n    return context;\n  }, [value]);\n  return /*#__PURE__*/jsxs(ThirdwebAuthContext.Provider, {\n    value: authContext,\n    children: [children, /*#__PURE__*/jsx(ChangeActiveWalletOnAccountSwitch, {})]\n  });\n};\nfunction ChangeActiveWalletOnAccountSwitch() {\n  const wallet = useWallet();\n  const {\n    logout\n  } = useLogout();\n  const {\n    switchAccount\n  } = useSwitchAccount();\n  const authConfig = useThirdwebAuthContext();\n  const queryClient = useQueryClient();\n\n  // When active wallet switches, switch the active account cookie and invalidate user query\n  useEffect(() => {\n    const handleSwitchAccount = async data => {\n      if (!data.address) {\n        return;\n      }\n      try {\n        await switchAccount(data.address);\n      } catch (err) {\n        console.debug(`[Auth] Failed to switch account to ${data.address} with error:\\n`, err);\n      }\n    };\n    const handleLogout = async () => {\n      try {\n        await logout();\n      } catch (err) {\n        console.debug(`[Auth] Failed to logout with error:\\n`, err);\n      }\n    };\n    const shouldAddListener = !!wallet && authConfig && authConfig.authUrl;\n    if (shouldAddListener) {\n      wallet.addListener(\"connect\", handleSwitchAccount);\n      wallet.addListener(\"change\", handleSwitchAccount);\n      wallet.addListener(\"disconnect\", handleLogout);\n    }\n    return () => {\n      if (shouldAddListener) {\n        wallet.removeListener(\"connect\", handleSwitchAccount);\n        wallet.removeListener(\"change\", handleSwitchAccount);\n        wallet.removeListener(\"disconnect\", handleLogout);\n      }\n    };\n  }, [wallet, queryClient, authConfig, logout, switchAccount]);\n  return null;\n}\n\nfunction useUpdateChainsWithClientId(supportedChains, activeChain, clientId) {\n  const supportedChainsWithKey = useMemo(() => {\n    return supportedChains.map(chain => updateChainRPCs(chain, clientId));\n  }, [supportedChains, clientId]);\n  const activeChainIdOrObjWithKey = useMemo(() => {\n    if (!activeChain || typeof activeChain === \"string\" || typeof activeChain === \"number\") {\n      return activeChain;\n    }\n    return updateChainRPCs(activeChain, clientId);\n  }, [activeChain, clientId]);\n  return [supportedChainsWithKey, activeChainIdOrObjWithKey];\n}\n\nconst ThirdwebConfigContext = /* @__PURE__ */createContext(undefined);\nconst ThirdwebConfigProvider = _ref => {\n  let {\n    value,\n    children\n  } = _ref;\n  return /*#__PURE__*/jsx(ThirdwebConfigContext.Provider, {\n    value: value,\n    children: children\n  });\n};\nfunction useThirdwebConfigContext() {\n  const context = useContext(ThirdwebConfigContext);\n  invariant(context, \"useThirdwebConfigContext() hook must be used within a <ThirdwebProvider/>\");\n  return context;\n}\n\nconst ThirdwebSDKContext = /* @__PURE__ */createContext({});\n\n// eslint-disable-next-line turbo/no-undeclared-env-vars, better-tree-shaking/no-top-level-side-effects\nconst __DEV__ = process.env.NODE_ENV !== \"production\";\n\n/**\n * @internal\n */\nfunction useSDKContext() {\n  const ctx = useContext(ThirdwebSDKContext);\n  invariant(ctx._inProvider, \"useSDK must be called from within a ThirdwebProvider, did you forget to wrap your app in a <ThirdwebProvider />?\");\n  return ctx;\n}\n\n/**\n *\n * @returns {@link ThirdwebSDK}\n * Access the instance of the thirdweb SDK created by the ThirdwebProvider\n * to call methods using the connected wallet on the desiredChainId.\n * @example\n * ```javascript\n * const sdk = useSDK();\n * ```\n */\nfunction useSDK() {\n  const {\n    sdk\n  } = useSDKContext();\n  return sdk;\n}\n\n/**\n * @internal\n */\nfunction useSDKChainId() {\n  const sdk = useSDK();\n  return sdk?._chainId;\n}\n\nconst INITIAL_CONTEXT_VALUE = {\n  wallet: undefined,\n  address: undefined,\n  chainId: undefined,\n  signer: undefined\n};\nconst ThirdwebConnectedWalletContext = /* @__PURE__ */createContext(undefined);\nconst ThirdwebConnectedWalletProvider = _ref => {\n  let {\n    signer,\n    children\n  } = _ref;\n  const {\n    chains,\n    clientId\n  } = useThirdwebConfigContext();\n  const storage = useSDK()?.storage;\n  const [contextValue, setContextValue] = useState({\n    ...INITIAL_CONTEXT_VALUE,\n    signer: signer ? signer : undefined\n  });\n  useEffect(() => {\n    setContextValue(val => ({\n      ...val,\n      signer: signer ? signer : undefined\n    }));\n  }, [signer]);\n  useEffect(() => {\n    if (!storage) {\n      return;\n    }\n    let s = signer;\n    if (signer) {\n      // just get both of these up front and keep them around with the context\n      Promise.all([signer.getAddress(), signer.getChainId()]).then(_ref2 => {\n        let [address, chainId] = _ref2;\n        const chain = chains.find(c => c.chainId === chainId);\n        let rpcUrl = undefined;\n        if (chain) {\n          try {\n            rpcUrl = getValidChainRPCs(chain, clientId)[0];\n          } catch (e) {\n            // failed to get a viable rpc url, nothing we can do\n            console.error(e);\n          }\n        }\n\n        // only if the signer is still the same!\n        if (signer === s) {\n          const wallet = new UserWallet(signer, {\n            readonlySettings: rpcUrl ? {\n              rpcUrl,\n              chainId\n            } : undefined\n          }, storage);\n          setContextValue({\n            wallet,\n            address,\n            chainId,\n            signer\n          });\n        }\n      }).catch(err => {\n        if (__DEV__) {\n          console.warn(\"failed to get wallet instance in `<ThirdwebConnectedWalletProvider />`\", err);\n        }\n      });\n    } else {\n      // if signer is not provided, re-set the context value to initial values\n      setContextValue(INITIAL_CONTEXT_VALUE);\n    }\n    return () => {\n      // set the previous signer to undefined because it is invalid now\n      s = undefined;\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [signer, clientId]);\n  return /*#__PURE__*/jsx(ThirdwebConnectedWalletContext.Provider, {\n    value: contextValue,\n    children: children\n  });\n};\nfunction useThirdwebConnectedWalletContext() {\n  const context = useContext(ThirdwebConnectedWalletContext);\n  invariant(context, \"useThirdwebConnectedWalletContext() hook must be used within a <ThirdwebProvider/>\");\n  return context;\n}\n\nconst WrappedThirdwebSDKProvider = _ref => {\n  let {\n    sdkOptions = {},\n    storageInterface,\n    supportedChains,\n    activeChain,\n    signer,\n    children,\n    clientId,\n    secretKey\n  } = _ref;\n  const activeChainId = useMemo(() => {\n    if (!activeChain) {\n      return supportedChains[0]?.chainId;\n    }\n    if (typeof activeChain === \"number\") {\n      return activeChain;\n    }\n    if (typeof activeChain === \"string\") {\n      return supportedChains.find(c => c.slug === activeChain)?.chainId;\n    }\n    return activeChain.chainId;\n  }, [activeChain, supportedChains]);\n  const sdk = useMemo(() => {\n    let chainId = activeChainId;\n    const supportedChain = supportedChains.find(c => c.chainId === chainId);\n    if (!supportedChain && chainId !== undefined) {\n      console.warn(`The chainId ${chainId} is not in the configured chains, please add it to the ThirdwebProvider`);\n      // reset the chainId as to not trigger an error in the sdk constructor\n      chainId = undefined;\n    }\n    let readonlySettings = undefined;\n    if (supportedChain && supportedChain.rpc.length > 0) {\n      try {\n        const rpcUrl = getValidChainRPCs(supportedChain, clientId)[0];\n        readonlySettings = {\n          chainId: supportedChain.chainId,\n          rpcUrl\n        };\n      } catch (e) {\n        // no-op\n      }\n    }\n\n    // TODO: find a better way to fix the type error\n\n    const mergedOptions = {\n      readonlySettings,\n      ...sdkOptions,\n      supportedChains: supportedChains\n    };\n    let sdk_ = undefined;\n    if (chainId) {\n      // sdk from chainId\n      sdk_ = new ThirdwebSDK(chainId, {\n        ...mergedOptions,\n        clientId,\n        secretKey\n      }, storageInterface);\n    }\n    // if we still have no sdk fall back to the first element in chains\n    if (!sdk_) {\n      if (supportedChains.length > 0) {\n        chainId = supportedChains[0].chainId;\n        sdk_ = new ThirdwebSDK(chainId, mergedOptions, storageInterface);\n      } else {\n        console.error(\"No chains configured, please pass a chain or chains to the ThirdwebProvider\");\n        return undefined;\n      }\n    }\n\n    // set the chainId on the sdk instance to compare things later\n    sdk_._chainId = chainId;\n    return sdk_;\n  }, [activeChainId, supportedChains, sdkOptions, storageInterface, clientId, secretKey]);\n  useEffect(() => {\n    // if we have an sdk and a signer update the signer\n    if (sdk && sdk._chainId === activeChainId) {\n      if (signer) {\n        sdk.updateSignerOrProvider(signer);\n      } else if (activeChainId) {\n        sdk.updateSignerOrProvider(activeChainId);\n      }\n    }\n    // we know what we're doing\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [sdk, sdk?._chainId, signer, activeChainId]);\n  const ctxValue = useMemo(() => ({\n    sdk: sdk && sdk._chainId === activeChainId ? sdk : undefined,\n    _inProvider: true\n  }), [activeChainId, sdk]);\n  return /*#__PURE__*/jsx(ThirdwebSDKContext.Provider, {\n    value: ctxValue,\n    children: children\n  });\n};\n\n/**\n * A basic wrapper around the Thirdweb SDK.\n *\n * You can use this in order to be able to pass a provider & signer directly to the SDK.\n *\n * @remarks Utilizing this provider will mean hooks for wallet management are not available, if you need those please use the {@link ThirdwebProvider} instead.\n *\n * @public\n */\nconst ThirdwebSDKProvider = _ref2 => {\n  let {\n    signer,\n    children,\n    queryClient,\n    supportedChains: _supportedChains,\n    activeChain,\n    clientId,\n    ...restProps\n  } = _ref2;\n  if (!clientId) {\n    checkClientIdOrSecretKey(\"No API key. Please provide a clientId. It is required to access thirdweb's services. You can create a key at https://thirdweb.com/create-api-key\", clientId, undefined);\n  }\n  const supportedChains = _supportedChains || defaultChains;\n  const supportedChainsNonNull = useMemo(() => {\n    const isActiveChainObject = typeof activeChain === \"object\" && activeChain !== null;\n    if (!isActiveChainObject) {\n      return supportedChains;\n    }\n    const isActiveChainInSupportedChains = supportedChains.find(c => c.chainId === activeChain.chainId);\n\n    // if activeChain is not in supportedChains - add it\n    if (!isActiveChainInSupportedChains) {\n      return [...supportedChains, activeChain];\n    }\n\n    // if active chain is in supportedChains - replace it with object in activeChain\n    return supportedChains.map(c => c.chainId === activeChain.chainId ? activeChain : c);\n  }, [supportedChains, activeChain]);\n  const [supportedChainsWithKey, activeChainIdOrObjWithKey] = useUpdateChainsWithClientId(supportedChainsNonNull, activeChain || supportedChainsNonNull[0], clientId);\n  const mergedChains = useMemo(() => {\n    if (!activeChainIdOrObjWithKey || typeof activeChainIdOrObjWithKey === \"string\" || typeof activeChainIdOrObjWithKey === \"number\") {\n      return supportedChainsWithKey;\n    }\n    const _mergedChains = [...supportedChainsWithKey.filter(c => c.chainId !== activeChainIdOrObjWithKey.chainId), activeChainIdOrObjWithKey];\n    // return a _mergedChains uniqued by chainId key\n    return _mergedChains.filter((chain, index, self) => index === self.findIndex(c => c.chainId === chain.chainId));\n  }, [supportedChainsWithKey, activeChainIdOrObjWithKey]);\n  return /*#__PURE__*/jsx(ThirdwebConfigProvider, {\n    value: {\n      chains: mergedChains,\n      clientId\n    },\n    children: /*#__PURE__*/jsx(QueryClientProviderWithDefault, {\n      queryClient: queryClient,\n      children: /*#__PURE__*/jsx(WrappedThirdwebSDKProvider, {\n        signer: signer,\n        supportedChains: mergedChains,\n        clientId: clientId,\n        activeChain: activeChainIdOrObjWithKey,\n        ...restProps,\n        children: /*#__PURE__*/jsx(ThirdwebConnectedWalletProvider, {\n          signer: signer,\n          children: children\n        })\n      })\n    })\n  });\n};\n\nconst ThirdwebProviderCore = _ref => {\n  let {\n    createWalletStorage = createAsyncLocalStorage,\n    ...props\n  } = _ref;\n  const {\n    activeChain\n  } = props;\n  const supportedChains = props.supportedChains || defaultChains;\n  const supportedChainsNonNull = useMemo(() => {\n    const isActiveChainObject = typeof activeChain === \"object\" && activeChain !== null;\n    if (!isActiveChainObject) {\n      return supportedChains;\n    }\n    const isActiveChainInSupportedChains = supportedChains.find(c => c.chainId === activeChain.chainId);\n\n    // if activeChain is not in supportedChains - add it\n    if (!isActiveChainInSupportedChains) {\n      return [...supportedChains, activeChain];\n    }\n\n    // if active chain is in supportedChains - replace it with object in activeChain\n    return supportedChains.map(c => c.chainId === activeChain.chainId ? activeChain : c);\n  }, [supportedChains, activeChain]);\n  const [supportedChainsWithKey, activeChainIdOrObjWithKey] = useUpdateChainsWithClientId(supportedChainsNonNull, props.activeChain || supportedChainsNonNull[0], props.clientId);\n  const activeChainWithKey = useMemo(() => {\n    if (typeof activeChainIdOrObjWithKey === \"number\") {\n      const resolveChain = supportedChainsWithKey.find(chain => chain.chainId === activeChainIdOrObjWithKey);\n      if (!resolveChain) {\n        throw new Error(`Invalid chainId: ${activeChainIdOrObjWithKey}. It is not one of supportedChains`);\n      }\n      return resolveChain;\n    }\n    if (typeof activeChainIdOrObjWithKey === \"string\") {\n      const resolvedChain = supportedChainsWithKey.find(chain => chain.slug === activeChainIdOrObjWithKey);\n      if (!resolvedChain) {\n        throw new Error(`Invalid chain: \"${activeChainIdOrObjWithKey}\". It is not one of supportedChains`);\n      }\n      return resolvedChain;\n    }\n    return activeChainIdOrObjWithKey;\n  }, [activeChainIdOrObjWithKey, supportedChainsWithKey]);\n  const dAppMeta = props.dAppMeta;\n  return /*#__PURE__*/jsx(ThirdwebThemeContext.Provider, {\n    value: props.theme,\n    children: /*#__PURE__*/jsx(ThirdwebWalletProvider, {\n      chains: supportedChainsWithKey,\n      supportedWallets: props.supportedWallets,\n      shouldAutoConnect: props.autoConnect,\n      createWalletStorage: createWalletStorage,\n      dAppMeta: dAppMeta,\n      activeChain: activeChainWithKey,\n      autoSwitch: props.autoSwitch,\n      autoConnectTimeout: props.autoConnectTimeout,\n      clientId: props.clientId,\n      activeChainSetExplicitly: !!props.activeChain,\n      signerWallet: props.signerWallet,\n      children: /*#__PURE__*/jsx(ThirdwebSDKProviderWrapper, {\n        queryClient: props.queryClient,\n        sdkOptions: props.sdkOptions,\n        supportedChains: supportedChainsWithKey,\n        activeChain: activeChainWithKey,\n        storageInterface: props.storageInterface,\n        authConfig: props.authConfig,\n        clientId: props.clientId,\n        secretKey: props.secretKey,\n        children: /*#__PURE__*/jsx(ThirdwebAuthProvider, {\n          value: props.authConfig,\n          children: props.children\n        })\n      })\n    })\n  });\n};\nconst ThirdwebSDKProviderWrapper = _ref2 => {\n  let {\n    children,\n    ...props\n  } = _ref2;\n  const signer = useWalletContext()?.signer;\n  return /*#__PURE__*/jsx(ThirdwebSDKProvider, {\n    signer: signer,\n    ...props,\n    children: children\n  });\n};\n\nfunction useSupportedChains() {\n  const context = useContext(ThirdwebConfigContext);\n  invariant(context, \"useSupportedChains() hook must be used within a <ThirdwebProvider/>\");\n  return context.chains;\n}\n\n/**\n * A hook to get the native or (optional) ERC20 token balance of the connected wallet.\n *\n * @param tokenAddress - the address of the token contract, if empty will use the chain's native token\n * @returns the balance of the connected wallet (native or ERC20)\n * @beta\n */\nfunction useBalance(tokenAddress) {\n  const walletAddress = useAddress();\n  const {\n    wallet,\n    address,\n    chainId\n  } = useThirdwebConnectedWalletContext();\n  const cacheKey = useMemo(() => {\n    return cacheKeys.wallet.balance(chainId || -1, address, tokenAddress);\n  }, [chainId, tokenAddress, address]);\n  return useQuery(cacheKey, () => {\n    return wallet?.balance(tokenAddress);\n  }, {\n    // if user is not logged in no reason to try to fetch\n    enabled: !!wallet && !!walletAddress && !!chainId,\n    retry: true,\n    keepPreviousData: false\n  });\n}\n\n/**\n * @internal\n */\nfunction useConnectedWallet() {\n  const context = useContext(ThirdwebConnectedWalletContext);\n  invariant(context, \"useConnectedWallet() hook must be used within a <ThirdwebProvider/>\");\n  return context.signer;\n}\n\n/**\n * Hook for accessing the address of the connected wallet\n *\n * ```javascript\n * import { useAddress } from \"@thirdweb-dev/react\"\n * ```\n *\n *\n * @example\n * To get the address of the connected wallet, you can use the hook as follows:\n *\n * ```javascript\n * import { useAddress } from \"@thirdweb-dev/react\"\n *\n * const App = () => {\n *   const address = useAddress()\n *\n *   return <div>{address}</div>\n * }\n * ```\n *\n * The `address` variable will hold the address of the connected wallet if a user has connected using one of the supported wallet connection hooks.\n *\n * @see {@link https://portal.thirdweb.com/react/react.useaddress?utm_source=sdk | Documentation}\n *\n * @public\n */\nfunction useAddress() {\n  const context = useContext(ThirdwebConnectedWalletContext);\n  invariant(context, \"useAddress() hook must be used within a <ThirdwebProvider/>\");\n  return context.address;\n}\n\n/**\n * Hook for accessing the chain ID of the network the current wallet is connected to\n *\n * ```javascript\n * import { useChainId } from \"@thirdweb-dev/react\"\n * ```\n *\n * @example\n * You can get the chain ID of the connected wallet by using the hook as follows:\n * ```javascript\n * import { useChainId } from \"@thirdweb-dev/react\"\n *\n * const App = () => {\n *   const chainId = useChainId()\n *\n *   return <div>{chainId}</div>\n * }\n * ```\n * @see {@link https://portal.thirdweb.com/react/react.usechainid?utm_source=sdk | Documentation}\n * @public\n */\nfunction useChainId() {\n  const context = useContext(ThirdwebConnectedWalletContext);\n  invariant(context, \"useChainId() hook must be used within a <ThirdwebProvider/>\");\n  return context.chainId;\n}\n\n/**\n * Hook for accessing the active Chain the current wallet is connected to\n *\n * ```javascript\n * import { useChain } from \"@thirdweb-dev/react-core\"\n * ```\n *\n * @example\n * You can get the chain of the connected wallet by using the hook as follows:\n * ```javascript\n * import { useChain } from \"@thirdweb-dev/react-core\"\n *\n * const App = () => {\n *   const chain = useChain()\n *\n *   return <div>{chain.chainId}</div>\n * }\n * ```\n * @see {@link https://portal.thirdweb.com/react/react.useActiveChain?utm_source=sdk | Documentation}\n * @public\n */\nfunction useChain() {\n  const chainId = useChainId();\n  const chains = useSupportedChains();\n  const chain = useMemo(() => {\n    return chains.find(_chain => _chain.chainId === chainId);\n  }, [chainId, chains]);\n  const unknownChain = useMemo(() => {\n    if (!chain) {\n      return defaultChains.find(c => c.chainId === chainId);\n    }\n  }, [chainId, chain]);\n  return chain || unknownChain;\n}\n\n/**\n * @deprecated\n *\n * This hook is renamed to `useChain`\n *\n * use the `useChain` hook instead\n */\nfunction useActiveChain() {\n  return useChain();\n}\n\n// this hook is only for backwards compatibility\n\n/**\n *\n * @deprecated - use `useChain`, `useSwitchChain`, `useChainId` instead\n *\n * Hook for getting metadata about the network the current wallet is connected to and switching networks\n *\n * @example\n * ```javascript\n * import { useNetwork } from \"@thirdweb-dev/react\";\n *\n * const App = () => {\n *   const [, switchNetwork] = useNetwork();\n *   return (\n *      // switchNetwork is undefined if the wallet does not support programmatic network switching\n *      // 137 is the chainId for Polygon in this example\n *     <button onClick={() => switchNetwork(137)}>\n *        Switch Network\n *     </button>\n *   );\n * };\n```\n *\n * It's important to note that some wallet apps do not support programmatic network switching and switchNetwork will be undefined.\n * For those situations, you can typically switch networks in the wallet app this hook will still work.\n *\n * @public\n */\nfunction useNetwork() {\n  const chain = useChain();\n  const chainId = useChainId();\n  const switchChain = useSwitchChain();\n  const supportedChains = useSupportedChains();\n  const wallet = useWallet();\n  const isMetamaskInstalled = assertWindowEthereum(globalThis.window) ? globalThis.window.ethereum.isMetaMask : false;\n  const isCoinbaseInstalled = assertWindowEthereum(globalThis.window) ? globalThis.window.ethereum.isCoinbaseWallet : false;\n\n  // switch not supported if connected to a mobile wallet\n  const switchChainNotSupported = !wallet || wallet.walletId === walletIds.walletConnectV1 || wallet.walletId === walletIds.walletConnect || wallet.walletId === walletIds.metamask && !isMetamaskInstalled || wallet.walletId === walletIds.coinbase && !isCoinbaseInstalled;\n\n  // error when switching network\n  const [error, setError] = useState(undefined);\n\n  // loading: true when switching network\n  const [loading, setLoading] = useState(false);\n  const switchNetwork = useCallback(async _chainId => {\n    // reset error and loading\n    setLoading(true);\n    setError(undefined);\n    try {\n      await switchChain(_chainId);\n    } catch (e) {\n      setError(e);\n      setLoading(false);\n      return {\n        data: undefined,\n        error: e\n      };\n    }\n    setLoading(false);\n    return {\n      data: supportedChains.find(c => c.chainId === _chainId) || defaultChains.find(c => c.chainId === _chainId),\n      error: undefined\n    };\n  }, [switchChain, supportedChains]);\n  return [{\n    data: {\n      chain: chainId === undefined ? undefined : chain || {\n        chainId,\n        unsupported: true\n      },\n      chains: wallet ? supportedChains : []\n    },\n    error: error,\n    loading\n  }, switchChainNotSupported ? undefined : switchNetwork];\n}\n\n/**\n * A wallet address.\n * @beta\n */\n\n/**\n * A contract address.\n * @beta\n */\n\n/**\n * The parameters to pass to the mint and transfer functions.\n *\n * @beta\n */\n\n/**\n * The parameters to pass to the burn function.\n *\n * @beta\n */\n\n// NFTS //\n/**\n * The possible NFT contract types.\n * @example\n * ```javascript\n * const { contract } = useContract(\"{{contract_address}}\");\n * ```\n * @beta\n */\n/**\n * The possible Token contract types.\n * @example\n * ```javascript\n * const { contract } = useContract(\"{{contract_address}}\");\n * ```\n * @beta\n */\n/**\n * Possible NFT contract types.\n * @beta\n */\n/**\n * The params to pass to `useTransferNFT`.\n * @beta\n */\n/**\n * The params to pass to `useTransferBatchNFT`.\n * @beta\n */\n/**\n * The params to pass to `useMintNFTSupply`.\n * @beta\n */\n/**\n * The params for the {@link useMintNFT} hook mutation.\n *\n * @beta\n */\n/**\n * The return type of the {@link useMintNFT} hook.\n *\n * @beta\n */\n/**\n * The params for the {@link useBurnNFT} hook mutation.\n *\n * @beta\n */\n// DROPS //\n/**\n * The possible DROP contract types.\n * @beta\n */\n/**\n * The possible revealable contract types.\n * @beta\n */\n/**\n * The params for the {@link useDelayedRevealLazyMint} hook mutation.\n *\n * @beta\n */\n/**\n * The params for the {@link useRevealLazyMint} hook mutation.\n *\n * @beta\n */\n/**\n * The params for the {@link useClaimNFT} hook mutation.\n *\n * @beta\n */\n/**\n * The return type of the {@link useClaimNFT} hook.\n *\n * @beta\n */\n// MARKETPLACE //\n// TOKEN DROP //\n// Helpers\nfunction getErcs(contract) {\n  return {\n    erc1155: getErc1155(contract),\n    erc721: getErc721(contract),\n    erc20: getErc20(contract)\n  };\n}\nfunction getErc1155(contract) {\n  if (!contract) {\n    return undefined;\n  }\n  try {\n    if (\"erc1155\" in contract) {\n      return contract.erc1155;\n    }\n  } catch (error) {\n    return undefined;\n  }\n  return undefined;\n}\nfunction getErc721(contract) {\n  if (!contract) {\n    return undefined;\n  }\n  try {\n    if (\"erc721\" in contract) {\n      return contract.erc721;\n    }\n  } catch (error) {\n    return undefined;\n  }\n  return undefined;\n}\nfunction getErc20(contract) {\n  if (!contract) {\n    return undefined;\n  }\n  try {\n    if (\"erc20\" in contract) {\n      return contract.erc20;\n    }\n  } catch (error) {\n    return undefined;\n  }\n  return undefined;\n}\n\n/** @internal */\nfunction useQueryWithNetwork(queryKey, queryFn, options) {\n  const activeChainId = useSDKChainId();\n  const mergedOptions = {\n    ...options,\n    enabled: !!(activeChainId && options?.enabled)\n  };\n  return useQuery(createCacheKeyWithNetwork(queryKey, activeChainId), queryFn, mergedOptions);\n}\n\n/**\n * The options to be passed as the second parameter to the {@link useClaimIneligibilityReasons}` hook.\n *\n * @beta\n */\n\n/**\n * The params for the {@link useSetClaimConditions} hook mutation.\n *\n * @beta\n */\n\n/** **********************/\n/**     READ  HOOKS     **/\n/** **********************/\n/**\n * Get the active claim condition\n *\n * @example\n * ```javascript\n * const { data: activeClaimCondition, isLoading, error } = useActiveClaimCondition(contract);\n * ```\n *\n * @param contract - an instance of a contract that extends the ERC721, ERC1155 or ERC20 spec and implements the `claimConditions` extension.\n * @param tokenId - the id of the token to fetch the claim conditions for (if the contract is an ERC1155 contract)\n * @returns a response object with the currently active claim condition\n * @twfeature ERC20ClaimPhasesV2 | ERC20ClaimPhasesV1 | ERC20ClaimConditionsV2 | ERC20ClaimConditionsV1 | ERC721ClaimPhasesV2 | ERC721ClaimPhasesV1 | ERC721ClaimConditionsV2 | ERC721ClaimConditionsV1 | ERC1155ClaimPhasesV2 | ERC1155ClaimPhasesV1 | ERC1155ClaimConditionsV2 | ERC1155ClaimConditionsV1\n * @see {@link https://portal.thirdweb.com/react/react.useactiveclaimcondition?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useActiveClaimCondition(contract, tokenId, options) {\n  const contractAddress = contract?.getAddress();\n  const {\n    erc1155,\n    erc721,\n    erc20\n  } = getErcs(contract);\n  return useQueryWithNetwork(cacheKeys.extensions.claimConditions.getActive(contractAddress, tokenId, options), () => {\n    if (erc1155) {\n      requiredParamInvariant(tokenId, \"tokenId is required for ERC1155 claim conditions\");\n      return erc1155.claimConditions.getActive(tokenId, options);\n    }\n    if (erc721) {\n      return erc721.claimConditions.getActive(options);\n    }\n    if (erc20) {\n      return erc20.claimConditions.getActive(options);\n    }\n    throw new Error(\"Contract must be ERC721, ERC1155 or ERC20\");\n  }, {\n    // Checks that happen here:\n    // 1. if the contract is based on ERC1155 contract => tokenId cannot be `undefined`\n    // 2. if the contract is NOT based on ERC1155 => we have to have either an ERC721 or ERC20 contract\n    enabled: erc1155 ? tokenId !== undefined : !!erc721 || !!erc20\n  });\n}\n\n/**\n * Get claimer proofs\n *\n * @example\n * ```javascript\n * const { data: claimerProofs, isLoading, error } = useClaimerProofs(contract);\n * ```\n *\n * @param contract - an instance of a contract that extends the ERC721, ERC1155 or ERC20 spec and implements the `claimConditions` extension.\n * @param claimerAddress - the address of the claimer to fetch the claimer proofs for\n * @param tokenId - the id of the token to fetch the claimer proofs for (if the contract is an ERC1155 contract)\n * @param claimConditionId - optional the claim condition id to get the proofs for\n * @returns a response object with the snapshot for the provided address\n * @twfeature ERC20ClaimPhasesV2 | ERC20ClaimPhasesV1 | ERC20ClaimConditionsV2 | ERC20ClaimConditionsV1 | ERC721ClaimPhasesV2 | ERC721ClaimPhasesV1 | ERC721ClaimConditionsV2 | ERC721ClaimConditionsV1 | ERC1155ClaimPhasesV2 | ERC1155ClaimPhasesV1 | ERC1155ClaimConditionsV2 | ERC1155ClaimConditionsV1\n * @see {@link https://portal.thirdweb.com/react/react.useclaimerproofs?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useClaimerProofs(contract, claimerAddress, tokenId, claimConditionId) {\n  const contractAddress = contract?.getAddress();\n  const {\n    erc1155,\n    erc721,\n    erc20\n  } = getErcs(contract);\n  return useQueryWithNetwork(cacheKeys.extensions.claimConditions.getClaimerProofs(contractAddress, tokenId), () => {\n    if (erc1155) {\n      requiredParamInvariant(tokenId, \"tokenId is required for ERC1155 claim conditions\");\n      return erc1155.claimConditions.getClaimerProofs(tokenId, claimerAddress, claimConditionId);\n    }\n    if (erc721) {\n      return erc721.claimConditions.getClaimerProofs(claimerAddress, claimConditionId);\n    }\n    if (erc20) {\n      return erc20.claimConditions.getClaimerProofs(claimerAddress, claimConditionId);\n    }\n    throw new Error(\"Contract must be ERC721, ERC1155 or ERC20\");\n  }, {\n    // Checks that happen here:\n    // 1. if the contract is based on ERC1155 contract => tokenId cannot be `undefined`\n    // 2. if the contract is NOT based on ERC1155 => we have to have either an ERC721 or ERC20 contract\n    enabled: erc1155 ? tokenId !== undefined : !!erc721 || !!erc20\n  });\n}\n\n/**\n * Get all claim conditions\n *\n * @example\n * ```javascript\n * const { data: claimConditions, isLoading, error } = useClaimConditions(contract);\n * ```\n *\n * @param contract - an instance of a contract that extends the ERC721, ERC1155 or ERC20 spec and implements the `claimConditions` extension.\n * @param tokenId - the id of the token to fetch the claim conditions for (if the contract is an ERC1155 contract)\n * @returns a response object with the list of claim conditions\n * @twfeature ERC20ClaimPhasesV2 | ERC20ClaimPhasesV1 | ERC20ClaimConditionsV2 | ERC20ClaimConditionsV1 | ERC721ClaimPhasesV2 | ERC721ClaimPhasesV1 | ERC721ClaimConditionsV2 | ERC721ClaimConditionsV1 | ERC1155ClaimPhasesV2 | ERC1155ClaimPhasesV1 | ERC1155ClaimConditionsV2 | ERC1155ClaimConditionsV1\n * @see {@link https://portal.thirdweb.com/react/react.useclaimconditions?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useClaimConditions(contract, tokenId, options) {\n  const contractAddress = contract?.getAddress();\n  const {\n    erc1155,\n    erc721,\n    erc20\n  } = getErcs(contract);\n  return useQueryWithNetwork(cacheKeys.extensions.claimConditions.getAll(contractAddress, tokenId, options), () => {\n    if (erc1155) {\n      requiredParamInvariant(tokenId, \"tokenId is required for ERC1155 claim conditions\");\n      return erc1155.claimConditions.getAll(tokenId, options);\n    }\n    if (erc721) {\n      return erc721.claimConditions.getAll(options);\n    }\n    if (erc20) {\n      return erc20.claimConditions.getAll(options);\n    }\n    throw new Error(\"Contract must be ERC721, ERC1155 or ERC20\");\n  }, {\n    // Checks that happen here:\n    // 1. if the contract is based on ERC1155 contract => tokenId cannot be `undefined`\n    // 2. if the contract is NOT based on ERC1155 => we have to have either an ERC721 or ERC20 contract\n    enabled: erc1155 ? tokenId !== undefined : !!erc721 || !!erc20\n  });\n}\n\n/**\n * Get the reasons why a specific wallet can't claim\n *\n * @example\n * ```javascript\n * const { data: claimIneligibilityReasons, isLoading, error } = useClaimIneligibilityReasons(contract, { walletAddress: \"{{wallet_address}}\" });\n * ```\n *\n * @param contract - an instance of a contract that extends the  ERC20, ERC721 or ERC1155 spec and implements the `claimConditions` extension.\n * @param eligibilityParams - the parameters for the eligibility check, see: {@link ClaimIneligibilityParams}\n * @param tokenId - the id of the token to fetch the claim conditions for (if the contract is an ERC1155 contract)\n * @returns a response object with the reasons for the claim ineligibility\n * @twfeature ERC20ClaimPhasesV2 | ERC20ClaimPhasesV1 | ERC20ClaimConditionsV2 | ERC20ClaimConditionsV1 | ERC721ClaimPhasesV2 | ERC721ClaimPhasesV1 | ERC721ClaimConditionsV2 | ERC721ClaimConditionsV1 | ERC1155ClaimPhasesV2 | ERC1155ClaimPhasesV1 | ERC1155ClaimConditionsV2 | ERC1155ClaimConditionsV1\n * @see {@link https://portal.thirdweb.com/react/react.useclaimineligibilityreasons?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useClaimIneligibilityReasons(contract, params, tokenId) {\n  const contractAddress = contract?.getAddress();\n  const {\n    erc1155,\n    erc721,\n    erc20\n  } = getErcs(contract);\n  return useQueryWithNetwork(cacheKeys.extensions.claimConditions.getClaimIneligibilityReasons(contractAddress, params, tokenId), () => {\n    if (erc1155) {\n      requiredParamInvariant(tokenId, \"tokenId is required for ERC1155 claim ineligibility reasons\");\n      return erc1155.claimConditions.getClaimIneligibilityReasons(tokenId, params.quantity, params.walletAddress);\n    }\n    if (erc721) {\n      return erc721.claimConditions.getClaimIneligibilityReasons(params.quantity, params.walletAddress);\n    }\n    if (erc20) {\n      return erc20.claimConditions.getClaimIneligibilityReasons(params.quantity, params.walletAddress);\n    }\n    throw new Error(\"Contract must be ERC721, ERC1155 or ERC20\");\n  }, {\n    // Checks that happen here:\n    // 1. if the contract is based on ERC1155 contract => tokenId cannot be `undefined`\n    // 2. if the contract is NOT based on ERC1155 => we have to have either an ERC721 or ERC20 contract\n    // 3. has a params object been passed?\n    // 4. does params have an address in it?\n    enabled: (erc1155 ? tokenId !== undefined : !!erc721 || !!erc20) && !!params && !!params.walletAddress\n  });\n}\n\n/**\n * Get the active claim condition for a specific wallet\n *\n * @example\n * ```javascript\n * const { data: activeClaimConditionForWallet, isLoading, error } = useActiveClaimConditionForWallet(contract, \"{{wallet_address}}\");\n * ```\n *\n * @param contract - an instance of a contract that extends the  ERC20, ERC721 or ERC1155 spec and implements the `claimConditions` extension.\n * @param walletAddress - the wallet address to check the active claim condition for\n * @param tokenId - the id of the token to fetch the claim conditions for (if the contract is an ERC1155 contract)\n * @returns the active claim conditon for the wallet address or null if there is no active claim condition\n * @twfeature ERC20ClaimPhasesV2 | ERC20ClaimPhasesV1 | ERC20ClaimConditionsV2 | ERC20ClaimConditionsV1 | ERC721ClaimPhasesV2 | ERC721ClaimPhasesV1 | ERC721ClaimConditionsV2 | ERC721ClaimConditionsV1 | ERC1155ClaimPhasesV2 | ERC1155ClaimPhasesV1 | ERC1155ClaimConditionsV2 | ERC1155ClaimConditionsV1\n * @see {@link https://portal.thirdweb.com/react/react.useactiveclaimconditionforwallet?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useActiveClaimConditionForWallet(contract, walletAddress, tokenId) {\n  const sdk = useSDK();\n  const contractAddress = contract?.getAddress();\n  const {\n    erc1155,\n    erc721,\n    erc20\n  } = getErcs(contract);\n  return useQueryWithNetwork(cacheKeys.extensions.claimConditions.useActiveClaimConditionForWallet(contractAddress, walletAddress || \"_NO_WALLET_\", tokenId), async () => {\n    // if we do not have a walletAddress just do the same logic as basic useClaimCondition\n    if (!walletAddress) {\n      if (erc1155) {\n        requiredParamInvariant(tokenId, \"tokenId is required for ERC1155 claim conditions\");\n        return erc1155.claimConditions.getActive(tokenId);\n      }\n      if (erc721) {\n        return erc721.claimConditions.getActive();\n      }\n      if (erc20) {\n        return erc20.claimConditions.getActive();\n      }\n      throw new Error(\"Contract must be ERC721, ERC1155 or ERC20\");\n    }\n    invariant(sdk, \"sdk is required\");\n    let activeGeneralClaimCondition = null;\n    let claimerProofForWallet = null;\n    if (erc1155) {\n      requiredParamInvariant(tokenId, \"tokenId is required for ERC1155\");\n      const [cc, cp] = await Promise.all([erc1155.claimConditions.getActive(tokenId), erc1155.claimConditions.getClaimerProofs(tokenId, walletAddress)]);\n      activeGeneralClaimCondition = cc;\n      claimerProofForWallet = cp;\n    }\n    if (erc721) {\n      const [cc, cp] = await Promise.all([erc721.claimConditions.getActive(), erc721.claimConditions.getClaimerProofs(walletAddress)]);\n      activeGeneralClaimCondition = cc;\n      claimerProofForWallet = cp;\n    }\n    if (erc20) {\n      const [cc, cp] = await Promise.all([erc20.claimConditions.getActive(), erc20.claimConditions.getClaimerProofs(walletAddress)]);\n      activeGeneralClaimCondition = cc;\n      claimerProofForWallet = cp;\n    }\n    // if there is no active claim condition nothing matters, return null\n    if (!activeGeneralClaimCondition) {\n      return null;\n    }\n\n    // if there is no claimer proof then just fall back to the active general claim condition\n    if (!claimerProofForWallet) {\n      return activeGeneralClaimCondition;\n    }\n    const {\n      maxClaimable,\n      currencyAddress,\n      price\n    } = claimerProofForWallet;\n    const currencyWithOverride = currencyAddress || activeGeneralClaimCondition.currencyAddress;\n    const currencyMetadata = await fetchCurrencyMetadata(sdk.getProvider(), currencyWithOverride);\n    const normalizedPrize = price ? price === \"unlimited\" ? constants.MaxUint256 : utils.parseUnits(price, currencyMetadata.decimals) : null;\n    const priceWithOverride = normalizedPrize || activeGeneralClaimCondition.price;\n    const maxClaimableWithOverride = maxClaimable || activeGeneralClaimCondition.maxClaimablePerWallet;\n    const currencyValueWithOverride = await fetchCurrencyValue(sdk.getProvider(), currencyWithOverride, priceWithOverride);\n    return {\n      // inherit the entire claim condition\n      ...activeGeneralClaimCondition,\n      // overwrite all keys that could be changed based on overwrites\n      maxClaimablePerWallet: maxClaimableWithOverride,\n      price: priceWithOverride,\n      currency: currencyWithOverride,\n      currencyAddress: currencyWithOverride,\n      currencyMetadata: currencyValueWithOverride\n    };\n  }, {\n    // Checks that happen here:\n    // 1. if the contract is based on ERC1155 contract => tokenId cannot be `undefined`\n    // 2. if the contract is NOT based on ERC1155 => we have to have either an ERC721 or ERC20 contract\n    enabled: erc1155 ? tokenId !== undefined : !!erc721 || !!erc20\n  });\n}\n\n/** **********************/\n/**     WRITE HOOKS     **/\n/** **********************/\n\n/**\n * Set claim conditions\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const { contract } = useContract(\"{{contract_address}}\");\n *   const {\n *     mutate: setClaimConditions,\n *     isLoading,\n *     error,\n *   } = useSetClaimConditions(contract);\n *\n *   if (error) {\n *     console.error(\"failed to set claim conditions\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={() => setClaimConditions({ phases: [{ price: 2, maxClaimableSupply: 100 }] })}\n *     >\n *       Set Claim Conditions!\n *     </button>\n *   );\n * };\n * ```\n *\n * @param contract - an instance of a {@link DropContract}\n * @returns a mutation object that can be used to set claim conditions\n * @twfeature ERC20ClaimPhasesV2 | ERC20ClaimPhasesV1 | ERC20ClaimConditionsV2 | ERC20ClaimConditionsV1 | ERC721ClaimPhasesV2 | ERC721ClaimPhasesV1 | ERC721ClaimConditionsV2 | ERC721ClaimConditionsV1 | ERC1155ClaimPhasesV2 | ERC1155ClaimPhasesV1 | ERC1155ClaimConditionsV2 | ERC1155ClaimConditionsV1\n * @see {@link https://portal.thirdweb.com/react/react.usesetclaimconditions?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useSetClaimConditions(contract, tokenId) {\n  const activeChainId = useSDKChainId();\n  const contractAddress = contract?.getAddress();\n  const queryClient = useQueryClient();\n  const {\n    erc1155,\n    erc721,\n    erc20\n  } = getErcs(contract);\n  return useMutation(async data => {\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    const {\n      phases,\n      reset = false\n    } = data;\n    invariant(phases, 'No \"phases\" provided');\n    if (erc1155) {\n      requiredParamInvariant(tokenId, \"tokenId is required for ERC1155 claim conditions\");\n      return erc1155.claimConditions.set(tokenId, phases, reset);\n    }\n    if (erc721) {\n      return erc721.claimConditions.set(phases, reset);\n    }\n    if (erc20) {\n      return erc20.claimConditions.set(phases, reset);\n    }\n    throw new Error(\"Contract must be ERC721, ERC1155 or ERC20\");\n  }, {\n    onSettled: () => {\n      invalidateContractAndBalances(queryClient, contractAddress, activeChainId);\n    }\n  });\n}\n\n/**\n * Reset claim conditions\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const { contract } = useContract(\"{{contract_address}}\");\n *   const {\n *     mutate: resetClaimConditions,\n *     isLoading,\n *     error,\n *   } = useResetClaimConditions(contract);\n *\n *   if (error) {\n *     console.error(\"failed to reset claim conditions\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={resetClaimConditions}\n *     >\n *       Reset Claim Conditions\n *     </button>\n *   );\n * };\n * ```\n *\n * @param contract - an instance of a {@link DropContract}\n * @returns a mutation object that can be used to reset claim conditions\n * @twfeature ERC20ClaimPhasesV2 | ERC20ClaimPhasesV1 | ERC20ClaimConditionsV2 | ERC20ClaimConditionsV1 | ERC721ClaimPhasesV2 | ERC721ClaimPhasesV1 | ERC721ClaimConditionsV2 | ERC721ClaimConditionsV1 | ERC1155ClaimPhasesV2 | ERC1155ClaimPhasesV1 | ERC1155ClaimConditionsV2 | ERC1155ClaimConditionsV1\n * @beta\n */\nfunction useResetClaimConditions(contract, tokenId) {\n  const activeChainId = useSDKChainId();\n  const contractAddress = contract?.getAddress();\n  const queryClient = useQueryClient();\n  const {\n    erc1155,\n    erc721,\n    erc20\n  } = getErcs(contract);\n  return useMutation(async () => {\n    const cleanConditions = async conditions => {\n      return conditions.map(c => ({\n        ...c,\n        price: c.currencyMetadata.displayValue\n      }));\n    };\n    if (erc1155) {\n      requiredParamInvariant(tokenId, \"tokenId is required for ERC1155 claim conditions\");\n      const claimConditions = await erc1155.claimConditions.getAll(tokenId, {\n        withAllowList: true\n      });\n      return erc1155.claimConditions.set(tokenId, await cleanConditions(claimConditions || []), true);\n    }\n    if (erc721) {\n      const claimConditions = await erc721.claimConditions.getAll({\n        withAllowList: true\n      });\n      return await erc721.claimConditions.set(await cleanConditions(claimConditions || []), true);\n    }\n    if (erc20) {\n      const claimConditions = await erc20.claimConditions.getAll({\n        withAllowList: true\n      });\n      return await erc20.claimConditions.set(await cleanConditions(claimConditions || []), true);\n    }\n    throw new Error(\"Contract must be ERC721, ERC1155 or ERC20\");\n  }, {\n    onSettled: () => {\n      invalidateContractAndBalances(queryClient, contractAddress, activeChainId);\n    }\n  });\n}\n\n// primary sales\n\n/**\n * Get the primary sale recipient\n *\n * @example\n * ```jsx\n * const { data: primarySaleRecipient, isLoading, error } = usePrimarySalesRecipient(contract);\n * ```\n *\n * Use this to get the primary sales recipient of your {@link SmartContract}\n * @param contract - an instance of a {@link SmartContract}\n * @returns the wallet address of the primary sales recipient\n * @twfeature PrimarySale\n * @see {@link https://portal.thirdweb.com/react/react.useprimarysalerecipient?utm_source=sdk | Documentation}\n * @beta\n */\nfunction usePrimarySaleRecipient(contract) {\n  const contractAddress = contract?.getAddress();\n  return useQueryWithNetwork(cacheKeys.extensions.sales.getRecipient(contractAddress), () => {\n    requiredParamInvariant(contract, \"No contract provided\");\n    invariant(\"sales\" in contract && contract.sales, \"Contract does not support primarySale\");\n    return contract.sales.getRecipient();\n  }, {\n    enabled: !!contract || !!contractAddress\n  });\n}\n\n/**\n * Set the primary sale recipient\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const { contract } = useContract(\"{{contract_address}}\");\n *   const {\n *     mutate: updatePrimarySalesRecipient,\n *     isLoading,\n *     error,\n *   } = useUpdatePrimarySaleRecipient(contract);\n *\n *   if (error) {\n *     console.error(\"failed to update recipient\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={() => updatePrimarySalesRecipient({ newRecipient: \"{{wallet_address}}\" })}\n *     >\n *       Update Recipient\n *     </button>\n *   );\n * };\n * ```\n *\n * @param contract - an instance of a {@link SmartContract}\n * @returns a mutation object that can be used to update the primary sales recipient\n * @twfeature PrimarySale\n * @see {@link https://portal.thirdweb.com/react/react.useupdateprimarysalerecipient?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useUpdatePrimarySaleRecipient(contract) {\n  const queryClient = useQueryClient();\n  const contractAddress = contract?.getAddress();\n  const activeChainId = useSDKChainId();\n  return useMutation(newRecipient => {\n    requiredParamInvariant(contract, \"No contract provided\");\n    invariant(\"sales\" in contract && contract.sales, \"Contract does not support primarySale\");\n    return contract.sales.setRecipient(newRecipient);\n  }, {\n    onSettled: () => invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n  });\n}\n\n// end primary sales\n\n// royalties\n\n/**\n * Get the royalty recipient and fee\n *\n * @example\n * ```jsx\n * const { data: settings, isLoading, error } = useRoyaltySettings(contract);\n * ```\n *\n * @param contract - an instance of a {@link SmartContract}\n * @returns an object containing recipient address and the royalty basis points\n * @twfeature Royalty\n * @see {@link https://portal.thirdweb.com/react/react.useroyaltysettings?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useRoyaltySettings(contract) {\n  const contractAddress = contract?.getAddress();\n  return useQueryWithNetwork(cacheKeys.extensions.royalties.getDefaultRoyaltyInfo(contractAddress), () => {\n    requiredParamInvariant(contract, \"No contract provided\");\n    invariant(\"royalties\" in contract && contract.royalties, \"Contract does not support royalties\");\n    return contract.royalties.getDefaultRoyaltyInfo();\n  }, {\n    enabled: !!contract || !!contractAddress\n  });\n}\n\n/**\n * Set the royalty recipient and fee\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const { contract } = useContract(\"{{contract_address}}\");\n *   const {\n *     mutate: updateRoyaltySettings,\n *     isLoading,\n *     error,\n *   } = useUpdateRoyaltySettings(contract);\n *\n *   if (error) {\n *     console.error(\"failed to update royalty settings\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={() => updateRoyaltySettings({ updatePayload: { fee_recipient: \"{{wallet_address}}\", seller_fee_basis_points: 5_00 } })}\n *     >\n *       Update Royalty Settings\n *     </button>\n *   );\n * };\n * ```\n *\n * @param contract - an instance of a {@link SmartContract}\n * @returns a mutation object that can be used to update the royalty settings\n * @twfeature Royalty\n * @see {@link https://portal.thirdweb.com/react/react.useupdateroyaltysettings?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useUpdateRoyaltySettings(contract) {\n  const queryClient = useQueryClient();\n  const contractAddress = contract?.getAddress();\n  const activeChainId = useSDKChainId();\n  return useMutation(updatePayload => {\n    requiredParamInvariant(contract, \"No contract provided\");\n    invariant(\"royalties\" in contract && contract.royalties, \"Contract does not support royalties\");\n    return contract.royalties.setDefaultRoyaltyInfo(updatePayload);\n  }, {\n    onSettled: () => invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n  });\n}\n\n// end royalties\n\n// platformFees\n\n/**\n * Get the platform fee recipient and basis points\n *\n * @example\n * ```jsx\n * const { data: platformFees, isLoading, error } = usePlatformFees(contract);\n * ```\n *\n * @param contract - an instance of a {@link SmartContract}\n * @returns an object containing the platform fee basis points and the fee recipient address\n * @twfeature PlatformFee\n * @see {@link https://portal.thirdweb.com/react/react.useplatformfees?utm_source=sdk | Documentation}\n * @beta\n */\nfunction usePlatformFees(contract) {\n  const contractAddress = contract?.getAddress();\n  return useQueryWithNetwork(cacheKeys.extensions.platformFees.get(contractAddress), () => {\n    requiredParamInvariant(contract, \"No contract provided\");\n    invariant(\"platformFees\" in contract && contract.platformFees, \"Contract does not support platformFees\");\n    return contract.platformFees.get();\n  }, {\n    enabled: !!contract || !!contractAddress\n  });\n}\n\n/**\n * Set the platform fee recipient and basis points\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const { contract } = useContract(\"{{contract_address}}\");\n *   const {\n *     mutate: updatePlatformFees,\n *     isLoading,\n *     error,\n *   } = useUpdatePlatformFees(contract);\n *\n *   if (error) {\n *     console.error(\"failed to update platform fees\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={() => updatePlatformFees({ updatePayload: { fee_recipient: \"{{wallet_address}}\", platform_fee_basis_points: 5_00 } })}\n *     >\n *       Update Platform fees\n *     </button>\n *   );\n * };\n * ```\n * @param contract - an instance of a {@link SmartContract}\n * @returns a mutation object that can be used to update the platform fees settings\n * @twfeature PlatformFee\n * @see {@link https://portal.thirdweb.com/react/react.useupdateplatformfees?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useUpdatePlatformFees(contract) {\n  const queryClient = useQueryClient();\n  const contractAddress = contract?.getAddress();\n  const activeChainId = useSDKChainId();\n  return useMutation(updatePayload => {\n    requiredParamInvariant(contract, \"No contract provided\");\n    invariant(\"platformFees\" in contract && contract.platformFees, \"Contract does not support platformFees\");\n    return contract.platformFees.set(updatePayload);\n  }, {\n    onSettled: () => invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n  });\n}\n\n// end platformFees\n\n// metadata\n\n/**\n * Get the metadata of this contract\n *\n * @example\n * ```jsx\n * const { data: metadata, isLoading, error } = useMetadata(contract);\n * ```\n *\n * @param contract - an instance of a {@link SmartContract}\n * @returns a {@link CustomContractMetadata} object containing the metadata\n * @see {@link https://portal.thirdweb.com/react/react.usemetadata?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useMetadata(contract\n// TODO figure out UseQueryResult type better\n) {\n  const contractAddress = contract?.getAddress();\n  return useQueryWithNetwork(cacheKeys.extensions.metadata.get(contractAddress), () => {\n    requiredParamInvariant(contract, \"No contract provided\");\n    invariant(\"metadata\" in contract && contract.metadata, \"Contract does not support metadata\");\n    return contract.metadata.get();\n  }, {\n    enabled: !!contract || !!contractAddress\n  });\n}\n\n/**\n * Set the metadata of this contract\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const { contract } = useContract(\"{{contract_address}}\");\n *   const {\n *     mutate: updateMetadata,\n *     isLoading,\n *     error,\n *   } = useUpdateMetadata(contract);\n *\n *   if (error) {\n *     console.error(\"failed to update metadata\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={() => updateMetadata({\n *        name: \"My Contract\",\n *        description: \"This is my contract\"\n *       })}\n *     >\n *       Update Contract Metadata\n *     </button>\n *   );\n * };\n * ```\n * @param contract - an instance of a {@link SmartContract}\n * @returns a mutation object that can be used to update the metadata\n * @see {@link https://portal.thirdweb.com/react/react.useupdatemetadata?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useUpdateMetadata(contract\n// TODO figure out UseMutationResult type better\n) {\n  const queryClient = useQueryClient();\n  const contractAddress = contract?.getAddress();\n  const activeChainId = useSDKChainId();\n  return useMutation(updatePayload => {\n    requiredParamInvariant(contract, \"No contract provided\");\n    invariant(\"metadata\" in contract && contract.metadata, \"Contract does not support metadata\");\n    return contract.metadata.update(updatePayload);\n  }, {\n    onSettled: () => invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n  });\n}\n\n// end metadata\n\n// contract type\nasync function fetchContractType(contractAddress, sdk) {\n  if (!contractAddress || !sdk) {\n    return null;\n  }\n  try {\n    return await sdk.resolveContractType(contractAddress);\n  } catch (err) {\n    console.error(\"failed to resolve contract type\", err);\n    // this error can happen if the contract is a custom contract -> assume \"custom\"\n    return \"custom\";\n  }\n}\nfunction useContractType(contractAddress) {\n  const sdk = useSDK();\n  return useQueryWithNetwork(cacheKeys.contract.type(contractAddress), () => fetchContractType(contractAddress, sdk),\n  // is immutable, so infinite stale time\n  {\n    cacheTime: Infinity,\n    staleTime: Infinity,\n    enabled: !!contractAddress && !!sdk\n  });\n}\nconst contractType = {\n  cacheKey: (contractAddress, chainId) => createCacheKeyWithNetwork(cacheKeys.contract.type(contractAddress), chainId),\n  useQuery: useContractType,\n  fetchQuery: fetchContractType\n};\n\n// end contract type\n\n// contract compiler metadata\nfunction fetchCompilerMetadata(contractAddress, sdk) {\n  if (!contractAddress || !sdk) {\n    return null;\n  }\n  try {\n    return sdk.getPublisher().fetchCompilerMetadataFromAddress(contractAddress);\n  } catch (err) {\n    // if we fail to get contract metadata just return null;\n    return null;\n  }\n}\nfunction useCompilerMetadata(contractAddress) {\n  const sdk = useSDK();\n  return useQueryWithNetwork(cacheKeys.contract.compilerMetadata(contractAddress), () => fetchCompilerMetadata(contractAddress, sdk),\n  // is immutable, so infinite stale time\n  {\n    cacheTime: Infinity,\n    staleTime: Infinity,\n    enabled: !!contractAddress && !!sdk\n  });\n}\nconst compilerMetadata = {\n  cacheKey: (contractAddress, chainId) => createCacheKeyWithNetwork(cacheKeys.contract.compilerMetadata(contractAddress), chainId),\n  useQuery: useCompilerMetadata,\n  fetchQuery: fetchCompilerMetadata\n};\n\n// end compiler metadata\n\n// useContract\n/**\n * Use this resolve a contract address to a smart contract instance.\n *\n * @example\n * ```javascript\n * const { contract, isLoading, error } = useContract(\"{{contract_address}}\");\n * ```\n *\n * @param contractAddress - the address of the deployed contract\n * @returns a response object that includes the contract once it is resolved\n * @see {@link https://portal.thirdweb.com/react/react.usecontract?utm_source=sdk | Documentation}\n * @public\n */\n/**\n * Use this resolve a contract address to a smart contract instance.\n *\n * @example\n * ```javascript\n * const { contract, isLoading, error } = useContract(\"{{contract_address}}\", \"nft-drop\");\n * ```\n *\n * @param contractAddress - the address of the deployed contract\n * @param _contractType - the type of the contract\n * @returns a response object that includes the contract once it is resolved\n * @see {@link https://portal.thirdweb.com/react/react.usecontract?utm_source=sdk | Documentation}\n * @public\n */\n/**\n * Use this resolve a contract address to a smart contract instance.\n *\n * @example\n * ```javascript\n * const { contract, isLoading, error } = useContract(\"{{contract_address}}\", ABI);\n * ```\n *\n * @param contractAddress - the address of the deployed contract\n * @param _abi - the ABI of the contract to use\n * @returns a response object that includes the contract once it is resolved\n * @see {@link https://portal.thirdweb.com/react/react.usecontract?utm_source=sdk | Documentation}\n * @public\n */\nfunction useContract(contractAddress, contractTypeOrABI) {\n  const sdk = useSDK();\n  const queryClient = useQueryClient();\n  const activeChainId = useSDKChainId();\n  const wallet = useAddress();\n  const walletChainId = useChainId();\n\n  // it's there because we put it there.\n  const sdkTimestamp = sdk?._constructedAt;\n  const contractQuery = useQueryWithNetwork(\n  // need to add the wallet and walletChainId into the query key so this gets refreshed when the wallet / chain changes!\n  neverPersist([\"contract-instance\", contractAddress, {\n    wallet,\n    walletChainId,\n    sdkTimestamp\n  }]), async () => {\n    requiredParamInvariant(contractAddress, \"contract address is required\");\n    invariant(sdk, \"SDK not initialized\");\n    invariant(activeChainId, \"active chain id is required\");\n\n    // if we don't have a contractType or ABI then we will have to resolve it regardless\n    // we also handle it being \"custom\" just in case...\n    if (!contractTypeOrABI || contractTypeOrABI === \"custom\") {\n      // First check local ABI cache\n      const cachedAbi = getCachedAbiForContract(contractAddress);\n      if (cachedAbi) {\n        return sdk.getContract(contractAddress, cachedAbi);\n      }\n\n      // we just resolve here (sdk does this internally anyway)\n      const resolvedContractType = await queryClient.fetchQuery(contractType.cacheKey(contractAddress, activeChainId), () => contractType.fetchQuery(contractAddress, sdk), {\n        cacheTime: Infinity,\n        staleTime: Infinity\n      });\n      let abi;\n      if (resolvedContractType === \"custom\") {\n        abi = (await queryClient.fetchQuery(compilerMetadata.cacheKey(contractAddress, activeChainId), () => compilerMetadata.fetchQuery(contractAddress, sdk), {\n          cacheTime: Infinity,\n          staleTime: Infinity,\n          retry: 0\n        }))?.abi;\n      }\n      invariant(resolvedContractType, \"failed to resolve contract type\");\n      // just let the sdk handle the rest\n      // if we have resolved an ABI for a custom contract, use that otherwise use contract type\n      return sdk.getContract(contractAddress, abi || resolvedContractType);\n    }\n    // every other case can just be handled by the sdk directly\n    return sdk.getContract(contractAddress, contractTypeOrABI);\n  }, {\n    // keep the previous value around while we fetch the new one\n    // this is important because otherwise it can lead to flickering (because we need to re-fetch the contract when sdk things change)\n    keepPreviousData: true,\n    // is immutable, so infinite cache & stale time (for a given key)\n    cacheTime: Infinity,\n    staleTime: Infinity,\n    enabled: !!contractAddress && !!sdk && !!activeChainId,\n    // never retry\n    retry: 0\n  });\n\n  // const previousCountract = usePrevious(contractQuery.data);\n\n  return {\n    ...contractQuery,\n    data: contractQuery.data,\n    contract: contractQuery.data\n  };\n}\n\n/**\n * Get the metadata of this contract\n *\n * @example\n * ```javascript\n * const { data: contractMetadata, isLoading } = useContractMetadata(contract);\n * ```\n *\n * @param contract - the {@link ValidContractInstance} instance of the contract to get the metadata for\n * @returns a response object that includes the contract metadata of the deployed contract\n * @twfeature ContractMetadata\n * @beta\n */\nfunction useContractMetadata(contract) {\n  return useQueryWithNetwork(cacheKeys.contract.metadata(contract?.getAddress()), async () => {\n    requiredParamInvariant(contract, \"contract is required\");\n    return await contract.metadata.get(); // FIXME types\n  }, {\n    enabled: !!contract\n  });\n}\n\n/**\n * Update the metadata of this contract\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const { contract } = useContract(\"{{contract_address}}\");\n *   const {\n *     mutate: updateContractMetadata,\n *     isLoading,\n *     error,\n *   } = useContractMetadataUpdate(contract);\n *\n *   if (error) {\n *     console.error(\"failed to update contract metadata\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={() => updateContractMetadata({ name: \"New name\", description: \"New description\" })}\n *     >\n *       Update contract metadata\n *     </button>\n *   );\n * };\n * ```\n *\n * @param contract - the {@link ValidContractInstance} instance of the contract to get the metadata for\n * @returns a response object that includes the contract metadata of the deployed contract\n * @twfeature ContractMetadata\n * @beta\n */\nfunction useContractMetadataUpdate(contract) {\n  const activeChainId = useSDKChainId();\n  const contractAddress = contract?.getAddress();\n  const queryClient = useQueryClient();\n  return useMutation(async metadata => {\n    requiredParamInvariant(contract, \"contract must be defined\");\n    return contract.metadata.update(metadata);\n  }, {\n    onSettled: () => queryClient.invalidateQueries(createCacheKeyWithNetwork(createContractCacheKey(contractAddress), activeChainId))\n  });\n}\n\n/**\n * CONTRACT EVENTS\n */\n\n/**\n * Get or subscribe to contract events\n *\n * @example\n * ```javascript\n * const { data: contractEvents, isLoading } = useContractEvents(contract);\n * ```\n *\n * @param contract - the {@link ValidContractInstance} instance of the contract to listen to events for\n * @param eventName - the name of the event to query for (omit this or pass `undefined` to query for all events)\n * @param options - options includes the filters ({@link QueryAllEvents}) for the query as well as if you want to subscribe to real-time updates (default: true)\n * @returns a response object that includes the contract events\n * @see {@link https://portal.thirdweb.com/react/react.usecontractevents?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useContractEvents(contract, eventName) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    subscribe: true\n  };\n  const contractAddress = contract?.getAddress();\n  const queryClient = useQueryClient();\n  const activeChainId = useSDKChainId();\n  const cacheKey = useMemo(() => createCacheKeyWithNetwork(eventName ? cacheKeys.contract.events.getEvents(contractAddress, eventName) : cacheKeys.contract.events.getAllEvents(contractAddress), activeChainId), [activeChainId, contractAddress, eventName]);\n  useEffect(() => {\n    // if we're not subscribing or query is not enabled yet we can early exit\n    if (!options.subscribe || !contract || !contract) {\n      return;\n    }\n    const cleanupListener = contract.events.listenToAllEvents(contractEvent => {\n      // if we have a specific event name we are looking for we can early exist if it doesn't match\n      if (eventName && eventName !== contractEvent.eventName) {\n        return;\n      }\n      // insert new event to the front of the array (no duplicates, though)\n      queryClient.setQueryData(cacheKey, oldData => {\n        if (!oldData) {\n          return [contractEvent];\n        }\n        const eventIsNotAlreadyInEventsList = oldData.findIndex(e => e.transaction.transactionHash === contractEvent.transaction.transactionHash && e.transaction.logIndex === contractEvent.transaction.logIndex) === -1;\n        if (eventIsNotAlreadyInEventsList) {\n          return [contractEvent, ...oldData];\n        }\n        return oldData;\n      });\n    });\n    // cleanup listener on unmount\n    return cleanupListener;\n  }, [options.subscribe, cacheKey, contract, queryClient, eventName]);\n  return useQuery(cacheKey, () => {\n    requiredParamInvariant(contract, \"contract must be defined\");\n    if (eventName) {\n      return contract.events.getEvents(eventName, options.queryFilter);\n    }\n    return contract.events.getAllEvents(options.queryFilter);\n  }, {\n    enabled: !!contract,\n    // we do not need to re-fetch if we're subscribing\n    refetchOnWindowFocus: !options.subscribe,\n    refetchOnMount: true,\n    refetchOnReconnect: true\n  });\n}\n\n/**\n * Get data from a contract read-function call\n *\n * @example\n * ```javascript\n * const { contract } = useContract(\"{{contract_address}}\");\n * const { data, isLoading, error } = useContractRead(contract, \"functionName\", ...args);\n *```\n *\n * @param contract - the contract instance of the contract to call a function on\n * @param functionName - the name of the function to call\n * @param args - The arguments to pass to the function (if any), with optional call arguments as the last parameter\n * @returns a response object that includes the data returned by the function call\n * @see {@link https://portal.thirdweb.com/react/react.usecontractread?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useContractRead(contract, functionName, args, overrides) {\n  const contractAddress = contract?.getAddress();\n  return useQueryWithNetwork(cacheKeys.contract.call(contractAddress, functionName, args, overrides), () => {\n    requiredParamInvariant(contract, \"contract must be defined\");\n    requiredParamInvariant(functionName, \"function name must be provided\");\n    return contract.call(functionName, args, overrides);\n  }, {\n    enabled: !!contract && !!functionName\n  });\n}\n\n/**\n * Mke a write call to your contract\n *\n * @example\n * ```javascript\n * const { contract } = useContract(\"{{contract_address}}\");\n * const { mutate: myFunction, isLoading, error } = useContractWrite(contract, \"myFunction\");\n *\n * // the function can be called as follows:\n * // myFunction([\"param 1\", \"param 2\", ...])\n *```\n *\n * @param contract - the contract instance of the contract to call a function on\n * @param functionName - the name of the function to call\n * @returns a response object that includes the write function to call\n * @see {@link https://portal.thirdweb.com/react/react.usecontractwrite?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useContractWrite(contract, functionName) {\n  const activeChainId = useSDKChainId();\n  const contractAddress = contract?.getAddress();\n  const queryClient = useQueryClient();\n  return useMutation(async _ref => {\n    let {\n      args,\n      overrides\n    } = _ref;\n    requiredParamInvariant(contract, \"contract must be defined\");\n    requiredParamInvariant(functionName, \"function name must be provided\");\n    return contract.call(functionName, args, overrides);\n  }, {\n    onSettled: () => queryClient.invalidateQueries(createCacheKeyWithNetwork(createContractCacheKey(contractAddress), activeChainId))\n  });\n}\n\n/** **********************/\n/**       READ HOOKS    **/\n/** **********************/\n\n/**\n * Get all unclaimed NFTs\n *\n * @example\n * ```javascript\n * const { data: unclaimedNfts, isLoading, error } = useUnclaimedNFTs(contract, { start: 0, count: 100 });\n * ```\n *\n * @param contract - an instance of a contract that extends the ERC721 spec (NFT drop, Signature Drop, or any custom contract that extends the ERC721 spec)\n * @param queryParams - query params to pass to the query for the sake of pagination\n * @returns a response object that includes an array of NFTs that are unclaimed\n * @twfeature ERC721LazyMintable\n * @see {@link https://portal.thirdweb.com/react/react.useunclaimednfts?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useUnclaimedNFTs(contract, queryParams) {\n  const contractAddress = contract?.getAddress();\n  return useQueryWithNetwork(cacheKeys.contract.nft.drop.getAllUnclaimed(contractAddress, queryParams), () => {\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    // TODO make this work for custom contracts (needs ABI change)\n    invariant(contract.getAllUnclaimed, \"Contract instance does not support getAllUnclaimed\");\n    return contract.getAllUnclaimed(queryParams);\n  }, {\n    enabled: !!contract\n  });\n}\n\n/**\n * Get all claimed NFTs\n *\n * @remarks Equivalent to using {@link useNFTs}.\n *\n * @example\n * ```javascript\n * const { data: claimedNFTs, isLoading, error } = useClaimedNFTs(contract, { start: 0, count: 100 });\n * ```\n *\n * @param contract - an instance of a contract that extends the ERC721 spec (NFT drop, Signature Drop, or any custom contract that extends the ERC721 spec)\n * @param queryParams - query params to pass to the query for the sake of pagination\n * @returns a response object that includes an array of NFTs that are claimed\n * @twfeature ERC721LazyMintable\n * @see {@link https://portal.thirdweb.com/react/react.useclaimednfts?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useClaimedNFTs(contract, queryParams) {\n  const contractAddress = contract?.getAddress();\n  return useQueryWithNetwork(cacheKeys.contract.nft.drop.getAllClaimed(contractAddress, queryParams), () => {\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    // TODO make this work for custom contracts (needs ABI change)\n    invariant(contract.getAllClaimed, \"Contract instance does not support getAllClaimed\");\n    return contract.getAllClaimed(queryParams);\n  }, {\n    enabled: !!contract\n  });\n}\n\n/**\n *\n * @param contract - an instance of a contract that extends the ERC721 spec (NFT drop, Signature Drop, or any custom contract that extends the ERC721 spec)\n * @returns a response object that includes the number of NFTs that are unclaimed\n * @twfeature ERC721LazyMintable\n * @see {@link https://portal.thirdweb.com/react/react.useunclaimednftsupply?utm_source=sdk | Documentation}\n */\nfunction useUnclaimedNFTSupply(contract) {\n  const contractAddress = contract?.getAddress();\n  const {\n    erc721\n  } = getErcs(contract);\n  return useQueryWithNetwork(cacheKeys.contract.nft.drop.totalUnclaimedSupply(contractAddress), () => {\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    if (erc721) {\n      invariant(erc721, \"No ERC721 Contract instance provided\");\n      return erc721.totalUnclaimedSupply();\n    }\n    invariant(false, \"Contract is not an instance of ERC721\");\n  }, {\n    enabled: !!erc721\n  });\n}\n\n/**\n * Get the total number of claimed NFTs\n *\n * @param contract - an instance of a contract that extends the ERC721 spec (NFT drop, Signature Drop, or any custom contract that extends the ERC721 spec)\n * @returns a response object that includes the number of NFTs that are claimed\n * @twfeature ERC721LazyMintable\n * @see {@link https://portal.thirdweb.com/react/react.useclaimednftsupply?utm_source=sdk | Documentation}\n */\nfunction useClaimedNFTSupply(contract) {\n  const contractAddress = contract?.getAddress();\n  const {\n    erc721\n  } = getErcs(contract);\n  return useQueryWithNetwork(cacheKeys.contract.nft.drop.totalClaimedSupply(contractAddress), () => {\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    if (erc721) {\n      return erc721.totalClaimedSupply();\n    }\n    invariant(false, \"Contract is not an instance of ERC721\");\n  }, {\n    enabled: !!erc721\n  });\n}\n\n/**\n * Get all unrevealed batches\n *\n * @param contract - an instance of a {@link RevealableContract}\n * @returns a response object that gets the batches to still be revealed\n * @twfeature ERC721Revealable | ERC1155Revealable\n * @see {@link https://portal.thirdweb.com/react/react.usebatchestoreveal?utm_source=sdk | Documentation}\n */\nfunction useBatchesToReveal(contract) {\n  const contractAddress = contract?.getAddress();\n  const {\n    erc721,\n    erc1155\n  } = getErcs(contract);\n  return useQueryWithNetwork(cacheKeys.contract.nft.drop.revealer.getBatchesToReveal(contractAddress), () => {\n    if (erc721) {\n      return erc721.revealer.getBatchesToReveal();\n    }\n    if (erc1155) {\n      return erc1155.revealer.getBatchesToReveal();\n    }\n    invariant(false, \"Contract instance does not support getBatchesToReveal\");\n  }, {\n    enabled: !!erc721 || !!erc1155\n  });\n}\n\n/** **********************/\n/**     WRITE HOOKS     **/\n/** **********************/\n/**\n * Claim an NFT to a specific wallet\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const { contract } = useContract(\"{{contract_address}}\");\n *   const {\n *     mutate: claimNFT,\n *     isLoading,\n *     error,\n *   } = useClaimNFT(contract);\n *\n *   if (error) {\n *     console.error(\"failed to claim nft\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={() => claimNFT({ to: \"{{wallet_address}}\", quantity: 1 })}\n *     >\n *       Claim NFT!\n *     </button>\n *   );\n * };\n * ```\n *\n * @param contract - an instance of a {@link DropContract}\n * @returns a mutation object that can be used to claim a NFT to the wallet specificed in the params\n * @twfeature ERC721Claimable | ERC1155Claimable | ERC721ClaimPhasesV2 | ERC721ClaimPhasesV1 | ERC721ClaimConditionsV2 | ERC721ClaimConditionsV1 | ERC1155ClaimPhasesV2 | ERC1155ClaimPhasesV1 | ERC1155ClaimConditionsV2 | ERC1155ClaimConditionsV1\n * @see {@link https://portal.thirdweb.com/react/react.useclaimnft?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useClaimNFT(contract) {\n  const activeChainId = useSDKChainId();\n  const contractAddress = contract?.getAddress();\n  const queryClient = useQueryClient();\n  const {\n    erc721,\n    erc1155\n  } = getErcs(contract);\n  return useMutation(async data => {\n    requiredParamInvariant(contract, \"contract is undefined\");\n    if (erc1155) {\n      requiredParamInvariant(data.tokenId, \"tokenId not provided\");\n      if (!data.to) {\n        return await erc1155.claim(data.tokenId, data.quantity, data.options);\n      }\n      return await erc1155.claimTo(data.to, data.tokenId, data.quantity, data.options);\n    }\n    if (erc721) {\n      if (!data.to) {\n        return await erc721.claim(data.quantity, data.options);\n      }\n      return await erc721.claimTo(data.to, data.quantity, data.options);\n    }\n    invariant(false, \"contract is not an Erc721 or Erc1155\");\n  }, {\n    onSettled: () => invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n  });\n}\n\n/**\n * Lazy mint NFTs\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const { contract } = useContract(\"{{contract_address}}\");\n *   const {\n *     mutate: lazyMint,\n *     isLoading,\n *     error,\n *   } = useLazyMint(contract);\n *\n *   if (error) {\n *     console.error(\"failed to lazy mint NFT\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={() => lazyMint({ metadatas: [{ name: \"My NFT!\"}] })}\n *     >\n *       Lazy mint NFT!\n *     </button>\n *   );\n * };\n * ```\n *\n * @param contract - an instance of a {@link NFTContract} with the drop extension\n * @param onProgress - an optional callback that will be called with the progress of the upload\n * @returns a mutation object that can be used to lazy mint a batch of NFTs\n * @twfeature ERC721LazyMintable | ERC1155LazyMintable\n * @see {@link https://portal.thirdweb.com/react/react.uselazymint?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useLazyMint(contract, onProgress) {\n  const activeChainId = useSDKChainId();\n  const contractAddress = contract?.getAddress();\n  const queryClient = useQueryClient();\n  const {\n    erc721,\n    erc1155\n  } = getErcs(contract);\n  return useMutation(async data => {\n    requiredParamInvariant(contract, \"contract is undefined\");\n    let options;\n    if (onProgress) {\n      options = {\n        onProgress\n      };\n    }\n    if (erc721) {\n      return erc721.lazyMint(data.metadatas, options);\n    }\n    if (erc1155) {\n      return erc1155.lazyMint(data.metadatas, options);\n    }\n    invariant(false, \"contract is not an Erc721 or Erc1155\");\n  }, {\n    onSettled: () => invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n  });\n}\n\n/**\n * Lazy mint NFTs with delayed reveal\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const { contract } = useContract(\"{{contract_address}}\");\n *   const {\n *     mutate: delayedRevealLazyMint,\n *     isLoading,\n *     error,\n *   } = useDelayedRevealLazyMint(contract);\n *\n *   if (error) {\n *     console.error(\"failed to lazy mint NFT\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={() => delayedRevealLazyMint({ metadatas: [{ name: \"My NFT!\"}] })}\n *     >\n *       Delayed Reveal Lazy mint NFT!\n *     </button>\n *   );\n * };\n * ```\n *\n * @param contract - an instance of a {@link DropContract}\n * @param onProgress - an optional callback that will be called with the progress of the upload\n * @returns a mutation object that can be used to lazy mint a batch of NFTs\n * @twfeature ERC721Revealable | ERC1155Revealable\n * @see {@link https://portal.thirdweb.com/react/react.usedelayedreveallazymint?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useDelayedRevealLazyMint(contract, onProgress) {\n  const activeChainId = useSDKChainId();\n  const contractAddress = contract?.getAddress();\n  const queryClient = useQueryClient();\n  return useMutation(async data => {\n    requiredParamInvariant(contract, \"contract is undefined\");\n    let options;\n    if (onProgress) {\n      options = {\n        onProgress\n      };\n    }\n    const {\n      erc721,\n      erc1155\n    } = getErcs(contract);\n    if (erc721) {\n      return await erc721.revealer.createDelayedRevealBatch(data.placeholder, data.metadatas, data.password, options);\n    }\n    if (erc1155) {\n      return await erc1155.revealer.createDelayedRevealBatch(data.placeholder, data.metadatas, data.password, options);\n    }\n    invariant(false, \"contract is not an Erc721 or Erc1155\");\n  }, {\n    onSettled: () => invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n  });\n}\n\n/**\n * Reveal a batch of delayed reveal NFTs\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const { contract } = useContract(\"{{contract_address}}\");\n *   const {\n *     mutate: revealLazyMint,\n *     isLoading,\n *     error,\n *   } = useRevealLazyMint(contract);\n *\n *   if (error) {\n *     console.error(\"failed to reveal batch\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={() => revealLazyMint({ batchId: \"0\", password: \"my-password\" })}\n *     >\n *       Reveal batch!\n *     </button>\n *   );\n * };\n * ```\n *\n * @param contract - an instance of a {@link RevealableContract}\n * @returns a mutation object that can be used to reveal a batch of delayed reveal NFTs\n * @twfeature ERC721Revealable | ERC1155Revealable\n * @see {@link https://portal.thirdweb.com/react/react.usereveallazymint?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useRevealLazyMint(contract) {\n  const activeChainId = useSDKChainId();\n  const contractAddress = contract?.getAddress();\n  const queryClient = useQueryClient();\n  return useMutation(async data => {\n    requiredParamInvariant(contract, \"contract is undefined\");\n    const {\n      erc721,\n      erc1155\n    } = getErcs(contract);\n    if (erc721) {\n      return await erc721.revealer.reveal(data.batchId, data.password);\n    }\n    if (erc1155) {\n      return await erc1155.revealer.reveal(data.batchId, data.password);\n    }\n    invariant(false, \"contract is not an Erc721 or Erc1155\");\n  }, {\n    onSettled: () => invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n  });\n}\n\n/** **********************/\n/**     READ  HOOKS     **/\n/** **********************/\n\n/**\n * Get a listing\n *\n * @example\n * ```javascript\n * const listingId = 0; // the listing id to check\n * const { data: listing, isLoading, error } = useListing(contract, listingId);\n * ```\n *\n * @param contract - an instance of a marketplace contract\n * @param listingId - the listing id to check\n * @returns a response object that includes the desired listing\n * @see {@link https://portal.thirdweb.com/react/react.uselisting?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useListing(contract, listingId) {\n  const contractAddress = contract?.getAddress();\n  return useQueryWithNetwork(cacheKeys.contract.marketplace.getListing(contractAddress, listingId), () => {\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    requiredParamInvariant(listingId, \"No listing id provided\");\n    return contract.getListing(listingId);\n  }, {\n    enabled: !!contract,\n    keepPreviousData: true\n  });\n}\n\n/**\n * Get a direct listing\n *\n * @example\n * ```javascript\n * const listingId = 0; // the listing id to check\n * const { data: directListing, isLoading, error } = useListing(contract, listingId);\n * ```\n *\n * @param contract - an instance of a marketplace v3 contract\n * @param listingId - the listing id to check\n * @returns a response object that includes the desired direct listing\n * @twfeature DirectListings\n * @see {@link https://portal.thirdweb.com/react/react.usedirectlisting?utm_source=sdk | Documentation}\n */\nfunction useDirectListing(contract, listingId) {\n  const contractAddress = contract?.getAddress();\n  return useQueryWithNetwork(cacheKeys.contract.marketplace.directListings.getListing(contractAddress, listingId), () => {\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    requiredParamInvariant(listingId, \"No listing id provided\");\n    return contract.directListings.getListing(listingId);\n  }, {\n    enabled: !!contract,\n    keepPreviousData: true\n  });\n}\n\n/**\n * Get an english auction\n *\n * @example\n * ```javascript\n * const auctionId = 0; // the listing id to check\n * const { data: englishAuction, isLoading, error } = useEnglishAuction(contract, auctionId);\n * ```\n *\n * @param contract - an instance of a marketplace v3 contract\n * @param auctionId - the auction id to check\n * @returns a response object that includes the desired english auction\n * @twfeature EnglishAuctions\n * @see {@link https://portal.thirdweb.com/react/react.useenglishauctions?utm_source=sdk | Documentation}\n */\nfunction useEnglishAuction(contract, auctionId) {\n  const contractAddress = contract?.getAddress();\n  return useQueryWithNetwork(cacheKeys.contract.marketplace.englishAuctions.getAuction(contractAddress, auctionId), () => {\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    requiredParamInvariant(auctionId, \"No auction id provided\");\n    return contract.englishAuctions.getAuction(auctionId);\n  }, {\n    enabled: !!contract,\n    keepPreviousData: true\n  });\n}\n\n/**\n * Get all listings\n *\n * @example\n * ```javascript\n * const { data: listings, isLoading, error } = useListings(contract, { start: 0, count: 100 });\n * ```\n *\n * @param contract - an instance of a marketplace contract\n * @param filter - filter to pass to the query for the sake of pagination & filtering\n * @returns a response object that includes an array of listings\n * @see {@link https://portal.thirdweb.com/react/react.uselistings?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useListings(contract, filter) {\n  const contractAddress = contract?.getAddress();\n  return useQueryWithNetwork(cacheKeys.contract.marketplace.getAllListings(contractAddress, filter), () => {\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    return contract.getAllListings(filter);\n  }, {\n    enabled: !!contract,\n    keepPreviousData: true\n  });\n}\n\n/**\n * Get all direct listings\n *\n * @example\n * ```javascript\n * const { data: directListings, isLoading, error } = useDirectListings(contract, { start: 0, count: 100 });\n * ```\n *\n * @param contract - an instance of a marketplace v3 contract\n * @param filter - filter to pass to the query for the sake of pagination & filtering\n * @returns a response object that includes an array of direct listings\n * @twfeature DirectListings\n * @see {@link https://portal.thirdweb.com/react/react.usedirectlistings?utm_source=sdk | Documentation}\n */\nfunction useDirectListings(contract, filter) {\n  const contractAddress = contract?.getAddress();\n  return useQueryWithNetwork(cacheKeys.contract.marketplace.directListings.getAll(contractAddress, filter), () => {\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    return contract.directListings.getAll(filter);\n  }, {\n    enabled: !!contract,\n    keepPreviousData: true\n  });\n}\n\n/**\n * Get all valid direct listings\n *\n * @example\n * ```javascript\n * const { data: validDirectListings, isLoading, error } = useValidDirectListings(contract, { start: 0, count: 100 });\n * ```\n *\n * @param contract - an instance of a marketplace v3 contract\n * @param filter - filter to pass to the query for the sake of pagination & filtering\n * @returns a response object that includes an array of direct listings\n * @twfeature DirectListings\n * @see {@link https://portal.thirdweb.com/react/react.usevaliddirectlistings?utm_source=sdk | Documentation}\n */\nfunction useValidDirectListings(contract, filter) {\n  const contractAddress = contract?.getAddress();\n  return useQueryWithNetwork(cacheKeys.contract.marketplace.directListings.getAllValid(contractAddress, filter), () => {\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    return contract.directListings.getAllValid(filter);\n  }, {\n    enabled: !!contract,\n    keepPreviousData: true\n  });\n}\n\n/**\n * Get all english auctions\n *\n * @example\n * ```javascript\n * const { data: englishAuctions, isLoading, error } = useEnglishAuctions(contract, { start: 0, count: 100 });\n * ```\n *\n * @param contract - an instance of a marketplace v3 contract\n * @param filter - filter to pass to the query for the sake of pagination & filtering\n * @returns a response object that includes an array of english auctions\n * @twfeature EnglishAuctions\n * @see {@link https://portal.thirdweb.com/react/react.useenglishauctions?utm_source=sdk | Documentation}\n */\nfunction useEnglishAuctions(contract, filter) {\n  const contractAddress = contract?.getAddress();\n  return useQueryWithNetwork(cacheKeys.contract.marketplace.englishAuctions.getAll(contractAddress, filter), () => {\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    return contract.englishAuctions.getAll(filter);\n  }, {\n    enabled: !!contract,\n    keepPreviousData: true\n  });\n}\n\n/**\n * Get all valid english auctions\n *\n * @example\n * ```javascript\n * const { data: validEnglishAuctions, isLoading, error } = useValidEnglishAuctions(contract, { start: 0, count: 100 });\n * ```\n *\n * @param contract - an instance of a marketplace v3 contract\n * @param filter - filter to pass to the query for the sake of pagination & filtering\n * @returns a response object that includes an array of english auctions\n * @twfeature EnglishAuctions\n * @see {@link https://portal.thirdweb.com/react/react.usevalidenglishauctions?utm_source=sdk | Documentation}\n */\nfunction useValidEnglishAuctions(contract, filter) {\n  const contractAddress = contract?.getAddress();\n  return useQueryWithNetwork(cacheKeys.contract.marketplace.englishAuctions.getAllValid(contractAddress, filter), () => {\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    return contract.englishAuctions.getAllValid(filter);\n  }, {\n    enabled: !!contract,\n    keepPreviousData: true\n  });\n}\n\n/**\n * Get the total count of listings\n *\n * @example\n * ```javascript\n * const { data: listingsCount, isLoading, error } = useListingsCount(contract);\n * ```\n *\n * @param contract - an instance of a marketplace contract\n * @returns a response object that includes the listing count\n * @see {@link https://portal.thirdweb.com/react/react.uselistingscount?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useListingsCount(contract) {\n  const contractAddress = contract?.getAddress();\n  return useQueryWithNetwork(cacheKeys.contract.marketplace.getTotalCount(contractAddress), () => {\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    return contract.getTotalCount();\n  }, {\n    enabled: !!contract\n  });\n}\n\n/**\n * Get the total count of direct listings\n *\n * @example\n * ```javascript\n * const { data: directListingsCount, isLoading, error } = useDirectListingsCount(contract);\n * ```\n *\n * @param contract - an instance of a marketplace v3 contract\n * @returns a response object that includes the direct listings count\n * @twfeature DirectListings\n * @see {@link https://portal.thirdweb.com/react/react.usedirectlistingscount?utm_source=sdk | Documentation}\n */\nfunction useDirectListingsCount(contract) {\n  const contractAddress = contract?.getAddress();\n  return useQueryWithNetwork(cacheKeys.contract.marketplace.directListings.getTotalCount(contractAddress), () => {\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    return contract.directListings.getTotalCount();\n  }, {\n    enabled: !!contract\n  });\n}\n\n/**\n * Get the total count of english auctions\n *\n * @example\n * ```javascript\n * const { data: englishAuctionsCount, isLoading, error } = useEnglishAuctionsCount(contract);\n * ```\n *\n * @param contract - an instance of a marketplace v3 contract\n * @returns a response object that includes the direct english actions count\n * @twfeature EnglishAuctions\n * @see {@link https://portal.thirdweb.com/react/react.useenglishauctionscount?utm_source=sdk | Documentation}\n */\nfunction useEnglishAuctionsCount(contract) {\n  const contractAddress = contract?.getAddress();\n  return useQueryWithNetwork(cacheKeys.contract.marketplace.englishAuctions.getTotalCount(contractAddress), () => {\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    return contract.englishAuctions.getTotalCount();\n  }, {\n    enabled: !!contract\n  });\n}\n\n/**\n * Get all active listings\n *\n * @example\n * ```javascript\n * const { data: listings, isLoading, error } = useActiveListings(contract, { seller: \"{{wallet_adress}}\", tokenContract: \"0x...\", tokenId: 1, start: 0, count: 100 });\n * ```\n *\n * @param contract - an instance of a marketplace contract\n * @param filter - filter to pass to the query for the sake of pagination & filtering\n * @returns a response object that includes an array of listings\n * @see {@link https://portal.thirdweb.com/react/react.useactivelistings?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useActiveListings(contract, filter) {\n  const contractAddress = contract?.getAddress();\n  return useQueryWithNetwork(cacheKeys.contract.marketplace.getActiveListings(contractAddress, filter), () => {\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    return contract.getActiveListings(filter);\n  }, {\n    enabled: !!contract,\n    keepPreviousData: true\n  });\n}\n\n/**\n * Get the winning bid for an auction\n *\n * @example\n * ```javascript\n * const listingId = 0;\n * const { data: winningBid, isLoading, error } = useWinningBid(contract, listingId);\n * ```\n *\n * @param contract - an instance of a marketplace contract\n * @param listingId - the listing id to check\n * @returns a response object that includes the {@link Offer} that is winning the auction\n * @see {@link https://portal.thirdweb.com/react/react.usewinningbid?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useWinningBid(contract, listingId) {\n  const contractAddress = contract?.getAddress();\n  return useQueryWithNetwork(cacheKeys.contract.marketplace.auction.getWinningBid(contractAddress, listingId), () => {\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    requiredParamInvariant(listingId, \"No listing id provided\");\n    invariant(contract.auction.getWinningBid, \"contract does not support auction.getWinningBid\");\n    return contract.auction.getWinningBid(listingId);\n  }, {\n    enabled: !!contract && listingId !== undefined\n  });\n}\n\n/**\n * Get the winning bid for an english auction\n *\n * @example\n * ```javascript\n * const listingId = 0;\n * const { data: winningBid, isLoading, error } = useWinningBid(contract, listingId);\n * ```\n *\n * @param contract - an instance of a marketplace contract\n * @param auctionId - the auction id to check\n * @returns a response object that includes the {@link Bid} that is winning the auction\n * @twfeature EnglishAuctions\n * @see {@link https://portal.thirdweb.com/react/react.useenglishauctionwinningbid?utm_source=sdk | Documentation}\n */\nfunction useEnglishAuctionWinningBid(contract, auctionId) {\n  const contractAddress = contract?.getAddress();\n  return useQueryWithNetwork(cacheKeys.contract.marketplace.englishAuctions.getWinningBid(contractAddress, auctionId), () => {\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    requiredParamInvariant(auctionId, \"No auction id provided\");\n    invariant(contract.englishAuctions.getWinningBid, \"contract does not support englishAuctions.getWinningBid\");\n    return contract.englishAuctions.getWinningBid(auctionId);\n  }, {\n    enabled: !!contract && auctionId !== undefined\n  });\n}\n\n/**\n * Get the winner of an english auction\n *\n * @example\n * ```javascript\n * const listingId = 0;\n * const { data: auctionWinner, isLoading, error } = useAuctionWinner(contract, listingId);\n * ```\n *\n * @param contract - an instance of a marketplace contract\n * @param listingId - the listing id to check\n * @returns a response object that includes the address of the winner of the auction or undefined if there is no winner yet\n * @twfeature EnglishAuctions\n * @see {@link https://portal.thirdweb.com/react/react.useauctionwinner?utm_source=sdk | Documentation}\n */\nfunction useAuctionWinner(contract, listingId) {\n  const contractAddress = contract?.getAddress();\n  return useQueryWithNetwork(cacheKeys.contract.marketplace.auction.getWinner(contractAddress, listingId), () => {\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    requiredParamInvariant(listingId, \"No listing id provided\");\n    const isV1 = isMarketplaceV1(contract);\n    if (isV1) {\n      invariant(contract.auction.getWinner, \"contract does not support auction.getWinner\");\n      return contract.auction.getWinner(listingId);\n    } else if (!isV1) {\n      invariant(contract.englishAuctions.getWinner, \"contract does not support englishAuctions.getWinner\");\n      return contract.englishAuctions.getWinner(listingId);\n    }\n    invariant(false, \"Contract is not a valid marketplace contract\");\n  }, {\n    enabled: !!contract && listingId !== undefined\n  });\n}\n\n/**\n * Get the bid buffer for an english auction\n *\n * @example\n * ```javascript\n * const { data: bidBuffer, isLoading, error } = useBidBuffer(contract);\n * ```\n *\n * @param contract - an instance of a marketplace contract\n * @param listingId - the listing id to check (only necessary for marketplace v3)\n\n * @returns a response object that includes an array of listings\n * @twfeature EnglishAuctions\n * @see {@link https://portal.thirdweb.com/react/react.usebidbuffer?utm_source=sdk | Documentation}\n */\nfunction useBidBuffer(contract, listingId) {\n  const contractAddress = contract?.getAddress();\n  return useQueryWithNetwork(cacheKeys.contract.marketplace.auction.getBidBufferBps(contractAddress, listingId), () => {\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    const isV1 = isMarketplaceV1(contract);\n    if (isV1) {\n      invariant(contract.getBidBufferBps, \"contract does not support getBidBufferBps\");\n      return contract.getBidBufferBps();\n    } else if (!isV1) {\n      invariant(contract.englishAuctions.getBidBufferBps, \"contract does not support englishAuctions.getBidBufferBps\");\n      requiredParamInvariant(listingId, \"No listing id provided\");\n      return BigNumber.from(contract.englishAuctions.getBidBufferBps(listingId));\n    }\n    invariant(false, \"Contract is not a valid marketplace contract\");\n  }, {\n    enabled: !!contract\n  });\n}\n\n/**\n * Get the minimum next bid for an english auction\n *\n * @example\n * ```javascript\n * const listingId = 0;\n * const { data: minimumNextBid, isLoading, error } = useMinimumNextBid(contract, listingId);\n * ```\n *\n * @param contract - an instance of a marketplace contract\n * @param listingId - the listing id to check\n * @returns a response object that includes the minimum next bid for the auction listing\n * @twfeature EnglishAucton\n * @see {@link https://portal.thirdweb.com/react/react.useminimumnextbid?utm_source=sdk | Documentation}\n */\nfunction useMinimumNextBid(contract, listingId) {\n  const contractAddress = contract?.getAddress();\n  return useQueryWithNetwork(cacheKeys.contract.marketplace.auction.getMinimumNextBid(contractAddress, listingId), async () => {\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    requiredParamInvariant(listingId, \"No listing id provided\");\n    const isV1 = isMarketplaceV1(contract);\n    if (isV1) {\n      invariant(contract.auction.getMinimumNextBid, \"contract does not support auction.getMinimumNextBid\");\n      return contract.auction.getMinimumNextBid(listingId);\n    } else if (!isV1) {\n      invariant(contract.englishAuctions.getMinimumNextBid, \"contract does not support englishAuctions.getMinimumNextBid\");\n      return contract.englishAuctions.getMinimumNextBid(listingId);\n    }\n    invariant(false, \"Contract is not a valid marketplace contract\");\n  }, {\n    enabled: !!contract && listingId !== undefined\n  });\n}\n\n/**\n * Get all the offers for a listing\n *\n * @remarks Fetch all the offers for a specified direct or auction listing.\n * @example\n * ```javascript\n * const listingId = 0;\n * const { data: offers, isLoading, error } = useOffers(contract, listingId);\n * ```\n *\n * @param contract - an instance of a Marketplace contract\n * @param listingId - the id of the listing to fetch offers for\n * @see {@link https://portal.thirdweb.com/react/react.useoffers?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useOffers(contract, listingId) {\n  const result = useContractEvents(contract, \"NewOffer\");\n  return {\n    ...result,\n    data: result.data?.filter(ev => ev.data.listingId.eq(listingId))?.map(ev => ev.data)\n  };\n}\n\n/** **********************/\n/**     WRITE HOOKS     **/\n/** **********************/\n\n/**\n * Create a new direct listing\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const { contract } = useContract(\"{{contract_address}}\");\n *   const {\n *     mutate: createDirectListing,\n *     isLoading,\n *     error,\n *   } = useCreateDirectListing(contract);\n *\n *   if (error) {\n *     console.error(\"failed to create direct listing\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={() => createDirectListing(directListingData)}\n *     >\n *       Create Direct Listing!\n *     </button>\n *   );\n * };\n * ```\n *\n * @param contract - an instance of a Marketplace contract\n * @returns a mutation object that can be used to create a new direct listing\n * @twfeature DirectListings\n * @see {@link https://portal.thirdweb.com/react/react.usecreatedirectlisting?utm_source=sdk | Documentation}\n */\nfunction useCreateDirectListing(contract) {\n  const activeChainId = useSDKChainId();\n  const contractAddress = contract?.getAddress();\n  const queryClient = useQueryClient();\n  const walletAddress = useAddress();\n  return useMutation(async data => {\n    invariant(walletAddress, \"No wallet connected, cannot create listing\");\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    const isV1 = isMarketplaceV1(contract);\n    if (isV1) {\n      invariant(contract.direct.createListing, \"contract does not support direct.createListing\");\n      return await contract.direct.createListing(data);\n    } else if (!isV1) {\n      invariant(contract.directListings.createListing, \"contract does not support directListings.createListing\");\n      return await contract.directListings.createListing(data);\n    }\n    invariant(false, \"Contract is not a valid marketplace contract\");\n  }, {\n    onSettled: () => invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n  });\n}\n\n/**\n * Create a new english auction\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const { contract } = useContract(\"{{contract_address}}\");\n *   const {\n *     mutate: createAuctionListing,\n *     isLoading,\n *     error,\n *   } = useCreateAuctionListing(contract);\n *\n *   if (error) {\n *     console.error(\"failed to create auction listing\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={() => createAuctionListing(auctionListingData)}\n *     >\n *       Create Auction Listing!\n *     </button>\n *   );\n * };\n * ```\n *\n * @param contract - an instance of a Marketplace contract\n * @returns a mutation object that can be used to create a new auction listing\n * @twfeature EnglishAuctions\n * @see {@link https://portal.thirdweb.com/react/react.usecreateauctionlisting?utm_source=sdk | Documentation}\n */\nfunction useCreateAuctionListing(contract) {\n  const activeChainId = useSDKChainId();\n  const contractAddress = contract?.getAddress();\n  const queryClient = useQueryClient();\n  const walletAddress = useAddress();\n  return useMutation(async data => {\n    invariant(walletAddress, \"no wallet connected, cannot create listing\");\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    const isV1 = isMarketplaceV1(contract);\n    if (isV1) {\n      invariant(contract.auction.createListing, \"contract does not support auction.createListing\");\n      return await contract.auction.createListing(data);\n    } else if (!isV1) {\n      invariant(contract.englishAuctions.createAuction, \"contract does not support englishAuctions.createAuction\");\n      return await contract.englishAuctions.createAuction(data);\n    }\n    invariant(false, \"Contract is not a valid marketplace contract\");\n  }, {\n    onSettled: () => invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n  });\n}\n\n/**\n * Cancel a listing\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const { contract } = useContract(\"{{contract_address}}\");\n *   const {\n *     mutate: cancelListing,\n *     isLoading,\n *     error,\n *   } = useCancelListing(contract);\n *\n *   if (error) {\n *     console.error(\"failed to cancel auction listing\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={cancelListing}\n *     >\n *       Cancel Auction Listing!\n *     </button>\n *   );\n * };\n * ```\n *\n * @param contract - an instance of a Marketplace contract\n * @returns a mutation object that can be used to cancel a listing\n * @see {@link https://portal.thirdweb.com/react/react.usecancellisting?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useCancelListing(contract) {\n  const activeChainId = useSDKChainId();\n  const contractAddress = contract?.getAddress();\n  const queryClient = useQueryClient();\n  const walletAddress = useAddress();\n  return useMutation(async data => {\n    invariant(walletAddress, \"no wallet connected, cannot create listing\");\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    if (data.type === ListingType.Auction) {\n      invariant(contract.auction.cancelListing, \"contract does not support auction.cancelListing\");\n      return await contract.auction.cancelListing(data.id);\n    } else {\n      invariant(contract.direct.cancelListing, \"contract does not support direct.cancelListing\");\n      return await contract.direct.cancelListing(data.id);\n    }\n  }, {\n    onSettled: () => invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n  });\n}\n\n/**\n * Cancel a direct listing\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const { contract } = useContract(\"{{contract_address}}\");\n *   const {\n *     mutate: cancelDirectListing,\n *     isLoading,\n *     error,\n *   } = useCancelDirectListing(contract);\n *\n *   if (error) {\n *     console.error(\"failed to cancel direct listing\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={cancelDirectListing}\n *     >\n *       Cancel Direct Listing\n *     </button>\n *   );\n * };\n * ```\n *\n * @param contract - an instance of a Marketplace v3 contract\n * @returns a mutation object that can be used to cancel a direct listing\n * @twfeature DirectListings\n * @see {@link https://portal.thirdweb.com/react/react.usecanceldirectlisting?utm_source=sdk | Documentation}\n */\nfunction useCancelDirectListing(contract) {\n  const activeChainId = useSDKChainId();\n  const contractAddress = contract?.getAddress();\n  const queryClient = useQueryClient();\n  const walletAddress = useAddress();\n  return useMutation(async listingId => {\n    invariant(walletAddress, \"no wallet connected, cannot create listing\");\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    requiredParamInvariant(listingId, \"No listing id provided\");\n    invariant(contract.directListings.cancelListing, \"contract does not support directListings.cancelListing\");\n    return await contract.directListings.cancelListing(listingId);\n  }, {\n    onSettled: () => invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n  });\n}\n\n/**\n * Cancel an english auction\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const { contract } = useContract(\"{{contract_address}}\");\n *   const {\n *     mutate: cancelEnglishAuction,\n *     isLoading,\n *     error,\n *   } = useCancelEnglishAuction(contract);\n *\n *   if (error) {\n *     console.error(\"failed to cancel english auction\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={cancelEnglishAuction}\n *     >\n *       Cancel English Auction\n *     </button>\n *   );\n * };\n * ```\n *\n * @param contract - an instance of a Marketplace v3 contract\n * @returns a mutation object that can be used to cancel an english auction\n * @twfeature EnglishAuctions\n * @see {@link https://portal.thirdweb.com/react/react.usecancelenglishauction?utm_source=sdk | Documentation}\n */\nfunction useCancelEnglishAuction(contract) {\n  const activeChainId = useSDKChainId();\n  const contractAddress = contract?.getAddress();\n  const queryClient = useQueryClient();\n  const walletAddress = useAddress();\n  return useMutation(async auctionId => {\n    invariant(walletAddress, \"no wallet connected, cannot create listing\");\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    requiredParamInvariant(auctionId, \"No auction id provided\");\n    invariant(contract.englishAuctions.cancelAuction, \"contract does not support englishAuctions.cancelAuction\");\n    return await contract.englishAuctions.cancelAuction(auctionId);\n  }, {\n    onSettled: () => invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n  });\n}\n\n/**\n * Make a bid on an auction listing\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const { contract } = useContract(\"{{contract_address}}\");\n *   const {\n *     mutate: makeBid,\n *     isLoading,\n *     error,\n *   } = useMakeBid(contract);\n *\n *   if (error) {\n *     console.error(\"failed to make a bid\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={() => makeBid({ listingId: 1, bid: 2 })}\n *     >\n *       Bid!\n *     </button>\n *   );\n * };\n * ```\n *\n * @param contract - an instance of a Marketplace contract\n * @returns a mutation object that can be used to make a bid on an auction listing\n * @see {@link https://portal.thirdweb.com/react/react.usemakebid?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useMakeBid(contract) {\n  const activeChainId = useSDKChainId();\n  const contractAddress = contract?.getAddress();\n  const queryClient = useQueryClient();\n  const walletAddress = useAddress();\n  return useMutation(async data => {\n    invariant(walletAddress, \"no wallet connected, cannot make bid\");\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    invariant(contract.auction.makeBid, \"contract does not support auction.makeBid\");\n    return await contract.auction.makeBid(data.listingId, data.bid);\n  }, {\n    onSettled: () => invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n  });\n}\n\n/**\n * Nake an offer on a direct or auction listing\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const { contract } = useContract(\"{{contract_address}}\");\n *   const {\n *     mutate: makeOffer,\n *     isLoading,\n *     error,\n *   } = useMakeOffer(contract);\n *\n *   if (error) {\n *     console.error(\"failed to make a bid\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={() => makeOffer({ listingId: 1, pricePerToken: 0.5, quantity: 1 })}\n *     >\n *       Bid!\n *     </button>\n *   );\n * };\n * ```\n *\n * @param contract - an instance of a Marketplace contract\n * @returns a mutation object that can be used to make a bid on an auction listing\n * @see {@link https://portal.thirdweb.com/react/react.usemakeoffer?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useMakeOffer(contract) {\n  const activeChainId = useSDKChainId();\n  const contractAddress = contract?.getAddress();\n  const queryClient = useQueryClient();\n  const walletAddress = useAddress();\n  return useMutation(async data => {\n    invariant(walletAddress, \"no wallet connected, cannot make bid\");\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    return await contract.makeOffer(data.listingId, data.pricePerToken, data.quantity);\n  }, {\n    onSettled: () => invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n  });\n}\n\n/**\n * Accept a specific offer on a direct listing\n *\n * @remarks will accept the latest offer by the given offeror.\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const { contract } = useContract(\"{{contract_address}}\");\n *   const {\n *     mutate: acceptOffer,\n *     isLoading,\n *     error,\n *   } = useAcceptDirectListingOffer(contract);\n *\n *   if (error) {\n *     console.error(\"failed to accept offer\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={() => acceptOffer({ listingId: 1, addressOfOfferor: \"{{wallet_address}}\" })}\n *     >\n *       Accept offer\n *     </button>\n *   );\n * };\n * ```\n *\n * @param contract - an instance of a Marketplace contract\n * @returns a mutation object that can be used to accept an offer on a direct listing\n * @see {@link https://portal.thirdweb.com/react/react.useacceptdirectlistingoffer?utm_source=sdk | Documentation}\n */\nfunction useAcceptDirectListingOffer(contract) {\n  const activeChainId = useSDKChainId();\n  const contractAddress = contract?.getAddress();\n  const queryClient = useQueryClient();\n  const walletAddress = useAddress();\n  return useMutation(async data => {\n    invariant(walletAddress, \"no wallet connected, cannot make bid\");\n    requiredParamInvariant(contract?.direct, \"No Direct instance provided\");\n    return await contract.direct.acceptOffer(data.listingId, data.addressOfOfferor);\n  }, {\n    onSettled: () => invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n  });\n}\n\n/**\n * Execute an auction sale. Can only be executed once the auction has ended and the auction has a winning bid.\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const { contract } = useContract(\"{{contract_address}}\");\n *   const {\n *     mutate: executeAuctionSale,\n *     isLoading,\n *     error,\n *   } = useExecuteAuctionSale(contract);\n *\n *   if (error) {\n *     console.error(\"failed to execute sale\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={() => executeAuctionSale({ listingId: 1 })}\n *     >\n *       Execute sale\n *     </button>\n *   );\n * };\n * ```\n *\n * @param contract - an instance of a Marketplace contract\n * @returns a mutation object that can be used to accept an offer on a direct listing\n * @see {@link https://portal.thirdweb.com/react/react.useexecuteauctionsale?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useExecuteAuctionSale(contract) {\n  const activeChainId = useSDKChainId();\n  const contractAddress = contract?.getAddress();\n  const queryClient = useQueryClient();\n  const walletAddress = useAddress();\n  return useMutation(async data => {\n    invariant(walletAddress, \"no wallet connected, cannot make bid\");\n    requiredParamInvariant(contract?.auction, \"No Auction marketplace instance provided\");\n    return await contract.auction.executeSale(data.listingId);\n  }, {\n    onSettled: () => invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n  });\n}\n\n/**\n * Buy out an auction listing\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const { contract } = useContract(\"{{contract_address}}\");\n *   const {\n *     mutate: buyNow,\n *     isLoading,\n *     error,\n *   } = useBuyNow(contract);\n *\n *   if (error) {\n *     console.error(\"failed to buyout listing\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={() => buyNow({listingId: 1, type: ListingType.Auction})}\n *     >\n *       Buy listing!\n *     </button>\n *   );\n * };\n * ```\n *\n * @param contract - an instance of a Marketplace contract\n * @returns a mutation object that can be used to buy out an auction listing\n * @see {@link https://portal.thirdweb.com/react/react.usebuynow?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useBuyNow(contract) {\n  const activeChainId = useSDKChainId();\n  const contractAddress = contract?.getAddress();\n  const queryClient = useQueryClient();\n  const walletAddress = useAddress();\n  return useMutation(async data => {\n    invariant(walletAddress, \"no wallet connected, cannot make bid\");\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    if (data.type === ListingType.Direct) {\n      invariant(contract.direct.buyoutListing, \"contract does not support direct.buyoutListing\");\n      return await contract.direct.buyoutListing(data.id, data.buyAmount, data.buyForWallet);\n    }\n    invariant(contract.auction.buyoutListing, \"contract does not support auction.buyoutListing\");\n    return await contract.auction.buyoutListing(data.id);\n  }, {\n    onSettled: () => invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n  });\n}\n\n/**\n * Buy a direct listing\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const { contract } = useContract(\"{{contract_address}}\", \"marketplace-v3\");\n *   const {\n *     mutate: buyNow,\n *     isLoading,\n *     error,\n *   } = useBuyDirectListing(contract);\n *\n *   if (error) {\n *     console.error(\"failed to buy direct listing\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={() => buyNow({listingId: 1, quantity: 1, buyer: \"{{address}}\"})}\n *     >\n *       Buy listing!\n *     </button>\n *   );\n * };\n * ```\n *\n * @param contract - an instance of a MarketplaceV3 contract\n * @returns a mutation object that can be used to buy out a direct listing\n * @see {@link https://portal.thirdweb.com/react/react.useBuyDirectListing?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useBuyDirectListing(contract) {\n  const activeChainId = useSDKChainId();\n  const contractAddress = contract?.getAddress();\n  const queryClient = useQueryClient();\n  const walletAddress = useAddress();\n  return useMutation(async data => {\n    invariant(walletAddress, \"no wallet connected, cannot buy from listing\");\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    invariant(contract.directListings.buyFromListing, \"contract does not support directListings.buyFromListing\");\n    return await contract.directListings.buyFromListing(data.listingId, data.quantity, data.buyer);\n  }, {\n    onSettled: () => invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n  });\n}\nfunction isMarketplaceV1(contract) {\n  return contract.getAllListings !== undefined;\n}\n\n/** **********************/\n/**     READ  HOOKS     **/\n/** **********************/\n\n/**\n * Get a single NFT\n *\n * @example\n * ```javascript\n * const tokenId = 0; // the tokenId to look up\n * const { data: nft, isLoading, error } = useNFT(contract, tokenId);\n * ```\n *\n * @param contract - an instance of a {@link NFTContract}\n * @param tokenId - the tokenId to look up\n * @returns a response object that includes the metadata for the given tokenId\n * @beta\n * @twfeature ERC721 | ERC1155\n * @see {@link https://portal.thirdweb.com/react/react.usenft?utm_source=sdk | Documentation}\n */\nfunction useNFT(contract, tokenId) {\n  const contractAddress = contract?.getAddress();\n  const {\n    erc721,\n    erc1155\n  } = getErcs(contract);\n  return useQueryWithNetwork(cacheKeys.contract.nft.get(contractAddress, tokenId), async () => {\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    if (erc1155) {\n      invariant(erc1155.get, \"Contract instance does not support get\");\n      return await erc1155.get(BigNumber.from(tokenId || 0));\n    }\n    if (erc721) {\n      invariant(erc721.get, \"Contract instance does not support get\");\n      return await erc721.get(BigNumber.from(tokenId || 0));\n    }\n    invariant(false, \"Unknown NFT type\");\n  }, {\n    enabled: !!erc721 || !!erc1155 && tokenId !== undefined\n  });\n}\n\n/**\n * Get all NFTs\n *\n * @example\n * ```javascript\n * const { data: nfts, isLoading, error } = useNFTs(contract, { start: 0, count: 100 });\n * ```\n *\n * @param contract - an instance of a {@link NFTContract}\n * @param queryParams - query params to pass to the query for pagination\n * @returns a response object that includes an array of NFTs\n * @twfeature ERC721Supply | ERC721Enumerable | ERC1155Enumerable\n * @beta\n * @see {@link https://portal.thirdweb.com/react/react.usenfts?utm_source=sdk | Documentation}\n */\nfunction useNFTs(contract, queryParams) {\n  const contractAddress = contract?.getAddress();\n  const {\n    erc721,\n    erc1155\n  } = getErcs(contract);\n  return useQueryWithNetwork(cacheKeys.contract.nft.query.all(contractAddress, queryParams), async () => {\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    if (erc721) {\n      invariant(erc721.getAll, \"Contract instance does not support getAll\");\n      return await erc721.getAll(queryParams);\n    }\n    if (erc1155) {\n      invariant(erc1155.getAll, \"Contract instance does not support getAll\");\n      return await erc1155.getAll(queryParams);\n    }\n    invariant(false, \"Unknown NFT type\");\n  }, {\n    enabled: !!erc721 || !!erc1155\n  });\n}\n\n/**\n * Get total supply count\n *\n * @example\n * ```javascript\n * const { contract } = useContract(\"{{contract_address}}\");\n * const { data: count, isLoading, error } = useTotalCount(contract);\n * ```\n *\n * @param contract - an instance of a {@link NFTContract}\n * @returns a response object that includes the total count of NFTs\n * @beta\n * @twfeature ERC721Supply | ERC1155Enumerable\n * @see {@link https://portal.thirdweb.com/react/react.usetotalcount?utm_source=sdk | Documentation}\n */\nfunction useTotalCount(contract) {\n  const contractAddress = contract?.getAddress();\n  const {\n    erc721,\n    erc1155\n  } = getErcs(contract);\n  return useQueryWithNetwork(cacheKeys.contract.nft.query.totalCount(contractAddress), async () => {\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    if (erc1155) {\n      invariant(erc1155.totalCount, \"Contract instance does not support totalCount\");\n      return await erc1155.totalCount();\n    }\n    if (erc721) {\n      invariant(erc721.totalCount, \"Contract instance does not support totalCount\");\n      return await erc721.totalCount();\n    }\n    invariant(false, \"Unknown NFT type\");\n  }, {\n    enabled: !!erc721 || !!erc1155\n  });\n}\n\n/**\n * Get total minted supply count\n *\n * @example\n * ```javascript\n * const { contract } = useContract(\"{{contract_address}}\");\n * const { data: totalCirculatingSupply, isLoading, error } = useTotalCirculatingSupply(contract);\n * ```\n *\n * @param contract - an instance of a {@link NFTContract}\n * @param tokenId - required for ERC1155, the tokenId to look up\n * @returns a response object that includes the total minted supply\n * @beta\n * @twfeature ERC721Supply | ERC1155Enumerable\n * @see {@link https://portal.thirdweb.com/react/react.usetotalcirculatingsupply?utm_source=sdk | Documentation}\n */\nfunction useTotalCirculatingSupply(contract, tokenId) {\n  const contractAddress = contract?.getAddress();\n  const {\n    erc721,\n    erc1155\n  } = getErcs(contract);\n  return useQueryWithNetwork(cacheKeys.contract.nft.query.totalCirculatingSupply(contractAddress), async () => {\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    if (erc1155) {\n      invariant(erc1155.totalCirculatingSupply, \"Contract instance does not support totalCirculatingSupply\");\n      requiredParamInvariant(tokenId, \"No tokenId provided\");\n      return await erc1155.totalCirculatingSupply(tokenId);\n    }\n    if (erc721) {\n      invariant(erc721.totalCirculatingSupply, \"Contract instance does not support totalCirculatingSupply\");\n      return await erc721.totalCirculatingSupply();\n    }\n    invariant(false, \"Unknown NFT type\");\n  }, {\n    enabled: !!erc721 || !!erc1155 && tokenId !== undefined\n  });\n}\n\n/**\n * Get all NFTs owned by a specific wallet\n *\n * @example\n * ```javascript\n * const { data: ownedNFTs, isLoading, error } = useOwnedNFTs(contract, \"{{wallet_address}}\");\n * ```\n *\n * @param contract - an instance of a {@link NFTContract}\n * @param ownerWalletAddress - the wallet address to get owned tokens for\n * @returns a response object that includes the list of owned tokens\n * @beta\n * @twfeature ERC721Enumerable | ERC1155Enumerable | ERC721Supply\n * @see {@link https://portal.thirdweb.com/react/react.useownednfts?utm_source=sdk | Documentation}\n */\nfunction useOwnedNFTs(contract, ownerWalletAddress) {\n  const contractAddress = contract?.getAddress();\n  const {\n    erc721,\n    erc1155\n  } = getErcs(contract);\n  return useQueryWithNetwork(cacheKeys.contract.nft.query.owned.all(contractAddress, ownerWalletAddress), async () => {\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    invariant(ownerWalletAddress, \"No wallet address provided\");\n    if (erc721) {\n      return await erc721.getOwned(ownerWalletAddress);\n    }\n    if (erc1155) {\n      return await erc1155.getOwned(ownerWalletAddress);\n    }\n    invariant(false, \"Unknown NFT type\");\n  }, {\n    enabled: (!!erc721 || !!erc1155) && !!ownerWalletAddress\n  });\n}\n\n/**\n * Get NFT balance of a specific wallet\n *\n * @example\n * ```javascript\n * const { data: ownerBalance, isLoading, error } = useNFTBalance(contract, \"{{wallet_address}}\");\n * // for ERC1155 contracts, you can also pass a tokenId\n * const tokenId = 0;\n * const { data: ownerBalance, isLoading, error } = useNFTBalance(contract, \"{{wallet_address}}\", tokenId);\n * ```\n *\n * @param contract - an instance of a {@link NFTContract}\n * @param ownerWalletAddress - the wallet address to check the balance of\n * @param tokenId - required for ERC1155, the tokenId to look up\n * @returns a response object that includes the total balance of the owner\n * @twfeature ERC721 | ERC1155\n * @see {@link https://portal.thirdweb.com/react/react.usenftbalance?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useNFTBalance(contract, ownerWalletAddress, tokenId) {\n  const contractAddress = contract?.getAddress();\n  const {\n    erc721,\n    erc1155\n  } = getErcs(contract);\n  return useQueryWithNetwork(cacheKeys.contract.nft.balanceOf(contractAddress, ownerWalletAddress, tokenId), () => {\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    invariant(ownerWalletAddress, \"No owner wallet address provided\");\n    if (erc1155) {\n      requiredParamInvariant(tokenId, \"No tokenId provided\");\n      invariant(erc1155.balanceOf, \"Contract instance does not support balanceOf\");\n      return erc1155.balanceOf(ownerWalletAddress, tokenId);\n    }\n    if (erc721) {\n      invariant(erc721.balanceOf, \"Contract instance does not support balanceOf\");\n      return erc721.balanceOf(ownerWalletAddress);\n    }\n    invariant(false, \"Unknown NFT type\");\n  }, {\n    enabled: !!erc721 || !!erc1155 && !!ownerWalletAddress\n  });\n}\n\n/**\n * Get the shared metadata of an Open Edition NFT contract\n *\n * @example\n * ```javascript\n * const { data: sharedMetadata, isLoading, error } = useSharedMetadata(contract);\n * ```\n *\n * @param contract - an instance of a {@link NFTContract}\n * @returns a response object that includes the shared metadata of the contract\n * @twfeature ERC721SharedMetadata\n * @see {@link https://portal.thirdweb.com/react/react.usesharedmetadata?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useSharedMetadata(contract) {\n  const contractAddress = contract?.getAddress();\n  const {\n    erc721\n  } = getErcs(contract);\n  return useQueryWithNetwork(cacheKeys.contract.nft.sharedMetadata.get(contractAddress), () => {\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    if (erc721) {\n      invariant(erc721.sharedMetadata.get, \"Contract instance does not support sharedMetadata.get\");\n      return erc721.sharedMetadata.get();\n    }\n    invariant(false, \"Unknown NFT type\");\n  }, {\n    enabled: !!contract\n  });\n}\n\n/** **********************/\n/**     WRITE HOOKS     **/\n/** **********************/\n\n/**\n * Mint an NFT to a specific wallet\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const { contract } = useContract(\"{{contract_address}}\");\n *   const {\n *     mutate: mintNft,\n *     isLoading,\n *     error,\n *   } = useMintNFT(contract);\n *\n *   if (error) {\n *     console.error(\"failed to mint NFT\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={() => mintNft({ name: \"My awesome NFT!\", to: \"{{wallet_address}}\" })}\n *     >\n *       Mint!\n *     </button>\n *   );\n * };\n * ```\n *\n * @param contract - an instance of a {@link NFTContract}\n * @returns a mutation object that can be used to mint a new NFT token to the connected wallet\n * @beta\n * @twfeature ERC721Mintable | ERC1155Mintable\n * @see {@link https://portal.thirdweb.com/react/react.usemintnft?utm_source=sdk | Documentation}\n */\nfunction useMintNFT(contract) {\n  const activeChainId = useSDKChainId();\n  const contractAddress = contract?.getAddress();\n  const queryClient = useQueryClient();\n  const {\n    erc1155,\n    erc721\n  } = getErcs(contract);\n  return useMutation(async data => {\n    invariant(data.to, 'No \"to\" address provided');\n    requiredParamInvariant(contract, \"contract is undefined\");\n    if (erc1155) {\n      invariant(\"supply\" in data, \"supply not provided\");\n      const {\n        to,\n        metadata,\n        supply\n      } = data;\n      return await erc1155.mintTo(to, {\n        metadata,\n        supply: BigNumber.from(supply || 1)\n      });\n    }\n    if (erc721) {\n      return await erc721.mintTo(data.to, data.metadata);\n    }\n    invariant(false, \"Unknown NFT type\");\n  }, {\n    onSettled: () => invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n  });\n}\n\n/**\n * Increase the supply of an existing NFT\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const { contract } = useContract(\"{{contract_address}}\");\n *   const {\n *     mutate: mintNftSupply,\n *     isLoading,\n *     error,\n *   } = useMintNFTSupply(contract);\n *\n *   if (error) {\n *     console.error(\"failed to mint additional supply\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={() => mintNftSupply({ tokenId: 0, additionalSupply: 100, to: \"{{wallet_address}}\"})}\n *     >\n *       Mint Additional Supply!\n *     </button>\n *   );\n * };\n * ```\n *\n * @param contract - an instance of a {@link Erc1155}\n * @returns a mutation object that can be used to mint a more supply of a token id to the provided wallet\n * @beta\n * @twfeature ERC1155Mintable\n * @see {@link https://portal.thirdweb.com/react/react.usemintnftsupply?utm_source=sdk | Documentation}\n */\nfunction useMintNFTSupply(contract) {\n  const activeChainId = useSDKChainId();\n  const contractAddress = contract?.getAddress();\n  const queryClient = useQueryClient();\n  return useMutation(async data => {\n    invariant(data.to, 'No \"to\" address provided');\n    requiredParamInvariant(contract, \"contract is undefined\");\n    requiredParamInvariant(data.tokenId, \"tokenId not provided\");\n    invariant(\"additionalSupply\" in data, \"additionalSupply not provided\");\n    const {\n      to,\n      tokenId,\n      additionalSupply\n    } = data;\n    return await contract.mintAdditionalSupplyTo(to, tokenId, additionalSupply);\n  }, {\n    onSettled: () => invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n  });\n}\n\n/**\n * Transfer an NFT\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const { contract } = useContract(\"{{contract_address}}\");\n *   const {\n *     mutate: transferNFT,\n *     isLoading,\n *     error,\n *   } = useTransferNFT(contract);\n *\n *   if (error) {\n *     console.error(\"failed to transfer NFT\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={() => transferNFT({\n *         to: \"{{wallet_address}}\",\n *         tokenId: 2\n *       })}\n *     >\n *       Transfer\n *     </button>\n *   );\n * };\n * ```\n *\n * @param contract - an instance of a {@link NFTContract}\n * @returns a mutation object that can be used to transfer NFTs\n * @beta\n * @twfeature ERC721 | ERC1155\n * @see {@link https://portal.thirdweb.com/react/react.usetransfernft?utm_source=sdk | Documentation}\n */\nfunction useTransferNFT(contract) {\n  const activeChainId = useSDKChainId();\n  const contractAddress = contract?.getAddress();\n  const queryClient = useQueryClient();\n  const {\n    erc1155,\n    erc721\n  } = getErcs(contract);\n  return useMutation(data => {\n    invariant(\"to\" in data, \"to not provided\");\n    if (erc1155) {\n      invariant(erc1155.transfer, \"contract does not support transfer\");\n      requiredParamInvariant(data.tokenId, \"tokenId not provided\");\n      invariant(\"amount\" in data, \"amount not provided\");\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      return erc1155.transfer(data.to, data.tokenId, data.amount);\n    }\n    if (erc721) {\n      return erc721.transfer(data.to, data.tokenId);\n    }\n    invariant(false, \"Unknown NFT type\");\n  }, {\n    onSettled: () => invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n  });\n}\n\n/**\n * Airdrop NFTs to a list of wallets\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const { contract } = useContract(\"{{contract_address}}\");\n *   const {\n *     mutate: airdropNFT,\n *     isLoading,\n *     error,\n *   } = useAirdropNFT(contract);\n *\n *   if (error) {\n *     console.error(\"failed to transfer batch NFTs\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={() => airdropNFT({\n *          tokenId: 2,\n *          addresses: [\n *            { address: \"{{wallet_address}}\", quantity: 2 },\n *            { address: \"{{wallet_address}}\", quantity: 4 } }\n *          ]\n *       )}\n *     >\n *       Airdrop NFT\n *     </button>\n *   );\n * };\n * ```\n *\n * @param contract - an instance of a {@link Erc1155}\n * @returns a mutation object that can be used to transfer batch NFTs\n * @twfeature ERC1155\n * @see {@link https://portal.thirdweb.com/react/react.useairdropnft?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useAirdropNFT(contract) {\n  const activeChainId = useSDKChainId();\n  const contractAddress = contract?.getAddress();\n  const queryClient = useQueryClient();\n  return useMutation(_ref => {\n    let {\n      tokenId,\n      addresses\n    } = _ref;\n    requiredParamInvariant(contract, \"contract is undefined\");\n    invariant(contract.airdrop, \"contract does not support airdrop\");\n    return contract.airdrop(tokenId, addresses);\n  }, {\n    onSettled: () => invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n  });\n}\n\n/**\n * Burn an NFT\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const { contract } = useContract(\"{{contract_address}}\");\n *   const {\n *     mutate: burnNFT,\n *     isLoading,\n *     error,\n *   } = useBurnNFT(contract);\n *\n *   if (error) {\n *     console.error(\"failed to burn NFT\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={() => burnNFT({ tokenId: 0, amount: 1 })}\n *     >\n *       Burn!\n *     </button>\n *   );\n * };\n * ```\n *\n * @param contract - an instance of a {@link NFTContract}\n * @returns a mutation object that can be used to burn an NFT token from the connected wallet\n * @twfeature ERC721Burnable | ERC1155Burnable\n * @see {@link https://portal.thirdweb.com/react/react.useburnnft?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useBurnNFT(contract) {\n  const activeChainId = useSDKChainId();\n  const contractAddress = contract?.getAddress();\n  const queryClient = useQueryClient();\n  const {\n    erc1155,\n    erc721\n  } = getErcs(contract);\n  return useMutation(async data => {\n    requiredParamInvariant(data.tokenId, \"No tokenId provided\");\n    requiredParamInvariant(contract, \"contract is undefined\");\n    if (erc1155) {\n      invariant(\"amount\" in data, \"amount not provided\");\n      const {\n        tokenId,\n        amount\n      } = data;\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      return await erc1155.burn(tokenId, amount);\n    }\n    if (erc721) {\n      const {\n        tokenId\n      } = data;\n      return await erc721.burn(tokenId);\n    }\n    invariant(false, \"Unknown NFT type\");\n  }, {\n    onSettled: () => invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n  });\n}\n\n/**\n * Set shared metadata\n * TODO add docs\n * @private\n */\nfunction useSetSharedMetadata(contract) {\n  const activeChainId = useSDKChainId();\n  const contractAddress = contract?.getAddress();\n  const queryClient = useQueryClient();\n  const {\n    erc721\n  } = getErcs(contract);\n  return useMutation(async data => {\n    if (erc721) {\n      return await erc721.sharedMetadata.set(data);\n    }\n    invariant(false, \"Unknown NFT type\");\n  }, {\n    onSettled: () => invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n  });\n}\n\n/** **********************/\n/**         UTILS       **/\n/** **********************/\n\n/**\n * @internal\n */\n/**\n * @internal\n */\n/**\n * @internal\n */\n/** **********************/\n/**     READ  HOOKS     **/\n/** **********************/\n/**\n * Get all members of all roles\n *\n * @example\n * ```jsx\n * const { data: roles, isLoading, error } = useAllRoleMembers(contract);\n * ```\n *\n * @param contract - an instance of a {@link SmartContract}\n * @returns a list of addresses for all supported roles on the contract.\n * @twfeature PermissionsEnumerable\n * @see {@link https://portal.thirdweb.com/react/react.useallrolemembers?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useAllRoleMembers(contract) {\n  const contractAddress = contract?.getAddress();\n  return useQueryWithNetwork(cacheKeys.extensions.roles.getAll(contractAddress), () => {\n    requiredParamInvariant(contract, \"No contract provided\");\n    invariant(contract.roles, \"Contract does not support roles\");\n    // have to cast to any because of role bs, type is defined in the useQueryWithNetwork definition above\n    return contract.roles.getAll();\n  }, {\n    enabled: !!contract && !!contractAddress\n  });\n}\n\n/**\n * Get all members of a specific role\n *\n * @example\n * ```jsx\n * const { data: members, isLoading, error } = useRoleMembers(SmartContract, \"admin\");\n * ```\n *\n * @param contract - an instance of a {@link SmartContract}\n * @param role - the role to get the members of, see {@link Role}\n * @returns a list of addresses that are members of the role\n * @twfeature Permissions\n * @see {@link https://portal.thirdweb.com/react/react.userolemembers?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useRoleMembers(contract, role) {\n  const contractAddress = contract?.getAddress();\n  return useQueryWithNetwork(cacheKeys.extensions.roles.get(contractAddress, role), () => {\n    requiredParamInvariant(contract, \"No contract provided\");\n    invariant(contract.roles, \"Contract does not support roles\");\n    return contract.roles.get(role);\n  }, {\n    enabled: !!contract && !!contractAddress && !!role\n  });\n}\n\n/**\n * Check if an address is a member of a specific role\n *\n * @example\n * ```jsx\n * const { data: isMember, isLoading, error } = useIsAddressRole(contract, \"admin\", \"{{wallet_address}}\");\n * ```\n *\n * @param contract - an instance of a {@link SmartContract}\n * @param role - the role to check the member against, see {@link Role}\n * @param walletAddress - the address to check\n * @returns true if the address is a member of the role, or false if not\n * @twfeature PermissionsEnumerable\n * @see {@link https://portal.thirdweb.com/react/react.useisaddressrole?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useIsAddressRole(contract, role, walletAddress) {\n  // TODO this might be possible to do with `verify` fn instead?\n  const contractHasRoles = !!(contract && contract.roles);\n  const {\n    data\n  } = useRoleMembers(contractHasRoles ? contract : undefined, role);\n\n  // if the contract does not have roles then everything is allowed === true\n  if (contractHasRoles === false) {\n    return true;\n  }\n\n  // switch logic (if address 0 is in the role list then anyone has permissions to it)\n  if (data?.includes(constants.AddressZero)) {\n    return true;\n  }\n\n  // actual role check logic\n  return !!(walletAddress && data?.includes(walletAddress));\n}\n\n/** **********************/\n/**     WRITE HOOKS     **/\n/** **********************/\n\n/**\n * Overwrite the list of members for specific roles\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const { contract } = useContract(\"{{contract_address}}\");\n *   const {\n *     mutate: overwriteRoles,\n *     isLoading,\n *     error,\n *   } = useSetAllRoleMembers(contract);\n *\n *   if (error) {\n *     console.error(\"failed to overwrite roles\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={() => overwriteRoles({ rolesWithAddresses: { minter: [\"{{wallet_address}\"] } })}\n *     >\n *       Overwrite Roles\n *     </button>\n *   );\n * };\n * ```\n *\n * @param contract - an instance of a {@link SmartContract}\n * @returns a mutation object that can be used to overwrite all roles on the contract\n * @twfeature Permissions\n * @beta\n */\nfunction useSetAllRoleMembers(contract) {\n  const activeChainId = useSDKChainId();\n  const contractAddress = contract?.getAddress();\n  const queryClient = useQueryClient();\n  return useMutation(async rolesWithAddresses => {\n    requiredParamInvariant(contract, \"No contract provided\");\n    invariant(contract.roles, \"Contract does not support roles\");\n    await contract.roles.setAll(rolesWithAddresses);\n  }, {\n    onSettled: () => invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n  });\n}\n\n/**\n * Grant a role to a specific address\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const { contract } = useContract(\"{{contract_address}}\");\n *   const {\n *     mutate: grantRole,\n *     isLoading,\n *     error,\n *   } = useGrantRole(contract);\n *\n *   if (error) {\n *     console.error(\"failed to grant role\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={() => grantRole({ role: \"admin\", address: {{wallet_address}} })}\n *     >\n *       Grant Role\n *     </button>\n *   );\n * };\n * ```\n *\n * @param contract - an instance of a {@link SmartContract}\n * @returns a mutation object that can be used to grant a member of a role on the contract\n * @twfeature Permissions | PermissionsEnumerable\n * @see {@link https://portal.thirdweb.com/react/react.usegrantrole?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useGrantRole(contract) {\n  const activeChainId = useSDKChainId();\n  const contractAddress = contract?.getAddress();\n  const queryClient = useQueryClient();\n  return useMutation(async params => {\n    requiredParamInvariant(contract, \"No contract provided\");\n    invariant(contract.roles, \"Contract does not support roles\");\n    await contract.roles.grant(params.role, params.address);\n  }, {\n    onSettled: () => invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n  });\n}\n\n/**\n * Revoke a role from a specific address\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const { contract } = useContract(\"{{contract_address}}\");\n *   const {\n *     mutate: revokeRole,\n *     isLoading,\n *     error,\n *   } = useRevokeRole(contract);\n *\n *   if (error) {\n *     console.error(\"failed to revoke role\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={() => revokeRole({ role: \"admin\", address: {{wallet_address}} })}\n *     >\n *       Revoke Role\n *     </button>\n *   );\n * };\n * ```\n *\n * @param contract - an instance of a {@link SmartContract}\n * @returns a mutation object that can be used to revoke a role from a member on the contract\n * @twfeature Permissions | PermissionsEnumerable\n * @see {@link https://portal.thirdweb.com/react/react.userevokerole?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useRevokeRole(contract) {\n  const activeChainId = useSDKChainId();\n  const contractAddress = contract?.getAddress();\n  const queryClient = useQueryClient();\n  return useMutation(async params => {\n    requiredParamInvariant(contract, \"No contract provided\");\n    invariant(contract.roles, \"Contract does not support roles\");\n    await contract.roles.revoke(params.role, params.address);\n  }, {\n    onSettled: () => invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n  });\n}\n\n/** **********************/\n/**     READ  HOOKS     **/\n/** **********************/\n\n/**\n * Get the total supply for this token\n *\n * @example\n * ```javascript\n * const { data: totalSupply, isLoading, error } = useTokenSupply(contract);\n * ```\n *\n * @param contract - an instance of a {@link TokenContract}\n * @returns a response object that includes the total minted supply\n * @twfeature ERC20\n * @see {@link https://portal.thirdweb.com/react/react.usetokensupply?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useTokenSupply(contract) {\n  const contractAddress = contract?.getAddress();\n  return useQueryWithNetwork(cacheKeys.contract.token.totalSupply(contractAddress), () => {\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    const erc20 = getErc20(contract);\n    if (erc20) {\n      return erc20.totalSupply();\n    }\n    invariant(false, \"Smart contract is not a valid erc20 contract\");\n  }, {\n    enabled: !!contract || !!contractAddress\n  });\n}\n\n/**\n * Get token balance for a specific wallet\n *\n * @example\n * ```javascript\n * const { data: balance, isLoading, error } = useTokenBalance(contract, \"{{wallet_address}}\");\n * ```\n *\n * @param contract - an instance of a {@link TokenContract}\n * @returns a response object that includes the balance of the address\n * @twfeature ERC20\n * @see {@link https://portal.thirdweb.com/react/react.usetokenbalance?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useTokenBalance(contract, walletAddress) {\n  const contractAddress = contract?.getAddress();\n  const erc20 = getErc20(contract);\n  return useQueryWithNetwork(cacheKeys.contract.token.balanceOf(contractAddress, walletAddress), async () => {\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    invariant(walletAddress, \"No address provided\");\n    if (erc20) {\n      return await erc20.balanceOf(walletAddress);\n    }\n    invariant(false, \"Smart contract is not a valid erc20 contract\");\n  }, {\n    enabled: !!walletAddress && !!contract\n  });\n}\n\n/**\n * Get token decimals\n *\n * @example\n * ```javascript\n * const { data: decimals, isLoading, error } = useTokenDecimals(contract);\n * ```\n *\n * @param contract - an instance of a {@link TokenContract}\n * @returns a response object that includes the decimals of the ERC20 token\n * @twfeature ERC20\n * @see {@link https://portal.thirdweb.com/react/react.usetokendecimals?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useTokenDecimals(contract) {\n  const contractAddress = contract?.getAddress();\n  const erc20 = getErc20(contract);\n  return useQueryWithNetwork(cacheKeys.contract.token.decimals(contractAddress), async () => {\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    if (erc20) {\n      return (await erc20.get()).decimals;\n    }\n    invariant(false, \"Smart contract is not a valid erc20 contract\");\n  }, {\n    enabled: !!contract\n  });\n}\n\n/** **********************/\n/**     WRITE HOOKS     **/\n/** **********************/\n\n/**\n * Mint tokens\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const { contract } = useContract(\"{{contract_address}}\");\n *   const {\n *     mutate: mintTokens,\n *     isLoading,\n *     error,\n *   } = useMintToken(contract);\n *\n *   if (error) {\n *     console.error(\"failed to mint tokens\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={() => mintTokens({ to: \"{{wallet_address}}\", amount: 1000 })}\n *     >\n *       Mint!\n *     </button>\n *   );\n * };\n * ```\n *\n * @param contract - an instance of a {@link TokenContract}\n * @returns a mutation object that can be used to mint new tokens to the connected wallet\n * @twfeature ERC20Mintable\n * @see {@link https://portal.thirdweb.com/react/react.useminttoken?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useMintToken(contract) {\n  const activeChainId = useSDKChainId();\n  const contractAddress = contract?.getAddress();\n  const queryClient = useQueryClient();\n  const erc20 = getErc20(contract);\n  return useMutation(data => {\n    const {\n      to,\n      amount\n    } = data;\n    requiredParamInvariant(contract, \"contract is undefined\");\n    if (erc20) {\n      return erc20.mintTo(to, amount);\n    }\n    invariant(false, \"Smart contract is not a valid erc20 contract\");\n  }, {\n    onSettled: () => invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n  });\n}\n\n/**\n * Claim tokens to a specific wallet\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const { contract } = useContract(\"{{contract_address}}\");\n *   const {\n *     mutate: claimTokens,\n *     isLoading,\n *     error,\n *   } = useClaimToken(contract);\n *\n *   if (error) {\n *     console.error(\"failed to claim tokens\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={() => claimTokens({ to: \"{{wallet_address}}\", amount: 100 })}\n *     >\n *       Claim Tokens!\n *     </button>\n *   );\n * };\n * ```\n *\n * @param contract - an instance of a {@link TokenContract}\n * @returns a mutation object that can be used to tokens to the wallet specified in the params\n * @twfeature ERC20ClaimPhasesV2 | ERC20ClaimPhasesV1 | ERC20ClaimConditionsV2 | ERC20ClaimConditionsV1\n * @see {@link https://portal.thirdweb.com/react/react.useclaimtoken?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useClaimToken(contract) {\n  const activeChainId = useSDKChainId();\n  const contractAddress = contract?.getAddress();\n  const queryClient = useQueryClient();\n  const erc20 = getErc20(contract);\n  return useMutation(async data => {\n    invariant(data.to, 'No \"to\" address provided');\n    if (erc20) {\n      invariant(erc20?.claimTo, \"contract does not support claimTo\");\n      return await erc20.claimTo(data.to, data.amount, {\n        checkERC20Allowance: data.checkERC20Allowance\n      });\n    }\n    invariant(false, \"Smart contract is not a valid erc20 contract\");\n  }, {\n    onSettled: () => invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n  });\n}\n\n/**\n * Transfer tokens to a specific wallet\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const { contract } = useContract(\"{{contract_address}}\");\n *   const {\n *     mutate: transferTokens,\n *     isLoading,\n *     error,\n *   } = useTransferToken(contract);\n *\n *   if (error) {\n *     console.error(\"failed to transfer tokens\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={() => transferTokens({ to: \"{{wallet_address}}\", amount: 1000 })}\n *     >\n *       Transfer\n *     </button>\n *   );\n * };\n * ```\n *\n * @param contract - an instance of a {@link TokenContract}\n * @returns a mutation object that can be used to transfer tokens\n * @twfeature ERC20\n * @see {@link https://portal.thirdweb.com/react/react.usetransfertoken?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useTransferToken(contract) {\n  const activeChainId = useSDKChainId();\n  const contractAddress = contract?.getAddress();\n  const queryClient = useQueryClient();\n  const erc20 = getErc20(contract);\n  return useMutation(data => {\n    const {\n      to,\n      amount\n    } = data;\n    if (erc20) {\n      invariant(erc20?.transfer, \"contract does not support transfer\");\n      return erc20.transfer(to, amount);\n    }\n    invariant(false, \"Smart contract is not a valid erc20 contract\");\n  }, {\n    onSettled: () => invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n  });\n}\n\n/**\n * Airdrop tokens to a list of wallets\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const { contract } = useContract(\"{{contract_address}}\");\n *   const {\n *     mutate: transferBatchTokens,\n *     isLoading,\n *     error,\n *   } = useTransferToken(contract);\n *\n *   if (error) {\n *     console.error(\"failed to transfer batch tokens\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={() => transferBatchTokens([{ to: \"{{wallet_address}}\", amount: 1000 }, { to: \"{{wallet_address}}\", amount: 2000 }])}\n *     >\n *       Airdrop\n *     </button>\n *   );\n * };\n * ```\n *\n * @param contract - an instance of a {@link TokenContract}\n * @returns a mutation object that can be used to transfer batch tokens\n * @twfeature ERC20\n * @see {@link https://portal.thirdweb.com/react/react.usetransferbatchtoken?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useTransferBatchToken(contract) {\n  const activeChainId = useSDKChainId();\n  const contractAddress = contract?.getAddress();\n  const queryClient = useQueryClient();\n  const erc20 = getErc20(contract);\n  return useMutation(data => {\n    if (erc20) {\n      invariant(erc20.transferBatch, \"contract does not support transferBatch\");\n      const convertedData = data.map(token => ({\n        toAddress: token.to,\n        amount: token.amount\n      }));\n      return erc20.transferBatch(convertedData);\n    }\n    invariant(false, \"Smart contract is not a valid erc20 contract\");\n  }, {\n    onSettled: () => invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n  });\n}\n\n/**\n * Burn tokens\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const { contract } = useContract(\"{{contract_address}}\");\n *   const {\n *     mutate: burnTokens,\n *     isLoading,\n *     error,\n *   } = useBurnToken(contract);\n *\n *   if (error) {\n *     console.error(\"failed to burn tokens\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={() => burnTokens({ amount: 1000 })}\n *     >\n *       Burn!\n *     </button>\n *   );\n * };\n * ```\n *\n * @param contract - an instance of a {@link TokenContract}\n * @returns a mutation object that can be used to burn tokens from the connected wallet\n * @twfeature ERC20Burnable\n * @see {@link https://portal.thirdweb.com/react/react.useburntoken?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useBurnToken(contract) {\n  const activeChainId = useSDKChainId();\n  const contractAddress = contract?.getAddress();\n  const queryClient = useQueryClient();\n  const erc20 = getErc20(contract);\n  return useMutation(data => {\n    const {\n      amount\n    } = data;\n    requiredParamInvariant(contract, \"contract is undefined\");\n    if (erc20) {\n      invariant(erc20.burn, \"contract does not support burn\");\n      return erc20.burn(amount);\n    }\n    invariant(false, \"Smart contract is not a valid erc20 contract\");\n  }, {\n    onSettled: () => invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n  });\n}\n\n/** **********************/\n/**       READ HOOKS    **/\n/** **********************/\n\n/**\n * Get all accounts\n *\n * @example\n * ```javascript\n * const { data: accounts, isLoading, error } = useAccounts(contract);\n * ```\n *\n * @param contract - an instance of a account factory contract\n * @returns a response object that includes an array of all accounts with their associated admin\n * @twfeature AccountFactory\n * @see {@link https://portal.thirdweb.com/react/react.useaccounts?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useAccounts(contract) {\n  const contractAddress = contract?.getAddress();\n  return useQueryWithNetwork(cacheKeys.contract.accountFactory.getAll(contractAddress), () => {\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    invariant(contract.accountFactory.getAllAccounts, \"Contract instance does not support contract.accountFactory.getAllAccounts\");\n    return contract.accountFactory.getAllAccounts();\n  }, {\n    enabled: !!contract\n  });\n}\n\n/**\n * Get all accounts associated with the provided address\n *\n * @example\n * ```javascript\n * const { data: accountsForAddress, isLoading, error } = useAccountsForAddress(contract, \"{{account_address}}\");\n * ```\n *\n * @param contract - an instance of a account factory contract\n * @returns a response object that includes an array of all accounts associated with the adress\n * @twfeature AccountFactory\n * @see {@link https://portal.thirdweb.com/react/react.useaccountsforaddress?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useAccountsForAddress(contract, address) {\n  const contractAddress = contract?.getAddress();\n  return useQueryWithNetwork(cacheKeys.contract.accountFactory.getAllForAddress(contractAddress, address), () => {\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    invariant(contract.accountFactory.getAssociatedAccounts, \"Contract instance does not support contract.accountFactory.getAssociatedAccounts\");\n    return contract.accountFactory.getAssociatedAccounts(address || \"\");\n  }, {\n    enabled: !!contract\n  });\n}\n\n/**\n * Check if a account has been deployed for the given admin\n *\n * @example\n * ```javascript\n * const { data: isAccountDeployed, isLoading, error } = useIsAccountDeployed(contract);\n * ```\n *\n * @param contract - an instance of a account factory contract\n * @returns a boolean indicating if a account has been deployed for the given admin\n * @twfeature AccountFactory\n * @see {@link https://portal.thirdweb.com/react/react.useisaccountdeployed?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useIsAccountDeployed(contract, admin, extraData) {\n  const contractAddress = contract?.getAddress();\n  return useQueryWithNetwork(cacheKeys.contract.accountFactory.isAccountDeployed(contractAddress, admin), () => {\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    invariant(contract.accountFactory.isAccountDeployed, \"Contract instance does not support contract.accountFactory.getAllAccounts\");\n    invariant(admin, \"No account address provided\");\n    return contract.accountFactory.isAccountDeployed(admin, extraData);\n  }, {\n    enabled: !!contract\n  });\n}\n\n/** **********************/\n/**     WRITE HOOKS     **/\n/** **********************/\n/**\n * Create a account\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const { contract } = useContract(\"{{contract_address}}\");\n *   const {\n *     mutate: createAccount,\n *     isLoading,\n *     error,\n *   } = useCreateAccount(contract);\n *\n *   if (error) {\n *     console.error(\"failed to create account\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={() => createAccount(\"0x...\")}\n *     >\n *       Create Account\n *     </button>\n *   );\n * };\n * ```\n *\n * @param contract - an instance of a account factory contract\n * @returns a mutation object that can be used to create a account\n * @twfeature AccountFactory\n * @see {@link https://portal.thirdweb.com/react/react.usecreateaccount?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useCreateAccount(contract) {\n  const activeChainId = useSDKChainId();\n  const contractAddress = contract?.getAddress();\n  const queryClient = useQueryClient();\n  return useMutation(async (admin, extraData) => {\n    requiredParamInvariant(contract, \"contract is undefined\");\n    return contract.accountFactory.createAccount(admin, extraData);\n  }, {\n    onSettled: () => invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n  });\n}\n\n/** **********************/\n/**       READ HOOKS    **/\n/** **********************/\n\n/**\n * Get all signers of account\n *\n * @example\n * ```javascript\n * const { data: accounts, isLoading, error } = useAccountSigners(contract);\n * ```\n *\n * @param contract - an instance of a account\n * @returns a response object that includes an array of all signers of the provided account\n * @twfeature Account\n * @see {@link https://portal.thirdweb.com/react/react.useaccountsigners?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useAccountSigners(contract) {\n  const contractAddress = contract?.getAddress();\n  return useQueryWithNetwork(cacheKeys.contract.account.signers(contractAddress), () => {\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    invariant(contract.account.getAllSigners, \"Contract instance does not support contract.account.getAllSigners\");\n    return contract.account.getAllSigners();\n  }, {\n    enabled: !!contract\n  });\n}\n\n/**\n * Get all admins of account\n *\n * @example\n * ```javascript\n * const { data: accounts, isLoading, error } = useAccountSigners(contract);\n * ```\n *\n * @param contract - an instance of a account\n * @returns a response object that includes an array of all admins of the provided account\n * @twfeature Account\n * @see {@link https://portal.thirdweb.com/react/react.useaccountadmins?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useAccountAdmins(contract) {\n  const contractAddress = contract?.getAddress();\n  return useQueryWithNetwork(cacheKeys.contract.account.signers(contractAddress), () => {\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    invariant(contract.account.getAllAdmins, \"Contract instance does not support contract.account.getAllAdmins\");\n    return contract.account.getAllAdmins();\n  }, {\n    enabled: !!contract\n  });\n}\n\n/**\n * Get all signers and admins of account\n *\n * @example\n * ```javascript\n * const { data: accounts, isLoading, error } = useAccountSigners(contract);\n * ```\n *\n * @param contract - an instance of a account\n * @returns a response object that includes an array of all admins of the provided account\n * @twfeature Account\n * @see {@link https://portal.thirdweb.com/react/react.useaccountadmins?utm_source=sdk | Documentation}\n * @beta\n */\nfunction useAccountAdminsAndSigners(contract) {\n  const contractAddress = contract?.getAddress();\n  return useQueryWithNetwork(cacheKeys.contract.account.signers(contractAddress), () => {\n    requiredParamInvariant(contract, \"No Contract instance provided\");\n    invariant(contract.account.getAllAdminsAndSigners, \"Contract instance does not support contract.account.getAllAdminsAndSigners\");\n    return contract.account.getAllAdminsAndSigners();\n  }, {\n    enabled: !!contract\n  });\n}\n\n/** **********************/\n/**     WRITE HOOKS     **/\n/** **********************/\n/**\n * Create and add a session key for the smart wallet\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const {\n *     mutate: createSessionKey,\n *     isLoading,\n *     error,\n *   } = useCreateSessionKey();\n *\n *   if (error) {\n *     console.error(\"failed to create session key\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={() => createSessionKey(\n *         \"0x...\",\n *         {\n *           approvedCallTargets: [\"0x...\"], // the addresses of contracts that the session key can call\n *           nativeTokenLimitPerTransaction: 0.1, // the maximum amount of native token (in ETH) that the session key can spend per transaction\n *           startDate: new Date(), // the date when the session key becomes active\n *           expirationDate = new Date(Date.now() + 24 * 60 * 60 * 1000); // the date when the session key expires\n *         }\n *        )}\n *     >\n *       Create Session Key\n *     </button>\n *   );\n * };\n * ```\n *\n * @twfeature Account\n */\nfunction useCreateSessionKey() {\n  const smartWallet = useWallet(\"smartWallet\");\n  return useMutation(async args => {\n    requiredParamInvariant(smartWallet, \"wallet is not connected\");\n    return smartWallet.createSessionKey(args.keyAddress, args.permissions);\n  });\n}\n\n/**\n * Revoke a session key on the smart wallet\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const {\n *     mutate: revokeSessionKey,\n *     isLoading,\n *     error,\n *   } = useRevokeSessionKey();\n *\n *   if (error) {\n *     console.error(\"failed to revoke session key\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={() => revokeSessionKey(\"0x...\")}\n *     >\n *       Revoke Session Key\n *     </button>\n *   );\n * };\n * ```\n *\n * @twfeature Account\n */\nfunction useRevokeSessionKey() {\n  const smartWallet = useWallet(\"smartWallet\");\n  return useMutation(async keyAddress => {\n    requiredParamInvariant(smartWallet, \"wallet is not connected\");\n    return smartWallet.revokeSessionKey(keyAddress);\n  });\n}\n\n/**\n * Add an additional admin on the smart wallet\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const {\n *     mutate: addAdmin,\n *     isLoading,\n *     error,\n *   } = useAddAdmin();\n *\n *   if (error) {\n *     console.error(\"failed to add admin\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={() => addAdmin(\"0x...\")}\n *     >\n *       Add admin\n *     </button>\n *   );\n * };\n * ```\n *\n * @twfeature Account\n */\nfunction useAddAdmin() {\n  const smartWallet = useWallet(\"smartWallet\");\n  return useMutation(async adminAddress => {\n    requiredParamInvariant(smartWallet, \"wallet is not connected\");\n    return smartWallet.addAdmin(adminAddress);\n  });\n}\n\n/**\n * Add an additional admin on the smart wallet\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const {\n *     mutate: removeAdmin,\n *     isLoading,\n *     error,\n *   } = useRemoveAdmin();\n *\n *   if (error) {\n *     console.error(\"failed to remove admin\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={() => removeAdmin(\"0x...\")}\n *     >\n *       Remove admin\n *     </button>\n *   );\n * };\n * ```\n *\n * @twfeature Account\n */\nfunction useRemoveAdmin() {\n  const smartWallet = useWallet(\"smartWallet\");\n  return useMutation(async adminAddress => {\n    requiredParamInvariant(smartWallet, \"wallet is not connected\");\n    return smartWallet.removeAdmin(adminAddress);\n  });\n}\n\nconst warnSet = new Set();\nfunction showDeprecationWarning(deprecated, replacement) {\n  // deprecation warnings only in dev only in dev\n  if (__DEV__) {\n    if (warnSet.has(`${deprecated}:${replacement}`)) {\n      return;\n    }\n    warnSet.add(`${deprecated}:${replacement}`);\n    console.warn(`\\`${deprecated}\\` is deprecated and will be removed in a future major version. Please use \\`${replacement}\\` instead.`);\n  }\n}\n\n/**\n * Hook for getting an instance of an `EditionDrop` contract. This contract is used to interface with ERC1155 compliant NFTs that can be lazily minted.\n * @param contractAddress - the address of the Edition Drop contract, found in your thirdweb dashboard\n *\n * @example\n * ```javascript\n * import { useContract } from '@thirdweb-dev/react'\n *\n * export default function Component() {\n *   const { contract } = useContract(\"<YOUR-CONTRACT-ADDRESS>\", \"edition-drop\")\n *\n *   // Now you can use the edition drop contract in the rest of the component\n *\n *   // For example, this function will let the connected wallet claim a new NFT\n *   async function claim(tokenId, quantity) {\n *     await contract.claim(tokenId, quantity)\n *   }\n *\n *   ...\n * }\n * ```\n * @public\n * @deprecated\n * This hook is deprecated and will be removed in a future major version. You should use {@link useContract} instead.\n * ```diff\n * - const editionDrop = useEditionDrop(\"0x1234...\");\n * + const editionDrop = useContract(\"0x1234...\", \"edition-drop\").contract;\n * ```\n */\nfunction useEditionDrop(contractAddress) {\n  showDeprecationWarning(`useEditionDrop(\"${contractAddress || \"0x...\"}\")`, `useContract(\"${contractAddress || \"0x...\"}\", \"edition-drop\")`);\n  return useContract(contractAddress, \"edition-drop\").contract;\n}\n\n/**\n * Hook for getting an instance of an `Edition` contract. This contract is used to interface with ERC1155 compliant NFTs.\n * @param contractAddress - the address of the Edition contract, found in your thirdweb dashboard\n *\n * @example\n * ```javascript\n * import { useContract } from '@thirdweb-dev/react'\n *\n * export default function Component() {\n *   const { contract } = useContract(\"<YOUR-CONTRACT-ADDRESS>\", \"edition\")\n *\n *   // Now you can use the edition contract in the rest of the component\n *\n *   // For example, this function will return all the NFTs on this contract\n *   async function getNFTs() {\n *     const nfts = await contract.getAll()\n *     return nfts\n *   }\n *\n *   ...\n * }\n * ```\n * @public\n * @deprecated\n * This hook is deprecated and will be removed in a future major version. You should use {@link useContract} instead.\n * ```diff\n * - const edition = useEdition(\"0x1234...\");\n * + const edition = useContract(\"0x1234...\", \"edition\").contract;\n * ```\n */\nfunction useEdition(contractAddress) {\n  showDeprecationWarning(`useEdition(\"${contractAddress || \"0x...\"}\")`, `useContract(\"${contractAddress || \"0x...\"}\", \"edition\")`);\n  return useContract(contractAddress, \"edition\").contract;\n}\n\n/**\n * Hook for getting an instance of an `NFTDrop` contract. This contract is meant to interface with ERC721 compliant NFTs that can be lazily minted.\n * @param contractAddress - the address of the NFT Drop contract, found in your thirdweb dashboard\n *\n * @example\n * ```javascript\n * import { useContract } from '@thirdweb-dev/react'\n *\n * export default function Component() {\n *   const { contract } = useContract(\"<YOUR-CONTRACT-ADDRESS>\", \"nft-drop\")\n *\n *   // Now you can use the nft drop contract in the rest of the component\n *\n *   // For example, this function will let the connected wallet claim a new NFT\n *   async function claim(quantity) {\n *     await contract.claim(quantity)\n *   }\n *\n *   ...\n * }\n * ```\n * @public\n * @deprecated\n * This hook is deprecated and will be removed in a future major version. You should use {@link useContract} instead.\n * ```diff\n * - const nftDrop = useNFTDrop(\"0x1234...\");\n * + const nftDrop = useContract(\"0x1234...\", \"nft-drop\").contract;\n * ```\n */\nfunction useNFTDrop(contractAddress) {\n  showDeprecationWarning(`useNFTDrop(\"${contractAddress || \"0x...\"}\")`, `useContract(\"${contractAddress || \"0x...\"}\", \"nft-drop\")`);\n  return useContract(contractAddress, \"nft-drop\").contract;\n}\n\n/**\n * Hook for getting an instance of a `Marketplace` contract. This contract is used to support marketplace for purchase and sale of on-chain assets.\n * @param contractAddress - the address of the Marketplace contract, found in your thirdweb dashboard\n *\n * @example\n * ```javascript\n * import { useContract } from '@thirdweb-dev/react'\n *\n * export default function Component() {\n *   const { contract } = useContract(\"<YOUR-CONTRACT-ADDRESS>\", \"marketplace\")\n *\n *   // Now you can use the marketplace contract in the rest of the component\n *\n *   // For example, this function will return all the listings on the marketplace\n *   async function getListings() {\n *     const listings = await contract.getAll()\n *     return listings\n *   }\n *\n *   ...\n * }\n * ```\n * @public\n * @deprecated\n * This hook is deprecated and will be removed in a future major version. You should use {@link useContract} instead.\n * ```diff\n * - const marketplace = useMarketplace(\"0x1234...\");\n * + const marketplace = useContract(\"0x1234...\", \"marketplace\").contract;\n * ```\n */\nfunction useMarketplace(contractAddress) {\n  showDeprecationWarning(`useMarketplace(\"${contractAddress || \"0x...\"}\")`, `useContract(\"${contractAddress || \"0x...\"}\", \"marketplace\")`);\n  return useContract(contractAddress, \"marketplace\").contract;\n}\n\n/**\n * Hook for getting an instance of an `NFTCollection` contract. This contract is meant to interface with ERC721 compliant NFTs.\n * @param contractAddress - the address of the NFT Collection contract, found in your thirdweb dashboard\n *\n * @example\n * ```javascript\n * import { useContract } from '@thirdweb-dev/react'\n *\n * export default function Component() {\n *   const { contract, isLoading, error } = useContract(\"<YOUR-CONTRACT-ADDRESS>\", \"nft-collection\")\n *\n *   // Now you can use the nftCollection contract in the rest of the component\n *\n *   // For example, this function will return all the NFTs on this contract\n *   async function getNFTs() {\n *     const nfts = await contract.getAll()\n *     return nfts\n *   }\n *\n *   ...\n * }\n * ```\n * @public\n * @deprecated\n * This hook is deprecated and will be removed in a future major version. You should use {@link useContract} instead.\n * ```diff\n * - const nftCollection = useNFTCollection(\"0x1234...\");\n * + const nftCollection = useContract(\"0x1234...\", \"nft-collection\").contract;\n * ```\n */\nfunction useNFTCollection(contractAddress) {\n  showDeprecationWarning(`useNFTCollection(\"${contractAddress || \"0x...\"}\")`, `useContract(\"${contractAddress || \"0x...\"}\", \"nft-collection\")`);\n  return useContract(contractAddress, \"nft-collection\").contract;\n}\n\n/**\n * Hook for getting an instance of a `Pack` contract. This contract supports the creation of on-chain luck-based lootboxes.\n * @param contractAddress - the address of the Pack contract, found in your thirdweb dashboard\n *\n * @example\n * ```javascript\n * import { useContract } from '@thirdweb-dev/react'\n *\n * export default function Component() {\n *   const { contract } = usePack(\"<YOUR-CONTRACT-ADDRESS>\", \"pack\")\n *\n *   // Now you can use the pack contract in the rest of the component\n *\n *   // For example, this function will get all the packs on this contract\n *   async function getPacks() {\n *     const packs = await contract.getAll()\n *     return packs\n *   }\n *\n *   ...\n * }\n * ```\n * @public\n * @deprecated\n * This hook is deprecated and will be removed in a future major version. You should use {@link useContract} instead.\n * ```diff\n * - const pack = usePack(\"0x1234...\");\n * + const pack = useContract(\"0x1234...\", \"pack\").contract;\n * ```\n */\nfunction usePack(contractAddress) {\n  showDeprecationWarning(`usePack(\"${contractAddress || \"0x...\"}\")`, `useContract(\"${contractAddress || \"0x...\"}\", \"pack\")`);\n  return useContract(contractAddress, \"pack\").contract;\n}\n\n/**\n * Hook for getting an instance of a `Token` contract. This contract supports ERC20 compliant tokens.\n * @param contractAddress - the address of the Token contract, found in your thirdweb dashboard\n *\n * @example\n * ```javascript\n * import { useContract } from '@thirdweb-dev/react'\n *\n * export default function Component() {\n *   const { contract } = useContract(\"<YOUR-CONTRACT-ADDRESS>\", \"token\")\n *\n *   // Now you can use the token contract in the rest of the component\n *\n *   // For example, this function will get the connected wallets token balance\n *   async function balance() {\n *     const balance = await contract.balance()\n *     return balance\n *   }\n *\n *   ...\n * }\n * ```\n * @public\n * @deprecated\n * This hook is deprecated and will be removed in a future major version. You should use {@link useContract} instead.\n * ```diff\n * - const token = useToken(\"0x1234...\");\n * + const token = useContract(\"0x1234...\", \"token\").contract;\n * ```\n */\nfunction useToken(contractAddress) {\n  showDeprecationWarning(`useToken(\"${contractAddress || \"0x...\"}\")`, `useContract(\"${contractAddress || \"0x...\"}\", \"token\")`);\n  return useContract(contractAddress, \"token\").contract;\n}\n\n/**\n * Hook for getting an instance of a `Token Drop` contract.\n * @param contractAddress - the address of the Token Drop contract, found in your thirdweb dashboard\n *\n * @example\n * ```javascript\n * import { useContract } from '@thirdweb-dev/react'\n *\n * export default function Component() {\n *   const { contract } = useContract(\"<YOUR-CONTRACT-ADDRESS>\", \"token-drop\")\n *\n *   // Now you can use the token drop contract in the rest of the component\n *\n *   // For example, this function will get the connected wallets token balance\n *   async function balance() {\n *     const balance = await contract.balance()\n *     return balance\n *   }\n *\n *   ...\n * }\n * ```\n * @public\n * @deprecated\n * This hook is deprecated and will be removed in a future major version. You should use {@link useContract} instead.\n * ```diff\n * - const token = useTokenDrop(\"0x1234...\");\n * + const token = useContract(\"0x1234...\", \"token-drop\").contract;\n * ```\n */\nfunction useTokenDrop(contractAddress) {\n  showDeprecationWarning(`useTokenDrop(\"${contractAddress || \"0x...\"}\")`, `useContract(\"${contractAddress || \"0x...\"}\", \"token-drop\")`);\n  return useContract(contractAddress, \"token-drop\").contract;\n}\n\n/**\n * Hook for getting an instance of an `Vote` contract. This contract enables fully featured voting-based decentralized governance systems.\n * @param contractAddress - the address of the Vote contract, found in your thirdweb dashboard\n *\n * @example\n * ```javascript\n * import { useContract } from '@thirdweb-dev/react'\n *\n * export default function Component() {\n *   const { contract } = useContract(\"<YOUR-CONTRACT-ADDRESS>\", \"vote\")\n *\n *   // Now you can use the vote contract in the rest of the component\n *\n *   // For example, this function will get all the proposals on this contract\n *   async function getProposals() {\n *     const proposals = await contract.getAll()\n *     return proposals\n *   }\n *\n *   ...\n * }\n * ```\n * @public\n * @deprecated\n * This hook is deprecated and will be removed in a future major version. You should use {@link useContract} instead.\n * ```diff\n * - const vote = useVote(\"0x1234...\");\n * + const vote = useContract(\"0x1234...\", \"vote\").contract;\n * ```\n */\nfunction useVote(contractAddress) {\n  showDeprecationWarning(`useVote(\"${contractAddress || \"0x...\"}\")`, `useContract(\"${contractAddress || \"0x...\"}\", \"vote\")`);\n  return useContract(contractAddress, \"vote\").contract;\n}\n\n/**\n * Hook for getting an instance of a `Split` contract. This contract supports fund distribution to multiple parties.\n * @param contractAddress - the address of the Split contract, found in your thirdweb dashboard\n *\n * @example\n * ```javascript\n * import { useContract } from '@thirdweb-dev/react'\n *\n * export default function Component() {\n *   const { contract } = useContract(\"<YOUR-CONTRACT-ADDRESS>\", \"split\")\n *\n *   // Now you can use the split contract in the rest of the component\n *\n *   // For example, this function will return all the recipients of the split\n *   async function getRecipients() {\n *     const recipients = await contract.getAllRecipients()\n *     return recipients\n *   }\n *\n *   ...\n * }\n * ```\n * @public\n * @deprecated\n * This hook is deprecated and will be removed in a future major version. You should use {@link useContract} instead.\n * ```diff\n * - const split = useSplit(\"0x1234...\");\n * + const split = useContract(\"0x1234...\", \"split\").contract;\n * ```\n */\nfunction useSplit(contractAddress) {\n  showDeprecationWarning(`useSplit(\"${contractAddress || \"0x...\"}\")`, `useContract(\"${contractAddress || \"0x...\"}\", \"split\")`);\n  return useContract(contractAddress, \"split\").contract;\n}\n\n/**\n * Hook for getting an instance of an `Multiwrap` contract. This contract is an ERC721 in which you can wrap ERC721, ERC1155 and ERC20 tokens.\n * @param contractAddress - the address of the Multiwrap contract, found in your thirdweb dashboard\n *\n * @example\n * ```javascript\n * import { useContract } from '@thirdweb-dev/react'\n *\n * export default function Component() {\n *   const { contract } = useContract(\"<YOUR-CONTRACT-ADDRESS>\", \"multiwrap\")\n *\n *   // Now you can use the multiwrap contract in the rest of the component\n *\n *   // For example, this function will let the connected wallet wrap tokens\n *   async function wrap(tokensToWrap, wrappedNFTMetadata) {\n *     await contract.wrap(tokensToWrap, wrappedNFTMetadata)\n *   }\n *\n *   ...\n * }\n * ```\n * @public\n * @deprecated\n * This hook is deprecated and will be removed in a future major version. You should use {@link useContract} instead.\n * ```diff\n * - const multiwrap = useMultiwrap(\"0x1234...\");\n * + const multiwrap = useContract(\"0x1234...\", \"multiwrap\").contract;\n * ```\n */\nfunction useMultiwrap(contractAddress) {\n  showDeprecationWarning(`useMultiwrap(\"${contractAddress || \"0x...\"}\")`, `useContract(\"${contractAddress || \"0x...\"}\", \"multiwrap\")`);\n  return useContract(contractAddress, \"multiwrap\").contract;\n}\n\n/**\n * Hook for getting an instance of an `SignatureDrop` contract. This contract is meant to interface with ERC721 compliant NFTs that can be lazily minted.\n * @param contractAddress - the address of the NFT Drop contract, found in your thirdweb dashboard\n *\n * @example\n * ```javascript\n * import { useContract } from '@thirdweb-dev/react'\n *\n * export default function Component() {\n *   const { contract } = useContract(\"<YOUR-CONTRACT-ADDRESS>\", \"signature-drop\")\n *\n *   // Now you can use the Signature drop contract in the rest of the component\n *\n *   // For example, this function will let the connected wallet claim a new NFT\n *   async function claim(quantity) {\n *     await contract.claim(quantity)\n *   }\n *\n *   ...\n * }\n * ```\n * @public\n * @deprecated\n * This hook is deprecated and will be removed in a future major version. You should use {@link useContract} instead.\n * ```diff\n * - const signatureDrop = useSignatureDrop(\"0x1234...\");\n * + const signatureDrop = useContract(\"0x1234...\", \"signature-drop\").contract;\n * ```\n */\nfunction useSignatureDrop(contractAddress) {\n  showDeprecationWarning(`useSignatureDrop(\"${contractAddress || \"0x...\"}\")`, `useContract(\"${contractAddress || \"0x...\"}\", \"signature-drop\")`);\n  return useContract(contractAddress, \"signature-drop\").contract;\n}\n\n/**\n * Hook used to upload any files or JSON data to decentralized storage systems like IPFS,\n * using the `storageInterface` configured on the `ThirdwebProvider`\n *\n * @param options - Configure the options for your upload\n * @returns Function used to upload files or JSON to decentralized storage systems\n *\n * @example\n * ```jsx\n * import { useStorageUpload } from \"@thirdweb-dev/react\";\n *\n * export default function Component() {\n *   const { mutateAsync: upload, isLoading } = useStorageUpload();\n *\n *   async function uploadData() {\n *     const filesToUpload = [...];\n *     const uris = await upload({ data: files });\n *     console.log(uris);\n *   }\n *\n *   return (\n *     <button onClick={uploadData}>\n *       Upload\n *     </button>\n *   )\n * }\n * ```\n * @see {@link https://portal.thirdweb.com/react/react.usestorageupload?utm_source=sdk | Documentation}\n */\nfunction useStorageUpload(uploadOptions) {\n  const sdk = useSDK();\n  return useMutation(async _ref => {\n    let {\n      data,\n      options\n    } = _ref;\n    invariant(sdk, \"sdk must be defined\");\n    return await sdk.storage.uploadBatch(data, options || uploadOptions);\n  });\n}\n\n/**\n * Get the configured `ThirdwebStorage` instance\n * @returns The `storageInterface` configured on the `ThirdwebProvider`\n * @see {@link https://portal.thirdweb.com/react/react.usestorage?utm_source=sdk | Documentation}\n */\nfunction useStorage() {\n  const sdk = useSDK();\n  return sdk?.storage;\n}\n\n/**\n * Hook for checking whether the connected wallet is on the correct network specified by the `network` passed to the `<ThirdwebProvider />`.\n *\n * ```javascript\n * import { useNetworkMismatch } from \"@thirdweb-dev/react\"\n * ```\n *\n * @returns `true` if the chainId of the connected wallet is different from the chainId of the network passed into <ThirdwebProvider />\n *\n * @see {@link https://portal.thirdweb.com/react/react.usenetworkmismatch?utm_source=sdk | Documentation}\n *\n * @example\n * You can check if a users wallet is connected to the correct chain ID as follows:\n * ```javascript\n * import { useNetworkMismatch } from \"@thirdweb-dev/react\"\n *\n * const App = () => {\n *   const isMismatched = useNetworkMismatch()\n *\n *   return <div>{isMismatched}</div>\n * }\n * ```\n *\n * From here, you can prompt users to switch their network using the `useNetwork` hook.\n *\n * @public\n */\nfunction useNetworkMismatch() {\n  const walletChainId = useChainId();\n  const sdkChainId = useSDKChainId();\n  if (!sdkChainId) {\n    // we don't know yet\n    return false;\n  }\n  if (sdkChainId === -1) {\n    // means no network is set in the <ThirdwebProvider />, so we don't care about the network mismatch\n    return false;\n  }\n  if (!walletChainId) {\n    // means no wallet is connected yet, so we don't care about the network mismatch\n    return false;\n  }\n  // check if the chainIds are different\n  return sdkChainId !== walletChainId;\n}\n\n/**\n * @internal\n */\nfunction useReadonlySDK(readonlyRpcUrl, sdkOptions, storageInterface) {\n  return useMemo(() => {\n    return new ThirdwebSDK$1(readonlyRpcUrl, sdkOptions, storageInterface);\n    // storageInterface should be constant!\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [readonlyRpcUrl, sdkOptions]);\n}\n\n/**\n *\n * @internal\n */\nfunction useSigner() {\n  const context = useContext(ThirdwebConnectedWalletContext);\n  invariant(context, \"useSigner() hook must be used within a <ThirdwebProvider/>\");\n  return context.signer;\n}\n\nfunction useSupportedWallet(id) {\n  const context = useWalletContext();\n  const wallet = context?.wallets.find(_wallet => _wallet.id === id);\n  if (!wallet) {\n    throw new Error(`Wallet with id \"${id}\" is not supported`);\n  }\n  return wallet;\n}\n\n/**\n * Get App URI\n *\n * @example\n * ```javascript\n * const { data: contractMetadata, isLoading, error } = useAppURI(contract);\n * ```\n *\n * @param contract - the {@link SmartContract} instance of the contract to get the appURI of\n * @returns a response object that includes the appURI of the contract\n * @twfeature AppURI\n * @beta\n */\nfunction useAppURI(contract) {\n  return useQueryWithNetwork(cacheKeys.contract.app.get(contract?.getAddress()), async () => {\n    requiredParamInvariant(contract, \"Contract is required\");\n    invariant(contract.app, \"Contract does not support app\");\n    return await contract.app.get();\n  }, {\n    enabled: !!contract\n  });\n}\n\n/**\n * Set App URI\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const {\n *     mutate: useSetAppURI,\n *     isLoading,\n *     error,\n *   } = useSetAppURI(contract);\n *\n *   if (error) {\n *     console.error(\"failed to update appURI\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={() => useSetAppURI({ uri })}\n *     >\n *       Update App URI\n *     </button>\n *   );\n * };\n * ```\n * @param contract - an instance of a {@link SmartContract}\n * @returns a mutation object that can be used to update the appURI of a contract\n * @twfeature AppUR\n * @beta\n */\nfunction useSetAppURI(contract) {\n  const queryClient = useQueryClient();\n  const contractAddress = contract?.getAddress();\n  const activeChainId = useSDKChainId();\n  return useMutation(params => {\n    requiredParamInvariant(contract, \"Contract is required\");\n    invariant(contract.app, \"Contract does not support app\");\n    return contract.app.set(params.uri);\n  }, {\n    onSettled: () => invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n  });\n}\n\nfunction useENS() {\n  const address = useAddress();\n  const supportedChains = useSupportedChains();\n  const {\n    clientId\n  } = useWalletContext();\n  const ethereum = supportedChains.find(chain => chain.chainId === 1);\n  return useQuery({\n    queryKey: [\"ens\", address, ethereum?.rpc],\n    cacheTime: 60 * 60 * 24 * 1000,\n    // 24h\n    staleTime: 60 * 60 * 1000,\n    // 1h\n    retry: false,\n    enabled: !!address,\n    queryFn: async () => {\n      if (!address) {\n        return null;\n      }\n      const provider = getChainProvider(1, {\n        clientId,\n        supportedChains: ethereum ? [{\n          chainId: 1,\n          rpc: [...ethereum.rpc],\n          nativeCurrency: ethereum.nativeCurrency,\n          slug: ethereum.slug\n        }] : undefined\n      });\n      if (provider instanceof providers.JsonRpcProvider) {\n        const [ens, avatarUrl] = await Promise.all([provider.lookupAddress(address), provider.getAvatar(address)]);\n        return {\n          ens,\n          avatarUrl\n        };\n      }\n      return {\n        ens: await provider.lookupAddress(address),\n        avatarUrl: null\n      };\n    }\n  });\n}\n\n/**\n * Hook that listens to transactions on a given chain for a given address.\n *\n * ```javascript\n * import { useWatchTransactions } from \"@thirdweb-dev/react\"\n * ```\n *\n * @example\n * ```js\n * const transactions = useWatchTransactions({\n *  address: \"0x1234\",\n *  network: \"ethereum\",\n * });\n * ```\n *\n * @returns an array of {@link Transaction} objects\n */\nfunction useWatchTransactions(watchTransactionParams) {\n  const {\n    address,\n    network,\n    sdkOptions,\n    // default to 1000, max 10k\n    limit: paramLimit = 1000\n  } = watchTransactionParams;\n  // max limit of 10k transactions to let the array grow to, then we'll start dropping the oldest ones\n  const limit = Math.min(paramLimit, 10000);\n  const [transactions, setTransactions] = useState([]);\n  useEffect(() => {\n    if (!address || !network) {\n      // cant run yet\n      return;\n    }\n    // since this already returns a function to unsubscribe, we can just return it\n    return watchTransactions({\n      address,\n      network,\n      sdkOptions,\n      onTransactions: newTransactions => {\n        setTransactions(prevTransactions => {\n          const mergedTxns = [...newTransactions, ...prevTransactions];\n          // only keep the latest transactions\n          return mergedTxns.slice(0, limit);\n        });\n      }\n    });\n  }, [address, limit, network, sdkOptions]);\n  return transactions;\n}\n\nexport { useUnclaimedNFTs as $, useActiveClaimCondition as A, useClaimerProofs as B, useClaimConditions as C, useClaimIneligibilityReasons as D, useActiveClaimConditionForWallet as E, useSetClaimConditions as F, useResetClaimConditions as G, usePrimarySaleRecipient as H, useUpdatePrimarySaleRecipient as I, useRoyaltySettings as J, useUpdateRoyaltySettings as K, usePlatformFees as L, useUpdatePlatformFees as M, useMetadata as N, useUpdateMetadata as O, useContractType as P, contractType as Q, useCompilerMetadata as R, compilerMetadata as S, ThirdwebThemeContext as T, useContract as U, useContractMetadata as V, useContractMetadataUpdate as W, useContractEvents as X, useContractRead as Y, useContractWrite as Z, __DEV__ as _, ThirdwebProviderCore as a, useBurnToken as a$, useClaimedNFTs as a0, useUnclaimedNFTSupply as a1, useClaimedNFTSupply as a2, useBatchesToReveal as a3, useClaimNFT as a4, useLazyMint as a5, useDelayedRevealLazyMint as a6, useRevealLazyMint as a7, useListing as a8, useDirectListing as a9, useBuyDirectListing as aA, useNFT as aB, useNFTs as aC, useTotalCount as aD, useTotalCirculatingSupply as aE, useOwnedNFTs as aF, useNFTBalance as aG, useMintNFT as aH, useMintNFTSupply as aI, useTransferNFT as aJ, useAirdropNFT as aK, useBurnNFT as aL, useSharedMetadata as aM, useSetSharedMetadata as aN, useAllRoleMembers as aO, useRoleMembers as aP, useIsAddressRole as aQ, useSetAllRoleMembers as aR, useGrantRole as aS, useRevokeRole as aT, useTokenSupply as aU, useTokenBalance as aV, useTokenDecimals as aW, useMintToken as aX, useClaimToken as aY, useTransferToken as aZ, useTransferBatchToken as a_, useEnglishAuction as aa, useListings as ab, useDirectListings as ac, useValidDirectListings as ad, useEnglishAuctions as ae, useValidEnglishAuctions as af, useListingsCount as ag, useDirectListingsCount as ah, useEnglishAuctionsCount as ai, useActiveListings as aj, useWinningBid as ak, useEnglishAuctionWinningBid as al, useAuctionWinner as am, useBidBuffer as an, useMinimumNextBid as ao, useCreateDirectListing as ap, useCreateAuctionListing as aq, useCancelListing as ar, useCancelDirectListing as as, useCancelEnglishAuction as at, useMakeBid as au, useMakeOffer as av, useAcceptDirectListingOffer as aw, useExecuteAuctionSale as ax, useOffers as ay, useBuyNow as az, useConnect as b, useIsAccountDeployed as b0, useAccounts as b1, useCreateAccount as b2, useAccountsForAddress as b3, useAccountSigners as b4, useAddAdmin as b5, useRemoveAdmin as b6, useCreateSessionKey as b7, useRevokeSessionKey as b8, useAccountAdmins as b9, useSetAppURI as bA, useENS as bB, ThirdwebSDKProvider as bC, useSDK as bD, useSDKChainId as bE, invalidateContractAndBalances as bF, getErcs as bG, getErc1155 as bH, getErc721 as bI, getErc20 as bJ, useWatchTransactions as bK, useAccountAdminsAndSigners as ba, useLogin as bb, useLogout as bc, useUser as bd, useAuth as be, useSwitchAccount as bf, useEditionDrop as bg, useEdition as bh, useNFTDrop as bi, useMarketplace as bj, useNFTCollection as bk, usePack as bl, useToken as bm, useTokenDrop as bn, useVote as bo, useSplit as bp, useMultiwrap as bq, useSignatureDrop as br, useStorageUpload as bs, useStorage as bt, useNetworkMismatch as bu, useReadonlySDK as bv, useSigner as bw, useSupportedChains as bx, useSupportedWallet as by, useAppURI as bz, useConnectionStatus as c, useCreateWalletInstance as d, useDisconnect as e, useSwitchChain as f, useWallets as g, useWalletConfig as h, useSetConnectionStatus as i, useSetConnectedWallet as j, useNetwork as k, useWalletContext as l, useBalance as m, useConnectedWallet as n, useAddress as o, useChainId as p, useActiveChain as q, resolveMimeType as r, useChain as s, useThirdwebAuthContext as t, useWallet as u, ThirdwebAuthProvider as v, ThirdwebConfigProvider as w, useThirdwebConfigContext as x, ThirdwebConnectedWalletProvider as y, useThirdwebConnectedWalletContext as z };\n"],"mappings":"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AAC,EAAE,MAAM;IACpFvK,sBAAsB,CAACuL,QAAQ,EAAE,+BAA+B,CAAC;IACjE3M,SAAS,CAAC2M,QAAQ,CAACkB,OAAO,CAACqa,sBAAsB,EAAE,4EAA4E,CAAC;IAChI,OAAOvb,QAAQ,CAACkB,OAAO,CAACqa,sBAAsB,CAAC,CAAC;EAClD,CAAC,EAAE;IACDrV,OAAO,EAAE,CAAC,CAAClG;EACb,CAAC,CAAC;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASwb,mBAAmBA,CAAA,EAAG;EAC7B,MAAMC,WAAW,GAAG1d,SAAS,CAAC,aAAa,CAAC;EAC5C,OAAO9K,WAAW,CAAC,MAAM8I,IAAI,IAAI;IAC/BtH,sBAAsB,CAACgnB,WAAW,EAAE,yBAAyB,CAAC;IAC9D,OAAOA,WAAW,CAACC,gBAAgB,CAAC3f,IAAI,CAAC4f,UAAU,EAAE5f,IAAI,CAAC6f,WAAW,CAAC;EACxE,CAAC,CAAC;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,mBAAmBA,CAAA,EAAG;EAC7B,MAAMJ,WAAW,GAAG1d,SAAS,CAAC,aAAa,CAAC;EAC5C,OAAO9K,WAAW,CAAC,MAAM0oB,UAAU,IAAI;IACrClnB,sBAAsB,CAACgnB,WAAW,EAAE,yBAAyB,CAAC;IAC9D,OAAOA,WAAW,CAACK,gBAAgB,CAACH,UAAU,CAAC;EACjD,CAAC,CAAC;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASI,WAAWA,CAAA,EAAG;EACrB,MAAMN,WAAW,GAAG1d,SAAS,CAAC,aAAa,CAAC;EAC5C,OAAO9K,WAAW,CAAC,MAAM+oB,YAAY,IAAI;IACvCvnB,sBAAsB,CAACgnB,WAAW,EAAE,yBAAyB,CAAC;IAC9D,OAAOA,WAAW,CAACQ,QAAQ,CAACD,YAAY,CAAC;EAC3C,CAAC,CAAC;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,cAAcA,CAAA,EAAG;EACxB,MAAMT,WAAW,GAAG1d,SAAS,CAAC,aAAa,CAAC;EAC5C,OAAO9K,WAAW,CAAC,MAAM+oB,YAAY,IAAI;IACvCvnB,sBAAsB,CAACgnB,WAAW,EAAE,yBAAyB,CAAC;IAC9D,OAAOA,WAAW,CAACU,WAAW,CAACH,YAAY,CAAC;EAC9C,CAAC,CAAC;AACJ;AAEA,MAAMI,OAAO,GAAG,IAAIC,GAAG,CAAC,CAAC;AACzB,SAASC,sBAAsBA,CAACC,UAAU,EAAEC,WAAW,EAAE;EACvD;EACA,IAAI9U,OAAO,EAAE;IACX,IAAI0U,OAAO,CAACjmB,GAAG,CAAE,GAAEomB,UAAW,IAAGC,WAAY,EAAC,CAAC,EAAE;MAC/C;IACF;IACAJ,OAAO,CAACK,GAAG,CAAE,GAAEF,UAAW,IAAGC,WAAY,EAAC,CAAC;IAC3CliB,OAAO,CAAC2O,IAAI,CAAE,KAAIsT,UAAW,gFAA+EC,WAAY,aAAY,CAAC;EACvI;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,cAAcA,CAAC1d,eAAe,EAAE;EACvCsd,sBAAsB,CAAE,mBAAkBtd,eAAe,IAAI,OAAQ,IAAG,EAAG,gBAAeA,eAAe,IAAI,OAAQ,oBAAmB,CAAC;EACzI,OAAOkS,WAAW,CAAClS,eAAe,EAAE,cAAc,CAAC,CAACgB,QAAQ;AAC9D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS2c,UAAUA,CAAC3d,eAAe,EAAE;EACnCsd,sBAAsB,CAAE,eAActd,eAAe,IAAI,OAAQ,IAAG,EAAG,gBAAeA,eAAe,IAAI,OAAQ,eAAc,CAAC;EAChI,OAAOkS,WAAW,CAAClS,eAAe,EAAE,SAAS,CAAC,CAACgB,QAAQ;AACzD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS4c,UAAUA,CAAC5d,eAAe,EAAE;EACnCsd,sBAAsB,CAAE,eAActd,eAAe,IAAI,OAAQ,IAAG,EAAG,gBAAeA,eAAe,IAAI,OAAQ,gBAAe,CAAC;EACjI,OAAOkS,WAAW,CAAClS,eAAe,EAAE,UAAU,CAAC,CAACgB,QAAQ;AAC1D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS6c,cAAcA,CAAC7d,eAAe,EAAE;EACvCsd,sBAAsB,CAAE,mBAAkBtd,eAAe,IAAI,OAAQ,IAAG,EAAG,gBAAeA,eAAe,IAAI,OAAQ,mBAAkB,CAAC;EACxI,OAAOkS,WAAW,CAAClS,eAAe,EAAE,aAAa,CAAC,CAACgB,QAAQ;AAC7D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS8c,gBAAgBA,CAAC9d,eAAe,EAAE;EACzCsd,sBAAsB,CAAE,qBAAoBtd,eAAe,IAAI,OAAQ,IAAG,EAAG,gBAAeA,eAAe,IAAI,OAAQ,sBAAqB,CAAC;EAC7I,OAAOkS,WAAW,CAAClS,eAAe,EAAE,gBAAgB,CAAC,CAACgB,QAAQ;AAChE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS+c,OAAOA,CAAC/d,eAAe,EAAE;EAChCsd,sBAAsB,CAAE,YAAWtd,eAAe,IAAI,OAAQ,IAAG,EAAG,gBAAeA,eAAe,IAAI,OAAQ,YAAW,CAAC;EAC1H,OAAOkS,WAAW,CAAClS,eAAe,EAAE,MAAM,CAAC,CAACgB,QAAQ;AACtD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASgd,QAAQA,CAAChe,eAAe,EAAE;EACjCsd,sBAAsB,CAAE,aAAYtd,eAAe,IAAI,OAAQ,IAAG,EAAG,gBAAeA,eAAe,IAAI,OAAQ,aAAY,CAAC;EAC5H,OAAOkS,WAAW,CAAClS,eAAe,EAAE,OAAO,CAAC,CAACgB,QAAQ;AACvD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASid,YAAYA,CAACje,eAAe,EAAE;EACrCsd,sBAAsB,CAAE,iBAAgBtd,eAAe,IAAI,OAAQ,IAAG,EAAG,gBAAeA,eAAe,IAAI,OAAQ,kBAAiB,CAAC;EACrI,OAAOkS,WAAW,CAAClS,eAAe,EAAE,YAAY,CAAC,CAACgB,QAAQ;AAC5D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASkd,OAAOA,CAACle,eAAe,EAAE;EAChCsd,sBAAsB,CAAE,YAAWtd,eAAe,IAAI,OAAQ,IAAG,EAAG,gBAAeA,eAAe,IAAI,OAAQ,YAAW,CAAC;EAC1H,OAAOkS,WAAW,CAAClS,eAAe,EAAE,MAAM,CAAC,CAACgB,QAAQ;AACtD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASmd,QAAQA,CAACne,eAAe,EAAE;EACjCsd,sBAAsB,CAAE,aAAYtd,eAAe,IAAI,OAAQ,IAAG,EAAG,gBAAeA,eAAe,IAAI,OAAQ,aAAY,CAAC;EAC5H,OAAOkS,WAAW,CAAClS,eAAe,EAAE,OAAO,CAAC,CAACgB,QAAQ;AACvD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASod,YAAYA,CAACpe,eAAe,EAAE;EACrCsd,sBAAsB,CAAE,iBAAgBtd,eAAe,IAAI,OAAQ,IAAG,EAAG,gBAAeA,eAAe,IAAI,OAAQ,iBAAgB,CAAC;EACpI,OAAOkS,WAAW,CAAClS,eAAe,EAAE,WAAW,CAAC,CAACgB,QAAQ;AAC3D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASqd,gBAAgBA,CAAC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"},"metadata":{},"sourceType":"module","externalDependencies":[]}