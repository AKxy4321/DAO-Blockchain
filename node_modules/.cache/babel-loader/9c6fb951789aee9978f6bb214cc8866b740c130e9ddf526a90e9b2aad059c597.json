{"ast":null,"code":"var _jsxFileName = \"C:\\\\Misc\\\\Documents\\\\Career\\\\FinTech\\\\BlockChain\\\\FrontEnd\\\\buildspace-dao-starter\\\\src\\\\App.jsx\",\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect, useMemo } from 'react';\nimport { useAddress, ConnectWallet, Web3Button, useContract, useNFTBalance } from '@thirdweb-dev/react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  contract: token\n} = useContract(process.env.TOKEN_ADDRESS, 'token');\nconst App = () => {\n  _s2();\n  var _s = $RefreshSig$();\n  const address = useAddress();\n  console.log(\"👋 Address:\", address);\n  const editionDropAddress = process.env.EDITION_DROP_ADDRESS;\n  const {\n    contract: editionDrop\n  } = useContract(editionDropAddress, \"edition-drop\");\n\n  // Hook to check if the user has our NFT\n  const {\n    data: nftBalance\n  } = useNFTBalance(editionDrop, address, \"0\");\n  const hasClaimedNFT = _s(useMemo(_s(() => {\n    _s();\n    return nftBalance && nftBalance.gt(0);\n    const [memberTokenAmounts, setMemberTokenAmounts] = useState([]);\n    const [memberAddresses, setMemberAddresses] = useState([]);\n    const shortenAddress = str => {\n      return str.substring(0, 6) + '...' + str.substring(str.length - 4);\n    };\n    useEffect(() => {\n      if (!hasClaimedNFT) {\n        return;\n      }\n      const getAllAddresses = async () => {\n        try {\n          const memberAddresses = process.env.MEMBERS.split(',');\n          setMemberAddresses(memberAddresses);\n          console.log('🚀 Members addresses', memberAddresses);\n        } catch (error) {\n          console.error('failed to get member list', error);\n        }\n      };\n      getAllAddresses();\n    }, [hasClaimedNFT, memberAddresses]);\n    useEffect(() => {\n      if (!hasClaimedNFT) {\n        return;\n      }\n      const getAllBalances = async () => {\n        try {\n          const amounts = await (token === null || token === void 0 ? void 0 : token.history.getAllHolderBalances());\n          setMemberTokenAmounts(amounts);\n          console.log('👜 Amounts', amounts);\n        } catch (error) {\n          console.error('failed to get member balances', error);\n        }\n      };\n      getAllBalances();\n    }, [hasClaimedNFT, token === null || token === void 0 ? void 0 : token.history]);\n    const memberList = useMemo(() => {\n      return memberAddresses.map(address => {\n        // We're checking if we are finding the address in the memberTokenAmounts array.\n        // If we are, we'll return the amount of token the user has.\n        // Otherwise, return 0.\n        const member = memberTokenAmounts === null || memberTokenAmounts === void 0 ? void 0 : memberTokenAmounts.find(({\n          holder\n        }) => holder === address);\n        return {\n          address,\n          tokenAmount: (member === null || member === void 0 ? void 0 : member.balance.displayValue) || '0'\n        };\n      });\n    }, [memberAddresses, memberTokenAmounts]);\n  }, \"SQ8t+q2s7eShCudpt3as4nVOZ/c=\"), [nftBalance]), \"SQ8t+q2s7eShCudpt3as4nVOZ/c=\");\n  if (!address) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"landing\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Welcome to DemonSlayerDAO\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"btn-hero\",\n        children: /*#__PURE__*/_jsxDEV(ConnectWallet, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this);\n  }\n  if (hasClaimedNFT) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"member-page\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\uD83C\\uDF6ADAO Member Page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Congratulations on being a member\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mint-nft\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Mint your free \\uD83C\\uDF6ADAO Membership NFT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"btn-hero\",\n      children: /*#__PURE__*/_jsxDEV(Web3Button, {\n        contractAddress: \"0x8ed15E768DF13eD6808dc1220Bc94b11bFaC31f9\",\n        action: contract => {\n          contract.erc1155.claim(0, 1);\n        },\n        onSuccess: () => {\n          alert(`🌊 Successfully Minted! Check it out on OpenSea: https://testnets.opensea.io/assets/${editionDropAddress}/0`);\n        },\n        onError: error => {\n          console.log(\"Failed to mint NFT\", error);\n        },\n        children: \"Mint your NFT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n};\n_s2(App, \"gsviPO8aHY2/bopvcjcB3207v1s=\", false, function () {\n  return [useAddress, useContract, useNFTBalance];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","useAddress","ConnectWallet","Web3Button","useContract","useNFTBalance","jsxDEV","_jsxDEV","contract","token","process","env","TOKEN_ADDRESS","App","_s2","_s","$RefreshSig$","address","console","log","editionDropAddress","EDITION_DROP_ADDRESS","editionDrop","data","nftBalance","hasClaimedNFT","gt","memberTokenAmounts","setMemberTokenAmounts","memberAddresses","setMemberAddresses","shortenAddress","str","substring","length","getAllAddresses","MEMBERS","split","error","getAllBalances","amounts","history","getAllHolderBalances","memberList","map","member","find","holder","tokenAmount","balance","displayValue","className","children","fileName","_jsxFileName","lineNumber","columnNumber","contractAddress","action","erc1155","claim","onSuccess","alert","onError","_c","$RefreshReg$"],"sources":["C:/Misc/Documents/Career/FinTech/BlockChain/FrontEnd/buildspace-dao-starter/src/App.jsx"],"sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\r\nimport { useAddress, ConnectWallet, Web3Button, useContract, useNFTBalance } from '@thirdweb-dev/react';\r\nconst { contract: token } = useContract(process.env.TOKEN_ADDRESS, 'token');\r\n\r\nconst App = () => {\r\n  const address = useAddress();\r\n  console.log(\"👋 Address:\", address);\r\n\r\n  const editionDropAddress = process.env.EDITION_DROP_ADDRESS;\r\n  const { contract: editionDrop } = useContract(editionDropAddress, \"edition-drop\");\r\n\r\n  // Hook to check if the user has our NFT\r\n  const { data: nftBalance } = useNFTBalance(editionDrop, address, \"0\");\r\n\r\n  const hasClaimedNFT = useMemo(() => {\r\n    return nftBalance && nftBalance.gt(0);\r\n    \r\n    const [memberTokenAmounts, setMemberTokenAmounts] = useState([]);\r\n    const [memberAddresses, setMemberAddresses] = useState([]);\r\n    const shortenAddress = (str) => {\r\n      return str.substring(0, 6) + '...' + str.substring(str.length - 4);\r\n    };\r\n\r\n    useEffect(() => {\r\n      if (!hasClaimedNFT) {\r\n        return;\r\n      }\r\n      const getAllAddresses = async () => {\r\n        try {\r\n          const memberAddresses = process.env.MEMBERS.split(',');\r\n          setMemberAddresses(memberAddresses);\r\n          console.log('🚀 Members addresses', memberAddresses);\r\n        } catch (error) {\r\n          console.error('failed to get member list', error);\r\n        }\r\n      };\r\n      getAllAddresses();\r\n    }, [hasClaimedNFT, memberAddresses]);\r\n\r\n    useEffect(() => {\r\n      if (!hasClaimedNFT) {\r\n        return;\r\n      }\r\n      \r\n      const getAllBalances = async () => {\r\n        try {\r\n          const amounts = await token?.history.getAllHolderBalances();\r\n          setMemberTokenAmounts(amounts);\r\n          console.log('👜 Amounts', amounts);\r\n        } catch (error) {\r\n          console.error('failed to get member balances', error);\r\n        }\r\n      };\r\n      getAllBalances();\r\n    }, [hasClaimedNFT, token?.history]);\r\n\r\n    const memberList = useMemo(() => {\r\n      return memberAddresses.map((address) => {\r\n        // We're checking if we are finding the address in the memberTokenAmounts array.\r\n        // If we are, we'll return the amount of token the user has.\r\n        // Otherwise, return 0.\r\n        const member = memberTokenAmounts?.find(({ holder }) => holder === address);\r\n    \r\n        return {\r\n          address,\r\n          tokenAmount: member?.balance.displayValue || '0',\r\n        };\r\n      });\r\n    }, [memberAddresses, memberTokenAmounts]);\r\n  }, [nftBalance]);\r\n\r\n  if (!address) {\r\n    return (\r\n      <div className=\"landing\">\r\n        <h1>Welcome to DemonSlayerDAO</h1>\r\n        <div className=\"btn-hero\">\r\n          <ConnectWallet />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (hasClaimedNFT) {\r\n    return (\r\n      <div className=\"member-page\">\r\n        <h1>🍪DAO Member Page</h1>\r\n        <p>Congratulations on being a member</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"mint-nft\">\r\n      <h1>Mint your free 🍪DAO Membership NFT</h1>\r\n      <div className=\"btn-hero\">\r\n        <Web3Button \r\n          contractAddress='0x8ed15E768DF13eD6808dc1220Bc94b11bFaC31f9'\r\n          action={contract => {\r\n            contract.erc1155.claim(0, 1)\r\n          }}\r\n          onSuccess={() => {\r\n            alert(`🌊 Successfully Minted! Check it out on OpenSea: https://testnets.opensea.io/assets/${editionDropAddress}/0`);\r\n          }}\r\n          onError={error => {\r\n            console.log(\"Failed to mint NFT\", error);\r\n          }}\r\n        >\r\n          Mint your NFT \r\n        </Web3Button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}