{"ast":null,"code":"import { utils } from 'ethers';\nimport { dS as MULTIWRAP_CONTRACT_ROLES, dw as ContractWrapper, e as AbiSchema, ah as ContractMetadata, dT as MultiwrapContractSchema, b0 as ContractAppURI, ai as ContractRoles, ag as ContractEncoder, aQ as GasCostEstimator, aR as ContractEvents, aj as ContractRoyalty, aV as ContractOwner, bb as fetchCurrencyMetadata, dx as buildTransactionFunction, ba as normalizePriceValue, dG as isTokenApprovedForTransfer, aW as Transaction, dU as uploadOrExtractURI, cL as resolveAddress } from './contract-publisher-1ff1fe07.browser.esm.js';\nimport { h as hasERC20Allowance } from './hasERC20Allowance-1499f181.browser.esm.js';\nimport { S as StandardErc721 } from './erc-721-standard-c858f30e.browser.esm.js';\nimport './QueryParams-39bcad7a.browser.esm.js';\nimport 'bn.js';\nimport 'zod';\nimport 'tiny-invariant';\nimport 'uuid';\nimport '@thirdweb-dev/storage';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC165.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport 'fast-deep-equal';\nimport 'merkletreejs';\nimport '@thirdweb-dev/contracts-js/dist/abis/IThirdwebContract.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedRevealDeprecated.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ContractPublisher.json';\nimport '@thirdweb-dev/chains';\nimport 'bs58';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryLogic.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Permit.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721AQueryableUpgradeable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/SharedMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/zora_IERC721Drop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILoyaltyCard.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/INFTMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountFactoryCore.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccount.json';\nimport 'ethers/lib/utils';\nimport '@thirdweb-dev/contracts-js/dist/abis/Forwarder.json';\nimport 'cross-fetch';\nimport 'eventemitter3';\n\n/**\n * Multiwrap lets you wrap any number of ERC20, ERC721 and ERC1155 tokens you own into a single wrapped token bundle.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"multiwrap\");\n * ```\n *\n * @beta\n */\nclass Multiwrap extends StandardErc721 {\n  static contractRoles = MULTIWRAP_CONTRACT_ROLES;\n\n  /**\n   * Configure royalties\n   * @remarks Set your own royalties for the entire contract or per token\n   * @example\n   * ```javascript\n   * // royalties on the whole contract\n   * contract.royalties.setDefaultRoyaltyInfo({\n   *   seller_fee_basis_points: 100, // 1%\n   *   fee_recipient: \"0x...\"\n   * });\n   * // override royalty for a particular token\n   * contract.royalties.setTokenRoyaltyInfo(tokenId, {\n   *   seller_fee_basis_points: 500, // 5%\n   *   fee_recipient: \"0x...\"\n   * });\n   * ```\n   */\n\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options, storage);\n    super(contractWrapper, storage, chainId);\n    this.abi = AbiSchema.parse(abi || []);\n    this.metadata = new ContractMetadata(this.contractWrapper, MultiwrapContractSchema, this.storage);\n    this.app = new ContractAppURI(this.contractWrapper, this.metadata, this.storage);\n    this.roles = new ContractRoles(this.contractWrapper, Multiwrap.contractRoles);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.royalties = new ContractRoyalty(this.contractWrapper, this.metadata);\n    this.owner = new ContractOwner(this.contractWrapper);\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get the contents of a wrapped token bundle\n   * @example\n   * ```javascript\n   * const contents = await contract.getWrappedContents(wrappedTokenId);\n   * console.log(contents.erc20Tokens);\n   * console.log(contents.erc721Tokens);\n   * console.log(contents.erc1155Tokens);\n   * ```\n   * @param wrappedTokenId - the id of the wrapped token bundle\n   */\n  async getWrappedContents(wrappedTokenId) {\n    const wrappedTokens = await this.contractWrapper.read(\"getWrappedContents\", [wrappedTokenId]);\n    const erc20Tokens = [];\n    const erc721Tokens = [];\n    const erc1155Tokens = [];\n    for (const token of wrappedTokens) {\n      switch (token.tokenType) {\n        case 0:\n          {\n            const tokenMetadata = await fetchCurrencyMetadata(this.contractWrapper.getProvider(), token.assetContract);\n            erc20Tokens.push({\n              contractAddress: token.assetContract,\n              quantity: utils.formatUnits(token.totalAmount, tokenMetadata.decimals)\n            });\n            break;\n          }\n        case 1:\n          {\n            erc721Tokens.push({\n              contractAddress: token.assetContract,\n              tokenId: token.tokenId\n            });\n            break;\n          }\n        case 2:\n          {\n            erc1155Tokens.push({\n              contractAddress: token.assetContract,\n              tokenId: token.tokenId,\n              quantity: token.totalAmount.toString()\n            });\n            break;\n          }\n      }\n    }\n    return {\n      erc20Tokens,\n      erc721Tokens,\n      erc1155Tokens\n    };\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Wrap any number of ERC20/ERC721/ERC1155 tokens into a single wrapped token\n   * @example\n   * ```javascript\n   * const tx = await contract.wrap({\n   *   erc20Tokens: [{\n   *     contractAddress: \"0x...\",\n   *     quantity: \"0.8\"\n   *   }],\n   *   erc721Tokens: [{\n   *     contractAddress: \"0x...\",\n   *     tokenId: \"0\"\n   *   }],\n   *   erc1155Tokens: [{\n   *     contractAddress: \"0x...\",\n   *     tokenId: \"1\",\n   *     quantity: \"2\"\n   *   }]\n   * }, {\n   *     name: \"Wrapped bundle\",\n   *     description: \"This is a wrapped bundle of tokens and NFTs\",\n   *     image: \"ipfs://...\",\n   * });\n   * const receipt = tx.receipt(); // the transaction receipt\n   * const wrappedTokenId = tx.id; // the id of the wrapped token bundle\n   * ```\n   * @param contents - the contents to wrap\n   * @param wrappedTokenMetadata - metadata to represent the wrapped token bundle\n   * @param recipientAddress - Optional. The address to send the wrapped token bundle to\n   */\n  wrap = /* @__PURE__ */buildTransactionFunction(async (contents, wrappedTokenMetadata, recipientAddress) => {\n    const uri = await uploadOrExtractURI(wrappedTokenMetadata, this.storage);\n    const recipient = await resolveAddress(recipientAddress ? recipientAddress : await this.contractWrapper.getSignerAddress());\n    const tokens = await this.toTokenStructList(contents);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"wrap\",\n      args: [tokens, uri, recipient],\n      parse: receipt => {\n        const event = this.contractWrapper.parseLogs(\"TokensWrapped\", receipt?.logs);\n        if (event.length === 0) {\n          throw new Error(\"TokensWrapped event not found\");\n        }\n        const tokenId = event[0].args.tokenIdOfWrappedToken;\n        return {\n          id: tokenId,\n          receipt,\n          data: () => this.get(tokenId)\n        };\n      }\n    });\n  });\n\n  /**\n   * Unwrap a wrapped token bundle, and retrieve its contents\n   * @example\n   * ```javascript\n   * await contract.unwrap(wrappedTokenId);\n   * ```\n   * @param wrappedTokenId - the id of the wrapped token bundle\n   * @param recipientAddress - Optional. The address to send the unwrapped tokens to\n   */\n  unwrap = /* @__PURE__ */buildTransactionFunction(async (wrappedTokenId, recipientAddress) => {\n    const recipient = await resolveAddress(recipientAddress ? recipientAddress : await this.contractWrapper.getSignerAddress());\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"unwrap\",\n      args: [wrappedTokenId, recipient]\n    });\n  });\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  async toTokenStructList(contents) {\n    const tokens = [];\n    const provider = this.contractWrapper.getProvider();\n    const owner = await this.contractWrapper.getSignerAddress();\n    if (contents.erc20Tokens) {\n      for (const erc20 of contents.erc20Tokens) {\n        const normalizedQuantity = await normalizePriceValue(provider, erc20.quantity, erc20.contractAddress);\n        const hasAllowance = await hasERC20Allowance(this.contractWrapper, erc20.contractAddress, normalizedQuantity);\n        if (!hasAllowance) {\n          throw new Error(`ERC20 token with contract address \"${erc20.contractAddress}\" does not have enough allowance to transfer.\\n\\nYou can set allowance to the multiwrap contract to transfer these tokens by running:\\n\\nawait sdk.getToken(\"${erc20.contractAddress}\").setAllowance(\"${this.getAddress()}\", ${erc20.quantity});\\n\\n`);\n        }\n        tokens.push({\n          assetContract: erc20.contractAddress,\n          totalAmount: normalizedQuantity,\n          tokenId: 0,\n          tokenType: 0\n        });\n      }\n    }\n    if (contents.erc721Tokens) {\n      for (const erc721 of contents.erc721Tokens) {\n        const isApproved = await isTokenApprovedForTransfer(this.contractWrapper.getProvider(), this.getAddress(), erc721.contractAddress, erc721.tokenId, owner);\n        if (!isApproved) {\n          throw new Error(`ERC721 token \"${erc721.tokenId}\" with contract address \"${erc721.contractAddress}\" is not approved for transfer.\\n\\nYou can give approval the multiwrap contract to transfer this token by running:\\n\\nawait sdk.getNFTCollection(\"${erc721.contractAddress}\").setApprovalForToken(\"${this.getAddress()}\", ${erc721.tokenId});\\n\\n`);\n        }\n        tokens.push({\n          assetContract: erc721.contractAddress,\n          totalAmount: 0,\n          tokenId: erc721.tokenId,\n          tokenType: 1\n        });\n      }\n    }\n    if (contents.erc1155Tokens) {\n      for (const erc1155 of contents.erc1155Tokens) {\n        const isApproved = await isTokenApprovedForTransfer(this.contractWrapper.getProvider(), this.getAddress(), erc1155.contractAddress, erc1155.tokenId, owner);\n        if (!isApproved) {\n          throw new Error(`ERC1155 token \"${erc1155.tokenId}\" with contract address \"${erc1155.contractAddress}\" is not approved for transfer.\\n\\nYou can give approval the multiwrap contract to transfer this token by running:\\n\\nawait sdk.getEdition(\"${erc1155.contractAddress}\").setApprovalForAll(\"${this.getAddress()}\", true);\\n\\n`);\n        }\n        tokens.push({\n          assetContract: erc1155.contractAddress,\n          totalAmount: erc1155.quantity,\n          tokenId: erc1155.tokenId,\n          tokenType: 2\n        });\n      }\n    }\n    return tokens;\n  }\n\n  /**\n   * @internal\n   */\n  async prepare(method, args, overrides) {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method,\n      args,\n      overrides\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName, args, overrides) {\n    return this.contractWrapper.call(functionName, args, overrides);\n  }\n}\nexport { Multiwrap };","map":{"version":3,"names":["utils","dS","MULTIWRAP_CONTRACT_ROLES","dw","ContractWrapper","e","AbiSchema","ah","ContractMetadata","dT","MultiwrapContractSchema","b0","ContractAppURI","ai","ContractRoles","ag","ContractEncoder","aQ","GasCostEstimator","aR","ContractEvents","aj","ContractRoyalty","aV","ContractOwner","bb","fetchCurrencyMetadata","dx","buildTransactionFunction","ba","normalizePriceValue","dG","isTokenApprovedForTransfer","aW","Transaction","dU","uploadOrExtractURI","cL","resolveAddress","h","hasERC20Allowance","S","StandardErc721","Multiwrap","contractRoles","constructor","network","address","storage","options","arguments","length","undefined","abi","chainId","contractWrapper","parse","metadata","app","roles","encoder","estimator","events","royalties","owner","getWrappedContents","wrappedTokenId","wrappedTokens","read","erc20Tokens","erc721Tokens","erc1155Tokens","token","tokenType","tokenMetadata","getProvider","assetContract","push","contractAddress","quantity","formatUnits","totalAmount","decimals","tokenId","toString","wrap","contents","wrappedTokenMetadata","recipientAddress","uri","recipient","getSignerAddress","tokens","toTokenStructList","fromContractWrapper","method","args","receipt","event","parseLogs","logs","Error","tokenIdOfWrappedToken","id","data","get","unwrap","provider","erc20","normalizedQuantity","hasAllowance","getAddress","erc721","isApproved","erc1155","prepare","overrides","call","functionName"],"sources":["C:/Misc/Documents/Career/FinTech/BlockChain/FrontEnd/buildspace-dao-starter/node_modules/@thirdweb-dev/sdk/dist/multiwrap-18fab528.browser.esm.js"],"sourcesContent":["import { utils } from 'ethers';\nimport { dS as MULTIWRAP_CONTRACT_ROLES, dw as ContractWrapper, e as AbiSchema, ah as ContractMetadata, dT as MultiwrapContractSchema, b0 as ContractAppURI, ai as ContractRoles, ag as ContractEncoder, aQ as GasCostEstimator, aR as ContractEvents, aj as ContractRoyalty, aV as ContractOwner, bb as fetchCurrencyMetadata, dx as buildTransactionFunction, ba as normalizePriceValue, dG as isTokenApprovedForTransfer, aW as Transaction, dU as uploadOrExtractURI, cL as resolveAddress } from './contract-publisher-1ff1fe07.browser.esm.js';\nimport { h as hasERC20Allowance } from './hasERC20Allowance-1499f181.browser.esm.js';\nimport { S as StandardErc721 } from './erc-721-standard-c858f30e.browser.esm.js';\nimport './QueryParams-39bcad7a.browser.esm.js';\nimport 'bn.js';\nimport 'zod';\nimport 'tiny-invariant';\nimport 'uuid';\nimport '@thirdweb-dev/storage';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC165.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport 'fast-deep-equal';\nimport 'merkletreejs';\nimport '@thirdweb-dev/contracts-js/dist/abis/IThirdwebContract.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedRevealDeprecated.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ContractPublisher.json';\nimport '@thirdweb-dev/chains';\nimport 'bs58';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryLogic.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Permit.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721AQueryableUpgradeable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/SharedMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/zora_IERC721Drop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILoyaltyCard.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/INFTMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountFactoryCore.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccount.json';\nimport 'ethers/lib/utils';\nimport '@thirdweb-dev/contracts-js/dist/abis/Forwarder.json';\nimport 'cross-fetch';\nimport 'eventemitter3';\n\n/**\n * Multiwrap lets you wrap any number of ERC20, ERC721 and ERC1155 tokens you own into a single wrapped token bundle.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"multiwrap\");\n * ```\n *\n * @beta\n */\nclass Multiwrap extends StandardErc721 {\n  static contractRoles = MULTIWRAP_CONTRACT_ROLES;\n\n  /**\n   * Configure royalties\n   * @remarks Set your own royalties for the entire contract or per token\n   * @example\n   * ```javascript\n   * // royalties on the whole contract\n   * contract.royalties.setDefaultRoyaltyInfo({\n   *   seller_fee_basis_points: 100, // 1%\n   *   fee_recipient: \"0x...\"\n   * });\n   * // override royalty for a particular token\n   * contract.royalties.setTokenRoyaltyInfo(tokenId, {\n   *   seller_fee_basis_points: 500, // 5%\n   *   fee_recipient: \"0x...\"\n   * });\n   * ```\n   */\n\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options, storage);\n    super(contractWrapper, storage, chainId);\n    this.abi = AbiSchema.parse(abi || []);\n    this.metadata = new ContractMetadata(this.contractWrapper, MultiwrapContractSchema, this.storage);\n    this.app = new ContractAppURI(this.contractWrapper, this.metadata, this.storage);\n    this.roles = new ContractRoles(this.contractWrapper, Multiwrap.contractRoles);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.royalties = new ContractRoyalty(this.contractWrapper, this.metadata);\n    this.owner = new ContractOwner(this.contractWrapper);\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get the contents of a wrapped token bundle\n   * @example\n   * ```javascript\n   * const contents = await contract.getWrappedContents(wrappedTokenId);\n   * console.log(contents.erc20Tokens);\n   * console.log(contents.erc721Tokens);\n   * console.log(contents.erc1155Tokens);\n   * ```\n   * @param wrappedTokenId - the id of the wrapped token bundle\n   */\n  async getWrappedContents(wrappedTokenId) {\n    const wrappedTokens = await this.contractWrapper.read(\"getWrappedContents\", [wrappedTokenId]);\n    const erc20Tokens = [];\n    const erc721Tokens = [];\n    const erc1155Tokens = [];\n    for (const token of wrappedTokens) {\n      switch (token.tokenType) {\n        case 0:\n          {\n            const tokenMetadata = await fetchCurrencyMetadata(this.contractWrapper.getProvider(), token.assetContract);\n            erc20Tokens.push({\n              contractAddress: token.assetContract,\n              quantity: utils.formatUnits(token.totalAmount, tokenMetadata.decimals)\n            });\n            break;\n          }\n        case 1:\n          {\n            erc721Tokens.push({\n              contractAddress: token.assetContract,\n              tokenId: token.tokenId\n            });\n            break;\n          }\n        case 2:\n          {\n            erc1155Tokens.push({\n              contractAddress: token.assetContract,\n              tokenId: token.tokenId,\n              quantity: token.totalAmount.toString()\n            });\n            break;\n          }\n      }\n    }\n    return {\n      erc20Tokens,\n      erc721Tokens,\n      erc1155Tokens\n    };\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Wrap any number of ERC20/ERC721/ERC1155 tokens into a single wrapped token\n   * @example\n   * ```javascript\n   * const tx = await contract.wrap({\n   *   erc20Tokens: [{\n   *     contractAddress: \"0x...\",\n   *     quantity: \"0.8\"\n   *   }],\n   *   erc721Tokens: [{\n   *     contractAddress: \"0x...\",\n   *     tokenId: \"0\"\n   *   }],\n   *   erc1155Tokens: [{\n   *     contractAddress: \"0x...\",\n   *     tokenId: \"1\",\n   *     quantity: \"2\"\n   *   }]\n   * }, {\n   *     name: \"Wrapped bundle\",\n   *     description: \"This is a wrapped bundle of tokens and NFTs\",\n   *     image: \"ipfs://...\",\n   * });\n   * const receipt = tx.receipt(); // the transaction receipt\n   * const wrappedTokenId = tx.id; // the id of the wrapped token bundle\n   * ```\n   * @param contents - the contents to wrap\n   * @param wrappedTokenMetadata - metadata to represent the wrapped token bundle\n   * @param recipientAddress - Optional. The address to send the wrapped token bundle to\n   */\n  wrap = /* @__PURE__ */buildTransactionFunction(async (contents, wrappedTokenMetadata, recipientAddress) => {\n    const uri = await uploadOrExtractURI(wrappedTokenMetadata, this.storage);\n    const recipient = await resolveAddress(recipientAddress ? recipientAddress : await this.contractWrapper.getSignerAddress());\n    const tokens = await this.toTokenStructList(contents);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"wrap\",\n      args: [tokens, uri, recipient],\n      parse: receipt => {\n        const event = this.contractWrapper.parseLogs(\"TokensWrapped\", receipt?.logs);\n        if (event.length === 0) {\n          throw new Error(\"TokensWrapped event not found\");\n        }\n        const tokenId = event[0].args.tokenIdOfWrappedToken;\n        return {\n          id: tokenId,\n          receipt,\n          data: () => this.get(tokenId)\n        };\n      }\n    });\n  });\n\n  /**\n   * Unwrap a wrapped token bundle, and retrieve its contents\n   * @example\n   * ```javascript\n   * await contract.unwrap(wrappedTokenId);\n   * ```\n   * @param wrappedTokenId - the id of the wrapped token bundle\n   * @param recipientAddress - Optional. The address to send the unwrapped tokens to\n   */\n  unwrap = /* @__PURE__ */buildTransactionFunction(async (wrappedTokenId, recipientAddress) => {\n    const recipient = await resolveAddress(recipientAddress ? recipientAddress : await this.contractWrapper.getSignerAddress());\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"unwrap\",\n      args: [wrappedTokenId, recipient]\n    });\n  });\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  async toTokenStructList(contents) {\n    const tokens = [];\n    const provider = this.contractWrapper.getProvider();\n    const owner = await this.contractWrapper.getSignerAddress();\n    if (contents.erc20Tokens) {\n      for (const erc20 of contents.erc20Tokens) {\n        const normalizedQuantity = await normalizePriceValue(provider, erc20.quantity, erc20.contractAddress);\n        const hasAllowance = await hasERC20Allowance(this.contractWrapper, erc20.contractAddress, normalizedQuantity);\n        if (!hasAllowance) {\n          throw new Error(`ERC20 token with contract address \"${erc20.contractAddress}\" does not have enough allowance to transfer.\\n\\nYou can set allowance to the multiwrap contract to transfer these tokens by running:\\n\\nawait sdk.getToken(\"${erc20.contractAddress}\").setAllowance(\"${this.getAddress()}\", ${erc20.quantity});\\n\\n`);\n        }\n        tokens.push({\n          assetContract: erc20.contractAddress,\n          totalAmount: normalizedQuantity,\n          tokenId: 0,\n          tokenType: 0\n        });\n      }\n    }\n    if (contents.erc721Tokens) {\n      for (const erc721 of contents.erc721Tokens) {\n        const isApproved = await isTokenApprovedForTransfer(this.contractWrapper.getProvider(), this.getAddress(), erc721.contractAddress, erc721.tokenId, owner);\n        if (!isApproved) {\n          throw new Error(`ERC721 token \"${erc721.tokenId}\" with contract address \"${erc721.contractAddress}\" is not approved for transfer.\\n\\nYou can give approval the multiwrap contract to transfer this token by running:\\n\\nawait sdk.getNFTCollection(\"${erc721.contractAddress}\").setApprovalForToken(\"${this.getAddress()}\", ${erc721.tokenId});\\n\\n`);\n        }\n        tokens.push({\n          assetContract: erc721.contractAddress,\n          totalAmount: 0,\n          tokenId: erc721.tokenId,\n          tokenType: 1\n        });\n      }\n    }\n    if (contents.erc1155Tokens) {\n      for (const erc1155 of contents.erc1155Tokens) {\n        const isApproved = await isTokenApprovedForTransfer(this.contractWrapper.getProvider(), this.getAddress(), erc1155.contractAddress, erc1155.tokenId, owner);\n        if (!isApproved) {\n          throw new Error(`ERC1155 token \"${erc1155.tokenId}\" with contract address \"${erc1155.contractAddress}\" is not approved for transfer.\\n\\nYou can give approval the multiwrap contract to transfer this token by running:\\n\\nawait sdk.getEdition(\"${erc1155.contractAddress}\").setApprovalForAll(\"${this.getAddress()}\", true);\\n\\n`);\n        }\n        tokens.push({\n          assetContract: erc1155.contractAddress,\n          totalAmount: erc1155.quantity,\n          tokenId: erc1155.tokenId,\n          tokenType: 2\n        });\n      }\n    }\n    return tokens;\n  }\n\n  /**\n   * @internal\n   */\n  async prepare(method, args, overrides) {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method,\n      args,\n      overrides\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName, args, overrides) {\n    return this.contractWrapper.call(functionName, args, overrides);\n  }\n}\n\nexport { Multiwrap };\n"],"mappings":"AAAA,SAASA,KAAK,QAAQ,QAAQ;AAC9B,SAASC,EAAE,IAAIC,wBAAwB,EAAEC,EAAE,IAAIC,eAAe,EAAEC,CAAC,IAAIC,SAAS,EAAEC,EAAE,IAAIC,gBAAgB,EAAEC,EAAE,IAAIC,uBAAuB,EAAEC,EAAE,IAAIC,cAAc,EAAEC,EAAE,IAAIC,aAAa,EAAEC,EAAE,IAAIC,eAAe,EAAEC,EAAE,IAAIC,gBAAgB,EAAEC,EAAE,IAAIC,cAAc,EAAEC,EAAE,IAAIC,eAAe,EAAEC,EAAE,IAAIC,aAAa,EAAEC,EAAE,IAAIC,qBAAqB,EAAEC,EAAE,IAAIC,wBAAwB,EAAEC,EAAE,IAAIC,mBAAmB,EAAEC,EAAE,IAAIC,0BAA0B,EAAEC,EAAE,IAAIC,WAAW,EAAEC,EAAE,IAAIC,kBAAkB,EAAEC,EAAE,IAAIC,cAAc,QAAQ,8CAA8C;AACphB,SAASC,CAAC,IAAIC,iBAAiB,QAAQ,6CAA6C;AACpF,SAASC,CAAC,IAAIC,cAAc,QAAQ,4CAA4C;AAChF,OAAO,uCAAuC;AAC9C,OAAO,OAAO;AACd,OAAO,KAAK;AACZ,OAAO,gBAAgB;AACvB,OAAO,MAAM;AACb,OAAO,uBAAuB;AAC9B,OAAO,mDAAmD;AAC1D,OAAO,2DAA2D;AAClE,OAAO,4DAA4D;AACnE,OAAO,kDAAkD;AACzD,OAAO,0DAA0D;AACjE,OAAO,iBAAiB;AACxB,OAAO,cAAc;AACrB,OAAO,6DAA6D;AACpE,OAAO,oEAAoE;AAC3E,OAAO,oDAAoD;AAC3D,OAAO,mDAAmD;AAC1D,OAAO,6DAA6D;AACpE,OAAO,sBAAsB;AAC7B,OAAO,MAAM;AACb,OAAO,qEAAqE;AAC5E,OAAO,0DAA0D;AACjE,OAAO,iDAAiD;AACxD,OAAO,yDAAyD;AAChE,OAAO,4DAA4D;AACnE,OAAO,+DAA+D;AACtE,OAAO,wDAAwD;AAC/D,OAAO,0DAA0D;AACjE,OAAO,sDAAsD;AAC7D,OAAO,+DAA+D;AACtE,OAAO,2DAA2D;AAClE,OAAO,4DAA4D;AACnE,OAAO,0DAA0D;AACjE,OAAO,0DAA0D;AACjE,OAAO,6DAA6D;AACpE,OAAO,wEAAwE;AAC/E,OAAO,yDAAyD;AAChE,OAAO,qDAAqD;AAC5D,OAAO,2DAA2D;AAClE,OAAO,gEAAgE;AACvE,OAAO,mEAAmE;AAC1E,OAAO,4DAA4D;AACnE,OAAO,0DAA0D;AACjE,OAAO,4DAA4D;AACnE,OAAO,wDAAwD;AAC/D,OAAO,wDAAwD;AAC/D,OAAO,4DAA4D;AACnE,OAAO,6DAA6D;AACpE,OAAO,qDAAqD;AAC5D,OAAO,2DAA2D;AAClE,OAAO,gEAAgE;AACvE,OAAO,mEAAmE;AAC1E,OAAO,0DAA0D;AACjE,OAAO,8DAA8D;AACrE,OAAO,4DAA4D;AACnE,OAAO,iEAAiE;AACxE,OAAO,2DAA2D;AAClE,OAAO,mDAAmD;AAC1D,OAAO,6DAA6D;AACpE,OAAO,2DAA2D;AAClE,OAAO,4DAA4D;AACnE,OAAO,mDAAmD;AAC1D,OAAO,0DAA0D;AACjE,OAAO,wDAAwD;AAC/D,OAAO,kEAAkE;AACzE,OAAO,wDAAwD;AAC/D,OAAO,wDAAwD;AAC/D,OAAO,oDAAoD;AAC3D,OAAO,mDAAmD;AAC1D,OAAO,yDAAyD;AAChE,OAAO,0DAA0D;AACjE,OAAO,2DAA2D;AAClE,OAAO,+DAA+D;AACtE,OAAO,+DAA+D;AACtE,OAAO,oDAAoD;AAC3D,OAAO,kBAAkB;AACzB,OAAO,qDAAqD;AAC5D,OAAO,aAAa;AACpB,OAAO,eAAe;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,SAAS,SAASD,cAAc,CAAC;EACrC,OAAOE,aAAa,GAAG1C,wBAAwB;;EAE/C;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE2C,WAAWA,CAACC,OAAO,EAAEC,OAAO,EAAEC,OAAO,EAAE;IACrC,IAAIC,OAAO,GAAGC,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IACpF,IAAIG,GAAG,GAAGH,SAAS,CAACC,MAAM,GAAG,CAAC,GAAGD,SAAS,CAAC,CAAC,CAAC,GAAGE,SAAS;IACzD,IAAIE,OAAO,GAAGJ,SAAS,CAACC,MAAM,GAAG,CAAC,GAAGD,SAAS,CAAC,CAAC,CAAC,GAAGE,SAAS;IAC7D,IAAIG,eAAe,GAAGL,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,IAAI9C,eAAe,CAAC0C,OAAO,EAAEC,OAAO,EAAEM,GAAG,EAAEJ,OAAO,EAAED,OAAO,CAAC;IACtJ,KAAK,CAACO,eAAe,EAAEP,OAAO,EAAEM,OAAO,CAAC;IACxC,IAAI,CAACD,GAAG,GAAG/C,SAAS,CAACkD,KAAK,CAACH,GAAG,IAAI,EAAE,CAAC;IACrC,IAAI,CAACI,QAAQ,GAAG,IAAIjD,gBAAgB,CAAC,IAAI,CAAC+C,eAAe,EAAE7C,uBAAuB,EAAE,IAAI,CAACsC,OAAO,CAAC;IACjG,IAAI,CAACU,GAAG,GAAG,IAAI9C,cAAc,CAAC,IAAI,CAAC2C,eAAe,EAAE,IAAI,CAACE,QAAQ,EAAE,IAAI,CAACT,OAAO,CAAC;IAChF,IAAI,CAACW,KAAK,GAAG,IAAI7C,aAAa,CAAC,IAAI,CAACyC,eAAe,EAAEZ,SAAS,CAACC,aAAa,CAAC;IAC7E,IAAI,CAACgB,OAAO,GAAG,IAAI5C,eAAe,CAAC,IAAI,CAACuC,eAAe,CAAC;IACxD,IAAI,CAACM,SAAS,GAAG,IAAI3C,gBAAgB,CAAC,IAAI,CAACqC,eAAe,CAAC;IAC3D,IAAI,CAACO,MAAM,GAAG,IAAI1C,cAAc,CAAC,IAAI,CAACmC,eAAe,CAAC;IACtD,IAAI,CAACQ,SAAS,GAAG,IAAIzC,eAAe,CAAC,IAAI,CAACiC,eAAe,EAAE,IAAI,CAACE,QAAQ,CAAC;IACzE,IAAI,CAACO,KAAK,GAAG,IAAIxC,aAAa,CAAC,IAAI,CAAC+B,eAAe,CAAC;EACtD;;EAEA;AACF;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMU,kBAAkBA,CAACC,cAAc,EAAE;IACvC,MAAMC,aAAa,GAAG,MAAM,IAAI,CAACZ,eAAe,CAACa,IAAI,CAAC,oBAAoB,EAAE,CAACF,cAAc,CAAC,CAAC;IAC7F,MAAMG,WAAW,GAAG,EAAE;IACtB,MAAMC,YAAY,GAAG,EAAE;IACvB,MAAMC,aAAa,GAAG,EAAE;IACxB,KAAK,MAAMC,KAAK,IAAIL,aAAa,EAAE;MACjC,QAAQK,KAAK,CAACC,SAAS;QACrB,KAAK,CAAC;UACJ;YACE,MAAMC,aAAa,GAAG,MAAMhD,qBAAqB,CAAC,IAAI,CAAC6B,eAAe,CAACoB,WAAW,CAAC,CAAC,EAAEH,KAAK,CAACI,aAAa,CAAC;YAC1GP,WAAW,CAACQ,IAAI,CAAC;cACfC,eAAe,EAAEN,KAAK,CAACI,aAAa;cACpCG,QAAQ,EAAE/E,KAAK,CAACgF,WAAW,CAACR,KAAK,CAACS,WAAW,EAAEP,aAAa,CAACQ,QAAQ;YACvE,CAAC,CAAC;YACF;UACF;QACF,KAAK,CAAC;UACJ;YACEZ,YAAY,CAACO,IAAI,CAAC;cAChBC,eAAe,EAAEN,KAAK,CAACI,aAAa;cACpCO,OAAO,EAAEX,KAAK,CAACW;YACjB,CAAC,CAAC;YACF;UACF;QACF,KAAK,CAAC;UACJ;YACEZ,aAAa,CAACM,IAAI,CAAC;cACjBC,eAAe,EAAEN,KAAK,CAACI,aAAa;cACpCO,OAAO,EAAEX,KAAK,CAACW,OAAO;cACtBJ,QAAQ,EAAEP,KAAK,CAACS,WAAW,CAACG,QAAQ,CAAC;YACvC,CAAC,CAAC;YACF;UACF;MACJ;IACF;IACA,OAAO;MACLf,WAAW;MACXC,YAAY;MACZC;IACF,CAAC;EACH;;EAEA;AACF;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEc,IAAI,GAAG,eAAezD,wBAAwB,CAAC,OAAO0D,QAAQ,EAAEC,oBAAoB,EAAEC,gBAAgB,KAAK;IACzG,MAAMC,GAAG,GAAG,MAAMrD,kBAAkB,CAACmD,oBAAoB,EAAE,IAAI,CAACvC,OAAO,CAAC;IACxE,MAAM0C,SAAS,GAAG,MAAMpD,cAAc,CAACkD,gBAAgB,GAAGA,gBAAgB,GAAG,MAAM,IAAI,CAACjC,eAAe,CAACoC,gBAAgB,CAAC,CAAC,CAAC;IAC3H,MAAMC,MAAM,GAAG,MAAM,IAAI,CAACC,iBAAiB,CAACP,QAAQ,CAAC;IACrD,OAAOpD,WAAW,CAAC4D,mBAAmB,CAAC;MACrCvC,eAAe,EAAE,IAAI,CAACA,eAAe;MACrCwC,MAAM,EAAE,MAAM;MACdC,IAAI,EAAE,CAACJ,MAAM,EAAEH,GAAG,EAAEC,SAAS,CAAC;MAC9BlC,KAAK,EAAEyC,OAAO,IAAI;QAChB,MAAMC,KAAK,GAAG,IAAI,CAAC3C,eAAe,CAAC4C,SAAS,CAAC,eAAe,EAAEF,OAAO,EAAEG,IAAI,CAAC;QAC5E,IAAIF,KAAK,CAAC/C,MAAM,KAAK,CAAC,EAAE;UACtB,MAAM,IAAIkD,KAAK,CAAC,+BAA+B,CAAC;QAClD;QACA,MAAMlB,OAAO,GAAGe,KAAK,CAAC,CAAC,CAAC,CAACF,IAAI,CAACM,qBAAqB;QACnD,OAAO;UACLC,EAAE,EAAEpB,OAAO;UACXc,OAAO;UACPO,IAAI,EAAEA,CAAA,KAAM,IAAI,CAACC,GAAG,CAACtB,OAAO;QAC9B,CAAC;MACH;IACF,CAAC,CAAC;EACJ,CAAC,CAAC;;EAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEuB,MAAM,GAAG,eAAe9E,wBAAwB,CAAC,OAAOsC,cAAc,EAAEsB,gBAAgB,KAAK;IAC3F,MAAME,SAAS,GAAG,MAAMpD,cAAc,CAACkD,gBAAgB,GAAGA,gBAAgB,GAAG,MAAM,IAAI,CAACjC,eAAe,CAACoC,gBAAgB,CAAC,CAAC,CAAC;IAC3H,OAAOzD,WAAW,CAAC4D,mBAAmB,CAAC;MACrCvC,eAAe,EAAE,IAAI,CAACA,eAAe;MACrCwC,MAAM,EAAE,QAAQ;MAChBC,IAAI,EAAE,CAAC9B,cAAc,EAAEwB,SAAS;IAClC,CAAC,CAAC;EACJ,CAAC,CAAC;;EAEF;AACF;AACA;;EAEE,MAAMG,iBAAiBA,CAACP,QAAQ,EAAE;IAChC,MAAMM,MAAM,GAAG,EAAE;IACjB,MAAMe,QAAQ,GAAG,IAAI,CAACpD,eAAe,CAACoB,WAAW,CAAC,CAAC;IACnD,MAAMX,KAAK,GAAG,MAAM,IAAI,CAACT,eAAe,CAACoC,gBAAgB,CAAC,CAAC;IAC3D,IAAIL,QAAQ,CAACjB,WAAW,EAAE;MACxB,KAAK,MAAMuC,KAAK,IAAItB,QAAQ,CAACjB,WAAW,EAAE;QACxC,MAAMwC,kBAAkB,GAAG,MAAM/E,mBAAmB,CAAC6E,QAAQ,EAAEC,KAAK,CAAC7B,QAAQ,EAAE6B,KAAK,CAAC9B,eAAe,CAAC;QACrG,MAAMgC,YAAY,GAAG,MAAMtE,iBAAiB,CAAC,IAAI,CAACe,eAAe,EAAEqD,KAAK,CAAC9B,eAAe,EAAE+B,kBAAkB,CAAC;QAC7G,IAAI,CAACC,YAAY,EAAE;UACjB,MAAM,IAAIT,KAAK,CAAE,sCAAqCO,KAAK,CAAC9B,eAAgB,gKAA+J8B,KAAK,CAAC9B,eAAgB,oBAAmB,IAAI,CAACiC,UAAU,CAAC,CAAE,MAAKH,KAAK,CAAC7B,QAAS,QAAO,CAAC;QACpU;QACAa,MAAM,CAACf,IAAI,CAAC;UACVD,aAAa,EAAEgC,KAAK,CAAC9B,eAAe;UACpCG,WAAW,EAAE4B,kBAAkB;UAC/B1B,OAAO,EAAE,CAAC;UACVV,SAAS,EAAE;QACb,CAAC,CAAC;MACJ;IACF;IACA,IAAIa,QAAQ,CAAChB,YAAY,EAAE;MACzB,KAAK,MAAM0C,MAAM,IAAI1B,QAAQ,CAAChB,YAAY,EAAE;QAC1C,MAAM2C,UAAU,GAAG,MAAMjF,0BAA0B,CAAC,IAAI,CAACuB,eAAe,CAACoB,WAAW,CAAC,CAAC,EAAE,IAAI,CAACoC,UAAU,CAAC,CAAC,EAAEC,MAAM,CAAClC,eAAe,EAAEkC,MAAM,CAAC7B,OAAO,EAAEnB,KAAK,CAAC;QACzJ,IAAI,CAACiD,UAAU,EAAE;UACf,MAAM,IAAIZ,KAAK,CAAE,iBAAgBW,MAAM,CAAC7B,OAAQ,4BAA2B6B,MAAM,CAAClC,eAAgB,qJAAoJkC,MAAM,CAAClC,eAAgB,2BAA0B,IAAI,CAACiC,UAAU,CAAC,CAAE,MAAKC,MAAM,CAAC7B,OAAQ,QAAO,CAAC;QACvV;QACAS,MAAM,CAACf,IAAI,CAAC;UACVD,aAAa,EAAEoC,MAAM,CAAClC,eAAe;UACrCG,WAAW,EAAE,CAAC;UACdE,OAAO,EAAE6B,MAAM,CAAC7B,OAAO;UACvBV,SAAS,EAAE;QACb,CAAC,CAAC;MACJ;IACF;IACA,IAAIa,QAAQ,CAACf,aAAa,EAAE;MAC1B,KAAK,MAAM2C,OAAO,IAAI5B,QAAQ,CAACf,aAAa,EAAE;QAC5C,MAAM0C,UAAU,GAAG,MAAMjF,0BAA0B,CAAC,IAAI,CAACuB,eAAe,CAACoB,WAAW,CAAC,CAAC,EAAE,IAAI,CAACoC,UAAU,CAAC,CAAC,EAAEG,OAAO,CAACpC,eAAe,EAAEoC,OAAO,CAAC/B,OAAO,EAAEnB,KAAK,CAAC;QAC3J,IAAI,CAACiD,UAAU,EAAE;UACf,MAAM,IAAIZ,KAAK,CAAE,kBAAiBa,OAAO,CAAC/B,OAAQ,4BAA2B+B,OAAO,CAACpC,eAAgB,+IAA8IoC,OAAO,CAACpC,eAAgB,yBAAwB,IAAI,CAACiC,UAAU,CAAC,CAAE,eAAc,CAAC;QACtU;QACAnB,MAAM,CAACf,IAAI,CAAC;UACVD,aAAa,EAAEsC,OAAO,CAACpC,eAAe;UACtCG,WAAW,EAAEiC,OAAO,CAACnC,QAAQ;UAC7BI,OAAO,EAAE+B,OAAO,CAAC/B,OAAO;UACxBV,SAAS,EAAE;QACb,CAAC,CAAC;MACJ;IACF;IACA,OAAOmB,MAAM;EACf;;EAEA;AACF;AACA;EACE,MAAMuB,OAAOA,CAACpB,MAAM,EAAEC,IAAI,EAAEoB,SAAS,EAAE;IACrC,OAAOlF,WAAW,CAAC4D,mBAAmB,CAAC;MACrCvC,eAAe,EAAE,IAAI,CAACA,eAAe;MACrCwC,MAAM;MACNC,IAAI;MACJoB;IACF,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;EACE,MAAMC,IAAIA,CAACC,YAAY,EAAEtB,IAAI,EAAEoB,SAAS,EAAE;IACxC,OAAO,IAAI,CAAC7D,eAAe,CAAC8D,IAAI,CAACC,YAAY,EAAEtB,IAAI,EAAEoB,SAAS,CAAC;EACjE;AACF;AAEA,SAASzE,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}