{"ast":null,"code":"import { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { useMemo } from 'react';\nimport { jsx } from 'react/jsx-runtime';\nimport invariant from 'tiny-invariant';\nconst QueryClientProviderWithDefault = _ref => {\n  let {\n    queryClient,\n    children\n  } = _ref;\n  const queryClientWithDefault = useMemo(() => {\n    return queryClient ? queryClient : new QueryClient();\n  }, [queryClient]);\n  return /*#__PURE__*/jsx(QueryClientProvider, {\n    client: queryClientWithDefault,\n    children: children\n  });\n};\n\n// we prefix all our query keys with this to avoid possible collisions with user-defined queries that share the same query client\nconst TW_QUERY_KEY_PREFIX = \"__tw__\";\n// marker to make sure the query will not get stored in local storage by a query persister\nconst NEVER_PERSIST_QUERY_POSTFIX = {\n  persist: false\n};\nfunction ensureTWPrefix(key) {\n  if (key[0] === TW_QUERY_KEY_PREFIX) {\n    return key;\n  }\n  return [TW_QUERY_KEY_PREFIX, ...key];\n}\nfunction neverPersist(key) {\n  return [...key, NEVER_PERSIST_QUERY_POSTFIX];\n}\nfunction shouldNeverPersistQuery(key) {\n  return key[key.length - 1] === NEVER_PERSIST_QUERY_POSTFIX;\n}\n\n// SOL\n\nfunction createSOLQueryKey(key) {\n  return ensureTWPrefix([\"sol\", ...key]);\n}\nfunction createSOLQueryKeyWithNetwork(key, network) {\n  return createSOLQueryKey([network, ...key]);\n}\nfunction createSOLProgramQueryKey(program) {\n  let key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  const network = program?.network;\n  const address = program?.publicKey.toBase58();\n  return createSOLQueryKeyWithNetwork([\"program\", address, ...key], network || null);\n}\n\n/**\n * Makes a parameter required to be passed, but still allows it to be null or undefined.\n *\n * @beta\n */\n\nfunction requiredParamInvariant(condition, message) {\n  invariant(condition !== null || condition !== undefined, message);\n}\nexport { QueryClientProviderWithDefault as Q, createSOLProgramQueryKey as a, createSOLQueryKeyWithNetwork as c, ensureTWPrefix as e, neverPersist as n, requiredParamInvariant as r, shouldNeverPersistQuery as s };","map":{"version":3,"names":["QueryClient","QueryClientProvider","useMemo","jsx","invariant","QueryClientProviderWithDefault","_ref","queryClient","children","queryClientWithDefault","client","TW_QUERY_KEY_PREFIX","NEVER_PERSIST_QUERY_POSTFIX","persist","ensureTWPrefix","key","neverPersist","shouldNeverPersistQuery","length","createSOLQueryKey","createSOLQueryKeyWithNetwork","network","createSOLProgramQueryKey","program","arguments","undefined","address","publicKey","toBase58","requiredParamInvariant","condition","message","Q","a","c","e","n","r","s"],"sources":["C:/Misc/Documents/Career/FinTech/BlockChain/FrontEnd/buildspace-dao-starter/node_modules/@thirdweb-dev/react-core/dist/required-param-d1f74675.browser.esm.js"],"sourcesContent":["import { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { useMemo } from 'react';\nimport { jsx } from 'react/jsx-runtime';\nimport invariant from 'tiny-invariant';\n\nconst QueryClientProviderWithDefault = _ref => {\n  let {\n    queryClient,\n    children\n  } = _ref;\n  const queryClientWithDefault = useMemo(() => {\n    return queryClient ? queryClient : new QueryClient();\n  }, [queryClient]);\n  return /*#__PURE__*/jsx(QueryClientProvider, {\n    client: queryClientWithDefault,\n    children: children\n  });\n};\n\n// we prefix all our query keys with this to avoid possible collisions with user-defined queries that share the same query client\nconst TW_QUERY_KEY_PREFIX = \"__tw__\";\n// marker to make sure the query will not get stored in local storage by a query persister\nconst NEVER_PERSIST_QUERY_POSTFIX = {\n  persist: false\n};\nfunction ensureTWPrefix(key) {\n  if (key[0] === TW_QUERY_KEY_PREFIX) {\n    return key;\n  }\n  return [TW_QUERY_KEY_PREFIX, ...key];\n}\nfunction neverPersist(key) {\n  return [...key, NEVER_PERSIST_QUERY_POSTFIX];\n}\nfunction shouldNeverPersistQuery(key) {\n  return key[key.length - 1] === NEVER_PERSIST_QUERY_POSTFIX;\n}\n\n// SOL\n\nfunction createSOLQueryKey(key) {\n  return ensureTWPrefix([\"sol\", ...key]);\n}\nfunction createSOLQueryKeyWithNetwork(key, network) {\n  return createSOLQueryKey([network, ...key]);\n}\nfunction createSOLProgramQueryKey(program) {\n  let key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  const network = program?.network;\n  const address = program?.publicKey.toBase58();\n  return createSOLQueryKeyWithNetwork([\"program\", address, ...key], network || null);\n}\n\n/**\n * Makes a parameter required to be passed, but still allows it to be null or undefined.\n *\n * @beta\n */\n\nfunction requiredParamInvariant(condition, message) {\n  invariant(condition !== null || condition !== undefined, message);\n}\n\nexport { QueryClientProviderWithDefault as Q, createSOLProgramQueryKey as a, createSOLQueryKeyWithNetwork as c, ensureTWPrefix as e, neverPersist as n, requiredParamInvariant as r, shouldNeverPersistQuery as s };\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,mBAAmB,QAAQ,uBAAuB;AACxE,SAASC,OAAO,QAAQ,OAAO;AAC/B,SAASC,GAAG,QAAQ,mBAAmB;AACvC,OAAOC,SAAS,MAAM,gBAAgB;AAEtC,MAAMC,8BAA8B,GAAGC,IAAI,IAAI;EAC7C,IAAI;IACFC,WAAW;IACXC;EACF,CAAC,GAAGF,IAAI;EACR,MAAMG,sBAAsB,GAAGP,OAAO,CAAC,MAAM;IAC3C,OAAOK,WAAW,GAAGA,WAAW,GAAG,IAAIP,WAAW,CAAC,CAAC;EACtD,CAAC,EAAE,CAACO,WAAW,CAAC,CAAC;EACjB,OAAO,aAAaJ,GAAG,CAACF,mBAAmB,EAAE;IAC3CS,MAAM,EAAED,sBAAsB;IAC9BD,QAAQ,EAAEA;EACZ,CAAC,CAAC;AACJ,CAAC;;AAED;AACA,MAAMG,mBAAmB,GAAG,QAAQ;AACpC;AACA,MAAMC,2BAA2B,GAAG;EAClCC,OAAO,EAAE;AACX,CAAC;AACD,SAASC,cAAcA,CAACC,GAAG,EAAE;EAC3B,IAAIA,GAAG,CAAC,CAAC,CAAC,KAAKJ,mBAAmB,EAAE;IAClC,OAAOI,GAAG;EACZ;EACA,OAAO,CAACJ,mBAAmB,EAAE,GAAGI,GAAG,CAAC;AACtC;AACA,SAASC,YAAYA,CAACD,GAAG,EAAE;EACzB,OAAO,CAAC,GAAGA,GAAG,EAAEH,2BAA2B,CAAC;AAC9C;AACA,SAASK,uBAAuBA,CAACF,GAAG,EAAE;EACpC,OAAOA,GAAG,CAACA,GAAG,CAACG,MAAM,GAAG,CAAC,CAAC,KAAKN,2BAA2B;AAC5D;;AAEA;;AAEA,SAASO,iBAAiBA,CAACJ,GAAG,EAAE;EAC9B,OAAOD,cAAc,CAAC,CAAC,KAAK,EAAE,GAAGC,GAAG,CAAC,CAAC;AACxC;AACA,SAASK,4BAA4BA,CAACL,GAAG,EAAEM,OAAO,EAAE;EAClD,OAAOF,iBAAiB,CAAC,CAACE,OAAO,EAAE,GAAGN,GAAG,CAAC,CAAC;AAC7C;AACA,SAASO,wBAAwBA,CAACC,OAAO,EAAE;EACzC,IAAIR,GAAG,GAAGS,SAAS,CAACN,MAAM,GAAG,CAAC,IAAIM,SAAS,CAAC,CAAC,CAAC,KAAKC,SAAS,GAAGD,SAAS,CAAC,CAAC,CAAC,GAAG,EAAE;EAChF,MAAMH,OAAO,GAAGE,OAAO,EAAEF,OAAO;EAChC,MAAMK,OAAO,GAAGH,OAAO,EAAEI,SAAS,CAACC,QAAQ,CAAC,CAAC;EAC7C,OAAOR,4BAA4B,CAAC,CAAC,SAAS,EAAEM,OAAO,EAAE,GAAGX,GAAG,CAAC,EAAEM,OAAO,IAAI,IAAI,CAAC;AACpF;;AAEA;AACA;AACA;AACA;AACA;;AAEA,SAASQ,sBAAsBA,CAACC,SAAS,EAAEC,OAAO,EAAE;EAClD3B,SAAS,CAAC0B,SAAS,KAAK,IAAI,IAAIA,SAAS,KAAKL,SAAS,EAAEM,OAAO,CAAC;AACnE;AAEA,SAAS1B,8BAA8B,IAAI2B,CAAC,EAAEV,wBAAwB,IAAIW,CAAC,EAAEb,4BAA4B,IAAIc,CAAC,EAAEpB,cAAc,IAAIqB,CAAC,EAAEnB,YAAY,IAAIoB,CAAC,EAAEP,sBAAsB,IAAIQ,CAAC,EAAEpB,uBAAuB,IAAIqB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}