{"ast":null,"code":"/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Image } from './image.js';\nimport { Sampler } from './sampler.js';\nimport { $sourceObject, ThreeDOMElement } from './three-dom-element.js';\nconst $image = Symbol('image');\nconst $sampler = Symbol('sampler');\n/**\n * Material facade implementation for Three.js materials\n */\nexport class Texture extends ThreeDOMElement {\n  constructor(onUpdate, threeTexture) {\n    let gltfTexture = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    let gltfSampler = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    let gltfImage = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n    super(onUpdate, gltfTexture ? gltfTexture : {}, new Set(threeTexture ? [threeTexture] : []));\n    this[$sampler] = new Sampler(onUpdate, threeTexture, gltfSampler);\n    this[$image] = new Image(onUpdate, threeTexture, gltfImage);\n  }\n  get name() {\n    return this[$sourceObject].name || '';\n  }\n  set name(name) {\n    this[$sourceObject].name = name;\n  }\n  get sampler() {\n    return this[$sampler];\n  }\n  get source() {\n    return this[$image];\n  }\n}","map":{"version":3,"names":["Image","Sampler","$sourceObject","ThreeDOMElement","$image","Symbol","$sampler","Texture","constructor","onUpdate","threeTexture","gltfTexture","arguments","length","undefined","gltfSampler","gltfImage","Set","name","sampler","source"],"sources":["C:\\Misc\\Documents\\Career\\FinTech\\BlockChain\\FrontEnd\\buildspace-dao-starter\\node_modules\\@google\\model-viewer\\src\\features\\scene-graph\\texture.ts"],"sourcesContent":["/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Texture as ThreeTexture} from 'three';\n\nimport {Image as GLTFImage, Sampler as GLTFSampler, Texture as GLTFTexture} from '../../three-components/gltf-instance/gltf-2.0.js';\n\nimport {Texture as TextureInterface} from './api.js';\nimport {Image} from './image.js';\nimport {Sampler} from './sampler.js';\nimport {$sourceObject, ThreeDOMElement} from './three-dom-element.js';\n\n\n\nconst $image = Symbol('image');\nconst $sampler = Symbol('sampler');\n\n/**\n * Material facade implementation for Three.js materials\n */\nexport class Texture extends ThreeDOMElement implements TextureInterface {\n  private[$image]: Image;\n  private[$sampler]: Sampler;\n\n  constructor(\n      onUpdate: () => void,\n      threeTexture: ThreeTexture|null,\n      gltfTexture: GLTFTexture|null = null,\n      gltfSampler: GLTFSampler|null = null,\n      gltfImage: GLTFImage|null = null,\n  ) {\n    super(\n        onUpdate,\n        gltfTexture ? gltfTexture : {} as GLTFTexture,\n        new Set<ThreeTexture>(threeTexture ? [threeTexture] : []));\n\n    this[$sampler] = new Sampler(onUpdate, threeTexture, gltfSampler);\n    this[$image] = new Image(onUpdate, threeTexture, gltfImage);\n  }\n\n  get name(): string {\n    return (this[$sourceObject] as any).name || '';\n  }\n\n  set name(name: string) {\n    (this[$sourceObject] as any).name = name;\n  }\n\n  get sampler(): Sampler {\n    return this[$sampler];\n  }\n\n  get source(): Image {\n    return this[$image];\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;AAoBA,SAAQA,KAAK,QAAO,YAAY;AAChC,SAAQC,OAAO,QAAO,cAAc;AACpC,SAAQC,aAAa,EAAEC,eAAe,QAAO,wBAAwB;AAIrE,MAAMC,MAAM,GAAGC,MAAM,CAAC,OAAO,CAAC;AAC9B,MAAMC,QAAQ,GAAGD,MAAM,CAAC,SAAS,CAAC;AAElC;;;AAGA,OAAM,MAAOE,OAAQ,SAAQJ,eAAe;EAI1CK,YACIC,QAAoB,EACpBC,YAA+B,EAGC;IAAA,IAFhCC,WAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAgC,IAAI;IAAA,IACpCG,WAAA,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAgC,IAAI;IAAA,IACpCI,SAAA,GAAAJ,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAA4B,IAAI;IAElC,KAAK,CACDH,QAAQ,EACRE,WAAW,GAAGA,WAAW,GAAG,EAAiB,EAC7C,IAAIM,GAAG,CAAeP,YAAY,GAAG,CAACA,YAAY,CAAC,GAAG,EAAE,CAAC,CAAC;IAE9D,IAAI,CAACJ,QAAQ,CAAC,GAAG,IAAIL,OAAO,CAACQ,QAAQ,EAAEC,YAAY,EAAEK,WAAW,CAAC;IACjE,IAAI,CAACX,MAAM,CAAC,GAAG,IAAIJ,KAAK,CAACS,QAAQ,EAAEC,YAAY,EAAEM,SAAS,CAAC;EAC7D;EAEA,IAAIE,IAAIA,CAAA;IACN,OAAQ,IAAI,CAAChB,aAAa,CAAS,CAACgB,IAAI,IAAI,EAAE;EAChD;EAEA,IAAIA,IAAIA,CAACA,IAAY;IAClB,IAAI,CAAChB,aAAa,CAAS,CAACgB,IAAI,GAAGA,IAAI;EAC1C;EAEA,IAAIC,OAAOA,CAAA;IACT,OAAO,IAAI,CAACb,QAAQ,CAAC;EACvB;EAEA,IAAIc,MAAMA,CAAA;IACR,OAAO,IAAI,CAAChB,MAAM,CAAC;EACrB"},"metadata":{},"sourceType":"module","externalDependencies":[]}