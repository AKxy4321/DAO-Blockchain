{"ast":null,"code":"import _defineProperty from \"C:/Misc/Documents/Career/FinTech/BlockChain/FrontEnd/buildspace-dao-starter/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { BigNumber, constants } from 'ethers';\nimport { D as DEFAULT_QUERY_ALL_COUNT } from './QueryParams-39bcad7a.browser.esm.js';\nimport { dK as NFT_BASE_CONTRACT_ROLES, dw as ContractWrapper, e as AbiSchema, ah as ContractMetadata, dD as DropErc721ContractSchema, b0 as ContractAppURI, ai as ContractRoles, aj as ContractRoyalty, ak as ContractPrimarySale, am as DropClaimConditions, ag as ContractEncoder, aQ as GasCostEstimator, aR as ContractEvents, aT as ContractPlatformFee, al as DelayedReveal, dW as FEATURE_NFT_REVEALABLE, aS as ContractInterceptor, aV as ContractOwner, bI as getRoleHash, dx as buildTransactionFunction, aW as Transaction } from './contract-publisher-1ff1fe07.browser.esm.js';\nimport { S as StandardErc721 } from './erc-721-standard-c858f30e.browser.esm.js';\nimport { a as PaperCheckout } from './thirdweb-checkout-49195812.browser.esm.js';\nimport 'bn.js';\nimport 'zod';\nimport 'tiny-invariant';\nimport 'uuid';\nimport '@thirdweb-dev/storage';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC165.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport 'fast-deep-equal';\nimport 'merkletreejs';\nimport '@thirdweb-dev/contracts-js/dist/abis/IThirdwebContract.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedRevealDeprecated.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ContractPublisher.json';\nimport '@thirdweb-dev/chains';\nimport 'bs58';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryLogic.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Permit.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721AQueryableUpgradeable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/SharedMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/zora_IERC721Drop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILoyaltyCard.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/INFTMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountFactoryCore.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccount.json';\nimport 'ethers/lib/utils';\nimport '@thirdweb-dev/contracts-js/dist/abis/Forwarder.json';\nimport 'cross-fetch';\nimport 'eventemitter3';\n\n/**\n * Setup a collection of one-of-one NFTs that are minted as users claim them.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"nft-drop\");\n * ```\n *\n * @public\n */\nclass NFTDrop extends StandardErc721 {\n  /**\n   * @internal\n   */\n\n  /**\n   * Configure royalties\n   * @remarks Set your own royalties for the entire contract or per token\n   * @example\n   * ```javascript\n   * // royalties on the whole contract\n   * contract.royalties.setDefaultRoyaltyInfo({\n   *   seller_fee_basis_points: 100, // 1%\n   *   fee_recipient: \"0x...\"\n   * });\n   * // override royalty for a particular token\n   * contract.royalties.setTokenRoyaltyInfo(tokenId, {\n   *   seller_fee_basis_points: 500, // 5%\n   *   fee_recipient: \"0x...\"\n   * });\n   * ```\n   */\n\n  /**\n   * Configure claim conditions\n   * @remarks Define who can claim NFTs in the collection, when and how many.\n   * @example\n   * ```javascript\n   * const presaleStartTime = new Date();\n   * const publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const claimConditions = [\n   *   {\n   *     startTime: presaleStartTime, // start the presale now\n   *     maxClaimableSupply: 2, // limit how many mints for this presale\n   *     price: 0.01, // presale price\n   *     snapshot: ['0x...', '0x...'], // limit minting to only certain addresses\n   *   },\n   *   {\n   *     startTime: publicSaleStartTime, // 24h after presale, start public sale\n   *     price: 0.08, // public sale price\n   *   }\n   * ]);\n   * await contract.claimConditions.set(claimConditions);\n   * ```\n   */\n\n  /**\n   * Delayed reveal\n   * @remarks Create a batch of encrypted NFTs that can be revealed at a later time.\n   * @example\n   * ```javascript\n   * // the real NFTs, these will be encrypted until you reveal them\n   * const realNFTs = [{\n   *   name: \"Common NFT #1\",\n   *   description: \"Common NFT, one of many.\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }, {\n   *   name: \"Super Rare NFT #2\",\n   *   description: \"You got a Super Rare NFT!\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }];\n   * // A placeholder NFT that people will get immediately in their wallet, and will be converted to the real NFT at reveal time\n   * const placeholderNFT = {\n   *   name: \"Hidden NFT\",\n   *   description: \"Will be revealed next week!\"\n   * };\n   * // Create and encrypt the NFTs\n   * await contract.revealer.createDelayedRevealBatch(\n   *   placeholderNFT,\n   *   realNFTs,\n   *   \"my secret password\",\n   * );\n   * // Whenever you're ready, reveal your NFTs at any time\n   * const batchId = 0; // the batch to reveal\n   * await contract.revealer.reveal(batchId, \"my secret password\");\n   * ```\n   */\n  /**\n   * Checkout\n   * @remarks Create a FIAT currency checkout for your NFT drop.\n   */\n  constructor(network, address, storage) {\n    let _options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, _options, storage);\n    super(contractWrapper, storage, chainId);\n    /** ******************************\n     * WRITE FUNCTIONS\n     *******************************/\n    /**\n     * Create a batch of unique NFTs to be claimed in the future\n     *\n     * @remarks Create batch allows you to create a batch of many unique NFTs in one transaction.\n     *\n     * @example\n     * ```javascript\n     * // Custom metadata of the NFTs to create\n     * const metadatas = [{\n     *   name: \"Cool NFT\",\n     *   description: \"This is a cool NFT\",\n     *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n     * }, {\n     *   name: \"Cool NFT\",\n     *   description: \"This is a cool NFT\",\n     *   image: fs.readFileSync(\"path/to/image.png\"),\n     * }];\n     *\n     * const results = await contract.createBatch(metadatas); // uploads and creates the NFTs on chain\n     * const firstTokenId = results[0].id; // token id of the first created NFT\n     * const firstNFT = await results[0].data(); // (optional) fetch details of the first created NFT\n     * ```\n     *\n     * @param metadatas - The metadata to include in the batch.\n     * @param options - optional upload progress callback\n     */\n    _defineProperty(this, \"createBatch\", /* @__PURE__ */buildTransactionFunction(async (metadatas, options) => {\n      return this.erc721.lazyMint.prepare(metadatas, options);\n    }));\n    /**\n     * Claim unique NFTs to a specific Wallet\n     *\n     * @remarks Let the specified wallet claim NFTs.\n     *\n     * @example\n     * ```javascript\n     * const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\n     * const quantity = 1; // how many unique NFTs you want to claim\n     *\n     * const tx = await contract.claimTo(address, quantity);\n     * const receipt = tx[0].receipt; // the transaction receipt\n     * const claimedTokenId = tx[0].id; // the id of the NFT claimed\n     * const claimedNFT = await tx[0].data(); // (optional) get the claimed NFT metadata\n     * ```\n     *\n     * @param destinationAddress - Address you want to send the token to\n     * @param quantity - Quantity of the tokens you want to claim\n     * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer\n     *\n     * @returns - an array of results containing the id of the token claimed, the transaction receipt and a promise to optionally fetch the nft metadata\n     */\n    _defineProperty(this, \"claimTo\", /* @__PURE__ */buildTransactionFunction((() => {\n      var _this = this;\n      return async function (destinationAddress, quantity) {\n        let checkERC20Allowance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n        return _this.erc721.claimTo.prepare(destinationAddress, quantity, {\n          checkERC20Allowance\n        });\n      };\n    })()));\n    /**\n     * Claim NFTs to the connected wallet.\n     *\n     * @remarks See {@link NFTDrop.claimTo}\n     *\n     * @returns - an array of results containing the id of the token claimed, the transaction receipt and a promise to optionally fetch the nft metadata\n     */\n    _defineProperty(this, \"claim\", /* @__PURE__ */buildTransactionFunction((() => {\n      var _this2 = this;\n      return async function (quantity) {\n        let checkERC20Allowance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n        return _this2.claimTo.prepare(await _this2.contractWrapper.getSignerAddress(), quantity, checkERC20Allowance);\n      };\n    })()));\n    /**\n     * Burn a single NFT\n     *\n     * @param tokenId - the token Id to burn\n     *\n     * @example\n     * ```javascript\n     * const result = await contract.burnToken(tokenId);\n     * ```\n     *\n     */\n    _defineProperty(this, \"burn\", /* @__PURE__ */buildTransactionFunction(async tokenId => {\n      return this.erc721.burn.prepare(tokenId);\n    }));\n    /**\n     * Transfer an NFT\n     *\n     * @remarks Transfer an NFT from the connected wallet to another wallet.\n     *\n     * @example\n     * ```javascript\n     * const walletAddress = \"{{wallet_address}}\";\n     * const tokenId = 0;\n     * await contract.transfer(walletAddress, tokenId);\n     * ```\n     */\n    _defineProperty(this, \"transfer\", /* @__PURE__ */buildTransactionFunction(async (to, tokenId) => {\n      return this.erc721.transfer.prepare(to, tokenId);\n    }));\n    /**\n     * Approve or remove operator as an operator for the caller. Operators can call transferFrom or safeTransferFrom for any token owned by the caller.\n     * @param operator - the operator's address\n     * @param approved - whether to approve or remove\n     *\n     * @internal\n     */\n    _defineProperty(this, \"setApprovalForAll\", /* @__PURE__ */buildTransactionFunction(async (operator, approved) => {\n      return this.erc721.setApprovalForAll.prepare(operator, approved);\n    }));\n    /**\n     * Approve an operator for the NFT owner. Operators can call transferFrom or safeTransferFrom for the specified token.\n     * @param operator - the operator's address\n     * @param tokenId - the tokenId to give approval for\n     *\n     * @internal\n     */\n    _defineProperty(this, \"setApprovalForToken\", /* @__PURE__ */buildTransactionFunction(async (operator, tokenId) => {\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"approve\",\n        args: [operator, tokenId]\n      });\n    }));\n    this.abi = AbiSchema.parse(abi || []);\n    this.metadata = new ContractMetadata(this.contractWrapper, DropErc721ContractSchema, this.storage);\n    this.app = new ContractAppURI(this.contractWrapper, this.metadata, this.storage);\n    this.roles = new ContractRoles(this.contractWrapper, NFTDrop.contractRoles);\n    this.royalties = new ContractRoyalty(this.contractWrapper, this.metadata);\n    this.sales = new ContractPrimarySale(this.contractWrapper);\n    this.claimConditions = new DropClaimConditions(this.contractWrapper, this.metadata, this.storage);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.platformFees = new ContractPlatformFee(this.contractWrapper);\n    this.revealer = new DelayedReveal(this.contractWrapper, this.storage, FEATURE_NFT_REVEALABLE.name, () => this.erc721.nextTokenIdToMint());\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.owner = new ContractOwner(this.contractWrapper);\n    this.checkout = new PaperCheckout(this.contractWrapper);\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get the total count NFTs in this drop contract, both claimed and unclaimed\n   */\n  async totalSupply() {\n    const [claimed, unclaimed] = await Promise.all([this.totalClaimedSupply(), this.totalUnclaimedSupply()]);\n    return claimed.add(unclaimed);\n  }\n\n  /**\n   * Get All Claimed NFTs\n   *\n   * @remarks Fetch all the NFTs (and their owners) that have been claimed in this Drop.\n   *\n   * * @example\n   * ```javascript\n   * const claimedNFTs = await contract.getAllClaimed();\n   * const firstOwner = claimedNFTs[0].owner;\n   * ```\n   *\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata and their ownersfor all NFTs queried.\n   */\n  async getAllClaimed(queryParams) {\n    const start = BigNumber.from((queryParams === null || queryParams === void 0 ? void 0 : queryParams.start) || 0).toNumber();\n    const count = BigNumber.from((queryParams === null || queryParams === void 0 ? void 0 : queryParams.count) || DEFAULT_QUERY_ALL_COUNT).toNumber();\n    const maxId = Math.min((await this.contractWrapper.read(\"nextTokenIdToClaim\", [])).toNumber(), start + count);\n    return await Promise.all(Array.from(Array(maxId).keys()).map(i => this.get(i.toString())));\n  }\n\n  /**\n   * Get All Unclaimed NFTs\n   *\n   * @remarks Fetch all the NFTs that have been not been claimed yet in this Drop.\n   *\n   * * @example\n   * ```javascript\n   * const unclaimedNFTs = await contract.getAllUnclaimed();\n   * const firstUnclaimedNFT = unclaimedNFTs[0].name;\n   * ```\n   *\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs queried.\n   */\n  async getAllUnclaimed(queryParams) {\n    const start = BigNumber.from((queryParams === null || queryParams === void 0 ? void 0 : queryParams.start) || 0).toNumber();\n    const count = BigNumber.from((queryParams === null || queryParams === void 0 ? void 0 : queryParams.count) || DEFAULT_QUERY_ALL_COUNT).toNumber();\n    const firstTokenId = BigNumber.from(Math.max((await this.contractWrapper.read(\"nextTokenIdToClaim\", [])).toNumber(), start));\n    const maxId = BigNumber.from(Math.min((await this.contractWrapper.read(\"nextTokenIdToMint\", [])).toNumber(), firstTokenId.toNumber() + count));\n    return await Promise.all(Array.from(Array(maxId.sub(firstTokenId).toNumber()).keys()).map(i => this.erc721.getTokenMetadata(firstTokenId.add(i).toString())));\n  }\n\n  /**\n   * Get the claimed supply\n   *\n   * @remarks Get the number of claimed NFTs in this Drop.\n   *\n   * * @example\n   * ```javascript\n   * const claimedNFTCount = await contract.totalClaimedSupply();\n   * console.log(`NFTs claimed so far: ${claimedNFTCount}`);\n   * ```\n   * @returns the unclaimed supply\n   */\n  async totalClaimedSupply() {\n    return this.erc721.totalClaimedSupply();\n  }\n\n  /**\n   * Get the unclaimed supply\n   *\n   * @remarks Get the number of unclaimed NFTs in this Drop.\n   *\n   * * @example\n   * ```javascript\n   * const unclaimedNFTCount = await contract.totalUnclaimedSupply();\n   * console.log(`NFTs left to claim: ${unclaimedNFTCount}`);\n   * ```\n   * @returns the unclaimed supply\n   */\n  async totalUnclaimedSupply() {\n    return this.erc721.totalUnclaimedSupply();\n  }\n\n  /**\n   * Get whether users can transfer NFTs from this contract\n   */\n  async isTransferRestricted() {\n    const anyoneCanTransfer = await this.contractWrapper.read(\"hasRole\", [getRoleHash(\"transfer\"), constants.AddressZero]);\n    return !anyoneCanTransfer;\n  }\n  /**\n   * Construct a claim transaction without executing it.\n   * This is useful for estimating the gas cost of a claim transaction, overriding transaction options and having fine grained control over the transaction execution.\n   * @param destinationAddress\n   * @param quantity\n   * @param checkERC20Allowance\n   *\n   * @deprecated Use `contract.erc721.claim.prepare(...args)` instead\n   */\n  async getClaimTransaction(destinationAddress, quantity) {\n    let checkERC20Allowance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    return this.erc721.getClaimTransaction(destinationAddress, quantity, {\n      checkERC20Allowance\n    });\n  }\n  /******************************\n   * STANDARD ERC721 FUNCTIONS\n   ******************************/\n  /**\n   * Get a single NFT\n   *\n   * @example\n   * ```javascript\n   * const tokenId = 0;\n   * const nft = await contract.get(tokenId);\n   * ```\n   * @param tokenId - the tokenId of the NFT to retrieve\n   * @returns The NFT metadata\n   */\n  async get(tokenId) {\n    return this.erc721.get(tokenId);\n  }\n\n  /**\n   * Get the current owner of a given NFT within this Contract\n   *\n   * @param tokenId - the tokenId of the NFT\n   * @returns the address of the owner\n   */\n  async ownerOf(tokenId) {\n    return this.erc721.ownerOf(tokenId);\n  }\n\n  /**\n   * Get NFT Balance\n   *\n   * @remarks Get a wallets NFT balance (number of NFTs in this contract owned by the wallet).\n   *\n   * @example\n   * ```javascript\n   * const walletAddress = \"{{wallet_address}}\";\n   * const balance = await contract.balanceOf(walletAddress);\n   * console.log(balance);\n   * ```\n   */\n  async balanceOf(address) {\n    return this.erc721.balanceOf(address);\n  }\n\n  /**\n   * Get NFT Balance for the currently connected wallet\n   */\n  async balance() {\n    return this.erc721.balance();\n  }\n\n  /**\n   * Get whether this wallet has approved transfers from the given operator\n   * @param address - the wallet address\n   * @param operator - the operator address\n   */\n  async isApproved(address, operator) {\n    return this.erc721.isApproved(address, operator);\n  }\n  /**\n   * @internal\n   */\n  async prepare(method, args, overrides) {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method,\n      args,\n      overrides\n    });\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n  /**\n   * @internal\n   */\n  async call(functionName, args, overrides) {\n    return this.contractWrapper.call(functionName, args, overrides);\n  }\n}\n_defineProperty(NFTDrop, \"contractRoles\", NFT_BASE_CONTRACT_ROLES);\nexport { NFTDrop };","map":{"version":3,"names":["BigNumber","constants","D","DEFAULT_QUERY_ALL_COUNT","dK","NFT_BASE_CONTRACT_ROLES","dw","ContractWrapper","e","AbiSchema","ah","ContractMetadata","dD","DropErc721ContractSchema","b0","ContractAppURI","ai","ContractRoles","aj","ContractRoyalty","ak","ContractPrimarySale","am","DropClaimConditions","ag","ContractEncoder","aQ","GasCostEstimator","aR","ContractEvents","aT","ContractPlatformFee","al","DelayedReveal","dW","FEATURE_NFT_REVEALABLE","aS","ContractInterceptor","aV","ContractOwner","bI","getRoleHash","dx","buildTransactionFunction","aW","Transaction","S","StandardErc721","a","PaperCheckout","NFTDrop","constructor","network","address","storage","options","arguments","length","undefined","abi","chainId","contractWrapper","_defineProperty","metadatas","erc721","lazyMint","prepare","_this","destinationAddress","quantity","checkERC20Allowance","claimTo","_this2","getSignerAddress","tokenId","burn","to","transfer","operator","approved","setApprovalForAll","fromContractWrapper","method","args","parse","metadata","app","roles","contractRoles","royalties","sales","claimConditions","encoder","estimator","events","platformFees","revealer","name","nextTokenIdToMint","interceptor","owner","checkout","onNetworkUpdated","updateSignerOrProvider","getAddress","totalSupply","claimed","unclaimed","Promise","all","totalClaimedSupply","totalUnclaimedSupply","add","getAllClaimed","queryParams","start","from","toNumber","count","maxId","Math","min","read","Array","keys","map","i","get","toString","getAllUnclaimed","firstTokenId","max","sub","getTokenMetadata","isTransferRestricted","anyoneCanTransfer","AddressZero","getClaimTransaction","ownerOf","balanceOf","balance","isApproved","overrides","call","functionName"],"sources":["C:/Misc/Documents/Career/FinTech/BlockChain/FrontEnd/buildspace-dao-starter/node_modules/@thirdweb-dev/sdk/dist/nft-drop-399edfe0.browser.esm.js"],"sourcesContent":["import { BigNumber, constants } from 'ethers';\nimport { D as DEFAULT_QUERY_ALL_COUNT } from './QueryParams-39bcad7a.browser.esm.js';\nimport { dK as NFT_BASE_CONTRACT_ROLES, dw as ContractWrapper, e as AbiSchema, ah as ContractMetadata, dD as DropErc721ContractSchema, b0 as ContractAppURI, ai as ContractRoles, aj as ContractRoyalty, ak as ContractPrimarySale, am as DropClaimConditions, ag as ContractEncoder, aQ as GasCostEstimator, aR as ContractEvents, aT as ContractPlatformFee, al as DelayedReveal, dW as FEATURE_NFT_REVEALABLE, aS as ContractInterceptor, aV as ContractOwner, bI as getRoleHash, dx as buildTransactionFunction, aW as Transaction } from './contract-publisher-1ff1fe07.browser.esm.js';\nimport { S as StandardErc721 } from './erc-721-standard-c858f30e.browser.esm.js';\nimport { a as PaperCheckout } from './thirdweb-checkout-49195812.browser.esm.js';\nimport 'bn.js';\nimport 'zod';\nimport 'tiny-invariant';\nimport 'uuid';\nimport '@thirdweb-dev/storage';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC165.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport 'fast-deep-equal';\nimport 'merkletreejs';\nimport '@thirdweb-dev/contracts-js/dist/abis/IThirdwebContract.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedRevealDeprecated.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ContractPublisher.json';\nimport '@thirdweb-dev/chains';\nimport 'bs58';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryLogic.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Permit.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721AQueryableUpgradeable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/SharedMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/zora_IERC721Drop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILoyaltyCard.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/INFTMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountFactoryCore.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccount.json';\nimport 'ethers/lib/utils';\nimport '@thirdweb-dev/contracts-js/dist/abis/Forwarder.json';\nimport 'cross-fetch';\nimport 'eventemitter3';\n\n/**\n * Setup a collection of one-of-one NFTs that are minted as users claim them.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"nft-drop\");\n * ```\n *\n * @public\n */\nclass NFTDrop extends StandardErc721 {\n  static contractRoles = NFT_BASE_CONTRACT_ROLES;\n\n  /**\n   * @internal\n   */\n\n  /**\n   * Configure royalties\n   * @remarks Set your own royalties for the entire contract or per token\n   * @example\n   * ```javascript\n   * // royalties on the whole contract\n   * contract.royalties.setDefaultRoyaltyInfo({\n   *   seller_fee_basis_points: 100, // 1%\n   *   fee_recipient: \"0x...\"\n   * });\n   * // override royalty for a particular token\n   * contract.royalties.setTokenRoyaltyInfo(tokenId, {\n   *   seller_fee_basis_points: 500, // 5%\n   *   fee_recipient: \"0x...\"\n   * });\n   * ```\n   */\n\n  /**\n   * Configure claim conditions\n   * @remarks Define who can claim NFTs in the collection, when and how many.\n   * @example\n   * ```javascript\n   * const presaleStartTime = new Date();\n   * const publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const claimConditions = [\n   *   {\n   *     startTime: presaleStartTime, // start the presale now\n   *     maxClaimableSupply: 2, // limit how many mints for this presale\n   *     price: 0.01, // presale price\n   *     snapshot: ['0x...', '0x...'], // limit minting to only certain addresses\n   *   },\n   *   {\n   *     startTime: publicSaleStartTime, // 24h after presale, start public sale\n   *     price: 0.08, // public sale price\n   *   }\n   * ]);\n   * await contract.claimConditions.set(claimConditions);\n   * ```\n   */\n\n  /**\n   * Delayed reveal\n   * @remarks Create a batch of encrypted NFTs that can be revealed at a later time.\n   * @example\n   * ```javascript\n   * // the real NFTs, these will be encrypted until you reveal them\n   * const realNFTs = [{\n   *   name: \"Common NFT #1\",\n   *   description: \"Common NFT, one of many.\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }, {\n   *   name: \"Super Rare NFT #2\",\n   *   description: \"You got a Super Rare NFT!\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }];\n   * // A placeholder NFT that people will get immediately in their wallet, and will be converted to the real NFT at reveal time\n   * const placeholderNFT = {\n   *   name: \"Hidden NFT\",\n   *   description: \"Will be revealed next week!\"\n   * };\n   * // Create and encrypt the NFTs\n   * await contract.revealer.createDelayedRevealBatch(\n   *   placeholderNFT,\n   *   realNFTs,\n   *   \"my secret password\",\n   * );\n   * // Whenever you're ready, reveal your NFTs at any time\n   * const batchId = 0; // the batch to reveal\n   * await contract.revealer.reveal(batchId, \"my secret password\");\n   * ```\n   */\n\n  /**\n   * Checkout\n   * @remarks Create a FIAT currency checkout for your NFT drop.\n   */\n\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options, storage);\n    super(contractWrapper, storage, chainId);\n    this.abi = AbiSchema.parse(abi || []);\n    this.metadata = new ContractMetadata(this.contractWrapper, DropErc721ContractSchema, this.storage);\n    this.app = new ContractAppURI(this.contractWrapper, this.metadata, this.storage);\n    this.roles = new ContractRoles(this.contractWrapper, NFTDrop.contractRoles);\n    this.royalties = new ContractRoyalty(this.contractWrapper, this.metadata);\n    this.sales = new ContractPrimarySale(this.contractWrapper);\n    this.claimConditions = new DropClaimConditions(this.contractWrapper, this.metadata, this.storage);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.platformFees = new ContractPlatformFee(this.contractWrapper);\n    this.revealer = new DelayedReveal(this.contractWrapper, this.storage, FEATURE_NFT_REVEALABLE.name, () => this.erc721.nextTokenIdToMint());\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.owner = new ContractOwner(this.contractWrapper);\n    this.checkout = new PaperCheckout(this.contractWrapper);\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get the total count NFTs in this drop contract, both claimed and unclaimed\n   */\n  async totalSupply() {\n    const [claimed, unclaimed] = await Promise.all([this.totalClaimedSupply(), this.totalUnclaimedSupply()]);\n    return claimed.add(unclaimed);\n  }\n\n  /**\n   * Get All Claimed NFTs\n   *\n   * @remarks Fetch all the NFTs (and their owners) that have been claimed in this Drop.\n   *\n   * * @example\n   * ```javascript\n   * const claimedNFTs = await contract.getAllClaimed();\n   * const firstOwner = claimedNFTs[0].owner;\n   * ```\n   *\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata and their ownersfor all NFTs queried.\n   */\n  async getAllClaimed(queryParams) {\n    const start = BigNumber.from(queryParams?.start || 0).toNumber();\n    const count = BigNumber.from(queryParams?.count || DEFAULT_QUERY_ALL_COUNT).toNumber();\n    const maxId = Math.min((await this.contractWrapper.read(\"nextTokenIdToClaim\", [])).toNumber(), start + count);\n    return await Promise.all(Array.from(Array(maxId).keys()).map(i => this.get(i.toString())));\n  }\n\n  /**\n   * Get All Unclaimed NFTs\n   *\n   * @remarks Fetch all the NFTs that have been not been claimed yet in this Drop.\n   *\n   * * @example\n   * ```javascript\n   * const unclaimedNFTs = await contract.getAllUnclaimed();\n   * const firstUnclaimedNFT = unclaimedNFTs[0].name;\n   * ```\n   *\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs queried.\n   */\n  async getAllUnclaimed(queryParams) {\n    const start = BigNumber.from(queryParams?.start || 0).toNumber();\n    const count = BigNumber.from(queryParams?.count || DEFAULT_QUERY_ALL_COUNT).toNumber();\n    const firstTokenId = BigNumber.from(Math.max((await this.contractWrapper.read(\"nextTokenIdToClaim\", [])).toNumber(), start));\n    const maxId = BigNumber.from(Math.min((await this.contractWrapper.read(\"nextTokenIdToMint\", [])).toNumber(), firstTokenId.toNumber() + count));\n    return await Promise.all(Array.from(Array(maxId.sub(firstTokenId).toNumber()).keys()).map(i => this.erc721.getTokenMetadata(firstTokenId.add(i).toString())));\n  }\n\n  /**\n   * Get the claimed supply\n   *\n   * @remarks Get the number of claimed NFTs in this Drop.\n   *\n   * * @example\n   * ```javascript\n   * const claimedNFTCount = await contract.totalClaimedSupply();\n   * console.log(`NFTs claimed so far: ${claimedNFTCount}`);\n   * ```\n   * @returns the unclaimed supply\n   */\n  async totalClaimedSupply() {\n    return this.erc721.totalClaimedSupply();\n  }\n\n  /**\n   * Get the unclaimed supply\n   *\n   * @remarks Get the number of unclaimed NFTs in this Drop.\n   *\n   * * @example\n   * ```javascript\n   * const unclaimedNFTCount = await contract.totalUnclaimedSupply();\n   * console.log(`NFTs left to claim: ${unclaimedNFTCount}`);\n   * ```\n   * @returns the unclaimed supply\n   */\n  async totalUnclaimedSupply() {\n    return this.erc721.totalUnclaimedSupply();\n  }\n\n  /**\n   * Get whether users can transfer NFTs from this contract\n   */\n  async isTransferRestricted() {\n    const anyoneCanTransfer = await this.contractWrapper.read(\"hasRole\", [getRoleHash(\"transfer\"), constants.AddressZero]);\n    return !anyoneCanTransfer;\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Create a batch of unique NFTs to be claimed in the future\n   *\n   * @remarks Create batch allows you to create a batch of many unique NFTs in one transaction.\n   *\n   * @example\n   * ```javascript\n   * // Custom metadata of the NFTs to create\n   * const metadatas = [{\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }, {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }];\n   *\n   * const results = await contract.createBatch(metadatas); // uploads and creates the NFTs on chain\n   * const firstTokenId = results[0].id; // token id of the first created NFT\n   * const firstNFT = await results[0].data(); // (optional) fetch details of the first created NFT\n   * ```\n   *\n   * @param metadatas - The metadata to include in the batch.\n   * @param options - optional upload progress callback\n   */\n  createBatch = /* @__PURE__ */buildTransactionFunction(async (metadatas, options) => {\n    return this.erc721.lazyMint.prepare(metadatas, options);\n  });\n\n  /**\n   * Construct a claim transaction without executing it.\n   * This is useful for estimating the gas cost of a claim transaction, overriding transaction options and having fine grained control over the transaction execution.\n   * @param destinationAddress\n   * @param quantity\n   * @param checkERC20Allowance\n   *\n   * @deprecated Use `contract.erc721.claim.prepare(...args)` instead\n   */\n  async getClaimTransaction(destinationAddress, quantity) {\n    let checkERC20Allowance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    return this.erc721.getClaimTransaction(destinationAddress, quantity, {\n      checkERC20Allowance\n    });\n  }\n\n  /**\n   * Claim unique NFTs to a specific Wallet\n   *\n   * @remarks Let the specified wallet claim NFTs.\n   *\n   * @example\n   * ```javascript\n   * const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\n   * const quantity = 1; // how many unique NFTs you want to claim\n   *\n   * const tx = await contract.claimTo(address, quantity);\n   * const receipt = tx[0].receipt; // the transaction receipt\n   * const claimedTokenId = tx[0].id; // the id of the NFT claimed\n   * const claimedNFT = await tx[0].data(); // (optional) get the claimed NFT metadata\n   * ```\n   *\n   * @param destinationAddress - Address you want to send the token to\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer\n   *\n   * @returns - an array of results containing the id of the token claimed, the transaction receipt and a promise to optionally fetch the nft metadata\n   */\n  claimTo = /* @__PURE__ */buildTransactionFunction((() => {\n    var _this = this;\n    return async function (destinationAddress, quantity) {\n      let checkERC20Allowance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      return _this.erc721.claimTo.prepare(destinationAddress, quantity, {\n        checkERC20Allowance\n      });\n    };\n  })());\n\n  /**\n   * Claim NFTs to the connected wallet.\n   *\n   * @remarks See {@link NFTDrop.claimTo}\n   *\n   * @returns - an array of results containing the id of the token claimed, the transaction receipt and a promise to optionally fetch the nft metadata\n   */\n  claim = /* @__PURE__ */buildTransactionFunction((() => {\n    var _this2 = this;\n    return async function (quantity) {\n      let checkERC20Allowance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      return _this2.claimTo.prepare(await _this2.contractWrapper.getSignerAddress(), quantity, checkERC20Allowance);\n    };\n  })());\n\n  /**\n   * Burn a single NFT\n   *\n   * @param tokenId - the token Id to burn\n   *\n   * @example\n   * ```javascript\n   * const result = await contract.burnToken(tokenId);\n   * ```\n   *\n   */\n  burn = /* @__PURE__ */buildTransactionFunction(async tokenId => {\n    return this.erc721.burn.prepare(tokenId);\n  });\n\n  /******************************\n   * STANDARD ERC721 FUNCTIONS\n   ******************************/\n\n  /**\n   * Get a single NFT\n   *\n   * @example\n   * ```javascript\n   * const tokenId = 0;\n   * const nft = await contract.get(tokenId);\n   * ```\n   * @param tokenId - the tokenId of the NFT to retrieve\n   * @returns The NFT metadata\n   */\n  async get(tokenId) {\n    return this.erc721.get(tokenId);\n  }\n\n  /**\n   * Get the current owner of a given NFT within this Contract\n   *\n   * @param tokenId - the tokenId of the NFT\n   * @returns the address of the owner\n   */\n  async ownerOf(tokenId) {\n    return this.erc721.ownerOf(tokenId);\n  }\n\n  /**\n   * Get NFT Balance\n   *\n   * @remarks Get a wallets NFT balance (number of NFTs in this contract owned by the wallet).\n   *\n   * @example\n   * ```javascript\n   * const walletAddress = \"{{wallet_address}}\";\n   * const balance = await contract.balanceOf(walletAddress);\n   * console.log(balance);\n   * ```\n   */\n  async balanceOf(address) {\n    return this.erc721.balanceOf(address);\n  }\n\n  /**\n   * Get NFT Balance for the currently connected wallet\n   */\n  async balance() {\n    return this.erc721.balance();\n  }\n\n  /**\n   * Get whether this wallet has approved transfers from the given operator\n   * @param address - the wallet address\n   * @param operator - the operator address\n   */\n  async isApproved(address, operator) {\n    return this.erc721.isApproved(address, operator);\n  }\n\n  /**\n   * Transfer an NFT\n   *\n   * @remarks Transfer an NFT from the connected wallet to another wallet.\n   *\n   * @example\n   * ```javascript\n   * const walletAddress = \"{{wallet_address}}\";\n   * const tokenId = 0;\n   * await contract.transfer(walletAddress, tokenId);\n   * ```\n   */\n  transfer = /* @__PURE__ */buildTransactionFunction(async (to, tokenId) => {\n    return this.erc721.transfer.prepare(to, tokenId);\n  });\n\n  /**\n   * Approve or remove operator as an operator for the caller. Operators can call transferFrom or safeTransferFrom for any token owned by the caller.\n   * @param operator - the operator's address\n   * @param approved - whether to approve or remove\n   *\n   * @internal\n   */\n  setApprovalForAll = /* @__PURE__ */buildTransactionFunction(async (operator, approved) => {\n    return this.erc721.setApprovalForAll.prepare(operator, approved);\n  });\n\n  /**\n   * Approve an operator for the NFT owner. Operators can call transferFrom or safeTransferFrom for the specified token.\n   * @param operator - the operator's address\n   * @param tokenId - the tokenId to give approval for\n   *\n   * @internal\n   */\n  setApprovalForToken = /* @__PURE__ */buildTransactionFunction(async (operator, tokenId) => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"approve\",\n      args: [operator, tokenId]\n    });\n  });\n\n  /**\n   * @internal\n   */\n  async prepare(method, args, overrides) {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method,\n      args,\n      overrides\n    });\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n  /**\n   * @internal\n   */\n  async call(functionName, args, overrides) {\n    return this.contractWrapper.call(functionName, args, overrides);\n  }\n}\n\nexport { NFTDrop };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}