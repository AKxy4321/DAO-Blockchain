{"ast":null,"code":"import _defineProperty from \"C:/Misc/Documents/Career/FinTech/BlockChain/FrontEnd/buildspace-dao-starter/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _classPrivateFieldInitSpec from \"C:/Misc/Documents/Career/FinTech/BlockChain/FrontEnd/buildspace-dao-starter/node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js\";\nimport _classPrivateFieldGet from \"C:/Misc/Documents/Career/FinTech/BlockChain/FrontEnd/buildspace-dao-starter/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet.js\";\nimport _classPrivateFieldSet from \"C:/Misc/Documents/Career/FinTech/BlockChain/FrontEnd/buildspace-dao-starter/node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet.js\";\nimport { Q as QuantitySchema, A as AmountSchema, B as BytesLikeSchema, N as NFTInputOrUriSchema, a as BasisPointsSchema, F as FileOrBufferOrStringSchema, P as PercentSchema, C as CommonNFTOutput, b as CommonNFTInput, D as DEFAULT_QUERY_ALL_COUNT, c as BasicNFTInput, M as MAX_BPS } from './QueryParams-39bcad7a.browser.esm.js';\nimport { z } from 'zod';\nimport { BigNumber, providers, utils, constants, Contract, ContractFactory } from 'ethers';\nimport invariant from 'tiny-invariant';\nimport { v4 } from 'uuid';\nimport { isBrowser as isBrowser$1, isFileOrBuffer, replaceGatewayUrlWithScheme } from '@thirdweb-dev/storage';\nimport ERC165Abi from '@thirdweb-dev/contracts-js/dist/abis/IERC165.json';\nimport IERC721MetadataAbi from '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport Erc1155MetadataAbi from '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport ERC20Abi from '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport IERC20MetadataAbi from '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport deepEqual from 'fast-deep-equal';\nimport { MerkleTree } from 'merkletreejs';\nimport IThirdwebContractABI from '@thirdweb-dev/contracts-js/dist/abis/IThirdwebContract.json';\nimport DeprecatedAbi from '@thirdweb-dev/contracts-js/dist/abis/IDelayedRevealDeprecated.json';\nimport Erc1155Abi from '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport Erc721Abi from '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport ContractPublisherAbi from '@thirdweb-dev/contracts-js/dist/abis/ContractPublisher.json';\nimport { defaultChains, getValidChainRPCs, Polygon, Mumbai } from '@thirdweb-dev/chains';\nimport bs58 from 'bs58';\nimport TWRegistryABI from '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryLogic.json';\nimport IBurnableERC20Abi from '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport IDrop from '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport DropERC20_V2Abi from '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport IDropSinglePhase from '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport IDropSinglePhaseV1 from '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport IERC20PermitAbi from '@thirdweb-dev/contracts-js/dist/abis/IERC20Permit.json';\nimport IMintableERC20Abi from '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport MulticallAbi from '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport ISignatureMintERC20Abi from '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport IBurnableERC721Abi from '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport IClaimableERC721 from '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport DelayedRevealAbi from '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport DropERC721_V3Abi from '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport Erc721EnumerableAbi from '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport Erc721AQueryableAbi from '@thirdweb-dev/contracts-js/dist/abis/IERC721AQueryableUpgradeable.json';\nimport Erc721SupplyAbi from '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport ILazyMintAbi from '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport IMintableERC721Abi from '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport SignatureMintERC721Abi from '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport SignatureMintERC721_V1Abi from '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport TieredDropAbi from '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier.json';\nimport SharedMetadataAbi from '@thirdweb-dev/contracts-js/dist/abis/SharedMetadata.json';\nimport zora_IDropERC721 from '@thirdweb-dev/contracts-js/dist/abis/zora_IERC721Drop.json';\nimport ILoyaltyCardAbi from '@thirdweb-dev/contracts-js/dist/abis/ILoyaltyCard.json';\nimport INFTMetadataAbi from '@thirdweb-dev/contracts-js/dist/abis/INFTMetadata.json';\nimport IBurnableERC1155Abi from '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport IClaimableERC1155 from '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport IDropMultiPhase1155 from '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport DropERC1155_V2Abi from '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport IDropSinglePhase1155 from '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport IDropSinglePhase1155_V1 from '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport Erc1155SupplyAbi from '@thirdweb-dev/contracts-js/dist/abis/IERC1155Supply.json';\nimport Erc1155EnumerableAbi from '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport IMintableERC1155Abi from '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport ISignatureMintERC1155Abi from '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport IERC2771ContextAbi from '@thirdweb-dev/contracts-js/dist/abis/IERC2771Context.json';\nimport IAppURI from '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport IContractMetadataAbi from '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport IDirectListingsAbi from '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport IEnglishAuctionsAbi from '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport IOffersAbi from '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport IPackVRFAbi from '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport IPermissionsAbi from '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport IPermissionsEnumerableAbi from '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport IThirdwebPlatformFeeAbi from '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport IThirdwebPrimarySaleAbi from '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport IThirdwebRoyaltyAbi from '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport IOwnableAbi from '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport IAirdropERC20 from '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC20.json';\nimport IAirdropERC721 from '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC721.json';\nimport IAirdropERC1155 from '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC1155.json';\nimport IAccountFactoryCore from '@thirdweb-dev/contracts-js/dist/abis/IAccountFactoryCore.json';\nimport IAccountPermissions from '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions.json';\nimport IAccount from '@thirdweb-dev/contracts-js/dist/abis/IAccount.json';\nimport { Interface } from 'ethers/lib/utils';\nimport ForwarderABI from '@thirdweb-dev/contracts-js/dist/abis/Forwarder.json';\nimport fetch from 'cross-fetch';\nimport EventEmitter from 'eventemitter3';\nconst MAX_LENGTH = 256;\nconst NUMERIC_IDENTIFIER = \"0|[1-9]\\\\d*\";\nconst MAIN_VERSION_IDENTIFIER = \"(\".concat(NUMERIC_IDENTIFIER, \")\\\\.(\").concat(NUMERIC_IDENTIFIER, \")\\\\.(\").concat(NUMERIC_IDENTIFIER, \")\");\nconst REGEX_MAIN_VERSION = new RegExp(MAIN_VERSION_IDENTIFIER);\n\n/**\n * @internal\n */\n\n/**\n * @internal\n * @param version\n */\nfunction toSemver(version) {\n  if (version.length > MAX_LENGTH) {\n    throw new Error(\"version is longer than \".concat(MAX_LENGTH, \" characters\"));\n  }\n  const matches = version.trim().match(REGEX_MAIN_VERSION);\n  if (!matches || (matches === null || matches === void 0 ? void 0 : matches.length) !== 4) {\n    throw new Error(\"\".concat(version, \" is not a valid semantic version. Should be in the format of major.minor.patch. Ex: 0.4.1\"));\n  }\n  const major = Number(matches[1]);\n  const minor = Number(matches[2]);\n  const patch = Number(matches[3]);\n  const versionString = [major, minor, patch].join(\".\");\n  return {\n    major,\n    minor,\n    patch,\n    versionString\n  };\n}\n\n/**\n * @internal\n * @param current\n * @param next\n */\nfunction isIncrementalVersion(current, next) {\n  const currentSemver = toSemver(current);\n  const nextSemver = toSemver(next);\n  if (nextSemver.major > currentSemver.major) {\n    return true;\n  }\n  const eqMajor = nextSemver.major === currentSemver.major;\n  if (eqMajor && nextSemver.minor > currentSemver.minor) {\n    return true;\n  }\n  const eqMinor = nextSemver.minor === currentSemver.minor;\n  return eqMajor && eqMinor && nextSemver.patch > currentSemver.patch;\n}\nfunction isDowngradeVersion(current, next) {\n  const currentSemver = toSemver(current);\n  const nextSemver = toSemver(next);\n  if (nextSemver.major < currentSemver.major) {\n    return true;\n  }\n  const eqMajor = nextSemver.major === currentSemver.major;\n  if (eqMajor && nextSemver.minor < currentSemver.minor) {\n    return true;\n  }\n  const eqMinor = nextSemver.minor === currentSemver.minor;\n  return eqMajor && eqMinor && nextSemver.patch < currentSemver.patch;\n}\nconst BigNumberSchema = /* @__PURE__ */(() => z.union([z.string(), z.number(), z.bigint(), z.custom(data => {\n  return BigNumber.isBigNumber(data);\n})]).transform(arg => BigNumber.from(arg)))();\nconst BigNumberishSchema = /* @__PURE__ */BigNumberSchema.transform(arg => arg.toString());\nconst BigNumberTransformSchema = /* @__PURE__ */(() => z.union([z.bigint(), z.custom(data => {\n  return BigNumber.isBigNumber(data);\n})]).transform(arg => {\n  return BigNumber.from(arg).toString();\n}))();\n\n/**\n * util function to check for signer, ripped out of ethers Signer.isProvider\n *\n * @param value possible signer\n * @returns boolean if value is a signer\n * @internal\n */\nfunction isSigner(value) {\n  return !!(value && value._isSigner);\n}\n\n/**\n * util function to check for provider, ripped out of ethers providers.Provider.isProvider\n *\n * @param value possible provider\n * @returns boolean if value is a provider\n * @internal\n */\nfunction isProvider(value) {\n  return !!(value && value._isProvider);\n}\nconst DEFAULT_BATCH_TIME_LIMIT_MS = 50;\nconst DEFAULT_BATCH_SIZE_LIMIT = 250;\nconst DEFAULT_BATCH_OPTIONS = {\n  timeLimitMs: DEFAULT_BATCH_TIME_LIMIT_MS,\n  sizeLimit: DEFAULT_BATCH_SIZE_LIMIT\n};\n// mostly copied from ethers.js directly but make it a StaticJsonRpcProvider\nclass StaticJsonRpcBatchProvider extends providers.StaticJsonRpcProvider {\n  constructor(url, network) {\n    let batchOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_BATCH_OPTIONS;\n    super(url, network);\n    this._timeLimitMs = batchOptions.timeLimitMs || DEFAULT_BATCH_SIZE_LIMIT;\n    this._sizeLimit = batchOptions.sizeLimit || DEFAULT_BATCH_TIME_LIMIT_MS;\n    this._pendingBatchAggregator = null;\n    this._pendingBatch = null;\n  }\n  sendCurrentBatch(request) {\n    // if we still have a timeout clear that first\n    if (this._pendingBatchAggregator) {\n      clearTimeout(this._pendingBatchAggregator);\n    }\n    // Get the current batch and clear it, so new requests\n    // go into the next batch\n    const batch = this._pendingBatch || [];\n    this._pendingBatch = null;\n    this._pendingBatchAggregator = null;\n\n    // Get the request as an array of requests\n    const request_ = batch.map(inflight => inflight.request);\n    this.emit(\"debug\", {\n      action: \"requestBatch\",\n      request: utils.deepCopy(request),\n      provider: this\n    });\n    return utils.fetchJson(this.connection, JSON.stringify(request_)).then(result => {\n      this.emit(\"debug\", {\n        action: \"response\",\n        request: request_,\n        response: result,\n        provider: this\n      });\n\n      // For each result, feed it to the correct Promise, depending\n      // on whether it was a success or error\n      batch.forEach((inflightRequest_, index) => {\n        const payload = result[index];\n\n        // there may *not* be a payload for a given request (typically RPC error level)\n        if (payload) {\n          // if there is a payload, check for an error\n          if (payload.error) {\n            const error = new Error(payload.error.message);\n            error.code = payload.error.code;\n            error.data = payload.error.data;\n            inflightRequest_.reject(error);\n          } else {\n            // if there's no error resolve the request\n            inflightRequest_.resolve(payload.result);\n          }\n        } else {\n          // if there is no payload, reject the request\n          inflightRequest_.reject(new Error(\"No response for request\"));\n        }\n      });\n    }, error => {\n      this.emit(\"debug\", {\n        action: \"response\",\n        error: error,\n        request: request_,\n        provider: this\n      });\n\n      // If there was an error, reject all the requests\n      batch.forEach(inflightRequest_ => {\n        inflightRequest_.reject(error);\n      });\n    });\n  }\n  send(method, params) {\n    const request = {\n      method: method,\n      params: params,\n      id: this._nextId++,\n      jsonrpc: \"2.0\"\n    };\n    if (this._pendingBatch === null) {\n      this._pendingBatch = [];\n    }\n    const inflightRequest = {\n      request,\n      resolve: null,\n      reject: null\n    };\n    const promise = new Promise((resolve, reject) => {\n      inflightRequest.resolve = resolve;\n      inflightRequest.reject = reject;\n    });\n    this._pendingBatch.push(inflightRequest);\n\n    // if we would go *over* the size limit of the batch with this request, send the batch now\n    if (this._pendingBatch.length === this._sizeLimit) {\n      this.sendCurrentBatch(request);\n    }\n    if (!this._pendingBatchAggregator) {\n      // Schedule batch for next event loop + short duration\n      this._pendingBatchAggregator = setTimeout(() => {\n        this.sendCurrentBatch(request);\n      }, this._timeLimitMs);\n    }\n    return promise;\n  }\n}\nconst ChainInfoInputSchema = /* @__PURE__ */(() => z.object({\n  rpc: z.array(z.string().url()),\n  chainId: z.number(),\n  nativeCurrency: z.object({\n    name: z.string(),\n    symbol: z.string(),\n    decimals: z.number()\n  }),\n  slug: z.string()\n}))();\n\n/**\n * @public\n */\nconst SDKOptionsSchema = /* @__PURE__ */(() => z.object({\n  // @ts-expect-error - zod doesn't know anything about readonly\n  supportedChains: z.array(ChainInfoInputSchema).default(defaultChains),\n  clientId: z.string().optional(),\n  secretKey: z.string().optional(),\n  readonlySettings: z.object({\n    rpcUrl: z.string().url(),\n    chainId: z.number().optional()\n  }).optional(),\n  gasSettings: z.object({\n    maxPriceInGwei: z.number().min(1, \"gas price cannot be less than 1\").default(300),\n    speed: z.enum([\"standard\", \"fast\", \"fastest\"]).default(\"fastest\")\n  }).default({\n    maxPriceInGwei: 300,\n    speed: \"fastest\"\n  }),\n  gasless: z.union([z.object({\n    openzeppelin: z.object({\n      relayerUrl: z.string().url(),\n      relayerForwarderAddress: z.string().optional(),\n      useEOAForwarder: z.boolean().default(false),\n      domainName: z.string().default(\"GSNv2 Forwarder\"),\n      domainVersion: z.string().default(\"0.0.1\")\n    }),\n    experimentalChainlessSupport: z.boolean().default(false)\n  }), z.object({\n    biconomy: z.object({\n      apiId: z.string(),\n      apiKey: z.string(),\n      deadlineSeconds: z.number().min(1, \"deadlineSeconds cannot be les than 1\").default(3600)\n    })\n  })]).optional(),\n  gatewayUrls: z.array(z.string()).optional()\n}).default({\n  gasSettings: {\n    maxPriceInGwei: 300,\n    speed: \"fastest\"\n  }\n}))();\n\n/**\n * @public\n * All these configuration options are optional with sane defaults:\n * @example\n * ```javascript\n * {\n *   readonlySettings: {\n *     rpcUrl, // force read calls to go through your own RPC url\n *     chainId, // reduce RPC calls by sepcifying your chain ID\n *   },\n *   gasSettings: {\n *     maxPriceInGwei, // Maximum gas price for transactions (default 300 gwei)\n *     speed, // the tx speed setting: 'standard'|'fast|'fastest' (default: 'fastest')\n *   },\n *   gasless: {\n *     // By specifying a gasless configuration - all transactions will get forwarded to enable gasless transactions\n *     openzeppelin: {\n *       relayerUrl, // your OZ Defender relayer URL\n *       relayerForwarderAddress, // the OZ defender relayer address (defaults to the standard one)\n *     },\n *     biconomy: {\n *       apiId, // your Biconomy API Id\n *       apiKey, // your Biconomy API Key\n *       deadlineSeconds, // your Biconomy timeout preference\n *     },\n *   },\n * }\n * ```\n */\n\n/**\n * @internal\n */\n\n/**\n * @public\n */\n\nvar pkg = {\n  name: \"@thirdweb-dev/sdk\",\n  version: \"3.10.67\",\n  description: \"The main thirdweb SDK.\",\n  repository: \"https://github.com/thirdweb-dev/js/tree/main/packages/sdk\",\n  license: \"Apache-2.0\",\n  main: \"dist/thirdweb-dev-sdk.cjs.js\",\n  module: \"dist/thirdweb-dev-sdk.esm.js\",\n  browser: {\n    \"./dist/thirdweb-dev-sdk.esm.js\": \"./dist/thirdweb-dev-sdk.browser.esm.js\"\n  },\n  exports: {\n    \".\": {\n      module: {\n        browser: \"./dist/thirdweb-dev-sdk.browser.esm.js\",\n        \"default\": \"./dist/thirdweb-dev-sdk.esm.js\"\n      },\n      \"default\": \"./dist/thirdweb-dev-sdk.cjs.js\"\n    },\n    \"./evm\": {\n      module: {\n        browser: \"./evm/dist/thirdweb-dev-sdk-evm.browser.esm.js\",\n        \"default\": \"./evm/dist/thirdweb-dev-sdk-evm.esm.js\"\n      },\n      \"default\": \"./evm/dist/thirdweb-dev-sdk-evm.cjs.js\"\n    },\n    \"./solana\": {\n      module: {\n        browser: \"./solana/dist/thirdweb-dev-sdk-solana.browser.esm.js\",\n        \"default\": \"./solana/dist/thirdweb-dev-sdk-solana.esm.js\"\n      },\n      \"default\": \"./solana/dist/thirdweb-dev-sdk-solana.cjs.js\"\n    },\n    \"./evm/zksync\": {\n      module: {\n        browser: \"./evm/zksync/dist/thirdweb-dev-sdk-evm-zksync.browser.esm.js\",\n        \"default\": \"./evm/zksync/dist/thirdweb-dev-sdk-evm-zksync.esm.js\"\n      },\n      \"default\": \"./evm/zksync/dist/thirdweb-dev-sdk-evm-zksync.cjs.js\"\n    },\n    \"./evm/functions\": {\n      module: {\n        browser: \"./evm/functions/dist/thirdweb-dev-sdk-evm-functions.browser.esm.js\",\n        \"default\": \"./evm/functions/dist/thirdweb-dev-sdk-evm-functions.esm.js\"\n      },\n      \"default\": \"./evm/functions/dist/thirdweb-dev-sdk-evm-functions.cjs.js\"\n    },\n    \"./solana/server\": {\n      module: {\n        browser: \"./solana/server/dist/thirdweb-dev-sdk-solana-server.browser.esm.js\",\n        \"default\": \"./solana/server/dist/thirdweb-dev-sdk-solana-server.esm.js\"\n      },\n      \"default\": \"./solana/server/dist/thirdweb-dev-sdk-solana-server.cjs.js\"\n    },\n    \"./package.json\": \"./package.json\"\n  },\n  files: [\"dist/\", \"evm/\", \"solana/\", \"server/\"],\n  preconstruct: {\n    entrypoints: [\"index.ts\", \"evm/index.ts\", \"evm/functions/index.ts\", \"evm/zksync/index.ts\", \"solana/index.ts\", \"solana/server/index.ts\"],\n    exports: {\n      envConditions: [\"browser\"]\n    }\n  },\n  sideEffects: false,\n  scripts: {\n    format: \"prettier --write 'src/**/*'\",\n    lint: \"eslint src/\",\n    fix: \"eslint src/ --fix\",\n    clean: \"rm -rf dist/\",\n    \"generate-docs\": \"pnpm generate-docs:evm && pnpm generate-docs:solana && pnpm generate-snippets\",\n    \"generate-docs:evm\": \"api-extractor run --local --config ./config/api-extractor-evm.json && api-documenter markdown -i ./temp -o ./docs/evm && rm -rf ./temp-evm && mv ./temp ./temp-evm\",\n    \"generate-docs:solana\": \"api-extractor run --local --config ./config/api-extractor-solana.json && api-documenter markdown -i ./temp -o ./docs/solana && rm -rf ./temp-solana && mv ./temp ./temp-solana\",\n    \"generate-snippets\": \"node ./scripts/generate-snippets.mjs && node ./scripts/generate-feature-snippets-evm.mjs\",\n    build: \"tsc && preconstruct build\",\n    \"test:evm:all\": \"SWC_NODE_PROJECT=./tsconfig.test.json nyc --reporter lcovonly --report-dir ./coverage/evm mocha --config './test/evm/.mocharc.json' --timeout 90000 --parallel './test/evm/**/*.test.ts'\",\n    \"test:evm\": \"make test-evm\",\n    \"test:evm:single\": \"SWC_NODE_PROJECT=./tsconfig.test.json mocha --config './test/evm/.mocharc.json' --timeout 90000\",\n    \"node:solana:start\": \"DEBUG='amman:(info|error|debug)' amman start --forceClone\",\n    \"node:solana:stop\": \"amman stop\",\n    \"test:solana:all\": \"SWC_NODE_PROJECT=./tsconfig.test.json nyc --reporter lcovonly --report-dir ./coverage/solana  mocha --config './test/solana/.mocharc.json' --timeout 30000 --parallel './test/solana/**/*.test.ts'\",\n    \"test:solana\": \"make test-sol\",\n    \"test:solana:single\": \"SWC_NODE_PROJECT=./tsconfig.test.json mocha --config './test/solana/.mocharc.json' --timeout 30000\",\n    push: \"yalc push\"\n  },\n  devDependencies: {\n    \"@aws-sdk/client-secrets-manager\": \"^3.378.0\",\n    \"@ethersproject/abstract-provider\": \"^5.7.0\",\n    \"@metaplex-foundation/amman\": \"^0.12.1\",\n    \"@metaplex-foundation/amman-client\": \"^0.2.4\",\n    \"@metaplex-foundation/js\": \"^0.19.2\",\n    \"@metaplex-foundation/mpl-token-metadata\": \"^2.12.0\",\n    \"@microsoft/api-documenter\": \"^7.22.30\",\n    \"@microsoft/api-extractor\": \"^7.36.3\",\n    \"@microsoft/tsdoc\": \"^0.14.1\",\n    \"@nomiclabs/hardhat-ethers\": \"^2.2.3\",\n    \"@preconstruct/cli\": \"2.7.0\",\n    \"@project-serum/anchor\": \"^0.25.0\",\n    \"@solana/spl-token\": \"^0.3.5\",\n    \"@solana/web3.js\": \"^1.62.0\",\n    \"@swc-node/register\": \"^1.6.6\",\n    \"@swc/core\": \"^1.3.71\",\n    \"@thirdweb-dev/tsconfig\": \"workspace:*\",\n    \"@types/bn.js\": \"^5.1.1\",\n    \"@types/chai\": \"^4.3.5\",\n    \"@types/deep-equal-in-any-order\": \"^1.0.1\",\n    \"@types/mocha\": \"^10.0.0\",\n    \"@types/node\": \"^18.17.1\",\n    \"@types/uuid\": \"^9.0.2\",\n    \"@typescript-eslint/eslint-plugin\": \"^6.2.0\",\n    \"@typescript-eslint/parser\": \"^6.2.0\",\n    chai: \"^4.3.6\",\n    \"deep-equal-in-any-order\": \"^1.1.18\",\n    \"dotenv-mono\": \"^1.3.10\",\n    eslint: \"^8.45.0\",\n    \"eslint-config-prettier\": \"^8.9.0\",\n    \"eslint-config-thirdweb\": \"workspace:*\",\n    \"eslint-plugin-better-tree-shaking\": \"0.0.3\",\n    \"eslint-plugin-import\": \"^2.26.0\",\n    \"eslint-plugin-inclusive-language\": \"^2.2.0\",\n    \"eslint-plugin-prettier\": \"^5.0.0\",\n    \"eslint-plugin-tsdoc\": \"^0.2.16\",\n    ethers: \"^5.7.2\",\n    \"ethers-aws-kms-signer\": \"^1.3.2\",\n    hardhat: \"^2.17.0\",\n    mocha: \"^10.2.0\",\n    nyc: \"^15.1.0\",\n    prettier: \"^3.0.0\",\n    typescript: \"^5.1.6\",\n    \"zksync-web3\": \"^0.14.3\"\n  },\n  peerDependencies: {\n    \"@aws-sdk/client-secrets-manager\": \"^3.215.0\",\n    \"@metaplex-foundation/js\": \"^0.17.6\",\n    \"@metaplex-foundation/mpl-token-metadata\": \"^2.3.3\",\n    \"@project-serum/anchor\": \"^0.25.0\",\n    \"@solana/spl-token\": \"^0.3.5\",\n    \"@solana/web3.js\": \"^1.62.0\",\n    ethers: \"^5\",\n    \"ethers-aws-kms-signer\": \"^1.3.2\",\n    \"zksync-web3\": \"^0.14.3\"\n  },\n  peerDependenciesMeta: {\n    \"@aws-sdk/client-secrets-manager\": {\n      optional: true\n    },\n    \"ethers-aws-kms-signer\": {\n      optional: true\n    },\n    \"@solana/spl-token\": {\n      optional: true\n    },\n    \"@solana/web3.js\": {\n      optional: true\n    },\n    \"@project-serum/anchor\": {\n      optional: true\n    },\n    \"@metaplex-foundation/mpl-token-metadata\": {\n      optional: true\n    },\n    \"@metaplex-foundation/js\": {\n      optional: true\n    },\n    \"zksync-web3\": {\n      optional: true\n    }\n  },\n  dependencies: {\n    \"@thirdweb-dev/chains\": \"workspace:*\",\n    \"@thirdweb-dev/contracts-js\": \"workspace:*\",\n    \"@thirdweb-dev/generated-abis\": \"workspace:*\",\n    \"@thirdweb-dev/storage\": \"workspace:*\",\n    abitype: \"^0.2.5\",\n    \"bn.js\": \"^5.2.1\",\n    bs58: \"^5.0.0\",\n    buffer: \"^6.0.3\",\n    \"cross-fetch\": \"^3.1.8\",\n    eventemitter3: \"^5.0.1\",\n    \"fast-deep-equal\": \"^3.1.3\",\n    merkletreejs: \"^0.2.24\",\n    \"tiny-invariant\": \"^1.2.0\",\n    tweetnacl: \"^1.0.3\",\n    uuid: \"^9.0.0\",\n    yaml: \"^2.3.1\",\n    zod: \"^3.20.2\"\n  },\n  bugs: {\n    url: \"https://github.com/thirdweb-dev/js/issues\"\n  },\n  author: \"thirdweb eng <eng@thirdweb.com>\"\n};\n\n/**\n * @internal\n */\nfunction buildDefaultMap(options) {\n  return options.supportedChains.reduce((previousValue, currentValue) => {\n    previousValue[currentValue.chainId] = currentValue;\n    return previousValue;\n  }, {});\n}\n\n/**\n * Get an ethers provider for the specified network\n *\n * @internal\n */\nfunction getChainProvider(network, sdkOptions) {\n  // If we have an RPC URL, use that for the provider\n  if (typeof network === \"string\" && isRpcUrl(network)) {\n    return getProviderFromRpcUrl(network, sdkOptions);\n  }\n\n  // Add the chain to the supportedChains\n  const options = SDKOptionsSchema.parse(sdkOptions);\n  if (isChainConfig(network)) {\n    options.supportedChains = [\n    // @ts-expect-error - we know this is a chain and it will work to build the map\n    network, ...options.supportedChains.filter(c => c.chainId !== network.chainId)];\n  }\n\n  // Build a map of chainId -> ChainInfo based on the supportedChains\n  const rpcMap = buildDefaultMap(options);\n  let rpcUrl = \"\";\n  let chainId;\n  try {\n    // Resolve the chain id from the network, which could be a chain, chain name, or chain id\n    chainId = getChainIdFromNetwork(network, options);\n    // Attempt to get the RPC url from the map based on the chainId\n    rpcUrl = getValidChainRPCs(rpcMap[chainId], options.clientId)[0];\n  } catch (e) {\n    // no-op\n  }\n\n  // if we still don't have an url fall back to just using the chainId or slug in the rpc and try that\n  if (!rpcUrl) {\n    rpcUrl = \"https://\".concat(chainId || network, \".rpc.thirdweb.com/\").concat(options.clientId || \"\");\n  }\n  if (!rpcUrl) {\n    throw new Error(\"No rpc url found for chain \".concat(network, \". Please provide a valid rpc url via the 'supportedChains' property of the sdk options.\"));\n  }\n  return getProviderFromRpcUrl(rpcUrl, sdkOptions, chainId);\n}\nfunction getChainIdFromNetwork(network, options) {\n  if (isChainConfig(network)) {\n    // If it's a chain just return the chain id\n    return network.chainId;\n  } else if (typeof network === \"number\") {\n    // If it's a number (chainId) return it directly\n    return network;\n  } else {\n    // If it's a string (chain name) return the chain id from the map\n    const chainNameToId = options.supportedChains.reduce((acc, curr) => {\n      acc[curr.slug] = curr.chainId;\n      return acc;\n    }, {});\n    if (network in chainNameToId) {\n      return chainNameToId[network];\n    }\n  }\n  throw new Error(\"Cannot resolve chainId from: \".concat(network, \" - please pass the chainId instead and specify it in the 'supportedChains' property of the SDK options.\"));\n}\nasync function getChainIdOrName(network) {\n  if (isChainConfig(network)) {\n    // If it's a chain just return the chain id\n    return network.chainId;\n  } else if (typeof network === \"number\") {\n    // If it's a number (chainId) return it directly\n    return network;\n  } else if (typeof network === \"number\") {\n    // If it's a string (chain name) return the chain id from the map\n    return network;\n  } else if (isProvider(network)) {\n    return network.getNetwork().then(n => n.chainId);\n  } else if (isSigner(network)) {\n    if (!network.provider) {\n      throw new Error(\"Signer does not have a provider\");\n    }\n    return network.provider.getNetwork().then(n => n.chainId);\n  }\n  throw new Error(\"Cannot resolve chainId from: \".concat(network, \".\"));\n}\n\n/**\n * Check whether a NetworkInput value is a Chain config (naively, without parsing)\n */\nfunction isChainConfig(network) {\n  return typeof network !== \"string\" && typeof network !== \"number\" && !isSigner(network) && !isProvider(network);\n}\n\n/**\n * Returns whether the specified url is a valid RPC url, as implemented by ethers.getDefaultProvier():\n * - https://github.com/ethers-io/ethers.js/blob/ec1b9583039a14a0e0fa15d0a2a6082a2f41cf5b/packages/providers/src.ts/index.ts#L55\n *\n * @param url - The url to check\n *\n * @internal\n */\nfunction isRpcUrl(url) {\n  const match = url.match(/^(ws|http)s?:/i);\n  if (match) {\n    switch (match[1].toLowerCase()) {\n      case \"http\":\n      case \"https\":\n      case \"ws\":\n      case \"wss\":\n        return true;\n    }\n  }\n  return false;\n}\nconst RPC_PROVIDER_MAP = new Map();\n\n/**\n * Get an ethers provider based on the specified RPC URL\n *\n * @param rpcUrl - The RPC URL\n * @param chainId - The optional chain ID\n * @returns The provider for the specified RPC URL\n *\n * @internal\n */\nfunction getProviderFromRpcUrl(rpcUrl, sdkOptions, chainId) {\n  try {\n    const headers = {};\n    // will be used to make sure we don't cache providers with different auth strategies\n    let authStrategy = \"none\";\n    if (isTwUrl(rpcUrl)) {\n      // if we have a secret key passed in the SDK options we want to always use that\n      if (sdkOptions !== null && sdkOptions !== void 0 && sdkOptions.secretKey) {\n        // compute the clientId from the secret key\n        // should only be used on Node.js in a backend/script context\n        if (\"object\" !== \"undefined\") {\n          throw new Error(\"Cannot use secretKey in browser context\");\n        }\n        // this is on purpose because we're using the crypto module only in node\n        // try to trick webpack :)\n        const pto = \"pto\";\n        // eslint-disable-next-line @typescript-eslint/no-var-requires\n        const crypto = require(\"cry\" + pto);\n        const hashedSecretKey = crypto.createHash(\"sha256\").update(sdkOptions.secretKey).digest(\"hex\");\n        const derivedClientId = hashedSecretKey.slice(0, 32);\n        const utilizedRpcUrl = new URL(rpcUrl);\n        // always set the clientId on the path to the derived client id\n        utilizedRpcUrl.pathname = derivedClientId;\n        // set the headers\n        headers[\"x-client-id\"] = derivedClientId;\n        headers[\"x-secret-key\"] = sdkOptions.secretKey;\n        // set the final rpc url\n        rpcUrl = utilizedRpcUrl.toString();\n        authStrategy = \"secretKey\";\n      }\n      // if we do NOT have a secret key but we have a client id we want to use that\n      else if (sdkOptions !== null && sdkOptions !== void 0 && sdkOptions.clientId) {\n        const utilizedRpcUrl = new URL(rpcUrl);\n        // always set the clientId on the path to the client id\n        utilizedRpcUrl.pathname = sdkOptions.clientId;\n        // set the headers\n        headers[\"x-client-id\"] = sdkOptions.clientId;\n        // set the final rpc url\n        rpcUrl = utilizedRpcUrl.toString();\n        authStrategy = \"clientId\";\n      }\n\n      // if we *also* have a tw auth token on global context add it to the headers (in addition to anything else)\n      if (typeof globalThis !== \"undefined\" && \"TW_AUTH_TOKEN\" in globalThis && typeof globalThis.TW_AUTH_TOKEN === \"string\") {\n        headers[\"authorization\"] = \"Bearer \".concat(globalThis.TW_AUTH_TOKEN);\n        authStrategy = \"twAuthToken\";\n      }\n      if (typeof globalThis !== \"undefined\" && \"TW_CLI_AUTH_TOKEN\" in globalThis && typeof globalThis.TW_CLI_AUTH_TOKEN === \"string\") {\n        headers[\"x-authorize-wallet\"] = \"true\";\n      }\n      const bundleId = typeof globalThis !== \"undefined\" && \"APP_BUNDLE_ID\" in globalThis ? globalThis.APP_BUNDLE_ID : undefined;\n      if (!rpcUrl.includes(\"bundleId\")) {\n        rpcUrl = rpcUrl + (bundleId ? \"?bundleId=\".concat(bundleId) : \"\");\n      }\n      headers[\"x-sdk-version\"] = pkg.version;\n      headers[\"x-sdk-name\"] = pkg.name;\n      headers[\"x-sdk-platform\"] = bundleId ? \"react-native\" : isBrowser$1() ? window.bridge !== undefined ? \"webGL\" : \"browser\" : \"node\";\n    }\n    const match = rpcUrl.match(/^(ws|http)s?:/i);\n    // Try the JSON batch provider if available\n    if (match) {\n      switch (match[1].toLowerCase()) {\n        case \"http\":\n        case \"https\":\n          // Create a unique cache key for these params\n          const seralizedOpts = \"\".concat(rpcUrl, \"-\").concat(chainId || -1, \"-\").concat(authStrategy);\n\n          // Check if we have a provider in our cache already\n          const existingProvider = RPC_PROVIDER_MAP.get(seralizedOpts);\n          if (existingProvider) {\n            return existingProvider;\n          }\n\n          // Otherwise, create a new provider on the specific network\n          const newProvider = chainId ?\n          // If we know the chainId we should use the StaticJsonRpcBatchProvider\n          new StaticJsonRpcBatchProvider({\n            url: rpcUrl,\n            headers\n          }, chainId) :\n          // Otherwise fall back to the built in json rpc batch provider\n          new providers.JsonRpcBatchProvider({\n            url: rpcUrl,\n            headers\n          });\n\n          // Save the provider in our cache\n          RPC_PROVIDER_MAP.set(seralizedOpts, newProvider);\n          return newProvider;\n        case \"ws\":\n        case \"wss\":\n          // Use the WebSocketProvider for ws:// URLs\n          // TODO: handle auth for WS at some point\n          return new providers.WebSocketProvider(rpcUrl, chainId);\n      }\n    }\n  } catch (e) {\n    // no-op\n  }\n\n  // Always fallback to the default provider if no other option worked\n  return providers.getDefaultProvider(rpcUrl);\n}\n\n// TODO move to utils package\nfunction isTwUrl(url) {\n  return new URL(url).hostname.endsWith(\".thirdweb.com\");\n}\n\n/**\n * @internal\n */\nfunction getSignerAndProvider(network, options) {\n  let signer;\n  let provider;\n  if (isSigner(network)) {\n    // Here, we have an ethers.Signer\n    signer = network;\n    if (network.provider) {\n      provider = network.provider;\n    }\n  } else if (isProvider(network)) {\n    // Here, we have an ethers.providers.Provider\n    provider = network;\n  } else {\n    // Here, we must have a ChainOrRpcUrl, which is a chain name, chain id, rpc url, or chain config\n    // All of which, getChainProvider can handle for us\n    provider = getChainProvider(network, options);\n  }\n  if (options !== null && options !== void 0 && options.readonlySettings) {\n    // If readonly settings are specified, then overwrite the provider\n    provider = getProviderFromRpcUrl(options.readonlySettings.rpcUrl, options, options.readonlySettings.chainId);\n  }\n\n  // At this point, if we don't have a provider, don't default to a random chain\n  // Instead, just throw an error\n  if (!provider) {\n    if (signer) {\n      throw new Error(\"No provider passed to the SDK! Please make sure that your signer is connected to a provider!\");\n    }\n    throw new Error(\"No provider found! Make sure to specify which network to connect to, or pass a signer or provider to the SDK!\");\n  }\n  return [signer, provider];\n}\n\n// TODO: Respect SDK RPC configuration and don't pull straight from ethers\nlet provider;\nconst ENS_CACHE = new Map();\nasync function resolveEns(ens) {\n  let depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  if (!provider) {\n    // if we don't already have a provider then get one\n    provider = getSignerAndProvider(\"ethereum\")[1];\n  }\n  let ensPromise;\n  if (ENS_CACHE.has(ens)) {\n    ensPromise = ENS_CACHE.get(ens);\n  } else {\n    ensPromise = provider.resolveName(ens).then(address => {\n      // If they don't have an ENS, only cache for 30s\n      if (!address) {\n        return {\n          address: null,\n          expirationTime: new Date(Date.now() + 1000 * 30)\n        };\n      }\n\n      // Cache ENS for 1 hour\n      return {\n        address,\n        expirationTime: new Date(Date.now() + 1000 * 60 * 5)\n      };\n    });\n  }\n  const resolvedPromise = await ensPromise;\n  if (resolvedPromise.expirationTime < new Date()) {\n    // delete the cache if it's expired\n    ENS_CACHE.delete(ens);\n    // then call ourselves again to refresh the cache, but don't block on the result\n    if (depth === 0) {\n      resolveEns(ens, depth + 1);\n    }\n  }\n  return resolvedPromise.address;\n}\n\n// Only pass through to provider call if value ends with .eth or .cb.id\nconst EnsSchema = /* @__PURE__ */(() => z.custom(ens => typeof ens === \"string\" && (ens.endsWith(\".eth\") || ens.endsWith(\".cb.id\"))).transform(async ens => resolveEns(ens)).refine(address => !!address && utils.isAddress(address), {\n  message: \"Provided value was not a valid ENS name\"\n}))();\nconst AddressSchema = /* @__PURE__ */z.custom(address => typeof address === \"string\" && utils.isAddress(address), out => {\n  return {\n    message: \"\".concat(out, \" is not a valid address\")\n  };\n});\n\n// Important for address check to come before ENS so network request is only made when necessary\nconst AddressOrEnsSchema = /* @__PURE__ */z.union([AddressSchema, EnsSchema], {\n  invalid_type_error: \"Provided value was not a valid address or ENS name\"\n});\n\n// Use this everywhere even though it's just string so we can optionally switch it out\n// more easily if we want to later\n\n/**\n * @public\n */\nlet ChainId = /*#__PURE__*/function (ChainId) {\n  ChainId[ChainId[\"Mainnet\"] = 1] = \"Mainnet\";\n  ChainId[ChainId[\"Goerli\"] = 5] = \"Goerli\";\n  ChainId[ChainId[\"Polygon\"] = 137] = \"Polygon\";\n  ChainId[ChainId[\"Mumbai\"] = 80001] = \"Mumbai\";\n  ChainId[ChainId[\"Localhost\"] = 1337] = \"Localhost\";\n  ChainId[ChainId[\"Hardhat\"] = 31337] = \"Hardhat\";\n  ChainId[ChainId[\"Fantom\"] = 250] = \"Fantom\";\n  ChainId[ChainId[\"FantomTestnet\"] = 4002] = \"FantomTestnet\";\n  ChainId[ChainId[\"Avalanche\"] = 43114] = \"Avalanche\";\n  ChainId[ChainId[\"AvalancheFujiTestnet\"] = 43113] = \"AvalancheFujiTestnet\";\n  ChainId[ChainId[\"Optimism\"] = 10] = \"Optimism\";\n  ChainId[ChainId[\"OptimismGoerli\"] = 420] = \"OptimismGoerli\";\n  ChainId[ChainId[\"Arbitrum\"] = 42161] = \"Arbitrum\";\n  ChainId[ChainId[\"ArbitrumGoerli\"] = 421613] = \"ArbitrumGoerli\";\n  ChainId[ChainId[\"BinanceSmartChainMainnet\"] = 56] = \"BinanceSmartChainMainnet\";\n  ChainId[ChainId[\"BinanceSmartChainTestnet\"] = 97] = \"BinanceSmartChainTestnet\";\n  return ChainId;\n}({});\n\n// @ts-expect-error - readonly vs not\nlet supportedChains = defaultChains;\n\n/**\n * @internal\n */\nfunction setSupportedChains(chains) {\n  if (chains && chains.length > 0) {\n    supportedChains = chains;\n  } else {\n    // @ts-expect-error - readonly vs not\n    supportedChains = defaultChains;\n  }\n}\n\n/**\n * @internal\n */\nfunction getSupportedChains() {\n  return supportedChains;\n}\n\n/**\n * @public\n */\nconst NATIVE_TOKEN_ADDRESS = \"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\";\n\n/**\n * @public\n */\nconst NATIVE_TOKENS = {\n  [ChainId.Mainnet]: {\n    name: \"Ether\",\n    symbol: \"ETH\",\n    decimals: 18,\n    wrapped: {\n      address: \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\n      name: \"Wrapped Ether\",\n      symbol: \"WETH\"\n    }\n  },\n  [ChainId.Goerli]: {\n    name: \"Görli Ether\",\n    symbol: \"GOR\",\n    decimals: 18,\n    wrapped: {\n      address: \"0xb4fbf271143f4fbf7b91a5ded31805e42b2208d6\",\n      name: \"Wrapped Ether\",\n      symbol: \"WETH\"\n    }\n  },\n  11155111: {\n    name: \"Sepolia Ether\",\n    symbol: \"SEP\",\n    decimals: 18,\n    wrapped: {\n      address: \"0x7b79995e5f793A07Bc00c21412e50Ecae098E7f9\",\n      name: \"Wrapped Ether\",\n      symbol: \"WETH\"\n    }\n  },\n  [ChainId.Polygon]: {\n    name: \"Matic\",\n    symbol: \"MATIC\",\n    decimals: 18,\n    wrapped: {\n      address: \"0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270\",\n      name: \"Wrapped Matic\",\n      symbol: \"WMATIC\"\n    }\n  },\n  [ChainId.Mumbai]: {\n    name: \"Matic\",\n    symbol: \"MATIC\",\n    decimals: 18,\n    wrapped: {\n      address: \"0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889\",\n      name: \"Wrapped Matic\",\n      symbol: \"WMATIC\"\n    }\n  },\n  [ChainId.Avalanche]: {\n    name: \"Avalanche\",\n    symbol: \"AVAX\",\n    decimals: 18,\n    wrapped: {\n      address: \"0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7\",\n      name: \"Wrapped AVAX\",\n      symbol: \"WAVAX\"\n    }\n  },\n  [ChainId.AvalancheFujiTestnet]: {\n    name: \"Avalanche\",\n    symbol: \"AVAX\",\n    decimals: 18,\n    wrapped: {\n      address: \"0xd00ae08403B9bbb9124bB305C09058E32C39A48c\",\n      name: \"Wrapped AVAX\",\n      symbol: \"WAVAX\"\n    }\n  },\n  [ChainId.Fantom]: {\n    name: \"Fantom\",\n    symbol: \"FTM\",\n    decimals: 18,\n    wrapped: {\n      address: \"0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83\",\n      name: \"Wrapped Fantom\",\n      symbol: \"WFTM\"\n    }\n  },\n  [ChainId.FantomTestnet]: {\n    name: \"Fantom\",\n    symbol: \"FTM\",\n    decimals: 18,\n    wrapped: {\n      address: \"0xf1277d1Ed8AD466beddF92ef448A132661956621\",\n      name: \"Wrapped Fantom\",\n      symbol: \"WFTM\"\n    }\n  },\n  [ChainId.Arbitrum]: {\n    name: \"Ether\",\n    symbol: \"ETH\",\n    decimals: 18,\n    wrapped: {\n      address: \"0x82af49447d8a07e3bd95bd0d56f35241523fbab1\",\n      name: \"Wrapped Ether\",\n      symbol: \"WETH\"\n    }\n  },\n  [ChainId.ArbitrumGoerli]: {\n    name: \"Arbitrum Goerli Ether\",\n    symbol: \"AGOR\",\n    decimals: 18,\n    wrapped: {\n      address: \"0xe39Ab88f8A4777030A534146A9Ca3B52bd5D43A3\",\n      name: \"Wrapped Ether\",\n      symbol: \"WETH\"\n    }\n  },\n  [ChainId.Optimism]: {\n    name: \"Ether\",\n    symbol: \"ETH\",\n    decimals: 18,\n    wrapped: {\n      address: \"0x4200000000000000000000000000000000000006\",\n      name: \"Wrapped Ether\",\n      symbol: \"WETH\"\n    }\n  },\n  [ChainId.OptimismGoerli]: {\n    name: \"Goerli Ether\",\n    symbol: \"ETH\",\n    decimals: 18,\n    wrapped: {\n      address: \"0x4200000000000000000000000000000000000006\",\n      name: \"Wrapped Ether\",\n      symbol: \"WETH\"\n    }\n  },\n  [ChainId.BinanceSmartChainMainnet]: {\n    name: \"Binance Chain Native Token\",\n    symbol: \"BNB\",\n    decimals: 18,\n    wrapped: {\n      address: \"0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c\",\n      name: \"Wrapped Binance Chain Token\",\n      symbol: \"WBNB\"\n    }\n  },\n  [ChainId.BinanceSmartChainTestnet]: {\n    name: \"Binance Chain Native Token\",\n    symbol: \"TBNB\",\n    decimals: 18,\n    wrapped: {\n      address: \"0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd\",\n      name: \"Wrapped Binance Chain Testnet Token\",\n      symbol: \"WBNB\"\n    }\n  },\n  [ChainId.Hardhat]: {\n    name: \"Ether\",\n    symbol: \"ETH\",\n    decimals: 18,\n    wrapped: {\n      address: \"0x5FbDB2315678afecb367f032d93F642f64180aa3\",\n      name: \"Wrapped Ether\",\n      symbol: \"WETH\"\n    }\n  },\n  [ChainId.Localhost]: {\n    name: \"Ether\",\n    symbol: \"ETH\",\n    decimals: 18,\n    wrapped: {\n      address: \"0x5FbDB2315678afecb367f032d93F642f64180aa3\",\n      name: \"Wrapped Ether\",\n      symbol: \"WETH\"\n    }\n  },\n  84531: {\n    name: \"Base Goerli Testnet\",\n    symbol: \"ETH\",\n    decimals: 18,\n    wrapped: {\n      address: \"0x4200000000000000000000000000000000000006\",\n      name: \"Wrapped Ether\",\n      symbol: \"WETH\"\n    }\n  },\n  // eslint-disable-next-line no-useless-computed-key\n  [280]: {\n    name: \"zkSync Era Testnet\",\n    symbol: \"ETH\",\n    decimals: 18,\n    wrapped: {\n      address: \"0x5AEa5775959fBC2557Cc8789bC1bf90A239D9a91\",\n      name: \"Wrapped Ether\",\n      symbol: \"WETH\"\n    }\n  }\n};\n\n/**\n * Returns the native token for a given chain\n * @param chainId - the chain id\n * @public\n */\nfunction getNativeTokenByChainId(chainId) {\n  const chain = getSupportedChains().find(c => c.chainId === chainId);\n  if (chain && chain.nativeCurrency) {\n    return {\n      name: chain.nativeCurrency.name,\n      symbol: chain.nativeCurrency.symbol,\n      decimals: 18,\n      wrapped: {\n        address: constants.AddressZero,\n        name: \"Wrapped \".concat(chain.nativeCurrency.name),\n        symbol: \"W\".concat(chain.nativeCurrency.symbol)\n      }\n    };\n  }\n  return NATIVE_TOKENS[chainId] || {\n    name: \"Ether\",\n    symbol: \"ETH\",\n    decimals: 18,\n    wrapped: {\n      address: constants.AddressZero,\n      name: \"Wrapped Ether\",\n      symbol: \"WETH\"\n    }\n  };\n}\nconst LINK_TOKEN_ADDRESS = {\n  [ChainId.Mainnet]: \"0x514910771AF9Ca656af840dff83E8264EcF986CA\",\n  [ChainId.Goerli]: \"0x326C977E6efc84E512bB9C30f76E30c160eD06FB\",\n  [ChainId.BinanceSmartChainMainnet]: \"0x404460C6A5EdE2D891e8297795264fDe62ADBB75\",\n  [ChainId.Polygon]: \"0xb0897686c545045aFc77CF20eC7A532E3120E0F1\",\n  [ChainId.Mumbai]: \"0x326C977E6efc84E512bB9C30f76E30c160eD06FB\",\n  [ChainId.Avalanche]: \"0x5947BB275c521040051D82396192181b413227A3\",\n  [ChainId.AvalancheFujiTestnet]: \"0x0b9d5D9136855f6FEc3c0993feE6E9CE8a297846\",\n  [ChainId.Fantom]: \"0x6F43FF82CCA38001B6699a8AC47A2d0E66939407\",\n  [ChainId.FantomTestnet]: \"0xfaFedb041c0DD4fA2Dc0d87a6B0979Ee6FA7af5F\"\n};\nconst RawDateSchema = /* @__PURE__ */(() => z.union([z.date().transform(i => {\n  return BigNumber.from(Math.floor(i.getTime() / 1000));\n}), z.number().transform(i => {\n  return BigNumber.from(i);\n})]))();\n\n/**\n * Default to now\n */\nconst StartDateSchema = /* @__PURE__ */(() => RawDateSchema.default(new Date(0)))();\n\n/**\n * Default to 10 years from now\n */\nconst EndDateSchema = /* @__PURE__ */(() => RawDateSchema.default(new Date(Date.now() + 1000 * 60 * 60 * 24 * 365 * 10)))();\n\n/**\n * @internal\n */\nconst CurrencySchema = /* @__PURE__ */(() => z.object({\n  name: z.string(),\n  symbol: z.string(),\n  decimals: z.number()\n}))();\n\n/**\n * @internal\n */\nconst CurrencyValueSchema = /* @__PURE__ */(() => CurrencySchema.extend({\n  value: BigNumberSchema,\n  displayValue: z.string()\n}))();\n\n/**\n * @internal\n */\nconst MerkleSchema = /* @__PURE__ */(() => z.object({\n  merkle: z.record(z.string()).default({})\n}))();\nconst SnapshotEntryInput = /* @__PURE__ */(() => z.object({\n  address: AddressOrEnsSchema,\n  maxClaimable: QuantitySchema.default(0),\n  // defaults to 0\n  price: QuantitySchema.optional(),\n  // defaults to unlimited, but can be undefined in old snapshots\n  currencyAddress: AddressOrEnsSchema.default(constants.AddressZero).optional() // defaults to AddressZero, but can be undefined for old snapshots\n}))();\n\n/**\n * @internal\n */\nconst SnapshotInputSchema = /* @__PURE__ */(() => z.union([z.array(z.string()).transform(async strings => await Promise.all(strings.map(address => SnapshotEntryInput.parseAsync({\n  address\n})))), z.array(SnapshotEntryInput)]))();\nconst SnapshotEntryWithProofSchema = /* @__PURE__ */(() => SnapshotEntryInput.extend({\n  proof: z.array(z.string())\n}))();\n\n/**\n * @internal\n */\nconst SnapshotSchema = /* @__PURE__ */(() => z.object({\n  /**\n   * The merkle root\n   */\n  merkleRoot: z.string(),\n  claims: z.array(SnapshotEntryWithProofSchema)\n}))();\n\n/**\n * @internal\n */\n\n/**\n * @internal\n */\nconst SnapshotInfoSchema = /* @__PURE__ */(() => z.object({\n  merkleRoot: z.string(),\n  snapshotUri: z.string()\n}))();\n\n/**\n * @internal\n */\nconst ClaimConditionMetadataSchema = /* @__PURE__ */(() => z.object({\n  name: z.string().optional()\n}).catchall(z.unknown()))();\n\n/**\n * @internal\n */\nconst ClaimConditionInputSchema = /* @__PURE__ */(() => z.object({\n  startTime: StartDateSchema,\n  currencyAddress: z.string().default(NATIVE_TOKEN_ADDRESS),\n  price: AmountSchema.default(0),\n  maxClaimableSupply: QuantitySchema,\n  maxClaimablePerWallet: QuantitySchema,\n  waitInSeconds: BigNumberishSchema.default(0),\n  merkleRootHash: BytesLikeSchema.default(utils.hexZeroPad([0], 32)),\n  snapshot: z.optional(SnapshotInputSchema).nullable(),\n  metadata: ClaimConditionMetadataSchema.optional()\n}))();\n\n/**\n * @internal\n */\nconst ClaimConditionInputArray = /* @__PURE__ */z.array(ClaimConditionInputSchema);\n\n/**\n * @internal\n */\nconst PartialClaimConditionInputSchema = /* @__PURE__ */ClaimConditionInputSchema.partial();\n\n/**\n * @internal\n */\nconst ClaimConditionOutputSchema = /* @__PURE__ */(() => ClaimConditionInputSchema.extend({\n  availableSupply: QuantitySchema,\n  currentMintSupply: QuantitySchema,\n  currencyMetadata: CurrencyValueSchema.default({\n    value: BigNumber.from(\"0\"),\n    displayValue: \"0\",\n    symbol: \"\",\n    decimals: 18,\n    name: \"\"\n  }),\n  price: BigNumberSchema,\n  waitInSeconds: BigNumberSchema,\n  startTime: BigNumberSchema.transform(n => new Date(n.toNumber() * 1000)),\n  snapshot: SnapshotInputSchema.optional().nullable()\n}))();\nfunction resolveOrGenerateId(requestUId) {\n  if (requestUId === undefined) {\n    const buffer = Buffer.alloc(16);\n    v4({}, buffer);\n    return utils.hexlify(utils.toUtf8Bytes(buffer.toString(\"hex\")));\n  } else {\n    return utils.hexlify(requestUId);\n  }\n}\n\n/**\n * @internal\n */\nconst BaseSignaturePayloadInput = /* @__PURE__ */(() => z.object({\n  to: AddressOrEnsSchema.refine(address => address.toLowerCase() !== constants.AddressZero, {\n    message: \"Cannot create payload to mint to zero address\"\n  }),\n  price: AmountSchema.default(0),\n  currencyAddress: AddressSchema.default(NATIVE_TOKEN_ADDRESS),\n  mintStartTime: StartDateSchema,\n  mintEndTime: EndDateSchema,\n  uid: z.string().optional().transform(arg => resolveOrGenerateId(arg)),\n  primarySaleRecipient: AddressOrEnsSchema.default(constants.AddressZero)\n}))();\n\n/**\n * @internal\n */\nconst Signature20PayloadInput = /* @__PURE__ */BaseSignaturePayloadInput.extend({\n  quantity: AmountSchema\n});\n\n/**\n * @internal\n */\nconst Signature20PayloadOutput = /* @__PURE__ */Signature20PayloadInput.extend({\n  mintStartTime: BigNumberSchema,\n  mintEndTime: BigNumberSchema\n});\n\n/**\n * @internal\n */\nconst Signature721PayloadInput = /* @__PURE__ */(() => BaseSignaturePayloadInput.extend({\n  metadata: NFTInputOrUriSchema,\n  royaltyRecipient: z.string().default(constants.AddressZero),\n  royaltyBps: BasisPointsSchema.default(0)\n}))();\n\n/**\n * @internal\n */\nconst Signature721PayloadOutput = /* @__PURE__ */(() => Signature721PayloadInput.extend({\n  metadata: NFTInputOrUriSchema.default(\"\"),\n  uri: z.string(),\n  royaltyBps: BigNumberSchema,\n  mintStartTime: BigNumberSchema,\n  mintEndTime: BigNumberSchema\n}))();\n\n/**\n * @internal\n */\nconst Signature1155PayloadInput = /* @__PURE__ */(() => Signature721PayloadInput.extend({\n  metadata: NFTInputOrUriSchema.default(\"\"),\n  quantity: BigNumberishSchema\n}))();\n\n/**\n * @internal\n */\nconst Signature1155PayloadInputWithTokenId = /* @__PURE__ */Signature1155PayloadInput.extend({\n  tokenId: BigNumberishSchema\n});\n\n/**\n * @internal\n */\nconst Signature1155PayloadOutput = /* @__PURE__ */Signature721PayloadOutput.extend({\n  tokenId: BigNumberSchema,\n  quantity: BigNumberSchema\n});\n\n/**\n * @internal\n */\nconst Signature721WithQuantityInput = /* @__PURE__ */(() => Signature721PayloadInput.extend({\n  metadata: NFTInputOrUriSchema.default(\"\"),\n  quantity: BigNumberSchema.default(1)\n}))();\n\n/**\n * @internal\n */\nconst Signature721WithQuantityOutput = /* @__PURE__ */(() => Signature721PayloadOutput.extend({\n  quantity: BigNumberSchema.default(1)\n}))();\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\nconst MintRequest20 = [{\n  name: \"to\",\n  type: \"address\"\n}, {\n  name: \"primarySaleRecipient\",\n  type: \"address\"\n}, {\n  name: \"quantity\",\n  type: \"uint256\"\n}, {\n  name: \"price\",\n  type: \"uint256\"\n}, {\n  name: \"currency\",\n  type: \"address\"\n}, {\n  name: \"validityStartTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"validityEndTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"uid\",\n  type: \"bytes32\"\n}];\nconst MintRequest721 = [{\n  name: \"to\",\n  type: \"address\"\n}, {\n  name: \"royaltyRecipient\",\n  type: \"address\"\n}, {\n  name: \"royaltyBps\",\n  type: \"uint256\"\n}, {\n  name: \"primarySaleRecipient\",\n  type: \"address\"\n}, {\n  name: \"uri\",\n  type: \"string\"\n}, {\n  name: \"price\",\n  type: \"uint256\"\n}, {\n  name: \"currency\",\n  type: \"address\"\n}, {\n  name: \"validityStartTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"validityEndTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"uid\",\n  type: \"bytes32\"\n}];\nconst MintRequest1155 = [{\n  name: \"to\",\n  type: \"address\"\n}, {\n  name: \"royaltyRecipient\",\n  type: \"address\"\n}, {\n  name: \"royaltyBps\",\n  type: \"uint256\"\n}, {\n  name: \"primarySaleRecipient\",\n  type: \"address\"\n}, {\n  name: \"tokenId\",\n  type: \"uint256\"\n}, {\n  name: \"uri\",\n  type: \"string\"\n}, {\n  name: \"quantity\",\n  type: \"uint256\"\n}, {\n  name: \"pricePerToken\",\n  type: \"uint256\"\n}, {\n  name: \"currency\",\n  type: \"address\"\n}, {\n  name: \"validityStartTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"validityEndTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"uid\",\n  type: \"bytes32\"\n}];\nconst MintRequest721withQuantity = [{\n  name: \"to\",\n  type: \"address\"\n}, {\n  name: \"royaltyRecipient\",\n  type: \"address\"\n}, {\n  name: \"royaltyBps\",\n  type: \"uint256\"\n}, {\n  name: \"primarySaleRecipient\",\n  type: \"address\"\n}, {\n  name: \"uri\",\n  type: \"string\"\n}, {\n  name: \"quantity\",\n  type: \"uint256\"\n}, {\n  name: \"pricePerToken\",\n  type: \"uint256\"\n}, {\n  name: \"currency\",\n  type: \"address\"\n}, {\n  name: \"validityStartTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"validityEndTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"uid\",\n  type: \"bytes32\"\n}];\nconst GenericRequest = [{\n  name: \"validityStartTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"validityEndTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"uid\",\n  type: \"bytes32\"\n}, {\n  name: \"data\",\n  type: \"bytes\"\n}];\n\n/**\n * @internal\n */\nconst CommonContractSchema = /* @__PURE__ */(() => z.object({\n  name: z.string(),\n  description: z.string().optional(),\n  image: FileOrBufferOrStringSchema.optional(),\n  external_link: z.string().optional(),\n  app_uri: z.string().optional(),\n  social_urls: z.record(z.string()).optional()\n}).catchall(z.unknown()))();\n/**\n * @internal\n */\nconst CommonContractOutputSchema = /* @__PURE__ */(() => CommonContractSchema.extend({\n  image: z.string().optional()\n}).catchall(z.unknown()))();\n\n/**\n * @internal\n */\nconst CommonRoyaltySchema = /* @__PURE__ */(() => z.object({\n  /**\n   * The amount of royalty collected on all royalties represented as basis points.\n   * The default is 0 (no royalties).\n   *\n   * 1 basis point = 0.01%\n   *\n   * For example: if this value is 100, then the royalty is 1% of the total sales.\n   *\n   *  @internalremarks used by OpenSea \"seller_fee_basis_points\"\n   */\n  seller_fee_basis_points: BasisPointsSchema.default(0),\n  /**\n   * The address of the royalty recipient. All royalties will be sent\n   * to this address.\n   * @internalremarks used by OpenSea \"fee_recipient\"\n   */\n  fee_recipient: AddressOrEnsSchema.default(constants.AddressZero)\n}))();\n\n/**\n * @internal\n */\nconst CommonPrimarySaleSchema = /* @__PURE__ */z.object({\n  /**\n   * primary sale recipient address\n   */\n  primary_sale_recipient: AddressOrEnsSchema\n});\n\n/**\n * @internal\n */\nconst CommonPlatformFeeSchema = /* @__PURE__ */(() => z.object({\n  /**\n   * platform fee basis points\n   */\n  platform_fee_basis_points: BasisPointsSchema.default(0),\n  /**\n   * platform fee recipient address\n   */\n  platform_fee_recipient: AddressOrEnsSchema.default(constants.AddressZero)\n}))();\n\n/**\n * @internal\n */\nconst CommonTrustedForwarderSchema = /* @__PURE__ */(() => z.object({\n  trusted_forwarders: z.array(AddressOrEnsSchema).default([])\n}))();\n\n/**\n * @internal\n */\nconst CommonSymbolSchema = /* @__PURE__ */(() => z.object({\n  symbol: z.string().default(\"\")\n}))();\n\n/**\n * @internal\n */\nconst BYOCContractMetadataSchema = /* @__PURE__ */(() => CommonContractSchema.catchall(z.union([BigNumberTransformSchema, z.unknown()])))();\n\n/**\n * @internal\n */\n\n/**\n * @internal\n */\nconst CustomContractInput = /* @__PURE__ */(() => BYOCContractMetadataSchema.merge(CommonRoyaltySchema.merge(MerkleSchema).merge(CommonSymbolSchema).partial()).catchall(z.any()))();\n\n/**\n * @internal\n */\nconst CustomContractOutput = /* @__PURE__ */(() => CommonContractOutputSchema.merge(CommonRoyaltySchema.merge(MerkleSchema).merge(CommonSymbolSchema).partial()).catchall(z.any()))();\n\n/**\n * @internal\n */\nconst CustomContractDeploy = /* @__PURE__ */(() => CustomContractInput.merge(CommonPlatformFeeSchema.merge(CommonPrimarySaleSchema).merge(CommonTrustedForwarderSchema).partial()))();\n\n/**\n * @internal\n */\nconst CustomContractSchema = {\n  deploy: CustomContractDeploy,\n  output: CustomContractOutput,\n  input: CustomContractInput\n};\n\n/**\n * @internal\n */\nconst AbiTypeBaseSchema = /* @__PURE__ */(() => z.object({\n  type: z.string(),\n  name: z.string().default(\"\")\n}).catchall(z.any()))();\n\n/**\n * @internal\n */\nconst AbiTypeSchema = /* @__PURE__ */(() => AbiTypeBaseSchema.extend({\n  stateMutability: z.string().optional(),\n  components: z.array(AbiTypeBaseSchema).optional()\n}).catchall(z.any()))();\n\n/**\n * @internal\n */\nconst AbiObjectSchema = /* @__PURE__ */(() => z.object({\n  type: z.string(),\n  name: z.string().default(\"\"),\n  inputs: z.array(AbiTypeSchema).default([]),\n  outputs: z.array(AbiTypeSchema).default([])\n}).catchall(z.any()))();\n\n/**\n * @internal\n */\nconst AbiSchema = /* @__PURE__ */z.array(AbiObjectSchema);\n// if we want to statically type this for external usage it has to *awlways* be the output type\n\n// input type is only used internally\n/**\n * @internal\n */\n/**\n * @internal\n */\nconst PreDeployMetadata = /* @__PURE__ */(() => z.object({\n  name: z.string(),\n  metadataUri: z.string(),\n  bytecodeUri: z.string(),\n  analytics: z.any().optional()\n}).catchall(z.any()))();\n\n/**\n * @internal\n */\nconst ChainIdToAddressSchema = /* @__PURE__ */(() => z.record(z.string(), z.string()))();\n\n/**\n * @internal\n */\nconst CustomFactoryInput = /* @__PURE__ */(() => z.object({\n  factoryFunction: z.string(),\n  params: z.array(z.object({\n    name: z.string(),\n    type: z.string()\n  })).default([]),\n  customFactoryAddresses: ChainIdToAddressSchema\n}))();\n\n/**\n * @internal\n */\nconst FactoryDeploymentSchema = /* @__PURE__ */(() => z.object({\n  implementationAddresses: ChainIdToAddressSchema,\n  implementationInitializerFunction: z.string().default(\"initialize\"),\n  customFactoryInput: CustomFactoryInput.optional(),\n  factoryAddresses: ChainIdToAddressSchema.optional()\n}))();\n\n/**\n * @internal\n */\nconst DeployTypeInput = /* @__PURE__ */(() => z.union([z.literal(\"standard\"), z.literal(\"autoFactory\"), z.literal(\"customFactory\")]))();\n\n/**\n * @internal\n */\nconst RouterTypeInput = /* @__PURE__ */(() => z.union([z.literal(\"none\"), z.literal(\"plugin\"), z.literal(\"dynamic\")]))();\n\n/**\n * @internal\n */\nconst DeploymentNetworkInput = /* @__PURE__ */(() => z.object({\n  allNetworks: z.boolean().optional(),\n  networksEnabled: z.array(z.number()).default([])\n}))();\n\n/**\n * @internal\n */\nconst ExtraPublishMetadataSchemaInput = /* @__PURE__ */(() => z.object({\n  version: z.string().refine(v => {\n    try {\n      toSemver(v);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }, out => {\n    return {\n      message: \"'\".concat(out, \"' is not a valid semantic version. Should be in the format of major.minor.patch. Ex: 0.4.1\")\n    };\n  }),\n  displayName: z.string().optional(),\n  description: z.string().optional(),\n  readme: z.string().optional(),\n  license: z.string().optional(),\n  changelog: z.string().optional(),\n  tags: z.array(z.string()).optional(),\n  audit: FileOrBufferOrStringSchema.nullable().optional(),\n  logo: FileOrBufferOrStringSchema.nullable().optional(),\n  isDeployableViaFactory: z.boolean().optional(),\n  isDeployableViaProxy: z.boolean().optional(),\n  factoryDeploymentData: FactoryDeploymentSchema.optional(),\n  deployType: DeployTypeInput.optional(),\n  routerType: RouterTypeInput.optional(),\n  defaultExtensions: z.array(z.object({\n    extensionName: z.string(),\n    extensionVersion: z.string().default(\"latest\"),\n    publisherAddress: AddressOrEnsSchema\n  })).optional(),\n  networksForDeployment: DeploymentNetworkInput.optional(),\n  constructorParams: z.record(z.string(), z.object({\n    displayName: z.string().optional(),\n    description: z.string().optional(),\n    defaultValue: z.string().optional(),\n    hidden: z.boolean().optional()\n  }).catchall(z.any())).optional(),\n  compositeAbi: AbiSchema.optional()\n}).catchall(z.any()))();\n\n/**\n * @internal\n */\nconst ExtraPublishMetadataSchemaOutput = /* @__PURE__ */(() => ExtraPublishMetadataSchemaInput.extend({\n  audit: z.string().nullable().optional(),\n  logo: z.string().nullable().optional()\n}))();\n/**\n * @internal\n */\nconst FullPublishMetadataSchemaInput = /* @__PURE__ */(() => PreDeployMetadata.merge(ExtraPublishMetadataSchemaInput).extend({\n  publisher: AddressOrEnsSchema.optional()\n}))();\n\n/**\n * @internal\n */\nconst FullPublishMetadataSchemaOutput = /* @__PURE__ */(() => PreDeployMetadata.merge(ExtraPublishMetadataSchemaOutput).extend({\n  publisher: AddressOrEnsSchema.optional()\n}))();\n/**\n * @internal\n */\nconst ProfileSchemaInput = /* @__PURE__ */(() => z.object({\n  name: z.string().optional(),\n  bio: z.string().optional(),\n  avatar: FileOrBufferOrStringSchema.nullable().optional(),\n  website: z.string().optional(),\n  twitter: z.string().optional(),\n  telegram: z.string().optional(),\n  facebook: z.string().optional(),\n  github: z.string().optional(),\n  medium: z.string().optional(),\n  linkedin: z.string().optional(),\n  reddit: z.string().optional(),\n  discord: z.string().optional()\n}))();\nconst ProfileSchemaOutput = /* @__PURE__ */(() => ProfileSchemaInput.extend({\n  avatar: z.string().nullable().optional()\n}))();\n/**\n * @internal\n */\nconst PublishedContractSchema = /* @__PURE__ */(() => z.object({\n  id: z.string(),\n  timestamp: BigNumberishSchema,\n  metadataUri: z.string()\n}))();\n\n/**\n * @internal\n * Follows https://docs.soliditylang.org/en/v0.8.15/natspec-format.html\n */\nconst ContractInfoSchema = /* @__PURE__ */(() => z.object({\n  title: z.string().optional(),\n  author: z.string().optional(),\n  details: z.string().optional(),\n  notice: z.string().optional()\n}))();\n\n/**\n * @internal\n */\nconst CompilerMetadataFetchedSchema = /* @__PURE__ */(() => z.object({\n  name: z.string(),\n  abi: AbiSchema,\n  metadata: z.record(z.string(), z.any()),\n  info: ContractInfoSchema,\n  licenses: z.array(z.string().optional()).default([]).transform(v => {\n    return v.filter(license => license !== undefined);\n  }),\n  isPartialAbi: z.boolean().optional()\n}))();\n\n/**\n * @internal\n */\nconst PreDeployMetadataFetchedSchema = /* @__PURE__ */(() => PreDeployMetadata.merge(CompilerMetadataFetchedSchema).extend({\n  bytecode: z.string()\n}))();\nconst CallOverrideSchema = /* @__PURE__ */(() => z.object({\n  gasLimit: BigNumberishSchema.optional(),\n  gasPrice: BigNumberishSchema.optional(),\n  maxFeePerGas: BigNumberishSchema.optional(),\n  maxPriorityFeePerGas: BigNumberishSchema.optional(),\n  nonce: BigNumberishSchema.optional(),\n  value: BigNumberishSchema.optional(),\n  blockTag: z.union([z.string(), z.number()]).optional(),\n  from: AddressOrEnsSchema.optional(),\n  type: z.number().optional()\n}).strict())();\n\n/**\n * Encodes and decodes Contract functions\n * @public\n */\nclass ContractEncoder {\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Encodes the given contract function with argument\n   * @returns the encoded data\n   */\n  encode(fn, args) {\n    return this.contractWrapper.readContract.interface.encodeFunctionData(fn, args);\n  }\n\n  /**\n   * Decode encoded call data for a given function\n   * @param fn - the function to decode\n   * @param encodedArgs - the encoded arguments\n   */\n  decode(fn, encodedArgs) {\n    return this.contractWrapper.readContract.interface.decodeFunctionData(fn, encodedArgs);\n  }\n}\n\n/**\n * Error that may get thrown if IPFS returns nothing for a given uri.\n * @internal\n */\nclass NotFoundError extends Error {\n  /** @internal */\n  constructor(identifier) {\n    super(identifier ? \"Object with id \".concat(identifier, \" NOT FOUND\") : \"NOT_FOUND\");\n  }\n}\n\n/**\n * Error that may get thrown if an invalid address was passed\n * @internal\n */\nclass InvalidAddressError extends Error {\n  /** @internal */\n  constructor(address) {\n    super(address ? \"'\".concat(address, \"' is an invalid address\") : \"Invalid address passed\");\n  }\n}\n\n/**\n * @internal\n */\nclass MissingRoleError extends Error {\n  /** @internal */\n  /** @internal */\n  constructor(address, role) {\n    super(\"MISSING ROLE: \".concat(address, \" does not have the '\").concat(role, \"' role\"));\n  }\n}\n\n/**\n * @internal\n */\nclass AssetNotFoundError extends Error {\n  /** @internal */\n  /** @internal */\n  constructor() {\n    let message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"The asset you're trying to use could not be found.\";\n    super(\"message: \".concat(message));\n  }\n}\n\n/**\n * @internal\n */\nclass UploadError extends Error {\n  /** @internal */\n  constructor(message) {\n    super(\"UPLOAD_FAILED: \".concat(message));\n  }\n}\n\n/**\n * @internal\n */\nclass FileNameMissingError extends Error {\n  /** @internal */\n  constructor() {\n    super(\"File name is required when object is not a `File` type object.\");\n  }\n}\n\n/**\n * @internal\n */\nclass DuplicateFileNameError extends Error {\n  /** @internal */\n  constructor(fileName) {\n    super(\"DUPLICATE_FILE_NAME_ERROR: File name \".concat(fileName, \" was passed for more than one file.\"));\n  }\n}\n\n/**\n * @internal\n */\nclass NotEnoughTokensError extends Error {\n  /** @internal */\n  constructor(contractAddress, quantity, available) {\n    super(\"BALANCE ERROR: you do not have enough balance on contract \".concat(contractAddress, \" to use \").concat(quantity, \" tokens. You have \").concat(available, \" tokens available.\"));\n  }\n}\n\n/**\n * @internal\n */\nclass MissingOwnerRoleError extends Error {\n  /** @internal */\n  constructor() {\n    super(\"LIST ERROR: you should be the owner of the token to list it.\");\n  }\n}\n\n/**\n * @internal\n */\nclass QuantityAboveLimitError extends Error {\n  /** @internal */\n  constructor(quantity) {\n    super(\"BUY ERROR: You cannot buy more than \".concat(quantity, \" tokens\"));\n  }\n}\n\n/**\n * Thrown when data fails to fetch from storage.\n * @internal\n */\nclass FetchError extends Error {\n  /** @internal */\n  constructor(message, innerError) {\n    super(\"FETCH_FAILED: \".concat(message));\n    this.innerError = innerError;\n  }\n}\n\n/**\n * Thrown when attempting to create a snapshot with duplicate leafs\n * @internal\n */\nclass DuplicateLeafsError extends Error {\n  constructor(message) {\n    super(\"DUPLICATE_LEAFS\".concat(message ? \" : \".concat(message) : \"\"));\n  }\n}\n\n/**\n * Thrown when attempting to update/cancel an auction that already started\n * @internal\n */\nclass AuctionAlreadyStartedError extends Error {\n  constructor(id) {\n    super(\"Auction already started with existing bid\".concat(id ? \", id: \".concat(id) : \"\"));\n  }\n}\n\n/**\n * @internal\n */\nclass FunctionDeprecatedError extends Error {\n  /** @internal */\n  constructor(message) {\n    super(\"FUNCTION DEPRECATED. \".concat(message ? \"Use \".concat(message, \" instead\") : \"\"));\n  }\n}\n\n/**\n * Thrown when trying to retrieve a listing from a marketplace that doesn't exist\n * @internal\n */\nclass ListingNotFoundError extends Error {\n  constructor(marketplaceContractAddress, listingId) {\n    super(\"Could not find listing.\".concat(marketplaceContractAddress ? \" marketplace address: \".concat(marketplaceContractAddress) : \"\").concat(listingId ? \" listing id: \".concat(listingId) : \"\"));\n  }\n}\n\n/**\n * Thrown when trying to retrieve a listing of the wrong type\n * @internal\n */\nclass WrongListingTypeError extends Error {\n  constructor(marketplaceContractAddress, listingId, actualType, expectedType) {\n    super(\"Incorrect listing type. Are you sure you're using the right method?.\".concat(marketplaceContractAddress ? \" marketplace address: \".concat(marketplaceContractAddress) : \"\").concat(listingId ? \" listing id: \".concat(listingId) : \"\").concat(expectedType ? \" expected type: \".concat(expectedType) : \"\").concat(actualType ? \" actual type: \".concat(actualType) : \"\"));\n  }\n}\n\n/**\n * Thrown when attempting to transfer an asset that has restricted transferability\n * @internal\n */\nclass RestrictedTransferError extends Error {\n  constructor(assetAddress) {\n    super(\"Failed to transfer asset, transfer is restricted.\".concat(assetAddress ? \" Address : \".concat(assetAddress) : \"\"));\n  }\n}\n\n/**\n * Thrown when attempting to execute an admin-role function.\n * @internal\n */\nclass AdminRoleMissingError extends Error {\n  constructor(address, contractAddress) {\n    let message = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"Failed to execute transaction\";\n    super(\"\".concat(message, \", admin role is missing\").concat(address ? \" on address: \".concat(address) : \"\").concat(contractAddress ? \" on contract: \".concat(contractAddress) : \"\"));\n  }\n}\n\n/**\n * Thrown when attempting to close an auction that has not ended\n * @internal\n */\nclass AuctionHasNotEndedError extends Error {\n  constructor(id, endTime) {\n    super(\"Auction has not ended yet\".concat(id ? \", id: \".concat(id) : \"\").concat(endTime ? \", end time: \".concat(endTime.toString()) : \"\"));\n  }\n}\n\n/**\n * Thrown when attempting to call a contract function that is not implemented\n * @internal\n */\nclass ExtensionNotImplementedError extends Error {\n  constructor(feature) {\n    super(\"This functionality is not available because the contract does not implement the '\".concat(feature.name, \"' Extension. Learn how to unlock this functionality at https://portal.thirdweb.com/extensions \"));\n  }\n}\n\n/**\n * @internal\n */\n\n/**\n * @public\n */\nvar _reason = /*#__PURE__*/new WeakMap();\nvar _info = /*#__PURE__*/new WeakMap();\nvar _raw = /*#__PURE__*/new WeakMap();\nclass TransactionError extends Error {\n  constructor(info, raw) {\n    let errorMessage = \"\\n\\n\\n\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n\\u2551 TRANSACTION ERROR \\u2551\\n\\u255A\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255D\\n\\n\";\n    errorMessage += \"Reason: \".concat(info.reason);\n    errorMessage += \"\\n\\n\\n\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n\\u2551 TRANSACTION INFORMATION \\u2551\\n\\u255A\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255D\\n\";\n    errorMessage += withSpaces(\"from\", info.from);\n    if (info.to) {\n      errorMessage += withSpaces(\"to\", info.contractName ? \"\".concat(info.to, \" (\").concat(info.contractName, \")\") : info.to);\n    }\n    errorMessage += withSpaces(\"chain\", \"\".concat(info.network.name, \" (\").concat(info.network.chainId, \")\"));\n    if (info.rpcUrl) {\n      try {\n        const url = new URL(info.rpcUrl);\n        errorMessage += withSpaces(\"rpc\", url.hostname);\n      } catch (e2) {\n        // ignore if can't parse URL\n      }\n    }\n    if (info.hash) {\n      errorMessage += withSpaces(\"tx hash\", info.hash);\n    }\n    if (info.value && info.value.gt(0)) {\n      var _NATIVE_TOKENS$info$n;\n      errorMessage += withSpaces(\"value\", \"\".concat(utils.formatEther(info.value), \" \").concat(((_NATIVE_TOKENS$info$n = NATIVE_TOKENS[info.network.chainId]) === null || _NATIVE_TOKENS$info$n === void 0 ? void 0 : _NATIVE_TOKENS$info$n.symbol) || \"\"));\n    }\n    errorMessage += withSpaces(\"data\", \"\".concat(info.data));\n    if (info.method) {\n      errorMessage += withSpaces(\"method\", info.method);\n    }\n    if (info.sources) {\n      const revertFile = info.sources.find(file => file.source.includes(info.reason));\n      if (revertFile) {\n        const lines = revertFile.source.split(\"\\n\").map((line, index) => \"\".concat(index + 1, \"  \").concat(line));\n        const revertLine = lines.findIndex(line => line.includes(info.reason));\n        lines[revertLine] += \"   <-- REVERT\";\n        const errorLines = lines.slice(revertLine - 8, revertLine + 4);\n        errorMessage += \"\\n\\n\\n\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n\\u2551 SOLIDITY STACK TRACE \\u2551\\n\\u255A\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255D\\n\\n\";\n        errorMessage += \"File: \".concat(revertFile.filename.replace(\"node_modules/\", \"\"), \"\\n\\n\");\n        errorMessage += errorLines.join(\"\\n\");\n      }\n    }\n    errorMessage += \"\\n\\n\\n\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n\\u2551 DEBUGGING RESOURCES \\u2551\\n\\u255A\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255D\\n\\n\";\n    errorMessage += \"Need helping debugging? Join our Discord: https://discord.gg/thirdweb\";\n    errorMessage += \"\\n\\n\";\n    super(errorMessage);\n    _classPrivateFieldInitSpec(this, _reason, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _info, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _raw, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldSet(this, _reason, info.reason);\n    _classPrivateFieldSet(this, _info, info);\n    _classPrivateFieldSet(this, _raw, raw);\n  }\n\n  // Keep reason here for backwards compatibility\n  get reason() {\n    return _classPrivateFieldGet(this, _reason);\n  }\n  get raw() {\n    return _classPrivateFieldGet(this, _raw);\n  }\n  get info() {\n    return _classPrivateFieldGet(this, _info);\n  }\n}\n\n/**\n * @internal\n */\nfunction parseRevertReason(error) {\n  if (error.reason && !error.reason.includes(\"cannot estimate gas\")) {\n    return error.reason;\n  }\n  if (error.error) {\n    return error.error;\n  }\n\n  // I think this code path should never be hit, but just in case\n\n  let errorString = error;\n  if (typeof error === \"object\") {\n    // MetaMask errors come as objects so parse them first\n    errorString = JSON.stringify(error);\n  } else if (typeof error !== \"string\") {\n    errorString = error.toString();\n  }\n  return parseMessageParts(/.*?\"message\":\"([^\"\\\\]*).*?/, errorString) || parseMessageParts(/.*?\"reason\":\"([^\"\\\\]*).*?/, errorString) || error.message || \"\";\n}\nfunction withSpaces(label, content) {\n  if (content === \"\") {\n    return content;\n  }\n  const spaces = Array(10 - label.length).fill(\" \").join(\"\");\n  if (content.includes(\"\\n\")) {\n    content = \"\\n\\n  \" + content.split(\"\\n\").join(\"\\n  \");\n  } else {\n    content = \"\".concat(spaces).concat(content);\n  }\n  return \"\\n\".concat(label, \":\").concat(content);\n}\nfunction parseMessageParts(regex, raw) {\n  const msgMatches = raw.match(regex) || [];\n  let extracted = \"\";\n  if ((msgMatches === null || msgMatches === void 0 ? void 0 : msgMatches.length) > 0) {\n    extracted += msgMatches[1];\n  }\n  return extracted;\n}\n\n/**\n * @internal\n * @param err\n * @param message\n */\nfunction includesErrorMessage(err, message) {\n  if (!err) {\n    return false;\n  }\n  return err && err.toString().includes(message) || err && err.message && err.message.toString().includes(message) || err && err.error && err.error.toString().includes(message);\n}\nconst FEATURE_TOKEN_CLAIM_CONDITIONS_V1 = {\n  name: \"ERC20ClaimConditionsV1\",\n  namespace: \"token.drop.claim\",\n  docLinks: {\n    sdk: \"sdk.erc20dclaimable\",\n    contracts: \"erc20claimconditions\"\n  },\n  abis: [ERC20Abi, IDropSinglePhaseV1],\n  features: {}\n};\nconst FEATURE_TOKEN_CLAIM_CONDITIONS_V2 = {\n  name: \"ERC20ClaimConditionsV2\",\n  namespace: \"token.drop.claim\",\n  docLinks: {\n    sdk: \"sdk.erc20dclaimable\",\n    contracts: \"erc20claimconditions\"\n  },\n  abis: [ERC20Abi, IDropSinglePhase],\n  features: {}\n};\nconst FEATURE_TOKEN_CLAIM_PHASES_V2 = {\n  name: \"ERC20ClaimPhasesV2\",\n  namespace: \"token.drop.claim\",\n  docLinks: {\n    sdk: \"sdk.erc20dclaimable\",\n    contracts: \"erc20claimphases\"\n  },\n  abis: [ERC20Abi, IDrop],\n  features: {}\n};\nconst FEATURE_TOKEN_CLAIM_PHASES_V1 = {\n  name: \"ERC20ClaimPhasesV1\",\n  namespace: \"token.drop.claim\",\n  docLinks: {\n    sdk: \"sdk.erc20dclaimable\",\n    contracts: \"erc20claimphases\"\n  },\n  abis: [DropERC20_V2Abi],\n  features: {}\n};\nconst FEATURE_TOKEN_BURNABLE = {\n  name: \"ERC20Burnable\",\n  namespace: \"token.burn\",\n  docLinks: {\n    sdk: \"sdk.erc20burnable\",\n    contracts: \"erc20burnable\"\n  },\n  abis: [ERC20Abi, IBurnableERC20Abi],\n  features: {}\n};\nconst FEATURE_TOKEN_SIGNATURE_MINTABLE = {\n  name: \"ERC20SignatureMintable\",\n  namespace: \"token.signature\",\n  docLinks: {\n    sdk: \"sdk.erc20signaturemintable\",\n    contracts: \"erc20signaturemint\"\n  },\n  abis: [ERC20Abi, ISignatureMintERC20Abi],\n  features: {}\n};\nconst FEATURE_TOKEN_BATCH_MINTABLE = {\n  name: \"ERC20BatchMintable\",\n  namespace: \"token.mint.batch\",\n  docLinks: {\n    sdk: \"sdk.erc20batchmintable\",\n    contracts: \"erc20batchmintable\"\n  },\n  abis: [ERC20Abi, IMintableERC20Abi, MulticallAbi],\n  features: {}\n};\nconst FEATURE_TOKEN_MINTABLE = {\n  name: \"ERC20Mintable\",\n  namespace: \"token.mint\",\n  docLinks: {\n    sdk: \"sdk.erc20mintable\",\n    contracts: \"erc20mintable\"\n  },\n  abis: [ERC20Abi, IMintableERC20Abi],\n  features: {\n    [FEATURE_TOKEN_BATCH_MINTABLE.name]: FEATURE_TOKEN_BATCH_MINTABLE\n  }\n};\nconst FEATURE_TOKEN_PERMIT = {\n  name: \"ERC20Permit\",\n  namespace: \"token.permit\",\n  docLinks: {\n    sdk: \"sdk.erc20permit\",\n    contracts: \"erc20permit\"\n  },\n  abis: [ERC20Abi, IERC20PermitAbi],\n  features: {}\n};\nconst FEATURE_TOKEN = {\n  name: \"ERC20\",\n  namespace: \"token\",\n  docLinks: {\n    sdk: \"sdk.erc20\",\n    contracts: \"erc20\"\n  },\n  abis: [ERC20Abi, IERC20MetadataAbi],\n  features: {\n    [FEATURE_TOKEN_BURNABLE.name]: FEATURE_TOKEN_BURNABLE,\n    [FEATURE_TOKEN_MINTABLE.name]: FEATURE_TOKEN_MINTABLE,\n    [FEATURE_TOKEN_CLAIM_CONDITIONS_V1.name]: FEATURE_TOKEN_CLAIM_CONDITIONS_V1,\n    [FEATURE_TOKEN_CLAIM_CONDITIONS_V2.name]: FEATURE_TOKEN_CLAIM_CONDITIONS_V2,\n    [FEATURE_TOKEN_CLAIM_PHASES_V1.name]: FEATURE_TOKEN_CLAIM_PHASES_V1,\n    [FEATURE_TOKEN_CLAIM_PHASES_V2.name]: FEATURE_TOKEN_CLAIM_PHASES_V2,\n    [FEATURE_TOKEN_SIGNATURE_MINTABLE.name]: FEATURE_TOKEN_SIGNATURE_MINTABLE,\n    [FEATURE_TOKEN_PERMIT.name]: FEATURE_TOKEN_PERMIT\n  }\n};\nconst FEATURE_NFT_BURNABLE = {\n  name: \"ERC721Burnable\",\n  namespace: \"nft.burn\",\n  docLinks: {\n    sdk: \"sdk.erc721burnable\",\n    contracts: \"erc721burnable\"\n  },\n  abis: [Erc721Abi, IBurnableERC721Abi],\n  features: {}\n};\nconst FEATURE_NFT_REVEALABLE = {\n  name: \"ERC721Revealable\",\n  namespace: \"nft.drop.revealer\",\n  docLinks: {\n    sdk: \"sdk.delayedreveal\",\n    contracts: \"erc721revealable\"\n  },\n  abis: [Erc721Abi, ILazyMintAbi, DelayedRevealAbi],\n  features: {}\n};\nconst FEATURE_NFT_TIERED_DROP = {\n  name: \"ERC721TieredDrop\",\n  namespace: \"nft.tieredDrop\",\n  docLinks: {\n    sdk: \"sdk.erc721tiereddrop\",\n    //TODO\n    contracts: \"\"\n  },\n  abis: [Erc721Abi, TieredDropAbi],\n  features: {}\n};\nconst FEATURE_NFT_CLAIM_CONDITIONS_V1 = {\n  name: \"ERC721ClaimConditionsV1\",\n  namespace: \"nft.drop.claim\",\n  docLinks: {\n    sdk: \"sdk.erc721claimable\",\n    contracts: \"erc721claimconditions\"\n  },\n  abis: [Erc721Abi, IDropSinglePhaseV1],\n  features: {}\n};\nconst FEATURE_NFT_CLAIM_CONDITIONS_V2 = {\n  name: \"ERC721ClaimConditionsV2\",\n  namespace: \"nft.drop.claim\",\n  docLinks: {\n    sdk: \"sdk.erc721claimable\",\n    contracts: \"erc721claimconditions\"\n  },\n  abis: [Erc721Abi, IDropSinglePhase],\n  features: {}\n};\nconst FEATURE_NFT_CLAIM_PHASES_V1 = {\n  name: \"ERC721ClaimPhasesV1\",\n  namespace: \"nft.drop.claim\",\n  docLinks: {\n    sdk: \"sdk.erc721claimable\",\n    contracts: \"erc721claimphases\"\n  },\n  abis: [DropERC721_V3Abi],\n  features: {}\n};\nconst FEATURE_NFT_CLAIM_PHASES_V2 = {\n  name: \"ERC721ClaimPhasesV2\",\n  namespace: \"nft.drop.claim\",\n  docLinks: {\n    sdk: \"sdk.erc721claimable\",\n    contracts: \"erc721claimphases\"\n  },\n  abis: [Erc721Abi, IDrop],\n  features: {}\n};\nconst FEATURE_NFT_CLAIM_CUSTOM = {\n  name: \"ERC721ClaimCustom\",\n  namespace: \"nft.drop.claim\",\n  docLinks: {\n    sdk: \"sdk.erc721claimable\",\n    contracts: \"erc721claimcustom\"\n  },\n  abis: [Erc721Abi, IClaimableERC721],\n  features: {}\n};\nconst FEATURE_NFT_CLAIM_ZORA = {\n  name: \"ERC721ClaimZora\",\n  namespace: \"nft.drop.claim\",\n  docLinks: {\n    sdk: \"sdk.erc721claimable\",\n    contracts: \"erc721claimzora\"\n  },\n  abis: [Erc721Abi, zora_IDropERC721],\n  features: {}\n};\nconst FEATURE_NFT_LAZY_MINTABLE = {\n  name: \"ERC721LazyMintable\",\n  namespace: \"nft.drop\",\n  docLinks: {\n    sdk: \"sdk.erc721lazymintable\",\n    contracts: \"lazymint\"\n  },\n  abis: [Erc721Abi, ILazyMintAbi],\n  features: {\n    [FEATURE_NFT_REVEALABLE.name]: FEATURE_NFT_REVEALABLE\n  }\n};\nconst FEATURE_NFT_BATCH_MINTABLE = {\n  name: \"ERC721BatchMintable\",\n  namespace: \"nft.mint.batch\",\n  docLinks: {\n    sdk: \"sdk.erc721batchmintable\",\n    contracts: \"erc721batchmintable\"\n  },\n  abis: [Erc721Abi, IMintableERC721Abi, MulticallAbi],\n  features: {}\n};\nconst FEATURE_NFT_MINTABLE = {\n  name: \"ERC721Mintable\",\n  namespace: \"nft.mint\",\n  docLinks: {\n    sdk: \"sdk.erc721mintable\",\n    contracts: \"erc721mintable\"\n  },\n  abis: [Erc721Abi, IMintableERC721Abi],\n  features: {\n    [FEATURE_NFT_BATCH_MINTABLE.name]: FEATURE_NFT_BATCH_MINTABLE\n  }\n};\nconst FEATURE_NFT_SIGNATURE_MINTABLE_V2 = {\n  name: \"ERC721SignatureMintV2\",\n  namespace: \"nft.signature\",\n  docLinks: {\n    sdk: \"sdk.erc721signaturemint\",\n    contracts: \"erc721signaturemint\"\n  },\n  abis: [Erc721Abi, SignatureMintERC721Abi],\n  features: {}\n};\nconst FEATURE_NFT_SIGNATURE_MINTABLE_V1 = {\n  name: \"ERC721SignatureMintV1\",\n  namespace: \"nft.signature\",\n  docLinks: {\n    sdk: \"sdk.erc721signaturemint\",\n    contracts: \"erc721signaturemint\"\n  },\n  abis: [SignatureMintERC721_V1Abi],\n  features: {}\n};\nconst FEATURE_NFT_ENUMERABLE = {\n  name: \"ERC721Enumerable\",\n  namespace: \"nft.query.owned\",\n  docLinks: {\n    sdk: \"sdk.erc721enumerable\",\n    contracts: \"erc721enumerable\"\n  },\n  abis: [Erc721Abi, Erc721EnumerableAbi],\n  features: {}\n};\nconst FEATURE_NFT_QUERYABLE = {\n  name: \"ERC721AQueryable\",\n  namespace: \"nft.query.owned\",\n  docLinks: {\n    sdk: \"\",\n    contracts: \"\"\n  },\n  abis: [Erc721AQueryableAbi],\n  features: {}\n};\nconst FEATURE_NFT_SUPPLY = {\n  name: \"ERC721Supply\",\n  namespace: \"nft.query\",\n  docLinks: {\n    sdk: \"sdk.erc721supply\",\n    contracts: \"erc721supply\"\n  },\n  abis: [Erc721Abi, Erc721SupplyAbi],\n  features: {\n    [FEATURE_NFT_ENUMERABLE.name]: FEATURE_NFT_ENUMERABLE,\n    [FEATURE_NFT_QUERYABLE.name]: FEATURE_NFT_QUERYABLE\n  }\n};\nconst FEATURE_NFT_SHARED_METADATA = {\n  name: \"ERC721SharedMetadata\",\n  namespace: \"nft.sharedmetadata\",\n  docLinks: {\n    sdk: \"sdk.sharedmetadata\",\n    contracts: \"SharedMetadata\"\n  },\n  abis: [Erc721Abi, SharedMetadataAbi],\n  features: {}\n};\nconst FEATURE_NFT_LOYALTY_CARD = {\n  name: \"ERC721LoyaltyCard\",\n  namespace: \"nft.loyaltyCard\",\n  docLinks: {\n    // TODO\n    sdk: \"\",\n    contracts: \"\"\n  },\n  abis: [ILoyaltyCardAbi],\n  features: {}\n};\nconst FEATURE_NFT_UPDATABLE_METADATA = {\n  name: \"ERC721UpdatableMetadata\",\n  namespace: \"nft.metadata\",\n  docLinks: {\n    // TODO\n    sdk: \"\",\n    contracts: \"\"\n  },\n  abis: [Erc721Abi, INFTMetadataAbi],\n  features: {}\n};\nconst FEATURE_NFT = {\n  name: \"ERC721\",\n  namespace: \"nft\",\n  docLinks: {\n    sdk: \"sdk.erc721\",\n    contracts: \"erc721\"\n  },\n  abis: [Erc721Abi, IERC721MetadataAbi],\n  features: {\n    [FEATURE_NFT_BURNABLE.name]: FEATURE_NFT_BURNABLE,\n    [FEATURE_NFT_SUPPLY.name]: FEATURE_NFT_SUPPLY,\n    [FEATURE_NFT_MINTABLE.name]: FEATURE_NFT_MINTABLE,\n    [FEATURE_NFT_LAZY_MINTABLE.name]: FEATURE_NFT_LAZY_MINTABLE,\n    [FEATURE_NFT_SIGNATURE_MINTABLE_V1.name]: FEATURE_NFT_SIGNATURE_MINTABLE_V1,\n    [FEATURE_NFT_SIGNATURE_MINTABLE_V2.name]: FEATURE_NFT_SIGNATURE_MINTABLE_V2,\n    [FEATURE_NFT_TIERED_DROP.name]: FEATURE_NFT_TIERED_DROP,\n    [FEATURE_NFT_CLAIM_CUSTOM.name]: FEATURE_NFT_CLAIM_CUSTOM,\n    [FEATURE_NFT_CLAIM_ZORA.name]: FEATURE_NFT_CLAIM_ZORA,\n    [FEATURE_NFT_CLAIM_CONDITIONS_V1.name]: FEATURE_NFT_CLAIM_CONDITIONS_V1,\n    [FEATURE_NFT_CLAIM_CONDITIONS_V2.name]: FEATURE_NFT_CLAIM_CONDITIONS_V2,\n    [FEATURE_NFT_CLAIM_PHASES_V1.name]: FEATURE_NFT_CLAIM_PHASES_V1,\n    [FEATURE_NFT_CLAIM_PHASES_V2.name]: FEATURE_NFT_CLAIM_PHASES_V2,\n    [FEATURE_NFT_SHARED_METADATA.name]: FEATURE_NFT_SHARED_METADATA,\n    [FEATURE_NFT_LOYALTY_CARD.name]: FEATURE_NFT_LOYALTY_CARD,\n    [FEATURE_NFT_UPDATABLE_METADATA.name]: FEATURE_NFT_UPDATABLE_METADATA\n  }\n};\n\n// TODO could be part of IERC1155Metadata even though its not in the spec\nconst NAME_SYMBOL_ABI = [{\n  inputs: [],\n  name: \"name\",\n  outputs: [{\n    internalType: \"string\",\n    name: \"\",\n    type: \"string\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  inputs: [],\n  name: \"symbol\",\n  outputs: [{\n    internalType: \"string\",\n    name: \"\",\n    type: \"string\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}];\nconst FEATURE_EDITION_BURNABLE = {\n  name: \"ERC1155Burnable\",\n  namespace: \"edition.burn\",\n  docLinks: {\n    sdk: \"sdk.erc1155burnable\",\n    contracts: \"erc1155burnable\"\n  },\n  abis: [Erc1155Abi, IBurnableERC1155Abi],\n  features: {}\n};\nconst FEATURE_EDITION_CLAIM_CONDITIONS_V1 = {\n  name: \"ERC1155ClaimConditionsV1\",\n  namespace: \"edition.drop.claim\",\n  docLinks: {\n    sdk: \"sdk.erc1155claimable\",\n    contracts: \"erc1155dropsinglephase\"\n  },\n  abis: [Erc1155Abi, IDropSinglePhase1155_V1],\n  features: {}\n};\nconst FEATURE_EDITION_CLAIM_CONDITIONS_V2 = {\n  name: \"ERC1155ClaimConditionsV2\",\n  namespace: \"edition.drop.claim\",\n  docLinks: {\n    sdk: \"sdk.erc1155claimable\",\n    contracts: \"erc1155claimconditions\"\n  },\n  abis: [Erc1155Abi, IDropSinglePhase1155],\n  features: {}\n};\nconst FEATURE_EDITION_CLAIM_PHASES_V2 = {\n  name: \"ERC1155ClaimPhasesV2\",\n  namespace: \"edition.drop.claim\",\n  docLinks: {\n    sdk: \"sdk.erc1155claimable\",\n    contracts: \"erc1155claimphases\"\n  },\n  abis: [Erc1155Abi, IDropMultiPhase1155],\n  features: {}\n};\nconst FEATURE_EDITION_CLAIM_PHASES_V1 = {\n  name: \"ERC1155ClaimPhasesV1\",\n  namespace: \"edition.drop.claim\",\n  docLinks: {\n    sdk: \"sdk.erc1155claimable\",\n    contracts: \"erc1155claimphases\"\n  },\n  abis: [DropERC1155_V2Abi],\n  features: {}\n};\nconst FEATURE_EDITION_CLAIM_CUSTOM = {\n  name: \"ERC1155ClaimCustom\",\n  namespace: \"edition.drop.claim\",\n  docLinks: {\n    sdk: \"sdk.erc1155claimable\",\n    contracts: \"erc1155claimcustom\"\n  },\n  abis: [Erc1155Abi, IClaimableERC1155],\n  features: {}\n};\nconst FEATURE_EDITION_REVEALABLE = {\n  name: \"ERC1155Revealable\",\n  namespace: \"edition.drop.revealer\",\n  docLinks: {\n    sdk: \"sdk.drop.delayedreveal\",\n    contracts: \"erc1155revealable\"\n  },\n  abis: [Erc1155Abi, ILazyMintAbi, DelayedRevealAbi],\n  features: {}\n};\nconst FEATURE_EDITION_LAZY_MINTABLE_V2 = {\n  name: \"ERC1155LazyMintableV2\",\n  namespace: \"edition.drop\",\n  docLinks: {\n    sdk: \"sdk.erc1155droppable\",\n    contracts: \"lazymint\"\n  },\n  abis: [Erc1155Abi, ILazyMintAbi],\n  features: {\n    [FEATURE_EDITION_REVEALABLE.name]: FEATURE_EDITION_REVEALABLE\n  }\n};\nconst FEATURE_EDITION_LAZY_MINTABLE_V1 = {\n  name: \"ERC1155LazyMintableV1\",\n  namespace: \"edition.drop\",\n  docLinks: {\n    sdk: \"sdk.erc1155droppable\",\n    contracts: \"lazymint\"\n  },\n  abis: [DropERC1155_V2Abi],\n  features: {\n    [FEATURE_EDITION_CLAIM_PHASES_V1.name]: FEATURE_EDITION_CLAIM_PHASES_V1\n  }\n};\nconst FEATURE_EDITION_SIGNATURE_MINTABLE = {\n  name: \"ERC1155SignatureMintable\",\n  namespace: \"edition.signature\",\n  docLinks: {\n    sdk: \"sdk.erc1155signaturemintable\",\n    contracts: \"erc1155signaturemint\"\n  },\n  abis: [Erc1155Abi, ISignatureMintERC1155Abi],\n  features: {}\n};\nconst FEATURE_EDITION_BATCH_MINTABLE = {\n  name: \"ERC1155BatchMintable\",\n  namespace: \"edition.mint.batch\",\n  docLinks: {\n    sdk: \"sdk.erc1155batchmintable\",\n    contracts: \"erc1155batchmintable\"\n  },\n  abis: [Erc1155Abi, IMintableERC1155Abi, MulticallAbi],\n  features: {}\n};\nconst FEATURE_EDITION_MINTABLE = {\n  name: \"ERC1155Mintable\",\n  namespace: \"edition.mint\",\n  docLinks: {\n    sdk: \"sdk.erc1155mintable\",\n    contracts: \"erc1155mintable\"\n  },\n  abis: [Erc1155Abi, IMintableERC1155Abi],\n  features: {\n    [FEATURE_EDITION_BATCH_MINTABLE.name]: FEATURE_EDITION_BATCH_MINTABLE\n  }\n};\nconst FEATURE_EDITION_ENUMERABLE = {\n  name: \"ERC1155Enumerable\",\n  namespace: \"edition.query\",\n  docLinks: {\n    sdk: \"sdk.erc1155\",\n    contracts: \"erc1155enumerable\"\n  },\n  abis: [Erc1155Abi, Erc1155EnumerableAbi],\n  features: {}\n};\nconst FEATURE_EDITION_UPDATABLE_METADATA = {\n  name: \"ERC1155UpdatableMetadata\",\n  namespace: \"edition.metadata\",\n  docLinks: {\n    // TODO\n    sdk: \"\",\n    contracts: \"\"\n  },\n  abis: [Erc1155Abi, INFTMetadataAbi],\n  features: {}\n};\nconst FEATURE_EDITION_SUPPLY = {\n  name: \"ERC1155Supply\",\n  namespace: \"edition.supply\",\n  docLinks: {\n    sdk: \"\",\n    contracts: \"\"\n  },\n  abis: [Erc1155Abi, Erc1155SupplyAbi],\n  features: {}\n};\nconst FEATURE_EDITION = {\n  name: \"ERC1155\",\n  namespace: \"edition\",\n  docLinks: {\n    sdk: \"sdk.erc1155enumerable\",\n    contracts: \"erc1155\"\n  },\n  abis: [Erc1155Abi, Erc1155MetadataAbi, NAME_SYMBOL_ABI],\n  features: {\n    [FEATURE_EDITION_SUPPLY.name]: FEATURE_EDITION_SUPPLY,\n    [FEATURE_EDITION_BURNABLE.name]: FEATURE_EDITION_BURNABLE,\n    [FEATURE_EDITION_ENUMERABLE.name]: FEATURE_EDITION_ENUMERABLE,\n    [FEATURE_EDITION_MINTABLE.name]: FEATURE_EDITION_MINTABLE,\n    [FEATURE_EDITION_LAZY_MINTABLE_V1.name]: FEATURE_EDITION_LAZY_MINTABLE_V1,\n    [FEATURE_EDITION_LAZY_MINTABLE_V2.name]: FEATURE_EDITION_LAZY_MINTABLE_V2,\n    [FEATURE_EDITION_REVEALABLE.name]: FEATURE_EDITION_REVEALABLE,\n    [FEATURE_EDITION_SIGNATURE_MINTABLE.name]: FEATURE_EDITION_SIGNATURE_MINTABLE,\n    [FEATURE_EDITION_CLAIM_CUSTOM.name]: FEATURE_EDITION_CLAIM_CUSTOM,\n    [FEATURE_EDITION_CLAIM_CONDITIONS_V1.name]: FEATURE_EDITION_CLAIM_CONDITIONS_V1,\n    [FEATURE_EDITION_CLAIM_CONDITIONS_V2.name]: FEATURE_EDITION_CLAIM_CONDITIONS_V2,\n    [FEATURE_EDITION_CLAIM_PHASES_V2.name]: FEATURE_EDITION_CLAIM_PHASES_V2,\n    [FEATURE_EDITION_UPDATABLE_METADATA.name]: FEATURE_EDITION_UPDATABLE_METADATA\n  }\n};\nconst getAllPluginsAbi = [{\n  inputs: [],\n  name: \"getAllPlugins\",\n  outputs: [{\n    components: [{\n      internalType: \"bytes4\",\n      name: \"functionSelector\",\n      type: \"bytes4\"\n    }, {\n      internalType: \"string\",\n      name: \"functionSignature\",\n      type: \"string\"\n    }, {\n      internalType: \"address\",\n      name: \"pluginAddress\",\n      type: \"address\"\n    }],\n    internalType: \"struct IPluginMap.Plugin[]\",\n    name: \"registered\",\n    type: \"tuple[]\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}];\nconst getAllExtensionsAbi = [{\n  inputs: [],\n  name: \"getAllExtensions\",\n  outputs: [{\n    components: [{\n      components: [{\n        internalType: \"string\",\n        name: \"name\",\n        type: \"string\"\n      }, {\n        internalType: \"string\",\n        name: \"metadataURI\",\n        type: \"string\"\n      }, {\n        internalType: \"address\",\n        name: \"implementation\",\n        type: \"address\"\n      }],\n      internalType: \"struct IExtension.ExtensionMetadata\",\n      name: \"metadata\",\n      type: \"tuple\"\n    }, {\n      components: [{\n        internalType: \"bytes4\",\n        name: \"functionSelector\",\n        type: \"bytes4\"\n      }, {\n        internalType: \"string\",\n        name: \"functionSignature\",\n        type: \"string\"\n      }],\n      internalType: \"struct IExtension.ExtensionFunction[]\",\n      name: \"functions\",\n      type: \"tuple[]\"\n    }],\n    internalType: \"struct IExtension.Extension[]\",\n    name: \"allExtensions\",\n    type: \"tuple[]\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}];\nconst FEATURE_ROYALTY = {\n  name: \"Royalty\",\n  namespace: \"royalty\",\n  docLinks: {\n    sdk: \"sdk.contractroyalty\",\n    contracts: \"royalty\"\n  },\n  abis: [IThirdwebRoyaltyAbi],\n  features: {}\n};\nconst FEATURE_PRIMARY_SALE = {\n  name: \"PrimarySale\",\n  namespace: \"sales\",\n  docLinks: {\n    sdk: \"sdk.contractprimarysale\",\n    contracts: \"primarysale\"\n  },\n  abis: [IThirdwebPrimarySaleAbi],\n  features: {}\n};\nconst FEATURE_PLATFORM_FEE = {\n  name: \"PlatformFee\",\n  namespace: \"platformFees\",\n  docLinks: {\n    sdk: \"sdk.platformfee\",\n    contracts: \"platformfee\"\n  },\n  abis: [IThirdwebPlatformFeeAbi],\n  features: {}\n};\nconst FEATURE_PERMISSIONS_ENUMERABLE = {\n  name: \"PermissionsEnumerable\",\n  namespace: \"roles\",\n  docLinks: {\n    sdk: \"sdk.contractroles\",\n    contracts: \"permissionsenumerable\"\n  },\n  abis: [IPermissionsEnumerableAbi],\n  features: {}\n};\nconst FEATURE_PERMISSIONS = {\n  name: \"Permissions\",\n  namespace: \"roles\",\n  docLinks: {\n    sdk: \"sdk.contractroles\",\n    contracts: \"permissions\"\n  },\n  abis: [IPermissionsAbi],\n  features: {\n    [FEATURE_PERMISSIONS_ENUMERABLE.name]: FEATURE_PERMISSIONS_ENUMERABLE\n  }\n};\nconst FEATURE_METADATA = {\n  name: \"ContractMetadata\",\n  namespace: \"metadata\",\n  docLinks: {\n    sdk: \"sdk.contractmetadata\",\n    contracts: \"contractmetadata\"\n  },\n  abis: [IContractMetadataAbi],\n  features: {}\n};\nconst FEATURE_APPURI = {\n  name: \"AppURI\",\n  namespace: \"appURI\",\n  docLinks: {\n    sdk: \"sdk.appURI\",\n    //TODO\n    contracts: \"\"\n  },\n  abis: [IAppURI],\n  features: {}\n};\nconst FEATURE_OWNER = {\n  name: \"Ownable\",\n  namespace: \"owner\",\n  docLinks: {\n    sdk: \"sdk.owner\",\n    contracts: \"ownable\"\n  },\n  abis: [IOwnableAbi],\n  features: {}\n};\nconst FEATURE_GASLESS = {\n  name: \"Gasless\",\n  namespace: \"gasless\",\n  docLinks: {\n    sdk: \"sdk.gaslesstransaction\",\n    // TODO add the correct name for this once it's added to portal\n    contracts: \"IERC2771Context\"\n  },\n  abis: [IERC2771ContextAbi],\n  features: {}\n};\nconst FEATURE_PACK_VRF = {\n  name: \"PackVRF\",\n  namespace: \"pack.vrf\",\n  docLinks: {\n    sdk: \"sdk.packvrf\",\n    //TODO\n    contracts: \"IPackVRF\"\n  },\n  abis: [IPackVRFAbi],\n  features: {}\n};\nconst FEATURE_PLUGIN_ROUTER = {\n  name: \"PluginRouter\",\n  namespace: \"plugin.router\",\n  docLinks: {\n    sdk: \"sdk.pluginrouter\",\n    //TODO\n    contracts: \"PluginRouter\"\n  },\n  abis: [getAllPluginsAbi],\n  features: {}\n};\nconst FEATURE_DYNAMIC_CONTRACT = {\n  name: \"DynamicContract\",\n  namespace: \"dynamic.contract\",\n  docLinks: {\n    sdk: \"\",\n    //TODO\n    contracts: \"IExtensionsManager\"\n  },\n  abis: [getAllExtensionsAbi],\n  features: {}\n};\nconst FEATURE_DIRECT_LISTINGS = {\n  name: \"DirectListings\",\n  namespace: \"direct.listings\",\n  docLinks: {\n    // TODO\n    sdk: \"\",\n    contracts: \"IDirectListings\"\n  },\n  abis: [IDirectListingsAbi],\n  features: {}\n};\nconst FEATURE_ENGLISH_AUCTIONS = {\n  name: \"EnglishAuctions\",\n  namespace: \"english.auctions\",\n  docLinks: {\n    // TODO\n    sdk: \"\",\n    contracts: \"IEnglishAuctions\"\n  },\n  abis: [IEnglishAuctionsAbi],\n  features: {}\n};\nconst FEATURE_OFFERS = {\n  name: \"Offers\",\n  namespace: \"offers\",\n  docLinks: {\n    // TODO\n    sdk: \"\",\n    contracts: \"IOffers\"\n  },\n  abis: [IOffersAbi],\n  features: {}\n};\nconst FEATURE_ACCOUNT_FACTORY = {\n  name: \"AccountFactory\",\n  namespace: \"accountFactory\",\n  docLinks: {\n    // TODO\n    sdk: \"sdk.accountFactory\",\n    contracts: \"IAccountFactory\"\n  },\n  abis: [IAccountFactoryCore],\n  features: {}\n};\nconst FEATURE_ACCOUNT_PERMISSIONS = {\n  name: \"AccountPermissions\",\n  namespace: \"accountPermissions\",\n  docLinks: {\n    // TODO\n    sdk: \"sdk.account\",\n    contracts: \"IAccountPermissions\"\n  },\n  abis: [IAccountPermissions],\n  features: {}\n};\nconst FEATURE_ACCOUNT = {\n  name: \"Account\",\n  namespace: \"account\",\n  docLinks: {\n    // TODO\n    sdk: \"sdk.account\",\n    contracts: \"IAccount\"\n  },\n  abis: [IAccount],\n  features: {\n    [FEATURE_ACCOUNT_PERMISSIONS.name]: FEATURE_ACCOUNT_PERMISSIONS\n  }\n};\nconst FEATURE_AIRDROP_ERC20 = {\n  name: \"AirdropERC20\",\n  namespace: \"airdrop20\",\n  docLinks: {\n    // TODO\n    sdk: \"\",\n    contracts: \"IAirdropERC20\"\n  },\n  abis: [IAirdropERC20],\n  features: {}\n};\nconst FEATURE_AIRDROP_ERC721 = {\n  name: \"AirdropERC721\",\n  namespace: \"airdrop721\",\n  docLinks: {\n    // TODO\n    sdk: \"\",\n    contracts: \"IAirdropERC721\"\n  },\n  abis: [IAirdropERC721],\n  features: {}\n};\nconst FEATURE_AIRDROP_ERC1155 = {\n  name: \"AirdropERC1155\",\n  namespace: \"airdrop1155\",\n  docLinks: {\n    // TODO\n    sdk: \"\",\n    contracts: \"IAirdropERC1155\"\n  },\n  abis: [IAirdropERC1155],\n  features: {}\n};\n\n/**\n * @internal\n */\n\n/**\n * @internal\n */\n\n/**\n * @internal\n */\n\n/**\n * @internal\n */\nconst SUPPORTED_FEATURES = {\n  [FEATURE_TOKEN.name]: FEATURE_TOKEN,\n  [FEATURE_NFT.name]: FEATURE_NFT,\n  [FEATURE_EDITION.name]: FEATURE_EDITION,\n  [FEATURE_ROYALTY.name]: FEATURE_ROYALTY,\n  [FEATURE_PLATFORM_FEE.name]: FEATURE_PLATFORM_FEE,\n  [FEATURE_PRIMARY_SALE.name]: FEATURE_PRIMARY_SALE,\n  [FEATURE_PERMISSIONS.name]: FEATURE_PERMISSIONS,\n  [FEATURE_METADATA.name]: FEATURE_METADATA,\n  [FEATURE_APPURI.name]: FEATURE_APPURI,\n  [FEATURE_OWNER.name]: FEATURE_OWNER,\n  [FEATURE_GASLESS.name]: FEATURE_GASLESS,\n  [FEATURE_PACK_VRF.name]: FEATURE_PACK_VRF,\n  [FEATURE_PLUGIN_ROUTER.name]: FEATURE_PLUGIN_ROUTER,\n  [FEATURE_DYNAMIC_CONTRACT.name]: FEATURE_DYNAMIC_CONTRACT,\n  [FEATURE_DIRECT_LISTINGS.name]: FEATURE_DIRECT_LISTINGS,\n  [FEATURE_ENGLISH_AUCTIONS.name]: FEATURE_ENGLISH_AUCTIONS,\n  [FEATURE_OFFERS.name]: FEATURE_OFFERS,\n  [FEATURE_AIRDROP_ERC20.name]: FEATURE_AIRDROP_ERC20,\n  [FEATURE_AIRDROP_ERC721.name]: FEATURE_AIRDROP_ERC721,\n  [FEATURE_AIRDROP_ERC1155.name]: FEATURE_AIRDROP_ERC1155,\n  [FEATURE_ACCOUNT_FACTORY.name]: FEATURE_ACCOUNT_FACTORY,\n  [FEATURE_ACCOUNT.name]: FEATURE_ACCOUNT,\n  [FEATURE_NFT_LOYALTY_CARD.name]: FEATURE_NFT_LOYALTY_CARD,\n  [FEATURE_NFT_UPDATABLE_METADATA.name]: FEATURE_NFT_UPDATABLE_METADATA\n};\nfunction toJSType(contractType) {\n  let isReturnType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  let withName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  let jsType = contractType.type;\n  let isArray = false;\n  if (jsType.endsWith(\"[]\")) {\n    isArray = true;\n    jsType = jsType.slice(0, -2);\n  }\n  if (jsType.startsWith(\"bytes\")) {\n    jsType = \"BytesLike\";\n  }\n  if (jsType.startsWith(\"uint\") || jsType.startsWith(\"int\")) {\n    jsType = isReturnType ? \"BigNumber\" : \"BigNumberish\";\n  }\n  if (jsType.startsWith(\"bool\")) {\n    jsType = \"boolean\";\n  }\n  if (jsType === \"address\") {\n    jsType = \"string\";\n  }\n  if (jsType === \"tuple\") {\n    if (contractType.components) {\n      jsType = \"{ \".concat(contractType.components.map(a => toJSType(a, false, true)).join(\", \"), \" }\");\n    }\n  }\n  if (isArray) {\n    jsType += \"[]\";\n  }\n  if (withName) {\n    jsType = \"\".concat(contractType.name, \": \").concat(jsType);\n  }\n  return jsType;\n}\n\n/**\n * @internal\n * @param name\n * @param metadata\n * @param type\n */\nfunction extractCommentFromMetadata(name, metadata, type) {\n  var _metadata$output, _metadata$output2, _metadata$output3, _metadata$output4;\n  return (metadata === null || metadata === void 0 || (_metadata$output = metadata.output) === null || _metadata$output === void 0 || (_metadata$output = _metadata$output.userdoc) === null || _metadata$output === void 0 || (_metadata$output = _metadata$output[type]) === null || _metadata$output === void 0 || (_metadata$output = _metadata$output[Object.keys((metadata === null || metadata === void 0 || (_metadata$output2 = metadata.output) === null || _metadata$output2 === void 0 ? void 0 : _metadata$output2.userdoc[type]) || {}).find(fn => fn.includes(name || \"unknown\")) || \"\"]) === null || _metadata$output === void 0 ? void 0 : _metadata$output.notice) || (metadata === null || metadata === void 0 || (_metadata$output3 = metadata.output) === null || _metadata$output3 === void 0 || (_metadata$output3 = _metadata$output3.devdoc) === null || _metadata$output3 === void 0 || (_metadata$output3 = _metadata$output3[type]) === null || _metadata$output3 === void 0 || (_metadata$output3 = _metadata$output3[Object.keys((metadata === null || metadata === void 0 || (_metadata$output4 = metadata.output) === null || _metadata$output4 === void 0 ? void 0 : _metadata$output4.devdoc[type]) || {}).find(fn => fn.includes(name || \"unknown\")) || \"\"]) === null || _metadata$output3 === void 0 ? void 0 : _metadata$output3.details);\n}\n\n/**\n * @internal\n * @param abi\n * @param metadata\n */\nfunction extractFunctionsFromAbi(abi, metadata) {\n  const functions = (abi || []).filter(el => el.type === \"function\");\n  const parsed = [];\n  for (const f of functions) {\n    var _f$inputs, _f$outputs;\n    const doc = extractCommentFromMetadata(f.name, metadata, \"methods\");\n    const args = ((_f$inputs = f.inputs) === null || _f$inputs === void 0 || (_f$inputs = _f$inputs.map(i => \"\".concat(i.name || \"key\", \": \").concat(toJSType(i)))) === null || _f$inputs === void 0 ? void 0 : _f$inputs.join(\", \")) || \"\";\n    const fargs = args ? \", [\".concat(args, \"]\") : \"\";\n    const out = (_f$outputs = f.outputs) === null || _f$outputs === void 0 || (_f$outputs = _f$outputs.map(o => toJSType(o, true))) === null || _f$outputs === void 0 ? void 0 : _f$outputs.join(\", \");\n    const promise = out ? \": Promise<\".concat(out, \">\") : \": Promise<TransactionResult>\";\n    const signature = \"contract.call(\\\"\".concat(f.name, \"\\\"\").concat(fargs, \")\").concat(promise);\n    parsed.push({\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore we know AbiTypeBaseSchema.name is not going to be undefined since we're doing `.default(\"\")`\n      inputs: f.inputs || [],\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore we know the AbiTypeBaseSchema.name is not going to be undefined since we're doing `.default(\"\")`\n      outputs: f.outputs || [],\n      name: f.name || \"unknown\",\n      signature,\n      stateMutability: f.stateMutability || \"\",\n      comment: doc\n    });\n  }\n  return parsed;\n}\n\n/**\n * @internal\n * @param contractAbi\n * @param featureAbis\n * @returns\n */\nfunction hasMatchingAbi(contractAbi, featureAbis) {\n  const contractFn = extractFunctionsFromAbi(contractAbi);\n  const interfaceFn = featureAbis.flatMap(i => extractFunctionsFromAbi(i));\n  // match every function and their arguments\n  const intersection = contractFn.filter(fn => {\n    const match = interfaceFn.find(iFn => iFn.name === fn.name && iFn.inputs.length === fn.inputs.length && iFn.inputs.every((i, index) => {\n      if (i.type === \"tuple\" || i.type === \"tuple[]\") {\n        var _i$components;\n        // check that all properties in the tuple are the same type\n        return i.type === fn.inputs[index].type && ((_i$components = i.components) === null || _i$components === void 0 ? void 0 : _i$components.every((c, cIndex) => {\n          var _fn$inputs$index$comp;\n          return c.type === ((_fn$inputs$index$comp = fn.inputs[index].components) === null || _fn$inputs$index$comp === void 0 || (_fn$inputs$index$comp = _fn$inputs$index$comp[cIndex]) === null || _fn$inputs$index$comp === void 0 ? void 0 : _fn$inputs$index$comp.type);\n        }));\n      }\n      return i.type === fn.inputs[index].type;\n    }));\n    return match !== undefined;\n  });\n  return intersection.length === interfaceFn.length;\n}\nfunction matchesAbiFromBytecode(contractBytecode, featureAbis) {\n  const interfaces = featureAbis.map(abi => new Interface(abi));\n  const selectors = interfaces.flatMap(i => {\n    return Object.values(i.functions).map(fn => Number(i.getSighash(fn)).toString(16));\n  });\n  const uniqueSelectors = [...new Set(selectors)];\n  // checks that all unique selectors are found in the bytecode\n  return uniqueSelectors.every(selector => contractBytecode.includes(selector));\n}\n\n/**\n * Processes ALL supported features and sets whether the passed in abi supports each individual feature\n * @internal\n * @param abi\n * @param features\n * @returns the nested struct of all features and whether they're detected in the abi\n */\nfunction detectFeatures(abi) {\n  let features = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : SUPPORTED_FEATURES;\n  const results = {};\n  for (const featureKey in features) {\n    const feature = features[featureKey];\n    const enabled = matchesAbiInterface(abi, feature);\n    const childResults = detectFeatures(abi, feature.features);\n    results[featureKey] = {\n      ...feature,\n      features: childResults,\n      enabled\n    };\n  }\n  return results;\n}\nfunction detectFeaturesFromBytecode(bytecode) {\n  let features = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : SUPPORTED_FEATURES;\n  const results = {};\n  for (const featureKey in features) {\n    const feature = features[featureKey];\n    const enabled = matchesAbiFromBytecode(bytecode, feature.abis);\n    const childResults = detectFeaturesFromBytecode(bytecode, feature.features);\n    results[featureKey] = {\n      ...feature,\n      features: childResults,\n      enabled\n    };\n  }\n  return results;\n}\n\n/**\n * @internal\n * @param abi\n * @param feature\n */\nfunction matchesAbiInterface(abi, feature) {\n  // returns true if all the functions in `interfaceToMatch` are found in `contract` (removing any duplicates)\n  return hasMatchingAbi(abi, feature.abis);\n}\n\n/**\n * Checks whether the given ABI supports a given feature\n * @deprecated use isExtensionEnabled instead\n * @param abi\n * @param featureName\n */\nfunction isFeatureEnabled(abi, featureName) {\n  const features = detectFeatures(abi);\n  return _featureEnabled(features, featureName);\n}\n\n/**\n * Checks whether the given ABI supports a given extension\n * @public\n * @param abi\n * @param featureName\n */\nfunction isExtensionEnabled(abi, featureName) {\n  return isFeatureEnabled(abi, featureName);\n}\n\n/**\n * Searches the feature map for featureName and returns whether its enabled\n * @internal\n * @param features\n * @param featureName\n */\nfunction _featureEnabled(features, featureName) {\n  const keys = Object.keys(features);\n  if (!keys.includes(featureName)) {\n    let found = false;\n    for (const key of keys) {\n      const f = features[key];\n      found = _featureEnabled(f.features, featureName);\n      if (found) {\n        break;\n      }\n    }\n    return found;\n  }\n  const feature = features[featureName];\n  return feature.enabled;\n}\n\n/**\n * Type guard for contractWrappers depending on passed feature name\n * @internal\n * @param contractWrapper\n * @param featureName\n */\nfunction detectContractFeature(contractWrapper, featureName) {\n  return isExtensionEnabled(AbiSchema.parse(contractWrapper.abi), featureName);\n}\n\n/**\n * @internal\n * @param contractWrapper\n * @param functionName\n */\nfunction hasFunction(functionName, contractWrapper) {\n  return functionName in contractWrapper.readContract.functions;\n}\n\n/* eslint-disable eqeqeq */\n/* eslint-disable better-tree-shaking/no-top-level-side-effects  */\nlet decoder;\ntry {\n  decoder = new TextDecoder();\n} catch (error) {}\nlet src;\nlet srcEnd;\nlet position = 0;\nconst LEGACY_RECORD_INLINE_ID = 105;\nconst RECORD_DEFINITIONS_ID = 0xdffe;\nconst RECORD_INLINE_ID = 0xdfff; // temporary first-come first-serve tag // proposed tag: 0x7265 // 're'\nconst BUNDLED_STRINGS_ID = 0xdff9;\nconst PACKED_REFERENCE_TAG_ID = 6;\nconst STOP_CODE = {};\nlet currentDecoder = {};\nlet currentStructures;\nlet srcString;\nlet srcStringStart = 0;\nlet srcStringEnd = 0;\nlet bundledStrings;\nlet referenceMap;\nlet currentExtensions = [];\nlet currentExtensionRanges = [];\nlet packedValues;\nlet dataView;\nlet restoreMapsAsObject;\nlet defaultOptions = {\n  useRecords: false,\n  mapsAsObjects: true\n};\nlet sequentialMode = false;\nclass Decoder {\n  constructor(options) {\n    if (options) {\n      if ((options.keyMap || options._keyMap) && !options.useRecords) {\n        options.useRecords = false;\n        options.mapsAsObjects = true;\n      }\n      if (options.useRecords === false && options.mapsAsObjects === undefined) {\n        options.mapsAsObjects = true;\n      }\n      if (options.getStructures) {\n        options.getShared = options.getStructures;\n      }\n      if (options.getShared && !options.structures) {\n        (options.structures = []).uninitialized = true;\n      } // this is what we use to denote an uninitialized structures\n      if (options.keyMap) {\n        this.mapKey = new Map();\n        for (let [k, v] of Object.entries(options.keyMap)) {\n          this.mapKey.set(v, k);\n        }\n      }\n    }\n    Object.assign(this, options);\n  }\n  decodeKey(key) {\n    return this.keyMap ? this.mapKey.get(key) || key : key;\n  }\n  decode(source, end) {\n    if (src) {\n      // re-entrant execution, save the state and restore it after we do this decode\n      return saveState(() => {\n        clearSource();\n        return this ? this.decode(source, end) : Decoder.prototype.decode.call(defaultOptions, source, end);\n      });\n    }\n    srcEnd = end > -1 ? end : source.length;\n    position = 0;\n    srcStringEnd = 0;\n    srcString = null;\n    bundledStrings = null;\n    src = source;\n    // this provides cached access to the data view for a buffer if it is getting reused, which is a recommend\n    // technique for getting data from a database where it can be copied into an existing buffer instead of creating\n    // new ones\n    try {\n      dataView = source.dataView || (source.dataView = new DataView(source.buffer, source.byteOffset, source.byteLength));\n    } catch (error) {\n      // if it doesn't have a buffer, maybe it is the wrong type of object\n      src = null;\n      if (source instanceof Uint8Array) {\n        throw error;\n      }\n      throw new Error(\"Source must be a Uint8Array or Buffer but was a \" + (source && typeof source === \"object\" ? source.constructor.name : typeof source));\n    }\n    if (this instanceof Decoder) {\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      currentDecoder = this;\n      packedValues = this.sharedValues && (this.pack ? new Array(this.maxPrivatePackedValues || 16).concat(this.sharedValues) : this.sharedValues);\n      if (this.structures) {\n        currentStructures = this.structures;\n        return checkedRead();\n      } else if (!currentStructures || currentStructures.length > 0) {\n        currentStructures = [];\n      }\n    } else {\n      currentDecoder = defaultOptions;\n      if (!currentStructures || currentStructures.length > 0) {\n        currentStructures = [];\n      }\n      packedValues = null;\n    }\n    return checkedRead();\n  }\n}\nfunction checkedRead() {\n  try {\n    let result = read();\n    if (bundledStrings) {\n      if (position >= bundledStrings.postBundlePosition) {\n        let error = new Error(\"Unexpected bundle position\");\n        error.incomplete = true;\n        throw error;\n      }\n      // bundled strings to skip past\n      position = bundledStrings.postBundlePosition;\n      bundledStrings = null;\n    }\n    if (position == srcEnd) {\n      // finished reading this source, cleanup references\n      currentStructures = null;\n      src = null;\n      if (referenceMap) {\n        referenceMap = null;\n      }\n    } else if (position > srcEnd) {\n      // over read\n      let error = new Error(\"Unexpected end of CBOR data\");\n      error.incomplete = true;\n      throw error;\n    } else if (!sequentialMode) {\n      throw new Error(\"Data read, but end of buffer not reached\");\n    }\n    // else more to read, but we are reading sequentially, so don't clear source yet\n    return result;\n  } catch (error) {\n    clearSource();\n    if (error instanceof RangeError || error.message.startsWith(\"Unexpected end of buffer\")) {\n      error.incomplete = true;\n    }\n    throw error;\n  }\n}\nfunction read() {\n  let token = src[position++];\n  let majorType = token >> 5;\n  token = token & 0x1f;\n  if (token > 0x17) {\n    switch (token) {\n      case 0x18:\n        token = src[position++];\n        break;\n      case 0x19:\n        if (majorType == 7) {\n          return getFloat16();\n        }\n        token = dataView.getUint16(position);\n        position += 2;\n        break;\n      case 0x1a:\n        if (majorType == 7) {\n          let value = dataView.getFloat32(position);\n          if (currentDecoder.useFloat32 > 2) {\n            // this does rounding of numbers that were encoded in 32-bit float to nearest significant decimal digit that could be preserved\n            let multiplier = mult10[(src[position] & 0x7f) << 1 | src[position + 1] >> 7];\n            position += 4;\n            return (multiplier * value + (value > 0 ? 0.5 : -0.5) >> 0) / multiplier;\n          }\n          position += 4;\n          return value;\n        }\n        token = dataView.getUint32(position);\n        position += 4;\n        break;\n      case 0x1b:\n        if (majorType == 7) {\n          let value = dataView.getFloat64(position);\n          position += 8;\n          return value;\n        }\n        if (majorType > 1) {\n          if (dataView.getUint32(position) > 0) {\n            throw new Error(\"JavaScript does not support arrays, maps, or strings with length over 4294967295\");\n          }\n          token = dataView.getUint32(position + 4);\n        } else if (currentDecoder.int64AsNumber) {\n          token = dataView.getUint32(position) * 0x100000000;\n          token += dataView.getUint32(position + 4);\n        } else {\n          token = dataView.getBigUint64(position);\n        }\n        position += 8;\n        break;\n      case 0x1f:\n        // indefinite length\n        switch (majorType) {\n          case 2: // byte string\n          case 3:\n            // text string\n            throw new Error(\"Indefinite length not supported for byte or text strings\");\n          case 4:\n            // array\n            let array = [];\n            let value,\n              i = 0;\n            while ((value = read()) != STOP_CODE) {\n              array[i++] = value;\n            }\n            return majorType == 4 ? array : majorType == 3 ? array.join(\"\") : Buffer.concat(array);\n          case 5:\n            // map\n            let key;\n            if (currentDecoder.mapsAsObjects) {\n              let object = {};\n              if (currentDecoder.keyMap) {\n                while ((key = read()) != STOP_CODE) {\n                  object[safeKey(currentDecoder.decodeKey(key))] = read();\n                }\n              } else {\n                while ((key = read()) != STOP_CODE) {\n                  object[safeKey(key)] = read();\n                }\n              }\n              return object;\n            } else {\n              if (restoreMapsAsObject) {\n                currentDecoder.mapsAsObjects = true;\n                restoreMapsAsObject = false;\n              }\n              let map = new Map();\n              if (currentDecoder.keyMap) {\n                while ((key = read()) != STOP_CODE) {\n                  map.set(currentDecoder.decodeKey(key), read());\n                }\n              } else {\n                while ((key = read()) != STOP_CODE) {\n                  map.set(key, read());\n                }\n              }\n              return map;\n            }\n          case 7:\n            return STOP_CODE;\n          default:\n            throw new Error(\"Invalid major type for indefinite length \" + majorType);\n        }\n      default:\n        throw new Error(\"Unknown token \" + token);\n    }\n  }\n  switch (majorType) {\n    case 0:\n      // positive int\n      return token;\n    case 1:\n      // negative int\n      return ~token;\n    case 2:\n      // buffer\n      return readBin(token);\n    case 3:\n      // string\n      if (srcStringEnd >= position) {\n        return srcString.slice(position - srcStringStart, (position += token) - srcStringStart);\n      }\n      if (srcStringEnd == 0 && srcEnd < 140 && token < 32) {\n        // for small blocks, avoiding the overhead of the extract call is helpful\n        let string = token < 16 ? shortStringInJS(token) : longStringInJS(token);\n        if (string != null) {\n          return string;\n        }\n      }\n      return readFixedString(token);\n    case 4:\n      // array\n      let array = new Array(token);\n      //if (currentDecoder.keyMap) for (let i = 0; i < token; i++) array[i] = currentDecoder.decodeKey(read())\n      //else\n      for (let i = 0; i < token; i++) {\n        array[i] = read();\n      }\n      return array;\n    case 5:\n      // map\n      if (currentDecoder.mapsAsObjects) {\n        let object = {};\n        if (currentDecoder.keyMap) {\n          for (let i = 0; i < token; i++) {\n            object[safeKey(currentDecoder.decodeKey(read()))] = read();\n          }\n        } else {\n          for (let i = 0; i < token; i++) {\n            object[safeKey(read())] = read();\n          }\n        }\n        return object;\n      } else {\n        if (restoreMapsAsObject) {\n          currentDecoder.mapsAsObjects = true;\n          restoreMapsAsObject = false;\n        }\n        let map = new Map();\n        if (currentDecoder.keyMap) {\n          for (let i = 0; i < token; i++) {\n            map.set(currentDecoder.decodeKey(read()), read());\n          }\n        } else {\n          for (let i = 0; i < token; i++) {\n            map.set(read(), read());\n          }\n        }\n        return map;\n      }\n    case 6:\n      // extension\n      if (token >= BUNDLED_STRINGS_ID) {\n        let structure = currentStructures[token & 0x1fff]; // check record structures first\n        // At some point we may provide an option for dynamic tag assignment with a range like token >= 8 && (token < 16 || (token > 0x80 && token < 0xc0) || (token > 0x130 && token < 0x4000))\n        if (structure) {\n          if (!structure.read) {\n            structure.read = createStructureReader(structure);\n          }\n          return structure.read();\n        }\n        if (token < 0x10000) {\n          if (token == RECORD_INLINE_ID) {\n            // we do a special check for this so that we can keep the currentExtensions as densely stored array (v8 stores arrays densely under about 3000 elements)\n            return recordDefinition(read());\n          } else if (token == RECORD_DEFINITIONS_ID) {\n            let length = readJustLength();\n            let id = read();\n            for (let i = 2; i < length; i++) {\n              recordDefinition([id++, read()]);\n            }\n            return read();\n          } else if (token == BUNDLED_STRINGS_ID) {\n            return readBundleExt();\n          }\n          if (currentDecoder.getShared) {\n            loadShared();\n            structure = currentStructures[token & 0x1fff];\n            if (structure) {\n              if (!structure.read) {\n                structure.read = createStructureReader(structure);\n              }\n              return structure.read();\n            }\n          }\n        }\n      }\n      let extension = currentExtensions[token];\n      if (extension) {\n        if (extension.handlesRead) {\n          return extension(read);\n        } else {\n          return extension(read());\n        }\n      } else {\n        let input = read();\n        for (let i = 0; i < currentExtensionRanges.length; i++) {\n          let value = currentExtensionRanges[i](token, input);\n          if (value !== undefined) {\n            return value;\n          }\n        }\n        return new Tag(input, token);\n      }\n    case 7:\n      // fixed value\n      switch (token) {\n        case 0x14:\n          return false;\n        case 0x15:\n          return true;\n        case 0x16:\n          return null;\n        case 0x17:\n          return;\n        // undefined\n        case 0x1f:\n        default:\n          let packedValue = (packedValues || getPackedValues())[token];\n          if (packedValue !== undefined) {\n            return packedValue;\n          }\n          throw new Error(\"Unknown token \" + token);\n      }\n    default:\n      // negative int\n      if (isNaN(token)) {\n        let error = new Error(\"Unexpected end of CBOR data\");\n        error.incomplete = true;\n        throw error;\n      }\n      throw new Error(\"Unknown CBOR token \" + token);\n  }\n}\nconst validName = /^[a-zA-Z_$][a-zA-Z\\d_$]*$/;\nfunction createStructureReader(structure) {\n  function readObject() {\n    // get the array size from the header\n    let length = src[position++];\n    //let majorType = token >> 5\n    length = length & 0x1f;\n    if (length > 0x17) {\n      switch (length) {\n        case 0x18:\n          length = src[position++];\n          break;\n        case 0x19:\n          length = dataView.getUint16(position);\n          position += 2;\n          break;\n        case 0x1a:\n          length = dataView.getUint32(position);\n          position += 4;\n          break;\n        default:\n          throw new Error(\"Expected array header, but got \" + src[position - 1]);\n      }\n    }\n    // This initial function is quick to instantiate, but runs slower. After several iterations pay the cost to build the faster function\n    let compiledReader = this.compiledReader; // first look to see if we have the fast compiled function\n    while (compiledReader) {\n      // we have a fast compiled object literal reader\n      if (compiledReader.propertyCount === length) {\n        return compiledReader(read);\n      } // with the right length, so we use it\n      compiledReader = compiledReader.next; // see if there is another reader with the right length\n    }\n\n    if (this.slowReads++ >= 3) {\n      // create a fast compiled reader\n      let array = this.length == length ? this : this.slice(0, length);\n      compiledReader = currentDecoder.keyMap ? new Function(\"r\", \"return {\" + array.map(k => currentDecoder.decodeKey(k)).map(k => validName.test(k) ? safeKey(k) + \":r()\" : \"[\" + JSON.stringify(k) + \"]:r()\").join(\",\") + \"}\") : new Function(\"r\", \"return {\" + array.map(key => validName.test(key) ? safeKey(key) + \":r()\" : \"[\" + JSON.stringify(key) + \"]:r()\").join(\",\") + \"}\");\n      if (this.compiledReader) {\n        compiledReader.next = this.compiledReader;\n      } // if there is an existing one, we store multiple readers as a linked list because it is usually pretty rare to have multiple readers (of different length) for the same structure\n      compiledReader.propertyCount = length;\n      this.compiledReader = compiledReader;\n      return compiledReader(read);\n    }\n    let object = {};\n    if (currentDecoder.keyMap) {\n      for (let i = 0; i < length; i++) {\n        object[safeKey(currentDecoder.decodeKey(this[i]))] = read();\n      }\n    } else {\n      for (let i = 0; i < length; i++) {\n        object[safeKey(this[i])] = read();\n      }\n    }\n    return object;\n  }\n  structure.slowReads = 0;\n  return readObject;\n}\nfunction safeKey(key) {\n  return key === \"__proto__\" ? \"__proto_\" : key;\n}\nlet readFixedString = readStringJS;\nfunction readStringJS(length) {\n  let result;\n  if (length < 16) {\n    if (result = shortStringInJS(length)) {\n      return result;\n    }\n  }\n  if (length > 64 && decoder) {\n    return decoder.decode(src.subarray(position, position += length));\n  }\n  const end = position + length;\n  const units = [];\n  result = \"\";\n  while (position < end) {\n    const byte1 = src[position++];\n    if ((byte1 & 0x80) === 0) {\n      // 1 byte\n      units.push(byte1);\n    } else if ((byte1 & 0xe0) === 0xc0) {\n      // 2 bytes\n      const byte2 = src[position++] & 0x3f;\n      units.push((byte1 & 0x1f) << 6 | byte2);\n    } else if ((byte1 & 0xf0) === 0xe0) {\n      // 3 bytes\n      const byte2 = src[position++] & 0x3f;\n      const byte3 = src[position++] & 0x3f;\n      units.push((byte1 & 0x1f) << 12 | byte2 << 6 | byte3);\n    } else if ((byte1 & 0xf8) === 0xf0) {\n      // 4 bytes\n      const byte2 = src[position++] & 0x3f;\n      const byte3 = src[position++] & 0x3f;\n      const byte4 = src[position++] & 0x3f;\n      let unit = (byte1 & 0x07) << 0x12 | byte2 << 0x0c | byte3 << 0x06 | byte4;\n      if (unit > 0xffff) {\n        unit -= 0x10000;\n        units.push(unit >>> 10 & 0x3ff | 0xd800);\n        unit = 0xdc00 | unit & 0x3ff;\n      }\n      units.push(unit);\n    } else {\n      units.push(byte1);\n    }\n    if (units.length >= 0x1000) {\n      result += fromCharCode.apply(String, units);\n      units.length = 0;\n    }\n  }\n  if (units.length > 0) {\n    result += fromCharCode.apply(String, units);\n  }\n  return result;\n}\nlet fromCharCode = String.fromCharCode;\nfunction longStringInJS(length) {\n  let start = position;\n  let bytes = new Array(length);\n  for (let i = 0; i < length; i++) {\n    const byte = src[position++];\n    if ((byte & 0x80) > 0) {\n      position = start;\n      return;\n    }\n    bytes[i] = byte;\n  }\n  return fromCharCode.apply(String, bytes);\n}\nfunction shortStringInJS(length) {\n  if (length < 4) {\n    if (length < 2) {\n      if (length === 0) {\n        return \"\";\n      } else {\n        let a = src[position++];\n        if ((a & 0x80) > 1) {\n          position -= 1;\n          return;\n        }\n        return fromCharCode(a);\n      }\n    } else {\n      let a = src[position++];\n      let b = src[position++];\n      if ((a & 0x80) > 0 || (b & 0x80) > 0) {\n        position -= 2;\n        return;\n      }\n      if (length < 3) {\n        return fromCharCode(a, b);\n      }\n      let c = src[position++];\n      if ((c & 0x80) > 0) {\n        position -= 3;\n        return;\n      }\n      return fromCharCode(a, b, c);\n    }\n  } else {\n    let a = src[position++];\n    let b = src[position++];\n    let c = src[position++];\n    let d = src[position++];\n    if ((a & 0x80) > 0 || (b & 0x80) > 0 || (c & 0x80) > 0 || (d & 0x80) > 0) {\n      position -= 4;\n      return;\n    }\n    if (length < 6) {\n      if (length === 4) {\n        return fromCharCode(a, b, c, d);\n      } else {\n        let e = src[position++];\n        if ((e & 0x80) > 0) {\n          position -= 5;\n          return;\n        }\n        return fromCharCode(a, b, c, d, e);\n      }\n    } else if (length < 8) {\n      let e = src[position++];\n      let f = src[position++];\n      if ((e & 0x80) > 0 || (f & 0x80) > 0) {\n        position -= 6;\n        return;\n      }\n      if (length < 7) {\n        return fromCharCode(a, b, c, d, e, f);\n      }\n      let g = src[position++];\n      if ((g & 0x80) > 0) {\n        position -= 7;\n        return;\n      }\n      return fromCharCode(a, b, c, d, e, f, g);\n    } else {\n      let e = src[position++];\n      let f = src[position++];\n      let g = src[position++];\n      let h = src[position++];\n      if ((e & 0x80) > 0 || (f & 0x80) > 0 || (g & 0x80) > 0 || (h & 0x80) > 0) {\n        position -= 8;\n        return;\n      }\n      if (length < 10) {\n        if (length === 8) {\n          return fromCharCode(a, b, c, d, e, f, g, h);\n        } else {\n          let i = src[position++];\n          if ((i & 0x80) > 0) {\n            position -= 9;\n            return;\n          }\n          return fromCharCode(a, b, c, d, e, f, g, h, i);\n        }\n      } else if (length < 12) {\n        let i = src[position++];\n        let j = src[position++];\n        if ((i & 0x80) > 0 || (j & 0x80) > 0) {\n          position -= 10;\n          return;\n        }\n        if (length < 11) {\n          return fromCharCode(a, b, c, d, e, f, g, h, i, j);\n        }\n        let k = src[position++];\n        if ((k & 0x80) > 0) {\n          position -= 11;\n          return;\n        }\n        return fromCharCode(a, b, c, d, e, f, g, h, i, j, k);\n      } else {\n        let i = src[position++];\n        let j = src[position++];\n        let k = src[position++];\n        let l = src[position++];\n        if ((i & 0x80) > 0 || (j & 0x80) > 0 || (k & 0x80) > 0 || (l & 0x80) > 0) {\n          position -= 12;\n          return;\n        }\n        if (length < 14) {\n          if (length === 12) {\n            return fromCharCode(a, b, c, d, e, f, g, h, i, j, k, l);\n          } else {\n            let m = src[position++];\n            if ((m & 0x80) > 0) {\n              position -= 13;\n              return;\n            }\n            return fromCharCode(a, b, c, d, e, f, g, h, i, j, k, l, m);\n          }\n        } else {\n          let m = src[position++];\n          let n = src[position++];\n          if ((m & 0x80) > 0 || (n & 0x80) > 0) {\n            position -= 14;\n            return;\n          }\n          if (length < 15) {\n            return fromCharCode(a, b, c, d, e, f, g, h, i, j, k, l, m, n);\n          }\n          let o = src[position++];\n          if ((o & 0x80) > 0) {\n            position -= 15;\n            return;\n          }\n          return fromCharCode(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);\n        }\n      }\n    }\n  }\n}\nfunction readBin(length) {\n  return currentDecoder.copyBuffers ?\n  // specifically use the copying slice (not the node one)\n  Uint8Array.prototype.slice.call(src, position, position += length) : src.subarray(position, position += length);\n}\nlet f32Array = new Float32Array(1);\nlet u8Array = new Uint8Array(f32Array.buffer, 0, 4);\nfunction getFloat16() {\n  let byte0 = src[position++];\n  let byte1 = src[position++];\n  let exponent = (byte0 & 0x7f) >> 2;\n  if (exponent === 0x1f) {\n    // specials\n    if (byte1 || byte0 & 3) {\n      return NaN;\n    }\n    return byte0 & 0x80 ? -Infinity : Infinity;\n  }\n  if (exponent === 0) {\n    // sub-normals\n    // significand with 10 fractional bits and divided by 2^14\n    let abs = ((byte0 & 3) << 8 | byte1) / (1 << 24);\n    return byte0 & 0x80 ? -abs : abs;\n  }\n  u8Array[3] = byte0 & 0x80 |\n  // sign bit\n  (exponent >> 1) + 56; // 4 of 5 of the exponent bits, re-offset-ed\n  u8Array[2] = (byte0 & 7) << 5 |\n  // last exponent bit and first two mantissa bits\n  byte1 >> 3; // next 5 bits of mantissa\n  u8Array[1] = byte1 << 5; // last three bits of mantissa\n  u8Array[0] = 0;\n  return f32Array[0];\n}\nclass Tag {\n  constructor(value, tag) {\n    this.value = value;\n    this.tag = tag;\n  }\n}\ncurrentExtensions[0] = dateString => {\n  // string date extension\n  return new Date(dateString);\n};\ncurrentExtensions[1] = epochSec => {\n  // numeric date extension\n  return new Date(Math.round(epochSec * 1000));\n};\ncurrentExtensions[2] = buffer => {\n  // bigint extension\n  let value = BigInt(0);\n  for (let i = 0, l = buffer.byteLength; i < l; i++) {\n    value = BigInt(buffer[i]) + value << BigInt(8);\n  }\n  return value;\n};\ncurrentExtensions[3] = buffer => {\n  // negative bigint extension\n  return BigInt(-1) - currentExtensions[2](buffer);\n};\ncurrentExtensions[4] = fraction => {\n  // best to reparse to maintain accuracy\n  return Number(fraction[1] + \"e\" + fraction[0]);\n};\ncurrentExtensions[5] = fraction => {\n  // probably not sufficiently accurate\n  return fraction[1] * Math.exp(fraction[0] * Math.log(2));\n};\n\n// the registration of the record definition extension\nconst recordDefinition = definition => {\n  let id = definition[0] - 0xe000;\n  let structure = definition[1];\n  let existingStructure = currentStructures[id];\n  if (existingStructure && existingStructure.isShared) {\n    (currentStructures.restoreStructures || (currentStructures.restoreStructures = []))[id] = existingStructure;\n  }\n  currentStructures[id] = structure;\n  structure.read = createStructureReader(structure);\n  let object = {};\n  if (currentDecoder.keyMap) {\n    for (let i = 2, l = definition.length; i < l; i++) {\n      let key = currentDecoder.decodeKey(structure[i - 2]);\n      object[safeKey(key)] = definition[i];\n    }\n  } else {\n    for (let i = 2, l = definition.length; i < l; i++) {\n      let key = structure[i - 2];\n      object[safeKey(key)] = definition[i];\n    }\n  }\n  return object;\n};\ncurrentExtensions[LEGACY_RECORD_INLINE_ID] = recordDefinition;\ncurrentExtensions[14] = value => {\n  if (bundledStrings) {\n    return bundledStrings[0].slice(bundledStrings.position0, bundledStrings.position0 += value);\n  }\n  return new Tag(value, 14);\n};\ncurrentExtensions[15] = value => {\n  if (bundledStrings) {\n    return bundledStrings[1].slice(bundledStrings.position1, bundledStrings.position1 += value);\n  }\n  return new Tag(value, 15);\n};\nlet glbl = {\n  Error,\n  RegExp\n};\ncurrentExtensions[27] = data => {\n  // http://cbor.schmorp.de/generic-object\n  return (glbl[data[0]] || Error)(data[1], data[2]);\n};\nconst packedTable = _read => {\n  if (src[position++] != 0x84) {\n    throw new Error(\"Packed values structure must be followed by a 4 element array\");\n  }\n  let newPackedValues = _read(); // packed values\n  packedValues = packedValues ? newPackedValues.concat(packedValues.slice(newPackedValues.length)) : newPackedValues;\n  packedValues.prefixes = _read();\n  packedValues.suffixes = _read();\n  return _read(); // read the rump\n};\n\npackedTable.handlesRead = true;\ncurrentExtensions[51] = packedTable;\ncurrentExtensions[PACKED_REFERENCE_TAG_ID] = data => {\n  // packed reference\n  if (!packedValues) {\n    if (currentDecoder.getShared) {\n      loadShared();\n    } else {\n      return new Tag(data, PACKED_REFERENCE_TAG_ID);\n    }\n  }\n  if (typeof data === \"number\") {\n    return packedValues[16 + (data >= 0 ? 2 * data : -2 * data - 1)];\n  }\n  throw new Error(\"No support for non-integer packed references yet\");\n};\ncurrentExtensions[25] = id => {\n  return stringRefs[id];\n};\ncurrentExtensions[256] = _read => {\n  stringRefs = [];\n  try {\n    return _read();\n  } finally {\n    stringRefs = null;\n  }\n};\ncurrentExtensions[256].handlesRead = true;\ncurrentExtensions[28] = _read => {\n  // shareable http://cbor.schmorp.de/value-sharing (for structured clones)\n  if (!referenceMap) {\n    referenceMap = new Map();\n    referenceMap.id = 0;\n  }\n  let id = referenceMap.id++;\n  let token = src[position];\n  let target;\n  // TODO: handle Maps, Sets, and other types that can cycle; this is complicated, because you potentially need to read\n  // ahead past references to record structure definitions\n  if (token >> 5 == 4) {\n    target = [];\n  } else {\n    target = {};\n  }\n  let refEntry = {\n    target\n  }; // a placeholder object\n  referenceMap.set(id, refEntry);\n  let targetProperties = _read(); // read the next value as the target object to id\n  if (refEntry.used) {\n    // there is a cycle, so we have to assign properties to original target\n    return Object.assign(target, targetProperties);\n  }\n  refEntry.target = targetProperties; // the placeholder wasn't used, replace with the deserialized one\n  return targetProperties; // no cycle, can just use the returned read object\n};\n\ncurrentExtensions[28].handlesRead = true;\ncurrentExtensions[29] = id => {\n  // sharedref http://cbor.schmorp.de/value-sharing (for structured clones)\n  let refEntry = referenceMap.get(id);\n  refEntry.used = true;\n  return refEntry.target;\n};\ncurrentExtensions[258] = array => new Set(array); // https://github.com/input-output-hk/cbor-sets-spec/blob/master/CBOR_SETS.md\n(currentExtensions[259] = _read => {\n  // https://github.com/shanewholloway/js-cbor-codec/blob/master/docs/CBOR-259-spec\n  // for decoding as a standard Map\n  if (currentDecoder.mapsAsObjects) {\n    currentDecoder.mapsAsObjects = false;\n    restoreMapsAsObject = true;\n  }\n  return _read();\n}).handlesRead = true;\nfunction combine(a, b) {\n  if (typeof a === \"string\") {\n    return a + b;\n  }\n  if (a instanceof Array) {\n    return a.concat(b);\n  }\n  return Object.assign({}, a, b);\n}\nfunction getPackedValues() {\n  if (!packedValues) {\n    if (currentDecoder.getShared) {\n      loadShared();\n    } else {\n      throw new Error(\"No packed values available\");\n    }\n  }\n  return packedValues;\n}\nconst SHARED_DATA_TAG_ID = 0x53687264; // ascii 'Shrd'\ncurrentExtensionRanges.push((tag, input) => {\n  if (tag >= 225 && tag <= 255) {\n    return combine(getPackedValues().prefixes[tag - 224], input);\n  }\n  if (tag >= 28704 && tag <= 32767) {\n    return combine(getPackedValues().prefixes[tag - 28672], input);\n  }\n  if (tag >= 1879052288 && tag <= 2147483647) {\n    return combine(getPackedValues().prefixes[tag - 1879048192], input);\n  }\n  if (tag >= 216 && tag <= 223) {\n    return combine(input, getPackedValues().suffixes[tag - 216]);\n  }\n  if (tag >= 27647 && tag <= 28671) {\n    return combine(input, getPackedValues().suffixes[tag - 27639]);\n  }\n  if (tag >= 1811940352 && tag <= 1879048191) {\n    return combine(input, getPackedValues().suffixes[tag - 1811939328]);\n  }\n  if (tag == SHARED_DATA_TAG_ID) {\n    // we do a special check for this so that we can keep the currentExtensions as densely stored array (v8 stores arrays densely under about 3000 elements)\n    return {\n      packedValues: packedValues,\n      structures: currentStructures.slice(0),\n      version: input\n    };\n  }\n  if (tag == 55799) {\n    // self-descriptive CBOR tag, just return input value\n    return input;\n  }\n});\nconst isLittleEndianMachine = new Uint8Array(new Uint16Array([1]).buffer)[0] == 1;\nconst typedArrays = [Uint8Array];\nconst typedArrayTags = [64];\nfor (let i = 0; i < typedArrays.length; i++) {\n  registerTypedArray(typedArrays[i], typedArrayTags[i]);\n}\nfunction registerTypedArray(TypedArray, tag) {\n  let dvMethod = \"get\" + TypedArray.name.slice(0, -5);\n  if (typeof TypedArray !== \"function\") {\n    TypedArray = null;\n  }\n  let bytesPerElement = TypedArray.BYTES_PER_ELEMENT;\n  for (let littleEndian = 0; littleEndian < 2; littleEndian++) {\n    if (!littleEndian && bytesPerElement == 1) {\n      continue;\n    }\n    let sizeShift = bytesPerElement == 2 ? 1 : bytesPerElement == 4 ? 2 : 3;\n    currentExtensions[littleEndian ? tag : tag - 4] = bytesPerElement == 1 || littleEndian == isLittleEndianMachine ? buffer => {\n      if (!TypedArray) {\n        throw new Error(\"Could not find typed array for code \" + tag);\n      }\n      // we have to always slice/copy here to get a new ArrayBuffer that is word/byte aligned\n      return new TypedArray(Uint8Array.prototype.slice.call(buffer, 0).buffer);\n    } : buffer => {\n      if (!TypedArray) {\n        throw new Error(\"Could not find typed array for code \" + tag);\n      }\n      let dv = new DataView(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n      let elements = buffer.length >> sizeShift;\n      let ta = new TypedArray(elements);\n      let method = dv[dvMethod];\n      for (let i = 0; i < elements; i++) {\n        ta[i] = method.call(dv, i << sizeShift, littleEndian);\n      }\n      return ta;\n    };\n  }\n}\nfunction readBundleExt() {\n  let length = readJustLength();\n  let bundlePosition = position + read();\n  for (let i = 2; i < length; i++) {\n    // skip past bundles that were already read\n    let bundleLength = readJustLength(); // this will increment position, so must add to position afterwards\n    position += bundleLength;\n  }\n  let dataPosition = position;\n  position = bundlePosition;\n  bundledStrings = [readStringJS(readJustLength()), readStringJS(readJustLength())];\n  bundledStrings.position0 = 0;\n  bundledStrings.position1 = 0;\n  bundledStrings.postBundlePosition = position;\n  position = dataPosition;\n  return read();\n}\nfunction readJustLength() {\n  let token = src[position++] & 0x1f;\n  if (token > 0x17) {\n    switch (token) {\n      case 0x18:\n        token = src[position++];\n        break;\n      case 0x19:\n        token = dataView.getUint16(position);\n        position += 2;\n        break;\n      case 0x1a:\n        token = dataView.getUint32(position);\n        position += 4;\n        break;\n    }\n  }\n  return token;\n}\nfunction loadShared() {\n  if (currentDecoder.getShared) {\n    let sharedData = saveState(() => {\n      // save the state in case getShared modifies our buffer\n      src = null;\n      return currentDecoder.getShared();\n    }) || {};\n    let updatedStructures = sharedData.structures || [];\n    currentDecoder.sharedVersion = sharedData.version;\n    packedValues = currentDecoder.sharedValues = sharedData.packedValues;\n    if (currentStructures === true) {\n      currentDecoder.structures = currentStructures = updatedStructures;\n    } else {\n      currentStructures.splice.apply(currentStructures, [0, updatedStructures.length].concat(updatedStructures));\n    }\n  }\n}\nfunction saveState(callback) {\n  let savedSrcEnd = srcEnd;\n  let savedPosition = position;\n  let savedSrcStringStart = srcStringStart;\n  let savedSrcStringEnd = srcStringEnd;\n  let savedSrcString = srcString;\n  let savedReferenceMap = referenceMap;\n  let savedBundledStrings = bundledStrings;\n\n  // TODO: We may need to revisit this if we do more external calls to user code (since it could be slow)\n  let savedSrc = new Uint8Array(src.slice(0, srcEnd)); // we copy the data in case it changes while external data is processed\n  let savedStructures = currentStructures;\n  let savedDecoder = currentDecoder;\n  let savedSequentialMode = sequentialMode;\n  let value = callback();\n  srcEnd = savedSrcEnd;\n  position = savedPosition;\n  srcStringStart = savedSrcStringStart;\n  srcStringEnd = savedSrcStringEnd;\n  srcString = savedSrcString;\n  referenceMap = savedReferenceMap;\n  bundledStrings = savedBundledStrings;\n  src = savedSrc;\n  sequentialMode = savedSequentialMode;\n  currentStructures = savedStructures;\n  currentDecoder = savedDecoder;\n  dataView = new DataView(src.buffer, src.byteOffset, src.byteLength);\n  return value;\n}\nfunction clearSource() {\n  src = null;\n  referenceMap = null;\n  currentStructures = null;\n}\nconst mult10 = new Array(147); // this is a table matching binary exponents to the multiplier to determine significant digit rounding\nfor (let i = 0; i < 256; i++) {\n  mult10[i] = Number(\"1e\" + Math.floor(45.15 - i * 0.30103));\n}\nconst defaultDecoder = new Decoder({\n  useRecords: false\n});\nconst decode = defaultDecoder.decode;\n\n/**\n * @internal\n * @param hex\n */\nfunction hexToBytes(hex) {\n  hex = hex.toString(16);\n  if (!hex.startsWith(\"0x\")) {\n    hex = \"0x\".concat(hex);\n  }\n  if (!isHexStrict(hex)) {\n    throw new Error(\"Given value \\\"\".concat(hex, \"\\\" is not a valid hex string.\"));\n  }\n  hex = hex.replace(/^0x/i, \"\");\n  const bytes = [];\n  for (let c = 0; c < hex.length; c += 2) {\n    bytes.push(parseInt(hex.slice(c, c + 2), 16));\n  }\n  return bytes;\n}\n\n/**\n * @internal\n * @param hex\n */\nfunction isHexStrict(hex) {\n  return (typeof hex === \"string\" || typeof hex === \"number\") && /^(-)?0x[0-9a-f]*$/i.test(hex.toString());\n}\n\n/**\n * @internal\n * @param bytecode\n */\nfunction extractIPFSHashFromBytecode(bytecode) {\n  const numericBytecode = hexToBytes(bytecode);\n  const cborLength = numericBytecode[numericBytecode.length - 2] * 0x100 + numericBytecode[numericBytecode.length - 1];\n  const bytecodeBuffer = Uint8Array.from(numericBytecode.slice(numericBytecode.length - 2 - cborLength, -2));\n  const cborData = decode(bytecodeBuffer);\n  if (\"ipfs\" in cborData && cborData[\"ipfs\"]) {\n    try {\n      return \"ipfs://\".concat(bs58.encode(cborData[\"ipfs\"]));\n    } catch (e) {\n      console.warn(\"feature-detection ipfs cbor failed\", e);\n    }\n  }\n  return undefined;\n}\n\n/**\n * @internal\n * @param bytecode\n */\nfunction extractMinimalProxyImplementationAddress(bytecode) {\n  // EIP-1167 clone minimal proxy - https://eips.ethereum.org/EIPS/eip-1167\n  if (bytecode.startsWith(\"0x363d3d373d3d3d363d73\")) {\n    const implementationAddress = bytecode.slice(22, 62);\n    return \"0x\".concat(implementationAddress);\n  }\n\n  // Minimal Proxy with receive() from 0xSplits - https://github.com/0xSplits/splits-contracts/blob/c7b741926ec9746182d0d1e2c4c2046102e5d337/contracts/libraries/Clones.sol\n  if (bytecode.startsWith(\"0x36603057343d5230\")) {\n    // +40 = size of addr\n    const implementationAddress = bytecode.slice(122, 122 + 40);\n    return \"0x\".concat(implementationAddress);\n  }\n\n  // 0age's minimal proxy - https://medium.com/coinmonks/the-more-minimal-proxy-5756ae08ee48\n  if (bytecode.startsWith(\"0x3d3d3d3d363d3d37363d73\")) {\n    // +40 = size of addr\n    const implementationAddress = bytecode.slice(24, 24 + 40);\n    return \"0x\".concat(implementationAddress);\n  }\n\n  // vyper's minimal proxy (uniswap v1) - https://etherscan.io/address/0x09cabec1ead1c0ba254b09efb3ee13841712be14#code\n  if (bytecode.startsWith(\"0x366000600037611000600036600073\")) {\n    const implementationAddress = bytecode.slice(32, 32 + 40);\n    return \"0x\".concat(implementationAddress);\n  }\n  return undefined;\n}\n\n/**\n * @internal\n * @param address\n * @param provider\n */\nasync function resolveContractUriFromAddress(address, provider) {\n  const {\n    bytecode\n  } = await resolveImplementation(address, provider);\n  return extractIPFSHashFromBytecode(bytecode);\n}\nasync function resolveContractUriAndBytecode(address, provider) {\n  const {\n    bytecode\n  } = await resolveImplementation(address, provider);\n  return {\n    uri: extractIPFSHashFromBytecode(bytecode),\n    bytecode\n  };\n}\n\n/**\n * Resolve the implementation address of a proxy contract and its bytecode\n * @param address the contract address\n * @param provider RPC provider\n * @returns the implementation address and its bytecode\n */\nasync function resolveImplementation(address, provider) {\n  let bytecode;\n  try {\n    bytecode = await provider.getCode(address);\n  } catch (e) {\n    throw new Error(\"Failed to get bytecode for address \".concat(address, \": \").concat(e));\n  }\n  if (bytecode === \"0x\") {\n    const chain = await provider.getNetwork();\n    throw new Error(\"Contract at \".concat(address, \" does not exist on chain '\").concat(chain.name, \"' (chainId: \").concat(chain.chainId, \")\"));\n  }\n  try {\n    // TODO support other types of proxies\n    const implementationAddress = extractMinimalProxyImplementationAddress(bytecode);\n    if (implementationAddress) {\n      return await resolveImplementation(implementationAddress, provider);\n    }\n  } catch (e) {\n    // ignore\n  }\n\n  // EIP-1967 proxy storage slots - https://eips.ethereum.org/EIPS/eip-1967\n  try {\n    const proxyStorage = await provider.getStorageAt(address, BigNumber.from(\"0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc\"));\n    const implementationAddress = \"0x\".concat(proxyStorage.slice(-40));\n    if (utils.isAddress(implementationAddress) && implementationAddress !== constants.AddressZero) {\n      return await resolveImplementation(implementationAddress, provider);\n    }\n  } catch (e) {\n    // ignore\n  }\n  if (!bytecode) {\n    throw new Error(\"Error fetching bytecode for \".concat(address));\n  }\n  return {\n    address,\n    bytecode\n  };\n}\nconst CONTRACT_METADATA_TIMEOUT_SEC = 2;\n\n/**\n * @internal\n * @param compilerMetadataUri\n * @param storage\n */\nasync function fetchContractMetadata(compilerMetadataUri, storage) {\n  // short timeout to avoid hanging on unpinned contract metadata CIDs\n  const metadata = await storage.downloadJSON(compilerMetadataUri, {\n    timeoutInSeconds: CONTRACT_METADATA_TIMEOUT_SEC\n  });\n  if (!metadata || !metadata.output) {\n    throw new Error(\"Could not resolve metadata for contract at \".concat(compilerMetadataUri));\n  }\n  const abi = AbiSchema.parse(metadata.output.abi);\n  const compilationTarget = metadata.settings.compilationTarget;\n  const targets = Object.keys(compilationTarget);\n  const name = compilationTarget[targets[0]];\n  const info = ContractInfoSchema.parse({\n    title: metadata.output.devdoc.title,\n    author: metadata.output.devdoc.author,\n    details: metadata.output.devdoc.detail,\n    notice: metadata.output.userdoc.notice\n  });\n  const licenses = [...new Set(Object.entries(metadata.sources).map(_ref => {\n    let [, src] = _ref;\n    return src.license;\n  }))];\n  return {\n    name,\n    abi,\n    metadata,\n    info,\n    licenses\n  };\n}\nfunction getProcessEnv(key) {\n  let defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n  if (typeof process !== \"undefined\") {\n    if (process.env[key]) {\n      return process.env[key];\n    }\n  }\n  return defaultValue;\n}\nconst MultichainRegistry_address = \"0xcdAD8FA86e18538aC207872E8ff3536501431B73\"; // Polygon only\n\n/**\n * @internal\n */\nfunction getMultichainRegistryAddress() {\n  return getProcessEnv(\"multiChainRegistryAddress\", MultichainRegistry_address);\n}\n\n/**\n * @internal\n */\nconst isBrowser = () => \"object\" !== \"undefined\";\n\n/**\n * @internal\n */\nconst isNode = () => !isBrowser();\n\n/**\n * @internal\n */\nfunction unique(a, fn) {\n  if (a.length === 0 || a.length === 1) {\n    return a;\n  }\n  if (!fn) {\n    return a;\n  }\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      if (fn(a[i], a[j])) {\n        a.splice(j, 1);\n      }\n    }\n  }\n  return a;\n}\n\n/**\n * @internal\n */\nfunction joinABIs(abis) {\n  const parsedABIs = abis.map(abi => AbiSchema.parse(abi)).flat();\n  const filteredABIs = unique(parsedABIs, (a, b) => {\n    return a.name === b.name && a.type === b.type && a.inputs.length === b.inputs.length;\n  });\n  const finalABIs = filteredABIs.filter(item => item.type !== \"constructor\");\n  return AbiSchema.parse(finalABIs);\n}\nfunction extractFeatures(input, enabledExtensions) {\n  if (!input) {\n    return;\n  }\n  for (const extensionKey in input) {\n    const extension = input[extensionKey];\n    // if extension is enabled, then add it to enabledFeatures\n    if (extension.enabled) {\n      enabledExtensions.push(extension);\n    }\n    // recurse\n    extractFeatures(extension.features, enabledExtensions);\n  }\n}\n\n/**\n * Return all the detected features in the abi\n * @param abi - parsed array of abi entries\n * @returns array of all detected extensions with full information on each feature\n * @internal\n * @deprecated use getAllDetectedExtensions instead\n */\nfunction getAllDetectedFeatures(abi) {\n  const features = [];\n  extractFeatures(detectFeatures(abi), features);\n  return features;\n}\nfunction getAllDetectedExtensionsFromBytecode(bytecode) {\n  const features = [];\n  extractFeatures(detectFeaturesFromBytecode(bytecode), features);\n  return features;\n}\nfunction constructAbiFromBytecode(bytecode) {\n  let extensions = getAllDetectedExtensionsFromBytecode(bytecode);\n  // special deduping for ERC721 and ERC20\n  if (extensions.find(f => f.name === \"ERC721\")) {\n    extensions = extensions.filter(f => f.name !== \"ERC20\");\n  }\n  const abi = joinABIs(extensions.map(f => joinABIs(f.abis)));\n  return abi;\n}\n\n/**\n * Return all the detected extensions in the abi\n * @param abi - parsed array of abi entries\n * @returns array of all detected extensions with full information on each feature\n * @public\n */\nfunction getAllDetectedExtensions(abi) {\n  return getAllDetectedFeatures(abi).map(f => ({\n    ...f,\n    extensions: f.features\n  }));\n}\n\n// Internal static cache\nconst metadataCache = {};\nlet multichainRegistry = undefined;\nfunction getCacheKey(address, chainId) {\n  return \"\".concat(address, \"-\").concat(chainId);\n}\nfunction putInCache(address, chainId, metadata) {\n  metadataCache[getCacheKey(address, chainId)] = metadata;\n}\nfunction getFromCache(address, chainId) {\n  return metadataCache[getCacheKey(address, chainId)];\n}\n\n/**\n * @internal\n * @param address\n * @param provider\n * @param storage\n */\nasync function fetchContractMetadataFromAddress(address, provider, storage) {\n  let sdkOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const chainId = (await provider.getNetwork()).chainId; // TODO resolve from sdk network\n  const cached = getFromCache(address, chainId);\n  if (cached) {\n    return cached;\n  }\n  let metadata;\n\n  // we can't race here, because the contract URI might resolve first with a non pinned URI\n  const [ipfsData, registryData] = await Promise.all([resolveContractUriAndBytecode(address, provider).catch(() => undefined), getMetadataUriFromMultichainRegistry(address, chainId, sdkOptions).then(uri => {\n    if (!uri) {\n      return undefined;\n    }\n    return {\n      uri,\n      bytecode: \"\"\n    };\n  }).catch(() => undefined)]);\n  const bytecode = ipfsData === null || ipfsData === void 0 ? void 0 : ipfsData.bytecode;\n  const metadataUri = (registryData === null || registryData === void 0 ? void 0 : registryData.uri) || (ipfsData === null || ipfsData === void 0 ? void 0 : ipfsData.uri);\n  if (!metadataUri && !bytecode) {\n    throw new Error(\"Could not fetch bytecode for contract at \".concat(address, \" on chain \").concat(chainId, \", double check that the address and chainId are correct.\"));\n  }\n  try {\n    metadata = await fetchContractMetadata(metadataUri, storage);\n  } catch (e) {\n    // Don't warn here, its common to not have IPFS metadata for a contract, fallback to bytecode\n  }\n  if (!metadata && bytecode) {\n    const abi = constructAbiFromBytecode(bytecode);\n    if (abi && abi.length > 0) {\n      console.warn(\"Contract metadata could only be partially resolved, some contract functions might be unavailable. Try importing the contract by visiting: https://thirdweb.com/\".concat(chainId, \"/\").concat(address));\n      // return partial ABI\n      metadata = {\n        name: \"Unimported Contract\",\n        abi: abi,\n        metadata: {},\n        info: {},\n        licenses: [],\n        isPartialAbi: true\n      };\n      // return without caching\n      return metadata;\n    }\n  }\n  if (!metadata) {\n    throw new Error(\"Could not resolve contract. Try importing it by visiting: https://thirdweb.com/\".concat(chainId, \"/\").concat(address));\n  }\n  putInCache(address, chainId, metadata);\n  return metadata;\n}\nasync function getMetadataUriFromMultichainRegistry(address, chainId, sdkOptions) {\n  if (!multichainRegistry) {\n    var _sdkOptions$supported;\n    const polygonChain = sdkOptions === null || sdkOptions === void 0 || (_sdkOptions$supported = sdkOptions.supportedChains) === null || _sdkOptions$supported === void 0 ? void 0 : _sdkOptions$supported.find(c => c.chainId === 137);\n    const chain = polygonChain || Polygon;\n    multichainRegistry = new Contract(getMultichainRegistryAddress(), TWRegistryABI, getChainProvider(chain, sdkOptions));\n  }\n  const importedUri = await multichainRegistry.getMetadataUri(chainId, address);\n  return importedUri;\n}\n\n/**\n * @internal\n * @param address\n * @param provider\n * @param storage\n * @returns\n */\nasync function fetchAbiFromAddress(address, provider, storage) {\n  try {\n    const metadata = await fetchContractMetadataFromAddress(address, provider, storage);\n    if (metadata && metadata.abi) {\n      return metadata.abi;\n    }\n  } catch (e) {\n    // ignore and return undefined\n    // will fallback to embedded ABIs for prebuilts\n  }\n  return undefined;\n}\nfunction buildDeployTransactionFunction(fn) {\n  async function executeFn() {\n    const tx = await fn(...arguments);\n    return tx.execute();\n  }\n  executeFn.prepare = fn;\n  return executeFn;\n}\nfunction buildTransactionFunction(fn) {\n  async function executeFn() {\n    const tx = await fn(...arguments);\n    return tx.execute();\n  }\n  executeFn.prepare = fn;\n  return executeFn;\n}\nasync function getDefaultGasOverrides(provider) {\n  // If we're running in the browser, let users configure gas price in their wallet UI\n  if (isBrowser()) {\n    return {};\n  }\n\n  // handle smart wallet provider\n  if (provider.originalProvider) {\n    provider = provider.originalProvider;\n  }\n  const feeData = await getDynamicFeeData(provider);\n  if (feeData.maxFeePerGas && feeData.maxPriorityFeePerGas) {\n    return {\n      maxFeePerGas: feeData.maxFeePerGas,\n      maxPriorityFeePerGas: feeData.maxPriorityFeePerGas\n    };\n  } else {\n    return {\n      gasPrice: await getGasPrice(provider)\n    };\n  }\n}\nasync function getDynamicFeeData(provider) {\n  let maxFeePerGas = null;\n  let maxPriorityFeePerGas = null;\n  const [{\n    chainId\n  }, block, eth_maxPriorityFeePerGas] = await Promise.all([provider.getNetwork(), provider.getBlock(\"latest\"), provider.send(\"eth_maxPriorityFeePerGas\", []).catch(() => null)]);\n  const baseBlockFee = block && block.baseFeePerGas ? block.baseFeePerGas : utils.parseUnits(\"100\", \"wei\");\n  if (chainId === Mumbai.chainId || chainId === Polygon.chainId) {\n    // for polygon, get fee data from gas station\n    maxPriorityFeePerGas = await getPolygonGasPriorityFee(chainId);\n  } else if (eth_maxPriorityFeePerGas) {\n    // prioritize fee from eth_maxPriorityFeePerGas\n    maxPriorityFeePerGas = BigNumber.from(eth_maxPriorityFeePerGas);\n  } else {\n    // if eth_maxPriorityFeePerGas is not available, use 1.5 gwei default\n    const feeData = await provider.getFeeData();\n    maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;\n    if (!maxPriorityFeePerGas) {\n      // chain does not support eip-1559, return null for both\n      return {\n        maxFeePerGas: null,\n        maxPriorityFeePerGas: null\n      };\n    }\n  }\n\n  // eip-1559 formula, with an extra 10% tip to account for gas volatility\n  maxFeePerGas = baseBlockFee.mul(2).add(getPreferredPriorityFee(maxPriorityFeePerGas));\n  return {\n    maxFeePerGas,\n    maxPriorityFeePerGas\n  };\n}\nfunction getPreferredPriorityFee(defaultPriorityFeePerGas) {\n  let percentMultiplier = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n  const extraTip = defaultPriorityFeePerGas.div(100).mul(percentMultiplier); // + 10%\n  const txGasPrice = defaultPriorityFeePerGas.add(extraTip);\n  return txGasPrice;\n}\nasync function getGasPrice(provider) {\n  const gasPrice = await provider.getGasPrice();\n  const maxGasPrice = utils.parseUnits(\"300\", \"gwei\"); // 300 gwei\n  const extraTip = gasPrice.div(100).mul(10); // + 10%\n  const txGasPrice = gasPrice.add(extraTip);\n  if (txGasPrice.gt(maxGasPrice)) {\n    return maxGasPrice;\n  }\n  return txGasPrice;\n}\n\n/**\n * @internal\n */\nfunction getGasStationUrl(chainId) {\n  switch (chainId) {\n    case ChainId.Polygon:\n      return \"https://gasstation.polygon.technology/v2\";\n    case ChainId.Mumbai:\n      return \"https://gasstation-testnet.polygon.technology/v2\";\n  }\n}\nconst MIN_POLYGON_GAS_PRICE = /* @__PURE__ */utils.parseUnits(\"31\", \"gwei\");\nconst MIN_MUMBAI_GAS_PRICE = /* @__PURE__ */utils.parseUnits(\"1\", \"gwei\");\n\n/**\n * @internal\n */\nfunction getDefaultGasFee(chainId) {\n  switch (chainId) {\n    case ChainId.Polygon:\n      return MIN_POLYGON_GAS_PRICE;\n    case ChainId.Mumbai:\n      return MIN_MUMBAI_GAS_PRICE;\n  }\n}\n\n/**\n *\n * @returns the gas price\n * @internal\n */\nasync function getPolygonGasPriorityFee(chainId) {\n  const gasStationUrl = getGasStationUrl(chainId);\n  try {\n    const data = await (await fetch(gasStationUrl)).json();\n    // take the standard speed here, SDK options will define the extra tip\n    const priorityFee = data[\"fast\"][\"maxPriorityFee\"];\n    if (priorityFee > 0) {\n      const fixedFee = parseFloat(priorityFee).toFixed(9);\n      return utils.parseUnits(fixedFee, \"gwei\");\n    }\n  } catch (e) {\n    console.error(\"failed to fetch gas\", e);\n  }\n  return getDefaultGasFee(chainId);\n}\n\n/**\n * @internal\n * @param publishedMetadata\n * @param storage\n */\n\nasync function fetchSourceFilesFromMetadata(publishedMetadata, storage) {\n  return await Promise.all(Object.entries(publishedMetadata.metadata.sources).map(async _ref => {\n    let [path, info] = _ref;\n    const urls = info.urls;\n    const ipfsLink = urls ? urls.find(url => url.includes(\"ipfs\")) : undefined;\n    if (ipfsLink) {\n      const ipfsHash = ipfsLink.split(\"ipfs/\")[1];\n      // 3 sec timeout for sources that haven't been uploaded to ipfs\n      const timeout = new Promise((_r, rej) => setTimeout(() => rej(\"timeout\"), 3000));\n      const source = await Promise.race([(await storage.download(\"ipfs://\".concat(ipfsHash))).text(), timeout]);\n      return {\n        filename: path,\n        source\n      };\n    } else {\n      return {\n        filename: path,\n        source: info.content || \"Could not find source for this contract\"\n      };\n    }\n  }));\n}\nfunction isRouterContract(abi) {\n  const isPluginRouter = isFeatureEnabled(AbiSchema.parse(abi), \"PluginRouter\");\n  const isBaseRouter = isFeatureEnabled(AbiSchema.parse(abi), \"DynamicContract\");\n  return isBaseRouter || isPluginRouter;\n}\nconst ERROR_SUBSTRINGS = [\"eip-155\", \"eip155\", \"protected\", \"invalid chain id for signer\", \"chain id none\", \"chain_id mismatch\", \"recovered sender mismatch\", \"transaction hash mismatch\", \"chainid no support\", \"chainid (0)\", \"chainid(0)\"];\nconst ERROR_SUBSTRINGS_COMPOSITE = [[\"account\", \"not found\"], [\"wrong\", \"chainid\"]];\n\n/* eslint-disable no-useless-computed-key */\nconst CUSTOM_GAS_FOR_CHAIN = {\n  [5001]: {\n    name: \"Mantle Testnet\",\n    gasPrice: 1\n  },\n  [71402]: {\n    name: \"Godwoken Mainnet\",\n    gasPrice: 40000 * 10 ** 9\n  },\n  [1351057110]: {\n    name: \"Chaos (SKALE Testnet)\",\n    gasPrice: 100000\n  },\n  [361]: {\n    name: \"Theta Mainnet\",\n    gasPrice: 4000 * 10 ** 9\n  },\n  [365]: {\n    name: \"Theta Testnet\",\n    gasPrice: 4000 * 10 ** 9\n  },\n  [7700]: {\n    name: \"Canto\",\n    gasPrice: 1000 * 10 ** 9\n  },\n  [7701]: {\n    name: \"Canto Testnet\",\n    gasPrice: 1000 * 10 ** 9\n  },\n  [338]: {\n    name: \"Cronos Testnet\",\n    gasPrice: 2000 * 10 ** 9\n  },\n  [199]: {\n    name: \"BitTorrent Chain\",\n    gasPrice: 300000 * 10 ** 9\n  }\n};\n/* eslint-enable no-useless-computed-key */\n\nfunction matchError(error) {\n  const errorIndex = ERROR_SUBSTRINGS.findIndex(substring => error.includes(substring));\n  const compositeErrorIndex = ERROR_SUBSTRINGS_COMPOSITE.findIndex(arr => {\n    let foundError = true;\n    arr.forEach(substring => {\n      foundError && (foundError = error.includes(substring));\n    });\n    return foundError;\n  });\n  return errorIndex !== -1 || compositeErrorIndex !== -1;\n}\nconst CREATE2_FACTORY_BYTECODE = \"0x604580600e600039806000f350fe7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe03601600081602082378035828234f58015156039578182fd5b8082525050506014600cf3\";\nconst SIGNATURE = {\n  v: 27,\n  r: \"0x2222222222222222222222222222222222222222222222222222222222222222\",\n  s: \"0x2222222222222222222222222222222222222222222222222222222222222222\"\n};\nconst COMMON_FACTORY = \"0x4e59b44847b379578588920cA78FbF26c0B4956C\"; // for pre-eip-155 supporting chains\n\nconst GAS_LIMIT_FOR_DEPLOYER = 5000000;\nconst DEPLOYER_BYTECODE = \"0x60806040526040516107f33803806107f383398101604081905261002291610359565b805160005b818110156100c157828181518110610041576100416104c9565b6020026020010151600001516001600160a01b03163b600014156100af576100ad838281518110610074576100746104c9565b602002602001015160200151848381518110610092576100926104c9565b6020026020010151604001516100c960201b6100091760201c565b505b806100b9816104df565b915050610027565b505050610557565b606061011183836040518060400160405280601e81526020017f416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564000081525061011860201b60201c565b9392505050565b6060610127848460008561012f565b949350505050565b6060824710156101955760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084015b60405180910390fd5b6001600160a01b0385163b6101ec5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161018c565b600080866001600160a01b031685876040516102089190610508565b60006040518083038185875af1925050503d8060008114610245576040519150601f19603f3d011682016040523d82523d6000602084013e61024a565b606091505b50909250905061025b828286610266565b979650505050505050565b60608315610275575081610111565b8251156102855782518084602001fd5b8160405162461bcd60e51b815260040161018c9190610524565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b03811182821017156102d7576102d761029f565b60405290565b604051601f8201601f191681016001600160401b03811182821017156103055761030561029f565b604052919050565b80516001600160a01b038116811461032457600080fd5b919050565b60005b8381101561034457818101518382015260200161032c565b83811115610353576000848401525b50505050565b6000602080838503121561036c57600080fd5b82516001600160401b038082111561038357600080fd5b818501915085601f83011261039757600080fd5b8151818111156103a9576103a961029f565b8060051b6103b88582016102dd565b91825283810185019185810190898411156103d257600080fd5b86860192505b838310156104bc578251858111156103f05760008081fd5b86016060601f19828d0381018213156104095760008081fd5b6104116102b5565b61041c8b850161030d565b8152604061042b81860161030d565b828d01529284015192898411156104425760008081fd5b83850194508e603f86011261045957600093508384fd5b8b85015193508984111561046f5761046f61029f565b61047f8c84601f870116016102dd565b92508383528e818587010111156104965760008081fd5b6104a5848d8501838801610329565b8101919091528452505091860191908601906103d8565b9998505050505050505050565b634e487b7160e01b600052603260045260246000fd5b600060001982141561050157634e487b7160e01b600052601160045260246000fd5b5060010190565b6000825161051a818460208701610329565b9190910192915050565b6020815260008251806020840152610543816040850160208701610329565b601f01601f19169190910160400192915050565b61028d806105666000396000f3fe6080604052600080fd5b606061004b83836040518060400160405280601e81526020017f416464726573733a206c6f772d6c6576656c2063616c6c206661696c65640000815250610052565b9392505050565b60606100618484600085610069565b949350505050565b6060824710156100cf5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084015b60405180910390fd5b6001600160a01b0385163b6101265760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016100c6565b600080866001600160a01b031685876040516101429190610208565b60006040518083038185875af1925050503d806000811461017f576040519150601f19603f3d011682016040523d82523d6000602084013e610184565b606091505b509150915061019482828661019f565b979650505050505050565b606083156101ae57508161004b565b8251156101be5782518084602001fd5b8160405162461bcd60e51b81526004016100c69190610224565b60005b838110156101f35781810151838201526020016101db565b83811115610202576000848401525b50505050565b6000825161021a8184602087016101d8565b9190910192915050565b60208152600082518060208401526102438160408501602087016101d8565b601f01601f1916919091016040019291505056fea26469706673582212200b524eb8ceaafe6c603273ee859fddbc2d6f1b7860c3d853dcf6f129f9d9371364736f6c634300080c0033\";\nconst DEPLOYER_ABI = [{\n  inputs: [{\n    components: [{\n      internalType: \"address\",\n      name: \"predictedAddress\",\n      type: \"address\"\n    }, {\n      internalType: \"address\",\n      name: \"to\",\n      type: \"address\"\n    }, {\n      internalType: \"bytes\",\n      name: \"data\",\n      type: \"bytes\"\n    }],\n    internalType: \"struct IDeployer.Transaction[]\",\n    name: \"transactions\",\n    type: \"tuple[]\"\n  }],\n  stateMutability: \"payable\",\n  type: \"constructor\"\n}];\n\n/**\n * Check if a contract exists at the given address\n *\n * @internal\n * @param address\n * @param provider\n */\nasync function isContractDeployed(address, provider) {\n  const code = await provider.getCode(address);\n  return code !== \"0x\" && code !== \"0x0\";\n}\n\n/**\n * Check if a chain enforces EIP-155 transactions\n * Ref: https://eips.ethereum.org/EIPS/eip-155\n *\n * @internal\n * @param provider\n */\nasync function isEIP155Enforced(provider) {\n  try {\n    // TODO: Find a better way to check this.\n\n    // Send a random transaction of legacy type (pre-eip-155).\n    // It will fail. Parse the error message to check whether eip-155 is enforced.\n    await provider.sendTransaction(\"0xf8a58085174876e800830186a08080b853604580600e600039806000f350fe7fffffffffffffffafffffffffffffffffffffffffffffffffffffffffffffffe03601600081602082378035828234f58015156039578182fd5b8082525050506014600cf31ba02222222222222222222222222222222222222222222222222222222222222222a02222222222222222222222222222222222222222222222222222222222222222\");\n  } catch (e) {\n    const errorMsg = e.toString().toLowerCase();\n    const errorJson = JSON.stringify(e).toLowerCase();\n    if (matchError(errorMsg) || matchError(errorJson)) {\n      return true;\n    }\n    return false;\n  }\n  return false;\n}\n\n/**\n * Generate a transaction to be sent with a keyless signer.\n *\n * @public\n * @param transaction: Unsigned transaction object\n * @param signature: Signature bytes\n */\nfunction getKeylessTxn(transaction, signature) {\n  // 1. Create serialized txn string\n  const digest = utils.arrayify(utils.keccak256(utils.serializeTransaction(transaction)));\n\n  // 2. Determine signer address from custom signature + txn\n  const signer = utils.recoverAddress(digest, signature);\n\n  // 3. Create the signed serialized txn string.\n  // To be sent directly to the chain using a provider.\n  const signedSerializedTx = utils.serializeTransaction(transaction, signature);\n  return {\n    signer: signer,\n    transaction: signedSerializedTx\n  };\n}\n\n/**\n *\n * @public\n * @param transaction: Unsigned transaction object\n * @param signature: Signature bytes\n */\nfunction getCreate2FactoryDeploymentInfo(chainId, gasPrice) {\n  const signature = utils.joinSignature(SIGNATURE);\n  const deploymentTransaction = getKeylessTxn({\n    gasPrice: gasPrice ? gasPrice : 100 * 10 ** 9,\n    gasLimit: 100000,\n    nonce: 0,\n    data: CREATE2_FACTORY_BYTECODE,\n    chainId: chainId\n  }, signature);\n  const create2FactoryAddress = utils.getContractAddress({\n    from: deploymentTransaction.signer,\n    nonce: 0\n  });\n  return {\n    ...deploymentTransaction,\n    deployment: create2FactoryAddress\n  };\n}\n\n/**\n * Get the CREATE2 Factory address for a network\n * Source code of the factory:\n * https://github.com/Arachnid/deterministic-deployment-proxy/blob/master/source/deterministic-deployment-proxy.yul\n *\n * @internal\n * @param provider\n */\nasync function getCreate2FactoryAddress(provider) {\n  const commonFactoryExists = await isContractDeployed(COMMON_FACTORY, provider);\n  if (commonFactoryExists) {\n    return COMMON_FACTORY;\n  }\n  const enforceEip155 = await isEIP155Enforced(provider);\n  const networkId = (await provider.getNetwork()).chainId;\n  const chainId = enforceEip155 ? networkId : 0;\n  const deploymentInfo = CUSTOM_GAS_FOR_CHAIN[networkId] ? getCreate2FactoryDeploymentInfo(chainId, CUSTOM_GAS_FOR_CHAIN[networkId].gasPrice) : getCreate2FactoryDeploymentInfo(chainId);\n  return deploymentInfo.deployment;\n}\nconst bytecode = \"0x60606040526040805190810160405280600d81526020017f57726170706564204574686572000000000000000000000000000000000000008152506000908051906020019061004f9291906100c8565b506040805190810160405280600481526020017f57455448000000000000000000000000000000000000000000000000000000008152506001908051906020019061009b9291906100c8565b506012600260006101000a81548160ff021916908360ff16021790555034156100c357600080fd5b61016d565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061010957805160ff1916838001178555610137565b82800160010185558215610137579182015b8281111561013657825182559160200191906001019061011b565b5b5090506101449190610148565b5090565b61016a91905b8082111561016657600081600090555060010161014e565b5090565b90565b610c348061017c6000396000f3006060604052600436106100af576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100b9578063095ea7b31461014757806318160ddd146101a157806323b872dd146101ca5780632e1a7d4d14610243578063313ce5671461026657806370a082311461029557806395d89b41146102e2578063a9059cbb14610370578063d0e30db0146103ca578063dd62ed3e146103d4575b6100b7610440565b005b34156100c457600080fd5b6100cc6104dd565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561010c5780820151818401526020810190506100f1565b50505050905090810190601f1680156101395780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561015257600080fd5b610187600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061057b565b604051808215151515815260200191505060405180910390f35b34156101ac57600080fd5b6101b461066d565b6040518082815260200191505060405180910390f35b34156101d557600080fd5b610229600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061068c565b604051808215151515815260200191505060405180910390f35b341561024e57600080fd5b61026460048080359060200190919050506109d9565b005b341561027157600080fd5b610279610b05565b604051808260ff1660ff16815260200191505060405180910390f35b34156102a057600080fd5b6102cc600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610b18565b6040518082815260200191505060405180910390f35b34156102ed57600080fd5b6102f5610b30565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561033557808201518184015260208101905061031a565b50505050905090810190601f1680156103625780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561037b57600080fd5b6103b0600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610bce565b604051808215151515815260200191505060405180910390f35b6103d2610440565b005b34156103df57600080fd5b61042a600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610be3565b6040518082815260200191505060405180910390f35b34600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055503373ffffffffffffffffffffffffffffffffffffffff167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c346040518082815260200191505060405180910390a2565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105735780601f1061054857610100808354040283529160200191610573565b820191906000526020600020905b81548152906001019060200180831161055657829003601f168201915b505050505081565b600081600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60003073ffffffffffffffffffffffffffffffffffffffff1631905090565b600081600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156106dc57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141580156107b457507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414155b156108cf5781600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561084457600080fd5b81600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055505b81600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b80600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610a2757600080fd5b80600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501515610ab457600080fd5b3373ffffffffffffffffffffffffffffffffffffffff167f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b65826040518082815260200191505060405180910390a250565b600260009054906101000a900460ff1681565b60036020528060005260406000206000915090505481565b60018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610bc65780601f10610b9b57610100808354040283529160200191610bc6565b820191906000526020600020905b815481529060010190602001808311610ba957829003601f168201915b505050505081565b6000610bdb33848461068c565b905092915050565b60046020528160005260406000206020528060005260406000206000915091505054815600a165627a7a72305820deb4c2ccab3c2fdca32ab3f46728389c2fe2c165d5fafa07661e4e004f6c344a0029\";\nconst ContractPublisher_address = \"0x664244560eBa21Bf82d7150C791bE1AbcD5B4cd7\"; // Polygon only\n\n/**\n * @internal\n */\nfunction getContractPublisherAddress() {\n  return getProcessEnv(\"contractPublisherAddress\", ContractPublisher_address);\n}\nconst DropErc721ContractInput = /* @__PURE__ */CommonContractSchema.merge(CommonRoyaltySchema).merge(MerkleSchema).merge(CommonSymbolSchema);\nconst DropErc721ContractOutput = /* @__PURE__ */CommonContractOutputSchema.merge(CommonRoyaltySchema).merge(MerkleSchema).merge(CommonSymbolSchema);\nconst DropErc721ContractDeploy = /* @__PURE__ */DropErc721ContractInput.merge(CommonPlatformFeeSchema).merge(CommonPrimarySaleSchema).merge(CommonTrustedForwarderSchema);\nconst DropErc721ContractSchema = {\n  deploy: DropErc721ContractDeploy,\n  output: DropErc721ContractOutput,\n  input: DropErc721ContractInput\n};\nconst DropErc1155ContractInput = /* @__PURE__ */CommonContractSchema.merge(CommonRoyaltySchema).merge(MerkleSchema).merge(CommonSymbolSchema);\nconst DropErc1155ContractOutput = /* @__PURE__ */CommonContractOutputSchema.merge(CommonRoyaltySchema).merge(MerkleSchema).merge(CommonSymbolSchema);\nconst DropErc1155ContractDeploy = /* @__PURE__ */DropErc1155ContractInput.merge(CommonPlatformFeeSchema).merge(CommonPrimarySaleSchema).merge(CommonTrustedForwarderSchema);\nconst DropErc1155ContractSchema = {\n  deploy: DropErc1155ContractDeploy,\n  output: DropErc1155ContractOutput,\n  input: DropErc1155ContractInput\n};\nconst MarketplaceContractInput = CommonContractSchema;\nconst MarketplaceContractOutput = CommonContractOutputSchema;\nconst MarketplaceContractDeploy = /* @__PURE__ */MarketplaceContractInput.merge(CommonPlatformFeeSchema).merge(CommonTrustedForwarderSchema);\nconst MarketplaceContractSchema = {\n  deploy: MarketplaceContractDeploy,\n  output: MarketplaceContractOutput,\n  input: MarketplaceContractInput\n};\nconst PackContractInput = /* @__PURE__ */CommonContractSchema.merge(CommonRoyaltySchema).merge(CommonSymbolSchema);\nconst PackContractOutput = /* @__PURE__ */CommonContractOutputSchema.merge(CommonRoyaltySchema).merge(CommonSymbolSchema);\nconst PackContractDeploy = /* @__PURE__ */PackContractInput.merge(CommonPlatformFeeSchema).merge(CommonTrustedForwarderSchema);\nconst PackContractSchema = {\n  deploy: PackContractDeploy,\n  output: PackContractOutput,\n  input: PackContractInput\n};\nconst SplitRecipientInputSchema = /* @__PURE__ */(() => z.object({\n  address: AddressOrEnsSchema,\n  sharesBps: BasisPointsSchema.gt(0, \"Shares must be greater than 0\")\n}))();\nconst SplitRecipientOuputSchema = /* @__PURE__ */SplitRecipientInputSchema.extend({\n  address: AddressOrEnsSchema,\n  sharesBps: BasisPointsSchema\n});\nconst SplitsContractInput = /* @__PURE__ */(() => CommonContractSchema.extend({\n  recipients: z.array(SplitRecipientInputSchema).default([]).superRefine((val, context) => {\n    const addressMap = {};\n    let totalShares = 0;\n    for (let index = 0; index < val.length; index++) {\n      const entry = val[index];\n      if (addressMap[entry.address]) {\n        context.addIssue({\n          code: z.ZodIssueCode.custom,\n          message: \"Duplicate address.\",\n          path: [index, \"address\"]\n        });\n      }\n      addressMap[entry.address] = true;\n      totalShares += entry.sharesBps;\n      if (totalShares > 10000) {\n        context.addIssue({\n          code: z.ZodIssueCode.custom,\n          message: \"Total shares cannot go over 100%.\",\n          path: [index, \"sharesBps\"]\n        });\n      }\n    }\n    if (totalShares !== 10000) {\n      context.addIssue({\n        code: z.ZodIssueCode.custom,\n        message: \"Total shares need to add up to 100%. Total shares are currently \".concat(totalShares / 100, \"%\"),\n        path: []\n      });\n    }\n  })\n}))();\nconst SplitsContractOutput = /* @__PURE__ */(() => CommonContractOutputSchema.extend({\n  recipients: z.array(SplitRecipientOuputSchema)\n}))();\nconst SplitsContractDeploy = /* @__PURE__ */SplitsContractInput.merge(SplitsContractInput).merge(CommonTrustedForwarderSchema);\nconst SplitsContractSchema = {\n  deploy: SplitsContractDeploy,\n  output: SplitsContractOutput,\n  input: SplitsContractInput\n};\nconst TokenErc20ContractInput = /* @__PURE__ */CommonContractSchema.merge(CommonSymbolSchema);\nconst TokenErc20ContractOutput = /* @__PURE__ */CommonContractOutputSchema.merge(CommonSymbolSchema);\nconst TokenErc20ContractDeploy = /* @__PURE__ */TokenErc20ContractInput.merge(CommonPlatformFeeSchema).merge(CommonPrimarySaleSchema).merge(CommonTrustedForwarderSchema);\nconst TokenErc20ContractSchema = {\n  deploy: TokenErc20ContractDeploy,\n  output: TokenErc20ContractOutput,\n  input: TokenErc20ContractInput\n};\nconst TokenErc721ContractInput = /* @__PURE__ */CommonContractSchema.merge(CommonRoyaltySchema).merge(CommonSymbolSchema);\nconst TokenErc721ContractOutput = /* @__PURE__ */CommonContractOutputSchema.merge(CommonRoyaltySchema).merge(CommonSymbolSchema);\nconst TokenErc721ContractDeploy = /* @__PURE__ */TokenErc721ContractInput.merge(CommonPlatformFeeSchema).merge(CommonPrimarySaleSchema).merge(CommonTrustedForwarderSchema);\nconst TokenErc721ContractSchema = {\n  deploy: TokenErc721ContractDeploy,\n  output: TokenErc721ContractOutput,\n  input: TokenErc721ContractInput\n};\nconst TokenErc1155ContractInput = /* @__PURE__ */CommonContractSchema.merge(CommonRoyaltySchema).merge(CommonSymbolSchema);\nconst TokenErc1155ContractOutput = /* @__PURE__ */CommonContractOutputSchema.merge(CommonRoyaltySchema).merge(CommonSymbolSchema);\nconst TokenErc1155ContractDeploy = /* @__PURE__ */TokenErc1155ContractInput.merge(CommonPlatformFeeSchema).merge(CommonPrimarySaleSchema).merge(CommonTrustedForwarderSchema);\nconst TokenErc1155ContractSchema = {\n  deploy: TokenErc1155ContractDeploy,\n  output: TokenErc1155ContractOutput,\n  input: TokenErc1155ContractInput\n};\nconst VoteSettingsInputSchema = /* @__PURE__ */(() => z.object({\n  voting_delay_in_blocks: z.number().min(0).default(0),\n  voting_period_in_blocks: z.number().min(1).default(1),\n  voting_token_address: AddressOrEnsSchema,\n  voting_quorum_fraction: PercentSchema.default(0),\n  proposal_token_threshold: BigNumberishSchema.default(1)\n}))();\nconst VoteSettingsOuputSchema = /* @__PURE__ */VoteSettingsInputSchema.extend({\n  proposal_token_threshold: BigNumberSchema\n});\nconst VoteContractInput = /* @__PURE__ */CommonContractSchema.merge(VoteSettingsInputSchema);\nconst VoteContractOutput = /* @__PURE__ */CommonContractOutputSchema.merge(VoteSettingsOuputSchema);\nconst VoteContractDeploy = /* @__PURE__ */VoteContractInput.merge(CommonTrustedForwarderSchema);\nconst VoteContractSchema = {\n  deploy: VoteContractDeploy,\n  output: VoteContractOutput,\n  input: VoteContractInput\n};\nasync function resolveAddress(addressOrEns) {\n  return AddressOrEnsSchema.parseAsync(addressOrEns);\n}\n\n/**\n * Fetch and parse the full metadata AFTER publishing a contract, with all the extra information (version, readme, etc)\n * @internal\n * @param publishMetadataUri\n * @param storage\n */\nasync function fetchExtendedReleaseMetadata(publishMetadataUri, storage) {\n  const meta = await (await storage.download(publishMetadataUri)).text();\n  return FullPublishMetadataSchemaOutput.parse(JSON.parse(meta));\n}\n\n/**\n * @internal\n * @param publishMetadataUri\n * @param storage\n */\nasync function fetchRawPredeployMetadata(publishMetadataUri, storage) {\n  return PreDeployMetadata.parse(JSON.parse(await (await storage.download(publishMetadataUri)).text()));\n}\n\n/**\n * Fetch the metadata coming from CLI, this is before deploying or releasing the contract.\n * @internal\n * @param publishMetadataUri\n * @param storage\n */\nasync function fetchPreDeployMetadata(publishMetadataUri, storage) {\n  const rawMeta = await fetchRawPredeployMetadata(publishMetadataUri, storage);\n  const deployBytecode = await (await storage.download(rawMeta.bytecodeUri)).text();\n  const parsedMeta = await fetchContractMetadata(rawMeta.metadataUri, storage);\n  return PreDeployMetadataFetchedSchema.parse({\n    ...rawMeta,\n    ...parsedMeta,\n    bytecode: deployBytecode\n  });\n}\nconst deployMetadataCache = {};\nasync function fetchAndCacheDeployMetadata(publishMetadataUri, storage) {\n  if (deployMetadataCache[publishMetadataUri]) {\n    return deployMetadataCache[publishMetadataUri];\n  }\n  const compilerMetadata = await fetchPreDeployMetadata(publishMetadataUri, storage);\n  let extendedMetadata;\n  try {\n    extendedMetadata = await fetchExtendedReleaseMetadata(publishMetadataUri, storage);\n  } catch (e) {\n    // not a factory deployment, ignore\n  }\n  const data = {\n    compilerMetadata,\n    extendedMetadata\n  };\n  deployMetadataCache[publishMetadataUri] = data;\n  return data;\n}\nconst AddressZero = \"0x0000000000000000000000000000000000000000\";\nconst TWRegistry_address = \"0x7c487845f98938Bb955B1D5AD069d9a30e4131fd\";\nconst TWFactory_address = \"0x5DBC7B840baa9daBcBe9D2492E45D7244B54A2A0\";\n\n/**\n * @internal\n */\nconst OZ_DEFENDER_FORWARDER_ADDRESS = \"0xc82BbE41f2cF04e3a8efA18F7032BDD7f6d98a81\";\n\n/**\n * @internal\n */\nconst CONTRACT_ADDRESSES = {\n  [ChainId.Mainnet]: {\n    openzeppelinForwarder: OZ_DEFENDER_FORWARDER_ADDRESS,\n    openzeppelinForwarderEOA: \"0x76ce2CB1Ae48Fa067f4fb8c5f803111AE0B24BEA\",\n    biconomyForwarder: \"0x84a0856b038eaAd1cC7E297cF34A7e72685A8693\",\n    twFactory: TWFactory_address,\n    twRegistry: TWRegistry_address,\n    twBYOCRegistry: AddressZero\n  },\n  [ChainId.Goerli]: {\n    openzeppelinForwarder: \"0x5001A14CA6163143316a7C614e30e6041033Ac20\",\n    openzeppelinForwarderEOA: \"0xe73c50cB9c5B378627ff625BB6e6725A4A5D65d2\",\n    biconomyForwarder: \"0xE041608922d06a4F26C0d4c27d8bCD01daf1f792\",\n    twFactory: TWFactory_address,\n    twRegistry: TWRegistry_address,\n    twBYOCRegistry: \"0xB1Bd9d7942A250BA2Dce27DD601F2ED4211A60C4\"\n  },\n  [ChainId.Polygon]: {\n    openzeppelinForwarder: OZ_DEFENDER_FORWARDER_ADDRESS,\n    openzeppelinForwarderEOA: \"0x4f247c69184ad61036EC2Bb3213b69F10FbEDe1F\",\n    biconomyForwarder: \"0x86C80a8aa58e0A4fa09A69624c31Ab2a6CAD56b8\",\n    twFactory: TWFactory_address,\n    twRegistry: TWRegistry_address,\n    twBYOCRegistry: \"0x308473Be900F4185A56587dE54bDFF5E8f7a6AE7\"\n  },\n  [ChainId.Mumbai]: {\n    openzeppelinForwarder: OZ_DEFENDER_FORWARDER_ADDRESS,\n    openzeppelinForwarderEOA: \"0xb1A2883fc4d287d9cB8Dbb96cFF60C76BEf2D250\",\n    biconomyForwarder: \"0x9399BB24DBB5C4b782C70c2969F58716Ebbd6a3b\",\n    twFactory: TWFactory_address,\n    twRegistry: TWRegistry_address,\n    twBYOCRegistry: \"0x3F17972CB27506eb4a6a3D59659e0B57a43fd16C\"\n  },\n  [ChainId.Avalanche]: {\n    openzeppelinForwarder: OZ_DEFENDER_FORWARDER_ADDRESS,\n    openzeppelinForwarderEOA: \"0xb1A2883fc4d287d9cB8Dbb96cFF60C76BEf2D250\",\n    biconomyForwarder: \"0x64CD353384109423a966dCd3Aa30D884C9b2E057\",\n    twFactory: TWFactory_address,\n    twRegistry: TWRegistry_address,\n    twBYOCRegistry: AddressZero\n  },\n  [ChainId.AvalancheFujiTestnet]: {\n    openzeppelinForwarder: OZ_DEFENDER_FORWARDER_ADDRESS,\n    openzeppelinForwarderEOA: \"0xe73c50cB9c5B378627ff625BB6e6725A4A5D65d2\",\n    biconomyForwarder: \"0x6271Ca63D30507f2Dcbf99B52787032506D75BBF\",\n    twFactory: TWFactory_address,\n    twRegistry: TWRegistry_address,\n    twBYOCRegistry: \"0x3E6eE864f850F5e5A98bc950B68E181Cf4010F23\"\n  },\n  [ChainId.Fantom]: {\n    openzeppelinForwarder: OZ_DEFENDER_FORWARDER_ADDRESS,\n    openzeppelinForwarderEOA: \"0xb1A2883fc4d287d9cB8Dbb96cFF60C76BEf2D250\",\n    biconomyForwarder: \"0x64CD353384109423a966dCd3Aa30D884C9b2E057\",\n    twFactory: \"0x97EA0Fcc552D5A8Fb5e9101316AAd0D62Ea0876B\",\n    twRegistry: TWRegistry_address,\n    twBYOCRegistry: AddressZero\n  },\n  [ChainId.FantomTestnet]: {\n    openzeppelinForwarder: OZ_DEFENDER_FORWARDER_ADDRESS,\n    openzeppelinForwarderEOA: \"0x42D3048b595B6e1c28a588d70366CcC2AA4dB47b\",\n    biconomyForwarder: \"0x69FB8Dca8067A5D38703b9e8b39cf2D51473E4b4\",\n    twFactory: TWFactory_address,\n    twRegistry: TWRegistry_address,\n    twBYOCRegistry: \"0x3E6eE864f850F5e5A98bc950B68E181Cf4010F23\"\n  },\n  [ChainId.Arbitrum]: {\n    openzeppelinForwarder: \"0x4a8AC7f22DeD2CF923A51e4A1c67490bd8868add\",\n    openzeppelinForwarderEOA: \"0x4f247c69184ad61036EC2Bb3213b69F10FbEDe1F\",\n    biconomyForwarder: \"0xfe0fa3C06d03bDC7fb49c892BbB39113B534fB57\",\n    twFactory: \"0xd24b3de085CFd8c54b94feAD08a7962D343E6DE0\",\n    twRegistry: TWRegistry_address,\n    twBYOCRegistry: AddressZero\n  },\n  [ChainId.ArbitrumGoerli]: {\n    openzeppelinForwarder: \"0x8cbc8B5d71702032904750A66AEfE8B603eBC538\",\n    openzeppelinForwarderEOA: \"0x119704314Ef304EaAAE4b3c7C9ABd59272A28310\",\n    biconomyForwarder: AddressZero,\n    twFactory: \"0xd24b3de085CFd8c54b94feAD08a7962D343E6DE0\",\n    twRegistry: TWRegistry_address,\n    twBYOCRegistry: AddressZero\n  },\n  [ChainId.Optimism]: {\n    openzeppelinForwarder: \"0xd85da690EF288A6976DE0E85Fb2Aad512eBAfbf7\",\n    openzeppelinForwarderEOA: \"0x7e80648EB2071E26937F9D42A513ccf4815fc702\",\n    biconomyForwarder: \"0xefba8a2a82ec1fb1273806174f5e28fbb917cf95\",\n    twFactory: \"0xd24b3de085CFd8c54b94feAD08a7962D343E6DE0\",\n    twRegistry: TWRegistry_address,\n    twBYOCRegistry: AddressZero\n  },\n  [ChainId.OptimismGoerli]: {\n    openzeppelinForwarder: \"0x8cbc8B5d71702032904750A66AEfE8B603eBC538\",\n    openzeppelinForwarderEOA: \"0x119704314Ef304EaAAE4b3c7C9ABd59272A28310\",\n    biconomyForwarder: AddressZero,\n    twFactory: \"0xd24b3de085CFd8c54b94feAD08a7962D343E6DE0\",\n    twRegistry: TWRegistry_address,\n    twBYOCRegistry: AddressZero\n  },\n  [ChainId.BinanceSmartChainMainnet]: {\n    openzeppelinForwarder: \"0x7C4717039B89d5859c4Fbb85EDB19A6E2ce61171\",\n    openzeppelinForwarderEOA: \"0xE8dd2Ff0212F86d3197b4AfDC6dAC6ac47eb10aC\",\n    biconomyForwarder: \"0x86C80a8aa58e0A4fa09A69624c31Ab2a6CAD56b8\",\n    twBYOCRegistry: AddressZero,\n    twFactory: \"0xd24b3de085CFd8c54b94feAD08a7962D343E6DE0\",\n    twRegistry: TWRegistry_address\n  },\n  [ChainId.BinanceSmartChainTestnet]: {\n    openzeppelinForwarder: \"0x44bE9D54B9C8b5e57a3325E8Ec9154640e7c6955\",\n    openzeppelinForwarderEOA: \"0x7e80648EB2071E26937F9D42A513ccf4815fc702\",\n    biconomyForwarder: \"0x61456BF1715C1415730076BB79ae118E806E74d2\",\n    twBYOCRegistry: AddressZero,\n    twFactory: \"0xd24b3de085CFd8c54b94feAD08a7962D343E6DE0\",\n    twRegistry: TWRegistry_address\n  },\n  [ChainId.Hardhat]: {\n    openzeppelinForwarder: AddressZero,\n    openzeppelinForwarderEOA: AddressZero,\n    biconomyForwarder: AddressZero,\n    twFactory: AddressZero,\n    twRegistry: AddressZero,\n    twBYOCRegistry: AddressZero\n  },\n  [ChainId.Localhost]: {\n    openzeppelinForwarder: AddressZero,\n    openzeppelinForwarderEOA: AddressZero,\n    biconomyForwarder: AddressZero,\n    twFactory: AddressZero,\n    twRegistry: AddressZero,\n    twBYOCRegistry: AddressZero\n  }\n};\n\n/**\n * @internal\n */\nfunction getContractAddressByChainId(chainId, contractName) {\n  var _CONTRACT_ADDRESSES$c;\n  // for testing only\n  if (chainId === ChainId.Hardhat || chainId === ChainId.Localhost) {\n    if (contractName === \"twFactory\") {\n      return getProcessEnv(\"factoryAddress\");\n    } else if (contractName === \"twRegistry\") {\n      return getProcessEnv(\"registryAddress\");\n    } else {\n      return AddressZero;\n    }\n  }\n  // real output here\n  return (_CONTRACT_ADDRESSES$c = CONTRACT_ADDRESSES[chainId]) === null || _CONTRACT_ADDRESSES$c === void 0 ? void 0 : _CONTRACT_ADDRESSES$c[contractName];\n}\n\n/**\n * @internal\n */\n\n/**\n * @internal\n */\nconst InterfaceId_IERC721 = /* @__PURE__ */utils.arrayify(\"0x80ac58cd\");\n\n/**\n * @internal\n */\nconst InterfaceId_IERC1155 = /* @__PURE__ */utils.arrayify(\"0xd9b67a26\");\n\n/**\n * @public\n */\nlet EventType = /*#__PURE__*/function (EventType) {\n  EventType[\"Transaction\"] = \"transaction\";\n  EventType[\"Signature\"] = \"signature\";\n  return EventType;\n}({});\nconst THIRDWEB_DEPLOYER = \"0xdd99b75f095d0c4d5112aCe938e4e6ed962fb024\";\nasync function fetchPublishedContractFromPolygon(publisherAddress, contractName) {\n  let version = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"latest\";\n  let storage = arguments.length > 3 ? arguments[3] : undefined;\n  let clientId = arguments.length > 4 ? arguments[4] : undefined;\n  let secretKey = arguments.length > 5 ? arguments[5] : undefined;\n  const polygonChain = getSupportedChains().find(c => c.chainId === 137);\n  const chain = polygonChain || Polygon;\n  const publisher = await resolveAddress(publisherAddress);\n  const contract = new Contract(getContractPublisherAddress(), ContractPublisherAbi, getChainProvider(chain, {\n    clientId,\n    secretKey\n  }));\n  let publishedContract;\n  if (!version || version === \"latest\") {\n    const model = await contract.getPublishedContract(publisher, contractName);\n    publishedContract = PublishedContractSchema.parse({\n      id: model.contractId,\n      timestamp: model.publishTimestamp,\n      metadataUri: model.publishMetadataUri\n    });\n  } else {\n    const allVersions = (await contract.getPublishedContractVersions(publisher, contractName)).map(c => {\n      return PublishedContractSchema.parse({\n        id: c.contractId,\n        timestamp: c.publishTimestamp,\n        metadataUri: c.publishMetadataUri\n      });\n    });\n\n    // get the metadata for each version\n    const versionMetadata = await Promise.all(allVersions.map(async c => {\n      return {\n        name: c.id,\n        publishedTimestamp: c.timestamp,\n        publishedMetadata: await fetchAndCacheDeployMetadata(c.metadataUri, storage)\n      };\n    }));\n    // find the version that matches the version string\n    const versionMatch = versionMetadata.find(metadata => {\n      var _metadata$publishedMe;\n      return ((_metadata$publishedMe = metadata.publishedMetadata.extendedMetadata) === null || _metadata$publishedMe === void 0 ? void 0 : _metadata$publishedMe.version) === version;\n    });\n    invariant(versionMatch, \"Contract version not found\");\n    // match the version back to the contract based on the published timestamp\n    publishedContract = allVersions.find(c => c.timestamp === versionMatch.publishedTimestamp);\n  }\n  if (!publishedContract) {\n    throw new Error(\"No published contract found for \".concat(contractName, \" at version by '\").concat(THIRDWEB_DEPLOYER, \"'\"));\n  }\n  return publishedContract;\n}\n\n/**\n * Generate salt for deployment with Create2\n * Note: Salt component is generated by appending `tw` (thirdweb) to the bytecode\n *\n * @internal\n * @param bytecode: Creation bytecode of the contract to deploy\n */\nfunction getSaltHash(bytecode) {\n  const bytecodePrefixed = bytecode.startsWith(\"0x\") ? bytecode : \"0x\".concat(bytecode);\n  const bytecodeHash = utils.id(bytecodePrefixed);\n  const salt = \"tw.\".concat(bytecodeHash);\n  const saltHash = utils.id(salt);\n  return saltHash;\n}\n\n/**\n *\n * Construct init-bytecode, packed with salthash.\n * This hex data is intended to be sent to the CREATE2 factory address\n *\n * @internal\n * @param bytecode: Creation bytecode of the contract to deploy\n * @param encodedArgs: Abi-encoded constructor params\n */\nfunction getInitBytecodeWithSalt(bytecode, encodedArgs, salt) {\n  const bytecodePrefixed = bytecode.startsWith(\"0x\") ? bytecode : \"0x\".concat(bytecode);\n  const saltHash = salt ? utils.id(salt) : getSaltHash(bytecodePrefixed);\n  const initBytecodeWithSalt = utils.solidityPack([\"bytes32\", \"bytes\", \"bytes\"], [saltHash, bytecodePrefixed, encodedArgs]);\n  return initBytecodeWithSalt;\n}\n\n/**\n * Pre-compute a contract's deployment address for a CREATE2 deployment.\n *\n * @public\n * @param bytecode: Creation bytecode of the contract to deploy\n * @param encodedArgs: Abi-encoded constructor params\n * @param create2FactoryAddress\n */\nfunction computeDeploymentAddress(bytecode, encodedArgs, create2FactoryAddress, salt) {\n  const bytecodePrefixed = bytecode.startsWith(\"0x\") ? bytecode : \"0x\".concat(bytecode);\n  const saltHash = salt ? utils.id(salt) : getSaltHash(bytecodePrefixed);\n\n  // 1. create init bytecode hash with contract's bytecode and encoded args\n  const initBytecode = utils.solidityPack([\"bytes\", \"bytes\"], [bytecodePrefixed, encodedArgs]);\n\n  // 2. abi-encode pack the deployer address, salt, and bytecode hash\n  const deployInfoPacked = utils.solidityPack([\"bytes1\", \"address\", \"bytes32\", \"bytes32\"], [\"0xff\", create2FactoryAddress, saltHash, utils.solidityKeccak256([\"bytes\"], [initBytecode])]);\n\n  // 3. hash the packed deploy info\n  const hashedDeployInfo = utils.solidityKeccak256([\"bytes\"], [deployInfoPacked]);\n\n  // 4. return last 20 bytes (40 characters) of the hash -- this is the predicted address\n  return \"0x\".concat(hashedDeployInfo.slice(26));\n}\n\n/**\n *\n * @param abi\n * @returns\n * @internal\n */\nfunction extractConstructorParamsFromAbi(abi) {\n  const parsedAbi = AbiSchema.parse(abi || []);\n  for (const input of parsedAbi) {\n    if (input.type === \"constructor\") {\n      return input.inputs || [];\n    }\n  }\n  return [];\n}\nconst caches = {\n  deploymentPresets: {}\n};\n\n/**\n * Returns the RoyaltyEngineV1 address for a given chain\n * @param chainId - the chain id\n * @public\n */\nfunction getRoyaltyEngineV1ByChainId(chainId) {\n  return ROYALTY_ENGINE_V1_ADDRESS[chainId] || constants.AddressZero;\n}\nconst ROYALTY_ENGINE_V1_ADDRESS = {\n  [ChainId.Mainnet]: \"0x0385603ab55642cb4dd5de3ae9e306809991804f\",\n  [ChainId.Goerli]: \"0xEF770dFb6D5620977213f55f99bfd781D04BBE15\",\n  [ChainId.BinanceSmartChainMainnet]: \"0xEF770dFb6D5620977213f55f99bfd781D04BBE15\",\n  [ChainId.Polygon]: \"0x28EdFcF0Be7E86b07493466e7631a213bDe8eEF2\",\n  [ChainId.Mumbai]: \"0x0a01E11887f727D1b1Cd81251eeEE9BEE4262D07\",\n  [ChainId.Avalanche]: \"0xEF770dFb6D5620977213f55f99bfd781D04BBE15\",\n  [ChainId.Optimism]: \"0xEF770dFb6D5620977213f55f99bfd781D04BBE15\",\n  [ChainId.Arbitrum]: \"0xEF770dFb6D5620977213f55f99bfd781D04BBE15\"\n};\nasync function computeDeploymentInfo(contractType, provider, storage, create2Factory, contractOptions, clientId, secretKey) {\n  const contractName = contractOptions && contractOptions.contractName;\n  const version = contractOptions && contractOptions.version;\n  let publisherAddress = contractOptions && contractOptions.publisherAddress;\n  let metadata = contractOptions && contractOptions.metadata;\n  invariant(contractName || metadata, \"Require contract name or metadata\");\n  if (contractName && caches.deploymentPresets[contractName]) {\n    return caches.deploymentPresets[contractName];\n  }\n\n  // Different treatment for WETH contract\n  if (contractName === \"WETH9\") {\n    const address = computeDeploymentAddress(bytecode, [], create2Factory);\n    const contractDeployed = await isContractDeployed(address, provider);\n    let initBytecodeWithSalt = \"\";\n    if (!contractDeployed) {\n      initBytecodeWithSalt = getInitBytecodeWithSalt(bytecode, []);\n    }\n    return {\n      name: contractName,\n      type: contractType,\n      transaction: {\n        predictedAddress: address,\n        to: create2Factory,\n        data: initBytecodeWithSalt\n      }\n    };\n  }\n  if (!metadata) {\n    invariant(contractName, \"Require contract name\");\n    if (!publisherAddress) {\n      publisherAddress = THIRDWEB_DEPLOYER;\n    }\n    const publishedContract = await fetchPublishedContractFromPolygon(publisherAddress, contractName, version, storage, clientId, secretKey);\n    metadata = (await fetchAndCacheDeployMetadata(publishedContract.metadataUri, storage)).compilerMetadata;\n  }\n  const encodedArgs = await encodeConstructorParamsForImplementation(metadata, provider, storage, create2Factory, contractOptions === null || contractOptions === void 0 ? void 0 : contractOptions.constructorParams, clientId, secretKey);\n  const address = computeDeploymentAddress(metadata.bytecode, encodedArgs, create2Factory);\n  const contractDeployed = await isContractDeployed(address, provider);\n  let initBytecodeWithSalt = \"\";\n  if (!contractDeployed) {\n    initBytecodeWithSalt = getInitBytecodeWithSalt(metadata.bytecode, encodedArgs);\n  }\n  return {\n    name: contractName,\n    type: contractType,\n    transaction: {\n      predictedAddress: address,\n      to: create2Factory,\n      data: initBytecodeWithSalt\n    },\n    encodedArgs\n  };\n}\n\n/**\n * @internal\n *\n * Determine constructor params required by an implementation contract.\n * Return abi-encoded params.\n */\nasync function encodeConstructorParamsForImplementation(compilerMetadata, provider, storage, create2Factory, constructorParamMap, clientId, secretKey) {\n  const constructorParams = extractConstructorParamsFromAbi(compilerMetadata.abi);\n  const constructorParamTypes = constructorParams.map(p => {\n    if (p.type === \"tuple[]\") {\n      return utils.ParamType.from(p);\n    } else {\n      return p.type;\n    }\n  });\n  const constructorParamValues = await Promise.all(constructorParams.map(async p => {\n    if (constructorParamMap && constructorParamMap[p.name]) {\n      if (constructorParamMap[p.name].type) {\n        invariant(constructorParamMap[p.name].type === p.type, \"Provided type \".concat(constructorParamMap[p.name].type, \" doesn't match the actual type \").concat(p.type, \" from Abi\"));\n      }\n      return constructorParamMap[p.name].value;\n    }\n    if (p.name && p.name.includes(\"nativeTokenWrapper\")) {\n      const chainId = (await provider.getNetwork()).chainId;\n      let nativeTokenWrapperAddress = getNativeTokenByChainId(chainId).wrapped.address;\n      if (nativeTokenWrapperAddress === constants.AddressZero) {\n        const deploymentInfo = await computeDeploymentInfo(\"infra\", provider, storage, create2Factory, {\n          contractName: \"WETH9\"\n        }, clientId, secretKey);\n        if (!caches.deploymentPresets[\"WETH9\"]) {\n          caches.deploymentPresets[\"WETH9\"] = deploymentInfo;\n        }\n        nativeTokenWrapperAddress = deploymentInfo.transaction.predictedAddress;\n      }\n      return nativeTokenWrapperAddress;\n    } else if (p.name && p.name.includes(\"trustedForwarder\")) {\n      if (compilerMetadata.name === \"Pack\") {\n        // EOAForwarder for Pack\n        const deploymentInfo = await computeDeploymentInfo(\"infra\", provider, storage, create2Factory, {\n          contractName: \"ForwarderEOAOnly\"\n        }, clientId, secretKey);\n        if (!caches.deploymentPresets[\"ForwarderEOAOnly\"]) {\n          caches.deploymentPresets[\"ForwarderEOAOnly\"] = deploymentInfo;\n        }\n        return deploymentInfo.transaction.predictedAddress;\n      }\n      const deploymentInfo = await computeDeploymentInfo(\"infra\", provider, storage, create2Factory, {\n        contractName: \"Forwarder\"\n      }, clientId, secretKey);\n      if (!caches.deploymentPresets[\"Forwarder\"]) {\n        caches.deploymentPresets[\"Forwarder\"] = deploymentInfo;\n      }\n      return deploymentInfo.transaction.predictedAddress;\n    } else if (p.name && p.name.includes(\"royaltyEngineAddress\")) {\n      const chainId = (await provider.getNetwork()).chainId;\n      return getRoyaltyEngineV1ByChainId(chainId);\n    } else {\n      throw new Error(\"Can't resolve constructor arguments\");\n    }\n  }));\n  const encodedArgs = utils.defaultAbiCoder.encode(constructorParamTypes, constructorParamValues);\n  return encodedArgs;\n}\n\n/**\n *\n * @internal\n * @param provider\n * @param storage\n * @param create2Factory\n */\nasync function computeEOAForwarderAddress(provider, storage, create2Factory, clientId, secretKey) {\n  if (!create2Factory || create2Factory === \"\") {\n    create2Factory = await getCreate2FactoryAddress(provider);\n  }\n  return (await computeDeploymentInfo(\"infra\", provider, storage, create2Factory, {\n    contractName: \"ForwarderEOAOnly\"\n  }, clientId, secretKey)).transaction.predictedAddress;\n}\n\n/**\n *\n * @internal\n * @param provider\n * @param storage\n * @param create2Factory\n */\nasync function computeForwarderAddress(provider, storage, create2Factory, clientId, secretKey) {\n  if (!create2Factory || create2Factory === \"\") {\n    create2Factory = await getCreate2FactoryAddress(provider);\n  }\n  return (await computeDeploymentInfo(\"infra\", provider, storage, create2Factory, {\n    contractName: \"Forwarder\"\n  }, clientId, secretKey)).transaction.predictedAddress;\n}\n\n/**\n * @internal\n */\nconst ForwardRequest = [{\n  name: \"from\",\n  type: \"address\"\n}, {\n  name: \"to\",\n  type: \"address\"\n}, {\n  name: \"value\",\n  type: \"uint256\"\n}, {\n  name: \"gas\",\n  type: \"uint256\"\n}, {\n  name: \"nonce\",\n  type: \"uint256\"\n}, {\n  name: \"data\",\n  type: \"bytes\"\n}];\nconst ChainAwareForwardRequest = [{\n  name: \"from\",\n  type: \"address\"\n}, {\n  name: \"to\",\n  type: \"address\"\n}, {\n  name: \"value\",\n  type: \"uint256\"\n}, {\n  name: \"gas\",\n  type: \"uint256\"\n}, {\n  name: \"nonce\",\n  type: \"uint256\"\n}, {\n  name: \"data\",\n  type: \"bytes\"\n}, {\n  name: \"chainid\",\n  type: \"uint256\"\n}];\n\n/**\n * @internal\n */\nconst BiconomyForwarderAbi = [{\n  inputs: [{\n    internalType: \"address\",\n    name: \"from\",\n    type: \"address\"\n  }, {\n    internalType: \"uint256\",\n    name: \"batchId\",\n    type: \"uint256\"\n  }],\n  name: \"getNonce\",\n  outputs: [{\n    internalType: \"uint256\",\n    name: \"\",\n    type: \"uint256\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}];\nconst _nonces = {};\nconst _noncesSyncTimestamp = {};\n\n/**\n * @internal\n */\nasync function getAndIncrementNonce(forwarder, forwarderFunction, forwarderArgs) {\n  // address is only used for internal caching :)\n  const address = forwarderArgs.join(\"|\");\n  const timestamp = _noncesSyncTimestamp[address];\n  // if it's within 2 seconds we're optimistically increment the nonce\n  // should we always sync?\n  const shouldSync = Date.now() - timestamp >= 2000;\n  if (!(address in _nonces) || shouldSync) {\n    const nonceResult = await forwarder.functions[forwarderFunction](...forwarderArgs);\n    if (Array.isArray(nonceResult) && nonceResult.length > 0) {\n      _nonces[address] = BigNumber.from(nonceResult[0]);\n    } else {\n      _nonces[address] = BigNumber.from(nonceResult);\n    }\n    _noncesSyncTimestamp[address] = Date.now();\n  }\n  const nonce = _nonces[address];\n  _nonces[address] = BigNumber.from(_nonces[address]).add(1);\n  return nonce;\n}\n\n/**\n * @internal\n */\n\n/**\n * @internal\n */\n\n/**\n * @internal\n */\n\n/**\n * eip712 sign typed data with different wallet handling including ledger live\n * @internal\n */\nasync function signTypedDataInternal(signerInput, domain, types, message) {\n  var _signer, _provider$provider;\n  // Handle ERC4337Signer\n  let signer = signerInput;\n  if (signerInput.originalSigner) {\n    signer = signerInput.originalSigner;\n  }\n  const provider = (_signer = signer) === null || _signer === void 0 ? void 0 : _signer.provider;\n  if (!provider) {\n    throw new Error(\"missing provider\");\n  }\n  const payload = utils._TypedDataEncoder.getPayload(domain, types, message);\n  let signature = \"\";\n  const signerAddress = (await signer.getAddress()).toLowerCase();\n\n  // an indirect way for accessing walletconnect's underlying provider\n  if (provider !== null && provider !== void 0 && (_provider$provider = provider.provider) !== null && _provider$provider !== void 0 && _provider$provider.isWalletConnect) {\n    signature = await provider.send(\"eth_signTypedData\", [(await signer.getAddress()).toLowerCase(), JSON.stringify(payload)]);\n  } else {\n    try {\n      signature = await signer._signTypedData(domain, types, message);\n    } catch (err) {\n      var _err$message;\n      if (err !== null && err !== void 0 && (_err$message = err.message) !== null && _err$message !== void 0 && _err$message.includes(\"eth_signTypedData_v4\")) {\n        signature = await provider.send(\"eth_signTypedData\", [signerAddress, JSON.stringify(payload)]);\n      } else {\n        // magic.link signer only supports this way\n        try {\n          await provider.send(\"eth_signTypedData_v4\", [signerAddress, JSON.stringify(payload)]);\n        } catch (finalErr) {\n          throw finalErr;\n        }\n      }\n    }\n  }\n\n  // fix ledger live where signature result in v = 0, 1. ethers magically fix it in split/join.\n  return {\n    payload,\n    signature: utils.joinSignature(utils.splitSignature(signature))\n  };\n}\nconst NAME_ABI = [{\n  inputs: [],\n  name: \"name\",\n  outputs: [{\n    internalType: \"string\",\n    name: \"\",\n    type: \"string\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}];\nconst DOMAIN_SEPARATOR_ABI = [{\n  constant: true,\n  inputs: [],\n  name: \"DOMAIN_SEPARATOR\",\n  outputs: [{\n    internalType: \"bytes32\",\n    name: \"\",\n    type: \"bytes32\"\n  }],\n  payable: false,\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  inputs: [],\n  name: \"getDomainSeperator\",\n  outputs: [{\n    internalType: \"bytes32\",\n    name: \"\",\n    type: \"bytes32\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}];\nconst NONCES_ABI = [{\n  inputs: [{\n    internalType: \"address\",\n    name: \"owner\",\n    type: \"address\"\n  }],\n  name: \"nonces\",\n  outputs: [{\n    internalType: \"uint256\",\n    name: \"\",\n    type: \"uint256\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  inputs: [{\n    internalType: \"address\",\n    name: \"user\",\n    type: \"address\"\n  }],\n  name: \"getNonce\",\n  outputs: [{\n    internalType: \"uint256\",\n    name: \"nonce\",\n    type: \"uint256\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}];\nasync function getSignerNonce(signer, contractAddress) {\n  const contract = new Contract(contractAddress, NONCES_ABI, signer);\n  try {\n    return await contract.nonces(await signer.getAddress());\n  } catch (err) {\n    return await contract.getNonce(await signer.getAddress());\n  }\n}\nasync function getDomainSeperator(signer, contractAddress) {\n  const contract = new Contract(contractAddress, DOMAIN_SEPARATOR_ABI, signer);\n  try {\n    return await contract.DOMAIN_SEPARATOR();\n  } catch (err) {\n    try {\n      return await contract.getDomainSeperator();\n    } catch (err2) {\n      console.error(\"Error getting domain separator\", err2);\n    }\n  }\n}\nasync function getTokenName(signer, contractAddress) {\n  return new Contract(contractAddress, NAME_ABI, signer).name();\n}\n\n/**\n * Polygon chain has different EIP712 domain separator for USDC, DAI compared to other chains and slightly different than EIP-2612.\n */\nasync function getChainDomainSeperator(signer, domain) {\n  const contractDomainSeparator = await getDomainSeperator(signer, domain.verifyingContract);\n  const polygonDomain = {\n    name: domain.name,\n    version: domain.version,\n    verifyingContract: domain.verifyingContract,\n    salt: utils.hexZeroPad(BigNumber.from(domain.chainId).toHexString(), 32)\n  };\n  if (utils._TypedDataEncoder.hashDomain(polygonDomain) === contractDomainSeparator) {\n    return polygonDomain;\n  }\n  return domain;\n}\n\n/**\n * @internal\n */\nasync function signEIP2612Permit(signer, currencyAddress, owner, spender, value, deadline, nonce) {\n  const domain = await getChainDomainSeperator(signer, {\n    name: await getTokenName(signer, currencyAddress),\n    version: \"1\",\n    chainId: await signer.getChainId(),\n    verifyingContract: currencyAddress\n  });\n  nonce = nonce || (await getSignerNonce(signer, currencyAddress)).toString();\n  deadline = deadline || constants.MaxUint256;\n  const message = {\n    owner,\n    spender,\n    value,\n    nonce,\n    deadline\n  };\n  const types = {\n    Permit: [{\n      name: \"owner\",\n      type: \"address\"\n    }, {\n      name: \"spender\",\n      type: \"address\"\n    }, {\n      name: \"value\",\n      type: \"uint256\"\n    }, {\n      name: \"nonce\",\n      type: \"uint256\"\n    }, {\n      name: \"deadline\",\n      type: \"uint256\"\n    }]\n  };\n  const {\n    signature\n  } = await signTypedDataInternal(signer, domain, types, message);\n  return {\n    message,\n    signature\n  };\n}\nclass TransactionContext {\n  constructor(options) {\n    this.args = options.args;\n    this.overrides = options.overrides || {};\n    this.provider = options.provider;\n    this.signer = options.signer;\n    this.storage = options.storage;\n\n    // Connect provider to signer if it isn't already connected\n    if (!this.signer.provider) {\n      this.signer = this.signer.connect(this.provider);\n    }\n  }\n  get getSigner() {\n    return this.signer;\n  }\n  get getProvider() {\n    return this.provider;\n  }\n  get getStorage() {\n    return this.storage;\n  }\n  getArgs() {\n    return this.args;\n  }\n  getOverrides() {\n    return this.overrides;\n  }\n  getValue() {\n    return this.overrides.value || 0;\n  }\n  setArgs(args) {\n    this.args = args;\n    return this;\n  }\n  setOverrides(overrides) {\n    this.overrides = overrides;\n    return this;\n  }\n  updateOverrides(overrides) {\n    this.overrides = {\n      ...this.overrides,\n      ...overrides\n    };\n    return this;\n  }\n  setValue(value) {\n    this.updateOverrides({\n      value\n    });\n    return this;\n  }\n  setGasLimit(gasLimit) {\n    this.updateOverrides({\n      gasLimit\n    });\n    return this;\n  }\n  setGasPrice(gasPrice) {\n    this.updateOverrides({\n      gasPrice\n    });\n    return this;\n  }\n  setNonce(nonce) {\n    this.updateOverrides({\n      nonce\n    });\n    return this;\n  }\n  setMaxFeePerGas(maxFeePerGas) {\n    this.updateOverrides({\n      maxFeePerGas\n    });\n    return this;\n  }\n  setMaxPriorityFeePerGas(maxPriorityFeePerGas) {\n    this.updateOverrides({\n      maxPriorityFeePerGas\n    });\n    return this;\n  }\n  setType(type) {\n    this.updateOverrides({\n      type\n    });\n    return this;\n  }\n  setAccessList(accessList) {\n    this.updateOverrides({\n      accessList\n    });\n    return this;\n  }\n  setCustomData(customData) {\n    this.updateOverrides({\n      customData\n    });\n    return this;\n  }\n  setCcipReadEnabled(ccipReadEnabled) {\n    this.updateOverrides({\n      ccipReadEnabled\n    });\n    return this;\n  }\n  /**\n   * Set a multiple to multiply the gas limit by\n   *\n   * @example\n   * ```js\n   * // Set the gas limit multiple to 1.2 (increase by 20%)\n   * tx.setGasLimitMultiple(1.2)\n   * ```\n   */\n  setGasLimitMultiple(factor) {\n    // If gasLimit override is set, we can just set it synchronously\n    if (BigNumber.isBigNumber(this.overrides.gasLimit)) {\n      this.overrides.gasLimit = BigNumber.from(Math.floor(BigNumber.from(this.overrides.gasLimit).toNumber() * factor));\n    } else {\n      // Otherwise, set a gas multiple to use later\n      this.gasMultiple = factor;\n    }\n  }\n\n  /**\n   * Estimate the total gas cost of this transaction (in both ether and wei)\n   */\n  async estimateGasCost() {\n    const [gasLimit, gasPrice] = await Promise.all([this.estimateGasLimit(), this.getGasPrice()]);\n    const gasCost = gasLimit.mul(gasPrice);\n    return {\n      ether: utils.formatEther(gasCost),\n      wei: gasCost\n    };\n  }\n\n  /**\n   * Calculates the gas price for transactions (adding a 10% tip buffer)\n   */\n  async getGasPrice() {\n    return getGasPrice(this.provider);\n  }\n\n  /**\n   * Get the address of the transaction signer\n   */\n  async getSignerAddress() {\n    return this.signer.getAddress();\n  }\n\n  /**\n   * Get gas overrides for the transaction\n   */\n  async getGasOverrides() {\n    return getDefaultGasOverrides(this.provider);\n  }\n\n  /**\n   * Calculates the priority fee per gas according (adding a 10% buffer)\n   */\n  getPreferredPriorityFee(defaultPriorityFeePerGas) {\n    const extraTip = defaultPriorityFeePerGas.div(100).mul(10); // + 10%\n    const txGasPrice = defaultPriorityFeePerGas.add(extraTip);\n    return txGasPrice;\n  }\n}\nclass Transaction extends TransactionContext {\n  static fromContractWrapper(options) {\n    const signer = options.contractWrapper.getSigner();\n    if (!signer) {\n      throw new Error(\"Cannot create a transaction without a signer. Please ensure that you have a connected signer.\");\n    }\n    const optionsWithContract = {\n      ...options,\n      contract: options.contractWrapper.writeContract,\n      provider: options.contractWrapper.getProvider(),\n      signer,\n      gasless: options.contractWrapper.options.gasless,\n      storage: options.contractWrapper.storage\n    };\n    return new Transaction(optionsWithContract);\n  }\n  static async fromContractInfo(options) {\n    const storage = options.storage;\n    let contractAbi = options.contractAbi;\n    if (!contractAbi) {\n      try {\n        const metadata = await fetchContractMetadataFromAddress(options.contractAddress, options.provider, storage);\n        contractAbi = metadata.abi;\n      } catch {\n        throw new Error(\"Could resolve contract metadata for address \".concat(options.contractAddress, \". Please pass the contract ABI manually with the 'contractAbi' option.\"));\n      }\n    }\n    const contract = new Contract(options.contractAddress, contractAbi, options.provider);\n    const optionsWithContract = {\n      ...options,\n      storage,\n      contract\n    };\n    return new Transaction(optionsWithContract);\n  }\n  constructor(options) {\n    super({\n      args: options.args,\n      overrides: options.overrides,\n      provider: options.provider,\n      signer: options.signer,\n      storage: options.storage\n    });\n    this.method = options.method;\n    this.gaslessOptions = options.gasless;\n    this.parse = options.parse;\n\n    // Always connect the signer to the contract\n    this.contract = options.contract.connect(this.signer);\n\n    // Create new storage instance if one isn't provided\n    this.storage = options.storage;\n  }\n  getTarget() {\n    return this.contract.address;\n  }\n  getMethod() {\n    return this.method;\n  }\n  getGaslessOptions() {\n    return this.gaslessOptions;\n  }\n  setGaslessOptions(options) {\n    this.gaslessOptions = options;\n    return this;\n  }\n  setParse(parse) {\n    this.parse = parse;\n    return this;\n  }\n\n  /**\n   * Encode the function data for this transaction\n   */\n  encode() {\n    return this.contract.interface.encodeFunctionData(this.method, this.args);\n  }\n\n  /**\n   * Get the signed transaction\n   */\n  async sign() {\n    const populatedTx = await this.populateTransaction();\n    const signedTx = await this.contract.signer.signTransaction(populatedTx);\n    return signedTx;\n  }\n  async populateTransaction() {\n    const gasOverrides = await this.getGasOverrides();\n    const overrides = {\n      ...gasOverrides,\n      ...this.overrides\n    };\n\n    // First, if no gasLimit is passed, call estimate gas ourselves\n    if (!overrides.gasLimit) {\n      overrides.gasLimit = await this.estimateGasLimit();\n    }\n    const tx = await this.contract.populateTransaction[this.method](...this.args, overrides);\n    const populatedTx = await this.contract.signer.populateTransaction(tx);\n    return populatedTx;\n  }\n\n  /**\n   * Simulate the transaction on-chain without executing\n   */\n  async simulate() {\n    if (!this.contract.callStatic[this.method]) {\n      throw this.functionError();\n    }\n    try {\n      return await this.contract.callStatic[this.method](...this.args, ...(this.overrides.value ? [{\n        value: this.overrides.value\n      }] : []));\n    } catch (err) {\n      throw await this.transactionError(err);\n    }\n  }\n\n  /**\n   * Estimate the gas limit of this transaction\n   */\n  async estimateGasLimit() {\n    if (!this.contract.estimateGas[this.method]) {\n      throw this.functionError();\n    }\n    try {\n      const gasEstimate = await this.contract.estimateGas[this.method](...this.args, this.overrides);\n      if (this.gasMultiple) {\n        return BigNumber.from(Math.floor(BigNumber.from(gasEstimate).toNumber() * this.gasMultiple));\n      }\n      return gasEstimate;\n    } catch (err) {\n      // If gas estimation fails, we'll call static to get a better error message\n      await this.simulate();\n\n      // If transaction simulation (static call) doesn't throw, then throw a generic error\n      throw await this.transactionError(err);\n    }\n  }\n\n  /**\n   * Send the transaction without waiting for it to be mined.\n   */\n  async send() {\n    if (!this.contract.functions[this.method]) {\n      throw this.functionError();\n    }\n    if (this.gaslessOptions && (\"openzeppelin\" in this.gaslessOptions || \"biconomy\" in this.gaslessOptions)) {\n      return this.sendGasless();\n    }\n    const gasOverrides = await this.getGasOverrides();\n    const overrides = {\n      ...gasOverrides,\n      ...this.overrides\n    };\n\n    // First, if no gasLimit is passed, call estimate gas ourselves\n    if (!overrides.gasLimit) {\n      overrides.gasLimit = await this.estimateGasLimit();\n      try {\n        // for dynamic contracts, add 30% to the gas limit to account for multiple delegate calls\n        const abi = JSON.parse(this.contract.interface.format(\"json\"));\n        if (isRouterContract(abi)) {\n          overrides.gasLimit = overrides.gasLimit.mul(110).div(100);\n        }\n      } catch (err) {\n        console.warn(\"Error raising gas limit\", err);\n      }\n    }\n\n    // Now there should be no gas estimate errors\n    try {\n      return await this.contract.functions[this.method](...this.args, overrides);\n    } catch (err) {\n      throw await this.transactionError(err);\n    }\n  }\n\n  /**\n   * Send the transaction and wait for it to be mined\n   */\n  async execute() {\n    const tx = await this.send();\n    let receipt;\n    try {\n      receipt = await tx.wait();\n    } catch (err) {\n      // If tx.wait() fails, it just gives us a generic \"transaction failed\"\n      // error. So instead, we need to call static to get an informative error message\n      await this.simulate();\n\n      // If transaction simulation (static call) doesn't throw, then throw with the message that we have\n      throw await this.transactionError(err);\n    }\n    if (this.parse) {\n      return this.parse(receipt);\n    }\n    return {\n      receipt\n    };\n  }\n\n  /**\n   * Execute the transaction with gasless\n   */\n  async sendGasless() {\n    const tx = await this.prepareGasless();\n    const txHash = await defaultGaslessSendFunction(tx, this.signer, this.provider, this.storage, this.gaslessOptions);\n\n    // Need to poll here because ethers.provider.getTransaction lies about the type\n    // It can actually return null, which can happen if we're still in gasless API send queue\n    let sentTx;\n    let iteration = 1;\n    while (!sentTx) {\n      try {\n        sentTx = await this.provider.getTransaction(txHash);\n      } catch (err) {\n        // some providers can throw an error if the tx is very recent\n      }\n      // Exponential (ish) backoff for polling\n      if (!sentTx) {\n        await new Promise(resolve => setTimeout(resolve, Math.min(iteration * 1000, 10000)));\n        iteration++;\n      }\n\n      // Timeout if we still don't have it after a while\n      if (iteration > 20) {\n        throw new Error(\"Unable to retrieve transaction with hash \".concat(txHash));\n      }\n    }\n    return sentTx;\n  }\n\n  /**\n   * @internal\n   * @returns\n   */\n  async prepareGasless() {\n    var _this$overrides;\n    invariant(this.gaslessOptions && (\"openzeppelin\" in this.gaslessOptions || \"biconomy\" in this.gaslessOptions), \"No gasless options set on this transaction!\");\n    const signerAddress = await this.getSignerAddress();\n    const args = [...this.args];\n    if (this.method === \"multicall\" && Array.isArray(this.args[0]) && args[0].length > 0) {\n      args[0] = args[0].map(tx => utils.solidityPack([\"bytes\", \"address\"], [tx, signerAddress]));\n    }\n    invariant(this.signer, \"Cannot execute gasless transaction without valid signer\");\n    const [{\n      chainId\n    }, from] = await Promise.all([this.provider.getNetwork(), this.overrides.from || signerAddress]);\n    const to = this.contract.address;\n    const value = ((_this$overrides = this.overrides) === null || _this$overrides === void 0 ? void 0 : _this$overrides.value) || 0;\n    if (BigNumber.from(value).gt(0)) {\n      throw new Error(\"Cannot send native token value with gasless transaction\");\n    }\n    const data = this.contract.interface.encodeFunctionData(this.method, args);\n    let gas = BigNumber.from(0);\n    try {\n      const gasEstimate = await this.contract.estimateGas[this.method](...args);\n      gas = gasEstimate.mul(2);\n    } catch (e) {\n      // ignore\n    }\n\n    // in some cases WalletConnect doesn't properly give an estimate for how much gas it would actually use.\n    // as a fix, we're setting it to a high arbitrary number (500k) as the gas limit that should cover for most function calls.\n    if (gas.lt(100000)) {\n      gas = BigNumber.from(500000);\n    }\n\n    // check for gas override in callOverrides\n    if (this.overrides.gasLimit && BigNumber.from(this.overrides.gasLimit).gt(gas)) {\n      gas = BigNumber.from(this.overrides.gasLimit);\n    }\n    return {\n      from,\n      to,\n      data,\n      chainId,\n      gasLimit: gas,\n      functionName: this.method,\n      functionArgs: args,\n      callOverrides: this.overrides\n    };\n  }\n  functionError() {\n    return new Error(\"Contract \\\"\".concat(this.contract.address, \"\\\" does not have function \\\"\").concat(this.method, \"\\\"\"));\n  }\n\n  /**\n   * Create a nicely formatted error message with tx metadata and solidity stack trace\n   */\n  async transactionError(error) {\n    var _provider$connection, _error$transaction, _error$receipt;\n    const provider = this.provider;\n\n    // Get metadata for transaction to populate into error\n    const [network, from] = await Promise.all([provider.getNetwork(), this.overrides.from || this.getSignerAddress()]);\n    const to = this.contract.address;\n    const data = this.encode();\n    const value = BigNumber.from(this.overrides.value || 0);\n    const rpcUrl = (_provider$connection = provider.connection) === null || _provider$connection === void 0 ? void 0 : _provider$connection.url;\n\n    // Render function signature with arguments filled in\n    const functionSignature = this.contract.interface.getFunction(this.method);\n    const methodArgs = this.args.map(arg => {\n      if (JSON.stringify(arg).length <= 80) {\n        return JSON.stringify(arg);\n      }\n      return JSON.stringify(arg, undefined, 2);\n    });\n    const joinedArgs = methodArgs.join(\", \").length <= 80 ? methodArgs.join(\", \") : \"\\n\" + methodArgs.map(arg => \"  \" + arg.split(\"\\n\").join(\"\\n  \")).join(\",\\n\") + \"\\n\";\n    const method = \"\".concat(functionSignature.name, \"(\").concat(joinedArgs, \")\");\n    const hash = error.transactionHash || ((_error$transaction = error.transaction) === null || _error$transaction === void 0 ? void 0 : _error$transaction.hash) || ((_error$receipt = error.receipt) === null || _error$receipt === void 0 ? void 0 : _error$receipt.transactionHash);\n\n    // Parse the revert reason from the error\n    const reason = parseRevertReason(error);\n\n    // Get contract sources for stack trace\n    let sources = undefined;\n    let contractName = undefined;\n    try {\n      const metadata = await fetchContractMetadataFromAddress(this.contract.address, this.provider, this.storage);\n      if (metadata.name) {\n        contractName = metadata.name;\n      }\n      if (metadata.metadata.sources) {\n        sources = await fetchSourceFilesFromMetadata(metadata, this.storage);\n      }\n    } catch (err) {\n      // no-op\n    }\n    return new TransactionError({\n      reason,\n      from,\n      to,\n      method,\n      data,\n      network,\n      rpcUrl,\n      value,\n      hash,\n      contractName,\n      sources\n    }, error);\n  }\n}\nclass DeployTransaction extends TransactionContext {\n  constructor(options) {\n    super(options);\n    this.factory = options.factory;\n    this.events = options.events;\n  }\n  encode() {\n    return utils.hexlify(utils.concat([this.factory.bytecode, this.factory.interface.encodeDeploy(this.args)]));\n  }\n  getTarget() {\n    return constants.AddressZero;\n  }\n  getMethod() {\n    return \"deploy\";\n  }\n  async sign() {\n    const populatedTx = await this.populateTransaction();\n    return this.signer.signTransaction(populatedTx);\n  }\n  async simulate() {\n    const populatedTx = await this.populateTransaction();\n    return this.signer.call(populatedTx);\n  }\n  async estimateGasLimit() {\n    try {\n      const gasOverrides = await this.getGasOverrides();\n      const overrides = {\n        ...gasOverrides,\n        ...this.overrides\n      };\n      const populatedTx = this.factory.getDeployTransaction(...this.args, overrides);\n      return this.signer.estimateGas(populatedTx);\n    } catch (err) {\n      // No need to do simulation here, since there can't be revert errors\n      throw await this.deployError(err);\n    }\n  }\n  async send() {\n    try {\n      const populatedTx = await this.populateTransaction();\n      return await this.signer.sendTransaction(populatedTx);\n    } catch (err) {\n      throw await this.deployError(err);\n    }\n  }\n  async execute() {\n    const tx = await this.send();\n    try {\n      await tx.wait();\n    } catch (err) {\n      // If tx.wait() fails, it just gives us a generic \"transaction failed\"\n      // error. So instead, we need to call static to get an informative error message\n      await this.simulate();\n\n      // If transaction simulation (static call) doesn't throw, then throw with the message that we have\n      throw await this.deployError(err);\n    }\n    const contractAddress = utils.getContractAddress({\n      from: tx.from,\n      nonce: tx.nonce\n    });\n\n    // TODO: Remove when we delete events from deploy\n    if (this.events) {\n      this.events.emit(\"contractDeployed\", {\n        status: \"completed\",\n        contractAddress,\n        transactionHash: tx.hash\n      });\n    }\n    return contractAddress;\n  }\n  async populateTransaction() {\n    const gasOverrides = await this.getGasOverrides();\n    const overrides = {\n      ...gasOverrides,\n      ...this.overrides\n    };\n\n    // First, if no gasLimit is passed, call estimate gas ourselves\n    if (!overrides.gasLimit) {\n      overrides.gasLimit = await this.estimateGasLimit();\n    }\n    return this.factory.getDeployTransaction(...this.args, overrides);\n  }\n\n  /**\n   * Create a nicely formatted error message with tx metadata and solidity stack trace\n   */\n  async deployError(error) {\n    var _provider$connection2, _error$transaction2, _error$receipt2;\n    const provider = this.provider;\n\n    // Get metadata for transaction to populate into error\n    const [network, from] = await Promise.all([provider.getNetwork(), this.overrides.from || this.getSignerAddress()]);\n    const data = this.encode();\n    const value = BigNumber.from(this.overrides.value || 0);\n    const rpcUrl = (_provider$connection2 = provider.connection) === null || _provider$connection2 === void 0 ? void 0 : _provider$connection2.url;\n    const methodArgs = this.args.map(arg => {\n      if (JSON.stringify(arg).length <= 80) {\n        return JSON.stringify(arg);\n      }\n      return JSON.stringify(arg, undefined, 2);\n    });\n    const joinedArgs = methodArgs.join(\", \").length <= 80 ? methodArgs.join(\", \") : \"\\n\" + methodArgs.map(arg => \"  \" + arg.split(\"\\n\").join(\"\\n  \")).join(\",\\n\") + \"\\n\";\n    const method = \"deployContract(\".concat(joinedArgs, \")\");\n    const hash = error.transactionHash || ((_error$transaction2 = error.transaction) === null || _error$transaction2 === void 0 ? void 0 : _error$transaction2.hash) || ((_error$receipt2 = error.receipt) === null || _error$receipt2 === void 0 ? void 0 : _error$receipt2.transactionHash);\n\n    // Parse the revert reason from the error\n    const reason = parseRevertReason(error);\n    return new TransactionError({\n      reason,\n      from,\n      method,\n      data,\n      network,\n      rpcUrl,\n      value,\n      hash\n    }, error);\n  }\n}\nasync function defaultGaslessSendFunction(transaction, signer, provider, storage, gaslessOptions) {\n  if (gaslessOptions && \"biconomy\" in gaslessOptions) {\n    return biconomySendFunction(transaction, signer, provider, gaslessOptions);\n  }\n  return defenderSendFunction(transaction, signer, provider, storage, gaslessOptions);\n}\nasync function biconomySendFunction(transaction, signer, provider, gaslessOptions) {\n  const request = await biconomyPrepareRequest(transaction, signer, provider, gaslessOptions);\n  const response = await fetch(\"https://api.biconomy.io/api/v2/meta-tx/native\", request);\n  if (response.ok) {\n    const resp = await response.json();\n    if (!resp.txHash) {\n      throw new Error(\"relay transaction failed: \".concat(resp.log));\n    }\n    return resp.txHash;\n  }\n  throw new Error(\"relay transaction failed with status: \".concat(response.status, \" (\").concat(response.statusText, \")\"));\n}\nasync function defenderSendFunction(transaction, signer, provider, storage, gaslessOptions) {\n  invariant(gaslessOptions && \"openzeppelin\" in gaslessOptions, \"calling openzeppelin gasless transaction without openzeppelin config in the SDK options\");\n  const request = await defenderPrepareRequest(transaction, signer, provider, storage, gaslessOptions);\n  const response = await fetch(gaslessOptions.openzeppelin.relayerUrl, request);\n  if (response.ok) {\n    const resp = await response.json();\n    if (!resp.result) {\n      throw new Error(\"Relay transaction failed: \".concat(resp.message));\n    }\n    const result = JSON.parse(resp.result);\n    return result.txHash;\n  }\n  throw new Error(\"relay transaction failed with status: \".concat(response.status, \" (\").concat(response.statusText, \")\"));\n}\nasync function defenderPrepareRequest(transaction, signer, provider, storage, gaslessOptions) {\n  var _message;\n  invariant(gaslessOptions && \"openzeppelin\" in gaslessOptions, \"calling openzeppelin gasless transaction without openzeppelin config in the SDK options\");\n  invariant(signer, \"provider is not set\");\n  invariant(provider, \"provider is not set\");\n  const forwarderAddress = gaslessOptions.openzeppelin.relayerForwarderAddress || (gaslessOptions.openzeppelin.useEOAForwarder ? CONTRACT_ADDRESSES[transaction.chainId].openzeppelinForwarderEOA || (await computeEOAForwarderAddress(provider, storage)) : CONTRACT_ADDRESSES[transaction.chainId].openzeppelinForwarder || (await computeForwarderAddress(provider, storage)));\n  const forwarder = new Contract(forwarderAddress, ForwarderABI, provider);\n  const nonce = await getAndIncrementNonce(forwarder, \"getNonce\", [transaction.from]);\n  let domain;\n  let types;\n  let message;\n  if (gaslessOptions.experimentalChainlessSupport) {\n    domain = {\n      name: \"GSNv2 Forwarder\",\n      version: \"0.0.1\",\n      verifyingContract: forwarderAddress\n    };\n    types = {\n      ForwardRequest: ChainAwareForwardRequest\n    };\n    message = {\n      from: transaction.from,\n      to: transaction.to,\n      value: BigNumber.from(0).toString(),\n      gas: BigNumber.from(transaction.gasLimit).toString(),\n      nonce: BigNumber.from(nonce).toString(),\n      data: transaction.data,\n      chainid: BigNumber.from(transaction.chainId).toString()\n    };\n  } else {\n    domain = {\n      name: gaslessOptions.openzeppelin.domainName,\n      version: gaslessOptions.openzeppelin.domainVersion,\n      chainId: transaction.chainId,\n      verifyingContract: forwarderAddress\n    };\n    types = {\n      ForwardRequest\n    };\n    message = {\n      from: transaction.from,\n      to: transaction.to,\n      value: BigNumber.from(0).toString(),\n      gas: BigNumber.from(transaction.gasLimit).toString(),\n      nonce: BigNumber.from(nonce).toString(),\n      data: transaction.data\n    };\n  }\n  let signature;\n\n  // if the executing function is \"approve\" and matches with erc20 approve signature\n  // and if the token supports permit, then we use permit for gasless instead of approve.\n  if (transaction.functionName === \"approve\" && transaction.functionArgs.length === 2) {\n    const spender = transaction.functionArgs[0];\n    const amount = transaction.functionArgs[1];\n    // TODO: support DAI permit by signDAIPermit\n    const {\n      message: permit,\n      signature: sig\n    } = await signEIP2612Permit(signer, transaction.to, transaction.from, spender, amount);\n    const {\n      r,\n      s,\n      v\n    } = utils.splitSignature(sig);\n    message = {\n      to: transaction.to,\n      owner: permit.owner,\n      spender: permit.spender,\n      value: BigNumber.from(permit.value).toString(),\n      nonce: BigNumber.from(permit.nonce).toString(),\n      deadline: BigNumber.from(permit.deadline).toString(),\n      r,\n      s,\n      v\n    };\n    signature = sig;\n  } else {\n    const {\n      signature: sig\n    } = await signTypedDataInternal(signer, domain, types, message);\n    signature = sig;\n  }\n  let messageType = \"forward\";\n\n  // if has owner property then it's permit :)\n  if ((_message = message) !== null && _message !== void 0 && _message.owner) {\n    messageType = \"permit\";\n  }\n  return {\n    method: \"POST\",\n    body: JSON.stringify({\n      request: message,\n      signature,\n      forwarderAddress,\n      type: messageType\n    })\n  };\n}\nasync function prepareGaslessRequest(tx) {\n  const gaslessTx = await tx.prepareGasless();\n  const gaslessOptions = tx.getGaslessOptions();\n  if (gaslessOptions && \"biconomy\" in gaslessOptions) {\n    const request = await biconomyPrepareRequest(gaslessTx, tx.getSigner, tx.getProvider, gaslessOptions);\n    return {\n      url: \"https://api.biconomy.io/api/v2/meta-tx/native\",\n      ...request\n    };\n  } else {\n    invariant(gaslessOptions && \"openzeppelin\" in gaslessOptions, \"calling openzeppelin gasless transaction without openzeppelin config in the SDK options\");\n    const request = await defenderPrepareRequest(gaslessTx, tx.getSigner, tx.getProvider, tx.getStorage, gaslessOptions);\n    return {\n      url: gaslessOptions.openzeppelin.relayerUrl,\n      ...request\n    };\n  }\n}\nasync function biconomyPrepareRequest(transaction, signer, provider, gaslessOptions) {\n  var _gaslessOptions$bicon;\n  invariant(gaslessOptions && \"biconomy\" in gaslessOptions, \"calling biconomySendFunction without biconomy\");\n  invariant(signer && provider, \"signer and provider must be set\");\n  const forwarder = new Contract(getContractAddressByChainId(transaction.chainId, \"biconomyForwarder\"), BiconomyForwarderAbi, provider);\n  const batchId = 0;\n  const batchNonce = await getAndIncrementNonce(forwarder, \"getNonce\", [transaction.from, batchId]);\n  const request = {\n    from: transaction.from,\n    to: transaction.to,\n    token: constants.AddressZero,\n    txGas: transaction.gasLimit.toNumber(),\n    tokenGasPrice: \"0\",\n    batchId,\n    batchNonce: batchNonce.toNumber(),\n    deadline: Math.floor(Date.now() / 1000 + (gaslessOptions && \"biconomy\" in gaslessOptions && ((_gaslessOptions$bicon = gaslessOptions.biconomy) === null || _gaslessOptions$bicon === void 0 ? void 0 : _gaslessOptions$bicon.deadlineSeconds) || 3600)),\n    data: transaction.data\n  };\n  const hashToSign = utils.arrayify(utils.solidityKeccak256([\"address\", \"address\", \"address\", \"uint256\", \"uint256\", \"uint256\", \"uint256\", \"uint256\", \"bytes32\"], [request.from, request.to, request.token, request.txGas, request.tokenGasPrice, request.batchId, request.batchNonce, request.deadline, utils.keccak256(request.data)]));\n  const signature = await signer.signMessage(hashToSign);\n  return {\n    method: \"POST\",\n    body: JSON.stringify({\n      from: transaction.from,\n      apiId: gaslessOptions.biconomy.apiId,\n      params: [request, signature],\n      to: transaction.to,\n      gasLimit: transaction.gasLimit.toHexString()\n    }),\n    headers: {\n      \"x-api-key\": gaslessOptions.biconomy.apiKey,\n      \"Content-Type\": \"application/json;charset=utf-8\"\n    }\n  };\n}\n\n/**\n * @internal\n */\n\n/**\n * Handles metadata for a Contract\n * @remarks Read and update metadata for this contract\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const metadata = await contract.metadata.get();\n * await contract.metadata.set({\n *   name: \"My Contract\",\n *   description: \"My contract description\"\n * })\n * ```\n * @public\n */\nclass ContractMetadata {\n  constructor(contractWrapper, schema, storage) {\n    _defineProperty(this, \"featureName\", FEATURE_METADATA.name);\n    /**\n     * Set the metadata of this contract\n     * @remarks OVERWRITE the metadata of a contract\n     * @example\n     * ```javascript\n     * await contract.metadata.set({\n     *   name: \"My Contract\",\n     *   description: \"My contract description\"\n     * })\n     * ```\n     * @public\n     * @param metadata - the metadata to set\n     * @twfeature ContractMetadata\n     */\n    _defineProperty(this, \"set\", /* @__PURE__ */buildTransactionFunction(async metadata => {\n      const uri = await this._parseAndUploadMetadata(metadata);\n      const wrapper = this.contractWrapper;\n      if (this.supportsContractMetadata(wrapper)) {\n        return Transaction.fromContractWrapper({\n          contractWrapper: this.contractWrapper,\n          method: \"setContractURI\",\n          args: [uri],\n          parse: receipt => {\n            return {\n              receipt,\n              data: this.get\n            };\n          }\n        });\n      } else {\n        throw new ExtensionNotImplementedError(FEATURE_METADATA);\n      }\n    }));\n    /**\n     * Update the metadata of a contract\n     * @remarks Update the metadata of a contract\n     * @example\n     * ```javascript\n     * await contract.metadata.update({\n     *   description: \"My new contract description\"\n     * })\n     * ```\n     * @public\n     * @param metadata - the metadata to update\n     * @twfeature ContractMetadata\n     * */\n    _defineProperty(this, \"update\", /* @__PURE__ */buildTransactionFunction(async metadata => {\n      return await this.set.prepare({\n        ...(await this.get()),\n        ...metadata\n      });\n    }));\n    this.contractWrapper = contractWrapper;\n    this.schema = schema;\n    this.storage = storage;\n  }\n  /**\n   * @internal\n   */\n  parseOutputMetadata(metadata) {\n    return this.schema.output.parseAsync(metadata);\n  }\n\n  /**\n   * @internal\n   */\n  parseInputMetadata(metadata) {\n    return this.schema.input.parseAsync(metadata);\n  }\n  /**\n   * Get the metadata of this contract\n   * @remarks Get the metadata of a contract\n   * @example\n   * ```javascript\n   * const metadata = await contract.metadata.get();\n   * console.log(metadata);\n   * ```\n   * @public\n   * @returns the metadata of the given contract\n   * @twfeature ContractMetadata\n   */\n  async get() {\n    let data;\n    if (this.supportsContractMetadata(this.contractWrapper)) {\n      const uri = await this.contractWrapper.read(\"contractURI\", []);\n      if (uri && uri.includes(\"://\")) {\n        data = await this.storage.downloadJSON(uri);\n      }\n    }\n    if (!data) {\n      try {\n        var _publishedMetadata, _publishedMetadata2;\n        // try fetching metadata from bytecode and / or contract itself\n        let contractName;\n        try {\n          if (hasFunction(\"name\", this.contractWrapper)) {\n            contractName = await this.contractWrapper.read(\"name\", []);\n          }\n        } catch (err) {\n          // no-op\n        }\n        let contractSymbol;\n        try {\n          if (hasFunction(\"symbol\", this.contractWrapper)) {\n            contractSymbol = await this.contractWrapper.read(\"symbol\", []);\n          }\n        } catch (err) {\n          // no-op\n        }\n        let publishedMetadata;\n        try {\n          publishedMetadata = await fetchContractMetadataFromAddress(this.contractWrapper.address, this.contractWrapper.getProvider(), this.storage, this.contractWrapper.options);\n        } catch (err) {}\n        data = {\n          name: contractName || ((_publishedMetadata = publishedMetadata) === null || _publishedMetadata === void 0 ? void 0 : _publishedMetadata.name),\n          symbol: contractSymbol,\n          description: (_publishedMetadata2 = publishedMetadata) === null || _publishedMetadata2 === void 0 ? void 0 : _publishedMetadata2.info.title\n        };\n      } catch (e) {\n        throw new Error(\"Could not fetch contract metadata\");\n      }\n    }\n    return this.parseOutputMetadata(data);\n  }\n  /**\n   *\n   * @internal\n   * @param metadata - the metadata to set\n   * @returns\n   */\n  async _parseAndUploadMetadata(metadata) {\n    const parsedMetadata = await this.parseInputMetadata(metadata);\n    return this.storage.upload(parsedMetadata);\n  }\n  supportsContractMetadata(contractWrapper) {\n    return detectContractFeature(contractWrapper, \"ContractMetadata\");\n  }\n}\n\n/**\n *\n * @internal\n */\nconst roleMap = {\n  admin: \"\",\n  transfer: \"TRANSFER_ROLE\",\n  minter: \"MINTER_ROLE\",\n  pauser: \"PAUSER_ROLE\",\n  lister: \"LISTER_ROLE\",\n  asset: \"ASSET_ROLE\",\n  unwrap: \"UNWRAP_ROLE\",\n  factory: \"FACTORY_ROLE\",\n  signer: \"SIGNER_ROLE\"\n};\n\n/**\n * @public\n */\n\n/**\n * @public\n */\nconst ALL_ROLES = /* @__PURE__ */Object.keys(roleMap);\n\n/**\n * @internal\n */\nfunction getRoleHash(role) {\n  if (role === \"admin\") {\n    return utils.hexZeroPad([0], 32);\n  }\n  return utils.id(roleMap[role]);\n}\n\n/**\n * Handle contract permissions\n * @remarks Configure roles and permissions for a contract, to restrict certain actions.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const rolesAndMembers = await contract.roles.getAll();\n * await contract.roles.grantRole(\"admin\", \"0x...\");\n * ```\n * @public\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars -- TO BE REMOVED IN V4\nclass ContractRoles {\n  /**\n   * @internal\n   * @remarks This is used for typing inside react hooks which is why it has to be public.\n   */\n\n  constructor(contractWrapper, _roles) {\n    _defineProperty(this, \"featureName\", FEATURE_PERMISSIONS.name);\n    /**\n     * Overwrite the list of members for specific roles\n     *\n     * @remarks Every role in the list will be overwritten with the new list of addresses provided with them.\n     * If you want to add or remove addresses for a single address use {@link ContractRoles.grant} and {@link ContractRoles.revoke} respectively instead.\n     * @param rolesWithAddresses - A record of {@link Role}s to lists of addresses that should be members of the given role.\n     * @throws If you are requesting a role that does not exist on the contract this will throw an error.\n     * @example Say you want to overwrite the list of addresses that are members of the minter role.\n     * ```javascript\n     * const minterAddresses = await contract.roles.get(\"minter\");\n     * await contract.roles.setAll({\n     *  minter: []\n     * });\n     * console.log(await contract.roles.get(\"minter\")); // No matter what members had the role before, the new list will be set to []\n     * ```\n     * @public\n     * @twfeature Permissions\n     *\n     * */\n    _defineProperty(this, \"setAll\", /* @__PURE__ */buildTransactionFunction(async rolesWithAddresses => {\n      const contractEncoder = new ContractEncoder(this.contractWrapper);\n      const roles = Object.keys(rolesWithAddresses);\n      invariant(roles.length, \"you must provide at least one role to set\");\n      invariant(roles.every(role => this.roles.includes(role)), \"this contract does not support the given role\");\n      const currentRoles = await this.getAll();\n      const encoded = [];\n      // add / remove admin role at the end so we don't revoke admin then grant\n      const sortedRoles = roles.sort(role => role === \"admin\" ? 1 : -1);\n      for (let i = 0; i < sortedRoles.length; i++) {\n        var _rolesWithAddresses$r, _currentRoles$role;\n        const role = sortedRoles[i];\n        const addresses = await Promise.all(((_rolesWithAddresses$r = rolesWithAddresses[role]) === null || _rolesWithAddresses$r === void 0 ? void 0 : _rolesWithAddresses$r.map(async addressOrEns => await resolveAddress(addressOrEns))) || []);\n        const currentAddresses = await Promise.all(((_currentRoles$role = currentRoles[role]) === null || _currentRoles$role === void 0 ? void 0 : _currentRoles$role.map(async addressOrEns => await resolveAddress(addressOrEns))) || []);\n        const toAdd = addresses.filter(address => !currentAddresses.includes(address));\n        const toRemove = currentAddresses.filter(address => !addresses.includes(address));\n        if (toAdd.length) {\n          toAdd.forEach(address => {\n            encoded.push(contractEncoder.encode(\"grantRole\", [getRoleHash(role), address]));\n          });\n        }\n        if (toRemove.length) {\n          for (let j = 0; j < toRemove.length; j++) {\n            const address = toRemove[j];\n            const revokeFunctionName = await this.getRevokeRoleFunctionName(address);\n            encoded.push(contractEncoder.encode(revokeFunctionName, [getRoleHash(role), address]));\n          }\n        }\n      }\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"multicall\",\n        args: [encoded]\n      });\n    }));\n    /** **************************\n     * WRITE FUNCTIONS\n     ****************************/\n    /**\n     * Grant a role to a specific address\n     *\n     * @remarks Make sure you are sure you want to grant the role to the address.\n     *\n     * @example\n     * ```javascript\n     * await contract.roles.grant(\"minter\", \"{{wallet_address}}\");\n     * ```\n     *\n     * @param role - The {@link Role} to grant to the address\n     * @param address - The address to grant the role to\n     * @returns The transaction receipt\n     * @throws If you are trying to grant does not exist on the contract this will throw an error.\n     *\n     * @public\n     * @twfeature Permissions\n     */\n    _defineProperty(this, \"grant\", /* @__PURE__ */buildTransactionFunction(async (role, address) => {\n      invariant(this.roles.includes(role), \"this contract does not support the \\\"\".concat(role, \"\\\" role\"));\n      const resolvedAddress = await resolveAddress(address);\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"grantRole\",\n        args: [getRoleHash(role), resolvedAddress]\n      });\n    }));\n    /**\n     * Revoke a role from a specific address\n     *\n     * @remarks\n     *\n     * -- Caution --\n     *\n     * This will let you remove yourself from the role, too.\n     * If you remove yourself from the admin role, you will no longer be able to administer the contract.\n     * There is no way to recover from this.\n     *\n     * @example\n     * ```javascript\n     * await contract.roles.revoke(\"minter\", \"{{wallet_address}}\");\n     * ```\n     *\n     * @param role - The {@link Role} to revoke\n     * @param address - The address to revoke the role from\n     * @returns The transaction receipt\n     * @throws If you are trying to revoke does not exist on the module this will throw an error.\n     *\n     * @public\n     * @twfeature Permissions\n     */\n    _defineProperty(this, \"revoke\", /* @__PURE__ */buildTransactionFunction(async (role, address) => {\n      invariant(this.roles.includes(role), \"this contract does not support the \\\"\".concat(role, \"\\\" role\"));\n      const resolvedAddress = await resolveAddress(address);\n      const revokeFunctionName = await this.getRevokeRoleFunctionName(resolvedAddress);\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: revokeFunctionName,\n        args: [getRoleHash(role), resolvedAddress]\n      });\n    }));\n    this.contractWrapper = contractWrapper;\n    this.roles = _roles;\n  }\n\n  /** **************************\n   * READ FUNCTIONS\n   ****************************/\n\n  /**\n   * Get all members of all roles\n   * @remarks See {@link ContractRoles.get} to get a list of addresses that are members of a specific role.\n   * @example\n   * ```javascript\n   * const rolesAndMembers = await contract.roles.getAll();\n   * ```\n   * @returns A record of {@link Role}s to lists of addresses that are members of the given role.\n   * @throws If the contract does not support roles this will throw an error.\n   *\n   * @public\n   * @twfeature PermissionsEnumerable\n   */\n  async getAll() {\n    invariant(this.roles.length, \"this contract has no support for roles\");\n    const roles = {};\n    for (const role of this.roles) {\n      roles[role] = await this.get(role);\n    }\n    return roles;\n  }\n\n  /**\n   * Get all members of a specific role\n   * @remarks See {@link ContractRoles.getAll} to get get a list of addresses for all supported roles on the contract.\n   * @param role - The Role to to get a memberlist for.\n   * @returns The list of addresses that are members of the specific role.\n   * @throws If you are requesting a role that does not exist on the contract this will throw an error.\n   *\n   * @example Say you want to get the list of addresses that are members of the minter role.\n   * ```javascript\n   * const minterAddresses = await contract.roles.get(\"minter\");\n   * ```\n   *\n   * @public\n   * @twfeature Permissions\n   */\n  async get(role) {\n    invariant(this.roles.includes(role), \"this contract does not support the \\\"\".concat(role, \"\\\" role\"));\n    const wrapper = this.contractWrapper;\n    if (hasFunction(\"getRoleMemberCount\", wrapper) && hasFunction(\"getRoleMember\", wrapper)) {\n      const roleHash = getRoleHash(role);\n      const count = (await wrapper.read(\"getRoleMemberCount\", [roleHash])).toNumber();\n      return await Promise.all(Array.from(Array(count).keys()).map(i => wrapper.read(\"getRoleMember\", [roleHash, i])));\n    }\n    throw new Error(\"Contract does not support enumerating roles. Please implement IPermissionsEnumerable to unlock this functionality.\");\n  }\n  /**\n   * Throws an error if an address is missing the roles specified.\n   *\n   * @param roles - The roles to check\n   * @param address - The address to check\n   *\n   * @internal\n   */\n  async verify(roles, address) {\n    await Promise.all(roles.map(async role => {\n      const members = await this.get(role);\n      const resolvedAddress = await resolveAddress(address);\n      if (!members.map(a => a.toLowerCase()).includes(resolvedAddress.toLowerCase())) {\n        throw new MissingRoleError(resolvedAddress, role);\n      }\n    }));\n  }\n  /** **************************\n   * PRIVATE FUNCTIONS\n   ****************************/\n\n  async getRevokeRoleFunctionName(address) {\n    const resolvedAddress = await resolveAddress(address);\n    const signerAddress = await this.contractWrapper.getSignerAddress();\n    if (signerAddress.toLowerCase() === resolvedAddress.toLowerCase()) {\n      return \"renounceRole\";\n    }\n    return \"revokeRole\";\n  }\n}\n\n/**\n * Handle contract royalties\n * @remarks Configure royalties for an entire contract or a particular token.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const royaltyInfo = await contract.royalties.getDefaultRoyaltyInfo();\n * await contract.roles.setTokenRoyaltyInfo(tokenId, {\n *   seller_fee_basis_points: 100, // 1% royalty fee\n *   fee_recipient: \"0x...\", // the fee recipient\n * });\n * ```\n * @public\n */\nclass ContractRoyalty {\n  constructor(contractWrapper, metadata) {\n    _defineProperty(this, \"featureName\", FEATURE_ROYALTY.name);\n    /**\n     * Set the royalty recipient and fee\n     * @param royaltyData - the royalty recipient and fee\n     *  @example\n     * ```javascript\n     * await contract.roles.setDefaultRoyaltyInfo({\n     *   seller_fee_basis_points: 100, // 1% royalty fee\n     *   fee_recipient: \"0x...\", // the fee recipient\n     * });\n     * ```\n     * @public\n     * @twfeature Royalty\n     */\n    _defineProperty(this, \"setDefaultRoyaltyInfo\", /* @__PURE__ */buildTransactionFunction(async royaltyData => {\n      // read the metadata from the contract\n      const oldMetadata = await this.metadata.get();\n\n      // update the metadata with the new royalty data\n      // if one of the keys is \"undefined\" it will be ignored (which is the desired behavior)\n      const mergedMetadata = await this.metadata.parseInputMetadata({\n        ...oldMetadata,\n        ...royaltyData\n      });\n\n      // why not use this.metadata.set()? - because that would end up sending it's own separate transaction to `setContractURI`\n      // but we want to send both the `setRoyaltyInfo` and `setContractURI` in one transaction!\n      const contractURI = await this.metadata._parseAndUploadMetadata(mergedMetadata);\n      if (hasFunction(\"setContractURI\", this.contractWrapper)) {\n        const contractEncoder = new ContractEncoder(this.contractWrapper);\n        // encode both the functions we want to send\n        const encoded = [contractEncoder.encode(\"setDefaultRoyaltyInfo\", [mergedMetadata.fee_recipient, mergedMetadata.seller_fee_basis_points]), contractEncoder.encode(\"setContractURI\", [contractURI])];\n        // actually send the transaction and return the receipt + a way to get the new royalty info\n\n        return Transaction.fromContractWrapper({\n          contractWrapper: this.contractWrapper,\n          method: \"multicall\",\n          args: [encoded],\n          parse: receipt => ({\n            receipt,\n            data: () => this.getDefaultRoyaltyInfo()\n          })\n        });\n      } else {\n        throw new Error(\"Updating royalties requires implementing ContractMetadata in your contract to support marketplaces like OpenSea.\");\n      }\n    }));\n    /**\n     * Set the royalty recipient and fee for a particular token\n     * @param tokenId - the token id\n     * @param royaltyData - the royalty recipient and fee\n     * @example\n     * ```javascript\n     * const tokenId = 0;\n     * await contract.roles.setTokenRoyaltyInfo(tokenId, {\n     *   seller_fee_basis_points: 100, // 1% royalty fee\n     *   fee_recipient: \"0x...\", // the fee recipient\n     * });\n     * ```\n     * @public\n     * @twfeature Royalty\n     */\n    _defineProperty(this, \"setTokenRoyaltyInfo\", /* @__PURE__ */buildTransactionFunction(async (tokenId, royaltyData) => {\n      const parsedRoyaltyData = CommonRoyaltySchema.parse(royaltyData);\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"setRoyaltyInfoForToken\",\n        args: [tokenId, parsedRoyaltyData.fee_recipient, parsedRoyaltyData.seller_fee_basis_points],\n        parse: receipt => ({\n          receipt,\n          data: () => this.getDefaultRoyaltyInfo()\n        })\n      });\n    }));\n    this.contractWrapper = contractWrapper;\n    this.metadata = metadata;\n  }\n\n  /**\n   * Get the royalty recipient and fee\n   * @returns - The royalty recipient and BPS\n   * @example\n   * ```javascript\n   * const royaltyInfo = await contract.royalties.getDefaultRoyaltyInfo();\n   * console.log(royaltyInfo.fee_recipient);\n   * console.log(royaltyInfo.seller_fee_basis_points);\n   * ```\n   * @public\n   * @twfeature Royalty\n   */\n  async getDefaultRoyaltyInfo() {\n    const [royaltyRecipient, royaltyBps] = await this.contractWrapper.read(\"getDefaultRoyaltyInfo\", []);\n    // parse it on the way out to make sure we default things if they are not set\n    return CommonRoyaltySchema.parseAsync({\n      fee_recipient: royaltyRecipient,\n      seller_fee_basis_points: royaltyBps\n    });\n  }\n\n  /**\n   * Get the royalty recipient and fee of a particular token\n   * @returns - The royalty recipient and BPS\n   * @example\n   * ```javascript\n   * const royaltyInfo = await contract.royalties.getDefaultRoyaltyInfo();\n   * console.log(royaltyInfo.fee_recipient);\n   * console.log(royaltyInfo.seller_fee_basis_points);\n   * ```\n   * @public\n   * @twfeature Royalty\n   */\n  async getTokenRoyaltyInfo(tokenId) {\n    const [royaltyRecipient, royaltyBps] = await this.contractWrapper.read(\"getRoyaltyInfoForToken\", [tokenId]);\n    return CommonRoyaltySchema.parseAsync({\n      fee_recipient: royaltyRecipient,\n      seller_fee_basis_points: royaltyBps\n    });\n  }\n}\n\n/**\n * Handle primary sales recipients\n * @remarks Configure primary sale recipients for an entire contract.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const salesRecipient = await contract.sales.getRecipient();\n * await contract.sales.setRecipient(recipientWalletAddress);\n * ```\n * @public\n */\nclass ContractPrimarySale {\n  constructor(contractWrapper) {\n    _defineProperty(this, \"featureName\", FEATURE_PRIMARY_SALE.name);\n    /**\n     * Set the primary sale recipient\n     * @param recipient - the wallet address\n     * @example\n     * ```javascript\n     * await contract.sales.setRecipient(recipientWalletAddress);\n     * ```\n     * @public\n     * @twfeature PrimarySale\n     */\n    _defineProperty(this, \"setRecipient\", /* @__PURE__ */buildTransactionFunction(async recipient => {\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"setPrimarySaleRecipient\",\n        args: [recipient]\n      });\n    }));\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Get the primary sale recipient\n   * @returns the wallet address.\n   * @example\n   * ```javascript\n   * const salesRecipient = await contract.sales.getRecipient();\n   * ```\n   * @public\n   * @twfeature PrimarySale\n   */\n  async getRecipient() {\n    const result = await this.contractWrapper.read(\"primarySaleRecipient\", []);\n    return result;\n  }\n}\nconst FALLBACK_METADATA = {\n  name: \"Failed to load NFT metadata\"\n};\n\n/**\n * fetches the token metadata\n * @param tokenId - the id (to get it back in the output)\n * @param tokenUri - the uri to fetch\n * @param storage - which storage to fetch from\n *\n * @internal\n */\nasync function fetchTokenMetadata(tokenId, tokenUri, storage) {\n  // check for base64 encoded JSON\n  if (tokenUri.startsWith(\"data:application/json;base64\") && typeof Buffer !== \"undefined\") {\n    const base64 = tokenUri.split(\",\")[1];\n    const jsonMetadata = JSON.parse(Buffer.from(base64, \"base64\").toString(\"utf-8\"));\n    return CommonNFTOutput.parse({\n      ...jsonMetadata,\n      id: BigNumber.from(tokenId).toString(),\n      uri: tokenUri\n    });\n  }\n  // handle dynamic id URIs (2 possible formats)\n  const parsedUri = tokenUri.replace(\"{id}\", utils.hexZeroPad(BigNumber.from(tokenId).toHexString(), 32).slice(2));\n  let jsonMetadata;\n  try {\n    jsonMetadata = await storage.downloadJSON(parsedUri);\n  } catch (err) {\n    const unparsedTokenIdUri = tokenUri.replace(\"{id}\", BigNumber.from(tokenId).toString());\n    try {\n      jsonMetadata = await storage.downloadJSON(unparsedTokenIdUri);\n    } catch (e) {\n      console.warn(\"failed to get token metadata: \".concat(JSON.stringify({\n        tokenId: tokenId.toString(),\n        tokenUri\n      }), \" -- falling back to default metadata\"));\n      jsonMetadata = FALLBACK_METADATA;\n    }\n  }\n  return CommonNFTOutput.parse({\n    ...jsonMetadata,\n    id: BigNumber.from(tokenId).toString(),\n    uri: tokenUri\n  });\n}\n\n// Used for marketplace to fetch NFT metadata from contract address + tokenId\n/**\n * @internal\n * @param contractAddress\n * @param provider\n * @param tokenId\n * @param storage\n */\nasync function fetchTokenMetadataForContract(contractAddress, provider, tokenId, storage) {\n  let uri;\n  const erc165 = new Contract(contractAddress, ERC165Abi, provider);\n  const [isERC721, isERC1155] = await Promise.all([erc165.supportsInterface(InterfaceId_IERC721), erc165.supportsInterface(InterfaceId_IERC1155)]);\n  if (isERC721) {\n    const erc721 = new Contract(contractAddress, IERC721MetadataAbi, provider);\n    uri = await erc721.tokenURI(tokenId);\n  } else if (isERC1155) {\n    const erc1155 = new Contract(contractAddress, Erc1155MetadataAbi, provider);\n    uri = await erc1155.uri(tokenId);\n  } else {\n    throw Error(\"Contract must implement ERC 1155 or ERC 721.\");\n  }\n  if (!uri) {\n    // no uri found, return fallback metadata\n    return CommonNFTOutput.parse({\n      ...FALLBACK_METADATA,\n      id: BigNumber.from(tokenId).toString(),\n      uri: \"\"\n    });\n  }\n  return fetchTokenMetadata(tokenId, uri, storage);\n}\n\n/**\n * @internal\n * @param metadata\n * @param storage\n */\nasync function uploadOrExtractURI(metadata, storage) {\n  if (typeof metadata === \"string\") {\n    return metadata;\n  } else {\n    return await storage.upload(CommonNFTInput.parse(metadata));\n  }\n}\n\n/**\n * @internal\n * @param metadatas\n * @param storage\n * @param startNumber\n * @param contractAddress\n * @param signerAddress\n * @param options\n */\nasync function uploadOrExtractURIs(metadatas, storage, startNumber, options) {\n  if (isUriList(metadatas)) {\n    return metadatas;\n  } else if (isMetadataList(metadatas)) {\n    const uris = await storage.uploadBatch(metadatas.map(m => CommonNFTInput.parse(m)), {\n      rewriteFileNames: {\n        fileStartNumber: startNumber || 0\n      },\n      onProgress: options === null || options === void 0 ? void 0 : options.onProgress\n    });\n    return uris;\n  } else {\n    throw new Error(\"NFT metadatas must all be of the same type (all URI or all NFTMetadataInput)\");\n  }\n}\nfunction getBaseUriFromBatch(uris) {\n  const baseUri = uris[0].substring(0, uris[0].lastIndexOf(\"/\"));\n  for (let i = 0; i < uris.length; i++) {\n    const uri = uris[i].substring(0, uris[i].lastIndexOf(\"/\"));\n    if (baseUri !== uri) {\n      throw new Error(\"Can only create batches with the same base URI for every entry in the batch. Expected '\".concat(baseUri, \"' but got '\").concat(uri, \"'\"));\n    }\n  }\n\n  // Ensure that baseUri ends with trailing slash\n  return baseUri.replace(/\\/$/, \"\") + \"/\";\n}\nfunction isUriList(metadatas) {\n  return metadatas.find(m => typeof m !== \"string\") === undefined;\n}\nfunction isMetadataList(metadatas) {\n  return metadatas.find(m => typeof m !== \"object\") === undefined;\n}\n\n/**\n * Handles delayed reveal logic\n * @public\n */\nclass DelayedReveal {\n  constructor(contractWrapper, storage, featureName, nextTokenIdToMintFn) {\n    /**\n     * Create a batch of encrypted NFTs that can be revealed at a later time.\n     * @remarks Create a batch of encrypted NFTs that can be revealed at a later time.\n     * @example\n     * ```javascript\n     * // the real NFTs, these will be encrypted until your reveal them!\n     * const realNFTs = [{\n     *   name: \"Common NFT #1\",\n     *   description: \"Common NFT, one of many.\",\n     *   image: fs.readFileSync(\"path/to/image.png\"),\n     * }, {\n     *   name: \"Super Rare NFT #2\",\n     *   description: \"You got a Super Rare NFT!\",\n     *   image: fs.readFileSync(\"path/to/image.png\"),\n     * }];\n     * // A placeholder NFT that people will get immediately in their wallet, until the reveal happens!\n     * const placeholderNFT = {\n     *   name: \"Hidden NFT\",\n     *   description: \"Will be revealed next week!\"\n     * };\n     * // Create and encrypt the NFTs\n     * await contract.revealer.createDelayedRevealBatch(\n     *   placeholderNFT,\n     *   realNFTs,\n     *   \"my secret password\",\n     * );\n     * ```\n     * @public\n     * @param placeholder - the placeholder NFT to show before the reveal\n     * @param metadatas - the final NFTs that will be hidden\n     * @param password - the password that will be used to reveal these NFTs\n     * @param options - additional options like upload progress\n     */\n    _defineProperty(this, \"createDelayedRevealBatch\", /* @__PURE__ */buildTransactionFunction(async (placeholder, metadatas, password, options) => {\n      if (!password) {\n        throw new Error(\"Password is required\");\n      }\n      const placeholderUris = await this.storage.uploadBatch([CommonNFTInput.parse(placeholder)], {\n        rewriteFileNames: {\n          fileStartNumber: 0\n        }\n      });\n      const placeholderUri = getBaseUriFromBatch(placeholderUris);\n      const startFileNumber = await this.nextTokenIdToMintFn();\n      const uris = await this.storage.uploadBatch(metadatas.map(m => CommonNFTInput.parse(m)), {\n        onProgress: options === null || options === void 0 ? void 0 : options.onProgress,\n        rewriteFileNames: {\n          fileStartNumber: startFileNumber.toNumber()\n        }\n      });\n      const baseUri = getBaseUriFromBatch(uris);\n      const baseUriId = await this.contractWrapper.read(\"getBaseURICount\", []);\n      const hashedPassword = await this.hashDelayRevealPassword(baseUriId, password);\n      const encryptedBaseUri = await this.contractWrapper.read(\"encryptDecrypt\", [utils.toUtf8Bytes(baseUri), hashedPassword]);\n      let data;\n      const legacyContract = await this.isLegacyContract();\n      if (legacyContract) {\n        data = encryptedBaseUri;\n      } else {\n        const chainId = await this.contractWrapper.getChainID();\n        const provenanceHash = utils.solidityKeccak256([\"bytes\", \"bytes\", \"uint256\"], [utils.toUtf8Bytes(baseUri), hashedPassword, chainId]);\n        data = utils.defaultAbiCoder.encode([\"bytes\", \"bytes32\"], [encryptedBaseUri, provenanceHash]);\n      }\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"lazyMint\",\n        args: [uris.length, placeholderUri.endsWith(\"/\") ? placeholderUri : \"\".concat(placeholderUri, \"/\"), data],\n        parse: receipt => {\n          const events = this.contractWrapper.parseLogs(\"TokensLazyMinted\", receipt === null || receipt === void 0 ? void 0 : receipt.logs);\n          const startingIndex = events[0].args.startTokenId;\n          const endingIndex = events[0].args.endTokenId;\n          const results = [];\n          for (let id = startingIndex; id.lte(endingIndex); id = id.add(1)) {\n            results.push({\n              id,\n              receipt\n            });\n          }\n          return results;\n        }\n      });\n    }));\n    /**\n     * Reveal a batch of hidden NFTs\n     * @remarks Reveal the NFTs of a batch using the password.\n     * @example\n     * ```javascript\n     * // the batch to reveal\n     * const batchId = 0;\n     * // reveal the batch\n     * await contract.revealer.reveal(batchId, \"my secret password\");\n     * ```\n     * @public\n     * @param batchId - the id of the batch to reveal\n     * @param password - the password\n     */\n    _defineProperty(this, \"reveal\", /* @__PURE__ */buildTransactionFunction(async (batchId, password) => {\n      if (!password) {\n        throw new Error(\"Password is required\");\n      }\n      const key = await this.hashDelayRevealPassword(batchId, password);\n      // performing the reveal locally to make sure it'd succeed before sending the transaction\n      try {\n        const decryptedUri = await this.contractWrapper.callStatic().reveal(batchId, key);\n        // basic sanity check for making sure decryptedUri is valid\n        // this is optional because invalid decryption key would result in non-utf8 bytes and\n        // ethers would throw when trying to decode it\n        if (!decryptedUri.includes(\"://\") || !decryptedUri.endsWith(\"/\")) {\n          throw new Error(\"invalid password\");\n        }\n      } catch (e) {\n        throw new Error(\"invalid password\");\n      }\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"reveal\",\n        args: [batchId, key]\n      });\n    }));\n    this.featureName = featureName;\n    this.nextTokenIdToMintFn = nextTokenIdToMintFn;\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n  }\n  /**\n   * Gets the list of unrevealed NFT batches.\n   * @remarks Gets the list of unrevealed NFT batches.\n   * @example\n   * ```javascript\n   * const batches = await contract.revealer.getBatchesToReveal();\n   * ```\n   * @public\n   */\n  async getBatchesToReveal() {\n    const count = await this.contractWrapper.read(\"getBaseURICount\", []);\n    if (count.isZero()) {\n      return [];\n    }\n    const countRangeArray = Array.from(Array(count.toNumber()).keys());\n    // map over to get the base uri indices, which should be the end token id of every batch\n    const uriIndices = await Promise.all(countRangeArray.map(i => {\n      if (hasFunction(\"getBatchIdAtIndex\", this.contractWrapper)) {\n        return this.contractWrapper.read(\"getBatchIdAtIndex\", [i]);\n      }\n      if (hasFunction(\"baseURIIndices\", this.contractWrapper)) {\n        return this.contractWrapper.read(\"baseURIIndices\", [i]);\n      }\n      throw new Error(\"Contract does not have getBatchIdAtIndex or baseURIIndices.\");\n    }));\n\n    // first batch always start from 0. don't need to fetch the last batch so pop it from the range array\n    const uriIndicesWithZeroStart = uriIndices.slice(0, uriIndices.length - 1);\n\n    // returns the token uri for each batches. first batch always starts from token id 0.\n    const tokenMetadatas = await Promise.all(Array.from([0, ...uriIndicesWithZeroStart]).map(i => this.getNftMetadata(i.toString())));\n\n    // index is the uri indices, which is end token id. different from uris\n    const legacyContract = await this.isLegacyContract();\n    const encryptedUriData = await Promise.all(Array.from([...uriIndices]).map(i => legacyContract ? this.getLegacyEncryptedData(i) : this.contractWrapper.read(\"encryptedData\", [i])));\n    const encryptedBaseUris = encryptedUriData.map(data => {\n      if (utils.hexDataLength(data) > 0) {\n        if (legacyContract) {\n          return data;\n        }\n        const result = utils.defaultAbiCoder.decode([\"bytes\", \"bytes32\"], data);\n        return result[0];\n      } else {\n        return data;\n      }\n    });\n    return tokenMetadatas.map((meta, index) => ({\n      batchId: BigNumber.from(index),\n      batchUri: meta.uri,\n      placeholderMetadata: meta\n    })).filter((_, index) => utils.hexDataLength(encryptedBaseUris[index]) > 0);\n  }\n\n  /**\n   * Algorithm to hash delay reveal password, so we don't broadcast the input password on-chain.\n   *\n   * @internal\n   */\n  async hashDelayRevealPassword(batchTokenIndex, password) {\n    const chainId = await this.contractWrapper.getChainID();\n    const contractAddress = this.contractWrapper.address;\n    return utils.solidityKeccak256([\"string\", \"uint256\", \"uint256\", \"address\"], [password, chainId, batchTokenIndex, contractAddress]);\n  }\n  async getNftMetadata(tokenId) {\n    return fetchTokenMetadataForContract(this.contractWrapper.address, this.contractWrapper.getProvider(), tokenId, this.storage);\n  }\n  async isLegacyContract() {\n    if (hasFunction(\"contractVersion\", this.contractWrapper)) {\n      try {\n        const version = await this.contractWrapper.read(\"contractVersion\", []);\n        return version <= 2;\n      } catch (e) {\n        return false;\n      }\n    }\n    return false;\n  }\n  async getLegacyEncryptedData(index) {\n    const legacy = new Contract(this.contractWrapper.address, DeprecatedAbi, this.contractWrapper.getProvider());\n    const result = await legacy.functions[\"encryptedBaseURI\"](index);\n    if (result.length > 0) {\n      return result[0];\n    } else {\n      return \"0x\";\n    }\n  }\n}\nfunction abstractContractModelToLegacy(model) {\n  return {\n    startTimestamp: model.startTimestamp,\n    maxClaimableSupply: model.maxClaimableSupply,\n    supplyClaimed: model.supplyClaimed,\n    merkleRoot: model.merkleRoot,\n    pricePerToken: model.pricePerToken,\n    currency: model.currency,\n    quantityLimitPerTransaction: model.maxClaimablePerWallet,\n    waitTimeInSecondsBetweenClaims: model.waitTimeInSecondsBetweenClaims || 0\n  };\n}\nfunction abstractContractModelToNew(model) {\n  return {\n    startTimestamp: model.startTimestamp,\n    maxClaimableSupply: model.maxClaimableSupply,\n    supplyClaimed: model.supplyClaimed,\n    merkleRoot: model.merkleRoot,\n    pricePerToken: model.pricePerToken,\n    currency: model.currency,\n    quantityLimitPerWallet: model.maxClaimablePerWallet,\n    metadata: model.metadata || \"\"\n  };\n}\n\n/**\n * @internal\n * @param quantity\n * @param tokenDecimals\n */\nfunction convertQuantityToBigNumber(quantity, tokenDecimals) {\n  if (quantity === \"unlimited\") {\n    return constants.MaxUint256;\n  } else {\n    return utils.parseUnits(quantity, tokenDecimals);\n  }\n}\nfunction isNativeToken(tokenAddress) {\n  return tokenAddress.toLowerCase() === NATIVE_TOKEN_ADDRESS || tokenAddress.toLowerCase() === constants.AddressZero;\n}\n\n/**\n *\n * @param provider\n * @param asset\n * @returns\n * @internal\n */\nasync function fetchCurrencyMetadata(provider, asset) {\n  if (isNativeToken(asset)) {\n    const network = await provider.getNetwork();\n    const nativeToken = getNativeTokenByChainId(network.chainId);\n    return {\n      name: nativeToken.name,\n      symbol: nativeToken.symbol,\n      decimals: nativeToken.decimals\n    };\n  } else {\n    const erc20 = new Contract(asset, IERC20MetadataAbi, provider);\n    const [name, symbol, decimals] = await Promise.all([erc20.name(), erc20.symbol(), erc20.decimals()]);\n    return {\n      name,\n      symbol,\n      decimals\n    };\n  }\n}\nasync function parseSnapshotInputs(inputs) {\n  const chunkSize = 25000;\n  const chunks = Array.from({\n    length: Math.ceil(inputs.length / chunkSize)\n  }, (_, i) => inputs.slice(i * chunkSize, i * chunkSize + chunkSize));\n  const results = [];\n  for (const chunk of chunks) {\n    results.push(...(await SnapshotInputSchema.parseAsync(chunk)));\n  }\n  return results;\n}\n\n// shard using the first 2 hex character of the address\n// this splits the merkle tree into 256 shards\n// shard files will be 00.json, 01.json, 02.json, ..., ff.json\nconst SHARD_NYBBLES = 2;\nlet SnapshotFormatVersion = /*#__PURE__*/function (SnapshotFormatVersion) {\n  SnapshotFormatVersion[SnapshotFormatVersion[\"V1\"] = 1] = \"V1\";\n  SnapshotFormatVersion[SnapshotFormatVersion[\"V2\"] = 2] = \"V2\";\n  return SnapshotFormatVersion;\n}({}); // address, maxClaimable, price, currencyAddress\nclass ShardedMerkleTree {\n  constructor(storage, baseUri, originalEntriesUri, shardNybbles, tokenDecimals) {\n    this.storage = storage;\n    this.shardNybbles = shardNybbles;\n    this.baseUri = baseUri;\n    this.originalEntriesUri = originalEntriesUri;\n    this.tokenDecimals = tokenDecimals;\n    this.shards = {};\n    this.trees = {};\n  }\n  static async fromUri(uri, storage) {\n    try {\n      const shardedMerkleTreeInfo = await storage.downloadJSON(uri);\n      if (shardedMerkleTreeInfo.isShardedMerkleTree) {\n        return ShardedMerkleTree.fromShardedMerkleTreeInfo(shardedMerkleTreeInfo, storage);\n      }\n    } catch (e) {\n      return undefined;\n    }\n  }\n  static async fromShardedMerkleTreeInfo(info, storage) {\n    return new ShardedMerkleTree(storage, info.baseUri, info.originalEntriesUri, info.shardNybbles, info.tokenDecimals);\n  }\n  static hashEntry(entry, tokenDecimals, currencyDecimals, snapshotFormatVersion) {\n    switch (snapshotFormatVersion) {\n      case SnapshotFormatVersion.V1:\n        return utils.solidityKeccak256([\"address\", \"uint256\"], [entry.address, convertQuantityToBigNumber(entry.maxClaimable, tokenDecimals)]);\n      case SnapshotFormatVersion.V2:\n        return utils.solidityKeccak256([\"address\", \"uint256\", \"uint256\", \"address\"], [entry.address, convertQuantityToBigNumber(entry.maxClaimable, tokenDecimals), convertQuantityToBigNumber(entry.price || \"unlimited\", currencyDecimals), entry.currencyAddress || constants.AddressZero]);\n    }\n  }\n  static async fetchAndCacheDecimals(cache, provider, currencyAddress) {\n    if (!currencyAddress) {\n      return 18;\n    }\n    // cache decimals for each currency to avoid refetching for every address\n    let currencyDecimals = cache[currencyAddress];\n    if (currencyDecimals === undefined) {\n      const currencyMetadata = await fetchCurrencyMetadata(provider, currencyAddress);\n      currencyDecimals = currencyMetadata.decimals;\n      cache[currencyAddress] = currencyDecimals;\n    }\n    return currencyDecimals;\n  }\n  static async buildAndUpload(snapshotInput, tokenDecimals, provider, storage, snapshotFormatVersion) {\n    let shardNybbles = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : SHARD_NYBBLES;\n    const inputs = await parseSnapshotInputs(snapshotInput);\n\n    // TODO Could also derive shardNybbles from input size\n    const shards = {};\n    for (const snapshotEntry of inputs) {\n      const shard = snapshotEntry.address.slice(2, 2 + shardNybbles).toLowerCase();\n      if (shards[shard] === undefined) {\n        shards[shard] = [];\n      }\n      shards[shard].push(snapshotEntry);\n    }\n    const currencyDecimalMap = {};\n    // create shard => subtree root map\n    const subTrees = await Promise.all(Object.entries(shards).map(async _ref => {\n      let [shard, entries] = _ref;\n      return [shard, new MerkleTree(await Promise.all(entries.map(async entry => {\n        // cache decimals for each currency to avoid refetching for every address\n        const currencyDecimals = await ShardedMerkleTree.fetchAndCacheDecimals(currencyDecimalMap, provider, entry.currencyAddress);\n        return ShardedMerkleTree.hashEntry(entry, tokenDecimals, currencyDecimals, snapshotFormatVersion);\n      })), utils.keccak256, {\n        sort: true\n      }).getHexRoot()];\n    }));\n    const roots = Object.fromEntries(subTrees);\n    // create master tree from shard => subtree root map\n    const tree = new MerkleTree(Object.values(roots), utils.keccak256, {\n      sort: true\n    });\n    const shardsToUpload = [];\n    for (const [shardId, entries] of Object.entries(shards)) {\n      const data = {\n        proofs: tree.getProof(roots[shardId]).map(value => \"0x\" + value.data.toString(\"hex\")),\n        entries\n      };\n      shardsToUpload.push({\n        data: JSON.stringify(data),\n        name: \"\".concat(shardId, \".json\")\n      });\n    }\n    const uris = await storage.uploadBatch(shardsToUpload);\n    const baseUri = uris[0].slice(0, uris[0].lastIndexOf(\"/\"));\n    const originalEntriesUri = await storage.upload(inputs);\n    const shardedMerkleInfo = {\n      merkleRoot: tree.getHexRoot(),\n      baseUri,\n      originalEntriesUri,\n      shardNybbles,\n      tokenDecimals,\n      isShardedMerkleTree: true\n    };\n    const masterUri = await storage.upload(shardedMerkleInfo);\n    return {\n      shardedMerkleInfo,\n      uri: masterUri\n    };\n  }\n  async getProof(address, provider, snapshotFormatVersion) {\n    const shardId = address.slice(2, 2 + this.shardNybbles).toLowerCase();\n    let shard = this.shards[shardId];\n    const currencyDecimalMap = {};\n    if (shard === undefined) {\n      try {\n        shard = this.shards[shardId] = await this.storage.downloadJSON(\"\".concat(this.baseUri, \"/\").concat(shardId, \".json\"));\n        const hashedEntries = await Promise.all(shard.entries.map(async entry => {\n          // cache decimals for each currency to avoid refetching for every address\n          const currencyDecimals = await ShardedMerkleTree.fetchAndCacheDecimals(currencyDecimalMap, provider, entry.currencyAddress);\n          return ShardedMerkleTree.hashEntry(entry, this.tokenDecimals, currencyDecimals, snapshotFormatVersion);\n        }));\n        this.trees[shardId] = new MerkleTree(hashedEntries, utils.keccak256, {\n          sort: true\n        });\n      } catch (e) {\n        return null;\n      }\n    }\n    const entry = shard.entries.find(i => i.address.toLowerCase() === address.toLowerCase());\n    if (!entry) {\n      return null;\n    }\n    const currencyDecimals = await ShardedMerkleTree.fetchAndCacheDecimals(currencyDecimalMap, provider, entry.currencyAddress);\n    const leaf = ShardedMerkleTree.hashEntry(entry, this.tokenDecimals, currencyDecimals, snapshotFormatVersion);\n    const proof = this.trees[shardId].getProof(leaf).map(i => \"0x\" + i.data.toString(\"hex\"));\n    return SnapshotEntryWithProofSchema.parseAsync({\n      ...entry,\n      proof: proof.concat(shard.proofs)\n    });\n  }\n  async getAllEntries() {\n    try {\n      return await this.storage.downloadJSON(this.originalEntriesUri);\n    } catch (e) {\n      console.warn(\"Could not fetch original snapshot entries\", e);\n      return [];\n    }\n  }\n}\nasync function fetchSnapshotEntryForAddress(address, merkleRoot, merkleMetadata, provider, storage, snapshotFormatVersion) {\n  if (!merkleMetadata) {\n    return null;\n  }\n  const snapshotUri = merkleMetadata[merkleRoot];\n  if (snapshotUri) {\n    const raw = await storage.downloadJSON(snapshotUri);\n    if (raw.isShardedMerkleTree && raw.merkleRoot === merkleRoot) {\n      const merkleTree = await ShardedMerkleTree.fromShardedMerkleTreeInfo(raw, storage);\n      return await merkleTree.getProof(address, provider, snapshotFormatVersion);\n    }\n    // legacy non-sharded, just fetch it all and filter out\n    const snapshotData = await SnapshotSchema.parseAsync(raw);\n    if (merkleRoot === snapshotData.merkleRoot) {\n      return snapshotData.claims.find(c => c.address.toLowerCase() === address.toLowerCase()) || null;\n    }\n  }\n  return null;\n}\nfunction legacyContractModelToAbstract(model) {\n  return {\n    startTimestamp: model.startTimestamp,\n    maxClaimableSupply: model.maxClaimableSupply,\n    supplyClaimed: model.supplyClaimed,\n    merkleRoot: model.merkleRoot.toString(),\n    pricePerToken: model.pricePerToken,\n    currency: model.currency,\n    maxClaimablePerWallet: model.quantityLimitPerTransaction,\n    waitTimeInSecondsBetweenClaims: model.waitTimeInSecondsBetweenClaims\n  };\n}\nfunction newContractModelToAbstract(model) {\n  return {\n    startTimestamp: model.startTimestamp,\n    maxClaimableSupply: model.maxClaimableSupply,\n    supplyClaimed: model.supplyClaimed,\n    merkleRoot: model.merkleRoot.toString(),\n    pricePerToken: model.pricePerToken,\n    currency: model.currency,\n    maxClaimablePerWallet: model.quantityLimitPerWallet,\n    waitTimeInSecondsBetweenClaims: 0,\n    metadata: model.metadata\n  };\n}\n\n/**\n * @internal\n */\nclass RPCConnectionHandler extends EventEmitter {\n  constructor(network, options) {\n    super();\n    try {\n      this.options = SDKOptionsSchema.parse(options);\n    } catch (optionParseError) {\n      console.error(\"invalid sdk options object passed, falling back to default options\", optionParseError);\n      this.options = SDKOptionsSchema.parse({});\n    }\n    const [signer, provider] = getSignerAndProvider(network, this.options);\n    this.network = network;\n    this.signer = signer;\n    this.provider = provider;\n  }\n  /**\n   * The function to call whenever the network changes, such as when the users connects their wallet, disconnects their wallet, the connected chain changes, etc.\n   *\n   * @param network - a network, signer or provider that ethers js can interpret\n   */\n  updateSignerOrProvider(network) {\n    const [signer, provider] = getSignerAndProvider(network, this.options);\n    this.network = network;\n    this.signer = signer;\n    this.provider = provider;\n  }\n  /**\n   *\n   * @returns whether or not a signer is set, `true` if there is no signer so the class is in \"read only\" mode\n   */\n  isReadOnly() {\n    return !isSigner(this.signer);\n  }\n\n  /**\n   * Explicitly get the active signer.\n   * @returns the active signer, if there is one\n   */\n  getSigner() {\n    return this.signer;\n  }\n\n  /**\n   * Explicitly get the active provider.\n   * @returns the active provider\n   */\n  getProvider() {\n    return this.provider;\n  }\n\n  /**\n   *\n   * @returns the current signer if there is one, otherwise the active provider\n   */\n  getSignerOrProvider() {\n    return this.getSigner() || this.getProvider();\n  }\n}\n\n/**\n * @internal\n */\nclass ContractWrapper extends RPCConnectionHandler {\n  /**\n   * @internal\n   */\n\n  constructor(network, contractAddress, contractAbi, options, storage) {\n    super(network, options);\n    _defineProperty(this, \"isValidContract\", false);\n    _defineProperty(this, \"customOverrides\", () => ({}));\n    this.abi = contractAbi;\n    this.address = contractAddress;\n    // set up the contract\n    this.writeContract = new Contract(contractAddress, contractAbi, this.getSignerOrProvider());\n    // setup the read only contract\n    this.readContract = this.writeContract.connect(this.getProvider());\n    this.storage = storage;\n  }\n  updateSignerOrProvider(network) {\n    // update the underlying base class\n    super.updateSignerOrProvider(network);\n    // re-connect the contract with the new signer / provider\n    this.writeContract = this.writeContract.connect(this.getSignerOrProvider());\n    // setup the read only contract\n    this.readContract = this.writeContract.connect(this.getProvider());\n  }\n  updateAbi(updatedAbi) {\n    // re-connect the contract with the new signer / provider\n    this.writeContract = new Contract(this.address, updatedAbi, this.getSignerOrProvider());\n\n    // setup the read only contract\n    this.readContract = this.writeContract.connect(this.getProvider());\n    this.abi = AbiSchema.parse(updatedAbi);\n  }\n\n  /**\n   * @internal\n   */\n  async getChainID() {\n    const provider = this.getProvider();\n    const {\n      chainId\n    } = await provider.getNetwork();\n    return chainId;\n  }\n  /**\n   * @internal\n   */\n  async getSignerAddress() {\n    const signer = this.getSigner();\n    if (!signer) {\n      throw new Error(\"This action requires a connected wallet to sign the transaction. Please pass a valid signer to the SDK.\");\n    }\n    return await signer.getAddress();\n  }\n\n  /**\n   * @internal\n   */\n  callStatic() {\n    return this.writeContract.callStatic;\n  }\n\n  /**\n   * @internal\n   */\n  async getCallOverrides() {\n    return getDefaultGasOverrides(this.getProvider());\n  }\n\n  /**\n   * @internal\n   */\n  emitTransactionEvent(status, transactionHash) {\n    this.emit(EventType.Transaction, {\n      status,\n      transactionHash\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async multiCall(encoded) {\n    return this.sendTransaction(\"multicall\", [encoded]);\n  }\n\n  /**\n   * @internal\n   */\n  async estimateGas(fn, args) {\n    return this.writeContract.estimateGas[fn](...args);\n  }\n\n  /**\n   * @internal\n   */\n  withTransactionOverride(hook) {\n    this.customOverrides = hook;\n  }\n\n  /**\n   *\n   * @param functionName The function name on the contract to call\n   * @param args The arguments to be passed to the functionName\n   * @returns The return value of the function call\n   */\n  async read(functionName, args) {\n    const functions = extractFunctionsFromAbi(AbiSchema.parse(this.abi)).filter(f => f.name === functionName);\n    if (!functions.length) {\n      throw new Error(\"Function \\\"\".concat(functionName.toString(), \"\\\" not found in contract. Check your dashboard for the list of functions available\"));\n    }\n    const fn = functions.find(f => f.name === functionName && f.inputs.length === args.length);\n\n    // TODO extract this and re-use for deploy function to check constructor args\n    if (!fn) {\n      throw new Error(\"Function \\\"\".concat(functionName.toString(), \"\\\" requires \").concat(functions[0].inputs.length, \" arguments, but \").concat(args.length, \" were provided.\\nExpected function signature: \").concat(functions[0].signature));\n    }\n    const ethersFnName = \"\".concat(functionName.toString(), \"(\").concat(fn.inputs.map(i => i.type).join(), \")\");\n\n    // check if the function exists on the contract, otherwise use the name passed in\n    const fnName = ethersFnName in this.readContract.functions ? ethersFnName : functionName;\n    if (fn.stateMutability === \"view\" || fn.stateMutability === \"pure\") {\n      // read function\n      const result = await this.readContract[fnName.toString()](...args);\n      return result;\n    }\n    throw new Error(\"Cannot call a write function with read()\");\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName) {\n    let args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    let overrides = arguments.length > 2 ? arguments[2] : undefined;\n    // parse last arg as tx options if present\n    const txOptions = overrides ? await CallOverrideSchema.parseAsync(overrides) : undefined;\n    const functions = extractFunctionsFromAbi(AbiSchema.parse(this.abi)).filter(f => f.name === functionName);\n    if (!functions.length) {\n      throw new Error(\"Function \\\"\".concat(functionName, \"\\\" not found in contract. Check your dashboard for the list of functions available\"));\n    }\n    const fn = functions.find(f => f.name === functionName && f.inputs.length === args.length);\n\n    // TODO extract this and re-use for deploy function to check constructor args\n    if (!fn) {\n      throw new Error(\"Function \\\"\".concat(functionName, \"\\\" requires \").concat(functions[0].inputs.length, \" arguments, but \").concat(args.length, \" were provided.\\nExpected function signature: \").concat(functions[0].signature));\n    }\n    const ethersFnName = \"\".concat(functionName, \"(\").concat(fn.inputs.map(i => i.type).join(), \")\");\n\n    // check if the function exists on the contract, otherwise use the name passed in\n    const fnName = ethersFnName in this.readContract.functions ? ethersFnName : functionName;\n\n    // TODO validate each argument\n    if (fn.stateMutability === \"view\" || fn.stateMutability === \"pure\") {\n      // read function\n      return txOptions ? this.readContract[fnName](...args, txOptions) : this.readContract[fnName](...args);\n    } else {\n      // write function\n      const receipt = await this.sendTransaction(fnName, args, txOptions);\n      return {\n        receipt\n      };\n    }\n  }\n\n  /**\n   * @internal\n   */\n  async sendTransaction(\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  fn, args, callOverrides) {\n    var _this$options;\n    if (!callOverrides) {\n      callOverrides = await this.getCallOverrides();\n    }\n    // if a custom override is set, merge our override with the custom one\n    callOverrides = {\n      ...callOverrides,\n      ...this.customOverrides()\n    };\n    // clear up the override (single use)\n    this.customOverrides = () => ({});\n    if ((_this$options = this.options) !== null && _this$options !== void 0 && _this$options.gasless && (\"openzeppelin\" in this.options.gasless || \"biconomy\" in this.options.gasless)) {\n      if (fn === \"multicall\" && Array.isArray(args[0]) && args[0].length > 0) {\n        const from = await this.getSignerAddress();\n        args[0] = args[0].map(tx => utils.solidityPack([\"bytes\", \"address\"], [tx, from]));\n      }\n      const provider = this.getProvider();\n      const txHash = await this.sendGaslessTransaction(fn, args, callOverrides);\n      this.emitTransactionEvent(\"submitted\", txHash);\n      const receipt = await provider.waitForTransaction(txHash);\n      this.emitTransactionEvent(\"completed\", txHash);\n      return receipt;\n    } else {\n      // one time verification that this is a valid contract (to avoid sending funds to wrong addresses)\n      if (!this.isValidContract) {\n        const code = await this.getProvider().getCode(this.address);\n        this.isValidContract = code !== \"0x\";\n        if (!this.isValidContract) {\n          throw new Error(\"The address you're trying to send a transaction to is not a smart contract. Make sure you are on the correct network and the contract address is correct\");\n        }\n      }\n      const tx = await this.sendTransactionByFunction(fn, args, callOverrides);\n      this.emitTransactionEvent(\"submitted\", tx.hash);\n\n      // tx.wait() can fail so we need to wrap it with a catch\n      let receipt;\n      try {\n        receipt = await tx.wait();\n      } catch (err) {\n        try {\n          // If tx.wait() fails, it just gives us a generic \"transaction failed\"\n          // error. So instead, we need to call static to get an informative error message\n          await this.writeContract.callStatic[fn](...args, ...(callOverrides.value ? [{\n            value: callOverrides.value\n          }] : []));\n        } catch (staticErr) {\n          throw await this.formatError(staticErr, fn, args, callOverrides);\n        }\n        throw await this.formatError(err, fn, args, callOverrides);\n      }\n      this.emitTransactionEvent(\"completed\", tx.hash);\n      return receipt;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  async sendTransactionByFunction(fn, args, callOverrides) {\n    const func = this.writeContract.functions[fn];\n    if (!func) {\n      throw new Error(\"invalid function: \\\"\".concat(fn.toString(), \"\\\"\"));\n    }\n\n    // First, if no gasLimit is passed, call estimate gas ourselves\n    if (!callOverrides.gasLimit) {\n      try {\n        callOverrides.gasLimit = await this.writeContract.estimateGas[fn](...args, callOverrides);\n      } catch (e) {\n        // If gas estimation fails, we'll call static to get a better error message\n        try {\n          await this.writeContract.callStatic[fn](...args, ...(callOverrides.value ? [{\n            value: callOverrides.value\n          }] : []));\n        } catch (err) {\n          throw await this.formatError(err, fn, args, callOverrides);\n        }\n      }\n    }\n\n    // Now there should be no gas estimate errors\n    try {\n      return await func(...args, callOverrides);\n    } catch (err) {\n      throw await this.formatError(err, fn, args, callOverrides);\n    }\n  }\n  async formatError(error, fn, args, callOverrides) {\n    var _provider$connection3, _error$transaction3, _error$receipt3;\n    const provider = this.getProvider();\n\n    // Get metadata for transaction to populate into error\n    const network = await provider.getNetwork();\n    const from = await (callOverrides.from || this.getSignerAddress());\n    const to = this.address;\n    const data = this.readContract.interface.encodeFunctionData(fn, args);\n    const value = BigNumber.from(callOverrides.value || 0);\n    const rpcUrl = (_provider$connection3 = provider.connection) === null || _provider$connection3 === void 0 ? void 0 : _provider$connection3.url;\n\n    // Render function signature with arguments filled in\n    const functionSignature = this.readContract.interface.getFunction(fn);\n    const methodArgs = args.map(arg => {\n      if (JSON.stringify(arg).length <= 80) {\n        return JSON.stringify(arg);\n      }\n      return JSON.stringify(arg, undefined, 2);\n    });\n    const joinedArgs = methodArgs.join(\", \").length <= 80 ? methodArgs.join(\", \") : \"\\n\" + methodArgs.map(arg => \"  \" + arg.split(\"\\n\").join(\"\\n  \")).join(\",\\n\") + \"\\n\";\n    const method = \"\".concat(functionSignature.name, \"(\").concat(joinedArgs, \")\");\n    const hash = error.transactionHash || ((_error$transaction3 = error.transaction) === null || _error$transaction3 === void 0 ? void 0 : _error$transaction3.hash) || ((_error$receipt3 = error.receipt) === null || _error$receipt3 === void 0 ? void 0 : _error$receipt3.transactionHash);\n\n    // Parse the revert reason from the error\n    const reason = parseRevertReason(error);\n\n    // Get contract sources for stack trace\n    let sources = undefined;\n    let contractName = undefined;\n    try {\n      const metadata = await fetchContractMetadataFromAddress(this.address, this.getProvider(), this.storage, this.options);\n      if (metadata.name) {\n        contractName = metadata.name;\n      }\n      if (metadata.metadata.sources) {\n        sources = await fetchSourceFilesFromMetadata(metadata, this.storage);\n      }\n    } catch (err) {\n      // no-op\n    }\n    return new TransactionError({\n      reason,\n      from,\n      to,\n      method,\n      data,\n      network,\n      rpcUrl,\n      value,\n      hash,\n      contractName,\n      sources\n    }, error);\n  }\n\n  /**\n   * @internal\n   */\n  async sendGaslessTransaction(fn) {\n    let args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    let callOverrides = arguments.length > 2 ? arguments[2] : undefined;\n    const signer = this.getSigner();\n    invariant(signer, \"Cannot execute gasless transaction without valid signer\");\n    const chainId = await this.getChainID();\n    const from = await this.getSignerAddress();\n    const to = this.writeContract.address;\n    const value = (callOverrides === null || callOverrides === void 0 ? void 0 : callOverrides.value) || 0;\n    if (BigNumber.from(value).gt(0)) {\n      throw new Error(\"Cannot send native token value with gasless transaction\");\n    }\n    const data = this.writeContract.interface.encodeFunctionData(fn, args);\n    let gas = BigNumber.from(0);\n    try {\n      const gasEstimate = await this.readContract.estimateGas[fn](...args);\n      gas = gasEstimate.mul(2);\n    } catch (e) {\n      // ignore\n    }\n\n    // in some cases WalletConnect doesn't properly gives an estimate for how much gas it would actually use.\n    // as a fix, we're setting it to a high arbitrary number (500k) as the gas limit that should cover for most function calls.\n    if (gas.lt(100000)) {\n      gas = BigNumber.from(500000);\n    }\n\n    // check for gas override in callOverrides\n    if (callOverrides.gasLimit && BigNumber.from(callOverrides.gasLimit).gt(gas)) {\n      gas = BigNumber.from(callOverrides.gasLimit);\n    }\n    const tx = {\n      from,\n      to,\n      data,\n      chainId,\n      gasLimit: gas,\n      functionName: fn.toString(),\n      functionArgs: args,\n      callOverrides\n    };\n    return await this.defaultGaslessSendFunction(tx);\n  }\n  async signTypedData(signer, domain, types, message) {\n    this.emit(EventType.Signature, {\n      status: \"submitted\",\n      message,\n      signature: \"\"\n    });\n    const {\n      signature: sig\n    } = await signTypedDataInternal(signer, domain, types, message);\n    this.emit(EventType.Signature, {\n      status: \"completed\",\n      message,\n      signature: sig\n    });\n    return sig;\n  }\n  parseLogs(eventName, logs) {\n    if (!logs || logs.length === 0) {\n      return [];\n    }\n    const topic = this.writeContract.interface.getEventTopic(eventName);\n    const parsedLogs = logs.filter(x => x.topics.indexOf(topic) >= 0);\n    return parsedLogs.map(l => this.writeContract.interface.parseLog(l));\n  }\n  async defaultGaslessSendFunction(transaction) {\n    if (this.options.gasless && \"biconomy\" in this.options.gasless) {\n      return this.biconomySendFunction(transaction);\n    }\n    return this.defenderSendFunction(transaction);\n  }\n  async biconomySendFunction(transaction) {\n    var _this$options2, _this$options$gasless;\n    invariant(this.options.gasless && \"biconomy\" in this.options.gasless, \"calling biconomySendFunction without biconomy\");\n    const signer = this.getSigner();\n    const provider = this.getProvider();\n    invariant(signer && provider, \"signer and provider must be set\");\n    const forwarder = new Contract(getContractAddressByChainId(transaction.chainId, \"biconomyForwarder\"), BiconomyForwarderAbi, provider);\n    const batchId = 0;\n    const batchNonce = await getAndIncrementNonce(forwarder, \"getNonce\", [transaction.from, batchId]);\n    const request = {\n      from: transaction.from,\n      to: transaction.to,\n      token: constants.AddressZero,\n      txGas: transaction.gasLimit.toNumber(),\n      tokenGasPrice: \"0\",\n      batchId,\n      batchNonce: batchNonce.toNumber(),\n      deadline: Math.floor(Date.now() / 1000 + (((_this$options2 = this.options) === null || _this$options2 === void 0 ? void 0 : _this$options2.gasless) && \"biconomy\" in this.options.gasless && ((_this$options$gasless = this.options.gasless.biconomy) === null || _this$options$gasless === void 0 ? void 0 : _this$options$gasless.deadlineSeconds) || 3600)),\n      data: transaction.data\n    };\n    const hashToSign = utils.arrayify(utils.solidityKeccak256([\"address\", \"address\", \"address\", \"uint256\", \"uint256\", \"uint256\", \"uint256\", \"uint256\", \"bytes32\"], [request.from, request.to, request.token, request.txGas, request.tokenGasPrice, request.batchId, request.batchNonce, request.deadline, utils.keccak256(request.data)]));\n    this.emit(EventType.Signature, {\n      status: \"submitted\",\n      message: hashToSign,\n      signature: \"\"\n    });\n    const signature = await signer.signMessage(hashToSign);\n    this.emit(EventType.Signature, {\n      status: \"completed\",\n      message: hashToSign,\n      signature\n    });\n    const response = await fetch(\"https://api.biconomy.io/api/v2/meta-tx/native\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        from: transaction.from,\n        apiId: this.options.gasless.biconomy.apiId,\n        params: [request, signature],\n        to: transaction.to,\n        gasLimit: transaction.gasLimit.toHexString()\n      }),\n      headers: {\n        \"x-api-key\": this.options.gasless.biconomy.apiKey,\n        \"Content-Type\": \"application/json;charset=utf-8\"\n      }\n    });\n    if (response.ok) {\n      const resp = await response.json();\n      if (!resp.txHash) {\n        throw new Error(\"relay transaction failed: \".concat(resp.log));\n      }\n      return resp.txHash;\n    }\n    throw new Error(\"relay transaction failed with status: \".concat(response.status, \" (\").concat(response.statusText, \")\"));\n  }\n  async defenderSendFunction(transaction) {\n    var _message2;\n    invariant(this.options.gasless && \"openzeppelin\" in this.options.gasless, \"calling openzeppelin gasless transaction without openzeppelin config in the SDK options\");\n    const signer = this.getSigner();\n    const provider = this.getProvider();\n    invariant(signer, \"provider is not set\");\n    invariant(provider, \"provider is not set\");\n    const forwarderAddress = this.options.gasless.openzeppelin.relayerForwarderAddress || (this.options.gasless.openzeppelin.useEOAForwarder ? CONTRACT_ADDRESSES[transaction.chainId].openzeppelinForwarderEOA || (await computeEOAForwarderAddress(this.getProvider(), this.storage, \"\", this.options.clientId, this.options.secretKey)) : CONTRACT_ADDRESSES[transaction.chainId].openzeppelinForwarder || (await computeForwarderAddress(this.getProvider(), this.storage, \"\", this.options.clientId, this.options.secretKey)));\n    const forwarder = new Contract(forwarderAddress, ForwarderABI, provider);\n    const nonce = await getAndIncrementNonce(forwarder, \"getNonce\", [transaction.from]);\n    let domain;\n    let types;\n    let message;\n    if (this.options.gasless.experimentalChainlessSupport) {\n      domain = {\n        name: \"GSNv2 Forwarder\",\n        version: \"0.0.1\",\n        verifyingContract: forwarderAddress\n      };\n      types = {\n        ForwardRequest: ChainAwareForwardRequest\n      };\n      message = {\n        from: transaction.from,\n        to: transaction.to,\n        value: BigNumber.from(0).toString(),\n        gas: BigNumber.from(transaction.gasLimit).toString(),\n        nonce: BigNumber.from(nonce).toString(),\n        data: transaction.data,\n        chainid: BigNumber.from(transaction.chainId).toString()\n      };\n    } else {\n      domain = {\n        name: this.options.gasless.openzeppelin.domainName,\n        version: this.options.gasless.openzeppelin.domainVersion,\n        chainId: transaction.chainId,\n        verifyingContract: forwarderAddress\n      };\n      types = {\n        ForwardRequest\n      };\n      message = {\n        from: transaction.from,\n        to: transaction.to,\n        value: BigNumber.from(0).toString(),\n        gas: BigNumber.from(transaction.gasLimit).toString(),\n        nonce: BigNumber.from(nonce).toString(),\n        data: transaction.data\n      };\n    }\n    let signature;\n    this.emit(EventType.Signature, {\n      status: \"submitted\",\n      message,\n      signature: \"\"\n    });\n\n    // if the executing function is \"approve\" and matches with erc20 approve signature\n    // and if the token supports permit, then we use permit for gasless instead of approve.\n    if (transaction.functionName === \"approve\" && transaction.functionArgs.length === 2) {\n      const spender = transaction.functionArgs[0];\n      const amount = transaction.functionArgs[1];\n      // TODO: support DAI permit by signDAIPermit\n      const {\n        message: permit,\n        signature: sig\n      } = await signEIP2612Permit(signer, this.writeContract.address, transaction.from, spender, amount);\n      const {\n        r,\n        s,\n        v\n      } = utils.splitSignature(sig);\n      message = {\n        to: this.address,\n        owner: permit.owner,\n        spender: permit.spender,\n        value: BigNumber.from(permit.value).toString(),\n        nonce: BigNumber.from(permit.nonce).toString(),\n        deadline: BigNumber.from(permit.deadline).toString(),\n        r,\n        s,\n        v\n      };\n      signature = sig;\n    } else {\n      const {\n        signature: sig\n      } = await signTypedDataInternal(signer, domain, types, message);\n      signature = sig;\n    }\n    let messageType = \"forward\";\n\n    // if has owner property then it's permit :)\n    if ((_message2 = message) !== null && _message2 !== void 0 && _message2.owner) {\n      messageType = \"permit\";\n    }\n    const body = JSON.stringify({\n      request: message,\n      signature,\n      forwarderAddress,\n      type: messageType\n    });\n    this.emit(EventType.Signature, {\n      status: \"completed\",\n      message,\n      signature\n    });\n    const response = await fetch(this.options.gasless.openzeppelin.relayerUrl, {\n      method: \"POST\",\n      body\n    });\n    if (response.ok) {\n      const resp = await response.json();\n      if (!resp.result) {\n        throw new Error(\"Relay transaction failed: \".concat(resp.message));\n      }\n      const result = JSON.parse(resp.result);\n      return result.txHash;\n    }\n    throw new Error(\"relay transaction failed with status: \".concat(response.status, \" (\").concat(response.statusText, \")\"));\n  }\n}\nasync function approveErc20Allowance(contractToApprove, currencyAddress, price, quantity, tokenDecimals) {\n  const signer = contractToApprove.getSigner();\n  const provider = contractToApprove.getProvider();\n  const erc20 = new ContractWrapper(signer || provider, currencyAddress, ERC20Abi, contractToApprove.options, contractToApprove.storage);\n  const owner = await contractToApprove.getSignerAddress();\n  const spender = contractToApprove.address;\n  const allowance = await erc20.read(\"allowance\", [owner, spender]);\n  const totalPrice = BigNumber.from(price).mul(BigNumber.from(quantity)).div(utils.parseUnits(\"1\", tokenDecimals));\n  if (allowance.lt(totalPrice)) {\n    await erc20.sendTransaction(\"approve\", [spender, allowance.add(totalPrice)]);\n  }\n}\n\n/**\n *\n * @param provider\n * @param inputPrice\n * @param currencyAddress\n * @returns\n * @internal\n */\nasync function normalizePriceValue(provider, inputPrice, currencyAddress) {\n  const metadata = await fetchCurrencyMetadata(provider, currencyAddress);\n  return utils.parseUnits(AmountSchema.parse(inputPrice), metadata.decimals);\n}\n\n/**\n * Returns proofs and the overrides required for the transaction.\n * @internal\n * @returns - `overrides` and `proofs` as an object.\n */\nasync function prepareClaim(addressToClaim, quantity, activeClaimCondition, merkleMetadataFetcher, tokenDecimals, contractWrapper, storage, checkERC20Allowance, snapshotFormatVersion) {\n  let maxClaimable = convertQuantityToBigNumber(activeClaimCondition.maxClaimablePerWallet, tokenDecimals);\n  let proofs = [utils.hexZeroPad([0], 32)];\n  let priceInProof = activeClaimCondition.price; // the price to send to the contract in claim proofs\n  let currencyAddressInProof = activeClaimCondition.currencyAddress;\n  try {\n    if (!activeClaimCondition.merkleRootHash.toString().startsWith(constants.AddressZero)) {\n      const snapshotEntry = await fetchSnapshotEntryForAddress(addressToClaim, activeClaimCondition.merkleRootHash.toString(), await merkleMetadataFetcher(), contractWrapper.getProvider(), storage, snapshotFormatVersion);\n      if (snapshotEntry) {\n        proofs = snapshotEntry.proof;\n        // override only if not default values (unlimited for quantity, zero addr for currency)\n        maxClaimable = snapshotEntry.maxClaimable === \"unlimited\" ? constants.MaxUint256 : utils.parseUnits(snapshotEntry.maxClaimable, tokenDecimals);\n        priceInProof = snapshotEntry.price === undefined || snapshotEntry.price === \"unlimited\" ? constants.MaxUint256 : await normalizePriceValue(contractWrapper.getProvider(), snapshotEntry.price, snapshotEntry.currencyAddress || constants.AddressZero);\n        currencyAddressInProof = snapshotEntry.currencyAddress || constants.AddressZero;\n      } else {\n        // if no snapshot entry, and it's a v1 format (exclusive allowlist) then address can't claim\n        if (snapshotFormatVersion === SnapshotFormatVersion.V1) {\n          throw new Error(\"No claim found for this address\");\n        }\n        // but if its snapshot v2 (override list behavior) then address can still claim with default settings\n      }\n    }\n  } catch (e) {\n    // have to handle the valid error case that we *do* want to throw on\n    if ((e === null || e === void 0 ? void 0 : e.message) === \"No claim found for this address\") {\n      throw e;\n    }\n    // other errors we wanna ignore and try to continue\n    console.warn(\"failed to check claim condition merkle root hash, continuing anyways\", e);\n  }\n  const overrides = (await contractWrapper.getCallOverrides()) || {};\n  // the actual price to check allowance against\n  // if proof price is unlimited, then we use the price from the claim condition\n  // this mimics the contract behavior\n  const pricePerToken = priceInProof.toString() !== constants.MaxUint256.toString() ? priceInProof : activeClaimCondition.price;\n  // same for currency address\n  const currencyAddress = currencyAddressInProof !== constants.AddressZero ? currencyAddressInProof : activeClaimCondition.currencyAddress;\n  if (pricePerToken.gt(0)) {\n    if (isNativeToken(currencyAddress)) {\n      overrides[\"value\"] = BigNumber.from(pricePerToken).mul(quantity).div(utils.parseUnits(\"1\", tokenDecimals));\n    } else if (checkERC20Allowance) {\n      await approveErc20Allowance(contractWrapper, currencyAddress, pricePerToken, quantity, tokenDecimals);\n    }\n  }\n  return {\n    overrides,\n    proofs,\n    maxClaimable,\n    price: pricePerToken,\n    currencyAddress: currencyAddress,\n    priceInProof,\n    currencyAddressInProof\n  };\n}\n\n/**\n * Create a snapshot (merkle tree) from a list of addresses and uploads it to IPFS\n * @param snapshotInput - the list of addresses to hash\n * @param tokenDecimals - the token decimals\n * @param provider\n * @param storage - the storage to upload to\n * @param snapshotFormatVersion\n * @returns the generated snapshot and URI\n * @internal\n */\nasync function createSnapshot(snapshotInput, tokenDecimals, provider, storage, snapshotFormatVersion) {\n  const input = await parseSnapshotInputs(snapshotInput);\n  const addresses = input.map(i => i.address);\n  const hasDuplicates = new Set(addresses).size < addresses.length;\n  if (hasDuplicates) {\n    throw new DuplicateLeafsError();\n  }\n  const tree = await ShardedMerkleTree.buildAndUpload(input, tokenDecimals, provider, storage, snapshotFormatVersion);\n  return {\n    merkleRoot: tree.shardedMerkleInfo.merkleRoot,\n    snapshotUri: tree.uri\n  };\n}\nfunction compare(a, b) {\n  const left = BigNumber.from(a);\n  const right = BigNumber.from(b);\n  if (left.eq(right)) {\n    return 0;\n  } else if (left.gt(right)) {\n    return 1;\n  } else {\n    return -1;\n  }\n}\n\n/**\n * @internal\n * Decorates claim conditions with merkle roots from snapshots if present\n * @param claimConditionInputs\n * @param tokenDecimals\n * @param provider\n * @param storage\n * @param snapshotFormatVersion\n */\nasync function processSnapshotData(claimConditionInputs, tokenDecimals, provider, storage, snapshotFormatVersion) {\n  const snapshotInfos = [];\n  const inputsWithSnapshots = await Promise.all(claimConditionInputs.map(async conditionInput => {\n    // check snapshots and upload if provided\n    if (conditionInput.snapshot && conditionInput.snapshot.length > 0) {\n      const snapshotInfo = await createSnapshot(conditionInput.snapshot, tokenDecimals, provider, storage, snapshotFormatVersion);\n      snapshotInfos.push(snapshotInfo);\n      conditionInput.merkleRootHash = snapshotInfo.merkleRoot;\n    } else {\n      // if no snapshot is passed or empty, reset the merkle root\n      conditionInput.merkleRootHash = utils.hexZeroPad([0], 32);\n    }\n    // fill condition with defaults values if not provided\n    return conditionInput;\n  }));\n  return {\n    inputsWithSnapshots,\n    snapshotInfos\n  };\n}\n\n/**\n * Converts a local SDK model to contract model\n * @param c\n * @param tokenDecimals\n * @param provider\n * @param storage\n * @internal\n */\nasync function convertToContractModel(c, tokenDecimals, provider, storage) {\n  const currency = c.currencyAddress === constants.AddressZero ? NATIVE_TOKEN_ADDRESS : c.currencyAddress;\n  const maxClaimableSupply = convertQuantityToBigNumber(c.maxClaimableSupply, tokenDecimals);\n  const maxClaimablePerWallet = convertQuantityToBigNumber(c.maxClaimablePerWallet, tokenDecimals);\n  let metadataOrUri;\n  if (c.metadata) {\n    if (typeof c.metadata === \"string\") {\n      metadataOrUri = c.metadata;\n    } else {\n      metadataOrUri = await storage.upload(c.metadata);\n    }\n  }\n  return {\n    startTimestamp: c.startTime,\n    maxClaimableSupply,\n    supplyClaimed: 0,\n    maxClaimablePerWallet,\n    pricePerToken: await normalizePriceValue(provider, c.price, currency),\n    currency,\n    merkleRoot: c.merkleRootHash.toString(),\n    waitTimeInSecondsBetweenClaims: c.waitInSeconds || 0,\n    metadata: metadataOrUri\n  };\n}\n\n/**\n * Create and uploads snapshots + converts claim conditions to contract format\n * @param claimConditionInputs\n * @param tokenDecimals\n * @param provider\n * @param storage\n * @param snapshotFormatVersion\n * @internal\n */\nasync function processClaimConditionInputs(claimConditionInputs, tokenDecimals, provider, storage, snapshotFormatVersion) {\n  const {\n    inputsWithSnapshots,\n    snapshotInfos\n  } = await processSnapshotData(claimConditionInputs, tokenDecimals, provider, storage, snapshotFormatVersion);\n  const parsedInputs = await ClaimConditionInputArray.parseAsync(inputsWithSnapshots);\n  // Convert processed inputs to the format the contract expects, and sort by timestamp\n  const sortedConditions = (await Promise.all(parsedInputs.map(c => convertToContractModel(c, tokenDecimals, provider, storage)))).sort((a, b) => {\n    return compare(a.startTimestamp, b.startTimestamp);\n  });\n  return {\n    snapshotInfos,\n    sortedConditions\n  };\n}\n\n/**\n *\n * @param providerOrSigner\n * @param asset\n * @param price\n * @returns\n * @internal\n */\nasync function fetchCurrencyValue(providerOrSigner, asset, price) {\n  const metadata = await fetchCurrencyMetadata(providerOrSigner, asset);\n  return {\n    ...metadata,\n    value: BigNumber.from(price),\n    displayValue: utils.formatUnits(price, metadata.decimals)\n  };\n}\n\n/**\n * @internal\n * @param merkleRoot\n * @param merkleMetadata\n * @param storage\n */\nasync function fetchSnapshot(merkleRoot, merkleMetadata, storage) {\n  if (!merkleMetadata) {\n    return null;\n  }\n  const snapshotUri = merkleMetadata[merkleRoot];\n  if (snapshotUri) {\n    const raw = await storage.downloadJSON(snapshotUri);\n    if (raw.isShardedMerkleTree && raw.merkleRoot === merkleRoot) {\n      const smt = await ShardedMerkleTree.fromUri(snapshotUri, storage);\n      return (smt === null || smt === void 0 ? void 0 : smt.getAllEntries()) || null;\n    } else {\n      const snapshotData = await SnapshotSchema.parseAsync(raw);\n      if (merkleRoot === snapshotData.merkleRoot) {\n        return snapshotData.claims.map(claim => ({\n          address: claim.address,\n          maxClaimable: claim.maxClaimable,\n          price: claim.price,\n          currencyAddress: claim.currencyAddress\n        }));\n      }\n    }\n  }\n  return null;\n}\n\n/**\n * @internal\n * @param bn\n * @param tokenDecimals\n */\nfunction convertToReadableQuantity(bn, tokenDecimals) {\n  if (bn.toString() === constants.MaxUint256.toString()) {\n    return \"unlimited\";\n  } else {\n    return utils.formatUnits(bn, tokenDecimals);\n  }\n}\n\n/**\n * Transforms a contract model to local model\n * @param pm\n * @param tokenDecimals\n * @param provider\n * @param merkleMetadata\n * @param storage\n * @param shouldDownloadSnapshot\n * @internal\n */\nasync function transformResultToClaimCondition(pm, tokenDecimals, provider, merkleMetadata, storage, shouldDownloadSnapshot) {\n  var _pm$waitTimeInSeconds;\n  const cv = await fetchCurrencyValue(provider, pm.currency, pm.pricePerToken);\n  const maxClaimableSupply = convertToReadableQuantity(pm.maxClaimableSupply, tokenDecimals);\n  const maxClaimablePerWallet = convertToReadableQuantity(pm.maxClaimablePerWallet, tokenDecimals);\n  const availableSupply = convertToReadableQuantity(BigNumber.from(pm.maxClaimableSupply).sub(pm.supplyClaimed), tokenDecimals);\n  const currentMintSupply = convertToReadableQuantity(pm.supplyClaimed, tokenDecimals);\n  let resolvedMetadata;\n  if (pm.metadata) {\n    resolvedMetadata = await storage.downloadJSON(pm.metadata);\n  }\n  return ClaimConditionOutputSchema.parseAsync({\n    startTime: pm.startTimestamp,\n    maxClaimableSupply,\n    maxClaimablePerWallet,\n    currentMintSupply,\n    availableSupply,\n    waitInSeconds: (_pm$waitTimeInSeconds = pm.waitTimeInSecondsBetweenClaims) === null || _pm$waitTimeInSeconds === void 0 ? void 0 : _pm$waitTimeInSeconds.toString(),\n    price: BigNumber.from(pm.pricePerToken),\n    currency: pm.currency,\n    currencyAddress: pm.currency,\n    currencyMetadata: cv,\n    merkleRootHash: pm.merkleRoot,\n    snapshot: shouldDownloadSnapshot ? await fetchSnapshot(pm.merkleRoot, merkleMetadata, storage) : undefined,\n    metadata: resolvedMetadata\n  });\n}\n\n/**\n * @internal\n * @param index\n * @param claimConditionInput\n * @param existingConditions\n */\nasync function updateExistingClaimConditions(index, claimConditionInput, existingConditions) {\n  if (index >= existingConditions.length) {\n    throw Error(\"Index out of bounds - got index: \".concat(index, \" with \").concat(existingConditions.length, \" conditions\"));\n  }\n  // merge input with existing claim condition\n  const priceDecimals = existingConditions[index].currencyMetadata.decimals;\n  const priceInWei = existingConditions[index].price;\n  const priceInTokens = utils.formatUnits(priceInWei, priceDecimals);\n\n  // merge existing (output format) with incoming (input format)\n  const newConditionParsed = await ClaimConditionInputSchema.parseAsync({\n    ...existingConditions[index],\n    price: priceInTokens,\n    ...claimConditionInput\n  });\n\n  // convert to output claim condition\n  const mergedConditionOutput = await ClaimConditionOutputSchema.parseAsync({\n    ...newConditionParsed,\n    price: priceInWei\n  });\n  return existingConditions.map((existingOutput, i) => {\n    let newConditionAtIndex;\n    if (i === index) {\n      newConditionAtIndex = mergedConditionOutput;\n    } else {\n      newConditionAtIndex = existingOutput;\n    }\n    const formattedPrice = utils.formatUnits(newConditionAtIndex.price, priceDecimals);\n    return {\n      ...newConditionAtIndex,\n      price: formattedPrice // manually transform back to input price type\n    };\n  });\n}\n\nlet Status = /*#__PURE__*/function (Status) {\n  Status[Status[\"UNSET\"] = 0] = \"UNSET\";\n  Status[Status[\"Created\"] = 1] = \"Created\";\n  Status[Status[\"Completed\"] = 2] = \"Completed\";\n  Status[Status[\"Cancelled\"] = 3] = \"Cancelled\";\n  Status[Status[\"Active\"] = 4] = \"Active\";\n  Status[Status[\"Expired\"] = 5] = \"Expired\";\n  return Status;\n}({});\nlet ClaimEligibility = /*#__PURE__*/function (ClaimEligibility) {\n  ClaimEligibility[\"NotEnoughSupply\"] = \"There is not enough supply to claim.\";\n  ClaimEligibility[\"AddressNotAllowed\"] = \"This address is not on the allowlist.\";\n  ClaimEligibility[\"WaitBeforeNextClaimTransaction\"] = \"Not enough time since last claim transaction. Please wait.\";\n  ClaimEligibility[\"ClaimPhaseNotStarted\"] = \"Claim phase has not started yet.\";\n  ClaimEligibility[\"AlreadyClaimed\"] = \"You have already claimed the token.\";\n  ClaimEligibility[\"WrongPriceOrCurrency\"] = \"Incorrect price or currency.\";\n  ClaimEligibility[\"OverMaxClaimablePerWallet\"] = \"Cannot claim more than maximum allowed quantity.\";\n  ClaimEligibility[\"NotEnoughTokens\"] = \"There are not enough tokens in the wallet to pay for the claim.\";\n  ClaimEligibility[\"NoActiveClaimPhase\"] = \"There is no active claim phase at the moment. Please check back in later.\";\n  ClaimEligibility[\"NoClaimConditionSet\"] = \"There is no claim condition set.\";\n  ClaimEligibility[\"NoWallet\"] = \"No wallet connected.\";\n  ClaimEligibility[\"Unknown\"] = \"No claim conditions found.\";\n  return ClaimEligibility;\n}({});\n\n/**\n * Manages claim conditions for NFT Drop contracts\n * @public\n */\nclass DropClaimConditions {\n  constructor(contractWrapper, _metadata, storage) {\n    /** ***************************************\n     * WRITE FUNCTIONS\n     *****************************************/\n    /**\n     * Set public mint conditions\n     *\n     * @remarks Sets the public mint conditions that need to be fullfiled by users to claim NFTs.\n     *\n     * @example\n     * ```javascript\n     * const presaleStartTime = new Date();\n     * const publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n     *\n     * // Optionally specify addresses that can claim\n     * const snapshots = ['0x...', '0x...']\n     *\n     * // Or alternatively, you can pass snapshots with the max number of NFTs each address can claim\n     * // const snapshots = [{ address: '0x...', maxClaimable: 1 }, { address: '0x...', maxClaimable: 2 }]\n     *\n     * const claimConditions = [\n     *   {\n     *     startTime: presaleStartTime, // start the presale now\n     *     maxClaimableSupply: 2, // limit how many mints for this presale\n     *     price: 0.01, // presale price\n     *     snapshot: snapshots, // limit minting to only certain addresses\n     *   },\n     *   {\n     *     startTime: publicSaleStartTime, // 24h after presale, start public sale\n     *     price: 0.08, // public sale price\n     *   }\n     * ]);\n     *\n     * await dropContract.claimConditions.set(claimConditions);\n     * ```\n     *\n     * @param claimConditionInputs - The claim conditions\n     * @param resetClaimEligibilityForAll - Whether to reset the state of who already claimed NFTs previously\n     */\n    _defineProperty(this, \"set\", /* @__PURE__ */buildTransactionFunction((() => {\n      var _this = this;\n      return async function (claimConditionInputs) {\n        let resetClaimEligibilityForAll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        let claimConditionsProcessed = claimConditionInputs;\n        if (_this.isLegacySinglePhaseDrop(_this.contractWrapper) || _this.isNewSinglePhaseDrop(_this.contractWrapper)) {\n          resetClaimEligibilityForAll = true;\n          if (claimConditionInputs.length === 0) {\n            claimConditionsProcessed = [{\n              startTime: new Date(0),\n              currencyAddress: constants.AddressZero,\n              price: 0,\n              maxClaimableSupply: 0,\n              maxClaimablePerWallet: 0,\n              waitInSeconds: 0,\n              merkleRootHash: utils.hexZeroPad([0], 32),\n              snapshot: []\n            }];\n          } else if (claimConditionInputs.length > 1) {\n            throw new Error(\"Single phase drop contract cannot have multiple claim conditions, only one is allowed\");\n          }\n        }\n\n        // if using new snapshot format, make sure that maxClaimablePerWallet is set if allowlist is set as well\n        if (_this.isNewSinglePhaseDrop(_this.contractWrapper) || _this.isNewMultiphaseDrop(_this.contractWrapper)) {\n          claimConditionsProcessed.forEach(cc => {\n            var _cc$maxClaimablePerWa;\n            if (cc.snapshot && cc.snapshot.length > 0 && (cc.maxClaimablePerWallet === undefined || cc.maxClaimablePerWallet === \"unlimited\")) {\n              throw new Error(\"maxClaimablePerWallet must be set to a specific value when an allowlist is set.\\n\" + \"Example: Set it to 0 to only allow addresses in the allowlist to claim the amount specified in the allowlist.\\n\" + \"contract.claimConditions.set([{ snapshot: [{ address: '0x...', maxClaimable: 1 }], maxClaimablePerWallet: 0 }])\");\n            }\n            if (cc.snapshot && cc.snapshot.length > 0 && ((_cc$maxClaimablePerWa = cc.maxClaimablePerWallet) === null || _cc$maxClaimablePerWa === void 0 ? void 0 : _cc$maxClaimablePerWa.toString()) === \"0\" && cc.snapshot.map(s => {\n              if (typeof s === \"string\") {\n                return 0;\n              } else {\n                var _s$maxClaimable;\n                return Number(((_s$maxClaimable = s.maxClaimable) === null || _s$maxClaimable === void 0 ? void 0 : _s$maxClaimable.toString()) || 0);\n              }\n            }).reduce((acc, current) => {\n              return acc + current;\n            }, 0) === 0) {\n              throw new Error(\"maxClaimablePerWallet is set to 0, and all addresses in the allowlist have max claimable 0. This means that no one can claim.\");\n            }\n          });\n        }\n\n        // process inputs\n        const {\n          snapshotInfos,\n          sortedConditions\n        } = await processClaimConditionInputs(claimConditionsProcessed, await _this.getTokenDecimals(), _this.contractWrapper.getProvider(), _this.storage, _this.getSnapshotFormatVersion());\n        const merkleInfo = {};\n        snapshotInfos.forEach(s => {\n          merkleInfo[s.merkleRoot] = s.snapshotUri;\n        });\n        const metadata = await _this.metadata.get();\n        const encoded = [];\n\n        // upload new merkle roots to snapshot URIs if updated\n        if (!deepEqual(metadata.merkle, merkleInfo)) {\n          const mergedMetadata = await _this.metadata.parseInputMetadata({\n            ...metadata,\n            merkle: merkleInfo\n          });\n          // using internal method to just upload, avoids one contract call\n          const contractURI = await _this.metadata._parseAndUploadMetadata(mergedMetadata);\n\n          // TODO (cc) we could write the merkle tree info on the claim condition metadata instead\n          // TODO (cc) but we still need to maintain the behavior here for older contracts\n          if (hasFunction(\"setContractURI\", _this.contractWrapper)) {\n            const contractEncoder = new ContractEncoder(_this.contractWrapper);\n            encoded.push(contractEncoder.encode(\"setContractURI\", [contractURI]));\n          } else {\n            throw new Error(\"Setting a merkle root requires implementing ContractMetadata in your contract to support storing a merkle root.\");\n          }\n        }\n        const cw = _this.contractWrapper;\n        const baseContractEncoder = new ContractEncoder(cw);\n        if (_this.isLegacySinglePhaseDrop(cw)) {\n          const contractEncoderLegacy = new ContractEncoder(cw);\n          encoded.push(contractEncoderLegacy.encode(\"setClaimConditions\", [abstractContractModelToLegacy(sortedConditions[0]), resetClaimEligibilityForAll]));\n        } else if (_this.isLegacyMultiPhaseDrop(cw)) {\n          encoded.push(baseContractEncoder.encode(\"setClaimConditions\", [sortedConditions.map(abstractContractModelToLegacy), resetClaimEligibilityForAll]));\n        } else if (_this.isNewSinglePhaseDrop(cw)) {\n          encoded.push(baseContractEncoder.encode(\"setClaimConditions\", [abstractContractModelToNew(sortedConditions[0]), resetClaimEligibilityForAll]));\n        } else if (_this.isNewMultiphaseDrop(cw)) {\n          encoded.push(baseContractEncoder.encode(\"setClaimConditions\", [sortedConditions.map(abstractContractModelToNew), resetClaimEligibilityForAll]));\n        } else {\n          throw new Error(\"Contract does not support claim conditions\");\n        }\n        if (hasFunction(\"multicall\", _this.contractWrapper)) {\n          return Transaction.fromContractWrapper({\n            contractWrapper: _this.contractWrapper,\n            method: \"multicall\",\n            args: [encoded]\n          });\n        }\n        throw new Error(\"Contract does not support multicall\");\n      };\n    })()));\n    /**\n     * Update a single claim condition with new data.\n     *\n     * @param index - the index of the claim condition to update, as given by the index from the result of `getAll()`\n     * @param claimConditionInput - the new data to update, previous data will be retained\n     */\n    _defineProperty(this, \"update\", /* @__PURE__ */buildTransactionFunction(async (index, claimConditionInput) => {\n      const existingConditions = await this.getAll();\n      const newConditionInputs = await updateExistingClaimConditions(index, claimConditionInput, existingConditions);\n      return await this.set.prepare(newConditionInputs);\n    }));\n    this.storage = storage;\n    this.contractWrapper = contractWrapper;\n    this.metadata = _metadata;\n  }\n\n  /** ***************************************\n   * READ FUNCTIONS\n   *****************************************/\n\n  /**\n   * Get the currently active claim condition\n   *\n   * @returns the claim condition metadata\n   */\n  async getActive(options) {\n    const cc = await this.get();\n    const metadata = await this.metadata.get();\n    return await transformResultToClaimCondition(cc, await this.getTokenDecimals(), this.contractWrapper.getProvider(), metadata.merkle || {}, this.storage, (options === null || options === void 0 ? void 0 : options.withAllowList) || false);\n  }\n  async get(conditionId) {\n    if (this.isLegacySinglePhaseDrop(this.contractWrapper)) {\n      const contractModel = await this.contractWrapper.read(\"claimCondition\", []);\n      return legacyContractModelToAbstract(contractModel);\n    } else if (this.isLegacyMultiPhaseDrop(this.contractWrapper)) {\n      const id = conditionId !== undefined ? conditionId : await this.contractWrapper.read(\"getActiveClaimConditionId\", []);\n      const contractModel = await this.contractWrapper.read(\"getClaimConditionById\", [id]);\n      return legacyContractModelToAbstract(contractModel);\n    } else if (this.isNewSinglePhaseDrop(this.contractWrapper)) {\n      const contractModel = await this.contractWrapper.read(\"claimCondition\", []);\n      return newContractModelToAbstract(contractModel);\n    } else if (this.isNewMultiphaseDrop(this.contractWrapper)) {\n      const id = conditionId !== undefined ? conditionId : await this.contractWrapper.read(\"getActiveClaimConditionId\", []);\n      const contractModel = await this.contractWrapper.read(\"getClaimConditionById\", [id]);\n      return newContractModelToAbstract(contractModel);\n    } else {\n      throw new Error(\"Contract does not support claim conditions\");\n    }\n  }\n\n  /**\n   * Get all the claim conditions\n   *\n   * @returns the claim conditions metadata\n   */\n  async getAll(options) {\n    if (this.isLegacyMultiPhaseDrop(this.contractWrapper) || this.isNewMultiphaseDrop(this.contractWrapper)) {\n      const [currentStartId, countBn] = await this.contractWrapper.read(\"claimCondition\", []);\n      const startId = currentStartId.toNumber();\n      const count = countBn.toNumber();\n      const conditions = [];\n      for (let i = startId; i < startId + count; i++) {\n        conditions.push(this.get(i));\n      }\n      const [metadata, decimals, ...fetchedConditions] = await Promise.all([this.metadata.get(), this.getTokenDecimals(), ...conditions]);\n      return Promise.all(fetchedConditions.map(c => transformResultToClaimCondition(c, decimals, this.contractWrapper.getProvider(), metadata.merkle, this.storage, (options === null || options === void 0 ? void 0 : options.withAllowList) || false)));\n    } else {\n      return [await this.getActive(options)];\n    }\n  }\n\n  /**\n   * Can Claim\n   *\n   * @remarks Check if the drop can currently be claimed.\n   *\n   * @example\n   * ```javascript\n   * // Quantity of tokens to check claimability of\n   * const quantity = 1;\n   * const canClaim = await contract.canClaim(quantity);\n   * ```\n   */\n  async canClaim(quantity, addressToCheck) {\n    // TODO switch to use verifyClaim\n    if (addressToCheck) {\n      addressToCheck = await resolveAddress(addressToCheck);\n    }\n    return (await this.getClaimIneligibilityReasons(quantity, addressToCheck)).length === 0;\n  }\n\n  /**\n   * For any claim conditions that a particular wallet is violating,\n   * this function returns human readable information about the\n   * breaks in the condition that can be used to inform the user.\n   *\n   * @param quantity - The desired quantity that would be claimed.\n   * @param addressToCheck - The wallet address, defaults to the connected wallet.\n   *\n   */\n  async getClaimIneligibilityReasons(quantity, addressToCheck) {\n    const reasons = [];\n    let activeConditionIndex;\n    let claimCondition;\n    const decimals = await this.getTokenDecimals();\n    const quantityWithDecimals = utils.parseUnits(AmountSchema.parse(quantity), decimals);\n    if (addressToCheck === undefined) {\n      try {\n        addressToCheck = await this.contractWrapper.getSignerAddress();\n      } catch (err) {\n        console.warn(\"failed to get signer address\", err);\n      }\n    }\n\n    // if we have been unable to get a signer address, we can't check eligibility, so return a NoWallet error reason\n    if (!addressToCheck) {\n      return [ClaimEligibility.NoWallet];\n    }\n    const resolvedAddress = await resolveAddress(addressToCheck);\n    try {\n      claimCondition = await this.getActive();\n    } catch (err) {\n      if (includesErrorMessage(err, \"!CONDITION\") || includesErrorMessage(err, \"no active mint condition\")) {\n        reasons.push(ClaimEligibility.NoClaimConditionSet);\n        return reasons;\n      }\n      console.warn(\"failed to get active claim condition\", err);\n      reasons.push(ClaimEligibility.Unknown);\n      return reasons;\n    }\n    if (claimCondition.availableSupply !== \"unlimited\") {\n      const supplyWithDecimals = utils.parseUnits(claimCondition.availableSupply, decimals);\n      if (supplyWithDecimals.lt(quantityWithDecimals)) {\n        reasons.push(ClaimEligibility.NotEnoughSupply);\n        return reasons;\n      }\n    }\n\n    // check for merkle root inclusion\n    const merkleRootArray = utils.stripZeros(claimCondition.merkleRootHash);\n    const hasAllowList = merkleRootArray.length > 0;\n    let allowListEntry = null;\n    if (hasAllowList) {\n      allowListEntry = await this.getClaimerProofs(resolvedAddress);\n      if (!allowListEntry && (this.isLegacySinglePhaseDrop(this.contractWrapper) || this.isLegacyMultiPhaseDrop(this.contractWrapper))) {\n        // exclusive allowlist behavior\n        reasons.push(ClaimEligibility.AddressNotAllowed);\n        return reasons;\n      }\n      if (allowListEntry) {\n        try {\n          const claimVerification = await this.prepareClaim(quantity, false, decimals, resolvedAddress);\n          let validMerkleProof;\n          if (this.isLegacyMultiPhaseDrop(this.contractWrapper)) {\n            activeConditionIndex = await this.contractWrapper.read(\"getActiveClaimConditionId\", []);\n            // legacy verifyClaimerMerkleProofs function\n            [validMerkleProof] = await this.contractWrapper.read(\"verifyClaimMerkleProof\", [activeConditionIndex, resolvedAddress, quantity, claimVerification.proofs, claimVerification.maxClaimable]);\n            if (!validMerkleProof) {\n              reasons.push(ClaimEligibility.AddressNotAllowed);\n              return reasons;\n            }\n          } else if (this.isLegacySinglePhaseDrop(this.contractWrapper)) {\n            [validMerkleProof] = await this.contractWrapper.read(\"verifyClaimMerkleProof\", [resolvedAddress, quantity, {\n              proof: claimVerification.proofs,\n              maxQuantityInAllowlist: claimVerification.maxClaimable\n            }]);\n            if (!validMerkleProof) {\n              reasons.push(ClaimEligibility.AddressNotAllowed);\n              return reasons;\n            }\n          } else if (this.isNewSinglePhaseDrop(this.contractWrapper)) {\n            await this.contractWrapper.read(\"verifyClaim\", [resolvedAddress, quantity, claimVerification.currencyAddress, claimVerification.price, {\n              proof: claimVerification.proofs,\n              quantityLimitPerWallet: claimVerification.maxClaimable,\n              currency: claimVerification.currencyAddressInProof,\n              pricePerToken: claimVerification.priceInProof\n            }]);\n          } else if (this.isNewMultiphaseDrop(this.contractWrapper)) {\n            activeConditionIndex = await this.contractWrapper.read(\"getActiveClaimConditionId\", []);\n            await this.contractWrapper.read(\"verifyClaim\", [activeConditionIndex, resolvedAddress, quantity, claimVerification.currencyAddress, claimVerification.price, {\n              proof: claimVerification.proofs,\n              quantityLimitPerWallet: claimVerification.maxClaimable,\n              currency: claimVerification.currencyAddressInProof,\n              pricePerToken: claimVerification.priceInProof\n            }]);\n          }\n        } catch (e) {\n          console.warn(\"Merkle proof verification failed:\", \"reason\" in e ? e.reason : e);\n          const reason = e.reason;\n          switch (reason) {\n            case \"!Qty\":\n              reasons.push(ClaimEligibility.OverMaxClaimablePerWallet);\n              break;\n            case \"!PriceOrCurrency\":\n              reasons.push(ClaimEligibility.WrongPriceOrCurrency);\n              break;\n            case \"!MaxSupply\":\n              reasons.push(ClaimEligibility.NotEnoughSupply);\n              break;\n            case \"cant claim yet\":\n              reasons.push(ClaimEligibility.ClaimPhaseNotStarted);\n              break;\n            default:\n              {\n                reasons.push(ClaimEligibility.AddressNotAllowed);\n                break;\n              }\n          }\n          return reasons;\n        }\n      }\n    }\n    if (this.isNewSinglePhaseDrop(this.contractWrapper) || this.isNewMultiphaseDrop(this.contractWrapper)) {\n      let claimedSupply = BigNumber.from(0);\n      let maxClaimable = convertQuantityToBigNumber(claimCondition.maxClaimablePerWallet, decimals);\n      try {\n        claimedSupply = await this.getSupplyClaimedByWallet(resolvedAddress);\n      } catch (e) {\n        // no-op\n      }\n      if (allowListEntry) {\n        maxClaimable = convertQuantityToBigNumber(allowListEntry.maxClaimable, decimals);\n      }\n      if (maxClaimable.gt(0) && maxClaimable.lt(claimedSupply.add(quantityWithDecimals))) {\n        reasons.push(ClaimEligibility.OverMaxClaimablePerWallet);\n        return reasons;\n      }\n\n      // if there is no allowlist, or if there is an allowlist and the address is not in it\n      // if maxClaimable is 0, we consider it as the address is not allowed\n      if (!hasAllowList || hasAllowList && !allowListEntry) {\n        if (maxClaimable.lte(claimedSupply) || maxClaimable.eq(0)) {\n          reasons.push(ClaimEligibility.AddressNotAllowed);\n          return reasons;\n        }\n      }\n    }\n\n    // check for claim timestamp between claims (ONLY FOR LEGACY)\n    if (this.isLegacySinglePhaseDrop(this.contractWrapper) || this.isLegacyMultiPhaseDrop(this.contractWrapper)) {\n      let [lastClaimedTimestamp, timestampForNextClaim] = [BigNumber.from(0), BigNumber.from(0)];\n      if (this.isLegacyMultiPhaseDrop(this.contractWrapper)) {\n        activeConditionIndex = await this.contractWrapper.read(\"getActiveClaimConditionId\", []);\n        [lastClaimedTimestamp, timestampForNextClaim] = await this.contractWrapper.read(\"getClaimTimestamp\", [activeConditionIndex, resolvedAddress]);\n      } else if (this.isLegacySinglePhaseDrop(this.contractWrapper)) {\n        // check for claim timestamp between claims\n        [lastClaimedTimestamp, timestampForNextClaim] = await this.contractWrapper.read(\"getClaimTimestamp\", [resolvedAddress]);\n      }\n      const now = BigNumber.from(Date.now()).div(1000);\n      if (lastClaimedTimestamp.gt(0) && now.lt(timestampForNextClaim)) {\n        // contract will return MaxUint256 if user has already claimed and cannot claim again\n        if (timestampForNextClaim.eq(constants.MaxUint256)) {\n          reasons.push(ClaimEligibility.AlreadyClaimed);\n        } else {\n          reasons.push(ClaimEligibility.WaitBeforeNextClaimTransaction);\n        }\n        return reasons;\n      }\n    }\n\n    // if not within a browser conetext, check for wallet balance.\n    // In browser context, let the wallet do that job\n    if (claimCondition.price.gt(0) && isNode()) {\n      const totalPrice = claimCondition.price.mul(BigNumber.from(quantity));\n      const provider = this.contractWrapper.getProvider();\n      if (isNativeToken(claimCondition.currencyAddress)) {\n        const balance = await provider.getBalance(resolvedAddress);\n        if (balance.lt(totalPrice)) {\n          reasons.push(ClaimEligibility.NotEnoughTokens);\n        }\n      } else {\n        const erc20 = new ContractWrapper(provider, claimCondition.currencyAddress, ERC20Abi, {}, this.storage);\n        const balance = await erc20.read(\"balanceOf\", [resolvedAddress]);\n        if (balance.lt(totalPrice)) {\n          reasons.push(ClaimEligibility.NotEnoughTokens);\n        }\n      }\n    }\n    return reasons;\n  }\n\n  /**\n   * Returns allow list information and merkle proofs for the given address.\n   * @param claimerAddress - the claimer address\n   * @param claimConditionId - optional the claim condition id to get the proofs for\n   */\n  async getClaimerProofs(claimerAddress, claimConditionId) {\n    const claimCondition = await this.get(claimConditionId);\n    const merkleRoot = claimCondition.merkleRoot;\n    const merkleRootArray = utils.stripZeros(merkleRoot);\n    if (merkleRootArray.length > 0) {\n      const metadata = await this.metadata.get();\n      const resolvedAddress = await resolveAddress(claimerAddress);\n      return await fetchSnapshotEntryForAddress(resolvedAddress, merkleRoot.toString(), metadata.merkle, this.contractWrapper.getProvider(), this.storage, this.getSnapshotFormatVersion());\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Get the total supply claimed by a specific wallet\n   * @param walletAddress the wallet address to check\n   * @returns the total supply claimed\n   */\n  async getSupplyClaimedByWallet(walletAddress) {\n    const resolvedAddress = await resolveAddress(walletAddress);\n    if (this.isNewSinglePhaseDrop(this.contractWrapper)) {\n      return await this.contractWrapper.read(\"getSupplyClaimedByWallet\", [resolvedAddress]);\n    }\n    if (this.isNewMultiphaseDrop(this.contractWrapper)) {\n      const activeClaimConditionId = await this.contractWrapper.read(\"getActiveClaimConditionId\", []);\n      return await this.contractWrapper.read(\"getSupplyClaimedByWallet\", [activeClaimConditionId, resolvedAddress]);\n    }\n    throw new Error(\"This contract does not support the getSupplyClaimedByWallet function\");\n  }\n  /** ***************************************\n   * PRIVATE FUNCTIONS\n   *****************************************/\n\n  async getTokenDecimals() {\n    if (detectContractFeature(this.contractWrapper, \"ERC20\")) {\n      return this.contractWrapper.read(\"decimals\", []);\n    } else {\n      return Promise.resolve(0);\n    }\n  }\n\n  /**\n   * Returns proofs and the overrides required for the transaction.\n   *\n   * @returns - `overrides` and `proofs` as an object.\n   * @internal\n   */\n  async prepareClaim(quantity, checkERC20Allowance) {\n    let decimals = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let address = arguments.length > 3 ? arguments[3] : undefined;\n    const addressToClaim = address ? address : await this.contractWrapper.getSignerAddress();\n    return prepareClaim(addressToClaim, quantity, await this.getActive(), async () => (await this.metadata.get()).merkle, decimals, this.contractWrapper, this.storage, checkERC20Allowance, this.getSnapshotFormatVersion());\n  }\n  async getClaimArguments(destinationAddress, quantity, claimVerification) {\n    const resolvedAddress = await resolveAddress(destinationAddress);\n    if (this.isLegacyMultiPhaseDrop(this.contractWrapper)) {\n      return [resolvedAddress, quantity, claimVerification.currencyAddress, claimVerification.price, claimVerification.proofs, claimVerification.maxClaimable];\n    } else if (this.isLegacySinglePhaseDrop(this.contractWrapper)) {\n      return [resolvedAddress, quantity, claimVerification.currencyAddress, claimVerification.price, {\n        proof: claimVerification.proofs,\n        maxQuantityInAllowlist: claimVerification.maxClaimable\n      }, utils.toUtf8Bytes(\"\")];\n    }\n    return [resolvedAddress, quantity, claimVerification.currencyAddress, claimVerification.price, {\n      proof: claimVerification.proofs,\n      quantityLimitPerWallet: claimVerification.maxClaimable,\n      pricePerToken: claimVerification.priceInProof,\n      currency: claimVerification.currencyAddressInProof\n    }, utils.toUtf8Bytes(\"\")];\n  }\n\n  /**\n   * Construct a claim transaction without executing it.\n   * This is useful for estimating the gas cost of a claim transaction, overriding transaction options and having fine grained control over the transaction execution.\n   * @param destinationAddress\n   * @param quantity\n   * @param options\n   *\n   * @deprecated Use `contract.erc721.claim.prepare(...args)` instead\n   */\n  async getClaimTransaction(destinationAddress, quantity, options) {\n    // TODO: Transaction Sequence Pattern\n    if (options !== null && options !== void 0 && options.pricePerToken) {\n      throw new Error(\"Price per token is be set via claim conditions by calling `contract.erc721.claimConditions.set()`\");\n    }\n    const claimVerification = await this.prepareClaim(quantity, (options === null || options === void 0 ? void 0 : options.checkERC20Allowance) === undefined ? true : options.checkERC20Allowance, await this.getTokenDecimals());\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"claim\",\n      args: await this.getClaimArguments(destinationAddress, quantity, claimVerification),\n      overrides: claimVerification.overrides\n    });\n  }\n  isNewSinglePhaseDrop(contractWrapper) {\n    return detectContractFeature(contractWrapper, \"ERC721ClaimConditionsV2\") || detectContractFeature(contractWrapper, \"ERC20ClaimConditionsV2\");\n  }\n  isNewMultiphaseDrop(contractWrapper) {\n    return detectContractFeature(contractWrapper, \"ERC721ClaimPhasesV2\") || detectContractFeature(contractWrapper, \"ERC20ClaimPhasesV2\");\n  }\n  isLegacySinglePhaseDrop(contractWrapper) {\n    return detectContractFeature(contractWrapper, \"ERC721ClaimConditionsV1\") || detectContractFeature(contractWrapper, \"ERC20ClaimConditionsV1\");\n  }\n  isLegacyMultiPhaseDrop(contractWrapper) {\n    return detectContractFeature(contractWrapper, \"ERC721ClaimPhasesV1\") || detectContractFeature(contractWrapper, \"ERC20ClaimPhasesV1\");\n  }\n  getSnapshotFormatVersion() {\n    return this.isLegacyMultiPhaseDrop(this.contractWrapper) || this.isLegacySinglePhaseDrop(this.contractWrapper) ? SnapshotFormatVersion.V1 : SnapshotFormatVersion.V2;\n  }\n}\n\n/**\n * Manages claim conditions for Edition Drop contracts\n * @public\n */\nclass DropErc1155ClaimConditions {\n  constructor(contractWrapper, _metadata2, storage) {\n    /** ***************************************\n     * WRITE FUNCTIONS\n     *****************************************/\n    /**\n     * Set claim conditions on a single NFT\n     *\n     * @remarks Sets the public mint conditions that need to be fulfilled by users to claim a particular NFT in this contract.\n     *\n     * @example\n     * ```javascript\n     * const presaleStartTime = new Date();\n     * const publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n     *\n     * // Optionally specify addresses that can claim\n     * const snapshots = ['0x...', '0x...']\n     *\n     * // Or alternatively, you can pass snapshots with the max number of NFTs each address can claim\n     * // const snapshots = [{ address: '0x...', maxClaimable: 1 }, { address: '0x...', maxClaimable: 2 }]\n     *\n     * const claimConditions = [\n     *   {\n     *     startTime: presaleStartTime, // start the presale now\n     *     maxClaimableSupply: 2, // limit how many mints for this presale\n     *     price: 0.01, // presale price\n     *     snapshot: snapshots, // limit minting to only certain addresses\n     *   },\n     *   {\n     *     startTime: publicSaleStartTime, // 24h after presale, start public sale\n     *     price: 0.08, // public sale price\n     *   }\n     * ]);\n     *\n     * const tokenId = 0; // the id of the NFT to set claim conditions on\n     * await dropContract.claimConditions.set(tokenId, claimConditions);\n     * ```\n     *\n     * @param tokenId - The id of the NFT to set the claim conditions on\n     * @param claimConditionInputs - The claim conditions\n     * @param resetClaimEligibilityForAll - Whether to reset the state of who already claimed NFTs previously\n     */\n    _defineProperty(this, \"set\", /* @__PURE__ */buildTransactionFunction((() => {\n      var _this = this;\n      return async function (tokenId, claimConditionInputs) {\n        let resetClaimEligibilityForAll = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n        return _this.setBatch.prepare([{\n          tokenId,\n          claimConditions: claimConditionInputs\n        }], resetClaimEligibilityForAll);\n      };\n    })()));\n    /**\n     * Set claim conditions on multiple NFTs at once\n     *\n     * @remarks Sets the claim conditions that need to be fulfilled by users to claim the given NFTs in this contract.\n     *\n     * @example\n     * ```javascript\n     * const claimConditionsForTokens = [\n     *   {\n     *     tokenId: 0,\n     *     claimConditions: [{\n     *       startTime: new Date(), // start the claim phase now\n     *       maxClaimableSupply: 2, // limit how many mints for this tokenId\n     *       price: 0.01, // price for this tokenId\n     *       snapshot: ['0x...', '0x...'], // limit minting to only certain addresses\n     *     }]\n     *   },\n     *   {\n     *     tokenId: 1,\n     *     claimConditions: [{\n     *       startTime: new Date(),\n     *       price: 0.08, // different price for this tokenId\n     *     }]\n     *   },\n     * ];\n     *\n     * await dropContract.claimConditions.setBatch(claimConditionsForTokens);\n     * ```\n     *\n     * @param claimConditionsForToken - The claim conditions for each NFT\n     * @param resetClaimEligibilityForAll - Whether to reset the state of who already claimed NFTs previously\n     */\n    _defineProperty(this, \"setBatch\", /* @__PURE__ */buildTransactionFunction((() => {\n      var _this2 = this;\n      return async function (claimConditionsForToken) {\n        let resetClaimEligibilityForAll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        const merkleInfo = {};\n        const processedClaimConditions = await Promise.all(claimConditionsForToken.map(async _ref => {\n          let {\n            tokenId,\n            claimConditions\n          } = _ref;\n          // sanitize for single phase deletions\n          let claimConditionsProcessed = claimConditions;\n          if (_this2.isLegacySinglePhaseDrop(_this2.contractWrapper)) {\n            resetClaimEligibilityForAll = true;\n            if (claimConditions.length === 0) {\n              claimConditionsProcessed = [{\n                startTime: new Date(0),\n                currencyAddress: constants.AddressZero,\n                price: 0,\n                maxClaimableSupply: 0,\n                maxClaimablePerWallet: 0,\n                waitInSeconds: 0,\n                merkleRootHash: utils.hexZeroPad([0], 32),\n                snapshot: []\n              }];\n            } else if (claimConditions.length > 1) {\n              throw new Error(\"Single phase drop contract cannot have multiple claim conditions, only one is allowed\");\n            }\n          }\n          // if using new snapshot format, make sure that maxClaimablePerWallet is set if allowlist is set as well\n          if (_this2.isNewSinglePhaseDrop(_this2.contractWrapper) || _this2.isNewMultiphaseDrop(_this2.contractWrapper)) {\n            claimConditionsProcessed.forEach(cc => {\n              var _cc$maxClaimablePerWa2;\n              if (cc.snapshot && cc.snapshot.length > 0 && (cc.maxClaimablePerWallet === undefined || cc.maxClaimablePerWallet === \"unlimited\")) {\n                throw new Error(\"maxClaimablePerWallet must be set to a specific value when an allowlist is set.\\n\" + \"Set it to 0 to only allow addresses in the allowlist to claim the amount specified in the allowlist.\" + \"\\n\\nex:\\n\" + \"contract.claimConditions.set(tokenId, [{ snapshot: [{ address: '0x...', maxClaimable: 1 }], maxClaimablePerWallet: 0 }])\");\n              }\n              if (cc.snapshot && cc.snapshot.length > 0 && ((_cc$maxClaimablePerWa2 = cc.maxClaimablePerWallet) === null || _cc$maxClaimablePerWa2 === void 0 ? void 0 : _cc$maxClaimablePerWa2.toString()) === \"0\" && cc.snapshot.map(s => {\n                if (typeof s === \"string\") {\n                  return 0;\n                } else {\n                  var _s$maxClaimable2;\n                  return Number(((_s$maxClaimable2 = s.maxClaimable) === null || _s$maxClaimable2 === void 0 ? void 0 : _s$maxClaimable2.toString()) || 0);\n                }\n              }).reduce((acc, current) => {\n                return acc + current;\n              }, 0) === 0) {\n                throw new Error(\"maxClaimablePerWallet is set to 0, and all addresses in the allowlist have max claimable 0. This means that no one can claim.\");\n              }\n            });\n          }\n          // process inputs\n          const {\n            snapshotInfos,\n            sortedConditions\n          } = await processClaimConditionInputs(claimConditionsProcessed, 0, _this2.contractWrapper.getProvider(), _this2.storage, _this2.getSnapshotFormatVersion());\n          snapshotInfos.forEach(s => {\n            merkleInfo[s.merkleRoot] = s.snapshotUri;\n          });\n          return {\n            tokenId,\n            sortedConditions\n          };\n        }));\n        const metadata = await _this2.metadata.get();\n        const encoded = [];\n\n        // keep the old merkle roots from other tokenIds\n        for (const key of Object.keys(metadata.merkle || {})) {\n          merkleInfo[key] = metadata.merkle[key];\n        }\n\n        // upload new merkle roots to snapshot URIs if updated\n        if (!deepEqual(metadata.merkle, merkleInfo)) {\n          const mergedMetadata = await _this2.metadata.parseInputMetadata({\n            ...metadata,\n            merkle: merkleInfo\n          });\n          // using internal method to just upload, avoids one contract call\n          const contractURI = await _this2.metadata._parseAndUploadMetadata(mergedMetadata);\n          if (hasFunction(\"setContractURI\", _this2.contractWrapper)) {\n            const contractEncoder = new ContractEncoder(_this2.contractWrapper);\n            encoded.push(contractEncoder.encode(\"setContractURI\", [contractURI]));\n          } else {\n            throw new Error(\"Setting a merkle root requires implementing ContractMetadata in your contract to support storing a merkle root.\");\n          }\n        }\n        processedClaimConditions.forEach(_ref2 => {\n          let {\n            tokenId,\n            sortedConditions\n          } = _ref2;\n          const baseContractEncoder = new ContractEncoder(_this2.contractWrapper);\n          if (_this2.isLegacySinglePhaseDrop(_this2.contractWrapper)) {\n            const legacyContractEncoder = new ContractEncoder(_this2.contractWrapper);\n            encoded.push(legacyContractEncoder.encode(\"setClaimConditions\", [tokenId, abstractContractModelToLegacy(sortedConditions[0]), resetClaimEligibilityForAll]));\n          } else if (_this2.isLegacyMultiPhaseDrop(_this2.contractWrapper)) {\n            encoded.push(baseContractEncoder.encode(\"setClaimConditions\", [tokenId, sortedConditions.map(abstractContractModelToLegacy), resetClaimEligibilityForAll]));\n          } else if (_this2.isNewSinglePhaseDrop(_this2.contractWrapper)) {\n            encoded.push(baseContractEncoder.encode(\"setClaimConditions\", [tokenId, abstractContractModelToNew(sortedConditions[0]), resetClaimEligibilityForAll]));\n          } else if (_this2.isNewMultiphaseDrop(_this2.contractWrapper)) {\n            encoded.push(baseContractEncoder.encode(\"setClaimConditions\", [tokenId, sortedConditions.map(abstractContractModelToNew), resetClaimEligibilityForAll]));\n          } else {\n            throw new Error(\"Contract does not support claim conditions\");\n          }\n        });\n        if (hasFunction(\"multicall\", _this2.contractWrapper)) {\n          return Transaction.fromContractWrapper({\n            contractWrapper: _this2.contractWrapper,\n            method: \"multicall\",\n            args: [encoded]\n          });\n        }\n        throw new Error(\"Contract does not support multicall\");\n      };\n    })()));\n    /**\n     * Update a single claim condition with new data.\n     * @param tokenId - the token id to update\n     * @param index - the index of the claim condition to update, as given by the index from the result of `getAll()`\n     * @param claimConditionInput - the new data to update, previous data will be retained\n     */\n    _defineProperty(this, \"update\", /* @__PURE__ */buildTransactionFunction(async (tokenId, index, claimConditionInput) => {\n      const existingConditions = await this.getAll(tokenId);\n      const newConditionInputs = await updateExistingClaimConditions(index, claimConditionInput, existingConditions);\n      return await this.set.prepare(tokenId, newConditionInputs);\n    }));\n    this.storage = storage;\n    this.contractWrapper = contractWrapper;\n    this.metadata = _metadata2;\n  }\n\n  /** ***************************************\n   * READ FUNCTIONS\n   *****************************************/\n\n  /**\n   * Get the currently active claim condition\n   *\n   * @returns the claim condition metadata\n   */\n  async getActive(tokenId, options) {\n    const mc = await this.get(tokenId);\n    const metadata = await this.metadata.get();\n    return await transformResultToClaimCondition(mc, 0, this.contractWrapper.getProvider(), metadata.merkle, this.storage, (options === null || options === void 0 ? void 0 : options.withAllowList) || false);\n  }\n  async get(tokenId, conditionId) {\n    if (this.isLegacySinglePhaseDrop(this.contractWrapper)) {\n      const contractModel = await this.contractWrapper.read(\"claimCondition\", [tokenId]);\n      return legacyContractModelToAbstract(contractModel);\n    } else if (this.isLegacyMultiPhaseDrop(this.contractWrapper)) {\n      const id = conditionId !== undefined ? conditionId : await this.contractWrapper.read(\"getActiveClaimConditionId\", [tokenId]);\n      const contractModel = await this.contractWrapper.read(\"getClaimConditionById\", [tokenId, id]);\n      return legacyContractModelToAbstract(contractModel);\n    } else if (this.isNewSinglePhaseDrop(this.contractWrapper)) {\n      const contractModel = await this.contractWrapper.read(\"claimCondition\", [tokenId]);\n      return newContractModelToAbstract(contractModel);\n    } else if (this.isNewMultiphaseDrop(this.contractWrapper)) {\n      const id = conditionId !== undefined ? conditionId : await this.contractWrapper.read(\"getActiveClaimConditionId\", [tokenId]);\n      const contractModel = await this.contractWrapper.read(\"getClaimConditionById\", [tokenId, id]);\n      return newContractModelToAbstract(contractModel);\n    } else {\n      throw new Error(\"Contract does not support claim conditions\");\n    }\n  }\n\n  /**\n   * Get all the claim conditions\n   *\n   * @returns the claim conditions metadata\n   */\n  async getAll(tokenId, options) {\n    if (this.isLegacyMultiPhaseDrop(this.contractWrapper) || this.isNewMultiphaseDrop(this.contractWrapper)) {\n      const claimCondition = await this.contractWrapper.read(\"claimCondition\", [tokenId]);\n      const startId = claimCondition.currentStartId.toNumber();\n      const count = claimCondition.count.toNumber();\n      const conditions = [];\n      for (let i = startId; i < startId + count; i++) {\n        conditions.push(await this.get(tokenId, i));\n      }\n      const metadata = await this.metadata.get();\n      return Promise.all(conditions.map(c => transformResultToClaimCondition(c, 0, this.contractWrapper.getProvider(), metadata.merkle, this.storage, (options === null || options === void 0 ? void 0 : options.withAllowList) || false)));\n    } else {\n      return [await this.getActive(tokenId, options)];\n    }\n  }\n\n  /**\n   * Can Claim\n   *\n   * @remarks Check if a particular NFT can currently be claimed by a given user.\n   *\n   * @example\n   * ```javascript\n   * // Quantity of tokens to check claimability of\n   * const quantity = 1;\n   * const canClaim = await contract.canClaim(quantity);\n   * ```\n   */\n  async canClaim(tokenId, quantity, addressToCheck) {\n    // TODO switch to use verifyClaim\n    if (addressToCheck) {\n      addressToCheck = await resolveAddress(addressToCheck);\n    }\n    return (await this.getClaimIneligibilityReasons(tokenId, quantity, addressToCheck)).length === 0;\n  }\n\n  /**\n   * For any claim conditions that a particular wallet is violating,\n   * this function returns human-readable information about the\n   * breaks in the condition that can be used to inform the user.\n   *\n   * @param tokenId - the token id to check\n   * @param quantity - The desired quantity that would be claimed.\n   * @param addressToCheck - The wallet address, defaults to the connected wallet.\n   *\n   */\n  async getClaimIneligibilityReasons(tokenId, quantity, addressToCheck) {\n    const reasons = [];\n    let activeConditionIndex;\n    let claimCondition;\n    if (addressToCheck === undefined) {\n      try {\n        addressToCheck = await this.contractWrapper.getSignerAddress();\n      } catch (err) {\n        console.warn(\"failed to get signer address\", err);\n      }\n    }\n\n    // if we have been unable to get a signer address, we can't check eligibility, so return a NoWallet error reason\n    if (!addressToCheck) {\n      return [ClaimEligibility.NoWallet];\n    }\n    const resolvedAddress = await resolveAddress(addressToCheck);\n    try {\n      claimCondition = await this.getActive(tokenId);\n    } catch (err) {\n      if (includesErrorMessage(err, \"!CONDITION\") || includesErrorMessage(err, \"no active mint condition\")) {\n        reasons.push(ClaimEligibility.NoClaimConditionSet);\n        return reasons;\n      }\n      reasons.push(ClaimEligibility.Unknown);\n      return reasons;\n    }\n    if (claimCondition.availableSupply !== \"unlimited\") {\n      if (BigNumber.from(claimCondition.availableSupply).lt(quantity)) {\n        reasons.push(ClaimEligibility.NotEnoughSupply);\n        return reasons;\n      }\n    }\n\n    // check for merkle root inclusion\n    const merkleRootArray = utils.stripZeros(claimCondition.merkleRootHash);\n    const hasAllowList = merkleRootArray.length > 0;\n    let allowListEntry = null;\n    if (hasAllowList) {\n      allowListEntry = await this.getClaimerProofs(tokenId, resolvedAddress);\n      if (!allowListEntry && (this.isLegacySinglePhaseDrop(this.contractWrapper) || this.isLegacyMultiPhaseDrop(this.contractWrapper))) {\n        // exclusive allowlist behavior\n        reasons.push(ClaimEligibility.AddressNotAllowed);\n        return reasons;\n      }\n      if (allowListEntry) {\n        try {\n          const claimVerification = await this.prepareClaim(tokenId, quantity, false, resolvedAddress);\n          let validMerkleProof;\n          if (this.isLegacyMultiPhaseDrop(this.contractWrapper)) {\n            activeConditionIndex = await this.contractWrapper.read(\"getActiveClaimConditionId\", [tokenId]);\n            // legacy verifyClaimerMerkleProofs function\n            [validMerkleProof] = await this.contractWrapper.read(\"verifyClaimMerkleProof\", [activeConditionIndex, resolvedAddress, tokenId, quantity, claimVerification.proofs, claimVerification.maxClaimable]);\n            if (!validMerkleProof) {\n              reasons.push(ClaimEligibility.AddressNotAllowed);\n              return reasons;\n            }\n          } else if (this.isLegacySinglePhaseDrop(this.contractWrapper)) {\n            [validMerkleProof] = await this.contractWrapper.read(\"verifyClaimMerkleProof\", [tokenId, resolvedAddress, quantity, {\n              proof: claimVerification.proofs,\n              maxQuantityInAllowlist: claimVerification.maxClaimable\n            }]);\n            if (!validMerkleProof) {\n              reasons.push(ClaimEligibility.AddressNotAllowed);\n              return reasons;\n            }\n          } else if (this.isNewSinglePhaseDrop(this.contractWrapper)) {\n            await this.contractWrapper.read(\"verifyClaim\", [tokenId, resolvedAddress, quantity, claimVerification.currencyAddress, claimVerification.price, {\n              proof: claimVerification.proofs,\n              quantityLimitPerWallet: claimVerification.maxClaimable,\n              currency: claimVerification.currencyAddressInProof,\n              pricePerToken: claimVerification.priceInProof\n            }]);\n          } else if (this.isNewMultiphaseDrop(this.contractWrapper)) {\n            activeConditionIndex = await this.contractWrapper.read(\"getActiveClaimConditionId\", [tokenId]);\n            await this.contractWrapper.read(\"verifyClaim\", [activeConditionIndex, resolvedAddress, tokenId, quantity, claimVerification.currencyAddress, claimVerification.price, {\n              proof: claimVerification.proofs,\n              quantityLimitPerWallet: claimVerification.maxClaimable,\n              currency: claimVerification.currencyAddressInProof,\n              pricePerToken: claimVerification.priceInProof\n            }]);\n          }\n        } catch (e) {\n          console.warn(\"Merkle proof verification failed:\", \"reason\" in e ? e.reason : e);\n          const reason = e.reason;\n          switch (reason) {\n            case \"!Qty\":\n              reasons.push(ClaimEligibility.OverMaxClaimablePerWallet);\n              break;\n            case \"!PriceOrCurrency\":\n              reasons.push(ClaimEligibility.WrongPriceOrCurrency);\n              break;\n            case \"!MaxSupply\":\n              reasons.push(ClaimEligibility.NotEnoughSupply);\n              break;\n            case \"cant claim yet\":\n              reasons.push(ClaimEligibility.ClaimPhaseNotStarted);\n              break;\n            default:\n              {\n                reasons.push(ClaimEligibility.AddressNotAllowed);\n                break;\n              }\n          }\n          return reasons;\n        }\n      }\n    }\n    if (this.isNewSinglePhaseDrop(this.contractWrapper) || this.isNewMultiphaseDrop(this.contractWrapper)) {\n      let claimedSupply = BigNumber.from(0);\n      let maxClaimable = convertQuantityToBigNumber(claimCondition.maxClaimablePerWallet, 0);\n      try {\n        claimedSupply = await this.getSupplyClaimedByWallet(tokenId, resolvedAddress);\n      } catch (e) {\n        // no-op\n      }\n      if (allowListEntry) {\n        maxClaimable = convertQuantityToBigNumber(allowListEntry.maxClaimable, 0);\n      }\n      if (maxClaimable.gt(0) && maxClaimable.lt(claimedSupply.add(quantity))) {\n        reasons.push(ClaimEligibility.OverMaxClaimablePerWallet);\n        return reasons;\n      }\n\n      // if there is no allowlist, or if there is an allowlist and the address is not in it\n      // if maxClaimable is 0, we consider it as the address is not allowed\n      if (!hasAllowList || hasAllowList && !allowListEntry) {\n        if (maxClaimable.lte(claimedSupply) || maxClaimable.eq(0)) {\n          reasons.push(ClaimEligibility.AddressNotAllowed);\n          return reasons;\n        }\n      }\n    }\n\n    // check for claim timestamp between claims\n    let [lastClaimedTimestamp, timestampForNextClaim] = [BigNumber.from(0), BigNumber.from(0)];\n    if (this.isLegacyMultiPhaseDrop(this.contractWrapper)) {\n      activeConditionIndex = await this.contractWrapper.read(\"getActiveClaimConditionId\", [tokenId]);\n      [lastClaimedTimestamp, timestampForNextClaim] = await this.contractWrapper.read(\"getClaimTimestamp\", [tokenId, activeConditionIndex, resolvedAddress]);\n    } else if (this.isLegacySinglePhaseDrop(this.contractWrapper)) {\n      [lastClaimedTimestamp, timestampForNextClaim] = await this.contractWrapper.read(\"getClaimTimestamp\", [tokenId, resolvedAddress]);\n    }\n    const now = BigNumber.from(Date.now()).div(1000);\n    if (lastClaimedTimestamp.gt(0) && now.lt(timestampForNextClaim)) {\n      // contract will return MaxUint256 if user has already claimed and cannot claim again\n      if (timestampForNextClaim.eq(constants.MaxUint256)) {\n        reasons.push(ClaimEligibility.AlreadyClaimed);\n      } else {\n        reasons.push(ClaimEligibility.WaitBeforeNextClaimTransaction);\n      }\n      return reasons;\n    }\n\n    // if not within a browser conetext, check for wallet balance.\n    // In browser context, let the wallet do that job\n    if (claimCondition.price.gt(0) && isNode()) {\n      const totalPrice = claimCondition.price.mul(quantity);\n      const provider = this.contractWrapper.getProvider();\n      if (isNativeToken(claimCondition.currencyAddress)) {\n        const balance = await provider.getBalance(resolvedAddress);\n        if (balance.lt(totalPrice)) {\n          reasons.push(ClaimEligibility.NotEnoughTokens);\n        }\n      } else {\n        const erc20 = new ContractWrapper(provider, claimCondition.currencyAddress, ERC20Abi, {}, this.storage);\n        const balance = await erc20.read(\"balanceOf\", [resolvedAddress]);\n        if (balance.lt(totalPrice)) {\n          reasons.push(ClaimEligibility.NotEnoughTokens);\n        }\n      }\n    }\n    return reasons;\n  }\n\n  /**\n   * Returns allow list information and merkle proofs for the given address.\n   * @param tokenId - the token ID to check\n   * @param claimerAddress - the claimer address\n   * @param claimConditionId - optional the claim condition id to get the proofs for\n   */\n  async getClaimerProofs(tokenId, claimerAddress, claimConditionId) {\n    const claimCondition = await this.get(tokenId, claimConditionId);\n    const merkleRoot = claimCondition.merkleRoot;\n    const merkleRootArray = utils.stripZeros(merkleRoot);\n    if (merkleRootArray.length > 0) {\n      const metadata = await this.metadata.get();\n      const resolvedAddress = await resolveAddress(claimerAddress);\n      return await fetchSnapshotEntryForAddress(resolvedAddress, merkleRoot.toString(), metadata.merkle, this.contractWrapper.getProvider(), this.storage, this.getSnapshotFormatVersion());\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Get the total supply claimed by a specific wallet\n   * @param walletAddress the wallet address to check\n   * @returns the total supply claimed\n   */\n  async getSupplyClaimedByWallet(tokenId, walletAddress) {\n    const resolvedAddress = await resolveAddress(walletAddress);\n    if (this.isNewSinglePhaseDrop(this.contractWrapper)) {\n      return await this.contractWrapper.read(\"getSupplyClaimedByWallet\", [tokenId, resolvedAddress]);\n    }\n    if (this.isNewMultiphaseDrop(this.contractWrapper)) {\n      const activeClaimConditionId = await this.contractWrapper.read(\"getActiveClaimConditionId\", [tokenId]);\n      return await this.contractWrapper.read(\"getSupplyClaimedByWallet\", [tokenId, activeClaimConditionId, resolvedAddress]);\n    }\n    throw new Error(\"This contract does not support the getSupplyClaimedByWallet function\");\n  }\n  /**\n   * Returns proofs and the overrides required for the transaction.\n   *\n   * @returns - `overrides` and `proofs` as an object.\n   */\n  async prepareClaim(tokenId, quantity, checkERC20Allowance, address) {\n    const addressToClaim = await resolveAddress(address ? address : await this.contractWrapper.getSignerAddress());\n    return prepareClaim(addressToClaim, quantity, await this.getActive(tokenId), async () => (await this.metadata.get()).merkle, 0, this.contractWrapper, this.storage, checkERC20Allowance, this.getSnapshotFormatVersion());\n  }\n  async getClaimArguments(tokenId, destinationAddress, quantity, claimVerification) {\n    const resolvedAddress = await resolveAddress(destinationAddress);\n    if (this.isLegacyMultiPhaseDrop(this.contractWrapper)) {\n      return [resolvedAddress, tokenId, quantity, claimVerification.currencyAddress, claimVerification.price, claimVerification.proofs, claimVerification.maxClaimable];\n    } else if (this.isLegacySinglePhaseDrop(this.contractWrapper)) {\n      return [resolvedAddress, tokenId, quantity, claimVerification.currencyAddress, claimVerification.price, {\n        proof: claimVerification.proofs,\n        maxQuantityInAllowlist: claimVerification.maxClaimable\n      }, utils.toUtf8Bytes(\"\")];\n    }\n    return [resolvedAddress, tokenId, quantity, claimVerification.currencyAddress, claimVerification.price, {\n      proof: claimVerification.proofs,\n      quantityLimitPerWallet: claimVerification.maxClaimable,\n      pricePerToken: claimVerification.priceInProof,\n      currency: claimVerification.currencyAddressInProof\n    }, utils.toUtf8Bytes(\"\")];\n  }\n\n  /**\n   * Construct a claim transaction without executing it.\n   * This is useful for estimating the gas cost of a claim transaction, overriding transaction options and having fine grained control over the transaction execution.\n   * @param destinationAddress - Address you want to send the token to\n   * @param tokenId - Id of the token you want to claim\n   * @param quantity - Quantity of the tokens you want to claim\n   *\n   * @deprecated Use `contract.erc1155.claim.prepare(...args)` instead\n   */\n  async getClaimTransaction(destinationAddress, tokenId, quantity, options) {\n    if (options !== null && options !== void 0 && options.pricePerToken) {\n      throw new Error(\"Price per token should be set via claim conditions by calling `contract.erc1155.claimConditions.set()`\");\n    }\n    const claimVerification = await this.prepareClaim(tokenId, quantity, (options === null || options === void 0 ? void 0 : options.checkERC20Allowance) || true);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"claim\",\n      args: await this.getClaimArguments(tokenId, destinationAddress, quantity, claimVerification),\n      overrides: claimVerification.overrides\n    });\n  }\n  isNewSinglePhaseDrop(contractWrapper) {\n    return detectContractFeature(contractWrapper, \"ERC1155ClaimConditionsV2\");\n  }\n  isNewMultiphaseDrop(contractWrapper) {\n    return detectContractFeature(contractWrapper, \"ERC1155ClaimPhasesV2\");\n  }\n  isLegacySinglePhaseDrop(contractWrapper) {\n    return detectContractFeature(contractWrapper, \"ERC1155ClaimConditionsV1\");\n  }\n  isLegacyMultiPhaseDrop(contractWrapper) {\n    return detectContractFeature(contractWrapper, \"ERC1155ClaimPhasesV1\");\n  }\n  getSnapshotFormatVersion() {\n    return this.isLegacyMultiPhaseDrop(this.contractWrapper) || this.isLegacySinglePhaseDrop(this.contractWrapper) ? SnapshotFormatVersion.V1 : SnapshotFormatVersion.V2;\n  }\n}\n\n/**\n * Mint Many ERC20 Tokens at once\n * @remarks Token batch minting functionality that handles unit parsing for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.token.mint.batch.to(walletAddress, [nftMetadata1, nftMetadata2, ...]);\n * ```\n * @public\n */\n\nclass Erc20BatchMintable {\n  constructor(erc20, contractWrapper) {\n    _defineProperty(this, \"featureName\", FEATURE_TOKEN_BATCH_MINTABLE.name);\n    /**\n     * Mint Tokens To Many Wallets\n     *\n     * @remarks Mint tokens to many wallets in one transaction.\n     *\n     * @example\n     * ```javascript\n     * // Data of the tokens you want to mint\n     * const data = [\n     *   {\n     *     toAddress: \"{{wallet_address}}\", // Address to mint tokens to\n     *     amount: 0.2, // How many tokens to mint to specified address\n     *   },\n     *  {\n     *    toAddress: \"0x...\",\n     *    amount: 1.4,\n     *  }\n     * ]\n     *\n     * await contract.token.mint.batch(data);\n     * ```\n     */\n    _defineProperty(this, \"to\", /* @__PURE__ */buildTransactionFunction(async args => {\n      const encoded = [];\n      const contractEncoder = new ContractEncoder(this.contractWrapper);\n      for (const arg of args) {\n        encoded.push(contractEncoder.encode(\"mintTo\", [await resolveAddress(arg.toAddress), await this.erc20.normalizeAmount(arg.amount)]));\n      }\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"multicall\",\n        args: [encoded]\n      });\n    }));\n    this.erc20 = erc20;\n    this.contractWrapper = contractWrapper;\n  }\n}\nclass Erc20Burnable {\n  constructor(erc20, contractWrapper) {\n    _defineProperty(this, \"featureName\", FEATURE_TOKEN_BURNABLE.name);\n    /**\n     * Burn Tokens\n     *\n     * @remarks Burn tokens held by the connected wallet\n     *\n     * @example\n     * ```javascript\n     * // The amount of this token you want to burn\n     * const amount = 1.2;\n     *\n     * await contract.token.burn.tokens(amount);\n     * ```\n     */\n    _defineProperty(this, \"tokens\", /* @__PURE__ */buildTransactionFunction(async amount => {\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"burn\",\n        args: [await this.erc20.normalizeAmount(amount)]\n      });\n    }));\n    /**\n     * Burn Tokens\n     *\n     * @remarks Burn tokens held by the specified wallet\n     *\n     * @example\n     * ```javascript\n     * // Address of the wallet sending the tokens\n     * const holderAddress = \"{{wallet_address}}\";\n     *\n     * // The amount of this token you want to burn\n     * const amount = 1.2;\n     *\n     * await contract.token.burn.from(holderAddress, amount);\n     * ```\n     */\n    _defineProperty(this, \"from\", /* @__PURE__ */buildTransactionFunction(async (holder, amount) => {\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"burnFrom\",\n        args: [await resolveAddress(holder), await this.erc20.normalizeAmount(amount)]\n      });\n    }));\n    this.erc20 = erc20;\n    this.contractWrapper = contractWrapper;\n  }\n}\n\n/**\n * Configure and claim ERC20 tokens\n * @remarks Manage claim phases and claim ERC20 tokens that have been lazily minted.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.token.drop.claim.to(\"0x...\", quantity);\n * ```\n */\n\nclass Erc20ClaimableWithConditions {\n  /**\n   * Configure claim conditions\n   * @remarks Define who can claim NFTs in the collection, when and how many.\n   * @example\n   * ```javascript\n   * const presaleStartTime = new Date();\n   * const publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const claimConditions = [\n   *   {\n   *     startTime: presaleStartTime, // start the presale now\n   *     maxClaimableSupply: 2, // limit how many mints for this presale\n   *     price: 0.01, // presale price\n   *     snapshot: ['0x...', '0x...'], // limit minting to only certain addresses\n   *   },\n   *   {\n   *     startTime: publicSaleStartTime, // 24h after presale, start public sale\n   *     price: 0.08, // public sale price\n   *   }\n   * ]);\n   * await contract.token.drop.claim.conditions.set(claimConditions);\n   * ```\n   */\n\n  constructor(erc20, contractWrapper, storage) {\n    _defineProperty(this, \"featureName\", FEATURE_TOKEN_CLAIM_CONDITIONS_V2.name);\n    /**\n     * Claim a certain amount of tokens to a specific Wallet\n     *\n     * @remarks Let the specified wallet claim Tokens.\n     *\n     * @example\n     * ```javascript\n     * const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\n     * const quantity = 42.69; // how many tokens you want to claim\n     *\n     * const tx = await contract.token.drop.claim.to(address, quantity);\n     * const receipt = tx.receipt; // the transaction receipt\n     * ```\n     *\n     * @param destinationAddress - Address you want to send the token to\n     * @param amount - Quantity of the tokens you want to claim\n     * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer\n     * @param claimData\n     * @returns - The transaction receipt\n     */\n    _defineProperty(this, \"to\", /* @__PURE__ */buildTransactionFunction(async (destinationAddress, amount, options) => {\n      const quantity = await this.erc20.normalizeAmount(amount);\n      return await this.conditions.getClaimTransaction(destinationAddress, quantity, options);\n    }));\n    this.erc20 = erc20;\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    const metadata = new ContractMetadata(this.contractWrapper, CustomContractSchema, this.storage);\n    this.conditions = new DropClaimConditions(this.contractWrapper, metadata, this.storage);\n  }\n}\n\n/**\n * Configure and claim ERC20 tokens\n * @remarks Manage claim phases and claim ERC20 tokens that have been lazily minted.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.token.drop.claim.to(\"0x...\", quantity);\n * ```\n */\n\nclass Erc20Droppable {\n  /**\n   * Configure claim conditions\n   * @remarks Define who can claim NFTs in the collection, when and how many.\n   * @example\n   * ```javascript\n   * const presaleStartTime = new Date();\n   * const publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const claimConditions = [\n   *   {\n   *     startTime: presaleStartTime, // start the presale now\n   *     maxClaimableSupply: 2, // limit how many mints for this presale\n   *     price: 0.01, // presale price\n   *     snapshot: ['0x...', '0x...'], // limit minting to only certain addresses\n   *   },\n   *   {\n   *     startTime: publicSaleStartTime, // 24h after presale, start public sale\n   *     price: 0.08, // public sale price\n   *   }\n   * ]);\n   * await contract.nft.drop.claim.conditions.set(claimConditions);\n   * ```\n   */\n\n  constructor(erc20, contractWrapper, storage) {\n    this.erc20 = erc20;\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.claim = new Erc20ClaimableWithConditions(this.erc20, this.contractWrapper, this.storage);\n  }\n}\n\n/**\n * Mint ERC20 Tokens\n * @remarks Token minting functionality that handles unit parsing for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.nft.mint.to(walletAddress, nftMetadata);\n * ```\n * @public\n */\n\nclass Erc20Mintable {\n  /**\n   * Batch mint Tokens to many addresses\n   */\n\n  constructor(erc20, contractWrapper) {\n    _defineProperty(this, \"featureName\", FEATURE_TOKEN_MINTABLE.name);\n    /**\n     * Mint Tokens\n     *\n     * @remarks Mint tokens to a specified address.\n     *\n     * @example\n     * ```javascript\n     * const toAddress = \"{{wallet_address}}\"; // Address of the wallet you want to mint the tokens to\n     * const amount = \"1.5\"; // The amount of this token you want to mint\n     * await contract.token.mint.to(toAddress, amount);\n     * ```\n     */\n    _defineProperty(this, \"to\", /* @__PURE__ */buildTransactionFunction(async (to, amount) => {\n      return await this.getMintTransaction(to, amount);\n    }));\n    this.erc20 = erc20;\n    this.contractWrapper = contractWrapper;\n    this.batch = this.detectErc20BatchMintable();\n  }\n  /**\n   * @deprecated Use `contract.erc20.mint.prepare(...args)` instead\n   */\n  async getMintTransaction(to, amount) {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"mintTo\",\n      args: [await resolveAddress(to), await this.erc20.normalizeAmount(amount)]\n    });\n  }\n  detectErc20BatchMintable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC20BatchMintable\")) {\n      return new Erc20BatchMintable(this.erc20, this.contractWrapper);\n    }\n    return undefined;\n  }\n}\nasync function setErc20Allowance(contractToApprove, value, currencyAddress, overrides) {\n  if (isNativeToken(currencyAddress)) {\n    overrides[\"value\"] = value;\n  } else {\n    const signer = contractToApprove.getSigner();\n    const provider = contractToApprove.getProvider();\n    const erc20 = new ContractWrapper(signer || provider, currencyAddress, ERC20Abi, contractToApprove.options, contractToApprove.storage);\n    const owner = await contractToApprove.getSignerAddress();\n    const spender = contractToApprove.address;\n    const allowance = await erc20.read(\"allowance\", [owner, spender]);\n    if (allowance.lt(value)) {\n      // approve overrides the previous allowance, set it to the minimum required for this tx\n      await erc20.sendTransaction(\"approve\", [spender, value]);\n    }\n    return overrides;\n  }\n}\n\n/**\n * Enables generating ERC20 Tokens with rules and an associated signature, which can then be minted by anyone securely\n * @public\n */\n// TODO consolidate into a single class\n\nclass Erc20SignatureMintable {\n  constructor(contractWrapper, roles) {\n    _defineProperty(this, \"featureName\", FEATURE_TOKEN_SIGNATURE_MINTABLE.name);\n    /**\n     * Mint tokens from a signature\n     *\n     * @remarks Mint a certain amount of tokens from a previously generated signature.\n     *\n     * @example\n     * ```javascript\n     * // see how to craft a payload to sign in the `generate()` documentation\n     * const signedPayload = contract.erc20.signature.generate(payload);\n     *\n     * // Use the signed payload to mint the tokens\n     * const tx = contract.erc20.signature.mint(signedPayload);\n     * ```\n     * @param signedPayload - the previously generated payload and signature with {@link Erc20SignatureMintable.generate}\n     * @twfeature ERC20SignatureMintable\n     */\n    _defineProperty(this, \"mint\", /* @__PURE__ */buildTransactionFunction(async signedPayload => {\n      const mintRequest = signedPayload.payload;\n      const signature = signedPayload.signature;\n      const message = await this.mapPayloadToContractStruct(mintRequest);\n      const overrides = await this.contractWrapper.getCallOverrides();\n      // TODO: Transaction Sequence Pattern\n      await setErc20Allowance(this.contractWrapper, BigNumber.from(message.price), mintRequest.currencyAddress, overrides);\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"mintWithSignature\",\n        args: [message, signature],\n        overrides\n      });\n    }));\n    /**\n     * Mint any number of generated tokens signatures at once\n     * @remarks Mint multiple token signatures in one transaction. Note that this is only possible for free mints (cannot batch mints with a price attached to it for security reasons)\n     * @param signedPayloads - the array of signed payloads to mint\n     * @twfeature ERC20SignatureMintable\n     */\n    _defineProperty(this, \"mintBatch\", /* @__PURE__ */buildTransactionFunction(async signedPayloads => {\n      const contractPayloads = await Promise.all(signedPayloads.map(async s => {\n        const message = await this.mapPayloadToContractStruct(s.payload);\n        const signature = s.signature;\n        const price = s.payload.price;\n        if (BigNumber.from(price).gt(0)) {\n          throw new Error(\"Can only batch free mints. For mints with a price, use regular mint()\");\n        }\n        return {\n          message,\n          signature\n        };\n      }));\n      const contractEncoder = new ContractEncoder(this.contractWrapper);\n      const encoded = contractPayloads.map(p => {\n        return contractEncoder.encode(\"mintWithSignature\", [p.message, p.signature]);\n      });\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"multicall\",\n        args: [encoded]\n      });\n    }));\n    this.contractWrapper = contractWrapper;\n    this.roles = roles;\n  }\n  /**\n   * Verify that a payload is correctly signed\n   * @param signedPayload - the payload to verify\n   * @twfeature ERC20SignatureMintable\n   *\n   * ```javascript\n   * const startTime = new Date();\n   * const endTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const payload = {\n   *   quantity: 4.2, // The quantity of tokens to be minted\n   *   to: {{wallet_address}}, // Who will receive the tokens\n   *   price: 0.5, // the price to pay for minting those tokens\n   *   currencyAddress: NATIVE_TOKEN_ADDRESS, // the currency to pay with\n   *   mintStartTime: startTime, // can mint anytime from now\n   *   mintEndTime: endTime, // to 24h from now,\n   *   primarySaleRecipient: \"0x...\", // custom sale recipient for this token mint\n   * };\n   *\n   * const signedPayload = await contract.erc20.signature.generate(payload);\n   * // Now you can verify if the signed payload is valid\n   * const isValid = await contract.erc20.signature.verify(signedPayload);\n   * ```\n   */\n  async verify(signedPayload) {\n    const mintRequest = signedPayload.payload;\n    const signature = signedPayload.signature;\n    const message = await this.mapPayloadToContractStruct(mintRequest);\n    const verification = await this.contractWrapper.read(\"verify\", [message, signature]);\n    return verification[0];\n  }\n\n  /**\n   * Generate a signature that can be used to mint a certain amount of tokens\n   *\n   * @remarks Takes in a quantity of tokens, some conditions for how it can be minted and signs it with your private key. The generated signature can then be used to mint those tokens using the exact payload and signature generated.\n   *\n   * @example\n   * ```javascript\n   * const startTime = new Date();\n   * const endTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const payload = {\n   *   quantity: 4.2, // The quantity of tokens to be minted\n   *   to: {{wallet_address}}, // Who will receive the tokens\n   *   price: 0.5, // the price to pay for minting those tokens\n   *   currencyAddress: NATIVE_TOKEN_ADDRESS, // the currency to pay with\n   *   mintStartTime: startTime, // can mint anytime from now\n   *   mintEndTime: endTime, // to 24h from now,\n   *   primarySaleRecipient: \"0x...\", // custom sale recipient for this token mint\n   * };\n   *\n   * const signedPayload = await contract.erc20.signature.generate(payload);\n   * // now anyone can use these to mint the NFT using `contract.erc20.signature.mint(signedPayload)`\n   * ```\n   * @param mintRequest - the payload to sign\n   * @returns the signed payload and the corresponding signature\n   * @twfeature ERC20SignatureMintable\n   */\n  async generate(mintRequest) {\n    return (await this.generateBatch([mintRequest]))[0];\n  }\n\n  /**\n   * Generate a batch of signatures that can be used to mint many token signatures.\n   *\n   * @remarks See {@link Erc20SignatureMintable.generate}\n   *\n   * @param payloadsToSign - the payloads to sign\n   * @returns an array of payloads and signatures\n   * @twfeature ERC20SignatureMintable\n   */\n  async generateBatch(payloadsToSign) {\n    var _this$roles;\n    await ((_this$roles = this.roles) === null || _this$roles === void 0 ? void 0 : _this$roles.verify([\"minter\"], await this.contractWrapper.getSignerAddress()));\n    const parsedRequests = await Promise.all(payloadsToSign.map(m => Signature20PayloadInput.parseAsync(m)));\n    const chainId = await this.contractWrapper.getChainID();\n    const signer = this.contractWrapper.getSigner();\n    invariant(signer, \"No signer available\");\n\n    // ERC20Permit (EIP-712) spec differs from signature mint 721, 1155.\n    const name = await this.contractWrapper.read(\"name\", []);\n    return await Promise.all(parsedRequests.map(async m => {\n      const finalPayload = await Signature20PayloadOutput.parseAsync(m);\n      const signature = await this.contractWrapper.signTypedData(signer, {\n        name,\n        version: \"1\",\n        chainId,\n        verifyingContract: this.contractWrapper.address\n      }, {\n        MintRequest: MintRequest20\n      }, await this.mapPayloadToContractStruct(finalPayload));\n      return {\n        payload: finalPayload,\n        signature: signature.toString()\n      };\n    }));\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n  /**\n   * Maps a payload to the format expected by the contract\n   *\n   * @internal\n   *\n   * @param mintRequest - The payload to map.\n   * @returns - The mapped payload.\n   */\n  async mapPayloadToContractStruct(mintRequest) {\n    const normalizedPrice = await normalizePriceValue(this.contractWrapper.getProvider(), mintRequest.price, mintRequest.currencyAddress);\n    const amountWithDecimals = utils.parseUnits(mintRequest.quantity, await this.contractWrapper.read(\"decimals\", []));\n    return {\n      to: mintRequest.to,\n      primarySaleRecipient: mintRequest.primarySaleRecipient,\n      quantity: amountWithDecimals,\n      price: normalizedPrice,\n      currency: mintRequest.currencyAddress,\n      validityEndTimestamp: mintRequest.mintEndTime,\n      validityStartTimestamp: mintRequest.mintStartTime,\n      uid: mintRequest.uid\n    };\n  }\n}\n\n/**\n * Checks whether the given DetectableFeature is defined\n * @internal\n * @param namespace The namespace to check\n * @param feature The corresponding feature\n */\nfunction assertEnabled(namespace, feature) {\n  if (!namespace) {\n    throw new ExtensionNotImplementedError(feature);\n  }\n  return namespace;\n}\nasync function normalizeAmount(contractWrapper, amount) {\n  const decimals = await contractWrapper.read(\"decimals\", []);\n  return utils.parseUnits(AmountSchema.parse(amount), decimals);\n}\n\n/**\n * Standard ERC20 Token functions\n * @remarks Basic functionality for a ERC20 contract that handles all unit transformation for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.erc20.transfer(walletAddress, amount);\n * ```\n * @public\n */\nclass Erc20 {\n  /**\n   * Mint tokens\n   */\n\n  get chainId() {\n    return this._chainId;\n  }\n  constructor(contractWrapper, storage, chainId) {\n    _defineProperty(this, \"featureName\", FEATURE_TOKEN.name);\n    /**\n     * Transfer tokens\n     *\n     * @remarks Transfer tokens from the connected wallet to another wallet.\n     *\n     * @example\n     * ```javascript\n     * // Address of the wallet you want to send the tokens to\n     * const toAddress = \"0x...\";\n     * // The amount of tokens you want to send\n     * const amount = 0.1;\n     * await contract.erc20.transfer(toAddress, amount);\n     * ```\n     * @twfeature ERC20\n     */\n    _defineProperty(this, \"transfer\", /* @__PURE__ */buildTransactionFunction(async (to, amount) => {\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"transfer\",\n        args: await Promise.all([resolveAddress(to), this.normalizeAmount(amount)])\n      });\n    }));\n    /**\n     * Transfer tokens from a specific address\n     *\n     * @remarks Transfer tokens from one wallet to another\n     *\n     * @example\n     * ```javascript\n     * // Address of the wallet sending the tokens\n     * const fromAddress = \"{{wallet_address}}\";\n     * // Address of the wallet you want to send the tokens to\n     * const toAddress = \"0x...\";\n     * // The number of tokens you want to send\n     * const amount = 1.2\n     * // Note that the connected wallet must have approval to transfer the tokens of the fromAddress\n     * await contract.erc20.transferFrom(fromAddress, toAddress, amount);\n     * ```\n     * @twfeature ERC20\n     */\n    _defineProperty(this, \"transferFrom\", /* @__PURE__ */buildTransactionFunction(async (from, to, amount) => {\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"transferFrom\",\n        args: await Promise.all([resolveAddress(from), resolveAddress(to), this.normalizeAmount(amount)])\n      });\n    }));\n    /**\n     * Set token allowance\n     * @remarks Allows the specified `spender` wallet to transfer the given `amount` of tokens to another wallet\n     * @example\n     * ```javascript\n     * // Address of the wallet to allow transfers from\n     * const spenderAddress = \"0x...\";\n     * // The number of tokens to give as allowance\n     * const amount = 100\n     * await contract.erc20.setAllowance(spenderAddress, amount);\n     * ```\n     * @twfeature ERC20\n     */\n    _defineProperty(this, \"setAllowance\", /* @__PURE__ */buildTransactionFunction(async (spender, amount) => {\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"approve\",\n        args: await Promise.all([resolveAddress(spender), this.normalizeAmount(amount)])\n      });\n    }));\n    /**\n     * Transfer tokens to many wallets\n     *\n     * @remarks Mint tokens from the connected wallet to many wallets\n     *\n     * @example\n     * ```javascript\n     * // Data of the tokens you want to mint\n     * const data = [\n     *   {\n     *     toAddress: \"{{wallet_address}}\", // Address to mint tokens to\n     *     amount: 100, // How many tokens to mint to specified address\n     *   },\n     *  {\n     *    toAddress: \"0x...\",\n     *    amount: 100,\n     *  }\n     * ]\n     *\n     * await contract.erc20.transferBatch(data);\n     * ```\n     */\n    _defineProperty(this, \"transferBatch\", /* @__PURE__ */buildTransactionFunction(async args => {\n      const contractEncoder = new ContractEncoder(this.contractWrapper);\n      const encoded = (await Promise.all(args.map(arg => Promise.all([this.normalizeAmount(arg.amount), resolveAddress(arg.toAddress)])))).map(_ref => {\n        let [amountWithDecimals, address] = _ref;\n        return contractEncoder.encode(\"transfer\", [address, amountWithDecimals]);\n      });\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"multicall\",\n        args: [encoded]\n      });\n    }));\n    ////// ERC20 Mintable Extension //////\n    /**\n     * Mint tokens\n     *\n     * @remarks Mint tokens to the connected wallet.\n     *\n     * @example\n     * ```javascript\n     * const amount = \"1.5\"; // The amount of this token you want to mint\n     * await contract.erc20.mint(amount);\n     * ```\n     * @twfeature ERC20Mintable\n     */\n    _defineProperty(this, \"mint\", /* @__PURE__ */buildTransactionFunction(async amount => {\n      return this.mintTo.prepare(await this.contractWrapper.getSignerAddress(), amount);\n    }));\n    /**\n     * Mint tokens to a specific wallet\n     *\n     * @remarks Mint tokens to a specified address.\n     *\n     * @example\n     * ```javascript\n     * const toAddress = \"{{wallet_address}}\"; // Address of the wallet you want to mint the tokens to\n     * const amount = \"1.5\"; // The amount of this token you want to mint\n     * await contract.erc20.mintTo(toAddress, amount);\n     * ```\n     * @twfeature ERC20Mintable\n     */\n    _defineProperty(this, \"mintTo\", /* @__PURE__ */buildTransactionFunction(async (receiver, amount) => {\n      return assertEnabled(this.mintable, FEATURE_TOKEN_MINTABLE).to.prepare(receiver, amount);\n    }));\n    ////// ERC20 BatchMintable Extension //////\n    /**\n     * Mint tokens to many wallets\n     *\n     * @remarks Mint tokens to many wallets in one transaction.\n     *\n     * @example\n     * ```javascript\n     * // Data of the tokens you want to mint\n     * const data = [\n     *   {\n     *     toAddress: \"{{wallet_address}}\", // Address to mint tokens to\n     *     amount: 0.2, // How many tokens to mint to specified address\n     *   },\n     *  {\n     *    toAddress: \"0x...\",\n     *    amount: 1.4,\n     *  }\n     * ]\n     *\n     * await contract.mintBatchTo(data);\n     * ```\n     * @twfeature ERC20BatchMintable\n     */\n    _defineProperty(this, \"mintBatchTo\", /* @__PURE__ */buildTransactionFunction(async args => {\n      var _this$mintable;\n      return assertEnabled((_this$mintable = this.mintable) === null || _this$mintable === void 0 ? void 0 : _this$mintable.batch, FEATURE_TOKEN_BATCH_MINTABLE).to.prepare(args);\n    }));\n    ////// ERC20 Burnable Extension //////\n    /**\n     * Burn tokens\n     *\n     * @remarks Burn tokens held by the connected wallet\n     *\n     * @example\n     * ```javascript\n     * // The amount of this token you want to burn\n     * const amount = 1.2;\n     *\n     * await contract.erc20.burn(amount);\n     * ```\n     * @twfeature ERC20Burnable\n     */\n    _defineProperty(this, \"burn\", /* @__PURE__ */buildTransactionFunction(async amount => {\n      return assertEnabled(this.burnable, FEATURE_TOKEN_BURNABLE).tokens.prepare(amount);\n    }));\n    /**\n     * Burn tokens from a specific wallet\n     *\n     * @remarks Burn tokens held by the specified wallet\n     *\n     * @example\n     * ```javascript\n     * // Address of the wallet sending the tokens\n     * const holderAddress = \"{{wallet_address}}\";\n     *\n     * // The amount of this token you want to burn\n     * const amount = 1.2;\n     *\n     * await contract.erc20.burnFrom(holderAddress, amount);\n     * ```\n     * @twfeature ERC20Burnable\n     */\n    _defineProperty(this, \"burnFrom\", /* @__PURE__ */buildTransactionFunction(async (holder, amount) => {\n      return assertEnabled(this.burnable, FEATURE_TOKEN_BURNABLE).from.prepare(holder, amount);\n    }));\n    ////// ERC20 Claimable Extension //////\n    /**\n     * Claim tokens\n     *\n     * @remarks Let the specified wallet claim Tokens.\n     *\n     * @example\n     * ```javascript\n     * const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\n     * const quantity = 42.69; // how many tokens you want to claim\n     *\n     * const tx = await contract.erc20.claim(address, quantity);\n     * const receipt = tx.receipt; // the transaction receipt\n     * ```\n     *\n     * @param destinationAddress - Address you want to send the token to\n     * @param amount - Quantity of the tokens you want to claim\n     * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer\n     * @param claimData\n     * @returns - The transaction receipt\n     * @twfeature ERC20ClaimPhasesV2 | ERC20ClaimPhasesV1 | ERC20ClaimConditionsV2 | ERC20ClaimConditionsV1\n     */\n    _defineProperty(this, \"claim\", /* @__PURE__ */buildTransactionFunction(async (amount, options) => {\n      return this.claimTo.prepare(await this.contractWrapper.getSignerAddress(), amount, options);\n    }));\n    /**\n     * Claim tokens to a specific wallet\n     *\n     * @remarks Let the specified wallet claim Tokens.\n     *\n     * @example\n     * ```javascript\n     * const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\n     * const quantity = 42.69; // how many tokens you want to claim\n     *\n     * const tx = await contract.erc20.claim(address, quantity);\n     * const receipt = tx.receipt; // the transaction receipt\n     * ```\n     *\n     * @param destinationAddress - Address you want to send the token to\n     * @param amount - Quantity of the tokens you want to claim\n     * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer\n     * @param claimData\n     * @returns - The transaction receipt\n     * @twfeature ERC20ClaimPhasesV2 | ERC20ClaimPhasesV1 | ERC20ClaimConditionsV2 | ERC20ClaimConditionsV1\n     */\n    _defineProperty(this, \"claimTo\", /* @__PURE__ */buildTransactionFunction(async (destinationAddress, amount, options) => {\n      var _this$droppable;\n      return assertEnabled((_this$droppable = this.droppable) === null || _this$droppable === void 0 ? void 0 : _this$droppable.claim, FEATURE_TOKEN_CLAIM_CONDITIONS_V2).to.prepare(destinationAddress, amount, options);\n    }));\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.mintable = this.detectErc20Mintable();\n    this.burnable = this.detectErc20Burnable();\n    this.droppable = this.detectErc20Droppable();\n    this.signatureMintable = this.detectErc20SignatureMintable();\n    this._chainId = chainId;\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n\n  /**\n   * @internal\n   */\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  ////// Standard ERC20 Extension //////\n\n  /**\n   * Get the token metadata\n   * @remarks name, symbol, etc...\n   * @example\n   * ```javascript\n   * const token = await contract.erc20.get();\n   * ```\n   * @returns The token metadata\n   * @twfeature ERC20\n   */\n  async get() {\n    return await fetchCurrencyMetadata(this.contractWrapper.getProvider(), this.getAddress());\n  }\n\n  /**\n   * Get token balance for the currently connected wallet\n   *\n   * @remarks Get a wallets token balance.\n   *\n   * @example\n   * ```javascript\n   * const balance = await contract.erc20.balance();\n   * ```\n   *\n   * @returns The balance of a specific wallet.\n   * @twfeature ERC20\n   */\n  async balance() {\n    return await this.balanceOf(await this.contractWrapper.getSignerAddress());\n  }\n\n  /**\n   * Get token balance for a specific wallet\n   *\n   * @remarks Get a wallets token balance.\n   *\n   * @example\n   * ```javascript\n   * const walletAddress = \"{{wallet_address}}\";\n   * const balance = await contract.erc20.balanceOf(walletAddress);\n   * ```\n   *\n   * @returns The balance of a specific wallet.\n   * @twfeature ERC20\n   */\n  async balanceOf(address) {\n    return this.getValue(await this.contractWrapper.read(\"balanceOf\", [await resolveAddress(address)]));\n  }\n\n  /**\n   * Get the total supply for this token\n   * @remarks Get how much supply has been minted\n   * @example\n   * ```javascript\n   * const balance = await contract.erc20.totalSupply();\n   * ```\n   * @twfeature ERC20\n   */\n  async totalSupply() {\n    return await this.getValue(await this.contractWrapper.read(\"totalSupply\", []));\n  }\n\n  /**\n   * Get token allowance\n   *\n   * @remarks Get the allowance of a 'spender' wallet over the connected wallet's funds - the allowance of a different address for a token is the amount of tokens that the `spender` wallet is allowed to spend on behalf of the connected wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to check token allowance\n   * const spenderAddress = \"0x...\";\n   * const allowance = await contract.erc20.allowance(spenderAddress);\n   * ```\n   *\n   * @returns The allowance of one wallet over anothers funds.\n   * @twfeature ERC20\n   */\n  async allowance(spender) {\n    const [owner, spenderAddress] = await Promise.all([this.contractWrapper.getSignerAddress(), resolveAddress(spender)]);\n    return await this.allowanceOf(owner, spenderAddress);\n  }\n\n  /**\n   * Get token allowance of a specific wallet\n   *\n   * @remarks Get the allowance of one wallet over another wallet's funds - the allowance of a different address for a token is the amount of tokens that the wallet is allowed to spend on behalf of the specified wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet who owns the funds\n   * const owner = \"{{wallet_address}}\";\n   * // Address of the wallet to check token allowance\n   * const spender = \"0x...\";\n   * const allowance = await contract.erc20.allowanceOf(owner, spender);\n   * ```\n   *\n   * @returns The allowance of one wallet over anothers funds.\n   * @twfeature ERC20\n   */\n  async allowanceOf(owner, spender) {\n    const args = await Promise.all([resolveAddress(owner), resolveAddress(spender)]);\n    return await this.getValue(await this.contractWrapper.read(\"allowance\", args));\n  }\n  /**\n   * Construct a mint transaction without executing it\n   * @remarks This is useful for estimating the gas cost of a mint transaction, overriding transaction options and having fine grained control over the transaction execution.\n   * @param receiver - Address you want to send the token to\n   * @param amount - The amount of tokens you want to mint\n   *\n   * @deprecated Use `contract.erc20.mint.prepare(...args)` instead\n   * @twfeature ERC20Mintable\n   */\n  async getMintTransaction(receiver, amount) {\n    return assertEnabled(this.mintable, FEATURE_TOKEN_MINTABLE).getMintTransaction(receiver, amount);\n  }\n  /**\n   * Configure claim conditions\n   * @remarks Define who can claim NFTs in the collection, when and how many.\n   * @example\n   * ```javascript\n   * const presaleStartTime = new Date();\n   * const publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const claimConditions = [\n   *   {\n   *     startTime: presaleStartTime, // start the presale now\n   *     maxClaimableSupply: 2, // limit how many mints for this presale\n   *     price: 0.01, // presale price\n   *     snapshot: ['0x...', '0x...'], // limit minting to only certain addresses\n   *   },\n   *   {\n   *     startTime: publicSaleStartTime, // 24h after presale, start public sale\n   *     price: 0.08, // public sale price\n   *   }\n   * ]);\n   * await contract.erc20.claimConditions.set(claimConditions);\n   * ```\n   * @twfeature ERC20ClaimPhasesV2 | ERC20ClaimPhasesV1 | ERC20ClaimConditionsV2 | ERC20ClaimConditionsV1\n   */\n  get claimConditions() {\n    var _this$droppable2;\n    return assertEnabled((_this$droppable2 = this.droppable) === null || _this$droppable2 === void 0 ? void 0 : _this$droppable2.claim, FEATURE_TOKEN_CLAIM_CONDITIONS_V2).conditions;\n  }\n\n  ////// ERC20 SignatureMint Extension //////\n\n  /**\n   * Mint with signature\n   * @remarks Generate dynamic tokens with your own signature, and let others mint them using that signature.\n   * @example\n   * ```javascript\n   * // see how to craft a payload to sign in the `contract.erc20.signature.generate()` documentation\n   * const signedPayload = contract.erc20.signature().generate(payload);\n   *\n   * // now the payload can be used to mint tokens\n   * const tx = contract.erc20.signature.mint(signedPayload);\n   * ```\n   * @twfeature ERC20SignatureMintable\n   */\n  get signature() {\n    return assertEnabled(this.signatureMintable, FEATURE_TOKEN_SIGNATURE_MINTABLE);\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  /**\n   * returns the wei amount from a token amount\n   * @internal\n   * @param amount\n   */\n  async normalizeAmount(amount) {\n    return normalizeAmount(this.contractWrapper, amount);\n  }\n\n  /**\n   * @internal\n   */\n  async getValue(value) {\n    return await fetchCurrencyValue(this.contractWrapper.getProvider(), this.getAddress(), BigNumber.from(value));\n  }\n  detectErc20Mintable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC20\")) {\n      return new Erc20Mintable(this, this.contractWrapper);\n    }\n    return undefined;\n  }\n  detectErc20Burnable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC20Burnable\")) {\n      return new Erc20Burnable(this, this.contractWrapper);\n    }\n    return undefined;\n  }\n  detectErc20Droppable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC20ClaimConditionsV1\") || detectContractFeature(this.contractWrapper, \"ERC20ClaimConditionsV2\") || detectContractFeature(this.contractWrapper, \"ERC20ClaimPhasesV1\") || detectContractFeature(this.contractWrapper, \"ERC20ClaimPhasesV2\")) {\n      return new Erc20Droppable(this, this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n  detectErc20SignatureMintable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC20SignatureMintable\")) {\n      return new Erc20SignatureMintable(this.contractWrapper);\n    }\n    return undefined;\n  }\n}\n\n/**\n * Mint Many ERC721 NFTs at once\n * @remarks NFT batch minting functionality that handles IPFS storage for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.nft.mint.batch.to(walletAddress, [nftMetadata1, nftMetadata2, ...]);\n * ```\n * @public\n */\n\nclass Erc721BatchMintable {\n  constructor(erc721, contractWrapper, storage) {\n    _defineProperty(this, \"featureName\", FEATURE_NFT_BATCH_MINTABLE.name);\n    /**\n     * Mint Many unique NFTs\n     *\n     * @remarks Mint many unique NFTs at once to a specified wallet.\n     *\n     * @example\n     * ```javascript\n     * // Address of the wallet you want to mint the NFT to\n     * const walletAddress = \"{{wallet_address}}\";\n     *\n     * // Custom metadata of the NFTs you want to mint.\n     * const metadatas = [{\n     *   name: \"Cool NFT #1\",\n     *   description: \"This is a cool NFT\",\n     *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n     * }, {\n     *   name: \"Cool NFT #2\",\n     *   description: \"This is a cool NFT\",\n     *   image: fs.readFileSync(\"path/to/other/image.png\"),\n     * }];\n     *\n     * const tx = await contract.mint.batch.to(walletAddress, metadatas);\n     * const receipt = tx[0].receipt; // same transaction receipt for all minted NFTs\n     * const firstTokenId = tx[0].id; // token id of the first minted NFT\n     * const firstNFT = await tx[0].data(); // (optional) fetch details of the first minted NFT\n     * ```\n     */\n    _defineProperty(this, \"to\", /* @__PURE__ */buildTransactionFunction(async (to, metadatas) => {\n      const [uris, resolvedAddress] = await Promise.all([uploadOrExtractURIs(metadatas, this.storage), resolveAddress(to)]);\n      const contractEncoder = new ContractEncoder(this.contractWrapper);\n      const encoded = uris.map(uri => contractEncoder.encode(\"mintTo\", [resolvedAddress, uri]));\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"multicall\",\n        args: [encoded],\n        parse: receipt => {\n          const events = this.contractWrapper.parseLogs(\"TokensMinted\", receipt.logs);\n          if (events.length === 0 || events.length < metadatas.length) {\n            throw new Error(\"TokenMinted event not found, minting failed\");\n          }\n          return events.map(e => {\n            const id = e.args.tokenIdMinted;\n            return {\n              id,\n              receipt,\n              data: () => this.erc721.get(id)\n            };\n          });\n        }\n      });\n    }));\n    this.erc721 = erc721;\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n  }\n}\n\n/**\n * Configure and claim ERC721 NFTs\n * @remarks Manage claim phases and claim ERC721 NFTs that have been lazily minted.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.erc721.claim(quantity);\n * await contract.erc721.claimConditions.getActive();\n * ```\n */\n\nclass Erc721ClaimableWithConditions {\n  /**\n   * Configure claim conditions\n   * @remarks Define who can claim NFTs in the collection, when and how many.\n   * @example\n   * ```javascript\n   * const presaleStartTime = new Date();\n   * const publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const claimConditions = [\n   *   {\n   *     startTime: presaleStartTime, // start the presale now\n   *     maxClaimableSupply: 2, // limit how many mints for this presale\n   *     price: 0.01, // presale price\n   *     snapshot: ['0x...', '0x...'], // limit minting to only certain addresses\n   *   },\n   *   {\n   *     startTime: publicSaleStartTime, // 24h after presale, start public sale\n   *     price: 0.08, // public sale price\n   *   }\n   * ]);\n   * await contract.erc721.claimConditions.set(claimConditions);\n   * ```\n   */\n\n  constructor(erc721, contractWrapper, storage) {\n    _defineProperty(this, \"featureName\", FEATURE_NFT_CLAIM_CONDITIONS_V2.name);\n    /**\n     * Claim unique NFTs to a specific Wallet\n     *\n     * @remarks Let the specified wallet claim NFTs.\n     *\n     * @example\n     * ```javascript\n     * const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\n     * const quantity = 1; // how many unique NFTs you want to claim\n     *\n     * const tx = await contract.erc721.claimTo(address, quantity);\n     * const receipt = tx[0].receipt; // the transaction receipt\n     * const claimedTokenId = tx[0].id; // the id of the first NFT claimed\n     * const claimedNFT = await tx[0].data(); // (optional) get the first claimed NFT metadata\n     * ```\n     *\n     * @param destinationAddress - Address you want to send the token to\n     * @param quantity - Quantity of the tokens you want to claim\n     * @param options\n     * @returns - an array of results containing the id of the token claimed, the transaction receipt and a promise to optionally fetch the nft metadata\n     */\n    _defineProperty(this, \"to\", /* @__PURE__ */buildTransactionFunction(async (destinationAddress, quantity, options) => {\n      // TODO: Transaction Sequence Pattern\n      const tx = await this.conditions.getClaimTransaction(destinationAddress, quantity, options);\n      tx.setParse(receipt => {\n        const event = this.contractWrapper.parseLogs(\"TokensClaimed\", receipt === null || receipt === void 0 ? void 0 : receipt.logs);\n        const startingIndex = event[0].args.startTokenId;\n        const endingIndex = startingIndex.add(quantity);\n        const results = [];\n        for (let id = startingIndex; id.lt(endingIndex); id = id.add(1)) {\n          results.push({\n            id,\n            receipt,\n            data: () => this.erc721.get(id)\n          });\n        }\n        return results;\n      });\n      return tx;\n    }));\n    this.erc721 = erc721;\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    const metadata = new ContractMetadata(this.contractWrapper, CustomContractSchema, this.storage);\n    this.conditions = new DropClaimConditions(this.contractWrapper, metadata, this.storage);\n  }\n}\nasync function calculateClaimCost(contractWrapper, pricePerToken, quantity, currencyAddress, checkERC20Allowance) {\n  let overrides = {};\n  const currency = currencyAddress || NATIVE_TOKEN_ADDRESS;\n  const normalizedPrice = await normalizePriceValue(contractWrapper.getProvider(), pricePerToken, currency);\n  const totalCost = normalizedPrice.mul(quantity);\n  if (totalCost.gt(0)) {\n    if (currency === NATIVE_TOKEN_ADDRESS) {\n      overrides = {\n        value: totalCost\n      };\n    } else if (currency !== NATIVE_TOKEN_ADDRESS && checkERC20Allowance) {\n      await approveErc20Allowance(contractWrapper, currency, totalCost, quantity, 0);\n    }\n  }\n  return overrides;\n}\n\n/**\n * Configure and claim ERC721 NFTs\n * @remarks Manage claim phases and claim ERC721 NFTs that have been lazily minted.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.erc721.claim(tokenId, quantity);\n * ```\n */\n\nclass Erc721Claimable {\n  constructor(erc721, contractWrapper) {\n    _defineProperty(this, \"featureName\", FEATURE_NFT_CLAIM_CUSTOM.name);\n    /**\n     * Claim NFTs to a specific Wallet\n     *\n     * @remarks Let the specified wallet claim NFTs.\n     *\n     * @example\n     * ```javascript\n     * const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\n     * const quantity = 1; // how many NFTs you want to claim\n     *\n     * const tx = await contract.erc721.claimTo(address, quantity);\n     * const receipt = tx[0].receipt; // the transaction receipt\n     * ```\n     *\n     * @param destinationAddress - Address you want to send the token to\n     * @param quantity - Quantity of the tokens you want to claim\n     * @param options - Options for claiming the NFTs\n     *\n     * @returns - Receipt for the transaction\n     */\n    _defineProperty(this, \"to\", /* @__PURE__ */buildTransactionFunction(async (destinationAddress, quantity, options) => {\n      // TODO: Transaction Sequence Pattern\n      const tx = await this.getClaimTransaction(destinationAddress, quantity, options);\n      tx.setParse(receipt => {\n        const event = this.contractWrapper.parseLogs(\"TokensClaimed\", receipt === null || receipt === void 0 ? void 0 : receipt.logs);\n        const startingIndex = event[0].args.startTokenId;\n        const endingIndex = startingIndex.add(quantity);\n        const results = [];\n        for (let id = startingIndex; id.lt(endingIndex); id = id.add(1)) {\n          results.push({\n            id,\n            receipt,\n            data: () => this.erc721.get(id)\n          });\n        }\n        return results;\n      });\n      return tx;\n    }));\n    this.erc721 = erc721;\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Construct a claim transaction without executing it.\n   * This is useful for estimating the gas cost of a claim transaction, overriding transaction options and having fine grained control over the transaction execution.\n   * @param destinationAddress - Address you want to send the token to\n   * @param tokenId - Id of the token you want to claim\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param options - Options for claiming the NFTs\n   *\n   * @deprecated Use `contract.erc721.claim.prepare(...args)` instead\n   */\n  async getClaimTransaction(destinationAddress, quantity, options) {\n    // TODO: Transaction Sequence Pattern\n    let overrides = {};\n    if (options && options.pricePerToken) {\n      overrides = await calculateClaimCost(this.contractWrapper, options.pricePerToken, quantity, options.currencyAddress, options.checkERC20Allowance);\n    }\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"claim\",\n      args: [destinationAddress, quantity],\n      overrides\n    });\n  }\n}\n\n/**\n * Lazily mint and claim ERC721 NFTs\n * @remarks Manage claim phases and claim ERC721 NFTs that have been lazily minted.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.drop.claim(quantity);\n * ```\n */\n\nclass Erc721LazyMintable {\n  /**\n   * Delayed reveal\n   * @remarks Create a batch of encrypted NFTs that can be revealed at a later time.\n   * @example\n   * ```javascript\n   * // the real NFTs, these will be encrypted until you reveal them\n   * const realNFTs = [{\n   *   name: \"Common NFT #1\",\n   *   description: \"Common NFT, one of many.\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }, {\n   *   name: \"Super Rare NFT #2\",\n   *   description: \"You got a Super Rare NFT!\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }];\n   * // A placeholder NFT that people will get immediately in their wallet, and will be converted to the real NFT at reveal time\n   * const placeholderNFT = {\n   *   name: \"Hidden NFT\",\n   *   description: \"Will be revealed next week!\"\n   * };\n   * // Create and encrypt the NFTs\n   * await contract.nft.drop.revealer.createDelayedRevealBatch(\n   *   placeholderNFT,\n   *   realNFTs,\n   *   \"my secret password\",\n   * );\n   * // Whenever you're ready, reveal your NFTs at any time\n   * const batchId = 0; // the batch to reveal\n   * await contract.erc721.revealer.reveal(batchId, \"my secret password\");\n   * ```\n   */\n\n  constructor(erc721, contractWrapper, storage) {\n    _defineProperty(this, \"featureName\", FEATURE_NFT_LAZY_MINTABLE.name);\n    /**\n     * Create a batch of unique NFTs to be claimed in the future\n     *\n     * @remarks Create batch allows you to create a batch of many unique NFTs in one transaction.\n     *\n     * @example\n     * ```javascript\n     * // Custom metadata of the NFTs to create\n     * const metadatas = [{\n     *   name: \"Cool NFT\",\n     *   description: \"This is a cool NFT\",\n     *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n     * }, {\n     *   name: \"Cool NFT\",\n     *   description: \"This is a cool NFT\",\n     *   image: fs.readFileSync(\"path/to/image.png\"),\n     * }];\n     *\n     * const results = await contract.erc721.lazyMint(metadatas); // uploads and creates the NFTs on chain\n     * const firstTokenId = results[0].id; // token id of the first created NFT\n     * const firstNFT = await results[0].data(); // (optional) fetch details of the first created NFT\n     * ```\n     *\n     * @param metadatas - The metadata to include in the batch.\n     * @param options - optional upload progress callback\n     */\n    _defineProperty(this, \"lazyMint\", /* @__PURE__ */buildTransactionFunction(async (metadatas, options) => {\n      const startFileNumber = await this.erc721.nextTokenIdToMint();\n      const batch = await uploadOrExtractURIs(metadatas, this.storage, startFileNumber.toNumber(), options);\n      // ensure baseUri is the same for the entire batch\n      const baseUri = getBaseUriFromBatch(batch);\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"lazyMint\",\n        args: [batch.length, baseUri.endsWith(\"/\") ? baseUri : \"\".concat(baseUri, \"/\"), utils.toUtf8Bytes(\"\")],\n        parse: receipt => {\n          const event = this.contractWrapper.parseLogs(\"TokensLazyMinted\", receipt === null || receipt === void 0 ? void 0 : receipt.logs);\n          const startingIndex = event[0].args.startTokenId;\n          const endingIndex = event[0].args.endTokenId;\n          const results = [];\n          for (let id = startingIndex; id.lte(endingIndex); id = id.add(1)) {\n            results.push({\n              id,\n              receipt,\n              data: () => this.erc721.getTokenMetadata(id)\n            });\n          }\n          return results;\n        }\n      });\n    }));\n    this.erc721 = erc721;\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.revealer = this.detectErc721Revealable();\n  }\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n  detectErc721Revealable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC721Revealable\")) {\n      return new DelayedReveal(this.contractWrapper, this.storage, FEATURE_NFT_REVEALABLE.name, () => this.erc721.nextTokenIdToMint());\n    }\n    return undefined;\n  }\n}\n\n/**\n * Mint ERC721 NFTs\n * @remarks NFT minting functionality that handles IPFS storage for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.nft.mint.to(walletAddress, nftMetadata);\n * ```\n * @public\n */\n\nclass Erc721Mintable {\n  constructor(erc721, contractWrapper, storage) {\n    _defineProperty(this, \"featureName\", FEATURE_NFT_MINTABLE.name);\n    /**\n     * Mint a unique NFT\n     *\n     * @remarks Mint a unique NFT to a specified wallet.\n     *\n     * @example\n     * ```javascript\n     * // Address of the wallet you want to mint the NFT to\n     * const walletAddress = \"{{wallet_address}}\";\n     *\n     * // Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\n     * const metadata = {\n     *   name: \"Cool NFT\",\n     *   description: \"This is a cool NFT\",\n     *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n     * };\n     *\n     * const tx = await contract.nft.mint.to(walletAddress, metadata);\n     * const receipt = tx.receipt; // the transaction receipt\n     * const tokenId = tx.id; // the id of the NFT minted\n     * const nft = await tx.data(); // (optional) fetch details of minted NFT\n     * ```\n     */\n    _defineProperty(this, \"to\", /* @__PURE__ */buildTransactionFunction(async (to, metadata) => {\n      const [uri, toAddress] = await Promise.all([uploadOrExtractURI(metadata, this.storage), resolveAddress(to)]);\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"mintTo\",\n        args: [toAddress, uri],\n        parse: receipt => {\n          const event = this.contractWrapper.parseLogs(\"Transfer\", receipt === null || receipt === void 0 ? void 0 : receipt.logs);\n          if (event.length === 0) {\n            throw new Error(\"TransferEvent event not found\");\n          }\n          const id = event[0].args.tokenId;\n          return {\n            id,\n            receipt,\n            data: () => this.erc721.get(id)\n          };\n        }\n      });\n    }));\n    this.erc721 = erc721;\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.batch = this.detectErc721BatchMintable();\n  }\n  /**\n   * @deprecated Use `contract.erc721.mint.prepare(...args)` instead\n   */\n  async getMintTransaction(to, metadata) {\n    return this.to.prepare(await resolveAddress(to), metadata);\n  }\n  detectErc721BatchMintable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC721BatchMintable\")) {\n      return new Erc721BatchMintable(this.erc721, this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n}\n\n/**\n * List owned ERC721 NFTs\n * @remarks Easily list all the NFTs from a ERC721 contract, owned by a certain wallet.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const walletAddress = \"0x...\";\n * const ownedNFTs = await contract.nft.query.owned.all(walletAddress);\n * ```\n * @public\n */\n\nclass Erc721Enumerable {\n  constructor(erc721, contractWrapper) {\n    _defineProperty(this, \"featureName\", FEATURE_NFT_ENUMERABLE.name);\n    this.erc721 = erc721;\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Get all NFTs owned by a specific wallet\n   *\n   * @remarks Get all the data associated with the NFTs owned by a specific wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to get the NFTs of\n   * const address = \"{{wallet_address}}\";\n   * const nfts = await contract.nft.query.owned.all(address);\n   * ```\n   * @param walletAddress - the wallet address to query, defaults to the connected wallet\n   * @returns The NFT metadata for all NFTs in the contract.\n   */\n  async all(walletAddress) {\n    const tokenIds = await this.tokenIds(walletAddress);\n    return await Promise.all(tokenIds.map(tokenId => this.erc721.get(tokenId.toString())));\n  }\n\n  /**\n   * Get all token ids of NFTs owned by a specific wallet.\n   * @param walletAddress - the wallet address to query, defaults to the connected wallet\n   */\n  async tokenIds(walletAddress) {\n    const address = await resolveAddress(walletAddress || (await this.contractWrapper.getSignerAddress()));\n    const balance = await this.contractWrapper.read(\"balanceOf\", [address]);\n    const indices = Array.from(Array(balance.toNumber()).keys());\n    return await Promise.all(indices.map(i => this.contractWrapper.read(\"tokenOfOwnerByIndex\", [address, i])));\n  }\n}\n\n/**\n * List owned ERC721 NFTs\n * @remarks Easily list all the NFTs from a ERC721 contract, owned by a certain wallet.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const walletAddress = \"0x...\";\n * const ownedNFTs = await contract.nft.query.owned.all(walletAddress);\n * ```\n * @public\n */\n\nclass Erc721AQueryable {\n  constructor(erc721, contractWrapper) {\n    _defineProperty(this, \"featureName\", FEATURE_NFT_QUERYABLE.name);\n    this.erc721 = erc721;\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Get all NFTs owned by a specific wallet\n   *\n   * @remarks Get all the data associated with the NFTs owned by a specific wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to get the NFTs of\n   * const address = \"{{wallet_address}}\";\n   * const nfts = await contract.nft.query.owned.all(address);\n   * ```\n   * @param walletAddress - the wallet address to query, defaults to the connected wallet\n   * @returns The NFT metadata for all NFTs in the contract.\n   */\n  async all(walletAddress) {\n    const tokenIds = await this.tokenIds(walletAddress);\n    return await Promise.all(tokenIds.map(tokenId => this.erc721.get(tokenId.toString())));\n  }\n\n  /**\n   * Get all token ids of NFTs owned by a specific wallet.\n   * @param walletAddress - the wallet address to query, defaults to the connected wallet\n   */\n  async tokenIds(walletAddress) {\n    const address = await resolveAddress(walletAddress || (await this.contractWrapper.getSignerAddress()));\n    return await this.contractWrapper.read(\"tokensOfOwner\", [address]);\n  }\n}\n\n/**\n * List ERC721 NFTs\n * @remarks Easily list all the NFTs in a ERC721 contract.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const nfts = await contract.nft.query.all();\n * ```\n * @public\n */\n\nclass Erc721Supply {\n  constructor(erc721, contractWrapper) {\n    _defineProperty(this, \"featureName\", FEATURE_NFT_SUPPLY.name);\n    this.erc721 = erc721;\n    this.contractWrapper = contractWrapper;\n    this.owned = this.detectErc721Owned();\n  }\n\n  /**\n   * Get all NFTs\n   *\n   * @remarks Get all the data associated with every NFT in this contract.\n   *\n   * By default, returns the first 100 NFTs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const nfts = await contract.nft.query.all();\n   * ```\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs queried.\n   */\n  async all(queryParams) {\n    let startTokenId = BigNumber.from(0);\n    if (hasFunction(\"startTokenId\", this.contractWrapper)) {\n      startTokenId = await this.contractWrapper.read(\"startTokenId\", []);\n    }\n    const start = BigNumber.from((queryParams === null || queryParams === void 0 ? void 0 : queryParams.start) || 0).add(startTokenId).toNumber();\n    const count = BigNumber.from((queryParams === null || queryParams === void 0 ? void 0 : queryParams.count) || DEFAULT_QUERY_ALL_COUNT).toNumber();\n    const maxSupply = await this.erc721.nextTokenIdToMint();\n    const maxId = Math.min(maxSupply.add(startTokenId).toNumber(), start + count);\n    return await Promise.all([...Array(maxId - start).keys()].map(i => this.erc721.get((start + i).toString())));\n  }\n\n  /**\n   * Return all the owners of each token id in this contract\n   * @returns\n   */\n  async allOwners() {\n    let totalCount;\n    let startTokenId = BigNumber.from(0);\n    if (hasFunction(\"startTokenId\", this.contractWrapper)) {\n      startTokenId = await this.contractWrapper.read(\"startTokenId\", []);\n    }\n    try {\n      totalCount = await this.erc721.totalClaimedSupply();\n    } catch (e) {\n      totalCount = await this.totalCount();\n    }\n    totalCount = totalCount.add(startTokenId);\n\n    // TODO use multicall3 if available\n    // TODO can't call toNumber() here, this can be a very large number\n    const arr = [...new Array(totalCount.toNumber()).keys()];\n    const owners = await Promise.all(arr.map(i => this.erc721.ownerOf(i).catch(() => constants.AddressZero)));\n    return arr.map(i => ({\n      tokenId: i,\n      owner: owners[i]\n    })).filter(o => o.owner !== constants.AddressZero);\n  }\n\n  /**\n   * Get the number of NFTs minted\n   * @remarks This returns the total number of NFTs minted in this contract, **not** the total supply of a given token.\n   *\n   * @returns the total number of NFTs minted in this contract\n   * @public\n   */\n  async totalCount() {\n    return await this.erc721.nextTokenIdToMint();\n  }\n\n  /**\n   * Get the number of NFTs of this contract currently owned by end users\n   * @returns the total number of NFTs of this contract in circulation (minted & not burned)\n   * @public\n   */\n  async totalCirculatingSupply() {\n    return await this.contractWrapper.read(\"totalSupply\", []);\n  }\n  detectErc721Owned() {\n    if (detectContractFeature(this.contractWrapper, \"ERC721Enumerable\")) {\n      return new Erc721Enumerable(this.erc721, this.contractWrapper);\n    } else if (detectContractFeature(this.contractWrapper, \"ERC721AQueryable\")) {\n      return new Erc721AQueryable(this.erc721, this.contractWrapper);\n    }\n    return undefined;\n  }\n}\n\n/**\n * @internal\n */\nconst TieredDropPayloadSchema = /* @__PURE__ */(() => BaseSignaturePayloadInput.extend({\n  tierPriority: z.array(z.string()),\n  royaltyRecipient: AddressOrEnsSchema.default(constants.AddressZero),\n  royaltyBps: BasisPointsSchema.default(0),\n  quantity: BigNumberSchema.default(1)\n}))();\nclass Erc721TieredDrop {\n  constructor(erc721, contractWrapper, storage) {\n    _defineProperty(this, \"featureName\", FEATURE_NFT_TIERED_DROP.name);\n    _defineProperty(this, \"createBatchWithTier\", /* @__PURE__ */buildTransactionFunction(async (metadatas, tier, options) => {\n      // TODO: Change this to on extension\n      const startFileNumber = await this.erc721.nextTokenIdToMint();\n      const batch = await uploadOrExtractURIs(metadatas, this.storage, startFileNumber.toNumber(), options);\n      const baseUri = getBaseUriFromBatch(batch);\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"lazyMint\",\n        args: [batch.length, baseUri.endsWith(\"/\") ? baseUri : \"\".concat(baseUri, \"/\"), tier, utils.toUtf8Bytes(\"\")],\n        parse: receipt => {\n          const event = this.contractWrapper.parseLogs(\"TokensLazyMinted\", receipt === null || receipt === void 0 ? void 0 : receipt.logs);\n          const startingIndex = event[0].args[1];\n          const endingIndex = event[0].args[2];\n          const results = [];\n          for (let id = startingIndex; id.lte(endingIndex); id = id.add(1)) {\n            results.push({\n              id,\n              receipt,\n              data: () => this.erc721.getTokenMetadata(id)\n            });\n          }\n          return results;\n        }\n      });\n    }));\n    _defineProperty(this, \"createDelayedRevealBatchWithTier\", /* @__PURE__ */buildTransactionFunction(async (placeholder, metadatas, password, tier, options) => {\n      if (!password) {\n        throw new Error(\"Password is required\");\n      }\n      const placeholderUris = await this.storage.uploadBatch([CommonNFTInput.parse(placeholder)], {\n        rewriteFileNames: {\n          fileStartNumber: 0\n        }\n      });\n      const placeholderUri = getBaseUriFromBatch(placeholderUris);\n      const startFileNumber = await this.erc721.nextTokenIdToMint();\n      const uris = await this.storage.uploadBatch(metadatas.map(m => CommonNFTInput.parse(m)), {\n        onProgress: options === null || options === void 0 ? void 0 : options.onProgress,\n        rewriteFileNames: {\n          fileStartNumber: startFileNumber.toNumber()\n        }\n      });\n      const baseUri = getBaseUriFromBatch(uris);\n      const baseUriId = await this.contractWrapper.read(\"getBaseURICount\", []);\n      const chainId = await this.contractWrapper.getChainID();\n      const hashedPassword = utils.solidityKeccak256([\"string\", \"uint256\", \"uint256\", \"address\"], [password, chainId, baseUriId, this.contractWrapper.address]);\n      const encryptedBaseUri = await this.contractWrapper.read(\"encryptDecrypt\", [utils.toUtf8Bytes(baseUri), hashedPassword]);\n      const provenanceHash = utils.solidityKeccak256([\"bytes\", \"bytes\", \"uint256\"], [utils.toUtf8Bytes(baseUri), hashedPassword, chainId]);\n      const data = utils.defaultAbiCoder.encode([\"bytes\", \"bytes32\"], [encryptedBaseUri, provenanceHash]);\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"lazyMint\",\n        args: [uris.length, placeholderUri.endsWith(\"/\") ? placeholderUri : \"\".concat(placeholderUri, \"/\"), tier, data],\n        parse: receipt => {\n          const event = this.contractWrapper.parseLogs(\"TokensLazyMinted\", receipt === null || receipt === void 0 ? void 0 : receipt.logs);\n          const startingIndex = event[0].args[1];\n          const endingIndex = event[0].args[2];\n          const results = [];\n          for (let id = startingIndex; id.lte(endingIndex); id = id.add(1)) {\n            results.push({\n              id,\n              receipt,\n              data: () => this.erc721.getTokenMetadata(id)\n            });\n          }\n          return results;\n        }\n      });\n    }));\n    _defineProperty(this, \"reveal\", /* @__PURE__ */buildTransactionFunction(async (batchId, password) => {\n      if (!password) {\n        throw new Error(\"Password is required\");\n      }\n      const chainId = await this.contractWrapper.getChainID();\n      const key = utils.solidityKeccak256([\"string\", \"uint256\", \"uint256\", \"address\"], [password, chainId, batchId, this.contractWrapper.address]);\n      // performing the reveal locally to make sure it'd succeed before sending the transaction\n      try {\n        const decryptedUri = await this.contractWrapper.callStatic().reveal(batchId, key);\n        // basic sanity check for making sure decryptedUri is valid\n        // this is optional because invalid decryption key would result in non-utf8 bytes and\n        // ethers would throw when trying to decode it\n        if (!decryptedUri.includes(\"://\") || !decryptedUri.endsWith(\"/\")) {\n          throw new Error(\"invalid password\");\n        }\n      } catch (e) {\n        throw new Error(\"invalid password\");\n      }\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"reveal\",\n        args: [batchId, key]\n      });\n    }));\n    this.erc721 = erc721;\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n  }\n  async getMetadataInTier(tier) {\n    const tiers = await this.contractWrapper.read(\"getMetadataForAllTiers\", []);\n    const batches = tiers.find(t => t.tier === tier);\n    if (!batches) {\n      throw new Error(\"Tier not found in contract.\");\n    }\n    const nfts = await Promise.all(batches.ranges.map((range, i) => {\n      const nftsInRange = [];\n      const baseUri = batches.baseURIs[i];\n      for (let j = range.startIdInclusive.toNumber(); j < range.endIdNonInclusive.toNumber(); j++) {\n        const uri = baseUri.endsWith(\"/\") ? \"\".concat(baseUri).concat(j) : \"\".concat(baseUri, \"/\").concat(j);\n        const metadata = this.storage.downloadJSON(uri);\n        nftsInRange.push(metadata);\n      }\n      return nftsInRange;\n    }).flat());\n    return nfts;\n  }\n  async getTokensInTier(tier) {\n    const endIndex = await this.contractWrapper.read(\"getTokensInTierLen\", []);\n    if (endIndex.eq(0)) {\n      return [];\n    }\n    const ranges = await this.contractWrapper.read(\"getTokensInTier\", [tier, 0, endIndex]);\n    const nfts = await Promise.all(ranges.map(range => {\n      const nftsInRange = [];\n      for (let i = range.startIdInclusive.toNumber(); i < range.endIdNonInclusive.toNumber(); i++) {\n        nftsInRange.push(this.erc721.get(i));\n      }\n      return nftsInRange;\n    }).flat());\n    return nfts;\n  }\n  async generate(payloadToSign) {\n    const [payload] = await this.generateBatch([payloadToSign]);\n    return payload;\n  }\n  async generateBatch(payloadsToSign) {\n    const parsedPayloads = await Promise.all(payloadsToSign.map(payload => TieredDropPayloadSchema.parseAsync(payload)));\n    const chainId = await this.contractWrapper.getChainID();\n    const signer = this.contractWrapper.getSigner();\n    invariant(signer, \"No signer available\");\n    return await Promise.all(parsedPayloads.map(async payload => {\n      const signature = await this.contractWrapper.signTypedData(signer, {\n        name: \"SignatureAction\",\n        version: \"1\",\n        chainId,\n        verifyingContract: this.contractWrapper.address\n      }, {\n        GenericRequest: GenericRequest\n      }, await this.mapPayloadToContractStruct(payload));\n      return {\n        payload,\n        signature: signature.toString()\n      };\n    }));\n  }\n  async verify(signedPayload) {\n    const message = await this.mapPayloadToContractStruct(signedPayload.payload);\n    const verification = await this.contractWrapper.read(\"verify\", [message, signedPayload.signature]);\n    return verification[0];\n  }\n  async claimWithSignature(signedPayload) {\n    const message = await this.mapPayloadToContractStruct(signedPayload.payload);\n    const normalizedTotalPrice = await normalizePriceValue(this.contractWrapper.getProvider(), signedPayload.payload.price, signedPayload.payload.currencyAddress);\n    const overrides = await this.contractWrapper.getCallOverrides();\n    await setErc20Allowance(this.contractWrapper, normalizedTotalPrice, signedPayload.payload.currencyAddress, overrides);\n    const receipt = await this.contractWrapper.sendTransaction(\"claimWithSignature\", [message, signedPayload.signature], overrides);\n    const event = this.contractWrapper.parseLogs(\"TokensClaimed\", receipt === null || receipt === void 0 ? void 0 : receipt.logs);\n    const startingIndex = event[0].args.startTokenId;\n    const endingIndex = startingIndex.add(event[0].args.quantityClaimed);\n    const results = [];\n    for (let id = startingIndex; id.lt(endingIndex); id = id.add(1)) {\n      results.push({\n        id,\n        receipt,\n        data: () => this.erc721.get(id)\n      });\n    }\n    return results;\n  }\n  async mapPayloadToContractStruct(payload) {\n    const normalizedTotalPrice = await normalizePriceValue(this.contractWrapper.getProvider(), payload.price, payload.currencyAddress);\n    const data = utils.defaultAbiCoder.encode([\"string[]\", \"address\", \"address\", \"uint256\", \"address\", \"uint256\", \"uint256\", \"address\"], [payload.tierPriority, payload.to, payload.royaltyRecipient, payload.royaltyBps, payload.primarySaleRecipient, payload.quantity, normalizedTotalPrice, payload.currencyAddress]);\n    return {\n      uid: payload.uid,\n      validityStartTimestamp: payload.mintStartTime,\n      validityEndTimestamp: payload.mintEndTime,\n      data\n    };\n  }\n}\nclass Erc721Burnable {\n  constructor(contractWrapper) {\n    _defineProperty(this, \"featureName\", FEATURE_NFT_BURNABLE.name);\n    /**\n     * Burn NFTs\n     *\n     * @remarks Burn NFTs held by the connected wallet\n     *\n     * @example\n     * ```javascript\n     * // The token ID of the NFT you want to burn\n     * const tokenId = 0;\n     *\n     * await contract.nft.burn.token(tokenId);\n     * ```\n     */\n    _defineProperty(this, \"token\", /* @__PURE__ */buildTransactionFunction(async tokenId => {\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"burn\",\n        args: [tokenId]\n      });\n    }));\n    this.contractWrapper = contractWrapper;\n  }\n}\nfunction toWei(amount) {\n  return utils.parseEther(AmountSchema.parse(amount));\n}\n\n/**\n * Claim ERC721 NFTs from a Zora Drop\n * @remarks Purchase NFTs on a Zora Drop\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.erc721.claim(tokenId, quantity);\n * ```\n */\nclass Erc721ClaimableZora {\n  constructor(erc721, contractWrapper) {\n    _defineProperty(this, \"featureName\", FEATURE_NFT_CLAIM_ZORA.name);\n    /**\n     * Claim NFT\n     *\n     * @remarks Let the specified wallet claim NFTs.\n     *\n     * @example\n     * ```javascript\n     * const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\n     * const quantity = 1; // how many NFTs you want to claim\n     *\n     * const tx = await contract.erc721.claimTo(address, quantity);\n     * const receipt = tx[0].receipt; // the transaction receipt\n     * ```\n     *\n     * @param destinationAddress - Address you want to send the token to, needs to be the connected wallet address\n     * @param quantity - Quantity of the tokens you want to claim\n     * @param options - Not applicable\n     *\n     * @returns - Receipt for the transaction\n     */\n    _defineProperty(this, \"to\", /* @__PURE__ */buildTransactionFunction(async (destinationAddress, quantity, options) => {\n      var _this$contractWrapper;\n      // TODO validation on destinationAddr / options\n      const signerAddress = await ((_this$contractWrapper = this.contractWrapper.getSigner()) === null || _this$contractWrapper === void 0 ? void 0 : _this$contractWrapper.getAddress());\n      if (destinationAddress !== signerAddress) {\n        throw new Error(\"Zora Drop: Destination address must match connected wallet address\");\n      }\n      if (options !== null && options !== void 0 && options.pricePerToken) {\n        throw new Error(\"Zora Drop: Custom pricePerToken is not supported. Price is automatically calculated\");\n      }\n      const saleDetails = await this.getSaleDetails();\n      const price = saleDetails.publicSalePrice;\n      const zoraFee = toWei(\"0.000777\");\n      const totalPrice = BigNumber.from(price).add(zoraFee).mul(quantity);\n      const tx = Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"purchase\",\n        args: [quantity],\n        overrides: {\n          value: totalPrice\n        }\n      });\n      tx.setParse(receipt => {\n        const event = this.contractWrapper.parseLogs(\"Sale\", receipt === null || receipt === void 0 ? void 0 : receipt.logs);\n        const startingIndex = event[0].args.firstPurchasedTokenId;\n        const endingIndex = startingIndex.add(quantity);\n        const results = [];\n        for (let id = startingIndex; id.lt(endingIndex); id = id.add(1)) {\n          results.push({\n            id,\n            receipt,\n            data: () => this.erc721.get(id)\n          });\n        }\n        return results;\n      });\n      return tx;\n    }));\n    this.erc721 = erc721;\n    this.contractWrapper = contractWrapper;\n  }\n  async getSaleDetails() {\n    return this.contractWrapper.read(\"saleDetails\", []);\n  }\n}\nclass Erc721LoyaltyCard {\n  constructor(contractWrapper) {\n    _defineProperty(this, \"featureName\", FEATURE_NFT_LOYALTY_CARD.name);\n    /**\n     * Cancel loyalty card NFTs\n     *\n     * @remarks Cancel loyalty card NFTs held by the connected wallet\n     *\n     * @example\n     * ```javascript\n     * // The token ID of the loyalty card you want to cancel\n     * const tokenId = 0;\n     *\n     * await contract.nft.loyaltyCard.cancel(tokenId);\n     * ```\n     */\n    _defineProperty(this, \"cancel\", /* @__PURE__ */buildTransactionFunction(async tokenId => {\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"cancel\",\n        args: [tokenId]\n      });\n    }));\n    /**\n     * Revoke loyalty card NFTs\n     *\n     * @remarks Revoke loyalty card NFTs held by some owner.\n     *\n     * @example\n     * ```javascript\n     * // The token ID of the loyalty card you want to revoke\n     * const tokenId = 0;\n     *\n     * await contract.nft.loyaltyCard.revoke(tokenId);\n     * ```\n     */\n    _defineProperty(this, \"revoke\", /* @__PURE__ */buildTransactionFunction(async tokenId => {\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"revoke\",\n        args: [tokenId]\n      });\n    }));\n    this.contractWrapper = contractWrapper;\n  }\n}\nclass Erc721UpdatableMetadata {\n  constructor(contractWrapper, storage) {\n    _defineProperty(this, \"featureName\", FEATURE_NFT_UPDATABLE_METADATA.name);\n    /**\n     * Update the metadata of an NFT\n     *\n     * @remarks Update the metadata of an NFT\n     *\n     * @example\n     * ```javascript\n     * // The token ID of the NFT whose metadata you want to update\n     * const tokenId = 0;\n     * // The new metadata\n     * const metadata = { name: \"My NFT\", description: \"My NFT description\"\"}\n     *\n     * await contract.nft.metadata.update(tokenId, metadata);\n     * ```\n     */\n    _defineProperty(this, \"update\", /* @__PURE__ */buildTransactionFunction(async (tokenId, metadata) => {\n      const uri = await uploadOrExtractURI(metadata, this.storage);\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"setTokenURI\",\n        args: [tokenId, uri]\n      });\n    }));\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n  }\n}\n\n/**\n * Set shared metadata for ERC721 NFTs (Open Edition)\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.erc721.sharedMetadata.set(metadata);\n * ```\n */\nclass Erc721SharedMetadata {\n  constructor(contractWrapper, storage) {\n    _defineProperty(this, \"featureName\", FEATURE_NFT_SHARED_METADATA.name);\n    /**\n     * Set Shared Metadata\n     *\n     * @remarks Set the shared metadata for the Open Edition NFTs.\n     *\n     * @example\n     * ```javascript\n     * const metadata = {\n     *  name: \"My NFT\",\n     *  description: \"This is my NFT\",\n     *  image: ...\n     *  animation_url: ...\n     * };\n     *\n     * const contract = await sdk.getContract(\"{{contract_address}}\");\n     *\n     * const tx = await contract.erc721.sharedMetadata.set(metadata);\n     * ```\n     *\n     * @param metadata - The metadata you want to set for the shared metadata.\n     *\n     * @returns - Receipt for the transaction\n     */\n    _defineProperty(this, \"set\", /* @__PURE__ */buildTransactionFunction(async metadata => {\n      const parsedMetadata = BasicNFTInput.parse(metadata);\n      // cleanup description\n      parsedMetadata.description = this.sanitizeJSONString(parsedMetadata.description);\n\n      // take the input and upload image and animation if it is not a URI already\n      const batch = [];\n      if (isFileOrBuffer(parsedMetadata.image)) {\n        batch.push(this.storage.upload(parsedMetadata.image));\n      } else if (typeof parsedMetadata.image === \"string\") {\n        batch.push(Promise.resolve(parsedMetadata.image));\n      } else {\n        batch.push(Promise.resolve(undefined));\n      }\n      if (isFileOrBuffer(parsedMetadata.animation_url)) {\n        batch.push(this.storage.upload(parsedMetadata.animation_url));\n      } else if (typeof parsedMetadata.animation_url === \"string\") {\n        batch.push(Promise.resolve(parsedMetadata.animation_url));\n      } else {\n        batch.push(Promise.resolve(undefined));\n      }\n      const [imageUri, animationUri] = await Promise.all(batch);\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"setSharedMetadata\",\n        args: [{\n          name: \"\".concat(parsedMetadata.name || \"\"),\n          description: parsedMetadata.description || \"\",\n          imageURI: imageUri || \"\",\n          animationURI: animationUri || \"\"\n        }]\n      });\n    }));\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n  }\n\n  /**\n   * Get Shared Metadata\n   *\n   * @remarks Get the shared metadata for the Open Edition NFTs.\n   *\n   * @example\n   * ```javascript\n   * const contract = await sdk.getContract(\"{{contract_address}}\");\n   *\n   * const tx = await contract.erc721.sharedMetadata.get();\n   * ```\n   *\n   * @returns - The shared metadata for the Open Edition NFTs.\n   */\n  async get() {\n    const metadata = await this.contractWrapper.read(\"sharedMetadata\", []);\n    if (metadata.every(value => value === \"\")) {\n      return undefined;\n    }\n    return {\n      name: metadata.name,\n      description: metadata.description,\n      image: metadata.imageURI,\n      animation_url: metadata.animationURI\n    };\n  }\n  sanitizeJSONString(val) {\n    if (!val) {\n      return val;\n    }\n    const sanitized = JSON.stringify(val);\n    return sanitized.slice(1, sanitized.length - 1);\n  }\n}\n\n/**\n * Enables generating dynamic ERC721 NFTs with rules and an associated signature, which can then be minted by anyone securely\n * @public\n */\nclass Erc721WithQuantitySignatureMintable {\n  constructor(contractWrapper, storage) {\n    _defineProperty(this, \"featureName\", FEATURE_NFT_SIGNATURE_MINTABLE_V2.name);\n    /**\n     * Mint a dynamically generated NFT\n     *\n     * @remarks Mint a dynamic NFT with a previously generated signature.\n     *\n     * @example\n     * ```javascript\n     * // see how to craft a payload to sign in the `generate()` documentation\n     * const signedPayload = contract.erc721.signature.generate(payload);\n     *\n     * // now anyone can mint the NFT\n     * const tx = contract.erc721.signature.mint(signedPayload);\n     * const receipt = tx.receipt; // the mint transaction receipt\n     * const mintedId = tx.id; // the id of the NFT minted\n     * ```\n     * @param signedPayload - the previously generated payload and signature with {@link Erc721WithQuantitySignatureMintable.generate}\n     * @twfeature ERC721SignatureMint\n     */\n    _defineProperty(this, \"mint\", /* @__PURE__ */buildTransactionFunction(async signedPayload => {\n      const mintRequest = signedPayload.payload;\n      const signature = signedPayload.signature;\n      const overrides = await this.contractWrapper.getCallOverrides();\n      const parse = receipt => {\n        const t = this.contractWrapper.parseLogs(\"TokensMintedWithSignature\", receipt.logs);\n        if (t.length === 0) {\n          throw new Error(\"No MintWithSignature event found\");\n        }\n        const id = t[0].args.tokenIdMinted;\n        return {\n          id,\n          receipt\n        };\n      };\n      if (await this.isLegacyNFTContract()) {\n        const message = await this.mapLegacyPayloadToContractStruct(mintRequest);\n        const price = message.price;\n\n        // TODO: Transaction Sequence Pattern\n        await setErc20Allowance(this.contractWrapper, price, mintRequest.currencyAddress, overrides);\n        return Transaction.fromContractWrapper({\n          contractWrapper: this.contractWrapper,\n          method: \"mintWithSignature\",\n          args: [message, signature],\n          overrides,\n          parse\n        });\n      } else {\n        const message = await this.mapPayloadToContractStruct(mintRequest);\n        const price = message.pricePerToken.mul(message.quantity);\n\n        // TODO: Transaction Sequence Pattern\n        await setErc20Allowance(this.contractWrapper, price, mintRequest.currencyAddress, overrides);\n        return Transaction.fromContractWrapper({\n          contractWrapper: this.contractWrapper,\n          method: \"mintWithSignature\",\n          args: [message, signature],\n          overrides,\n          parse\n        });\n      }\n    }));\n    /**\n     * Mint any number of dynamically generated NFT at once\n     * @remarks Mint multiple dynamic NFTs in one transaction. Note that this is only possible for free mints (cannot batch mints with a price attached to it for security reasons)\n     * @param signedPayloads - the array of signed payloads to mint\n     * @twfeature ERC721SignatureMint\n     */\n    _defineProperty(this, \"mintBatch\", /* @__PURE__ */buildTransactionFunction(async signedPayloads => {\n      const isLegacyNFTContract = await this.isLegacyNFTContract();\n      const contractPayloads = (await Promise.all(signedPayloads.map(s => isLegacyNFTContract ? this.mapLegacyPayloadToContractStruct(s.payload) : this.mapPayloadToContractStruct(s.payload)))).map((message, index) => {\n        const s = signedPayloads[index];\n        const signature = s.signature;\n        const price = s.payload.price;\n        if (BigNumber.from(price).gt(0)) {\n          throw new Error(\"Can only batch free mints. For mints with a price, use regular mint()\");\n        }\n        return {\n          message,\n          signature\n        };\n      });\n      const contractEncoder = new ContractEncoder(this.contractWrapper);\n      const encoded = contractPayloads.map(p => {\n        if (isLegacyNFTContract) {\n          return contractEncoder.encode(\"mintWithSignature\", [p.message, p.signature]);\n        } else {\n          return contractEncoder.encode(\"mintWithSignature\", [p.message, p.signature]);\n        }\n      });\n      if (hasFunction(\"multicall\", this.contractWrapper)) {\n        return Transaction.fromContractWrapper({\n          contractWrapper: this.contractWrapper,\n          method: \"multicall\",\n          args: [encoded],\n          parse: receipt => {\n            const events = this.contractWrapper.parseLogs(\"TokensMintedWithSignature\", receipt.logs);\n            if (events.length === 0) {\n              throw new Error(\"No MintWithSignature event found\");\n            }\n            return events.map(log => ({\n              id: log.args.tokenIdMinted,\n              receipt\n            }));\n          }\n        });\n      } else {\n        throw new Error(\"Multicall not available on this contract!\");\n      }\n    }));\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n  }\n  /**\n   * Verify that a payload is correctly signed\n   * @param signedPayload - the payload to verify\n   * @twfeature ERC721SignatureMint\n   *\n   * @example\n   * ```javascript\n   * const nftMetadata = {\n   *   name: \"Cool NFT #1\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * };\n   *\n   * const startTime = new Date();\n   * const endTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const payload = {\n   *   metadata: nftMetadata, // The NFT to mint\n   *   to: {{wallet_address}}, // Who will receive the NFT\n   *   quantity: 2, // the quantity of NFTs to mint\n   *   price: 0.5, // the price per NFT\n   *   currencyAddress: NATIVE_TOKEN_ADDRESS, // the currency to pay with\n   *   mintStartTime: startTime, // can mint anytime from now\n   *   mintEndTime: endTime, // to 24h from now\n   *   royaltyRecipient: \"0x...\", // custom royalty recipient for this NFT\n   *   royaltyBps: 100, // custom royalty fees for this NFT (in bps)\n   *   primarySaleRecipient: \"0x...\", // custom sale recipient for this NFT\n   * };\n   *\n   * const signedPayload = await contract.erc721.signature.generate(payload);\n   * // Now you can verify if the signed payload is valid\n   * const isValid = await contract.erc721.signature.verify(signedPayload);\n   * ```\n   */\n  async verify(signedPayload) {\n    const isLegacyNFTContract = await this.isLegacyNFTContract();\n    const mintRequest = signedPayload.payload;\n    const signature = signedPayload.signature;\n    let message;\n    let verification;\n    if (isLegacyNFTContract) {\n      message = await this.mapLegacyPayloadToContractStruct(mintRequest);\n      verification = await this.contractWrapper.read(\"verify\", [message, signature]);\n    } else {\n      message = await this.mapPayloadToContractStruct(mintRequest);\n      verification = await this.contractWrapper.read(\"verify\", [message, signature]);\n    }\n    return verification[0];\n  }\n\n  /**\n   * Generate a signature that can be used to mint a dynamic NFT\n   *\n   * @remarks Takes in an NFT and some information about how it can be minted, uploads the metadata and signs it with your private key. The generated signature can then be used to mint an NFT using the exact payload and signature generated.\n   *\n   * @example\n   * ```javascript\n   * const nftMetadata = {\n   *   name: \"Cool NFT #1\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * };\n   *\n   * const startTime = new Date();\n   * const endTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const payload = {\n   *   metadata: nftMetadata, // The NFT to mint\n   *   to: {{wallet_address}}, // Who will receive the NFT\n   *   quantity: 2, // the quantity of NFTs to mint\n   *   price: 0.5, // the price per NFT\n   *   currencyAddress: NATIVE_TOKEN_ADDRESS, // the currency to pay with\n   *   mintStartTime: startTime, // can mint anytime from now\n   *   mintEndTime: endTime, // to 24h from now\n   *   royaltyRecipient: \"0x...\", // custom royalty recipient for this NFT\n   *   royaltyBps: 100, // custom royalty fees for this NFT (in bps)\n   *   primarySaleRecipient: \"0x...\", // custom sale recipient for this NFT\n   * };\n   *\n   * const signedPayload = await contract.erc721.signature.generate(payload);\n   * // now anyone can use these to mint the NFT using `contract.erc721.signature.mint(signedPayload)`\n   * ```\n   * @param mintRequest - the payload to sign\n   * @returns the signed payload and the corresponding signature\n   * @twfeature ERC721SignatureMint\n   */\n  async generate(mintRequest) {\n    return (await this.generateBatch([mintRequest]))[0];\n  }\n\n  /**\n   * Genrate a batch of signatures that can be used to mint many dynamic NFTs.\n   *\n   * @remarks See {@link Erc721WithQuantitySignatureMintable.generate}\n   *\n   * @param payloadsToSign - the payloads to sign\n   * @returns an array of payloads and signatures\n   * @twfeature ERC721SignatureMint\n   */\n  async generateBatch(payloadsToSign) {\n    const isLegacyNFTContract = await this.isLegacyNFTContract();\n    const parsedRequests = await Promise.all(payloadsToSign.map(m => Signature721WithQuantityInput.parseAsync(m)));\n    const metadatas = parsedRequests.map(r => r.metadata);\n    const uris = await uploadOrExtractURIs(metadatas, this.storage);\n    const chainId = await this.contractWrapper.getChainID();\n    const signer = this.contractWrapper.getSigner();\n    invariant(signer, \"No signer available\");\n    return await Promise.all(parsedRequests.map(async (m, i) => {\n      const uri = uris[i];\n      const finalPayload = await Signature721WithQuantityOutput.parseAsync({\n        ...m,\n        uri\n      });\n      let signature;\n      if (isLegacyNFTContract) {\n        signature = await this.contractWrapper.signTypedData(signer, {\n          name: \"TokenERC721\",\n          version: \"1\",\n          chainId,\n          verifyingContract: this.contractWrapper.address\n        }, {\n          MintRequest: MintRequest721\n        }, await this.mapLegacyPayloadToContractStruct(finalPayload));\n      } else {\n        signature = await this.contractWrapper.signTypedData(signer, {\n          name: \"SignatureMintERC721\",\n          version: \"1\",\n          chainId,\n          verifyingContract: await this.contractWrapper.address\n        }, {\n          MintRequest: MintRequest721withQuantity\n        },\n        // TYPEHASH\n        await this.mapPayloadToContractStruct(finalPayload));\n      }\n      return {\n        payload: finalPayload,\n        signature: signature.toString()\n      };\n    }));\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  /**\n   * Maps a payload to the format expected by the contract\n   *\n   * @internal\n   *\n   * @param mintRequest - The payload to map.\n   * @returns - The mapped payload.\n   */\n  async mapPayloadToContractStruct(mintRequest) {\n    const normalizedPricePerToken = await normalizePriceValue(this.contractWrapper.getProvider(), mintRequest.price, mintRequest.currencyAddress);\n    return {\n      to: mintRequest.to,\n      royaltyRecipient: mintRequest.royaltyRecipient,\n      royaltyBps: mintRequest.royaltyBps,\n      primarySaleRecipient: mintRequest.primarySaleRecipient,\n      uri: mintRequest.uri,\n      quantity: mintRequest.quantity,\n      pricePerToken: normalizedPricePerToken,\n      currency: mintRequest.currencyAddress,\n      validityStartTimestamp: mintRequest.mintStartTime,\n      validityEndTimestamp: mintRequest.mintEndTime,\n      uid: mintRequest.uid\n    };\n  }\n  async mapLegacyPayloadToContractStruct(mintRequest) {\n    const normalizedPricePerToken = await normalizePriceValue(this.contractWrapper.getProvider(), mintRequest.price, mintRequest.currencyAddress);\n    return {\n      to: mintRequest.to,\n      price: normalizedPricePerToken,\n      uri: mintRequest.uri,\n      currency: mintRequest.currencyAddress,\n      validityEndTimestamp: mintRequest.mintEndTime,\n      validityStartTimestamp: mintRequest.mintStartTime,\n      uid: mintRequest.uid,\n      royaltyRecipient: mintRequest.royaltyRecipient,\n      royaltyBps: mintRequest.royaltyBps,\n      primarySaleRecipient: mintRequest.primarySaleRecipient\n    };\n  }\n  async isLegacyNFTContract() {\n    return detectContractFeature(this.contractWrapper, \"ERC721SignatureMintV1\");\n  }\n}\n\n/**\n * Standard ERC721 NFT functions\n * @remarks Basic functionality for a ERC721 contract that handles IPFS storage for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.erc721.transfer(walletAddress, tokenId);\n * ```\n * @public\n */\nclass Erc721 {\n  get chainId() {\n    return this._chainId;\n  }\n  constructor(contractWrapper, storage, chainId) {\n    _defineProperty(this, \"featureName\", FEATURE_NFT.name);\n    /**\n     * Transfer an NFT\n     *\n     * @remarks Transfer an NFT from the connected wallet to another wallet.\n     *\n     * @example\n     * ```javascript\n     * const walletAddress = \"{{wallet_address}}\";\n     * const tokenId = 0;\n     * await contract.erc721.transfer(walletAddress, tokenId);\n     * ```\n     * @twfeature ERC721\n     */\n    _defineProperty(this, \"transfer\", /* @__PURE__ */buildTransactionFunction(async (to, tokenId) => {\n      const [from, _to] = await Promise.all([this.contractWrapper.getSignerAddress(), resolveAddress(to)]);\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"transferFrom(address,address,uint256)\",\n        args: [from, _to, tokenId]\n      });\n    }));\n    /**\n     * Transfer an NFT from a specific wallet\n     *\n     * @remarks Transfer an NFT from the given wallet to another wallet.\n     *\n     * @example\n     * ```javascript\n     * const fromWalletAddress = \"{{wallet_address}}\";\n     * const toWalletAddress = \"{{wallet_address}}\";\n     * const tokenId = 0;\n     * await contract.erc721.transferFrom(fromWalletAddress, toWalletAddress, tokenId);\n     * ```\n     * @twfeature ERC721\n     */\n    _defineProperty(this, \"transferFrom\", /* @__PURE__ */buildTransactionFunction(async (from, to, tokenId) => {\n      const [fromAddress, toAddress] = await Promise.all([resolveAddress(from), resolveAddress(to)]);\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"transferFrom(address,address,uint256)\",\n        args: [fromAddress, toAddress, tokenId]\n      });\n    }));\n    /**\n     * Set approval for all NFTs\n     * @remarks Approve or remove operator as an operator for the caller. Operators can call transferFrom or safeTransferFrom for any token owned by the caller.\n     * @example\n     * ```javascript\n     * const operator = \"{{wallet_address}}\";\n     * await contract.erc721.setApprovalForAll(operator, true);\n     * ```\n     * @param operator - the operator's address\n     * @param approved - whether to approve or remove\n     * @twfeature ERC721\n     */\n    _defineProperty(this, \"setApprovalForAll\", /* @__PURE__ */buildTransactionFunction(async (operator, approved) => {\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"setApprovalForAll\",\n        args: [await resolveAddress(operator), approved]\n      });\n    }));\n    /**\n     * Set approval for a single NFT\n     * @remarks Approve an operator for the NFT owner. Operators can call transferFrom or safeTransferFrom for the specified token.\n     * @example\n     * ```javascript\n     * const operator = \"{{wallet_address}}\";\n     * const tokenId = 0;\n     * await contract.erc721.setApprovalForToken(operator, tokenId);\n     * ```\n     * @param operator - the operator's address\n     * @param tokenId - the tokenId to give approval for\n     *\n     * @internal\n     */\n    _defineProperty(this, \"setApprovalForToken\", /* @__PURE__ */buildTransactionFunction(async (operator, tokenId) => {\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"approve\",\n        args: [await resolveAddress(operator), tokenId]\n      });\n    }));\n    ////// ERC721 Mintable Extension //////\n    /**\n     * Mint an NFT\n     *\n     * @remarks Mint an NFT to the connected wallet.\n     *\n     * @example\n     * ```javascript\n     * // Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\n     * const metadata = {\n     *   name: \"Cool NFT\",\n     *   description: \"This is a cool NFT\",\n     *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n     * };\n     *\n     * const tx = await contract.erc721.mint(metadata);\n     * const receipt = tx.receipt; // the transaction receipt\n     * const tokenId = tx.id; // the id of the NFT minted\n     * const nft = await tx.data(); // (optional) fetch details of minted NFT\n     * ```\n     * @twfeature ERC721Mintable\n     */\n    _defineProperty(this, \"mint\", /* @__PURE__ */buildTransactionFunction(async metadata => {\n      return this.mintTo.prepare(await this.contractWrapper.getSignerAddress(), metadata);\n    }));\n    /**\n     * Mint an NFT to a specific wallet\n     *\n     * @remarks Mint a unique NFT to a specified wallet.\n     *\n     * @example\n     * ```javascript\n     * // Address of the wallet you want to mint the NFT to\n     * const walletAddress = \"{{wallet_address}}\";\n     *\n     * // Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\n     * const metadata = {\n     *   name: \"Cool NFT\",\n     *   description: \"This is a cool NFT\",\n     *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n     * };\n     *\n     * const tx = await contract.erc721.mintTo(walletAddress, metadata);\n     * const receipt = tx.receipt; // the transaction receipt\n     * const tokenId = tx.id; // the id of the NFT minted\n     * const nft = await tx.data(); // (optional) fetch details of minted NFT\n     * ```\n     * @twfeature ERC721Mintable\n     */\n    _defineProperty(this, \"mintTo\", /* @__PURE__ */buildTransactionFunction(async (receiver, metadata) => {\n      return assertEnabled(this.mintable, FEATURE_NFT_MINTABLE).to.prepare(receiver, metadata);\n    }));\n    ////// ERC721 Batch Mintable Extension //////\n    /**\n     * Mint many NFTs\n     *\n     * @remarks Mint many unique NFTs at once to the connected wallet\n     *\n     * @example\n     * ```javascript*\n     * // Custom metadata of the NFTs you want to mint.\n     * const metadatas = [{\n     *   name: \"Cool NFT #1\",\n     *   description: \"This is a cool NFT\",\n     *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n     * }, {\n     *   name: \"Cool NFT #2\",\n     *   description: \"This is a cool NFT\",\n     *   image: fs.readFileSync(\"path/to/other/image.png\"),\n     * }];\n     *\n     * const tx = await contract.erc721.mintBatch(metadatas);\n     * const receipt = tx[0].receipt; // same transaction receipt for all minted NFTs\n     * const firstTokenId = tx[0].id; // token id of the first minted NFT\n     * const firstNFT = await tx[0].data(); // (optional) fetch details of the first minted NFT\n     * ```\n     * @twfeature ERC721BatchMintable\n     */\n    _defineProperty(this, \"mintBatch\", /* @__PURE__ */buildTransactionFunction(async metadatas => {\n      return this.mintBatchTo.prepare(await this.contractWrapper.getSignerAddress(), metadatas);\n    }));\n    /**\n     * Mint many NFTs to a specific wallet\n     *\n     * @remarks Mint many unique NFTs at once to a specified wallet.\n     *\n     * @example\n     * ```javascript\n     * // Address of the wallet you want to mint the NFT to\n     * const walletAddress = \"{{wallet_address}}\";\n     *\n     * // Custom metadata of the NFTs you want to mint.\n     * const metadatas = [{\n     *   name: \"Cool NFT #1\",\n     *   description: \"This is a cool NFT\",\n     *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n     * }, {\n     *   name: \"Cool NFT #2\",\n     *   description: \"This is a cool NFT\",\n     *   image: fs.readFileSync(\"path/to/other/image.png\"),\n     * }];\n     *\n     * const tx = await contract.erc721.mintBatchTo(walletAddress, metadatas);\n     * const receipt = tx[0].receipt; // same transaction receipt for all minted NFTs\n     * const firstTokenId = tx[0].id; // token id of the first minted NFT\n     * const firstNFT = await tx[0].data(); // (optional) fetch details of the first minted NFT\n     * ```\n     * @twfeature ERC721BatchMintable\n     */\n    _defineProperty(this, \"mintBatchTo\", /* @__PURE__ */buildTransactionFunction(async (receiver, metadatas) => {\n      var _this$mintable2;\n      return assertEnabled((_this$mintable2 = this.mintable) === null || _this$mintable2 === void 0 ? void 0 : _this$mintable2.batch, FEATURE_NFT_BATCH_MINTABLE).to.prepare(receiver, metadatas);\n    }));\n    ////// ERC721 Burnable Extension //////\n    /**\n     * Burn a single NFT\n     * @param tokenId - the token Id to burn\n     *\n     * @example\n     * ```javascript\n     * const result = await contract.erc721.burn(tokenId);\n     * ```\n     * @twfeature ERC721Burnable\n     */\n    _defineProperty(this, \"burn\", /* @__PURE__ */buildTransactionFunction(async tokenId => {\n      return assertEnabled(this.burnable, FEATURE_NFT_BURNABLE).token.prepare(tokenId);\n    }));\n    ////// ERC721 Loyalty Card Extension //////\n    /**\n     * Cancel loyalty card NFTs\n     *\n     * @remarks Cancel loyalty card NFTs held by the connected wallet\n     *\n     * @example\n     * ```javascript\n     * // The token ID of the loyalty card you want to cancel\n     * const tokenId = 0;\n     *\n     * const result = await contract.erc721.cancel(tokenId);\n     * ```\n     * @twfeature ERC721LoyaltyCard\n     */\n    _defineProperty(this, \"cancel\", /* @__PURE__ */buildTransactionFunction(async tokenId => {\n      return assertEnabled(this.loyaltyCard, FEATURE_NFT_LOYALTY_CARD).cancel.prepare(tokenId);\n    }));\n    /**\n     * Revoke loyalty card NFTs\n     *\n     * @remarks Revoke loyalty card NFTs held by some owner.\n     *\n     * @example\n     * ```javascript\n     * // The token ID of the loyalty card you want to revoke\n     * const tokenId = 0;\n     *\n     * const result = await contract.erc721.revoke(tokenId);\n     * ```\n     * @twfeature ERC721LoyaltyCard\n     */\n    _defineProperty(this, \"revoke\", /* @__PURE__ */buildTransactionFunction(async tokenId => {\n      return assertEnabled(this.loyaltyCard, FEATURE_NFT_LOYALTY_CARD).revoke.prepare(tokenId);\n    }));\n    ////// ERC721 LazyMint Extension //////\n    /**\n     * Lazy mint NFTs\n     *\n     * @remarks Create batch allows you to create a batch of many unique NFTs in one transaction.\n     *\n     * @example\n     * ```javascript\n     * // Custom metadata of the NFTs to create\n     * const metadatas = [{\n     *   name: \"Cool NFT\",\n     *   description: \"This is a cool NFT\",\n     *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n     * }, {\n     *   name: \"Cool NFT\",\n     *   description: \"This is a cool NFT\",\n     *   image: fs.readFileSync(\"path/to/image.png\"),\n     * }];\n     *\n     * const results = await contract.erc721.lazyMint(metadatas); // uploads and creates the NFTs on chain\n     * const firstTokenId = results[0].id; // token id of the first created NFT\n     * const firstNFT = await results[0].data(); // (optional) fetch details of the first created NFT\n     * ```\n     *\n     * @param metadatas - The metadata to include in the batch.\n     * @param options - optional upload progress callback\n     * @twfeature ERC721LazyMintable\n     */\n    _defineProperty(this, \"lazyMint\", /* @__PURE__ */buildTransactionFunction(async (metadatas, options) => {\n      return assertEnabled(this.lazyMintable, FEATURE_NFT_LAZY_MINTABLE).lazyMint.prepare(metadatas, options);\n    }));\n    ////// ERC721 Metadata Extension //////\n    /**\n     * Update the metadata of an NFT\n     *\n     * @remarks Update the metadata of an NFT\n     *\n     * @example\n     * ```javascript\n     * // The token ID of the NFT whose metadata you want to update\n     * const tokenId = 0;\n     * // The new metadata\n     * const metadata = { name: \"My NFT\", description: \"My NFT description\"\"}\n     *\n     * await contract.erc721.update(tokenId, metadata);\n     * ```\n     * @twfeature ERC721UpdatableMetadata\n     */\n    _defineProperty(this, \"update\", /* @__PURE__ */buildTransactionFunction(async (tokenId, metadata) => {\n      return assertEnabled(this.updatableMetadata, FEATURE_NFT_UPDATABLE_METADATA).update.prepare(tokenId, metadata);\n    }));\n    ////// ERC721 Claimable Extension //////\n    /**\n     * Claim NFTs\n     *\n     * @remarks Let the specified wallet claim NFTs.\n     *\n     * @example\n     * ```javascript\n     * const quantity = 1; // how many unique NFTs you want to claim\n     *\n     * const tx = await contract.erc721.claim(quantity);\n     * const receipt = tx.receipt; // the transaction receipt\n     * const claimedTokenId = tx.id; // the id of the NFT claimed\n     * const claimedNFT = await tx.data(); // (optional) get the claimed NFT metadata\n     * ```\n     *\n     * @param quantity - Quantity of the tokens you want to claim\n     *\n     * @returns - an array of results containing the id of the token claimed, the transaction receipt and a promise to optionally fetch the nft metadata\n     * @twfeature ERC721ClaimCustom | ERC721ClaimPhasesV2 | ERC721ClaimPhasesV1 | ERC721ClaimConditionsV2 | ERC721ClaimConditionsV1 | ERC721ClaimZora\n     */\n    _defineProperty(this, \"claim\", /* @__PURE__ */buildTransactionFunction(async (quantity, options) => {\n      return this.claimTo.prepare(await this.contractWrapper.getSignerAddress(), quantity, options);\n    }));\n    /**\n     * Claim NFTs to a specific wallet\n     *\n     * @remarks Let the specified wallet claim NFTs.\n     *\n     * @example\n     * ```javascript\n     * const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\n     * const quantity = 1; // how many unique NFTs you want to claim\n     *\n     * const tx = await contract.erc721.claimTo(address, quantity);\n     * const receipt = tx.receipt; // the transaction receipt\n     * const claimedTokenId = tx.id; // the id of the NFT claimed\n     * const claimedNFT = await tx.data(); // (optional) get the claimed NFT metadata\n     * ```\n     *\n     * @param destinationAddress - Address you want to send the token to\n     * @param quantity - Quantity of the tokens you want to claim\n     * @param options\n     * @returns - an array of results containing the id of the token claimed, the transaction receipt and a promise to optionally fetch the nft metadata\n     * @twfeature ERC721ClaimCustom | ERC721ClaimPhasesV2 | ERC721ClaimPhasesV1 | ERC721ClaimConditionsV2 | ERC721ClaimConditionsV1 | ERC721ClaimZora\n     */\n    _defineProperty(this, \"claimTo\", /* @__PURE__ */buildTransactionFunction(async (destinationAddress, quantity, options) => {\n      const claimWithConditions = this.claimWithConditions;\n      const claim = this.claimCustom;\n      const claimZora = this.claimZora;\n      if (claimWithConditions) {\n        return claimWithConditions.to.prepare(destinationAddress, quantity, options);\n      }\n      if (claim) {\n        return claim.to.prepare(destinationAddress, quantity, options);\n      }\n      if (claimZora) {\n        return claimZora.to.prepare(destinationAddress, quantity, options);\n      }\n      throw new ExtensionNotImplementedError(FEATURE_NFT_CLAIM_CUSTOM);\n    }));\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.query = this.detectErc721Enumerable();\n    this.mintable = this.detectErc721Mintable();\n    this.burnable = this.detectErc721Burnable();\n    this.lazyMintable = this.detectErc721LazyMintable();\n    this.tieredDropable = this.detectErc721TieredDrop();\n    this.signatureMintable = this.detectErc721SignatureMintable();\n    this.claimWithConditions = this.detectErc721ClaimableWithConditions();\n    this.claimCustom = this.detectErc721Claimable();\n    this.claimZora = this.detectErc721ClaimableZora();\n    this.erc721SharedMetadata = this.detectErc721SharedMetadata();\n    this.loyaltyCard = this.detectErc721LoyaltyCard();\n    this.updatableMetadata = this.detectErc721UpdatableMetadata();\n    this._chainId = chainId;\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  ////// Standard ERC721 Extension //////\n\n  /**\n   * Get a single NFT\n   *\n   * @example\n   * ```javascript\n   * const tokenId = 0;\n   * const nft = await contract.erc721.get(tokenId);\n   * ```\n   * @param tokenId - the tokenId of the NFT to retrieve\n   * @returns The NFT metadata\n   * @twfeature ERC721\n   */\n  async get(tokenId) {\n    const [owner, metadata] = await Promise.all([this.ownerOf(tokenId).catch(() => constants.AddressZero), this.getTokenMetadata(tokenId).catch(() => ({\n      id: tokenId.toString(),\n      uri: \"\",\n      ...FALLBACK_METADATA\n    }))]);\n    return {\n      owner,\n      metadata,\n      type: \"ERC721\",\n      supply: \"1\"\n    };\n  }\n\n  /**\n   * Get the current owner of an NFT\n   *\n   * @param tokenId - the tokenId of the NFT\n   * @returns the address of the owner\n   * @twfeature ERC721\n   */\n  async ownerOf(tokenId) {\n    return await this.contractWrapper.read(\"ownerOf\", [tokenId]);\n  }\n\n  /**\n   * Get NFT balance of a specific wallet\n   *\n   * @remarks Get a wallets NFT balance (number of NFTs in this contract owned by the wallet).\n   *\n   * @example\n   * ```javascript\n   * const walletAddress = \"{{wallet_address}}\";\n   * const balance = await contract.erc721.balanceOf(walletAddress);\n   * console.log(balance);\n   * ```\n   * @twfeature ERC721\n   */\n  async balanceOf(address) {\n    return await this.contractWrapper.read(\"balanceOf\", [await resolveAddress(address)]);\n  }\n\n  /**\n   * Get NFT balance for the currently connected wallet\n   */\n  async balance() {\n    return await this.balanceOf(await this.contractWrapper.getSignerAddress());\n  }\n\n  /**\n   * Get whether this wallet has approved transfers from the given operator\n   * @param address - the wallet address\n   * @param operator - the operator address\n   */\n  async isApproved(address, operator) {\n    const [_address, _operator] = await Promise.all([resolveAddress(address), resolveAddress(operator)]);\n    return await this.contractWrapper.read(\"isApprovedForAll\", [_address, _operator]);\n  }\n  ////// ERC721 Supply Extension //////\n  /**\n   * Get all NFTs\n   *\n   * @remarks Get all the data associated with every NFT in this contract.\n   *\n   * By default, returns the first 100 NFTs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const nfts = await contract.erc721.getAll();\n   * console.log(nfts);\n   * ```\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs queried.\n   * @twfeature ERC721Supply | ERC721Enumerable\n   */\n  async getAll(queryParams) {\n    return assertEnabled(this.query, FEATURE_NFT_SUPPLY).all(queryParams);\n  }\n\n  /**\n   * Get all NFT owners\n   * @example\n   * ```javascript\n   * const owners = await contract.erc721.getAllOwners();\n   * console.log(owners);\n   * ```\n   * @returns an array of token ids and owners\n   * @twfeature ERC721Supply | ERC721Enumerable\n   */\n  async getAllOwners() {\n    return assertEnabled(this.query, FEATURE_NFT_SUPPLY).allOwners();\n  }\n\n  /**\n   * Get the total number of NFTs minted\n   * @remarks This returns the total number of NFTs minted in this contract, **not** the total supply of a given token.\n   * @example\n   * ```javascript\n   * const count = await contract.erc721.totalCount();\n   * console.log(count);\n   * ```\n   *\n   * @returns the total number of NFTs minted in this contract\n   * @public\n   */\n  async totalCount() {\n    return this.nextTokenIdToMint();\n  }\n\n  /**\n   * Get the total count NFTs minted in this contract\n   * @twfeature ERC721Supply | ERC721Enumerable\n   */\n  async totalCirculatingSupply() {\n    return assertEnabled(this.query, FEATURE_NFT_SUPPLY).totalCirculatingSupply();\n  }\n\n  ////// ERC721 Enumerable Extension //////\n\n  /**\n   * Get all NFTs owned by a specific wallet\n   *\n   * @remarks Get all the data associated with the NFTs owned by a specific wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to get the NFTs of\n   * const address = \"{{wallet_address}}\";\n   * const nfts = await contract.erc721.getOwned(address);\n   * console.log(nfts);\n   * ```\n   * @param walletAddress - the wallet address to query, defaults to the connected wallet\n   * @returns The NFT metadata for all NFTs in the contract.\n   * @twfeature ERC721Supply | ERC721Enumerable\n   */\n  async getOwned(walletAddress) {\n    var _this$query;\n    if (walletAddress) {\n      walletAddress = await resolveAddress(walletAddress);\n    }\n    if ((_this$query = this.query) !== null && _this$query !== void 0 && _this$query.owned) {\n      return this.query.owned.all(walletAddress);\n    } else {\n      const [address, allOwners] = await Promise.all([walletAddress || this.contractWrapper.getSignerAddress(), this.getAllOwners()]);\n      return await Promise.all((allOwners || []).filter(i => {\n        var _i$owner;\n        return (address === null || address === void 0 ? void 0 : address.toLowerCase()) === ((_i$owner = i.owner) === null || _i$owner === void 0 ? void 0 : _i$owner.toLowerCase());\n      }).map(i => this.get(i.tokenId)));\n    }\n  }\n\n  /**\n   * Get all token ids of NFTs owned by a specific wallet.\n   * @param walletAddress - the wallet address to query, defaults to the connected wallet\n   */\n  async getOwnedTokenIds(walletAddress) {\n    var _this$query2;\n    if (walletAddress) {\n      walletAddress = await resolveAddress(walletAddress);\n    }\n    if ((_this$query2 = this.query) !== null && _this$query2 !== void 0 && _this$query2.owned) {\n      return this.query.owned.tokenIds(walletAddress);\n    } else {\n      const [address, allOwners] = await Promise.all([walletAddress || this.contractWrapper.getSignerAddress(), this.getAllOwners()]);\n      return (allOwners || []).filter(i => {\n        var _i$owner2;\n        return (address === null || address === void 0 ? void 0 : address.toLowerCase()) === ((_i$owner2 = i.owner) === null || _i$owner2 === void 0 ? void 0 : _i$owner2.toLowerCase());\n      }).map(i => BigNumber.from(i.tokenId));\n    }\n  }\n  /**\n   * Construct a mint transaction without executing it.\n   * This is useful for estimating the gas cost of a mint transaction, overriding transaction options and having fine grained control over the transaction execution.\n   * @param receiver - Address you want to send the token to\n   * @param metadata - The metadata of the NFT you want to mint\n   *\n   * @deprecated Use `contract.erc721.mint.prepare(...args)` instead\n   * @twfeature ERC721Mintable\n   */\n  async getMintTransaction(receiver, metadata) {\n    return this.mintTo.prepare(receiver, metadata);\n  }\n  /**\n   * Construct a claim transaction without executing it.\n   * This is useful for estimating the gas cost of a claim transaction, overriding transaction options and having fine grained control over the transaction execution.\n   * @param destinationAddress\n   * @param quantity\n   * @param options\n   *\n   * @deprecated Use `contract.erc721.claim.prepare(...args)` instead\n   * @twfeature ERC721ClaimCustom | ERC721ClaimPhasesV2 | ERC721ClaimPhasesV1 | ERC721ClaimConditionsV2 | ERC721ClaimConditionsV1\n   */\n  async getClaimTransaction(destinationAddress, quantity, options) {\n    const claimWithConditions = this.claimWithConditions;\n    const claim = this.claimCustom;\n    if (claimWithConditions) {\n      return claimWithConditions.conditions.getClaimTransaction(destinationAddress, quantity, options);\n    }\n    if (claim) {\n      return claim.getClaimTransaction(destinationAddress, quantity, options);\n    }\n    throw new ExtensionNotImplementedError(FEATURE_NFT_CLAIM_CUSTOM);\n  }\n\n  /**\n   * Get the claimed supply\n   *\n   * @remarks Get the number of claimed NFTs in this Drop.\n   *\n   * * @example\n   * ```javascript\n   * const claimedNFTCount = await contract.totalClaimedSupply();\n   * console.log(`NFTs claimed: ${claimedNFTCount}`);\n   * ```\n   * @returns the unclaimed supply\n   * @twfeature ERC721ClaimCustom | ERC721ClaimPhasesV2 | ERC721ClaimPhasesV1 | ERC721ClaimConditionsV2 | ERC721ClaimConditionsV1\n   */\n  async totalClaimedSupply() {\n    const contract = this.contractWrapper;\n    if (hasFunction(\"totalMinted\", contract)) {\n      return this.contractWrapper.read(\"totalMinted\", []);\n    }\n    if (hasFunction(\"nextTokenIdToClaim\", contract)) {\n      return this.contractWrapper.read(\"nextTokenIdToClaim\", []);\n    }\n    throw new Error(\"No function found on contract to get total claimed supply\");\n  }\n\n  /**\n   * Get the unclaimed supply\n   *\n   * @remarks Get the number of unclaimed NFTs in this Drop.\n   *\n   * * @example\n   * ```javascript\n   * const unclaimedNFTCount = await contract.totalUnclaimedSupply();\n   * console.log(`NFTs left to claim: ${unclaimedNFTCount}`);\n   * ```\n   * @returns the unclaimed supply\n   * @twfeature ERC721ClaimCustom | ERC721ClaimPhasesV2 | ERC721ClaimPhasesV1 | ERC721ClaimConditionsV2 | ERC721ClaimConditionsV1\n   */\n  async totalUnclaimedSupply() {\n    const [nextTokenIdToMint, totalClaimedSupply] = await Promise.all([this.nextTokenIdToMint(), this.totalClaimedSupply()]);\n    return nextTokenIdToMint.sub(totalClaimedSupply);\n  }\n\n  /**\n   * Configure claim conditions\n   * @remarks Define who can claim NFTs in the collection, when and how many.\n   * @example\n   * ```javascript\n   * const presaleStartTime = new Date();\n   * const publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const claimConditions = [\n   *   {\n   *     startTime: presaleStartTime, // start the presale now\n   *     maxClaimableSupply: 2, // limit how many mints for this presale\n   *     price: 0.01, // presale price\n   *     snapshot: ['0x...', '0x...'], // limit minting to only certain addresses\n   *   },\n   *   {\n   *     startTime: publicSaleStartTime, // 24h after presale, start public sale\n   *     price: 0.08, // public sale price\n   *   }\n   * ]);\n   * await contract.erc721.claimConditions.set(claimConditions);\n   * ```\n   * @twfeature ERC721ClaimPhasesV2 | ERC721ClaimPhasesV1 | ERC721ClaimConditionsV2 | ERC721ClaimConditionsV1\n   */\n  get claimConditions() {\n    return assertEnabled(this.claimWithConditions, FEATURE_NFT_CLAIM_CONDITIONS_V2).conditions;\n  }\n\n  ////// ERC721 Tiered Drop Extension //////\n\n  /**\n   * Tiered Drop\n   * @remarks Drop lazy minted NFTs using a tiered drop mechanism.\n   * @twfeature ERC721TieredDrop\n   */\n  get tieredDrop() {\n    return assertEnabled(this.tieredDropable, FEATURE_NFT_TIERED_DROP);\n  }\n\n  ////// ERC721 SignatureMint Extension //////\n\n  /**\n   * Mint with signature\n   * @remarks Generate dynamic NFTs with your own signature, and let others mint them using that signature.\n   * @example\n   * ```javascript\n   * // see how to craft a payload to sign in the `contract.erc721.signature.generate()` documentation\n   * const signedPayload = await contract.erc721.signature.generate(payload);\n   *\n   * // now anyone can mint the NFT\n   * const tx = await contract.erc721.signature.mint(signedPayload);\n   * const receipt = tx.receipt; // the mint transaction receipt\n   * const mintedId = tx.id; // the id of the NFT minted\n   * ```\n   * @twfeature ERC721SignatureMintV1 | ERC721SignatureMintV2\n   */\n  get signature() {\n    return assertEnabled(this.signatureMintable, FEATURE_NFT_SIGNATURE_MINTABLE_V2);\n  }\n\n  ////// ERC721 DelayedReveal Extension //////\n\n  /**\n   * Mint delayed reveal NFTs\n   * @remarks Create a batch of encrypted NFTs that can be revealed at a later time.\n   * @example\n   * ```javascript\n   * // the real NFTs, these will be encrypted until you reveal them\n   * const realNFTs = [{\n   *   name: \"Common NFT #1\",\n   *   description: \"Common NFT, one of many.\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }, {\n   *   name: \"Super Rare NFT #2\",\n   *   description: \"You got a Super Rare NFT!\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }];\n   * // A placeholder NFT that people will get immediately in their wallet, and will be converted to the real NFT at reveal time\n   * const placeholderNFT = {\n   *   name: \"Hidden NFT\",\n   *   description: \"Will be revealed next week!\"\n   * };\n   * // Create and encrypt the NFTs\n   * await contract.erc721.revealer.createDelayedRevealBatch(\n   *   placeholderNFT,\n   *   realNFTs,\n   *   \"my secret password\",\n   * );\n   * // Whenever you're ready, reveal your NFTs at any time\n   * const batchId = 0; // the batch to reveal\n   * await contract.erc721.revealer.reveal(batchId, \"my secret password\");\n   * ```\n   * @twfeature ERC721Revealable\n   */\n  get revealer() {\n    var _this$lazyMintable;\n    return assertEnabled((_this$lazyMintable = this.lazyMintable) === null || _this$lazyMintable === void 0 ? void 0 : _this$lazyMintable.revealer, FEATURE_NFT_REVEALABLE);\n  }\n\n  ////// ERC721 Shared Metadata Extension (Open Edition) //////\n\n  /**\n   * Set shared metadata for all NFTs\n   * @remarks Set shared metadata for all NFTs in the collection. (Open Edition)\n   * @example\n   * ```javascript\n   * // defiine the metadata\n   * const metadata = {\n   *  name: \"Shared Metadata\",\n   *  description: \"Every NFT in this collection will share this metadata.\"\n   * };\n   *\n   *\n   * const tx = contract.erc721.sharedMetadata.set(metadata);\n   * ```\n   * @twfeature ERC721SharedMetadata\n   */\n  get sharedMetadata() {\n    return assertEnabled(this.erc721SharedMetadata, FEATURE_NFT_SHARED_METADATA);\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  /**\n   * @internal\n   */\n  async getTokenMetadata(tokenId) {\n    const tokenUri = await this.contractWrapper.read(\"tokenURI\", [tokenId]);\n    if (!tokenUri) {\n      throw new NotFoundError();\n    }\n    return fetchTokenMetadata(tokenId, tokenUri, this.storage);\n  }\n\n  /**\n   * Return the next available token ID to mint\n   * @internal\n   */\n  async nextTokenIdToMint() {\n    if (hasFunction(\"nextTokenIdToMint\", this.contractWrapper)) {\n      let nextTokenIdToMint = await this.contractWrapper.read(\"nextTokenIdToMint\", []);\n      // handle open editions and contracts with startTokenId\n      if (hasFunction(\"startTokenId\", this.contractWrapper)) {\n        nextTokenIdToMint = nextTokenIdToMint.sub(await this.contractWrapper.read(\"startTokenId\", []));\n      }\n      return nextTokenIdToMint;\n    } else if (hasFunction(\"totalSupply\", this.contractWrapper)) {\n      return await this.contractWrapper.read(\"totalSupply\", []);\n    } else {\n      throw new Error(\"Contract requires either `nextTokenIdToMint` or `totalSupply` function available to determine the next token ID to mint\");\n    }\n  }\n  detectErc721Enumerable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC721Supply\") || hasFunction(\"nextTokenIdToMint\", this.contractWrapper)) {\n      return new Erc721Supply(this, this.contractWrapper);\n    }\n    return undefined;\n  }\n  detectErc721Mintable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC721Mintable\")) {\n      return new Erc721Mintable(this, this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n  detectErc721Burnable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC721Burnable\")) {\n      return new Erc721Burnable(this.contractWrapper);\n    }\n    return undefined;\n  }\n  detectErc721LazyMintable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC721LazyMintable\")) {\n      return new Erc721LazyMintable(this, this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n  detectErc721TieredDrop() {\n    if (detectContractFeature(this.contractWrapper, \"ERC721TieredDrop\")) {\n      return new Erc721TieredDrop(this, this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n  detectErc721SignatureMintable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC721SignatureMintV1\") || detectContractFeature(this.contractWrapper, \"ERC721SignatureMintV2\")) {\n      return new Erc721WithQuantitySignatureMintable(this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n  detectErc721ClaimableWithConditions() {\n    if (detectContractFeature(this.contractWrapper, \"ERC721ClaimConditionsV1\") || detectContractFeature(this.contractWrapper, \"ERC721ClaimConditionsV2\") || detectContractFeature(this.contractWrapper, \"ERC721ClaimPhasesV1\") || detectContractFeature(this.contractWrapper, \"ERC721ClaimPhasesV2\")) {\n      return new Erc721ClaimableWithConditions(this, this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n  detectErc721Claimable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC721ClaimCustom\")) {\n      return new Erc721Claimable(this, this.contractWrapper);\n    }\n    return undefined;\n  }\n  detectErc721ClaimableZora() {\n    if (detectContractFeature(this.contractWrapper, \"ERC721ClaimZora\")) {\n      return new Erc721ClaimableZora(this, this.contractWrapper);\n    }\n    return undefined;\n  }\n  detectErc721SharedMetadata() {\n    if (detectContractFeature(this.contractWrapper, \"ERC721SharedMetadata\")) {\n      return new Erc721SharedMetadata(this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n  detectErc721LoyaltyCard() {\n    if (detectContractFeature(this.contractWrapper, \"ERC721LoyaltyCard\")) {\n      return new Erc721LoyaltyCard(this.contractWrapper);\n    }\n    return undefined;\n  }\n  detectErc721UpdatableMetadata() {\n    if (detectContractFeature(this.contractWrapper, \"ERC721UpdatableMetadata\")) {\n      return new Erc721UpdatableMetadata(this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n}\n\n/**\n * Mint Many ERC1155 NFTs at once\n * @remarks NFT batch minting functionality that handles IPFS storage for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.edition.mint.batch.to(walletAddress, [nftMetadataWithSupply1, nftMetadataWithSupply2, ...]);\n * ```\n * @public\n */\n\nclass Erc1155BatchMintable {\n  constructor(erc1155, contractWrapper, storage) {\n    _defineProperty(this, \"featureName\", FEATURE_EDITION_BATCH_MINTABLE.name);\n    /**\n     * Mint Many NFTs with limited supplies\n     *\n     * @remarks Mint many different NFTs with limited supplies to a specified wallet.\n     *\n     * @example\n     * ```javascript\n     * // Address of the wallet you want to mint the NFT to\n     * const toAddress = \"{{wallet_address}}\"\n     *\n     * // Custom metadata and supplies of your NFTs\n     * const metadataWithSupply = [{\n     *   supply: 50, // The number of this NFT you want to mint\n     *   metadata: {\n     *     name: \"Cool NFT #1\",\n     *     description: \"This is a cool NFT\",\n     *     image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n     *   },\n     * }, {\n     *   supply: 100,\n     *   metadata: {\n     *     name: \"Cool NFT #2\",\n     *     description: \"This is a cool NFT\",\n     *     image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n     *   },\n     * }];\n     *\n     * const tx = await contract.edition.mint.batch.to(toAddress, metadataWithSupply);\n     * const receipt = tx[0].receipt; // same transaction receipt for all minted NFTs\n     * const firstTokenId = tx[0].id; // token id of the first minted NFT\n     * const firstNFT = await tx[0].data(); // (optional) fetch details of the first minted NFT\n     * ```\n     */\n    _defineProperty(this, \"to\", /* @__PURE__ */buildTransactionFunction(async (to, metadataWithSupply) => {\n      const metadatas = metadataWithSupply.map(a => a.metadata);\n      const supplies = metadataWithSupply.map(a => a.supply);\n      const uris = await uploadOrExtractURIs(metadatas, this.storage);\n      const resolvedAddress = await resolveAddress(to);\n      const contractEncoder = new ContractEncoder(this.contractWrapper);\n      const encoded = await Promise.all(uris.map(async (uri, index) => contractEncoder.encode(\"mintTo\", [resolvedAddress, constants.MaxUint256, uri, supplies[index]])));\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"multicall\",\n        args: [encoded],\n        parse: receipt => {\n          const events = this.contractWrapper.parseLogs(\"TokensMinted\", receipt.logs);\n          if (events.length === 0 || events.length < metadatas.length) {\n            throw new Error(\"TokenMinted event not found, minting failed\");\n          }\n          return events.map(e => {\n            const id = e.args.tokenIdMinted;\n            return {\n              id,\n              receipt,\n              data: () => this.erc1155.get(id)\n            };\n          });\n        }\n      });\n    }));\n    this.erc1155 = erc1155;\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n  }\n}\nclass Erc1155Burnable {\n  constructor(contractWrapper) {\n    _defineProperty(this, \"featureName\", FEATURE_EDITION_BURNABLE.name);\n    /**\n     * Burn a specified amount of a NFTs\n     *\n     * @remarks Burn the specified NFTs from the connected wallet\n     *\n     * @param tokenId - the token Id to burn\n     * @param amount - amount to burn\n     *\n     * @example\n     * ```javascript\n     * // The token ID to burn NFTs of\n     * const tokenId = 0;\n     * // The amount of the NFT you want to burn\n     * const amount = 2;\n     *\n     * const result = await contract.edition.burn.tokens(tokenId, amount);\n     * ```\n     */\n    _defineProperty(this, \"tokens\", /* @__PURE__ */buildTransactionFunction(async (tokenId, amount) => {\n      const account = await this.contractWrapper.getSignerAddress();\n      return this.from.prepare(account, tokenId, amount);\n    }));\n    /**\n     * Burn a specified amount of a NFTs\n     *\n     * @remarks Burn the specified NFTs from a specified wallet\n     *\n     * @param account - the address to burn NFTs from\n     * @param tokenId - the tokenId to burn\n     * @param amount - amount to burn\n     *\n     * @example\n     * ```javascript\n     * // The address of the wallet to burn NFTS from\n     * const account = \"0x...\";\n     * // The token ID to burn NFTs of\n     * const tokenId = 0;\n     * // The amount of this NFT you want to burn\n     * const amount = 2;\n     *\n     * const result = await contract.edition.burn.from(account, tokenId, amount);\n     * ```\n     */\n    _defineProperty(this, \"from\", /* @__PURE__ */buildTransactionFunction(async (account, tokenId, amount) => {\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"burn\",\n        args: [await resolveAddress(account), tokenId, amount]\n      });\n    }));\n    /**\n     * Burn a batch of NFTs\n     *\n     * @remarks Burn the batch NFTs from the connected wallet\n     *\n     * @param tokenIds - the tokenIds to burn\n     * @param amounts - amount of each token to burn\n     *\n     * @example\n     * ```javascript\n     * // The token IDs to burn NFTs of\n     * const tokenIds = [0, 1];\n     * // The amounts of each NFT you want to burn\n     * const amounts = [2, 2];\n     *\n     * const result = await contract.edition.burn.batch(tokenIds, amounts);\n     * ```\n     */\n    _defineProperty(this, \"batch\", /* @__PURE__ */buildTransactionFunction(async (tokenIds, amounts) => {\n      const account = await this.contractWrapper.getSignerAddress();\n      return this.batchFrom.prepare(account, tokenIds, amounts);\n    }));\n    /**\n     * Burn a batch of NFTs\n     *\n     * @remarks Burn the batch NFTs from the specified wallet\n     *\n     * @param account - the address to burn NFTs from\n     * @param tokenIds - the tokenIds to burn\n     * @param amounts - amount of each token to burn\n     *\n     * @example\n     * ```javascript\n     * // The address of the wallet to burn NFTS from\n     * const account = \"0x...\";\n     * // The token IDs to burn NFTs of\n     * const tokenIds = [0, 1];\n     * // The amounts of each NFT you want to burn\n     * const amounts = [2, 2];\n     *\n     * const result = await contract.edition.burn.batchFrom(account, tokenIds, amounts);\n     * ```\n     */\n    _defineProperty(this, \"batchFrom\", /* @__PURE__ */buildTransactionFunction(async (account, tokenIds, amounts) => {\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"burnBatch\",\n        args: [await resolveAddress(account), tokenIds, amounts]\n      });\n    }));\n    this.contractWrapper = contractWrapper;\n  }\n}\n\n/**\n * List ERC1155 NFTs\n * @remarks Easily list all the NFTs in a ERC1155 contract.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const nfts = await contract.edition.query.all();\n * ```\n * @public\n */\n\nclass Erc1155Enumerable {\n  constructor(erc1155, contractWrapper) {\n    _defineProperty(this, \"featureName\", FEATURE_EDITION_ENUMERABLE.name);\n    this.erc1155 = erc1155;\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Get All NFTs\n   *\n   * @remarks Get all the data associated with every NFT in this contract.\n   *\n   * By default, returns the first 100 NFTs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const nfts = await contract.edition.query.all();\n   * ```\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs queried.\n   */\n  async all(queryParams) {\n    const start = BigNumber.from((queryParams === null || queryParams === void 0 ? void 0 : queryParams.start) || 0).toNumber();\n    const count = BigNumber.from((queryParams === null || queryParams === void 0 ? void 0 : queryParams.count) || DEFAULT_QUERY_ALL_COUNT).toNumber();\n    const maxId = Math.min((await this.totalCount()).toNumber(), start + count);\n    return await Promise.all([...Array(maxId - start).keys()].map(i => this.erc1155.get((start + i).toString())));\n  }\n\n  /**\n   * Get the number of NFTs minted\n   * @remarks This returns the total number of NFTs minted in this contract, **not** the total supply of a given token.\n   *\n   * @returns the total number of NFTs minted in this contract\n   * @public\n   */\n  async totalCount() {\n    return await this.contractWrapper.read(\"nextTokenIdToMint\", []);\n  }\n\n  /**\n   * Get the supply of token for a given tokenId.\n   * @remarks This is **not** the sum of supply of all NFTs in the contract.\n   *\n   * @returns the total number of NFTs minted in this contract\n   * @public\n   */\n  async totalCirculatingSupply(tokenId) {\n    return await this.contractWrapper.read(\"totalSupply\", [tokenId]);\n  }\n\n  /**\n   * Get all NFTs owned by a specific wallet\n   *\n   * @remarks Get all the data associated with the NFTs owned by a specific wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to get the NFTs of\n   * const address = \"{{wallet_address}}\";\n   * const nfts = await contract.edition.query.owned(address);\n   * ```\n   *\n   * @returns The NFT metadata for all NFTs in the contract.\n   */\n  async owned(walletAddress) {\n    const [address, maxId] = await Promise.all([resolveAddress(walletAddress || (await this.contractWrapper.getSignerAddress())), this.contractWrapper.read(\"nextTokenIdToMint\", [])]);\n    const balances = await this.contractWrapper.read(\"balanceOfBatch\", [Array(maxId.toNumber()).fill(address), Array.from(Array(maxId.toNumber()).keys())]);\n    const ownedBalances = balances.map((b, i) => {\n      return {\n        tokenId: i,\n        balance: b\n      };\n    }).filter(b => b.balance.gt(0));\n    const nfts = (await Promise.all(ownedBalances.map(item => this.erc1155.get(item.tokenId.toString())))).map((editionMetadata, index) => ({\n      ...editionMetadata,\n      owner: address,\n      quantityOwned: ownedBalances[index].balance.toString()\n    }));\n    return nfts;\n  }\n}\nasync function getPrebuiltInfo(address, provider) {\n  try {\n    const contract = new Contract(address, IThirdwebContractABI, provider);\n    const [type, version] = await Promise.all([utils.toUtf8String(await contract.contractType()) // eslint-disable-next-line no-control-regex\n    .replace(/\\x00/g, \"\"), await contract.contractVersion()]);\n    return {\n      type,\n      version\n    };\n  } catch (e) {\n    return undefined;\n  }\n}\nclass Erc1155LazyMintable {\n  /**\n   * Delayed reveal\n   * @remarks Create a batch of encrypted NFTs that can be revealed at a later time.\n   * @example\n   * ```javascript\n   * // the real NFTs, these will be encrypted until you reveal them\n   * const realNFTs = [{\n   *   name: \"Common NFT #1\",\n   *   description: \"Common NFT, one of many.\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }, {\n   *   name: \"Super Rare NFT #2\",\n   *   description: \"You got a Super Rare NFT!\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }];\n   * // A placeholder NFT that people will get immediately in their wallet, and will be converted to the real NFT at reveal time\n   * const placeholderNFT = {\n   *   name: \"Hidden NFT\",\n   *   description: \"Will be revealed next week!\"\n   * };\n   * // Create and encrypt the NFTs\n   * await contract.edition.drop.revealer.createDelayedRevealBatch(\n   *   placeholderNFT,\n   *   realNFTs,\n   *   \"my secret password\",\n   * );\n   * // Whenever you're ready, reveal your NFTs at any time\n   * const batchId = 0; // the batch to reveal\n   * await contract.edition.drop.revealer.reveal(batchId, \"my secret password\");\n   * ```\n   */\n\n  constructor(erc1155, contractWrapper, storage) {\n    _defineProperty(this, \"featureName\", FEATURE_EDITION_LAZY_MINTABLE_V2.name);\n    /**\n     * Create a batch of NFTs to be claimed in the future\n     *\n     * @remarks Create batch allows you to create a batch of many NFTs in one transaction.\n     *\n     * @example\n     * ```javascript\n     * // Custom metadata of the NFTs to create\n     * const metadatas = [{\n     *   name: \"Cool NFT\",\n     *   description: \"This is a cool NFT\",\n     *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n     * }, {\n     *   name: \"Cool NFT\",\n     *   description: \"This is a cool NFT\",\n     *   image: fs.readFileSync(\"path/to/image.png\"),\n     * }];\n     *\n     * const results = await contract.erc1155.lazyMint(metadatas); // uploads and creates the NFTs on chain\n     * const firstTokenId = results[0].id; // token id of the first created NFT\n     * const firstNFT = await results[0].data(); // (optional) fetch details of the first created NFT\n     * ```\n     *\n     * @param metadatas - The metadata to include in the batch.\n     * @param options - optional upload progress callback\n     */\n    _defineProperty(this, \"lazyMint\", /* @__PURE__ */buildTransactionFunction(async (metadatas, options) => {\n      const startFileNumber = await this.erc1155.nextTokenIdToMint();\n      const batch = await uploadOrExtractURIs(metadatas, this.storage, startFileNumber.toNumber(), options);\n      // ensure baseUri is the same for the entire batch\n      const baseUri = batch[0].substring(0, batch[0].lastIndexOf(\"/\"));\n      for (let i = 0; i < batch.length; i++) {\n        const uri = batch[i].substring(0, batch[i].lastIndexOf(\"/\"));\n        if (baseUri !== uri) {\n          throw new Error(\"Can only create batches with the same base URI for every entry in the batch. Expected '\".concat(baseUri, \"' but got '\").concat(uri, \"'\"));\n        }\n      }\n      const parse = receipt => {\n        const event = this.contractWrapper.parseLogs(\"TokensLazyMinted\", receipt === null || receipt === void 0 ? void 0 : receipt.logs);\n        const startingIndex = event[0].args.startTokenId;\n        const endingIndex = event[0].args.endTokenId;\n        const results = [];\n        for (let id = startingIndex; id.lte(endingIndex); id = id.add(1)) {\n          results.push({\n            id,\n            receipt,\n            data: () => this.erc1155.getTokenMetadata(id)\n          });\n        }\n        return results;\n      };\n      const prebuiltInfo = await getPrebuiltInfo(this.contractWrapper.address, this.contractWrapper.getProvider());\n      if (this.isLegacyEditionDropContract(this.contractWrapper, prebuiltInfo)) {\n        return Transaction.fromContractWrapper({\n          contractWrapper: this.contractWrapper,\n          method: \"lazyMint\",\n          args: [batch.length, \"\".concat(baseUri.endsWith(\"/\") ? baseUri : \"\".concat(baseUri, \"/\"))],\n          parse\n        });\n      } else {\n        // new contracts/extensions have support for delayed reveal that adds an extra parameter to lazyMint\n        return Transaction.fromContractWrapper({\n          contractWrapper: this.contractWrapper,\n          method: \"lazyMint\",\n          args: [batch.length, \"\".concat(baseUri.endsWith(\"/\") ? baseUri : \"\".concat(baseUri, \"/\")), utils.toUtf8Bytes(\"\")],\n          parse\n        });\n      }\n    }));\n    this.erc1155 = erc1155;\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.revealer = this.detectErc1155Revealable();\n  }\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n  detectErc1155Revealable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC1155Revealable\")) {\n      return new DelayedReveal(this.contractWrapper, this.storage, FEATURE_EDITION_REVEALABLE.name, () => this.erc1155.nextTokenIdToMint());\n    }\n    return undefined;\n  }\n  isLegacyEditionDropContract(contractWrapper, info) {\n    return info && info.type === \"DropERC1155\" && info.version < 3 || false;\n  }\n}\n\n/**\n * Mint ERC1155 NFTs\n * @remarks NFT minting functionality that handles IPFS storage for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.edition.mint.to(walletAddress, nftMetadata);\n * ```\n * @public\n */\n\nclass Erc1155Mintable {\n  /**\n   * Batch mint Tokens to many addresses\n   */\n\n  constructor(erc1155, contractWrapper, storage) {\n    _defineProperty(this, \"featureName\", FEATURE_EDITION_MINTABLE.name);\n    /**\n     * Mint an NFT with a limited supply\n     *\n     * @remarks Mint an NFT with a limited supply to a specified wallet.\n     *\n     * @example\n     * ```javascript\n     * // Address of the wallet you want to mint the NFT to\n     * const toAddress = \"{{wallet_address}}\"\n     *\n     * // Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\n     * const metadata = {\n     *   name: \"Cool NFT\",\n     *   description: \"This is a cool NFT\",\n     *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n     * }\n     *\n     * const metadataWithSupply = {\n     *   metadata,\n     *   supply: 1000, // The number of this NFT you want to mint\n     * }\n     *\n     * const tx = await contract.edition.mint.to(toAddress, metadataWithSupply);\n     * const receipt = tx.receipt; // the transaction receipt\n     * const tokenId = tx.id; // the id of the NFT minted\n     * const nft = await tx.data(); // (optional) fetch details of minted NFT\n     * ```\n     *\n     */\n    _defineProperty(this, \"to\", /* @__PURE__ */buildTransactionFunction(async (to, metadataWithSupply) => {\n      const tx = await this.getMintTransaction(to, metadataWithSupply);\n      tx.setParse(receipt => {\n        const event = this.contractWrapper.parseLogs(\"TransferSingle\", receipt === null || receipt === void 0 ? void 0 : receipt.logs);\n        if (event.length === 0) {\n          throw new Error(\"TransferSingleEvent event not found\");\n        }\n        const id = event[0].args.id;\n        return {\n          id,\n          receipt,\n          data: () => this.erc1155.get(id.toString())\n        };\n      });\n      return tx;\n    }));\n    /**\n     * Increase the supply of an existing NFT and mint it to a given wallet address\n     *\n     * @param to - the address to mint to\n     * @param tokenId - the token id of the NFT to increase supply of\n     * @param additionalSupply - the additional amount to mint\n     *\n     * @example\n     * ```javascript\n     * // Address of the wallet you want to mint the NFT to\n     * const toAddress = \"{{wallet_address}}\"\n     * const tokenId = 0;\n     * const additionalSupply = 1000;\n     *\n     * const tx = await contract.edition.mint.additionalSupplyTo(toAddress, tokenId, additionalSupply);\n     * ```\n     */\n    _defineProperty(this, \"additionalSupplyTo\", /* @__PURE__ */buildTransactionFunction(async (to, tokenId, additionalSupply) => {\n      const metadata = await this.erc1155.getTokenMetadata(tokenId);\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"mintTo\",\n        args: [await resolveAddress(to), tokenId, metadata.uri, additionalSupply],\n        parse: receipt => {\n          return {\n            id: BigNumber.from(tokenId),\n            receipt,\n            data: () => this.erc1155.get(tokenId)\n          };\n        }\n      });\n    }));\n    this.erc1155 = erc1155;\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.batch = this.detectErc1155BatchMintable();\n  }\n  /**\n   * @deprecated Use `contract.erc1155.mint.prepare(...args)` instead\n   */\n  async getMintTransaction(to, metadataWithSupply) {\n    const uri = await uploadOrExtractURI(metadataWithSupply.metadata, this.storage);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"mintTo\",\n      args: [await resolveAddress(to), constants.MaxUint256, uri, metadataWithSupply.supply]\n    });\n  }\n  detectErc1155BatchMintable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC1155BatchMintable\")) {\n      return new Erc1155BatchMintable(this.erc1155, this.contractWrapper, this.storage);\n    }\n  }\n}\n\n/**\n * @internal\n */\nconst AirdropAddressInput = /* @__PURE__ */(() => z.object({\n  address: AddressOrEnsSchema,\n  quantity: AmountSchema.default(1)\n}))();\n\n/**\n * @internal\n */\nconst AirdropInputSchema = /* @__PURE__ */(() => z.union([z.array(z.string()).transform(async strings => await Promise.all(strings.map(address => AirdropAddressInput.parseAsync({\n  address\n})))), z.array(AirdropAddressInput)]))();\n\n/**\n * Configure and claim ERC1155 NFTs\n * @remarks Manage claim phases and claim ERC1155 NFTs that have been lazily minted.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.edition.drop.claim.to(\"0x...\", tokenId, quantity);\n * ```\n */\nclass ERC1155Claimable {\n  constructor(contractWrapper) {\n    _defineProperty(this, \"featureName\", FEATURE_EDITION_CLAIM_CUSTOM.name);\n    /**\n     * Claim NFTs to a specific Wallet\n     *\n     * @remarks Let the specified wallet claim NFTs.\n     *\n     * @example\n     * ```javascript\n     * const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\n     * const tokenId = 0; // the id of the NFT you want to claim\n     * const quantity = 1; // how many NFTs you want to claim\n     *\n     * const tx = await contract.erc1155.claimTo(address, tokenId, quantity);\n     * const receipt = tx.receipt; // the transaction receipt\n     * ```\n     *\n     * @param destinationAddress - Address you want to send the token to\n     * @param tokenId - Id of the token you want to claim\n     * @param quantity - Quantity of the tokens you want to claim\n     * @param options - Options for claiming the NFTs\n     *\n     * @returns - Receipt for the transaction\n     */\n    _defineProperty(this, \"to\", /* @__PURE__ */buildTransactionFunction(async (destinationAddress, tokenId, quantity, options) => {\n      return await this.getClaimTransaction(destinationAddress, tokenId, quantity, options);\n    }));\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Construct a claim transaction without executing it.\n   * This is useful for estimating the gas cost of a claim transaction, overriding transaction options and having fine grained control over the transaction execution.\n   * @param destinationAddress - Address you want to send the token to\n   * @param tokenId - Id of the token you want to claim\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param options - Options for claiming the NFTs\n   *\n   * @deprecated Use `contract.erc1155.claim.prepare(...args)` instead\n   */\n  async getClaimTransaction(destinationAddress, tokenId, quantity, options) {\n    let overrides = {};\n    if (options && options.pricePerToken) {\n      overrides = await calculateClaimCost(this.contractWrapper, options.pricePerToken, quantity, options.currencyAddress, options.checkERC20Allowance);\n    }\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"claim\",\n      args: [await resolveAddress(destinationAddress), tokenId, quantity],\n      overrides\n    });\n  }\n}\n\n/**\n * Configure and claim ERC1155 NFTs\n * @remarks Manage claim phases and claim ERC1155 NFTs that have been lazily minted.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.erc1155.claim(tokenId, quantity);\n * await contract.erc1155.claimConditions.getActive(tokenId);\n * ```\n */\nclass Erc1155ClaimableWithConditions {\n  constructor(contractWrapper, storage) {\n    _defineProperty(this, \"featureName\", FEATURE_EDITION_CLAIM_CONDITIONS_V2.name);\n    /**\n     * Claim NFTs to a specific Wallet\n     *\n     * @remarks Let the specified wallet claim NFTs.\n     *\n     * @example\n     * ```javascript\n     * const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\n     * const tokenId = 0; // the id of the NFT you want to claim\n     * const quantity = 1; // how many NFTs you want to claim\n     *\n     * const tx = await contract.erc1155.claimTo(address, tokenId, quantity);\n     * const receipt = tx.receipt; // the transaction receipt\n     * ```\n     *\n     * @param destinationAddress - Address you want to send the token to\n     * @param tokenId - Id of the token you want to claim\n     * @param quantity - Quantity of the tokens you want to claim\n     *\n     * @returns - Receipt for the transaction\n     */\n    _defineProperty(this, \"to\", /* @__PURE__ */buildTransactionFunction(async (destinationAddress, tokenId, quantity, options) => {\n      return await this.conditions.getClaimTransaction(destinationAddress, tokenId, quantity, options);\n    }));\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    const metadata = new ContractMetadata(this.contractWrapper, CustomContractSchema, this.storage);\n    this.conditions = new DropErc1155ClaimConditions(contractWrapper, metadata, this.storage);\n  }\n}\n\n/**\n * Enables generating dynamic ERC1155 NFTs with rules and an associated signature, which can then be minted by anyone securely\n * @public\n */\nclass Erc1155SignatureMintable {\n  constructor(contractWrapper, storage, roles) {\n    _defineProperty(this, \"featureName\", FEATURE_EDITION_SIGNATURE_MINTABLE.name);\n    /**\n     * Mint a dynamically generated NFT\n     *\n     * @remarks Mint a dynamic NFT with a previously generated signature.\n     *\n     * @example\n     * ```javascript\n     * // see how to craft a payload to sign in the `generate()` documentation\n     * const signedPayload = contract.erc1155.signature.generate(payload);\n     *\n     * // now anyone can mint the NFT\n     * const tx = contract.erc1155.signature.mint(signedPayload);\n     * ```\n     * @param signedPayload - the previously generated payload and signature with {@link Erc1155SignatureMintable.generate}\n     * @twfeature ERC1155SignatureMintable\n     */\n    _defineProperty(this, \"mint\", /* @__PURE__ */buildTransactionFunction(async signedPayload => {\n      const mintRequest = signedPayload.payload;\n      const signature = signedPayload.signature;\n      const message = await this.mapPayloadToContractStruct(mintRequest);\n      const overrides = await this.contractWrapper.getCallOverrides();\n      // TODO: Transaction Sequence Pattern\n      await setErc20Allowance(this.contractWrapper, message.pricePerToken.mul(message.quantity), mintRequest.currencyAddress, overrides);\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"mintWithSignature\",\n        args: [message, signature],\n        overrides,\n        parse: receipt => {\n          const t = this.contractWrapper.parseLogs(\"TokensMintedWithSignature\", receipt.logs);\n          if (t.length === 0) {\n            throw new Error(\"No MintWithSignature event found\");\n          }\n          const id = t[0].args.tokenIdMinted;\n          return {\n            id,\n            receipt\n          };\n        }\n      });\n    }));\n    /**\n     * Mint any number of dynamically generated NFT at once\n     * @remarks Mint multiple dynamic NFTs in one transaction. Note that this is only possible for free mints (cannot batch mints with a price attached to it for security reasons)\n     *\n     * @example\n     * ```javascript\n     * // see how to craft a batch of payloads to sign in the `generateBatch()` documentation\n     * const signedPayloads = contract.erc1155.signature.generateBatch(payloads);\n     *\n     * // now anyone can mint the NFT\n     * const tx = contract.erc1155.signature.mintBatch(signedPayloads);\n     * ```\n     *\n     * @param signedPayloads - the array of signed payloads to mint\n     * @twfeature ERC1155SignatureMintable\n     */\n    _defineProperty(this, \"mintBatch\", /* @__PURE__ */buildTransactionFunction(async signedPayloads => {\n      const contractPayloads = await Promise.all(signedPayloads.map(async s => {\n        const message = await this.mapPayloadToContractStruct(s.payload);\n        const signature = s.signature;\n        const price = s.payload.price;\n        if (BigNumber.from(price).gt(0)) {\n          throw new Error(\"Can only batch free mints. For mints with a price, use regular mint()\");\n        }\n        return {\n          message,\n          signature\n        };\n      }));\n      const contractEncoder = new ContractEncoder(this.contractWrapper);\n      const encoded = contractPayloads.map(p => {\n        return contractEncoder.encode(\"mintWithSignature\", [p.message, p.signature]);\n      });\n      if (hasFunction(\"multicall\", this.contractWrapper)) {\n        return Transaction.fromContractWrapper({\n          contractWrapper: this.contractWrapper,\n          method: \"multicall\",\n          args: [encoded],\n          parse: receipt => {\n            const events = this.contractWrapper.parseLogs(\"TokensMintedWithSignature\", receipt.logs);\n            if (events.length === 0) {\n              throw new Error(\"No MintWithSignature event found\");\n            }\n            return events.map(log => ({\n              id: log.args.tokenIdMinted,\n              receipt\n            }));\n          }\n        });\n      } else {\n        throw new Error(\"Multicall not supported on this contract!\");\n      }\n    }));\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.roles = roles;\n  }\n  /**\n   * Verify that a payload is correctly signed\n   * @param signedPayload - the payload to verify\n   * @twfeature ERC1155SignatureMintable\n   *\n   * @example\n   * ```javascript\n   * const nftMetadata = {\n   *   name: \"Cool NFT #1\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * };\n   *\n   * const startTime = new Date();\n   * const endTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const payload = {\n   *   metadata: nftMetadata, // The NFT to mint\n   *   to: {{wallet_address}}, // Who will receive the NFT\n   *   quantity: 2, // the quantity of NFTs to mint\n   *   price: 0.5, // the price per NFT\n   *   currencyAddress: NATIVE_TOKEN_ADDRESS, // the currency to pay with\n   *   mintStartTime: startTime, // can mint anytime from now\n   *   mintEndTime: endTime, // to 24h from now\n   *   royaltyRecipient: \"0x...\", // custom royalty recipient for this NFT\n   *   royaltyBps: 100, // custom royalty fees for this NFT (in bps)\n   *   primarySaleRecipient: \"0x...\", // custom sale recipient for this NFT\n   * };\n   *\n   * const signedPayload = contract.erc1155.signature.generate(payload);\n   * // Now you can verify that the payload is valid\n   * const isValid = await contract.erc1155.signature.verify(signedPayload);\n   * ```\n   */\n  async verify(signedPayload) {\n    const mintRequest = signedPayload.payload;\n    const signature = signedPayload.signature;\n    const message = await this.mapPayloadToContractStruct(mintRequest);\n    const verification = await this.contractWrapper.read(\"verify\", [message, signature]);\n    return verification[0];\n  }\n\n  /**\n   * Generate a signature that can be used to mint an NFT dynamically.\n   *\n   * @remarks Takes in an NFT and some information about how it can be minted, uploads the metadata and signs it with your private key. The generated signature can then be used to mint an NFT using the exact payload and signature generated.\n   *\n   * @example\n   * ```javascript\n   * const nftMetadata = {\n   *   name: \"Cool NFT #1\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * };\n   *\n   * const startTime = new Date();\n   * const endTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const payload = {\n   *   metadata: nftMetadata, // The NFT to mint\n   *   to: {{wallet_address}}, // Who will receive the NFT\n   *   quantity: 2, // the quantity of NFTs to mint\n   *   price: 0.5, // the price per NFT\n   *   currencyAddress: NATIVE_TOKEN_ADDRESS, // the currency to pay with\n   *   mintStartTime: startTime, // can mint anytime from now\n   *   mintEndTime: endTime, // to 24h from now\n   *   royaltyRecipient: \"0x...\", // custom royalty recipient for this NFT\n   *   royaltyBps: 100, // custom royalty fees for this NFT (in bps)\n   *   primarySaleRecipient: \"0x...\", // custom sale recipient for this NFT\n   * };\n   *\n   * const signedPayload = await contract.erc1155.signature.generate(payload);\n   * // now anyone can use these to mint the NFT using `contract.erc1155.signature.mint(signedPayload)`\n   * ```\n   * @param payloadToSign - the payload to sign\n   * @returns the signed payload and the corresponding signature\n   * @twfeature ERC1155SignatureMintable\n   */\n  async generate(payloadToSign) {\n    const payload = {\n      ...payloadToSign,\n      tokenId: constants.MaxUint256\n    };\n    return this.generateFromTokenId(payload);\n  }\n\n  /**\n   * Generate a signature that can be used to mint additionaly supply to an existing NFT.\n   *\n   * @remarks Takes in a payload with the token ID of an existing NFT, and signs it with your private key. The generated signature can then be used to mint additional supply to the NFT using the exact payload and signature generated.\n   *\n   * @example\n   * ```javascript\n   * const nftMetadata = {\n   *   name: \"Cool NFT #1\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * };\n   *\n   * const startTime = new Date();\n   * const endTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const payload = {\n   *   tokenId: 0, // Instead of metadata, we specificy the token ID of the NFT to mint supply to\n   *   to: {{wallet_address}}, // Who will receive the NFT (or AddressZero for anyone)\n   *   quantity: 2, // the quantity of NFTs to mint\n   *   price: 0.5, // the price per NFT\n   *   currencyAddress: NATIVE_TOKEN_ADDRESS, // the currency to pay with\n   *   mintStartTime: startTime, // can mint anytime from now\n   *   mintEndTime: endTime, // to 24h from now\n   *   royaltyRecipient: \"0x...\", // custom royalty recipient for this NFT\n   *   royaltyBps: 100, // custom royalty fees for this NFT (in bps)\n   *   primarySaleRecipient: \"0x...\", // custom sale recipient for this NFT\n   * };\n   *\n   * const signedPayload = await contract.erc1155.signature.generateFromTokenId(payload);\n   * // now anyone can use these to mint the NFT using `contract.erc1155.signature.mint(signedPayload)`\n   * ```\n   * @param payloadToSign - the payload to sign\n   * @returns the signed payload and the corresponding signature\n   * @twfeature ERC1155SignatureMintable\n   */\n  async generateFromTokenId(payloadToSign) {\n    const payloads = await this.generateBatchFromTokenIds([payloadToSign]);\n    return payloads[0];\n  }\n\n  /**\n   * Generate a batch of signatures that can be used to mint many new NFTs dynamically.\n   *\n   * @remarks See {@link Erc1155SignatureMintable.generate}\n   *\n   * @param payloadsToSign - the payloads to sign\n   * @returns an array of payloads and signatures\n   * @twfeature ERC1155SignatureMintable\n   */\n  async generateBatch(payloadsToSign) {\n    const payloads = payloadsToSign.map(payload => ({\n      ...payload,\n      tokenId: constants.MaxUint256\n    }));\n    return this.generateBatchFromTokenIds(payloads);\n  }\n\n  /**\n   * Genrate a batch of signatures that can be used to mint new NFTs or additionaly supply to existing NFTs dynamically.\n   *\n   * @remarks See {@link Erc1155SignatureMintable.generateFromTokenId}\n   *\n   * @param payloadsToSign - the payloads to sign with tokenIds specified\n   * @returns an array of payloads and signatures\n   * @twfeature ERC1155SignatureMintable\n   */\n  async generateBatchFromTokenIds(payloadsToSign) {\n    var _this$roles2;\n    await ((_this$roles2 = this.roles) === null || _this$roles2 === void 0 ? void 0 : _this$roles2.verify([\"minter\"], await this.contractWrapper.getSignerAddress()));\n    const parsedRequests = await Promise.all(payloadsToSign.map(m => Signature1155PayloadInputWithTokenId.parseAsync(m)));\n    const metadatas = parsedRequests.map(r => r.metadata);\n    const uris = await uploadOrExtractURIs(metadatas, this.storage);\n    const chainId = await this.contractWrapper.getChainID();\n    const signer = this.contractWrapper.getSigner();\n    invariant(signer, \"No signer available\");\n    const contractInfo = await getPrebuiltInfo(this.contractWrapper.address, this.contractWrapper.getProvider());\n    const isLegacyContract = (contractInfo === null || contractInfo === void 0 ? void 0 : contractInfo.type) === \"TokenERC1155\";\n    return await Promise.all(parsedRequests.map(async (m, i) => {\n      const uri = uris[i];\n      const finalPayload = await Signature1155PayloadOutput.parseAsync({\n        ...m,\n        uri\n      });\n      const signature = await this.contractWrapper.signTypedData(signer, {\n        name: isLegacyContract ? \"TokenERC1155\" : \"SignatureMintERC1155\",\n        version: \"1\",\n        chainId,\n        verifyingContract: this.contractWrapper.address\n      }, {\n        MintRequest: MintRequest1155\n      },\n      // TYPEHASH\n      await this.mapPayloadToContractStruct(finalPayload));\n      return {\n        payload: finalPayload,\n        signature: signature.toString()\n      };\n    }));\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  /**\n   * Maps a payload to the format expected by the contract\n   *\n   * @internal\n   *\n   * @param mintRequest - The payload to map.\n   * @returns - The mapped payload.\n   */\n  async mapPayloadToContractStruct(mintRequest) {\n    const normalizedPricePerToken = await normalizePriceValue(this.contractWrapper.getProvider(), mintRequest.price, mintRequest.currencyAddress);\n    return {\n      to: mintRequest.to,\n      tokenId: mintRequest.tokenId,\n      uri: mintRequest.uri,\n      quantity: mintRequest.quantity,\n      pricePerToken: normalizedPricePerToken,\n      currency: mintRequest.currencyAddress,\n      validityStartTimestamp: mintRequest.mintStartTime,\n      validityEndTimestamp: mintRequest.mintEndTime,\n      uid: mintRequest.uid,\n      royaltyRecipient: mintRequest.royaltyRecipient,\n      royaltyBps: mintRequest.royaltyBps,\n      primarySaleRecipient: mintRequest.primarySaleRecipient\n    };\n  }\n}\n\n/**\n * Standard ERC1155 NFT functions\n * @remarks Basic functionality for a ERC1155 contract that handles IPFS storage for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.erc1155.transfer(walletAddress, tokenId, quantity);\n * ```\n * @public\n */\nclass Erc1155 {\n  get chainId() {\n    return this._chainId;\n  }\n  constructor(contractWrapper, storage, chainId) {\n    _defineProperty(this, \"featureName\", FEATURE_EDITION.name);\n    /**\n     * Transfer an NFT\n     *\n     * @remarks Transfer an NFT from the connected wallet to another wallet.\n     *\n     * @example\n     * ```javascript\n     * // Address of the wallet you want to send the NFT to\n     * const toAddress = \"{{wallet_address}}\";\n     * const tokenId = \"0\"; // The token ID of the NFT you want to send\n     * const amount = 3; // How many copies of the NFTs to transfer\n     * await contract.erc1155.transfer(toAddress, tokenId, amount);\n     * ```\n     * @twfeature ERC1155\n     */\n    _defineProperty(this, \"transfer\", /* @__PURE__ */buildTransactionFunction((() => {\n      var _this = this;\n      return async function (to, tokenId, amount) {\n        let data = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [0];\n        const from = await _this.contractWrapper.getSignerAddress();\n        return Transaction.fromContractWrapper({\n          contractWrapper: _this.contractWrapper,\n          method: \"safeTransferFrom\",\n          args: [from, await resolveAddress(to), tokenId, amount, data]\n        });\n      };\n    })()));\n    /**\n     * Transfer an NFT from a specific wallet\n     *\n     * @remarks Transfer an NFT from a specific wallet to another wallet.\n     *\n     * @example\n     * ```javascript\n     * // Address of the wallet you want to send the NFT to\n     * const toAddress = \"{{wallet_address}}\";\n     * const tokenId = \"0\"; // The token ID of the NFT you want to send\n     * const amount = 3; // How many copies of the NFTs to transfer\n     * await contract.erc1155.transfer(toAddress, tokenId, amount);\n     * ```\n     * @twfeature ERC1155\n     */\n    _defineProperty(this, \"transferFrom\", /* @__PURE__ */buildTransactionFunction((() => {\n      var _this2 = this;\n      return async function (from, to, tokenId, amount) {\n        let data = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [0];\n        return Transaction.fromContractWrapper({\n          contractWrapper: _this2.contractWrapper,\n          method: \"safeTransferFrom\",\n          args: [await resolveAddress(from), await resolveAddress(to), tokenId, amount, data]\n        });\n      };\n    })()));\n    /**\n     * Set approval for all NFTs\n     * @remarks Approve or remove operator as an operator for the caller. Operators can call transferFrom or safeTransferFrom for any token owned by the caller.\n     * @example\n     * ```javascript\n     * const operator = \"{{wallet_address}}\";\n     * await contract.erc1155.setApprovalForAll(operator, true);\n     * ```\n     * @param operator - the operator's address\n     * @param approved - whether to approve or remove\n     * @twfeature ERC1155\n     */\n    _defineProperty(this, \"setApprovalForAll\", /* @__PURE__ */buildTransactionFunction(async (operator, approved) => {\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"setApprovalForAll\",\n        args: [operator, approved]\n      });\n    }));\n    /**\n     * Airdrop multiple NFTs\n     *\n     * @remarks Airdrop one or multiple NFTs to the provided wallet addresses.\n     *\n     * @example\n     * ```javascript\n     * // The token ID of the NFT you want to airdrop\n     * const tokenId = \"0\";\n     * // Array of objects of addresses and quantities to airdrop NFTs to\n     * const addresses = [\n     *  {\n     *    address: \"0x...\",\n     *    quantity: 2,\n     *  },\n     *  {\n     *   address: \"0x...\",\n     *    quantity: 3,\n     *  },\n     * ];\n     * await contract.erc1155.airdrop(tokenId, addresses);\n     *\n     * // You can also pass an array of addresses, it will airdrop 1 NFT per address\n     * const tokenId = \"0\";\n     * const addresses = [\n     *  \"0x...\", \"0x...\", \"0x...\",\n     * ]\n     * await contract.erc1155.airdrop(tokenId, addresses);\n     * ```\n     * @twfeature ERC1155BatchTransferable\n     */\n    _defineProperty(this, \"airdrop\", /* @__PURE__ */buildTransactionFunction((() => {\n      var _this3 = this;\n      return async function (tokenId, addresses, fromAddress) {\n        let data = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [0];\n        const from = fromAddress ? await resolveAddress(fromAddress) : await _this3.contractWrapper.getSignerAddress();\n        const balanceOf = await _this3.balanceOf(from, tokenId);\n        const input = await AirdropInputSchema.parseAsync(addresses);\n        const totalToAirdrop = input.reduce((prev, curr) => {\n          return BigNumber.from(prev).add(BigNumber.from((curr === null || curr === void 0 ? void 0 : curr.quantity) || 1));\n        }, BigNumber.from(0));\n        if (balanceOf.lt(BigNumber.from(totalToAirdrop))) {\n          throw new Error(\"The caller owns \".concat(balanceOf.toString(), \" NFTs, but wants to airdrop \").concat(totalToAirdrop.toString(), \" NFTs.\"));\n        }\n        const contractEncoder = new ContractEncoder(_this3.contractWrapper);\n        const encoded = input.map(_ref => {\n          let {\n            address: to,\n            quantity\n          } = _ref;\n          return contractEncoder.encode(\"safeTransferFrom\", [from, to, tokenId, quantity, data]);\n        });\n        return Transaction.fromContractWrapper({\n          contractWrapper: _this3.contractWrapper,\n          method: \"multicall\",\n          args: [encoded]\n        });\n      };\n    })()));\n    ////// ERC1155 Mintable Extension //////\n    /**\n     * Mint an NFT\n     *\n     * @remarks Mint an NFT with a limited supply to the connected wallet.\n     *\n     * @example\n     * ```javascript\n     * // Address of the wallet you want to mint the NFT to\n     * const toAddress = \"{{wallet_address}}\"\n     *\n     * // Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\n     * const metadata = {\n     *   name: \"Cool NFT\",\n     *   description: \"This is a cool NFT\",\n     *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n     * }\n     *\n     * const metadataWithSupply = {\n     *   metadata,\n     *   supply: 1000, // The number of this NFT you want to mint\n     * }\n     *\n     * const tx = await contract.erc1155.mint(toAddress, metadataWithSupply);\n     * const receipt = tx.receipt; // the transaction receipt\n     * const tokenId = tx.id; // the id of the NFT minted\n     * const nft = await tx.data(); // (optional) fetch details of minted NFT\n     * ```\n     * @twfeature ERC1155Mintable\n     */\n    _defineProperty(this, \"mint\", /* @__PURE__ */buildTransactionFunction(async metadataWithSupply => {\n      return this.mintTo.prepare(await this.contractWrapper.getSignerAddress(), metadataWithSupply);\n    }));\n    /**\n     * Mint an NFT to a specific wallet\n     *\n     * @remarks Mint an NFT with a limited supply to a specified wallet.\n     *\n     * @example\n     * ```javascript\n     * // Address of the wallet you want to mint the NFT to\n     * const toAddress = \"{{wallet_address}}\"\n     *\n     * // Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\n     * const metadata = {\n     *   name: \"Cool NFT\",\n     *   description: \"This is a cool NFT\",\n     *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n     * }\n     *\n     * const metadataWithSupply = {\n     *   metadata,\n     *   supply: 1000, // The number of this NFT you want to mint\n     * }\n     *\n     * const tx = await contract.erc1155.mintTo(toAddress, metadataWithSupply);\n     * const receipt = tx.receipt; // the transaction receipt\n     * const tokenId = tx.id; // the id of the NFT minted\n     * const nft = await tx.data(); // (optional) fetch details of minted NFT\n     * ```\n     * @twfeature ERC1155Mintable\n     */\n    _defineProperty(this, \"mintTo\", /* @__PURE__ */buildTransactionFunction(async (receiver, metadataWithSupply) => {\n      return assertEnabled(this.mintable, FEATURE_EDITION_MINTABLE).to.prepare(receiver, metadataWithSupply);\n    }));\n    /**\n     * Increase the supply of an existing NFT\n     * @remarks Increase the supply of an existing NFT and mint it to the connected wallet address\n     * @example\n     * ```javascript\n     * const tokenId = 0;\n     * const additionalSupply = 1000;\n     * await contract.erc1155.mintAdditionalSupply(tokenId, additionalSupply);\n     * ```\n     *\n     * @param tokenId - the token id of the NFT to increase supply of\n     * @param additionalSupply - the additional amount to mint\n     * @twfeature ERC1155Mintable\n     */\n    _defineProperty(this, \"mintAdditionalSupply\", /* @__PURE__ */buildTransactionFunction(async (tokenId, additionalSupply) => {\n      return assertEnabled(this.mintable, FEATURE_EDITION_MINTABLE).additionalSupplyTo.prepare(await this.contractWrapper.getSignerAddress(), tokenId, additionalSupply);\n    }));\n    /**\n     * Increase the supply of an existing NFT and mint it to a given wallet address\n     *\n     * @param to - the address to mint to\n     * @param tokenId - the token id of the NFT to increase supply of\n     * @param additionalSupply - the additional amount to mint\n     * @twfeature ERC1155Mintable\n     */\n    _defineProperty(this, \"mintAdditionalSupplyTo\", /* @__PURE__ */buildTransactionFunction(async (receiver, tokenId, additionalSupply) => {\n      return assertEnabled(this.mintable, FEATURE_EDITION_MINTABLE).additionalSupplyTo.prepare(receiver, tokenId, additionalSupply);\n    }));\n    ////// ERC1155 BatchMintable Extension //////\n    /**\n     * Mint multiple NFTs at once\n     *\n     * @remarks Mint multiple different NFTs with limited supplies to the connected wallet.\n     *\n     * @example\n     * ```javascript\n     * // Custom metadata and supplies of your NFTs\n     * const metadataWithSupply = [{\n     *   supply: 50, // The number of this NFT you want to mint\n     *   metadata: {\n     *     name: \"Cool NFT #1\",\n     *     description: \"This is a cool NFT\",\n     *     image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n     *   },\n     * }, {\n     *   supply: 100,\n     *   metadata: {\n     *     name: \"Cool NFT #2\",\n     *     description: \"This is a cool NFT\",\n     *     image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n     *   },\n     * }];\n     *\n     * const tx = await contract.erc1155.mintBatch(metadataWithSupply);\n     * const receipt = tx[0].receipt; // same transaction receipt for all minted NFTs\n     * const firstTokenId = tx[0].id; // token id of the first minted NFT\n     * const firstNFT = await tx[0].data(); // (optional) fetch details of the first minted NFT\n     * ```\n     * @twfeature ERC1155BatchMintable\n     */\n    _defineProperty(this, \"mintBatch\", /* @__PURE__ */buildTransactionFunction(async metadataWithSupply => {\n      return this.mintBatchTo.prepare(await this.contractWrapper.getSignerAddress(), metadataWithSupply);\n    }));\n    /**\n     * Mint multiple NFTs at once to a specific wallet\n     *\n     * @remarks Mint multiple different NFTs with limited supplies to a specified wallet.\n     *\n     * @example\n     * ```javascript\n     * // Address of the wallet you want to mint the NFT to\n     * const toAddress = \"{{wallet_address}}\"\n     *\n     * // Custom metadata and supplies of your NFTs\n     * const metadataWithSupply = [{\n     *   supply: 50, // The number of this NFT you want to mint\n     *   metadata: {\n     *     name: \"Cool NFT #1\",\n     *     description: \"This is a cool NFT\",\n     *     image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n     *   },\n     * }, {\n     *   supply: 100,\n     *   metadata: {\n     *     name: \"Cool NFT #2\",\n     *     description: \"This is a cool NFT\",\n     *     image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n     *   },\n     * }];\n     *\n     * const tx = await contract.erc1155.mintBatchTo(toAddress, metadataWithSupply);\n     * const receipt = tx[0].receipt; // same transaction receipt for all minted NFTs\n     * const firstTokenId = tx[0].id; // token id of the first minted NFT\n     * const firstNFT = await tx[0].data(); // (optional) fetch details of the first minted NFT\n     * ```\n     * @twfeature ERC1155BatchMintable\n     */\n    _defineProperty(this, \"mintBatchTo\", /* @__PURE__ */buildTransactionFunction(async (receiver, metadataWithSupply) => {\n      var _this$mintable3;\n      return assertEnabled((_this$mintable3 = this.mintable) === null || _this$mintable3 === void 0 ? void 0 : _this$mintable3.batch, FEATURE_EDITION_BATCH_MINTABLE).to.prepare(receiver, metadataWithSupply);\n    }));\n    ////// ERC1155 Burnable Extension //////\n    /**\n     * Burn NFTs\n     *\n     * @remarks Burn the specified NFTs from the connected wallet\n     *\n     * @param tokenId - the token Id to burn\n     * @param amount - amount to burn\n     *\n     * @example\n     * ```javascript\n     * // The token ID to burn NFTs of\n     * const tokenId = 0;\n     * // The amount of the NFT you want to burn\n     * const amount = 2;\n     *\n     * const result = await contract.erc1155.burn(tokenId, amount);\n     * ```\n     * @twfeature ERC1155Burnable\n     */\n    _defineProperty(this, \"burn\", /* @__PURE__ */buildTransactionFunction(async (tokenId, amount) => {\n      return assertEnabled(this.burnable, FEATURE_EDITION_BURNABLE).tokens.prepare(tokenId, amount);\n    }));\n    /**\n     * Burn NFTs from a specific wallet\n     *\n     * @remarks Burn the specified NFTs from a specified wallet\n     *\n     * @param account - the address to burn NFTs from\n     * @param tokenId - the tokenId to burn\n     * @param amount - amount to burn\n     *\n     * @example\n     * ```javascript\n     * // The address of the wallet to burn NFTS from\n     * const account = \"0x...\";\n     * // The token ID to burn NFTs of\n     * const tokenId = 0;\n     * // The amount of this NFT you want to burn\n     * const amount = 2;\n     *\n     * const result = await contract.erc1155.burnFrom(account, tokenId, amount);\n     * ```\n     * @twfeature ERC1155Burnable\n     */\n    _defineProperty(this, \"burnFrom\", /* @__PURE__ */buildTransactionFunction(async (account, tokenId, amount) => {\n      return assertEnabled(this.burnable, FEATURE_EDITION_BURNABLE).from.prepare(account, tokenId, amount);\n    }));\n    /**\n     * Burn a batch of NFTs\n     *\n     * @remarks Burn the batch NFTs from the connected wallet\n     *\n     * @param tokenIds - the tokenIds to burn\n     * @param amounts - amount of each token to burn\n     *\n     * @example\n     * ```javascript\n     * // The token IDs to burn NFTs of\n     * const tokenIds = [0, 1];\n     * // The amounts of each NFT you want to burn\n     * const amounts = [2, 2];\n     *\n     * const result = await contract.erc1155.burnBatch(tokenIds, amounts);\n     * ```\n     * @twfeature ERC1155Burnable\n     */\n    _defineProperty(this, \"burnBatch\", /* @__PURE__ */buildTransactionFunction(async (tokenIds, amounts) => {\n      return assertEnabled(this.burnable, FEATURE_EDITION_BURNABLE).batch.prepare(tokenIds, amounts);\n    }));\n    /**\n     * Burn a batch of NFTs from a specific wallet\n     *\n     * @remarks Burn the batch NFTs from the specified wallet\n     *\n     * @param account - the address to burn NFTs from\n     * @param tokenIds - the tokenIds to burn\n     * @param amounts - amount of each token to burn\n     *\n     * @example\n     * ```javascript\n     * // The address of the wallet to burn NFTS from\n     * const account = \"0x...\";\n     * // The token IDs to burn NFTs of\n     * const tokenIds = [0, 1];\n     * // The amounts of each NFT you want to burn\n     * const amounts = [2, 2];\n     *\n     * const result = await contract.erc1155.burnBatchFrom(account, tokenIds, amounts);\n     * ```\n     * @twfeature ERC1155Burnable\n     */\n    _defineProperty(this, \"burnBatchFrom\", /* @__PURE__ */buildTransactionFunction(async (account, tokenIds, amounts) => {\n      return assertEnabled(this.burnable, FEATURE_EDITION_BURNABLE).batchFrom.prepare(account, tokenIds, amounts);\n    }));\n    ////// ERC721 LazyMint Extension //////\n    /**\n     * Lazy mint NFTs\n     *\n     * @remarks Create batch allows you to create a batch of many NFTs in one transaction.\n     *\n     * @example\n     * ```javascript\n     * // Custom metadata of the NFTs to create\n     * const metadatas = [{\n     *   name: \"Cool NFT\",\n     *   description: \"This is a cool NFT\",\n     *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n     * }, {\n     *   name: \"Cool NFT\",\n     *   description: \"This is a cool NFT\",\n     *   image: fs.readFileSync(\"path/to/image.png\"),\n     * }];\n     *\n     * const results = await contract.erc1155.lazyMint(metadatas); // uploads and creates the NFTs on chain\n     * const firstTokenId = results[0].id; // token id of the first created NFT\n     * const firstNFT = await results[0].data(); // (optional) fetch details of the first created NFT\n     * ```\n     *\n     * @param metadatas - The metadata to include in the batch.\n     * @param options - optional upload progress callback\n     * @twfeature ERC1155LazyMintableV1 | ERC1155LazyMintableV2\n     */\n    _defineProperty(this, \"lazyMint\", /* @__PURE__ */buildTransactionFunction(async (metadatas, options) => {\n      return assertEnabled(this.lazyMintable, FEATURE_EDITION_LAZY_MINTABLE_V2).lazyMint.prepare(metadatas, options);\n    }));\n    /**\n     * Claim NFTs\n     *\n     * @remarks Let the connected wallet claim NFTs.\n     *\n     * @example\n     * ```javascript\n     * const tokenId = 0; // the id of the NFT you want to claim\n     * const quantity = 1; // how many NFTs you want to claim\n     *\n     * const tx = await contract.erc1155.claim(tokenId, quantity);\n     * const receipt = tx.receipt; // the transaction receipt\n     * ```\n     *\n     * @param tokenId - Id of the token you want to claim\n     * @param quantity - Quantity of the tokens you want to claim\n     * @param options - Optional claim verification data (e.g. price, currency, etc...)\n     *\n     * @returns - Receipt for the transaction\n     * @twfeature ERC1155ClaimCustom | ERC1155ClaimPhasesV2 | ERC1155ClaimPhasesV1 | ERC1155ClaimConditionsV2 | ERC1155ClaimConditionsV1\n     */\n    _defineProperty(this, \"claim\", /* @__PURE__ */buildTransactionFunction(async (tokenId, quantity, options) => {\n      return this.claimTo.prepare(await this.contractWrapper.getSignerAddress(), tokenId, quantity, options);\n    }));\n    /**\n     * Claim NFTs to a specific Wallet\n     *\n     * @remarks Let the specified wallet claim NFTs.\n     *\n     * @example\n     * ```javascript\n     * const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\n     * const tokenId = 0; // the id of the NFT you want to claim\n     * const quantity = 1; // how many NFTs you want to claim\n     *\n     * const tx = await contract.erc1155.claimTo(address, tokenId, quantity);\n     * const receipt = tx.receipt; // the transaction receipt\n     * ```\n     *\n     * @param destinationAddress - Address you want to send the token to\n     * @param tokenId - Id of the token you want to claim\n     * @param quantity - Quantity of the tokens you want to claim\n     * @param options - Optional claim verification data (e.g. price, currency, etc...)\n     *\n     * @returns - Receipt for the transaction\n     * @twfeature ERC1155ClaimCustom | ERC1155ClaimPhasesV2 | ERC1155ClaimPhasesV1 | ERC1155ClaimConditionsV2 | ERC1155ClaimConditionsV1\n     */\n    _defineProperty(this, \"claimTo\", /* @__PURE__ */buildTransactionFunction(async (destinationAddress, tokenId, quantity, options) => {\n      const claimWithConditions = this.claimWithConditions;\n      const claim = this.claimCustom;\n      if (claimWithConditions) {\n        return claimWithConditions.to.prepare(destinationAddress, tokenId, quantity, options);\n      }\n      if (claim) {\n        return claim.to.prepare(destinationAddress, tokenId, quantity, options);\n      }\n      throw new ExtensionNotImplementedError(FEATURE_EDITION_CLAIM_CUSTOM);\n    }));\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.query = this.detectErc1155Enumerable();\n    this.mintable = this.detectErc1155Mintable();\n    this.burnable = this.detectErc1155Burnable();\n    this.lazyMintable = this.detectErc1155LazyMintable();\n    this.signatureMintable = this.detectErc1155SignatureMintable();\n    this.claimCustom = this.detectErc1155Claimable();\n    this.claimWithConditions = this.detectErc1155ClaimableWithConditions();\n    this._chainId = chainId;\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  ////// Standard ERC1155 functions //////\n\n  /**\n   * Get a single NFT\n   *\n   * @example\n   * ```javascript\n   * const tokenId = 0;\n   * const nft = await contract.erc1155.get(tokenId);\n   * ```\n   * @param tokenId - the tokenId of the NFT to retrieve\n   * @returns The NFT metadata\n   * @twfeature ERC1155\n   */\n  async get(tokenId) {\n    const [supply, metadata] = await Promise.all([this.contractWrapper.read(\"totalSupply\", [tokenId]).catch(() => BigNumber.from(0)), this.getTokenMetadata(tokenId).catch(() => ({\n      id: tokenId.toString(),\n      uri: \"\",\n      ...FALLBACK_METADATA\n    }))]);\n    return {\n      owner: constants.AddressZero,\n      metadata,\n      type: \"ERC1155\",\n      supply: supply.toString()\n    };\n  }\n\n  /**\n   * Get the total supply of a specific token\n   * @example\n   * ```javascript\n   * const tokenId = 0;\n   * const nft = await contract.erc1155.totalSupply(tokenId);\n   * ```\n   * @param tokenId - The token ID to get the total supply of\n   * @returns the total supply\n   * @twfeature ERC1155\n   */\n  async totalSupply(tokenId) {\n    if (detectContractFeature(this.contractWrapper, \"ERC1155Supply\")) {\n      return await this.contractWrapper.read(\"totalSupply\", [tokenId]);\n    } else {\n      throw new ExtensionNotImplementedError(FEATURE_EDITION_SUPPLY);\n    }\n  }\n\n  /**\n   * Get NFT balance of a specific wallet\n   *\n   * @remarks Get a wallets NFT balance (number of NFTs in this contract owned by the wallet).\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to check NFT balance\n   * const walletAddress = \"{{wallet_address}}\";\n   * const tokenId = 0; // Id of the NFT to check\n   * const balance = await contract.erc1155.balanceOf(walletAddress, tokenId);\n   * ```\n   * @twfeature ERC1155\n   */\n  async balanceOf(address, tokenId) {\n    return await this.contractWrapper.read(\"balanceOf\", [await resolveAddress(address), tokenId]);\n  }\n\n  /**\n   * Get NFT balance for the currently connected wallet\n   */\n  async balance(tokenId) {\n    return await this.balanceOf(await this.contractWrapper.getSignerAddress(), tokenId);\n  }\n\n  /**\n   * Get whether this wallet has approved transfers from the given operator\n   * @param address - the wallet address\n   * @param operator - the operator address\n   */\n  async isApproved(address, operator) {\n    return await this.contractWrapper.read(\"isApprovedForAll\", [await resolveAddress(address), await resolveAddress(operator)]);\n  }\n  /**\n   * Return the next available token ID to mint\n   * @internal\n   */\n  async nextTokenIdToMint() {\n    if (hasFunction(\"nextTokenIdToMint\", this.contractWrapper)) {\n      return await this.contractWrapper.read(\"nextTokenIdToMint\", []);\n    } else {\n      throw new Error(\"Contract requires the `nextTokenIdToMint` function available to determine the next token ID to mint\");\n    }\n  }\n\n  ////// ERC1155 Enumerable Extension //////\n\n  /**\n   * Get all NFTs\n   *\n   * @remarks Get all the data associated with every NFT in this contract.\n   *\n   * By default, returns the first 100 NFTs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const nfts = await contract.erc1155.getAll();\n   * ```\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs queried.\n   * @twfeature ERC1155Enumerable\n   */\n  async getAll(queryParams) {\n    return assertEnabled(this.query, FEATURE_EDITION_ENUMERABLE).all(queryParams);\n  }\n\n  /**\n   * Get the total number of NFTs minted\n   * @remarks This returns the total number of NFTs minted in this contract, **not** the total supply of a given token.\n   * @example\n   * ```javascript\n   * const count = await contract.erc1155.totalCount();\n   * console.log(count);\n   * ```\n   * @returns the total number of NFTs minted in this contract\n   * @public\n   * @twfeature ERC1155Enumerable\n   */\n  async totalCount() {\n    return assertEnabled(this.query, FEATURE_EDITION_ENUMERABLE).totalCount();\n  }\n\n  /**\n   * Get the total supply of a specific NFT\n   * @remarks This is **not** the sum of supply of all NFTs in the contract.\n   *\n   * @returns the total number of NFTs minted in this contract\n   * @public\n   * @twfeature ERC1155Enumerable\n   */\n  async totalCirculatingSupply(tokenId) {\n    return assertEnabled(this.query, FEATURE_EDITION_ENUMERABLE).totalCirculatingSupply(tokenId);\n  }\n\n  /**\n   * Get all NFTs owned by a specific wallet\n   *\n   * @remarks Get all the data associated with the NFTs owned by a specific wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to get the NFTs of\n   * const address = \"{{wallet_address}}\";\n   * const nfts = await contract.erc1155.getOwned(address);\n   * ```\n   *\n   * @returns The NFT metadata for all NFTs in the contract.\n   * @twfeature ERC1155Enumerable\n   */\n  async getOwned(walletAddress) {\n    if (walletAddress) {\n      walletAddress = await resolveAddress(walletAddress);\n    }\n    return assertEnabled(this.query, FEATURE_EDITION_ENUMERABLE).owned(walletAddress);\n  }\n  /**\n   * Construct a mint transaction without executing it.\n   * This is useful for estimating the gas cost of a mint transaction, overriding transaction options and having fine grained control over the transaction execution.\n   * @param receiver - Address you want to send the token to\n   * @param metadataWithSupply - The metadata of the NFT you want to mint\n   *\n   * @deprecated Use `contract.erc1155.mint.prepare(...args)` instead\n   * @twfeature ERC1155Mintable\n   */\n  async getMintTransaction(receiver, metadataWithSupply) {\n    return assertEnabled(this.mintable, FEATURE_EDITION_MINTABLE).getMintTransaction(receiver, metadataWithSupply);\n  }\n  ////// ERC1155 Claimable Extension //////\n  /**\n   * Construct a claim transaction without executing it.\n   * This is useful for estimating the gas cost of a claim transaction, overriding transaction options and having fine grained control over the transaction execution.\n   * @param destinationAddress - Address you want to send the token to\n   * @param tokenId - Id of the token you want to claim\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param options - Optional claim verification data (e.g. price, currency, etc...)\n   *\n   * @deprecated Use `contract.erc1155.claim.prepare(...args)` instead\n   */\n  async getClaimTransaction(destinationAddress, tokenId, quantity, options) {\n    const claimWithConditions = this.claimWithConditions;\n    const claim = this.claimCustom;\n    if (claimWithConditions) {\n      return claimWithConditions.conditions.getClaimTransaction(destinationAddress, tokenId, quantity, options);\n    }\n    if (claim) {\n      return claim.getClaimTransaction(destinationAddress, tokenId, quantity, options);\n    }\n    throw new ExtensionNotImplementedError(FEATURE_EDITION_CLAIM_CUSTOM);\n  }\n  /**\n   * Configure claim conditions\n   * @remarks Define who can claim NFTs in the collection, when and how many.\n   * @example\n   * ```javascript\n   * const presaleStartTime = new Date();\n   * const publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const claimConditions = [\n   *   {\n   *     startTime: presaleStartTime, // start the presale now\n   *     maxClaimableSupply: 2, // limit how many mints for this presale\n   *     price: 0.01, // presale price\n   *     snapshot: ['0x...', '0x...'], // limit minting to only certain addresses\n   *   },\n   *   {\n   *     startTime: publicSaleStartTime, // 24h after presale, start public sale\n   *     price: 0.08, // public sale price\n   *   }\n   * ]);\n   * await contract.erc1155.claimConditions.set(tokenId, claimConditions);\n   * ```\n   * @twfeature ERC1155ClaimPhasesV2 | ERC1155ClaimPhasesV1 | ERC1155ClaimConditionsV2 | ERC1155ClaimConditionsV1\n   */\n  get claimConditions() {\n    return assertEnabled(this.claimWithConditions, FEATURE_EDITION_CLAIM_CONDITIONS_V2).conditions;\n  }\n\n  ////// ERC1155 SignatureMintable Extension //////\n\n  /**\n   * Mint with signature\n   * @remarks Generate dynamic NFTs with your own signature, and let others mint them using that signature.\n   * @example\n   * ```javascript\n   * // see how to craft a payload to sign in the `contract.erc1155.signature.generate()` documentation\n   * const signedPayload = contract.erc1155.signature().generate(payload);\n   *\n   * // now anyone can mint the NFT\n   * const tx = contract.erc1155.signature.mint(signedPayload);\n   * const receipt = tx.receipt; // the mint transaction receipt\n   * const mintedId = tx.id; // the id of the NFT minted\n   * ```\n   * @twfeature ERC1155SignatureMintable\n   */\n  get signature() {\n    return assertEnabled(this.signatureMintable, FEATURE_EDITION_SIGNATURE_MINTABLE);\n  }\n\n  ////// ERC1155 DelayedReveal Extension //////\n\n  /**\n   * Mint delayed reveal NFTs\n   * @remarks Create a batch of encrypted NFTs that can be revealed at a later time.\n   * @example\n   * ```javascript\n   * // the real NFTs, these will be encrypted until you reveal them\n   * const realNFTs = [{\n   *   name: \"Common NFT #1\",\n   *   description: \"Common NFT, one of many.\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }, {\n   *   name: \"Super Rare NFT #2\",\n   *   description: \"You got a Super Rare NFT!\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }];\n   * // A placeholder NFT that people will get immediately in their wallet, and will be converted to the real NFT at reveal time\n   * const placeholderNFT = {\n   *   name: \"Hidden NFT\",\n   *   description: \"Will be revealed next week!\"\n   * };\n   * // Create and encrypt the NFTs\n   * await contract.erc1155.drop.revealer.createDelayedRevealBatch(\n   *   placeholderNFT,\n   *   realNFTs,\n   *   \"my secret password\",\n   * );\n   * // Whenever you're ready, reveal your NFTs at any time\n   * const batchId = 0; // the batch to reveal\n   * await contract.erc1155.revealer.reveal(batchId, \"my secret password\");\n   * ```\n   * @twfeature ERC1155Revealable\n   */\n  get revealer() {\n    var _this$lazyMintable2;\n    return assertEnabled((_this$lazyMintable2 = this.lazyMintable) === null || _this$lazyMintable2 === void 0 ? void 0 : _this$lazyMintable2.revealer, FEATURE_EDITION_REVEALABLE);\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  /**\n   * @internal\n   * @param tokenId - the token Id to fetch\n   */\n  async getTokenMetadata(tokenId) {\n    const tokenUri = await this.contractWrapper.read(\"uri\", [tokenId]);\n    if (!tokenUri) {\n      throw new NotFoundError();\n    }\n    return fetchTokenMetadata(tokenId, tokenUri, this.storage);\n  }\n  detectErc1155Enumerable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC1155Enumerable\")) {\n      return new Erc1155Enumerable(this, this.contractWrapper);\n    }\n  }\n  detectErc1155Mintable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC1155Mintable\")) {\n      return new Erc1155Mintable(this, this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n  detectErc1155Burnable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC1155Burnable\")) {\n      return new Erc1155Burnable(this.contractWrapper);\n    }\n    return undefined;\n  }\n  detectErc1155LazyMintable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC1155LazyMintableV1\") || detectContractFeature(this.contractWrapper, \"ERC1155LazyMintableV2\")) {\n      return new Erc1155LazyMintable(this, this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n  detectErc1155SignatureMintable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC1155SignatureMintable\")) {\n      return new Erc1155SignatureMintable(this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n  detectErc1155Claimable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC1155ClaimCustom\")) {\n      return new ERC1155Claimable(this.contractWrapper);\n    }\n    return undefined;\n  }\n  detectErc1155ClaimableWithConditions() {\n    if (detectContractFeature(this.contractWrapper, \"ERC1155ClaimConditionsV1\") || detectContractFeature(this.contractWrapper, \"ERC1155ClaimConditionsV2\") || detectContractFeature(this.contractWrapper, \"ERC1155ClaimPhasesV1\") || detectContractFeature(this.contractWrapper, \"ERC1155ClaimPhasesV2\")) {\n      return new Erc1155ClaimableWithConditions(this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n}\nfunction cleanCurrencyAddress(currencyAddress) {\n  if (isNativeToken(currencyAddress)) {\n    return NATIVE_TOKEN_ADDRESS;\n  }\n  return currencyAddress;\n}\n\n/**\n * This method checks if the given token is approved for the transferrerContractAddress contract.\n * This is particularly useful for contracts that need to transfer NFTs on the users' behalf\n *\n * @internal\n * @param provider - The connected provider\n * @param transferrerContractAddress - The address of the marketplace contract\n * @param assetContract - The address of the asset contract.\n * @param tokenId - The token id of the token.\n * @param owner - The address of the account that owns the token.\n * @returns - True if the transferrerContractAddress is approved on the token, false otherwise.\n */\nasync function isTokenApprovedForTransfer(provider, transferrerContractAddress, assetContract, tokenId, owner) {\n  try {\n    const erc165 = new Contract(assetContract, ERC165Abi, provider);\n    const isERC721 = await erc165.supportsInterface(InterfaceId_IERC721);\n    const isERC1155 = await erc165.supportsInterface(InterfaceId_IERC1155);\n    if (isERC721) {\n      var _approvedAddress;\n      const asset = new Contract(assetContract, Erc721Abi, provider);\n      const approved = await asset.isApprovedForAll(owner, transferrerContractAddress);\n      if (approved) {\n        return true;\n      }\n\n      // Handle reverts in case of non-existent tokens\n      let approvedAddress;\n      try {\n        approvedAddress = await asset.getApproved(tokenId);\n      } catch (e) {}\n      return ((_approvedAddress = approvedAddress) === null || _approvedAddress === void 0 ? void 0 : _approvedAddress.toLowerCase()) === transferrerContractAddress.toLowerCase();\n    } else if (isERC1155) {\n      const asset = new Contract(assetContract, Erc1155Abi, provider);\n      return await asset.isApprovedForAll(owner, transferrerContractAddress);\n    } else {\n      console.error(\"Contract does not implement ERC 1155 or ERC 721.\");\n      return false;\n    }\n  } catch (err) {\n    console.error(\"Failed to check if token is approved\", err);\n    return false;\n  }\n}\n\n/**\n * Checks if the marketplace is approved to make transfers on the assetContract\n * If not, it tries to set the approval.\n * @param contractWrapper\n * @param marketplaceAddress\n * @param assetContract\n * @param tokenId\n * @param from\n */\nasync function handleTokenApproval(contractWrapper, marketplaceAddress, assetContract, tokenId, from) {\n  const erc165 = new ContractWrapper(contractWrapper.getSignerOrProvider(), assetContract, ERC165Abi, contractWrapper.options, contractWrapper.storage);\n  const isERC721 = await erc165.read(\"supportsInterface\", [InterfaceId_IERC721]);\n  const isERC1155 = await erc165.read(\"supportsInterface\", [InterfaceId_IERC1155]);\n  // check for token approval\n  if (isERC721) {\n    const asset = new ContractWrapper(contractWrapper.getSignerOrProvider(), assetContract, Erc721Abi, contractWrapper.options, contractWrapper.storage);\n    const approved = await asset.read(\"isApprovedForAll\", [from, marketplaceAddress]);\n    if (!approved) {\n      const isTokenApproved = (await asset.read(\"getApproved\", [tokenId])).toLowerCase() === marketplaceAddress.toLowerCase();\n      if (!isTokenApproved) {\n        await asset.sendTransaction(\"setApprovalForAll\", [marketplaceAddress, true]);\n      }\n    }\n  } else if (isERC1155) {\n    const asset = new ContractWrapper(contractWrapper.getSignerOrProvider(), assetContract, Erc1155Abi, contractWrapper.options, contractWrapper.storage);\n    const approved = await asset.read(\"isApprovedForAll\", [from, marketplaceAddress]);\n    if (!approved) {\n      await asset.sendTransaction(\"setApprovalForAll\", [marketplaceAddress, true]);\n    }\n  } else {\n    throw Error(\"Contract must implement ERC 1155 or ERC 721.\");\n  }\n}\n\n/**\n * Used to verify fields in new listing.\n * @internal\n */\n// TODO this should be done in zod\nfunction validateNewListingParam(param) {\n  invariant(param.assetContractAddress !== undefined && param.assetContractAddress !== null, \"Asset contract address is required\");\n  invariant(param.buyoutPricePerToken !== undefined && param.buyoutPricePerToken !== null, \"Buyout price is required\");\n  invariant(param.listingDurationInSeconds !== undefined && param.listingDurationInSeconds !== null, \"Listing duration is required\");\n  invariant(param.startTimestamp !== undefined && param.startTimestamp !== null, \"Start time is required\");\n  invariant(param.tokenId !== undefined && param.tokenId !== null, \"Token ID is required\");\n  invariant(param.quantity !== undefined && param.quantity !== null, \"Quantity is required\");\n  switch (param.type) {\n    case \"NewAuctionListing\":\n      {\n        invariant(param.reservePricePerToken !== undefined && param.reservePricePerToken !== null, \"Reserve price is required\");\n      }\n  }\n}\n\n/**\n * Maps a contract offer to the strict interface\n *\n * @internal\n * @param offer\n * @returns - An `Offer` object\n */\nasync function mapOffer(provider, listingId, offer) {\n  return {\n    quantity: offer.quantityDesired,\n    pricePerToken: offer.pricePerToken,\n    currencyContractAddress: offer.currency,\n    buyerAddress: offer.offeror,\n    quantityDesired: offer.quantityWanted,\n    currencyValue: await fetchCurrencyValue(provider, offer.currency, offer.quantityWanted.mul(offer.pricePerToken)),\n    listingId\n  };\n}\nfunction isWinningBid(winningPrice, newBidPrice, bidBuffer) {\n  bidBuffer = BigNumber.from(bidBuffer);\n  winningPrice = BigNumber.from(winningPrice);\n  newBidPrice = BigNumber.from(newBidPrice);\n  if (winningPrice.eq(BigNumber.from(0))) {\n    return false;\n  }\n  const buffer = newBidPrice.sub(winningPrice).mul(MAX_BPS).div(winningPrice);\n  return buffer.gte(bidBuffer);\n}\nasync function getAllInBatches(start, end, fn) {\n  const batches = [];\n  while (end - start > DEFAULT_QUERY_ALL_COUNT) {\n    batches.push(fn(start, start + DEFAULT_QUERY_ALL_COUNT - 1));\n    start += DEFAULT_QUERY_ALL_COUNT;\n  }\n  batches.push(fn(start, end - 1));\n  return await Promise.all(batches);\n}\n\n/**\n * Listen to Contract events in real time\n * @public\n */\nclass ContractEvents {\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Subscribe to transactions in this contract.\n   * @remarks Will emit an \"event\" object containing the transaction status ('submitted' and 'completed') and hash\n   * @example\n   * ```javascript\n   * contract.events.addTransactionListener((event) => {\n   *   console.log(event);\n   * }\n   * ```\n   * @param listener - the callback function that will be called on every transaction\n   * @public\n   */\n  addTransactionListener(listener) {\n    this.contractWrapper.addListener(EventType.Transaction, listener);\n  }\n\n  /**\n   * Remove a transaction listener\n   * @remarks Remove a listener that was added with addTransactionListener\n   * @example\n   * ```javascript\n   * contract.events.removeTransactionListener((event) => {\n   *  console.log(event);\n   * }\n   * ```\n   * @param listener - the callback function to remove\n   * @public\n   */\n  removeTransactionListener(listener) {\n    this.contractWrapper.off(EventType.Transaction, listener);\n  }\n\n  /**\n   * Subscribe to contract events\n   * @remarks You can add a listener for any contract event to run a function when\n   * the event is emitted. For example, if you wanted to listen for a \"TokensMinted\" event,\n   * you could do the following:\n   * @example\n   * ```javascript\n   * contract.events.addEventListener(\"TokensMinted\", (event) => {\n   *   console.log(event);\n   * });\n   * ```\n   * @public\n   * @param eventName - the event name as defined in the contract\n   * @param listener - the callback function that will be called on every new event\n   * @returns a function to un-subscribe from the event\n   */\n  addEventListener(\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  eventName, listener) {\n    // validates event, throws error if not found\n    const event = this.contractWrapper.readContract.interface.getEvent(eventName);\n    const address = this.contractWrapper.address;\n    const filter = {\n      address,\n      topics: [this.contractWrapper.readContract.interface.getEventTopic(event)]\n    };\n    const wrappedListener = log => {\n      const parsedLog = this.contractWrapper.readContract.interface.parseLog(log);\n      listener(this.toContractEvent(parsedLog.eventFragment, parsedLog.args, log));\n    };\n    this.contractWrapper.getProvider().on(filter, wrappedListener);\n    return () => {\n      this.contractWrapper.getProvider().off(filter, wrappedListener);\n    };\n  }\n\n  /**\n   * Listen to all events emitted from this contract\n   *\n   * @example\n   * ```javascript\n   * contract.events.listenToAllEvents((event) => {\n   *   console.log(event.eventName) // the name of the emitted event\n   *   console.log(event.data) // event payload\n   * }\n   * ```\n   * @public\n   * @param listener - the callback function that will be called on every new event\n   * @returns A function that can be called to stop listening to events\n   */\n  listenToAllEvents(listener) {\n    const address = this.contractWrapper.address;\n    const filter = {\n      address\n    };\n    const wrappedListener = log => {\n      try {\n        const parsedLog = this.contractWrapper.readContract.interface.parseLog(log);\n        listener(this.toContractEvent(parsedLog.eventFragment, parsedLog.args, log));\n      } catch (e) {\n        console.error(\"Could not parse event:\", log, e);\n      }\n    };\n    this.contractWrapper.getProvider().on(filter, wrappedListener);\n    return () => {\n      this.contractWrapper.getProvider().off(filter, wrappedListener);\n    };\n  }\n\n  /**\n   * Remove an event listener from this contract\n   * @remarks Remove a listener that was added with addEventListener\n   * @example\n   * ```javascript\n   * contract.events.removeEventListener(\"TokensMinted\", (event) => {\n   *   console.log(event);\n   * });\n   * ```\n   * @public\n   * @param eventName - the event name as defined in the contract\n   * @param listener - the listener to unregister\n   */\n  removeEventListener(\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  eventName, listener) {\n    // validates event, throws error if not found\n    const event = this.contractWrapper.readContract.interface.getEvent(eventName);\n    this.contractWrapper.readContract.off(event.name, listener);\n  }\n\n  /**\n   * Remove all listeners on this contract\n   * @remarks Remove all listeners from a contract\n   * @example\n   * ```javascript\n   * contract.events.removeAllListeners();\n   * ```\n   * @public\n   */\n  removeAllListeners() {\n    this.contractWrapper.readContract.removeAllListeners();\n    const address = this.contractWrapper.address;\n    const filter = {\n      address\n    };\n    this.contractWrapper.getProvider().removeAllListeners(filter);\n  }\n\n  /**\n   * Get All Events\n   * @remarks Get a list of all the events emitted from this contract during the specified time period\n   * @example\n   * ```javascript\n   * // Optionally pass in filters to limit the blocks from which events are retrieved\n   * const filters = {\n   *   fromBlock: 0,\n   *   toBlock: 1000000,\n   * }\n   * const events = await contract.events.getAllEvents(filters);\n   * console.log(events[0].eventName);\n   * console.log(events[0].data);\n   * ```\n   *\n   * @param filters - Specify the from and to block numbers to get events for, defaults to all blocks\n   * @returns The event objects of the events emitted with event names and data for each event\n   */\n  async getAllEvents() {\n    let filters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      fromBlock: 0,\n      toBlock: \"latest\",\n      order: \"desc\"\n    };\n    const events = await this.contractWrapper.readContract.queryFilter({}, filters.fromBlock, filters.toBlock);\n    const orderedEvents = events.sort((a, b) => {\n      return filters.order === \"desc\" ? b.blockNumber - a.blockNumber : a.blockNumber - b.blockNumber;\n    });\n    return this.parseEvents(orderedEvents);\n  }\n\n  /**\n   * Get Events\n   * @remarks Get a list of the events of a specific type emitted from this contract during the specified time period\n   * @example\n   * ```javascript\n   * // The name of the event to get logs for\n   * const eventName = \"Transfer\";\n   *\n   * // Optionally pass in options to limit the blocks from which events are retrieved\n   * const options = {\n   *   fromBlock: 0,\n   *   toBlock: 1000000, // can also pass \"latest\"\n   *   order: \"desc\",\n   *   // Configure event filters (filter on indexed event parameters)\n   *   filters: {\n   *     from: \"0x...\",\n   *     to: \"0x...\"\n   *   }\n   * };\n   *\n   * const events = await contract.events.getEvents(eventName, options);\n   * console.log(events[0].eventName);\n   * console.log(events[0].data);\n   * ```\n   *\n   * @param eventName - The name of the event to get logs for\n   * @param options - Specify the from and to block numbers to get events for, defaults to all blocks. @see EventQueryOptions\n   * @returns The requested event objects with event data\n   */\n  async getEvents(eventName) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      fromBlock: 0,\n      toBlock: \"latest\",\n      order: \"desc\"\n    };\n    const eventInterface = this.contractWrapper.readContract.interface.getEvent(eventName);\n    const args = options.filters ? eventInterface.inputs.map(e => options.filters[e.name]) : [];\n    const filter = this.contractWrapper.readContract.filters[eventInterface.name](...args);\n    const events = await this.contractWrapper.readContract.queryFilter(filter, options.fromBlock, options.toBlock);\n    const orderedEvents = events.sort((a, b) => {\n      return options.order === \"desc\" ? b.blockNumber - a.blockNumber : a.blockNumber - b.blockNumber;\n    });\n    return this.parseEvents(orderedEvents);\n  }\n  parseEvents(events) {\n    return events.map(e => {\n      const transaction = Object.fromEntries(Object.entries(e).filter(a => typeof a[1] !== \"function\" && a[0] !== \"args\"));\n      if (e.args) {\n        const entries = Object.entries(e.args);\n        const args = entries.slice(entries.length / 2, entries.length);\n        const data = {};\n        for (const [key, value] of args) {\n          data[key] = value;\n        }\n        return {\n          eventName: e.event || \"\",\n          data: data,\n          transaction\n        };\n      }\n      return {\n        eventName: e.event || \"\",\n        data: {},\n        transaction\n      };\n    });\n  }\n  toContractEvent(event, args, rawLog) {\n    const transaction = Object.fromEntries(Object.entries(rawLog).filter(a => typeof a[1] !== \"function\" && a[0] !== \"args\"));\n    const results = {};\n    event.inputs.forEach((param, index) => {\n      if (Array.isArray(args[index])) {\n        const components = param.components;\n        if (components) {\n          const arr = args[index];\n          if (param.type === \"tuple[]\") {\n            // tuple[]\n            const objArray = [];\n            for (let i = 0; i < arr.length; i++) {\n              const tuple = arr[i];\n              const obj = {};\n              for (let j = 0; j < components.length; j++) {\n                const name = components[j].name;\n                obj[name] = tuple[j];\n              }\n              objArray.push(obj);\n            }\n            results[param.name] = objArray;\n          } else {\n            // simple tuple\n            const obj = {};\n            for (let i = 0; i < components.length; i++) {\n              const name = components[i].name;\n              obj[name] = arr[i];\n            }\n            results[param.name] = obj;\n          }\n        }\n      } else {\n        results[param.name] = args[index];\n      }\n    });\n    return {\n      eventName: event.name,\n      data: results,\n      transaction\n    };\n  }\n}\n\n/**\n * @internal\n */\nconst DirectListingInputParamsSchema = /* @__PURE__ */(() => z.object({\n  /**\n   * The address of the asset being listed.\n   */\n  assetContractAddress: AddressOrEnsSchema,\n  /**\n   * The ID of the token to list.\n   */\n  tokenId: BigNumberishSchema,\n  /**\n   * The quantity of tokens to include in the listing.\n   *\n   * For ERC721s, this value should always be 1 (and will be forced internally regardless of what is passed here).\n   */\n  quantity: BigNumberishSchema.default(1),\n  /**\n   * The address of the currency to accept for the listing.\n   */\n  currencyContractAddress: AddressOrEnsSchema.default(NATIVE_TOKEN_ADDRESS),\n  /**\n   * The price to pay per unit of NFTs listed.\n   */\n  pricePerToken: AmountSchema,\n  /**\n   * The start time of the listing.\n   */\n  startTimestamp: RawDateSchema.default(new Date()),\n  /**\n   * The end time of the listing.\n   */\n  endTimestamp: EndDateSchema,\n  /**\n   * Whether the listing is reserved to be bought from a specific set of buyers.\n   */\n  isReservedListing: z.boolean().default(false)\n}))();\n\n/**\n * @public\n */\n\n/**\n * Allows overriding transaction behavior for this contract\n * @public\n */\nclass ContractInterceptor {\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * The next transaction executed will add/replace any overrides passed via the passed in hook.\n   * @remarks Overridden values will be applied to the next transaction executed.\n   * @example\n   * ```javascript\n   * contract.interceptor.overrideNextTransaction(() => ({\n   *   gasLimit: 3000000,\n   * }));\n   * ```\n   * @param hook - the hook to add or replace any CallOverrides (gas limit, gas price, nonce, from, value, etc...)\n   * @public\n   */\n  overrideNextTransaction(hook) {\n    this.contractWrapper.withTransactionOverride(hook);\n  }\n}\n\n/**\n * Estimates the gas cost of Contract calls\n * @public\n */\nclass GasCostEstimator {\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Estimates the cost of gas in native token of the current chain\n   * Pass in the same parameters as the contract's function.\n   * @remarks Estimate the cost of gas in native token of the current chain\n   * @example\n   * ```javascript\n   * const costOfClaim = await nftDrop?.estimator.gasCostOf(\"claim\", [\n   *   \"0x...\", // receiver\n   *   1, // quantity\n   *   \"0x...\", // currency\n   *   1, // price per token\n   *   [], // proofs\n   *   1, // proof max quantity per transaction\n   * ]);\n   * ```\n   * @returns the estimated price in native currency (ETH, MATIC, etc) of calling this function\n   * @public\n   */\n  async gasCostOf(\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  fn, args) {\n    const [price, gasUnits] = await Promise.all([this.contractWrapper.getProvider().getGasPrice(), this.contractWrapper.estimateGas(fn, args)]);\n    return utils.formatEther(gasUnits.mul(price));\n  }\n\n  /**\n   * Estimates the gas limit of a transaction\n   * Pass in the same parameters as the contract's function.\n   * @remarks Estimates the gas limit of a transaction\n   * @example\n   * ```javascript\n   * const gasLimitOfClaim = await nftDrop?.estimator.gasLimitOf(\"claim\", [\n   *   \"0x...\", // receiver\n   *   1, // quantity\n   *   \"0x...\", // currency\n   *   1, // price per token\n   *   [], // proofs\n   *   1, // proof max quantity per transaction\n   * ]);\n   * ```\n   * @returns the estimated gas limit of the transaction\n   * @public\n   */\n  async gasLimitOf(\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  fn, args) {\n    return this.contractWrapper.estimateGas(fn, args);\n  }\n\n  /**\n   * Returns the current gas price in gwei\n   * @remarks Get the current gas price in gwei\n   * @example\n   * ```javascript\n   * const gasCostInGwei = await contract.estimator.currentGasPriceInGwei();\n   * ```\n   * @returns the current gas price in gwei\n   * @public\n   */\n  async currentGasPriceInGwei() {\n    const price = await this.contractWrapper.getProvider().getGasPrice();\n    return utils.formatUnits(price, \"gwei\");\n  }\n}\n\n/**\n * Handles direct listings\n * @public\n */\nclass MarketplaceV3DirectListings {\n  // utilities\n\n  constructor(contractWrapper, storage) {\n    _defineProperty(this, \"featureName\", FEATURE_DIRECT_LISTINGS.name);\n    /** ******************************\n     * WRITE FUNCTIONS\n     *******************************/\n    /**\n     * Create new direct listing\n     *\n     * @remarks Create a new listing on the marketplace where people can buy an asset directly.\n     *\n     * @example\n     * ```javascript\n     * // Data of the listing you want to create\n     * const listing = {\n     *   // address of the contract the asset you want to list is on\n     *   assetContractAddress: \"0x...\",\n     *   // token ID of the asset you want to list\n     *   tokenId: \"0\",\n     *   // how many of the asset you want to list\n     *   quantity: 1,\n     *   // address of the currency contract that will be used to pay for the listing\n     *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n     *   // The price to pay per unit of NFTs listed.\n     *   pricePerToken: 1.5,\n     *   // when should the listing open up for offers\n     *   startTimestamp: new Date(Date.now()),\n     *   // how long the listing will be open for\n     *   endTimestamp: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000),\n     *   // Whether the listing is reserved for a specific set of buyers.\n     *   isReservedListing: false\n     * }\n     *\n     * const tx = await contract.directListings.createListing(listing);\n     * const receipt = tx.receipt; // the transaction receipt\n     * const id = tx.id; // the id of the newly created listing\n     * ```\n     * @twfeature DirectListings\n     */\n    _defineProperty(this, \"createListing\", /* @__PURE__ */buildTransactionFunction(async listing => {\n      const parsedListing = await DirectListingInputParamsSchema.parseAsync(listing);\n      await handleTokenApproval(this.contractWrapper, this.getAddress(), parsedListing.assetContractAddress, parsedListing.tokenId, await this.contractWrapper.getSignerAddress());\n      const normalizedPricePerToken = await normalizePriceValue(this.contractWrapper.getProvider(), parsedListing.pricePerToken, parsedListing.currencyContractAddress);\n      const block = await this.contractWrapper.getProvider().getBlock(\"latest\");\n      const blockTime = block.timestamp;\n      if (parsedListing.startTimestamp.lt(blockTime)) {\n        parsedListing.startTimestamp = BigNumber.from(blockTime);\n      }\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"createListing\",\n        args: [{\n          assetContract: parsedListing.assetContractAddress,\n          tokenId: parsedListing.tokenId,\n          quantity: parsedListing.quantity,\n          currency: cleanCurrencyAddress(parsedListing.currencyContractAddress),\n          pricePerToken: normalizedPricePerToken,\n          startTimestamp: parsedListing.startTimestamp,\n          endTimestamp: parsedListing.endTimestamp,\n          reserved: parsedListing.isReservedListing\n        }],\n        parse: receipt => {\n          const event = this.contractWrapper.parseLogs(\"NewListing\", receipt === null || receipt === void 0 ? void 0 : receipt.logs);\n          return {\n            id: event[0].args.listingId,\n            receipt\n          };\n        }\n      });\n    }));\n    /**\n     * Create a batch of new listings\n     *\n     * @remarks Create a batch of new listings on the marketplace\n     *\n     * @example\n     * ```javascript\n     * const listings = [...];\n     * const tx = await contract.directListings.createListingsBatch(listings);\n     * ```\n     */\n    _defineProperty(this, \"createListingsBatch\", /* @__PURE__ */buildTransactionFunction(async listings => {\n      const data = await Promise.all(listings.map(async listing => {\n        const tx = await this.createListing.prepare(listing);\n        return tx.encode();\n      }));\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"multicall\",\n        args: [data],\n        parse: receipt => {\n          const events = this.contractWrapper.parseLogs(\"NewListing\", receipt === null || receipt === void 0 ? void 0 : receipt.logs);\n          return events.map(event => {\n            return {\n              id: event.args.listingId,\n              receipt\n            };\n          });\n        }\n      });\n    }));\n    /**\n     * Update a direct listing\n     *\n     * @param listing - the new listing information\n     *\n     * @example\n     * ```javascript\n     * // Data of the listing you want to update\n     *\n     * const listingId = 0; // ID of the listing you want to update\n     *\n     * const listing = {\n     *   // address of the contract the asset you want to list is on\n     *   assetContractAddress: \"0x...\", // should be same as original listing\n     *   // token ID of the asset you want to list\n     *   tokenId: \"0\", // should be same as original listing\n     *   // how many of the asset you want to list\n     *   quantity: 1,\n     *   // address of the currency contract that will be used to pay for the listing\n     *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n     *   // The price to pay per unit of NFTs listed.\n     *   pricePerToken: 1.5,\n     *   // when should the listing open up for offers\n     *   startTimestamp: new Date(Date.now()), // can't change this if listing already active\n     *   // how long the listing will be open for\n     *   endTimestamp: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000),\n     *   // Whether the listing is reserved for a specific set of buyers.\n     *   isReservedListing: false\n     * }\n     *\n     * const tx = await contract.directListings.updateListing(listingId, listing);\n     * const receipt = tx.receipt; // the transaction receipt\n     * const id = tx.id; // the id of the newly created listing\n     * ```\n     * @twfeature DirectListings\n     */\n    _defineProperty(this, \"updateListing\", /* @__PURE__ */buildTransactionFunction(async (listingId, listing) => {\n      const parsedListing = await DirectListingInputParamsSchema.parseAsync(listing);\n      await handleTokenApproval(this.contractWrapper, this.getAddress(), parsedListing.assetContractAddress, parsedListing.tokenId, await this.contractWrapper.getSignerAddress());\n      const normalizedPricePerToken = await normalizePriceValue(this.contractWrapper.getProvider(), parsedListing.pricePerToken, parsedListing.currencyContractAddress);\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"updateListing\",\n        args: [listingId, {\n          assetContract: parsedListing.assetContractAddress,\n          tokenId: parsedListing.tokenId,\n          quantity: parsedListing.quantity,\n          currency: cleanCurrencyAddress(parsedListing.currencyContractAddress),\n          pricePerToken: normalizedPricePerToken,\n          startTimestamp: parsedListing.startTimestamp,\n          endTimestamp: parsedListing.endTimestamp,\n          reserved: parsedListing.isReservedListing\n        }],\n        parse: receipt => {\n          const event = this.contractWrapper.parseLogs(\"UpdatedListing\", receipt === null || receipt === void 0 ? void 0 : receipt.logs);\n          return {\n            id: event[0].args.listingId,\n            receipt\n          };\n        }\n      });\n    }));\n    /**\n     * Cancel Direct Listing\n     *\n     * @remarks Cancel a direct listing on the marketplace\n     *\n     * @example\n     * ```javascript\n     * // The listing ID of the direct listing you want to cancel\n     * const listingId = 0;\n     *\n     * await contract.directListings.cancelListing(listingId);\n     * ```\n     * @twfeature DirectListings\n     */\n    _defineProperty(this, \"cancelListing\", /* @__PURE__ */buildTransactionFunction(async listingId => {\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"cancelListing\",\n        args: [listingId]\n      });\n    }));\n    /**\n     * Buy direct listing for a specific wallet\n     *\n     * @remarks Buy from a specific direct listing from the marketplace.\n     *\n     * @example\n     * ```javascript\n     * // The ID of the listing you want to buy from\n     * const listingId = 0;\n     * // Quantity of the asset you want to buy\n     * const quantityDesired = 1;\n     *\n     * await contract.directListings.buyFromListing(listingId, quantityDesired, \"{{wallet_address}}\");\n     * ```\n     *\n     * @param listingId - The listing id to buy\n     * @param quantityDesired - the quantity to buy\n     * @param receiver - optional receiver of the bought listing if different from the connected wallet\n     * @twfeature DirectListings\n     */\n    _defineProperty(this, \"buyFromListing\", /* @__PURE__ */buildTransactionFunction(async (listingId, quantityDesired, receiver) => {\n      if (receiver) {\n        receiver = await resolveAddress(receiver);\n      }\n      const listing = await this.validateListing(BigNumber.from(listingId));\n      const {\n        valid,\n        error\n      } = await this.isStillValidListing(listing, quantityDesired);\n      if (!valid) {\n        throw new Error(\"Listing \".concat(listingId, \" is no longer valid. \").concat(error));\n      }\n      const buyFor = receiver ? receiver : await this.contractWrapper.getSignerAddress();\n      const quantity = BigNumber.from(quantityDesired);\n      const value = BigNumber.from(listing.pricePerToken).mul(quantity);\n      const overrides = (await this.contractWrapper.getCallOverrides()) || {};\n      await setErc20Allowance(this.contractWrapper, value, listing.currencyContractAddress, overrides);\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"buyFromListing\",\n        args: [listingId, buyFor, quantity, listing.currencyContractAddress, value],\n        overrides\n      });\n    }));\n    /**\n     * Approve buyer for a reserved direct listing\n     *\n     * @remarks Approve a buyer to buy from a reserved listing.\n     *\n     * @example\n     * ```javascript\n     * // The listing ID of the direct listing you want to approve buyer for\n     * const listingId = \"0\";\n     *\n     * await contract.directListings.approveBuyerForReservedListing(listingId, \"{{wallet_address}}\");\n     * ```\n     *\n     * @param listingId - The listing id to buy\n     * @param buyer - Address of buyer being approved\n     * @twfeature DirectListings\n     */\n    _defineProperty(this, \"approveBuyerForReservedListing\", /* @__PURE__ */buildTransactionFunction(async (listingId, buyer) => {\n      const isApproved = await this.isBuyerApprovedForListing(listingId, buyer);\n      if (!isApproved) {\n        return Transaction.fromContractWrapper({\n          contractWrapper: this.contractWrapper,\n          method: \"approveBuyerForListing\",\n          args: [listingId, buyer, true]\n        });\n      } else {\n        throw new Error(\"Buyer \".concat(buyer, \" already approved for listing \").concat(listingId, \".\"));\n      }\n    }));\n    /**\n     * Revoke approval of a buyer for a reserved direct listing\n     *\n     * @example\n     * ```javascript\n     * // The listing ID of the direct listing you want to approve buyer for\n     * const listingId = \"0\";\n     *\n     * await contract.directListings.revokeBuyerApprovalForReservedListing(listingId, \"{{wallet_address}}\");\n     * ```\n     *\n     * @param listingId - The listing id to buy\n     * @param buyer - Address of buyer being approved\n     */\n    _defineProperty(this, \"revokeBuyerApprovalForReservedListing\", /* @__PURE__ */buildTransactionFunction(async (listingId, buyer) => {\n      const isApproved = await this.isBuyerApprovedForListing(listingId, buyer);\n      if (isApproved) {\n        return Transaction.fromContractWrapper({\n          contractWrapper: this.contractWrapper,\n          method: \"approveBuyerForListing\",\n          args: [listingId, buyer, false]\n        });\n      } else {\n        throw new Error(\"Buyer \".concat(buyer, \" not approved for listing \").concat(listingId, \".\"));\n      }\n    }));\n    /**\n     * Approve a currency for a direct listing\n     *\n     *\n     * @example\n     * ```javascript\n     * // The listing ID of the direct listing you want to approve currency for\n     * const listingId = \"0\";\n     *\n     * await contract.directListings.approveCurrencyForListing(listingId, currencyContractAddress, pricePerTokenInCurrency);\n     * ```\n     *\n     * @param listingId - The listing id to buy\n     * @param currencyContractAddress - Address of currency being approved\n     * @param pricePerTokenInCurrency - Price per token in the currency\n     * @twfeature DirectListings\n     */\n    _defineProperty(this, \"approveCurrencyForListing\", /* @__PURE__ */buildTransactionFunction(async (listingId, currencyContractAddress, pricePerTokenInCurrency) => {\n      const listing = await this.validateListing(BigNumber.from(listingId));\n      const resolvedCurrencyAddress = await resolveAddress(currencyContractAddress);\n      if (resolvedCurrencyAddress === listing.currencyContractAddress) {\n        invariant(pricePerTokenInCurrency === listing.pricePerToken, \"Approving listing currency with a different price.\");\n      }\n      const currencyPrice = await this.contractWrapper.read(\"currencyPriceForListing\", [listingId, resolvedCurrencyAddress]);\n      invariant(pricePerTokenInCurrency === currencyPrice, \"Currency already approved with this price.\");\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"approveCurrencyForListing\",\n        args: [listingId, resolvedCurrencyAddress, pricePerTokenInCurrency]\n      });\n    }));\n    /**\n     * Revoke approval of a currency for a direct listing\n     *\n     *\n     * @example\n     * ```javascript\n     * // The listing ID of the direct listing you want to revoke currency for\n     * const listingId = \"0\";\n     *\n     * await contract.directListings.revokeCurrencyApprovalForListing(listingId, currencyContractAddress);\n     * ```\n     *\n     * @param listingId - The listing id to buy\n     * @param currencyContractAddress - Address of currency\n     * @twfeature DirectListings\n     */\n    _defineProperty(this, \"revokeCurrencyApprovalForListing\", /* @__PURE__ */buildTransactionFunction(async (listingId, currencyContractAddress) => {\n      const listing = await this.validateListing(BigNumber.from(listingId));\n      const resolvedCurrencyAddress = await resolveAddress(currencyContractAddress);\n      if (resolvedCurrencyAddress === listing.currencyContractAddress) {\n        throw new Error(\"Can't revoke approval for main listing currency.\");\n      }\n      const currencyPrice = await this.contractWrapper.read(\"currencyPriceForListing\", [listingId, resolvedCurrencyAddress]);\n      invariant(!currencyPrice.isZero(), \"Currency not approved.\");\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"approveCurrencyForListing\",\n        args: [listingId, resolvedCurrencyAddress, BigNumber.from(0)]\n      });\n    }));\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.events = new ContractEvents(this.contractWrapper);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get the total number of direct listings\n   *\n   * @returns Returns the total number of direct listings created.\n   * @public\n   *\n   * @example\n   * ```javascript\n   * const totalListings = await contract.directListings.getTotalCount();\n   * ```\n   * @twfeature DirectListings\n   */\n  async getTotalCount() {\n    return await this.contractWrapper.read(\"totalListings\", []);\n  }\n\n  /**\n   * Get all direct listings\n   *\n   * @example\n   * ```javascript\n   * const listings = await contract.directListings.getAll();\n   * ```\n   *\n   * @param filter - optional filter parameters\n   * @returns the Direct listing object array\n   * @twfeature DirectListings\n   */\n  async getAll(filter) {\n    const totalListings = await this.getTotalCount();\n    const start = BigNumber.from((filter === null || filter === void 0 ? void 0 : filter.start) || 0).toNumber();\n    const end = totalListings.toNumber();\n    if (end === 0) {\n      throw new Error(\"No listings exist on the contract.\");\n    }\n    let rawListings = [];\n    const batches = await getAllInBatches(start, end, (startId, endId) => this.contractWrapper.read(\"getAllListings\", [startId, endId]));\n    rawListings = batches.flat();\n    const filteredListings = await this.applyFilter(rawListings, filter);\n    return await Promise.all(filteredListings.map(listing => this.mapListing(listing)));\n  }\n\n  /**\n   * Get all valid direct listings\n   *\n   * @remarks A valid listing is where the listing is active, and the creator still owns & has approved Marketplace to transfer the listed NFTs.\n   *\n   * @example\n   * ```javascript\n   * const listings = await contract.directListings.getAllValid();\n   * ```\n   *\n   * @param filter - optional filter parameters\n   * @returns the Direct listing object array\n   * @twfeature DirectListings\n   */\n  async getAllValid(filter) {\n    const totalListings = await this.getTotalCount();\n    const start = BigNumber.from((filter === null || filter === void 0 ? void 0 : filter.start) || 0).toNumber();\n    const end = totalListings.toNumber();\n    if (end === 0) {\n      throw new Error(\"No listings exist on the contract.\");\n    }\n    let rawListings = [];\n    const batches = await getAllInBatches(start, end, (startId, endId) => this.contractWrapper.read(\"getAllValidListings\", [startId, endId]));\n    rawListings = batches.flat();\n    const filteredListings = await this.applyFilter(rawListings, filter);\n    return await Promise.all(filteredListings.map(listing => this.mapListing(listing)));\n  }\n\n  /**\n   * Get a single direct listing\n   *\n   * @example\n   * ```javascript\n   * const listingId = 0;\n   * const listing = await contract.directListings.getListing(listingId);\n   * ```\n   *\n   * @param listingId - the listing id\n   * @returns the Direct listing object\n   *\n   * @example\n   * ```javascript\n   * const listingId = 0;\n   * const listing = await contract.directListings.getListing(listingId);\n   * ```\n   * @twfeature DirectListings\n   */\n  async getListing(listingId) {\n    const listing = await this.contractWrapper.read(\"getListing\", [listingId]);\n    return await this.mapListing(listing);\n  }\n\n  /**\n   * Check if a buyer is approved for a specific direct listing\n   *\n   * @example\n   * ```javascript\n   * const listingId = 0;\n   * const isBuyerApproved = await contract.directListings.isBuyerApprovedForListing(listingId, \"{{wallet_address}}\");\n   *\n   * @param listingId - the listing id\n   * @param buyer - buyer address\n   * @twfeature DirectListings\n   */\n  async isBuyerApprovedForListing(listingId, buyer) {\n    const listing = await this.validateListing(BigNumber.from(listingId));\n    if (!listing.isReservedListing) {\n      throw new Error(\"Listing \".concat(listingId, \" is not a reserved listing.\"));\n    }\n    return await this.contractWrapper.read(\"isBuyerApprovedForListing\", [listingId, await resolveAddress(buyer)]);\n  }\n\n  /**\n   * Check if a currency is approved for a specific direct listing\n   *\n   * @example\n   * ```javascript\n   * const listingId = 0;\n   * const currencyContractAddress = '0x1234';\n   * const isApproved = await contract.directListings.isCurrencyApprovedForListing(listingId, currencyContractAddress);\n   * ```\n   *\n   * @param listingId - the listing id\n   * @param currency - currency address\n   * @twfeature DirectListings\n   */\n  async isCurrencyApprovedForListing(listingId, currency) {\n    await this.validateListing(BigNumber.from(listingId));\n    return await this.contractWrapper.read(\"isCurrencyApprovedForListing\", [listingId, await resolveAddress(currency)]);\n  }\n\n  /**\n   * Check price per token for an approved currency\n   *\n   * @example\n   * ```javascript\n   * const listingId = 0;\n   * const currencyContractAddress = '0x1234';\n   * const price = await contract.directListings.currencyPriceForListing(listingId, currencyContractAddress);\n   * ```\n   *\n   * @param listingId - the listing id\n   * @param currencyContractAddress - currency contract address\n   * @twfeature DirectListings\n   */\n  async currencyPriceForListing(listingId, currencyContractAddress) {\n    const listing = await this.validateListing(BigNumber.from(listingId));\n    const resolvedCurrencyAddress = await resolveAddress(currencyContractAddress);\n    if (resolvedCurrencyAddress === listing.currencyContractAddress) {\n      return listing.pricePerToken;\n    }\n    const isApprovedCurrency = await this.isCurrencyApprovedForListing(listingId, resolvedCurrencyAddress);\n    if (!isApprovedCurrency) {\n      throw new Error(\"Currency \".concat(resolvedCurrencyAddress, \" is not approved for Listing \").concat(listingId, \".\"));\n    }\n    return await this.contractWrapper.read(\"currencyPriceForListing\", [listingId, resolvedCurrencyAddress]);\n  }\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n  /**\n   * Throws error if listing could not be found\n   *\n   * @param listingId - Listing to check for\n   */\n  async validateListing(listingId) {\n    try {\n      return await this.getListing(listingId);\n    } catch (err) {\n      console.error(\"Error getting the listing with id \".concat(listingId));\n      throw err;\n    }\n  }\n\n  /**\n   * Helper method maps the auction listing to the direct listing interface.\n   *\n   * @internal\n   * @param listing - The listing to map, as returned from the contract.\n   * @returns - The mapped interface.\n   */\n  async mapListing(listing) {\n    let status = Status.UNSET;\n    const block = await this.contractWrapper.getProvider().getBlock(\"latest\");\n    const blockTime = block.timestamp;\n    switch (listing.status) {\n      case 1:\n        status = BigNumber.from(listing.startTimestamp).gt(blockTime) ? Status.Created : BigNumber.from(listing.endTimestamp).lt(blockTime) ? Status.Expired : Status.Active;\n        break;\n      case 2:\n        status = Status.Completed;\n        break;\n      case 3:\n        status = Status.Cancelled;\n        break;\n    }\n    return {\n      assetContractAddress: listing.assetContract,\n      currencyContractAddress: listing.currency,\n      pricePerToken: listing.pricePerToken.toString(),\n      currencyValuePerToken: await fetchCurrencyValue(this.contractWrapper.getProvider(), listing.currency, listing.pricePerToken),\n      id: listing.listingId.toString(),\n      tokenId: listing.tokenId.toString(),\n      quantity: listing.quantity.toString(),\n      startTimeInSeconds: BigNumber.from(listing.startTimestamp).toNumber(),\n      asset: await fetchTokenMetadataForContract(listing.assetContract, this.contractWrapper.getProvider(), listing.tokenId, this.storage),\n      endTimeInSeconds: BigNumber.from(listing.endTimestamp).toNumber(),\n      creatorAddress: listing.listingCreator,\n      isReservedListing: listing.reserved,\n      status: status\n    };\n  }\n\n  /**\n   * Use this method to check if a direct listing is still valid.\n   *\n   * Ways a direct listing can become invalid:\n   * 1. The asset holder transferred the asset to another wallet\n   * 2. The asset holder burned the asset\n   * 3. The asset holder removed the approval on the marketplace\n   *\n   * @internal\n   * @param listing - The listing to check.\n   * @returns - True if the listing is valid, false otherwise.\n   */\n  async isStillValidListing(listing, quantity) {\n    const approved = await isTokenApprovedForTransfer(this.contractWrapper.getProvider(), this.getAddress(), listing.assetContractAddress, listing.tokenId, listing.creatorAddress);\n    if (!approved) {\n      return {\n        valid: false,\n        error: \"Token '\".concat(listing.tokenId, \"' from contract '\").concat(listing.assetContractAddress, \"' is not approved for transfer\")\n      };\n    }\n    const provider = this.contractWrapper.getProvider();\n    const erc165 = new Contract(listing.assetContractAddress, ERC165Abi, provider);\n    const isERC721 = await erc165.supportsInterface(InterfaceId_IERC721);\n    const isERC1155 = await erc165.supportsInterface(InterfaceId_IERC1155);\n    if (isERC721) {\n      var _owner;\n      const asset = new Contract(listing.assetContractAddress, Erc721Abi, provider);\n\n      // Handle reverts in case of non-existent tokens\n      let owner;\n      try {\n        owner = await asset.ownerOf(listing.tokenId);\n      } catch (e) {}\n      const valid = ((_owner = owner) === null || _owner === void 0 ? void 0 : _owner.toLowerCase()) === listing.creatorAddress.toLowerCase();\n      return {\n        valid,\n        error: valid ? undefined : \"Seller is not the owner of Token '\".concat(listing.tokenId, \"' from contract '\").concat(listing.assetContractAddress, \" anymore'\")\n      };\n    } else if (isERC1155) {\n      const asset = new Contract(listing.assetContractAddress, Erc1155Abi, provider);\n      const balance = await asset.balanceOf(listing.creatorAddress, listing.tokenId);\n      const valid = balance.gte(quantity || listing.quantity);\n      return {\n        valid,\n        error: valid ? undefined : \"Seller does not have enough balance of Token '\".concat(listing.tokenId, \"' from contract '\").concat(listing.assetContractAddress, \" to fulfill the listing\")\n      };\n    } else {\n      return {\n        valid: false,\n        error: \"Contract does not implement ERC 1155 or ERC 721.\"\n      };\n    }\n  }\n  async applyFilter(listings, filter) {\n    let rawListings = [...listings];\n    if (filter) {\n      if (filter.seller) {\n        const resolvedSeller = await resolveAddress(filter.seller);\n        rawListings = rawListings.filter(seller => seller.listingCreator.toString().toLowerCase() === (resolvedSeller === null || resolvedSeller === void 0 ? void 0 : resolvedSeller.toString().toLowerCase()));\n      }\n      if (filter.tokenContract) {\n        const resolvedToken = await resolveAddress(filter.tokenContract);\n        rawListings = rawListings.filter(tokenContract => tokenContract.assetContract.toString().toLowerCase() === (resolvedToken === null || resolvedToken === void 0 ? void 0 : resolvedToken.toString().toLowerCase()));\n      }\n      if (filter.tokenId !== undefined) {\n        rawListings = rawListings.filter(tokenContract => {\n          var _filter$tokenId;\n          return tokenContract.tokenId.toString() === (filter === null || filter === void 0 || (_filter$tokenId = filter.tokenId) === null || _filter$tokenId === void 0 ? void 0 : _filter$tokenId.toString());\n        });\n      }\n    }\n    return filter !== null && filter !== void 0 && filter.count && filter.count < rawListings.length ? rawListings.slice(0, filter.count) : rawListings;\n  }\n}\n\n/**\n * @internal\n */\nconst EnglishAuctionInputParamsSchema = /* @__PURE__ */(() => z.object({\n  /**\n   * The address of the asset being auctioned.\n   */\n  assetContractAddress: AddressOrEnsSchema,\n  /**\n   * The ID of the token to auction.\n   */\n  tokenId: BigNumberishSchema,\n  /**\n   * The quantity of tokens to include in the listing.\n   *\n   * For ERC721s, this value should always be 1 (and will be forced internally regardless of what is passed here).\n   */\n  quantity: BigNumberishSchema.default(1),\n  /**\n   * The address of the currency to accept for the listing.\n   */\n  currencyContractAddress: AddressOrEnsSchema.default(NATIVE_TOKEN_ADDRESS),\n  /**\n   * The minimum price that a bid must be in order to be accepted.\n   */\n  minimumBidAmount: AmountSchema,\n  /**\n   * The buyout price of the auction.\n   */\n  buyoutBidAmount: AmountSchema,\n  /**\n   * This is a buffer e.g. x seconds.\n   *\n   * If a new winning bid is made less than x seconds before expirationTimestamp, the\n   * expirationTimestamp is increased by x seconds.\n   */\n  timeBufferInSeconds: BigNumberishSchema.default(900),\n  // 15 minutes by default\n\n  /**\n   * This is a buffer in basis points e.g. x%.\n   *\n   * To be considered as a new winning bid, a bid must be at least x% greater than\n   * the current winning bid.\n   */\n  bidBufferBps: BigNumberishSchema.default(500),\n  // 5% by default\n\n  /**\n   * The start time of the auction.\n   */\n  startTimestamp: RawDateSchema.default(new Date()),\n  /**\n   * The end time of the auction.\n   */\n  endTimestamp: EndDateSchema\n}))();\n\n/**\n * @public\n */\n\n/**\n * Handles auctions\n * @public\n */\nclass MarketplaceV3EnglishAuctions {\n  // utilities\n\n  constructor(contractWrapper, storage) {\n    _defineProperty(this, \"featureName\", FEATURE_ENGLISH_AUCTIONS.name);\n    /** ******************************\n     * WRITE FUNCTIONS\n     *******************************/\n    /**\n     * Create an english auction\n     *\n     * @remarks Create a new auction where people can bid on an asset.\n     *\n     * @example\n     * ```javascript\n     * // Data of the auction you want to create\n     * const auction = {\n     *   // address of the contract of the asset you want to auction\n     *   assetContractAddress: \"0x...\",\n     *   // token ID of the asset you want to auction\n     *   tokenId: \"0\",\n     *   // how many of the asset you want to auction\n     *   quantity: 1,\n     *   // address of the currency contract that will be used to pay for the auctioned tokens\n     *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n     *   // the minimum bid that will be accepted for the token\n     *   minimumBidAmount: \"1.5\",\n     *   // how much people would have to bid to instantly buy the asset\n     *   buyoutBidAmount: \"10\",\n     *   // If a bid is made less than these many seconds before expiration, the expiration time is increased by this.\n     *   timeBufferInSeconds: \"900\", // 15 minutes by default\n     *   // A bid must be at least this much bps greater than the current winning bid\n     *   bidBufferBps: \"500\", // 5% by default\n     *   // when should the auction open up for bidding\n     *   startTimestamp: new Date(Date.now()),\n     *   // end time of auction\n     *   endTimestamp: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000),\n     * }\n     *\n     * const tx = await contract.englishAuctions.createAuction(auction);\n     * const receipt = tx.receipt; // the transaction receipt\n     * const id = tx.id; // the id of the newly created auction\n     * ```\n     * @param auction - the auction data\n     * @returns the transaction hash and the auction id\n     * @twfeature EnglishAuctions\n     */\n    _defineProperty(this, \"createAuction\", /* @__PURE__ */buildTransactionFunction(async auction => {\n      const parsedAuction = EnglishAuctionInputParamsSchema.parse(auction);\n      await handleTokenApproval(this.contractWrapper, this.getAddress(), parsedAuction.assetContractAddress, parsedAuction.tokenId, await this.contractWrapper.getSignerAddress());\n      const normalizedBuyoutAmount = await normalizePriceValue(this.contractWrapper.getProvider(), parsedAuction.buyoutBidAmount, parsedAuction.currencyContractAddress);\n      const normalizedMinBidAmount = await normalizePriceValue(this.contractWrapper.getProvider(), parsedAuction.minimumBidAmount, parsedAuction.currencyContractAddress);\n      const block = await this.contractWrapper.getProvider().getBlock(\"latest\");\n      const blockTime = block.timestamp;\n      if (parsedAuction.startTimestamp.lt(blockTime)) {\n        parsedAuction.startTimestamp = BigNumber.from(blockTime);\n      }\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"createAuction\",\n        args: [{\n          assetContract: parsedAuction.assetContractAddress,\n          tokenId: parsedAuction.tokenId,\n          quantity: parsedAuction.quantity,\n          currency: cleanCurrencyAddress(parsedAuction.currencyContractAddress),\n          minimumBidAmount: normalizedMinBidAmount,\n          buyoutBidAmount: normalizedBuyoutAmount,\n          timeBufferInSeconds: parsedAuction.timeBufferInSeconds,\n          bidBufferBps: parsedAuction.bidBufferBps,\n          startTimestamp: parsedAuction.startTimestamp,\n          endTimestamp: parsedAuction.endTimestamp\n        }],\n        parse: receipt => {\n          const event = this.contractWrapper.parseLogs(\"NewAuction\", receipt.logs)[0];\n          return {\n            id: event.args.auctionId,\n            receipt\n          };\n        }\n      });\n    }));\n    /**\n     * Create a batch of new auctions\n     *\n     * @remarks Create a batch of new auctions on the marketplace\n     *\n     * @example\n     * ```javascript\n     * const auctions = [...];\n     * const tx = await contract.englishAuctions.createAuctionsBatch(auctions);\n     * ```\n     */\n    _defineProperty(this, \"createAuctionsBatch\", /* @__PURE__ */buildTransactionFunction(async listings => {\n      const data = await Promise.all(listings.map(async listing => {\n        const tx = await this.createAuction.prepare(listing);\n        return tx.encode();\n      }));\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"multicall\",\n        args: [data],\n        parse: receipt => {\n          const events = this.contractWrapper.parseLogs(\"NewAuction\", receipt === null || receipt === void 0 ? void 0 : receipt.logs);\n          return events.map(event => {\n            return {\n              id: event.args.auctionId,\n              receipt\n            };\n          });\n        }\n      });\n    }));\n    /**\n     * Buyout an english auction\n     *\n     * @remarks Buy a specific auction from the marketplace.\n     *\n     * @example\n     * ```javascript\n     * // The auction ID you want to buy\n     * const auctionId = 0;\n     *\n     * await contract.englishAuctions.buyoutAuction(auctionId);\n     * ```\n     * @param auctionId - the auction id\n     * @returns the transaction result\n     * @twfeature EnglishAuctions\n     */\n    _defineProperty(this, \"buyoutAuction\", /* @__PURE__ */buildTransactionFunction(async auctionId => {\n      const auction = await this.validateAuction(BigNumber.from(auctionId));\n      const currencyMetadata = await fetchCurrencyMetadata(this.contractWrapper.getProvider(), auction.currencyContractAddress);\n      return this.makeBid.prepare(auctionId, utils.formatUnits(auction.buyoutBidAmount, currencyMetadata.decimals));\n    }));\n    /**\n     * Bid on an english auction\n     *\n     * @remarks Make a bid on an auction\n     *\n     * @example\n     * ```javascript\n     * // The auction ID of the asset you want to bid on\n     * const auctionId = 0;\n     * // The total amount you are willing to bid for auctioned tokens\n     * const bidAmount = 1;\n     *\n     * await contract.englishAuctions.makeBid(auctionId, bidAmount);\n     * ```\n     * @param auctionId - the auction id\n     * @param bidAmount - the amount you are willing to bid\n     * @returns the transaction result\n     * @twfeature EnglishAuctions\n     */\n    _defineProperty(this, \"makeBid\", /* @__PURE__ */buildTransactionFunction(async (auctionId, bidAmount) => {\n      const auction = await this.validateAuction(BigNumber.from(auctionId));\n      const normalizedBidAmount = await normalizePriceValue(this.contractWrapper.getProvider(), bidAmount, auction.currencyContractAddress);\n      if (normalizedBidAmount.eq(BigNumber.from(0))) {\n        throw new Error(\"Cannot make a bid with 0 value\");\n      }\n      if (BigNumber.from(auction.buyoutBidAmount).gt(0) && normalizedBidAmount.gt(auction.buyoutBidAmount)) {\n        throw new Error(\"Bid amount must be less than or equal to buyoutBidAmount\");\n      }\n      const winningBid = await this.getWinningBid(auctionId);\n      if (winningBid) {\n        const isWinnner = await this.isWinningBid(auctionId, normalizedBidAmount);\n        invariant(isWinnner, \"Bid price is too low based on the current winning bid and the bid buffer\");\n      } else {\n        const tokenPrice = normalizedBidAmount;\n        const minimumBidAmount = BigNumber.from(auction.minimumBidAmount);\n        invariant(tokenPrice.gte(minimumBidAmount), \"Bid price is too low based on minimum bid amount\");\n      }\n      const overrides = (await this.contractWrapper.getCallOverrides()) || {};\n      await setErc20Allowance(this.contractWrapper, normalizedBidAmount, auction.currencyContractAddress, overrides);\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"bidInAuction\",\n        args: [auctionId, normalizedBidAmount],\n        overrides\n      });\n    }));\n    /**\n     * Cancel an english auction\n     *\n     * @remarks Cancel an auction on the marketplace\n     *\n     * @example\n     * ```javascript\n     * // The ID of the auction you want to cancel\n     * const auctionId = \"0\";\n     *\n     * await contract.englishAuctions.cancelAuction(auctionId);\n     * ```\n     * @param auctionId - the auction id\n     * @returns the transaction result\n     * @twfeature EnglishAuctions\n     */\n    _defineProperty(this, \"cancelAuction\", /* @__PURE__ */buildTransactionFunction(async auctionId => {\n      const winningBid = await this.getWinningBid(auctionId);\n      if (winningBid) {\n        throw new Error(\"Bids already made.\");\n      }\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"cancelAuction\",\n        args: [auctionId]\n      });\n    }));\n    /**\n     * Close the english auction for the bidder\n     *\n     * @remarks Closes the Auction and executes the sale for the buyer.\n     *\n     * @example\n     * ```javascript\n     * // The ID of the auction you want to close\n     * const auction = \"0\";\n     * await contract.englishAuctions.closeAuctionForBidder(auctionId);\n     * ```\n     *\n     * @param auctionId - the auction id to close\n     * @param closeFor - optionally pass the winning bid offeror address to close the auction on their behalf\n     * @returns the transaction result\n     * @twfeature EnglishAuctions\n     */\n    _defineProperty(this, \"closeAuctionForBidder\", /* @__PURE__ */buildTransactionFunction(async (auctionId, closeFor) => {\n      if (!closeFor) {\n        closeFor = await this.contractWrapper.getSignerAddress();\n      }\n      const auction = await this.validateAuction(BigNumber.from(auctionId));\n      try {\n        return Transaction.fromContractWrapper({\n          contractWrapper: this.contractWrapper,\n          method: \"collectAuctionTokens\",\n          args: [BigNumber.from(auctionId)]\n        });\n      } catch (err) {\n        if (err.message.includes(\"Marketplace: auction still active.\")) {\n          throw new AuctionHasNotEndedError(auctionId.toString(), auction.endTimeInSeconds.toString());\n        } else {\n          throw err;\n        }\n      }\n    }));\n    /**\n     * Close the english auction for the seller\n     *\n     * @remarks Closes the Auction and executes the sale for the seller.\n     *\n     * @example\n     * ```javascript\n     * // The ID of the auction you want to close\n     * const auctionId = \"0\";\n     * await contract.englishAuctions.closeAuctionForSeller(auctionId);\n     * ```\n     *\n     * @param auctionId - the auction id to close\n     * @returns the transaction result\n     * @twfeature EnglishAuctions\n     */\n    _defineProperty(this, \"closeAuctionForSeller\", /* @__PURE__ */buildTransactionFunction(async auctionId => {\n      const auction = await this.validateAuction(BigNumber.from(auctionId));\n      try {\n        return Transaction.fromContractWrapper({\n          contractWrapper: this.contractWrapper,\n          method: \"collectAuctionPayout\",\n          args: [BigNumber.from(auctionId)]\n        });\n      } catch (err) {\n        if (err.message.includes(\"Marketplace: auction still active.\")) {\n          throw new AuctionHasNotEndedError(auctionId.toString(), auction.endTimeInSeconds.toString());\n        } else {\n          throw err;\n        }\n      }\n    }));\n    /**\n     * Close the english auction for both the seller and the bidder\n     *\n     * @remarks Closes the Auction and executes the sale for both parties.\n     *\n     * @example\n     * ```javascript\n     * // The ID of the auction you want to close\n     * const auction = \"0\";\n     * await contract.englishAuctions.executeSale(auctionId);\n     * ```\n     *\n     * @param auctionId - the auction to close\n     * @returns the transaction result\n     * @twfeature EnglishAuctions\n     */\n    _defineProperty(this, \"executeSale\", /* @__PURE__ */buildTransactionFunction(async auctionId => {\n      const auction = await this.validateAuction(BigNumber.from(auctionId));\n      try {\n        const winningBid = await this.getWinningBid(auctionId);\n        invariant(winningBid, \"No winning bid found\");\n        const closeForSeller = this.encoder.encode(\"collectAuctionPayout\", [auctionId]);\n        const closeForBuyer = this.encoder.encode(\"collectAuctionTokens\", [auctionId]);\n        return Transaction.fromContractWrapper({\n          contractWrapper: this.contractWrapper,\n          method: \"multicall\",\n          args: [[closeForSeller, closeForBuyer]]\n        });\n      } catch (err) {\n        if (err.message.includes(\"Marketplace: auction still active.\")) {\n          throw new AuctionHasNotEndedError(auctionId.toString(), auction.endTimeInSeconds.toString());\n        } else {\n          throw err;\n        }\n      }\n    }));\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.events = new ContractEvents(this.contractWrapper);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get the total number of english auctions\n   *\n   * @returns Returns the total number of auctions created.\n   * @public\n   *\n   * @example\n   * ```javascript\n   * const totalAuctions = await contract.englishAuctions.getTotalCount();\n   * ```\n   * @twfeature EnglishAuctions\n   */\n  async getTotalCount() {\n    return await this.contractWrapper.read(\"totalAuctions\", []);\n  }\n\n  /**\n   * Get all english auctions\n   *\n   * @example\n   * ```javascript\n   * const auctions = await contract.englishAuctions.getAll();\n   * ```\n   *\n   * @param filter - optional filter parameters\n   * @returns the Auction object array\n   * @twfeature EnglishAuctions\n   */\n  async getAll(filter) {\n    const totalAuctions = await this.getTotalCount();\n    const start = BigNumber.from((filter === null || filter === void 0 ? void 0 : filter.start) || 0).toNumber();\n    const end = totalAuctions.toNumber();\n    if (end === 0) {\n      throw new Error(\"No auctions exist on the contract.\");\n    }\n    let rawAuctions = [];\n    const batches = await getAllInBatches(start, end, (startId, endId) => this.contractWrapper.read(\"getAllAuctions\", [startId, endId]));\n    rawAuctions = batches.flat();\n    const filteredAuctions = await this.applyFilter(rawAuctions, filter);\n    return await Promise.all(filteredAuctions.map(auction => this.mapAuction(auction)));\n  }\n\n  /**\n   * Get all valid english auctions\n   *\n   * @example\n   * ```javascript\n   * const auctions = await contract.englishAuctions.getAllValid();\n   * ```\n   *\n   * @param filter - optional filter parameters\n   * @returns the Auction object array\n   * @twfeature EnglishAuctions\n   */\n  async getAllValid(filter) {\n    const totalAuctions = await this.getTotalCount();\n    const start = BigNumber.from((filter === null || filter === void 0 ? void 0 : filter.start) || 0).toNumber();\n    const end = totalAuctions.toNumber();\n    if (end === 0) {\n      throw new Error(\"No auctions exist on the contract.\");\n    }\n    let rawAuctions = [];\n    const batches = await getAllInBatches(start, end, (startId, endId) => this.contractWrapper.read(\"getAllValidAuctions\", [startId, endId]));\n    rawAuctions = batches.flat();\n    const filteredAuctions = await this.applyFilter(rawAuctions, filter);\n    return await Promise.all(filteredAuctions.map(auction => this.mapAuction(auction)));\n  }\n\n  /**\n   * Get a single english auction\n   *\n   * @example\n   * ```javascript\n   * const auctionId = 0;\n   * const auction = await contract.englishAuctions.getAuction(auctionId);\n   * ```\n   *\n   * @param auctionId - the auction Id\n   * @returns the Auction object\n   * @twfeature EnglishAuctions\n   */\n  async getAuction(auctionId) {\n    const auction = await this.contractWrapper.read(\"getAuction\", [auctionId]);\n    return await this.mapAuction(auction);\n  }\n\n  /**\n   * Get winning bid of an english auction\n   *\n   * @remarks Get the current highest bid of an active auction.\n   *\n   * @example\n   * ```javascript\n   * // The ID of the auction\n   * const auctionId = 0;\n   * const winningBid = await contract.englishAuctions.getWinningBid(auctionId);\n   * ```\n   * @param auctionId - the auction Id\n   * @twfeature EnglishAuctions\n   */\n  async getWinningBid(auctionId) {\n    await this.validateAuction(BigNumber.from(auctionId));\n    const bid = await this.contractWrapper.read(\"getWinningBid\", [auctionId]);\n    if (bid._bidder === constants.AddressZero) {\n      return undefined;\n    }\n    return await this.mapBid(auctionId.toString(), bid._bidder, bid._currency, bid._bidAmount.toString());\n  }\n\n  /**\n   * Check if a bid is or will be a winning bid\n   *\n   * @example\n   * ```javascript\n   * const auctionId = 0;\n   * const bidAmount = 100;\n   * const isWinningBid = await contract.englishAuctions.isWinningBid(auctionId, bidAmount);\n   * ```\n   *\n   * @param auctionId - Auction Id\n   * @param bidAmount - Amount to bid\n   * @returns true if the bid is or will be a winning bid\n   * @twfeature EnglishAuctions\n   */\n  async isWinningBid(auctionId, bidAmount) {\n    return await this.contractWrapper.read(\"isNewWinningBid\", [auctionId, bidAmount]);\n  }\n\n  /**\n   * Get the winner for a specific english auction\n   *\n   * @remarks Get the winner of the auction after an auction ends.\n   *\n   * @example\n   * ```javascript\n   * // The auction ID of a closed english auction\n   * const auctionId = 0;\n   * const auctionWinner = await contract.englishAuctions.getWinner(auctionId);\n   * ```\n   * @param auctionId - the auction Id\n   * @returns the address of the auction winner\n   * @twfeature EnglishAuctions\n   */\n  async getWinner(auctionId) {\n    const auction = await this.validateAuction(BigNumber.from(auctionId));\n    const bid = await this.contractWrapper.read(\"getWinningBid\", [auctionId]);\n    const now = BigNumber.from(Math.floor(Date.now() / 1000));\n    const endTime = BigNumber.from(auction.endTimeInSeconds);\n\n    // if we have a winner in the map and the current time is past the endtime of the auction return the address of the winner\n    if (now.gt(endTime) && bid._bidder !== constants.AddressZero) {\n      return bid._bidder;\n    }\n    // otherwise fall back to query filter things\n\n    // TODO this should be via indexer or direct contract call\n    const contractEvent = new ContractEvents(this.contractWrapper);\n    const closedAuctions = await contractEvent.getEvents(\"AuctionClosed\");\n    const closed = closedAuctions.find(a => a.data.auctionId.eq(BigNumber.from(auctionId)));\n    if (!closed) {\n      throw new Error(\"Could not find auction with ID \".concat(auctionId, \" in closed auctions\"));\n    }\n    return closed.data.winningBidder;\n  }\n  /**\n   * Get the buffer for an english auction\n   *\n   * @example\n   * ```javascript\n   * // The ID of the auction you want to get the buffer for\n   * const auctionId = \"0\";\n   * const buffer = await contract.englishAuctions.getBidBufferBps(auctionId);\n   * ```\n   *\n   * @param auctionId - id of the auction\n   * @returns the buffer in basis points\n   * @twfeature EnglishAuctions\n   */\n  async getBidBufferBps(auctionId) {\n    return (await this.getAuction(auctionId)).bidBufferBps;\n  }\n\n  /**\n   * Get the minimum next bid for an english auction\n   *\n   * @example\n   * ```javascript\n   * // The ID of the auction you want to get the minimum next bid for\n   * const auctionId = \"0\";\n   * const minimumNextBid = await contract.englishAuctions.getMinimumNextBid(auctionId);\n   * ```\n   *\n   * @returns the minimum bid a user can place to outbid the previous highest bid\n   * @param auctionId - id of the auction\n   * @twfeature EnglishAuctions\n   */\n  async getMinimumNextBid(auctionId) {\n    // we can fetch all of these at the same time using promise.all\n    const [currentBidBufferBps, winningBid, auction] = await Promise.all([this.getBidBufferBps(auctionId), this.getWinningBid(auctionId), this.validateAuction(BigNumber.from(auctionId))]);\n    const currentBidOrReservePrice = winningBid ?\n    // if there is a winning bid use the value of it\n    BigNumber.from(winningBid.bidAmount) :\n    // if there is no winning bid use the reserve price\n    BigNumber.from(auction.minimumBidAmount);\n    const minimumNextBid = currentBidOrReservePrice.add(\n    // the addition of the current bid and the buffer\n    // (have to divide by 10000 to get the fraction of the buffer (since it's in basis points))\n    currentBidOrReservePrice.mul(currentBidBufferBps).div(10000));\n\n    // it's more useful to return a currency value here\n    return fetchCurrencyValue(this.contractWrapper.getProvider(), auction.currencyContractAddress, minimumNextBid);\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  /**\n   * Throws error if auction could not be found\n   *\n   * @param auctionId - Auction to check for\n   */\n  async validateAuction(auctionId) {\n    try {\n      return await this.getAuction(auctionId);\n    } catch (err) {\n      console.error(\"Error getting the auction with id \".concat(auctionId));\n      throw err;\n    }\n  }\n\n  /**\n   * Helper method maps the auction to the auction interface.\n   *\n   * @internal\n   * @param auction - The auction to map, as returned from the contract.\n   * @returns - The mapped interface.\n   */\n  async mapAuction(auction) {\n    let status = Status.UNSET;\n    const block = await this.contractWrapper.getProvider().getBlock(\"latest\");\n    const blockTime = block.timestamp;\n    switch (auction.status) {\n      case 1:\n        status = BigNumber.from(auction.startTimestamp).gt(blockTime) ? Status.Created : BigNumber.from(auction.endTimestamp).lt(blockTime) ? Status.Expired : Status.Active;\n        break;\n      case 2:\n        status = Status.Completed;\n        break;\n      case 3:\n        status = Status.Cancelled;\n        break;\n    }\n    return {\n      id: auction.auctionId.toString(),\n      creatorAddress: auction.auctionCreator,\n      assetContractAddress: auction.assetContract,\n      tokenId: auction.tokenId.toString(),\n      quantity: auction.quantity.toString(),\n      currencyContractAddress: auction.currency,\n      minimumBidAmount: auction.minimumBidAmount.toString(),\n      minimumBidCurrencyValue: await fetchCurrencyValue(this.contractWrapper.getProvider(), auction.currency, auction.minimumBidAmount),\n      buyoutBidAmount: auction.buyoutBidAmount.toString(),\n      buyoutCurrencyValue: await fetchCurrencyValue(this.contractWrapper.getProvider(), auction.currency, auction.buyoutBidAmount),\n      timeBufferInSeconds: BigNumber.from(auction.timeBufferInSeconds).toNumber(),\n      bidBufferBps: BigNumber.from(auction.bidBufferBps).toNumber(),\n      startTimeInSeconds: BigNumber.from(auction.startTimestamp).toNumber(),\n      endTimeInSeconds: BigNumber.from(auction.endTimestamp).toNumber(),\n      asset: await fetchTokenMetadataForContract(auction.assetContract, this.contractWrapper.getProvider(), auction.tokenId, this.storage),\n      status: status\n    };\n  }\n\n  /**\n   * Maps an auction-bid to the strict interface\n   *\n   * @internal\n   * @param bid\n   * @returns - A `Bid` object\n   */\n  async mapBid(auctionId, bidderAddress, currencyContractAddress, bidAmount) {\n    const resolvedBidderAddress = await resolveAddress(bidderAddress);\n    const resolvedCurrencyAddress = await resolveAddress(currencyContractAddress);\n    return {\n      auctionId,\n      bidderAddress: resolvedBidderAddress,\n      currencyContractAddress: resolvedCurrencyAddress,\n      bidAmount,\n      bidAmountCurrencyValue: await fetchCurrencyValue(this.contractWrapper.getProvider(), resolvedCurrencyAddress, bidAmount)\n    };\n  }\n  async applyFilter(auctions, filter) {\n    let rawAuctions = [...auctions];\n    if (filter) {\n      if (filter.seller) {\n        const resolvedSeller = await resolveAddress(filter.seller);\n        rawAuctions = rawAuctions.filter(seller => seller.auctionCreator.toString().toLowerCase() === (resolvedSeller === null || resolvedSeller === void 0 ? void 0 : resolvedSeller.toString().toLowerCase()));\n      }\n      if (filter.tokenContract) {\n        const resolvedToken = await resolveAddress(filter.tokenContract);\n        rawAuctions = rawAuctions.filter(tokenContract => tokenContract.assetContract.toString().toLowerCase() === (resolvedToken === null || resolvedToken === void 0 ? void 0 : resolvedToken.toString().toLowerCase()));\n      }\n      if (filter.tokenId !== undefined) {\n        rawAuctions = rawAuctions.filter(tokenContract => {\n          var _filter$tokenId2;\n          return tokenContract.tokenId.toString() === (filter === null || filter === void 0 || (_filter$tokenId2 = filter.tokenId) === null || _filter$tokenId2 === void 0 ? void 0 : _filter$tokenId2.toString());\n        });\n      }\n    }\n    return filter !== null && filter !== void 0 && filter.count && filter.count < rawAuctions.length ? rawAuctions.slice(0, filter.count) : rawAuctions;\n  }\n}\n\n/**\n * @internal\n */\nconst OfferInputParamsSchema = /* @__PURE__ */(() => z.object({\n  /**\n   * The address of the asset being sought.\n   */\n  assetContractAddress: AddressOrEnsSchema,\n  /**\n   * The ID of the token.\n   */\n  tokenId: BigNumberishSchema,\n  /**\n   * The quantity of tokens to buy.\n   *\n   * For ERC721s, this value should always be 1 (and will be forced internally regardless of what is passed here).\n   */\n  quantity: BigNumberishSchema.default(1),\n  /**\n   * The address of the currency offered for the NFTs.\n   */\n  currencyContractAddress: AddressOrEnsSchema.default(NATIVE_TOKEN_ADDRESS),\n  /**\n   * The total offer amount for the NFTs.\n   */\n  totalPrice: AmountSchema,\n  /**\n   * The end time of the offer.\n   */\n  endTimestamp: EndDateSchema\n}))();\n\n/**\n * @public\n */\n\n/**\n * Handles marketplace offers\n * @public\n */\nclass MarketplaceV3Offers {\n  // utilities\n\n  constructor(contractWrapper, storage) {\n    _defineProperty(this, \"featureName\", FEATURE_OFFERS.name);\n    /** ******************************\n     * WRITE FUNCTIONS\n     *******************************/\n    /**\n     * Make an offer\n     *\n     * @remarks Make an offer on the marketplace for an asset.\n     *\n     * @example\n     * ```javascript\n     * // Data of the offer you want to make\n     * const offer = {\n     *   // address of the contract the asset you want to make an offer for\n     *   assetContractAddress: \"0x...\",\n     *   // token ID of the asset you want to buy\n     *   tokenId: \"0\",\n     *   // how many of the asset you want to buy\n     *   quantity: 1,\n     *   // address of the currency contract that you offer to pay in\n     *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n     *   // Total price you offer to pay for the mentioned token(s)\n     *   totalPrice: \"1.5\",\n     *   // Offer valid until\n     *   endTimestamp: new Date(),\n     * }\n     *\n     * const tx = await contract.offers.makeOffer(offer);\n     * const receipt = tx.receipt; // the transaction receipt\n     * const id = tx.id; // the id of the newly created offer\n     * ```\n     * @param offer - the offer data\n     * @returns the transaction receipt and the id of the newly created offer\n     * @twfeature Offers\n     */\n    _defineProperty(this, \"makeOffer\", /* @__PURE__ */buildTransactionFunction(async offer => {\n      const parsedOffer = await OfferInputParamsSchema.parseAsync(offer);\n      const chainId = await this.contractWrapper.getChainID();\n      const currency = isNativeToken(parsedOffer.currencyContractAddress) ? NATIVE_TOKENS[chainId].wrapped.address : parsedOffer.currencyContractAddress;\n      const normalizedTotalPrice = await normalizePriceValue(this.contractWrapper.getProvider(), parsedOffer.totalPrice, currency);\n      const overrides = await this.contractWrapper.getCallOverrides();\n      await setErc20Allowance(this.contractWrapper, normalizedTotalPrice, currency, overrides);\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"makeOffer\",\n        args: [{\n          assetContract: parsedOffer.assetContractAddress,\n          tokenId: parsedOffer.tokenId,\n          quantity: parsedOffer.quantity,\n          currency: currency,\n          totalPrice: normalizedTotalPrice,\n          expirationTimestamp: parsedOffer.endTimestamp\n        }],\n        parse: receipt => {\n          const event = this.contractWrapper.parseLogs(\"NewOffer\", receipt === null || receipt === void 0 ? void 0 : receipt.logs);\n          return {\n            id: event[0].args.offerId,\n            receipt\n          };\n        }\n      });\n    }));\n    /**\n     * Cancel an offer\n     *\n     * @remarks Cancel an offer on the marketplace\n     *\n     * @example\n     * ```javascript\n     * // The ID of the offer you want to cancel\n     * const offerId = \"0\";\n     *\n     * await contract.offers.cancelOffer(offerId);\n     * ```\n     * @param offerId - the offer id\n     * @returns the transaction receipt\n     * @twfeature Offers\n     */\n    _defineProperty(this, \"cancelOffer\", /* @__PURE__ */buildTransactionFunction(async offerId => {\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"cancelOffer\",\n        args: [offerId]\n      });\n    }));\n    /**\n     * Accept an offer\n     *\n     * @example\n     * ```javascript\n     * // The ID of the offer you want to accept\n     * const offerId = 0;\n     *\n     * await contract.offers.acceptOffer(offerId);\n     * ```\n     *\n     * @param offerId - The offer id\n     * @returns the transaction receipt\n     * @twfeature Offers\n     */\n    _defineProperty(this, \"acceptOffer\", /* @__PURE__ */buildTransactionFunction(async offerId => {\n      const offer = await this.validateOffer(BigNumber.from(offerId));\n      const {\n        valid,\n        error\n      } = await this.isStillValidOffer(offer);\n      if (!valid) {\n        throw new Error(\"Offer \".concat(offerId, \" is no longer valid. \").concat(error));\n      }\n      const overrides = (await this.contractWrapper.getCallOverrides()) || {};\n      await handleTokenApproval(this.contractWrapper, this.getAddress(), offer.assetContractAddress, offer.tokenId, await this.contractWrapper.getSignerAddress());\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"acceptOffer\",\n        args: [offerId],\n        overrides\n      });\n    }));\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.events = new ContractEvents(this.contractWrapper);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get the total number of offers\n   *\n   * @returns Returns the total number of offers created.\n   * @public\n   *\n   * @example\n   * ```javascript\n   * const totalOffers = await contract.offers.getTotalCount();\n   * ```\n   * @twfeature Offers\n   */\n  async getTotalCount() {\n    return await this.contractWrapper.read(\"totalOffers\", []);\n  }\n\n  /**\n   * Get all offers\n   *\n   * @example\n   * ```javascript\n   * const offers = await contract.offers.getAll();\n   * ```\n   *\n   * @param filter - optional filter parameters\n   * @returns the Offer object array\n   * @twfeature Offers\n   */\n  async getAll(filter) {\n    const totalOffers = await this.getTotalCount();\n    const start = BigNumber.from((filter === null || filter === void 0 ? void 0 : filter.start) || 0).toNumber();\n    const end = totalOffers.toNumber();\n    if (end === 0) {\n      throw new Error(\"No offers exist on the contract.\");\n    }\n    let rawOffers = [];\n    const batches = await getAllInBatches(start, end, (startId, endId) => this.contractWrapper.read(\"getAllOffers\", [startId, endId]));\n    rawOffers = batches.flat();\n    const filteredOffers = await this.applyFilter(rawOffers, filter);\n    return await Promise.all(filteredOffers.map(offer => this.mapOffer(offer)));\n  }\n\n  /**\n   * Get all valid offers\n   *\n   * @example\n   * ```javascript\n   * const offers = await contract.offers.getAllValid();\n   * ```\n   *\n   * @param filter - optional filter parameters\n   * @returns the Offer object array\n   * @twfeature Offers\n   */\n  async getAllValid(filter) {\n    const totalOffers = await this.getTotalCount();\n    const start = BigNumber.from((filter === null || filter === void 0 ? void 0 : filter.start) || 0).toNumber();\n    const end = totalOffers.toNumber();\n    if (end === 0) {\n      throw new Error(\"No offers exist on the contract.\");\n    }\n    let rawOffers = [];\n    const batches = await getAllInBatches(start, end, (startId, endId) => this.contractWrapper.read(\"getAllValidOffers\", [startId, endId]));\n    rawOffers = batches.flat();\n    const filteredOffers = await this.applyFilter(rawOffers, filter);\n    return await Promise.all(filteredOffers.map(offer => this.mapOffer(offer)));\n  }\n\n  /**\n   * Get a single offer\n   *\n   * @example\n   * ```javascript\n   * const offerId = 0;\n   * const offer = await contract.offers.getOffer(offerId);\n   * ```\n   *\n   * @param offerId - the listing id\n   * @returns the Direct listing object\n   * @twfeature Offers\n   */\n  async getOffer(offerId) {\n    const offer = await this.contractWrapper.read(\"getOffer\", [offerId]);\n    return await this.mapOffer(offer);\n  }\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n  /**\n   * Throws error if offer could not be found\n   *\n   * @param offerId - offer to check for\n   */\n  async validateOffer(offerId) {\n    try {\n      return await this.getOffer(offerId);\n    } catch (err) {\n      console.error(\"Error getting the offer with id \".concat(offerId));\n      throw err;\n    }\n  }\n\n  /**\n   * Helper method maps the offer to the offer interface.\n   *\n   * @internal\n   * @param offer - The offer to map, as returned from the contract.\n   * @returns - The mapped interface.\n   */\n  async mapOffer(offer) {\n    let status = Status.UNSET;\n    const block = await this.contractWrapper.getProvider().getBlock(\"latest\");\n    const blockTime = block.timestamp;\n    switch (offer.status) {\n      case 1:\n        status = BigNumber.from(offer.expirationTimestamp).lt(blockTime) ? Status.Expired : Status.Active;\n        break;\n      case 2:\n        status = Status.Completed;\n        break;\n      case 3:\n        status = Status.Cancelled;\n        break;\n    }\n    return {\n      id: offer.offerId.toString(),\n      offerorAddress: offer.offeror,\n      assetContractAddress: offer.assetContract,\n      currencyContractAddress: offer.currency,\n      tokenId: offer.tokenId.toString(),\n      quantity: offer.quantity.toString(),\n      totalPrice: offer.totalPrice.toString(),\n      currencyValue: await fetchCurrencyValue(this.contractWrapper.getProvider(), offer.currency, offer.totalPrice),\n      asset: await fetchTokenMetadataForContract(offer.assetContract, this.contractWrapper.getProvider(), offer.tokenId, this.storage),\n      endTimeInSeconds: BigNumber.from(offer.expirationTimestamp).toNumber(),\n      status: status\n    };\n  }\n\n  /**\n   * Use this method to check if an offer is still valid.\n   *\n   * Ways an offer can become invalid:\n   * 1. The offer has expired\n   * 2. The offeror doesn't have enough balance of currency tokens\n   * 3. The offeror removed the approval of currency tokens on the marketplace\n   *\n   * @internal\n   * @param offer - The offer to check.\n   * @returns - True if the offer is valid, false otherwise.\n   */\n  async isStillValidOffer(offer) {\n    const now = BigNumber.from(Math.floor(Date.now() / 1000));\n    if (now.gt(offer.endTimeInSeconds)) {\n      return {\n        valid: false,\n        error: \"Offer with ID \".concat(offer.id, \" has expired\")\n      };\n    }\n    const chainId = await this.contractWrapper.getChainID();\n    const currency = isNativeToken(offer.currencyContractAddress) ? NATIVE_TOKENS[chainId].wrapped.address : offer.currencyContractAddress;\n    const provider = this.contractWrapper.getProvider();\n    const erc20 = new ContractWrapper(provider, currency, ERC20Abi, {}, this.storage);\n    const offerorBalance = await erc20.read(\"balanceOf\", [offer.offerorAddress]);\n    if (offerorBalance.lt(offer.totalPrice)) {\n      return {\n        valid: false,\n        error: \"Offeror \".concat(offer.offerorAddress, \" doesn't have enough balance of token \").concat(currency)\n      };\n    }\n    const offerorAllowance = await erc20.read(\"allowance\", [offer.offerorAddress, this.getAddress()]);\n    if (offerorAllowance.lt(offer.totalPrice)) {\n      return {\n        valid: false,\n        error: \"Offeror \".concat(offer.offerorAddress, \" hasn't approved enough amount of token \").concat(currency)\n      };\n    }\n    return {\n      valid: true,\n      error: \"\"\n    };\n  }\n  async applyFilter(offers, filter) {\n    let rawOffers = [...offers];\n    if (filter) {\n      if (filter.offeror) {\n        const resolvedOfferor = await resolveAddress(filter.offeror);\n        rawOffers = rawOffers.filter(offeror => offeror.offeror.toString().toLowerCase() === (resolvedOfferor === null || resolvedOfferor === void 0 ? void 0 : resolvedOfferor.toString().toLowerCase()));\n      }\n      if (filter.tokenContract) {\n        const resolvedToken = await resolveAddress(filter.tokenContract);\n        rawOffers = rawOffers.filter(tokenContract => tokenContract.assetContract.toString().toLowerCase() === (resolvedToken === null || resolvedToken === void 0 ? void 0 : resolvedToken.toString().toLowerCase()));\n      }\n      if (filter.tokenId !== undefined) {\n        rawOffers = rawOffers.filter(tokenContract => {\n          var _filter$tokenId3;\n          return tokenContract.tokenId.toString() === (filter === null || filter === void 0 || (_filter$tokenId3 = filter.tokenId) === null || _filter$tokenId3 === void 0 ? void 0 : _filter$tokenId3.toString());\n        });\n      }\n    }\n    return filter !== null && filter !== void 0 && filter.count && filter.count < rawOffers.length ? rawOffers.slice(0, filter.count) : rawOffers;\n  }\n}\n\n/**\n * Handle platform fees and recipients\n * @remarks Configure platform fees for a contract, which can be applied on certain paid transactions\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const feeInfo = await contract.platformFees.get();\n * await contract.platformFees.set({\n *   platform_fee_basis_points: 100, // 1% fee\n *   platform_fee_recipient: \"0x...\" // the fee recipient\n * })\n * ```\n * @public\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars -- TO BE REMOVED IN V4\nclass ContractPlatformFee {\n  constructor(contractWrapper) {\n    _defineProperty(this, \"featureName\", FEATURE_PLATFORM_FEE.name);\n    /**\n     * Set the platform fee recipient and basis points\n     *\n     * @example\n     * ```javascript\n     * await contract.platformFees.set({\n     *   platform_fee_basis_points: 100, // 1% fee\n     *   platform_fee_recipient: \"0x...\" // the fee recipient\n     * })\n     * ```\n     *\n     * @param platformFeeInfo - the platform fee information\n     * @twfeature PlatformFee\n     */\n    _defineProperty(this, \"set\", /* @__PURE__ */buildTransactionFunction(async platformFeeInfo => {\n      const parsed = await CommonPlatformFeeSchema.parseAsync(platformFeeInfo);\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"setPlatformFeeInfo\",\n        args: [parsed.platform_fee_recipient, parsed.platform_fee_basis_points]\n      });\n    }));\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Get the platform fee recipient and basis points\n   *\n   * @example\n   * ```javascript\n   * const feeInfo = await contract.platformFees.get();\n   * console.log(feeInfo.platform_fee_recipient);\n   * console.log(feeInfo.platform_fee_basis_points);\n   * ```\n   * @twfeature PlatformFee\n   */\n  async get() {\n    const [platformFeeRecipient, platformFeeBps] = await this.contractWrapper.read(\"getPlatformFeeInfo\", []);\n    return CommonPlatformFeeSchema.parseAsync({\n      platform_fee_recipient: platformFeeRecipient,\n      platform_fee_basis_points: platformFeeBps\n    });\n  }\n}\n\n/**\n * @internal\n * @param abi\n * @param metadata\n */\nfunction extractEventsFromAbi(abi, metadata) {\n  const parsedAbi = AbiSchema.parse(abi || []);\n  const events = parsedAbi.filter(el => el.type === \"event\");\n  const parsed = [];\n  for (const e of events) {\n    const doc = extractCommentFromMetadata(e.name, metadata, \"events\");\n    parsed.push({\n      inputs: e.inputs || [],\n      outputs: e.outputs || [],\n      name: e.name || \"unknown\",\n      comment: doc\n    });\n  }\n  return parsed;\n}\n\n/**\n * Handles publish metadata for a contract\n * @internal\n */ // eslint-disable-next-line @typescript-eslint/no-unused-vars -- TO BE REMOVED IN V4\nclass ContractPublishedMetadata {\n  constructor(contractWrapper, storage) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n  }\n\n  /**\n   * Get the published metadata for this contract\n   * @public\n   */\n  async get() {\n    if (this._cachedMetadata) {\n      return this._cachedMetadata;\n    }\n    this._cachedMetadata = await fetchContractMetadataFromAddress(this.contractWrapper.address, this.contractWrapper.getProvider(), this.storage, this.contractWrapper.options);\n    return this._cachedMetadata;\n  }\n\n  /**\n   * @public\n   */\n  async extractFunctions() {\n    var _publishedMetadata3;\n    let publishedMetadata;\n    try {\n      publishedMetadata = await this.get();\n    } catch (e) {\n      // ignore for built-in contracts\n    }\n    // to construct a contract we already **have** to have the abi on the contract wrapper, so there is no reason to look fetch it again (means this function can become synchronous as well!)\n    return extractFunctionsFromAbi(AbiSchema.parse(this.contractWrapper.abi), (_publishedMetadata3 = publishedMetadata) === null || _publishedMetadata3 === void 0 ? void 0 : _publishedMetadata3.metadata);\n  }\n\n  /**\n   * @public\n   */\n  async extractEvents() {\n    var _publishedMetadata4;\n    let publishedMetadata;\n    try {\n      publishedMetadata = await this.get();\n    } catch (e) {\n      // ignore for built-in contracts\n    }\n    // to construct a contract we already **have** to have the abi on the contract wrapper, so there is no reason to look fetch it again (means this function can become synchronous as well!)\n    return extractEventsFromAbi(AbiSchema.parse(this.contractWrapper.abi), (_publishedMetadata4 = publishedMetadata) === null || _publishedMetadata4 === void 0 ? void 0 : _publishedMetadata4.metadata);\n  }\n}\n\n/**\n * Encodes and decodes Contract functions\n * @public\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars -- TO BE REMOVED IN V4\nclass ContractOwner {\n  constructor(contractWrapper) {\n    _defineProperty(this, \"featureName\", FEATURE_OWNER.name);\n    /**\n     * Set the new owner of the contract\n     * @remarks Can only be called by the current owner.\n     *\n     * @param address - the address of the new owner\n     *\n     * @example\n     * ```javascript\n     * const newOwnerAddress = \"{{wallet_address}}\";\n     * await contract.owner.set(newOwnerAddress);\n     * ```\n     * @twfeature Ownable\n     */\n    _defineProperty(this, \"set\", /* @__PURE__ */buildTransactionFunction(async address => {\n      const resolvedAddress = await resolveAddress(address);\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"setOwner\",\n        args: [resolvedAddress]\n      });\n    }));\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Get the current owner of the contract\n   * @example\n   * ```javascript\n   * await contract.owner.get();\n   * console.log(\"Owner address: \", ownerAddress);\n   * ```\n   * @returns the owner address\n   * @twfeature Ownable\n   */\n  async get() {\n    return this.contractWrapper.read(\"owner\", []);\n  }\n}\n\n/**\n * Have an official Application URI for this contract.\n * @remarks Configure an official Application URI for this contract.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const appURI = await contract.app.get();\n * appURI = \"ipfs://some_ipfs_hash\";\n *\n * await contract.app.set(appURI)\n * ```\n * @public\n */\nclass ContractAppURI {\n  constructor(contractWrapper, metadata, storage) {\n    _defineProperty(this, \"featureName\", FEATURE_APPURI.name);\n    /**\n     * Set App URI\n     * @param appURI - the uri to set (typically an IPFS hash)\n     * @example\n     * ```javascript\n     * const appURI = \"ipfs://some_ipfs_hash\";\n     * await contract.app.set(appURI);\n     * ```\n     * @twfeature AppURI\n     */\n    _defineProperty(this, \"set\", /* @__PURE__ */buildTransactionFunction(async appURI => {\n      if (detectContractFeature(this.contractWrapper, \"AppURI\")) {\n        return Transaction.fromContractWrapper({\n          contractWrapper: this.contractWrapper,\n          method: \"setAppURI\",\n          args: [appURI]\n        });\n      }\n      return await this.metadata.update.prepare({\n        app_uri: appURI\n      });\n    }));\n    this.contractWrapper = contractWrapper;\n    this.metadata = metadata;\n    this.storage = storage;\n  }\n\n  /**\n   * Get App URI\n   * @returns the appURI (typically an IPFS hash)\n   * @example\n   * ```javascript\n   * const appURI = await contract.app.get();\n   * console.log(appURI) // \"ipfs://some_ipfs_hash\";\n   * ```\n   * @twfeature AppURI\n   */\n  async get() {\n    if (detectContractFeature(this.contractWrapper, \"AppURI\")) {\n      return await this.contractWrapper.read(\"appURI\", []);\n    }\n    return replaceGatewayUrlWithScheme((await this.metadata.get()).app_uri || \"\", this.storage.getGatewayUrls());\n  }\n}\n\n/**\n * @internal\n */\nasync function extractConstructorParams(predeployMetadataUri, storage) {\n  const meta = await fetchPreDeployMetadata(predeployMetadataUri, storage);\n  return extractConstructorParamsFromAbi(meta.abi);\n}\n\n/**\n * @internal\n * @param predeployMetadataUri\n * @param storage\n */\nasync function extractFunctions(predeployMetadataUri, storage) {\n  const metadata = await fetchPreDeployMetadata(predeployMetadataUri, storage);\n  return extractFunctionsFromAbi(metadata.abi, metadata.metadata);\n}\nfunction getFunctionSignature(fnInputs) {\n  return \"(\" + fnInputs.map(i => {\n    return i.type === \"tuple\" ? getFunctionSignature(i.components) : i.type === \"tuple[]\" ? getFunctionSignature(i.components) + \"[]\" : i.type;\n  }).join(\",\") + \")\";\n}\nfunction generatePluginFunctions(pluginAddress, pluginAbi) {\n  const pluginInterface = new utils.Interface(pluginAbi);\n  const pluginFunctions = [];\n  // TODO - filter out common functions like _msgSender(), contractType(), etc.\n  for (const fnFragment of Object.values(pluginInterface.functions)) {\n    const fn = pluginInterface.getFunction(pluginInterface.getSighash(fnFragment));\n    if (fn.name.includes(\"_\")) {\n      continue;\n    }\n    pluginFunctions.push({\n      functionSelector: pluginInterface.getSighash(fn),\n      functionSignature: fn.name + getFunctionSignature(fn.inputs),\n      pluginAddress: pluginAddress\n    });\n  }\n  return pluginFunctions;\n}\nfunction generateExtensionFunctions(extensionAbi) {\n  const extensionInterface = new utils.Interface(extensionAbi);\n  const extensionFunctions = [];\n  // TODO - filter out common functions like _msgSender(), contractType(), etc.\n\n  for (const fnFragment of Object.values(extensionInterface.functions)) {\n    const fn = extensionInterface.getFunction(extensionInterface.getSighash(fnFragment));\n    if (fn.name.startsWith(\"_\")) {\n      continue;\n    }\n    extensionFunctions.push({\n      functionSelector: extensionInterface.getSighash(fn),\n      functionSignature: fn.name + getFunctionSignature(fn.inputs)\n    });\n  }\n  return extensionFunctions;\n}\n\n/**\n *\n * Returns txn data for keyless deploys as well as signer deploys.\n * Also provides a list of infra contracts to deploy.\n *\n * @internal\n *\n * @param metadataUri\n * @param storage\n * @param provider\n * @param create2Factory\n */\nasync function getDeploymentInfo(metadataUri, storage, provider, create2Factory, clientId, secretKey) {\n  caches.deploymentPresets = {};\n  const create2FactoryAddress = create2Factory ? create2Factory : await getCreate2FactoryAddress(provider);\n  const customParams = {};\n  const finalDeploymentInfo = [];\n  const {\n    compilerMetadata,\n    extendedMetadata\n  } = await fetchAndCacheDeployMetadata(metadataUri, storage);\n  const defaultExtensions = extendedMetadata === null || extendedMetadata === void 0 ? void 0 : extendedMetadata.defaultExtensions;\n  if ((extendedMetadata === null || extendedMetadata === void 0 ? void 0 : extendedMetadata.routerType) === \"plugin\" && defaultExtensions) {\n    invariant(clientId || secretKey, \"Require Client Id / Secret Key\");\n    const publishedExtensions = await Promise.all(defaultExtensions.map(e => {\n      return fetchPublishedContractFromPolygon(e.publisherAddress, e.extensionName, e.extensionVersion, storage, clientId, secretKey);\n    }));\n    const pluginMetadata = (await Promise.all(publishedExtensions.map(async c => {\n      return fetchAndCacheDeployMetadata(c.metadataUri, storage);\n    }))).map(fetchedMetadata => fetchedMetadata.compilerMetadata);\n\n    // get deployment info for all plugins\n    const pluginDeploymentInfo = await Promise.all(pluginMetadata.map(async metadata => {\n      const info = await computeDeploymentInfo(\"plugin\", provider, storage, create2FactoryAddress, {\n        metadata: metadata\n      }, clientId, secretKey);\n      return info;\n    }));\n\n    // create constructor param input for PluginMap\n    const mapInput = [];\n    pluginMetadata.forEach((metadata, index) => {\n      const input = generatePluginFunctions(pluginDeploymentInfo[index].transaction.predictedAddress, metadata.abi);\n      mapInput.push(...input);\n    });\n\n    // get PluginMap deployment transaction\n    const pluginMapTransaction = await computeDeploymentInfo(\"plugin\", provider, storage, create2FactoryAddress, {\n      contractName: \"PluginMap\",\n      constructorParams: {\n        _pluginsToAdd: {\n          value: mapInput\n        }\n      }\n    }, clientId, secretKey);\n\n    // address of PluginMap is input for MarketplaceV3's constructor\n    customParams[\"_pluginMap\"] = {\n      value: pluginMapTransaction.transaction.predictedAddress\n    };\n    finalDeploymentInfo.push(...pluginDeploymentInfo, pluginMapTransaction);\n  } else if ((extendedMetadata === null || extendedMetadata === void 0 ? void 0 : extendedMetadata.routerType) === \"dynamic\" && defaultExtensions) {\n    invariant(clientId || secretKey, \"Require Client Id / Secret Key\");\n    const publishedExtensions = await Promise.all(defaultExtensions.map(e => {\n      return fetchPublishedContractFromPolygon(e.publisherAddress, e.extensionName, e.extensionVersion, storage, clientId, secretKey);\n    }));\n    const extensionMetadata = (await Promise.all(publishedExtensions.map(async c => {\n      return fetchAndCacheDeployMetadata(c.metadataUri, storage);\n    }))).map(fetchedMetadata => fetchedMetadata.compilerMetadata);\n\n    // get deployment info for all extensions\n    const extensionDeploymentInfo = await Promise.all(extensionMetadata.map(async metadata => {\n      const info = await computeDeploymentInfo(\"extension\", provider, storage, create2FactoryAddress, {\n        metadata: metadata\n      }, clientId, secretKey);\n      return info;\n    }));\n\n    // create constructor param input for BaseRouter\n    const routerInput = [];\n    extensionMetadata.forEach((metadata, index) => {\n      const extensionFunctions = generateExtensionFunctions(metadata.abi);\n      routerInput.push({\n        metadata: {\n          name: metadata.name,\n          metadataURI: \"\",\n          implementation: extensionDeploymentInfo[index].transaction.predictedAddress\n        },\n        functions: extensionFunctions\n      });\n    });\n\n    // routerInput as constructor param for BaseRouter\n    customParams[\"_extensions\"] = {\n      value: routerInput\n    };\n    finalDeploymentInfo.push(...extensionDeploymentInfo);\n  }\n  const implementationDeployInfo = await computeDeploymentInfo(\"implementation\", provider, storage, create2FactoryAddress, {\n    metadata: compilerMetadata,\n    constructorParams: customParams\n  }, clientId, secretKey);\n\n  // get clone factory\n  const factoryInfo = await computeDeploymentInfo(\"infra\", provider, storage, create2FactoryAddress, {\n    contractName: \"TWCloneFactory\"\n  }, clientId, secretKey);\n  finalDeploymentInfo.push(factoryInfo);\n  finalDeploymentInfo.push(...Object.values(caches.deploymentPresets));\n  finalDeploymentInfo.push(implementationDeployInfo);\n  return finalDeploymentInfo;\n}\n\n/**\n * Deploy a contract at a deterministic address, using Create2 method\n * Address depends on the Create2 factory address.\n *\n * @public\n *\n * @param signer\n * @param bytecode\n * @param encodedArgs\n * @param create2FactoryAddress\n */\nasync function deployContractDeterministic(signer, transaction, options) {\n  let gasLimit = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 7000000;\n  // Check if the implementation contract is already deployed\n  invariant(signer.provider, \"Provider required\");\n  const contractDeployed = await isContractDeployed(transaction.predictedAddress, signer.provider);\n  if (!contractDeployed) {\n    var _options$notifier, _options$notifier2;\n    console.debug(\"deploying contract via create2 factory at: \".concat(transaction.predictedAddress));\n    const tx = {\n      to: transaction.to,\n      data: transaction.data\n    };\n    try {\n      await signer.estimateGas(tx);\n    } catch (e) {\n      console.debug(\"error estimating gas while deploying prebuilt: \", e);\n      tx.gasLimit = BigNumber.from(gasLimit);\n    }\n    options === null || options === void 0 || (_options$notifier = options.notifier) === null || _options$notifier === void 0 || _options$notifier.call(options, \"deploying\", \"preset\");\n    await (await signer.sendTransaction(tx)).wait();\n    options === null || options === void 0 || (_options$notifier2 = options.notifier) === null || _options$notifier2 === void 0 || _options$notifier2.call(options, \"deployed\", \"preset\");\n  }\n}\nfunction estimateGasForDeploy(initCode) {\n  let gasLimit = utils.arrayify(initCode).map(x => x === 0 ? 4 : 16).reduce((sum, x) => sum + x) + 200 * initCode.length / 2 + 6 * Math.ceil(initCode.length / 64) + 32000 + 21000;\n  gasLimit = Math.floor(gasLimit * 64 / 63);\n  return gasLimit;\n}\nfunction createTransactionBatches(transactions) {\n  let upperGasLimit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : GAS_LIMIT_FOR_DEPLOYER;\n  transactions = transactions.filter(tx => {\n    return tx.data.length > 0;\n  });\n  if (transactions.length === 0) {\n    return [];\n  }\n  const transactionBatches = [];\n  let sum = 0;\n  let batch = [];\n  transactions.forEach(tx => {\n    const gas = estimateGasForDeploy(tx.data);\n    if (sum + gas > upperGasLimit) {\n      if (batch.length === 0) {\n        transactionBatches.push([tx]);\n      } else {\n        transactionBatches.push(batch);\n        sum = gas;\n        batch = [tx];\n      }\n    } else {\n      sum += gas;\n      batch.push(tx);\n    }\n  });\n  if (batch.length > 0) {\n    transactionBatches.push(batch);\n  }\n  return transactionBatches;\n}\nasync function deployWithThrowawayDeployer(signer, transactions, options) {\n  var _options$notifier3, _options$notifier4;\n  const transactionBatches = createTransactionBatches(transactions);\n  if (transactionBatches.length === 0) {\n    return;\n  }\n  options === null || options === void 0 || (_options$notifier3 = options.notifier) === null || _options$notifier3 === void 0 || _options$notifier3.call(options, \"deploying\", \"infra\");\n  const deployTxns = await Promise.all(transactionBatches.map(txBatch => {\n    // Using the deployer contract, send the deploy transactions to common factory with a signer\n    const deployer = new ContractFactory(DEPLOYER_ABI, DEPLOYER_BYTECODE).connect(signer).deploy(txBatch);\n    return deployer;\n  }));\n  await Promise.all(deployTxns.map(tx => {\n    return tx.deployed();\n  }));\n  options === null || options === void 0 || (_options$notifier4 = options.notifier) === null || _options$notifier4 === void 0 || _options$notifier4.call(options, \"deployed\", \"infra\");\n}\nasync function getCompositeABIfromRelease(publishMetadataUri, storage) {\n  const {\n    extendedMetadata\n  } = await fetchAndCacheDeployMetadata(publishMetadataUri, storage);\n  const compositeAbi = (extendedMetadata === null || extendedMetadata === void 0 ? void 0 : extendedMetadata.compositeAbi) || [];\n  return compositeAbi;\n}\n\n/**\n * @internal\n */\nasync function getPluginABI(addresses, provider, storage) {\n  return (await Promise.all(addresses.map(address => fetchContractMetadataFromAddress(address, provider, storage).catch(err => {\n    console.error(\"Failed to fetch plug-in for \".concat(address), err);\n    return {\n      abi: []\n    };\n  })))).map(metadata => metadata.abi);\n}\n\n/**\n * @internal\n */\nasync function getCompositePluginABI(address, abi, provider, options, storage) {\n  let pluginABIs = [];\n  try {\n    // check if contract is plugin-pattern\n    const isPluginRouter = isFeatureEnabled(AbiSchema.parse(abi), \"PluginRouter\");\n    const isbaseRouter = isFeatureEnabled(AbiSchema.parse(abi), \"DynamicContract\");\n    if (isbaseRouter) {\n      const contract = new ContractWrapper(provider, address, getAllExtensionsAbi, options, storage);\n      const plugins = await contract.call(\"getAllExtensions\");\n\n      // get extension addresses\n      const pluginAddresses = plugins.map(item => item.metadata.implementation);\n\n      // get ABIs of extension contracts --\n      pluginABIs = await getPluginABI(pluginAddresses, provider, storage);\n    } else if (isPluginRouter) {\n      const contract = new ContractWrapper(provider, address, getAllPluginsAbi, options, storage);\n      const pluginMap = await contract.call(\"getAllPlugins\");\n\n      // get extension addresses\n      const allPlugins = pluginMap.map(item => item.pluginAddress);\n      const plugins = Array.from(new Set(allPlugins));\n\n      // get ABIs of extension contracts\n      pluginABIs = await getPluginABI(plugins, provider, storage);\n    }\n  } catch (err) {}\n  return pluginABIs.length > 0 ? joinABIs([abi, ...pluginABIs]) : abi;\n}\nconst DropErc20ContractInput = /* @__PURE__ */CommonContractSchema.merge(MerkleSchema).merge(CommonSymbolSchema);\nconst DropErc20ContractOutput = /* @__PURE__ */CommonContractOutputSchema.merge(MerkleSchema).merge(CommonSymbolSchema);\nconst DropErc20ContractDeploy = /* @__PURE__ */DropErc20ContractInput.merge(CommonPlatformFeeSchema).merge(CommonPrimarySaleSchema).merge(CommonTrustedForwarderSchema);\nconst DropErc20ContractSchema = {\n  deploy: DropErc20ContractDeploy,\n  output: DropErc20ContractOutput,\n  input: DropErc20ContractInput\n};\nconst MultiwrapContractInput = /* @__PURE__ */CommonContractSchema.merge(CommonRoyaltySchema).merge(CommonSymbolSchema);\nconst MultiwrapContractOutput = /* @__PURE__ */CommonContractOutputSchema.merge(CommonRoyaltySchema).merge(CommonSymbolSchema);\nconst MultiwrapContractDeploy = /* @__PURE__ */MultiwrapContractInput.merge(CommonTrustedForwarderSchema);\nconst MultiwrapContractSchema = {\n  deploy: MultiwrapContractDeploy,\n  output: MultiwrapContractOutput,\n  input: MultiwrapContractInput\n};\nconst ADMIN_ROLE = [\"admin\"];\nconst NFT_BASE_CONTRACT_ROLES = [\"admin\", \"minter\", \"transfer\"];\nconst MARKETPLACE_CONTRACT_ROLES = [\"admin\", \"lister\", \"asset\"];\nconst PACK_CONTRACT_ROLES = [\"admin\", \"minter\", \"asset\", \"transfer\"];\nconst TOKEN_DROP_CONTRACT_ROLES = [\"admin\", \"transfer\"];\nconst MULTIWRAP_CONTRACT_ROLES = [\"admin\", \"transfer\", \"minter\", \"unwrap\", \"asset\"];\nconst prebuiltContractTypes = {\n  vote: \"vote\",\n  token: \"token\",\n  \"edition-drop\": \"edition-drop\",\n  edition: \"edition\",\n  marketplace: \"marketplace\",\n  \"marketplace-v3\": \"marketplace-v3\",\n  multiwrap: \"multiwrap\",\n  \"nft-collection\": \"nft-collection\",\n  \"nft-drop\": \"nft-drop\",\n  pack: \"pack\",\n  \"signature-drop\": \"signature-drop\",\n  split: \"split\",\n  \"token-drop\": \"token-drop\"\n};\nconst EditionDropInitializer = {\n  name: \"DropERC1155\",\n  contractType: prebuiltContractTypes[\"edition-drop\"],\n  schema: DropErc1155ContractSchema,\n  roles: NFT_BASE_CONTRACT_ROLES,\n  initialize: async function () {\n    for (var _len = arguments.length, _ref = new Array(_len), _key = 0; _key < _len; _key++) {\n      _ref[_key] = arguments[_key];\n    }\n    let [network, address, storage, options] = _ref;\n    const [, provider] = getSignerAndProvider(network, options);\n    const [abi, contract, _network] = await Promise.all([EditionDropInitializer.getAbi(address, provider, storage), import('./edition-drop-24708d00.browser.esm.js'), provider.getNetwork()]);\n    return new contract.EditionDrop(network, address, storage, options, abi, _network.chainId);\n  },\n  getAbi: async (address, provider, storage) => {\n    const abi = await fetchAbiFromAddress(address, provider, storage);\n    if (abi) {\n      return abi;\n    }\n    // Deprecated - only needed for backwards compatibility with non-published contracts - should remove in v4\n    const contractInfo = await getContractInfo(address, provider);\n    return !contractInfo || contractInfo.version > 2 ? (await import('@thirdweb-dev/contracts-js/dist/abis/DropERC1155.json')).default : (await import('@thirdweb-dev/contracts-js/dist/abis/DropERC1155_V2.json')).default;\n  }\n};\nconst EditionInitializer = {\n  name: \"TokenERC1155\",\n  contractType: prebuiltContractTypes[\"edition\"],\n  schema: TokenErc1155ContractSchema,\n  roles: NFT_BASE_CONTRACT_ROLES,\n  initialize: async function () {\n    for (var _len2 = arguments.length, _ref2 = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      _ref2[_key2] = arguments[_key2];\n    }\n    let [network, address, storage, options] = _ref2;\n    const [, provider] = getSignerAndProvider(network, options);\n    const [abi, contract, _network] = await Promise.all([EditionInitializer.getAbi(address, provider, storage), import('./edition-b3122b64.browser.esm.js'), provider.getNetwork()]);\n    return new contract.Edition(network, address, storage, options, abi, _network.chainId);\n  },\n  getAbi: async (address, provider, storage) => {\n    const abi = await fetchAbiFromAddress(address, provider, storage);\n    if (abi) {\n      return abi;\n    }\n    // Deprecated - only needed for backwards compatibility with non-published contracts - should remove in v4\n    return (await import('@thirdweb-dev/contracts-js/dist/abis/TokenERC1155.json')).default;\n  }\n};\nconst MarketplaceInitializer = {\n  name: \"Marketplace\",\n  contractType: prebuiltContractTypes.marketplace,\n  schema: MarketplaceContractSchema,\n  roles: MARKETPLACE_CONTRACT_ROLES,\n  initialize: async function () {\n    for (var _len3 = arguments.length, _ref3 = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      _ref3[_key3] = arguments[_key3];\n    }\n    let [network, address, storage, options] = _ref3;\n    const [, provider] = getSignerAndProvider(network, options);\n    const [abi, contract, _network] = await Promise.all([MarketplaceInitializer.getAbi(address, provider, storage), import('./marketplace-5b738c1b.browser.esm.js'), provider.getNetwork()]);\n    return new contract.Marketplace(network, address, storage, options, abi, _network.chainId);\n  },\n  getAbi: async (address, provider, storage) => {\n    const abi = await fetchAbiFromAddress(address, provider, storage);\n    if (abi) {\n      return abi;\n    }\n\n    // Deprecated - only needed for backwards compatibility with non-published contracts - should remove in v4\n    return (await import('@thirdweb-dev/contracts-js/dist/abis/Marketplace.json')).default;\n  }\n};\nconst MarketplaceV3Initializer = {\n  name: \"MarketplaceV3\",\n  contractType: prebuiltContractTypes[\"marketplace-v3\"],\n  schema: MarketplaceContractSchema,\n  roles: MARKETPLACE_CONTRACT_ROLES,\n  initialize: async function () {\n    for (var _len4 = arguments.length, _ref4 = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      _ref4[_key4] = arguments[_key4];\n    }\n    let [network, address, storage, options] = _ref4;\n    const [, provider] = getSignerAndProvider(network, options);\n    const [abi, contract, _network] = await Promise.all([MarketplaceV3Initializer.getAbi(address, provider, storage, options), import('./marketplacev3-e02b24ac.browser.esm.js'), provider.getNetwork()]);\n    return new contract.MarketplaceV3(network, address, storage, options, abi, _network.chainId);\n  },\n  getAbi: async (address, provider, storage, options) => {\n    const chainId = (await provider.getNetwork()).chainId;\n    const isZkSync = chainId === 280 || chainId === 324;\n\n    // Can't resolve IPFS hash from plugin bytecode on ZkSync\n    // Thus, pull the composite ABI from the release page\n    if (isZkSync) {\n      const publishedContract = await fetchPublishedContractFromPolygon(THIRDWEB_DEPLOYER, \"MarketplaceV3\", \"latest\", storage, options === null || options === void 0 ? void 0 : options.clientId, options === null || options === void 0 ? void 0 : options.secretKey);\n      const uri = publishedContract.metadataUri;\n      const compositeAbi = await getCompositeABIfromRelease(uri, storage);\n      return compositeAbi;\n    }\n    const abi = await fetchAbiFromAddress(address, provider, storage);\n    if (abi) {\n      return await getCompositePluginABI(address, abi, provider, {}, storage);\n    }\n\n    // Deprecated - only needed for backwards compatibility with non-published contracts - should remove in v4\n    const localAbi = (await import('@thirdweb-dev/contracts-js/dist/abis/MarketplaceV3.json')).default;\n    return await getCompositePluginABI(address, AbiSchema.parse(localAbi || []), provider, {}, storage);\n  }\n};\nconst MultiwrapInitializer = {\n  name: \"Multiwrap\",\n  contractType: prebuiltContractTypes.multiwrap,\n  schema: MultiwrapContractSchema,\n  roles: MULTIWRAP_CONTRACT_ROLES,\n  initialize: async function () {\n    for (var _len5 = arguments.length, _ref5 = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n      _ref5[_key5] = arguments[_key5];\n    }\n    let [network, address, storage, options] = _ref5;\n    const [, provider] = getSignerAndProvider(network, options);\n    const [abi, contract, _network] = await Promise.all([MultiwrapInitializer.getAbi(address, provider, storage), import('./multiwrap-18fab528.browser.esm.js'), provider.getNetwork()]);\n    return new contract.Multiwrap(network, address, storage, options, abi, _network.chainId);\n  },\n  getAbi: async (address, provider, storage) => {\n    const abi = await fetchAbiFromAddress(address, provider, storage);\n    if (abi) {\n      return abi;\n    }\n    // Deprecated - only needed for backwards compatibility with non-published contracts - should remove in v4\n    return (await import('@thirdweb-dev/contracts-js/dist/abis/Multiwrap.json')).default;\n  }\n};\nconst NFTCollectionInitializer = {\n  name: \"TokenERC721\",\n  contractType: prebuiltContractTypes[\"nft-collection\"],\n  schema: TokenErc721ContractSchema,\n  roles: NFT_BASE_CONTRACT_ROLES,\n  initialize: async function () {\n    for (var _len6 = arguments.length, _ref6 = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n      _ref6[_key6] = arguments[_key6];\n    }\n    let [network, address, storage, options] = _ref6;\n    const [, provider] = getSignerAndProvider(network, options);\n    const [abi, contract, _network] = await Promise.all([NFTCollectionInitializer.getAbi(address, provider, storage), import('./nft-collection-0cf43f4d.browser.esm.js'), provider.getNetwork()]);\n    return new contract.NFTCollection(network, address, storage, options, abi, _network.chainId);\n  },\n  getAbi: async (address, provider, storage) => {\n    const abi = await fetchAbiFromAddress(address, provider, storage);\n    if (abi) {\n      return abi;\n    }\n    // Deprecated - only needed for backwards compatibility with non-published contracts - should remove in v4\n    return (await import('@thirdweb-dev/contracts-js/dist/abis/TokenERC721.json')).default;\n  }\n};\nconst NFTDropInitializer = {\n  name: \"DropERC721\",\n  contractType: prebuiltContractTypes[\"nft-drop\"],\n  schema: DropErc721ContractSchema,\n  roles: NFT_BASE_CONTRACT_ROLES,\n  initialize: async function () {\n    for (var _len7 = arguments.length, _ref7 = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n      _ref7[_key7] = arguments[_key7];\n    }\n    let [network, address, storage, options] = _ref7;\n    const [, provider] = getSignerAndProvider(network, options);\n    const [abi, contract, _network] = await Promise.all([NFTDropInitializer.getAbi(address, provider, storage), import('./nft-drop-399edfe0.browser.esm.js'), provider.getNetwork()]);\n    return new contract.NFTDrop(network, address, storage, options, abi, _network.chainId);\n  },\n  getAbi: async (address, provider, storage) => {\n    const abi = await fetchAbiFromAddress(address, provider, storage);\n    if (abi) {\n      return abi;\n    }\n    // Deprecated - only needed for backwards compatibility with non-published contracts - should remove in v4\n    const contractInfo = await getContractInfo(address, provider);\n    return !contractInfo || contractInfo.version > 3 ? (await import('@thirdweb-dev/contracts-js/dist/abis/DropERC721.json')).default : (await import('@thirdweb-dev/contracts-js/dist/abis/DropERC721_V3.json')).default;\n  }\n};\nconst PackInitializer = {\n  name: \"Pack\",\n  contractType: prebuiltContractTypes[\"pack\"],\n  schema: PackContractSchema,\n  roles: PACK_CONTRACT_ROLES,\n  initialize: async function () {\n    for (var _len8 = arguments.length, _ref8 = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n      _ref8[_key8] = arguments[_key8];\n    }\n    let [network, address, storage, options] = _ref8;\n    const [, provider] = getSignerAndProvider(network, options);\n    const [abi, contract, _network] = await Promise.all([PackInitializer.getAbi(address, provider, storage), import('./pack-bd61f578.browser.esm.js'), provider.getNetwork()]);\n    return new contract.Pack(network, address, storage, options, abi, _network.chainId);\n  },\n  getAbi: async (address, provider, storage) => {\n    const abi = await fetchAbiFromAddress(address, provider, storage);\n    if (abi) {\n      return abi;\n    }\n    // Deprecated - only needed for backwards compatibility with non-published contracts - should remove in v4\n    return AbiSchema.parse((await import('@thirdweb-dev/contracts-js/dist/abis/Pack.json')).default || []);\n  }\n};\nconst SignatureDropInitializer = {\n  name: \"SignatureDrop\",\n  contractType: prebuiltContractTypes[\"signature-drop\"],\n  schema: DropErc721ContractSchema,\n  roles: NFT_BASE_CONTRACT_ROLES,\n  initialize: async function () {\n    for (var _len9 = arguments.length, _ref9 = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n      _ref9[_key9] = arguments[_key9];\n    }\n    let [network, address, storage, options] = _ref9;\n    const [, provider] = getSignerAndProvider(network, options);\n    const [abi, contract, _network] = await Promise.all([SignatureDropInitializer.getAbi(address, provider, storage), import('./signature-drop-224b723c.browser.esm.js'), provider.getNetwork()]);\n    return new contract.SignatureDrop(network, address, storage, options, abi, _network.chainId);\n  },\n  getAbi: async (address, provider, storage) => {\n    const abi = await fetchAbiFromAddress(address, provider, storage);\n    if (abi) {\n      return abi;\n    }\n    // Deprecated - only needed for backwards compatibility with non-published contracts - should remove in v4\n    const contractInfo = await getContractInfo(address, provider);\n    return !contractInfo || contractInfo.version > 4 ? (await import('@thirdweb-dev/contracts-js/dist/abis/SignatureDrop.json')).default : (await import('@thirdweb-dev/contracts-js/dist/abis/SignatureDrop_V4.json')).default;\n  }\n};\nconst SplitInitializer = {\n  name: \"Split\",\n  contractType: prebuiltContractTypes[\"split\"],\n  schema: SplitsContractSchema,\n  roles: ADMIN_ROLE,\n  initialize: async function () {\n    for (var _len10 = arguments.length, _ref10 = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {\n      _ref10[_key10] = arguments[_key10];\n    }\n    let [network, address, storage, options] = _ref10;\n    const [, provider] = getSignerAndProvider(network, options);\n    const [abi, contract, _network] = await Promise.all([SplitInitializer.getAbi(address, provider, storage), import('./split-8c412664.browser.esm.js'), provider.getNetwork()]);\n    return new contract.Split(network, address, storage, options, abi, _network.chainId);\n  },\n  getAbi: async (address, provider, storage) => {\n    const abi = await fetchAbiFromAddress(address, provider, storage);\n    if (abi) {\n      return abi;\n    }\n    // Deprecated - only needed for backwards compatibility with non-published contracts - should remove in v4\n    return (await import('@thirdweb-dev/contracts-js/dist/abis/Split.json')).default;\n  }\n};\nconst TokenDropInitializer = {\n  name: \"DropERC20\",\n  contractType: prebuiltContractTypes[\"token-drop\"],\n  schema: DropErc20ContractSchema,\n  roles: TOKEN_DROP_CONTRACT_ROLES,\n  initialize: async function () {\n    for (var _len11 = arguments.length, _ref11 = new Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {\n      _ref11[_key11] = arguments[_key11];\n    }\n    let [network, address, storage, options] = _ref11;\n    const [, provider] = getSignerAndProvider(network, options);\n    const [abi, contract, _network] = await Promise.all([TokenDropInitializer.getAbi(address, provider, storage), import('./token-drop-90cb00e6.browser.esm.js'), provider.getNetwork()]);\n    return new contract.TokenDrop(network, address, storage, options, abi, _network.chainId);\n  },\n  getAbi: async (address, provider, storage) => {\n    const abi = await fetchAbiFromAddress(address, provider, storage);\n    if (abi) {\n      return abi;\n    }\n    // Deprecated - only needed for backwards compatibility with non-published contracts - should remove in v4\n    const contractInfo = await getContractInfo(address, provider);\n    return !contractInfo || contractInfo.version > 2 ? (await import('@thirdweb-dev/contracts-js/dist/abis/DropERC20.json')).default : (await import('@thirdweb-dev/contracts-js/dist/abis/DropERC20_V2.json')).default;\n  }\n};\nconst TokenInitializer = {\n  name: \"TokenERC20\",\n  contractType: prebuiltContractTypes.token,\n  schema: TokenErc20ContractSchema,\n  roles: NFT_BASE_CONTRACT_ROLES,\n  initialize: async function () {\n    for (var _len12 = arguments.length, _ref12 = new Array(_len12), _key12 = 0; _key12 < _len12; _key12++) {\n      _ref12[_key12] = arguments[_key12];\n    }\n    let [network, address, storage, options] = _ref12;\n    const [, provider] = getSignerAndProvider(network, options);\n    const [abi, contract, _network] = await Promise.all([TokenInitializer.getAbi(address, provider, storage), import('./token-1023bf9c.browser.esm.js'), provider.getNetwork()]);\n    return new contract.Token(network, address, storage, options, abi, _network.chainId);\n  },\n  getAbi: async (address, provider, storage) => {\n    const abi = await fetchAbiFromAddress(address, provider, storage);\n    if (abi) {\n      return abi;\n    }\n    // Deprecated - only needed for backwards compatibility with non-published contracts - should remove in v4\n    return (await import('@thirdweb-dev/contracts-js/dist/abis/TokenERC20.json')).default;\n  }\n};\nconst VoteInitializer = {\n  name: \"VoteERC20\",\n  contractType: prebuiltContractTypes.vote,\n  schema: VoteContractSchema,\n  roles: [],\n  initialize: async function () {\n    for (var _len13 = arguments.length, _ref13 = new Array(_len13), _key13 = 0; _key13 < _len13; _key13++) {\n      _ref13[_key13] = arguments[_key13];\n    }\n    let [network, address, storage, options] = _ref13;\n    const [, provider] = getSignerAndProvider(network, options);\n    const [abi, contract, _network] = await Promise.all([VoteInitializer.getAbi(address, provider, storage), import('./vote-8af4ac9b.browser.esm.js'), provider.getNetwork()]);\n    return new contract.Vote(network, address, storage, options, abi, _network.chainId);\n  },\n  getAbi: async (address, provider, storage) => {\n    const abi = await fetchAbiFromAddress(address, provider, storage);\n    if (abi) {\n      return abi;\n    }\n    // Deprecated - only needed for backwards compatibility with non-published contracts - should remove in v4\n    return (await import('@thirdweb-dev/contracts-js/dist/abis/VoteERC20.json')).default;\n  }\n};\nasync function getContractInfo(address, provider) {\n  try {\n    return await getPrebuiltInfo(address, provider);\n  } catch (e) {\n    return undefined;\n  }\n}\n\n/**\n * a map from contractType -> contract metadata\n * @internal\n */\nconst PREBUILT_CONTRACTS_MAP = {\n  [prebuiltContractTypes[\"edition-drop\"]]: EditionDropInitializer,\n  [prebuiltContractTypes.edition]: EditionInitializer,\n  [prebuiltContractTypes.marketplace]: MarketplaceInitializer,\n  [prebuiltContractTypes[\"marketplace-v3\"]]: MarketplaceV3Initializer,\n  [prebuiltContractTypes.multiwrap]: MultiwrapInitializer,\n  [prebuiltContractTypes[\"nft-collection\"]]: NFTCollectionInitializer,\n  [prebuiltContractTypes[\"nft-drop\"]]: NFTDropInitializer,\n  [prebuiltContractTypes.pack]: PackInitializer,\n  [prebuiltContractTypes[\"signature-drop\"]]: SignatureDropInitializer,\n  [prebuiltContractTypes.split]: SplitInitializer,\n  [prebuiltContractTypes[\"token-drop\"]]: TokenDropInitializer,\n  [prebuiltContractTypes.token]: TokenInitializer,\n  [prebuiltContractTypes.vote]: VoteInitializer\n};\nconst PREBUILT_CONTRACTS_APPURI_MAP = {\n  [prebuiltContractTypes[\"edition-drop\"]]: \"ipfs://QmNm3wRzpKYWo1SRtJfgfxtvudp5p2nXD6EttcsQJHwTmk\",\n  [prebuiltContractTypes.edition]: \"\",\n  [prebuiltContractTypes.marketplace]: \"ipfs://QmbAgC8YwY36n8H2kuvSWsRisxDZ15QZw3xGZyk9aDvcv7/marketplace.html\",\n  [prebuiltContractTypes[\"marketplace-v3\"]]: \"ipfs://QmbAgC8YwY36n8H2kuvSWsRisxDZ15QZw3xGZyk9aDvcv7/marketplace-v3.html\",\n  [prebuiltContractTypes.multiwrap]: \"\",\n  [prebuiltContractTypes[\"nft-collection\"]]: \"\",\n  [prebuiltContractTypes[\"nft-drop\"]]: \"ipfs://QmZptmVipc6SGFbKAyXcxGgohzTwYRXZ9LauRX5ite1xDK\",\n  [prebuiltContractTypes.pack]: \"\",\n  [prebuiltContractTypes[\"signature-drop\"]]: \"ipfs://QmZptmVipc6SGFbKAyXcxGgohzTwYRXZ9LauRX5ite1xDK\",\n  [prebuiltContractTypes.split]: \"\",\n  [prebuiltContractTypes[\"token-drop\"]]: \"ipfs://QmbAgC8YwY36n8H2kuvSWsRisxDZ15QZw3xGZyk9aDvcv7/erc20.html\",\n  [prebuiltContractTypes.token]: \"\",\n  [prebuiltContractTypes.vote]: \"\"\n};\nconst SmartContract$1 = {\n  name: \"SmartContract\",\n  contractType: \"custom\",\n  schema: {},\n  roles: ALL_ROLES\n};\nconst CONTRACTS_MAP = {\n  ...PREBUILT_CONTRACTS_MAP,\n  [SmartContract$1.contractType]: SmartContract$1\n};\n\n/**\n * @internal\n */\nfunction getContractTypeForRemoteName(name) {\n  var _Object$values$find;\n  return ((_Object$values$find = Object.values(CONTRACTS_MAP).find(contract => contract.name === name)) === null || _Object$values$find === void 0 ? void 0 : _Object$values$find.contractType) || \"custom\";\n}\nfunction getContractName(type) {\n  var _Object$values$find2;\n  return (_Object$values$find2 = Object.values(CONTRACTS_MAP).find(contract => contract.contractType === type)) === null || _Object$values$find2 === void 0 ? void 0 : _Object$values$find2.name;\n}\nconst SignerPermissionsSchema = /* @__PURE__ */z.object({\n  startDate: StartDateSchema,\n  expirationDate: EndDateSchema,\n  nativeTokenLimitPerTransaction: /* @__PURE__ */AmountSchema.default(0),\n  approvedCallTargets: /* @__PURE__ */z.array(AddressOrEnsSchema)\n});\nconst PermissionSnapshotSchema = /* @__PURE__ */z.array( /* @__PURE__ */z.object({\n  signer: AddressOrEnsSchema,\n  makeAdmin: /* @__PURE__ */z.boolean(),\n  permissions: SignerPermissionsSchema\n}));\nconst SignerPermissionRequest = [{\n  name: \"signer\",\n  type: \"address\"\n}, {\n  name: \"approvedTargets\",\n  type: \"address[]\"\n}, {\n  name: \"nativeTokenLimitPerTransaction\",\n  type: \"uint256\"\n}, {\n  name: \"permissionStartTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"permissionEndTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"reqValidityStartTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"reqValidityEndTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"uid\",\n  type: \"bytes32\"\n}];\nclass AccountPermissions {\n  constructor(contractWrapper) {\n    _defineProperty(this, \"featureName\", FEATURE_ACCOUNT_PERMISSIONS.name);\n    /*********************************\n     * WRITE FUNCTIONS\n     ********************************/\n    /**\n     * Grant an address admin access to the account.\n     *\n     * @remarks Grants an address admin access to the account. The admin will have complete authority over the account.\n     *\n     * @param signer - The address to be granted admin access to the account.\n     *\n     * @example\n     * ```javascript\n     * const tx = await contract.account.grantAdminAccess(signer);\n     * const receipt = tx.receipt();\n     * ```\n     *\n     * @twfeature AccountPermissions\n     */\n    _defineProperty(this, \"grantAdminPermissions\", /* @__PURE__ */buildTransactionFunction(async signerAddress => {\n      const resolvedSignerAddress = await resolveAddress(signerAddress);\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"setAdmin\",\n        args: [resolvedSignerAddress, true]\n      });\n    }));\n    /**\n     * Revoke an address' admin access to the account.\n     *\n     * @remarks Revokes an address' admin access to the account.\n     *\n     * @param signer - The address of an admin of the account.\n     *\n     * @example\n     * ```javascript\n     * const tx = await contract.account.revokeAdminAccess(signer);\n     * const receipt = tx.receipt();\n     * ```\n     *\n     * @twfeature AccountPermissions\n     */\n    _defineProperty(this, \"revokeAdminPermissions\", /* @__PURE__ */buildTransactionFunction(async signerAddress => {\n      const resolvedSignerAddress = await resolveAddress(signerAddress);\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"setAdmin\",\n        args: [resolvedSignerAddress, false]\n      });\n    }));\n    /**\n     * Grant a signer permissions to use the account.\n     *\n     * @remarks Grants a signer permissions to use the account.\n     *\n     * @param signer - The signer to be granted permissions to use the account.\n     * @param permissions - The permissions to be applied to the signer's use of the account.\n     *\n     * @example\n     * ```javascript\n     * const tx = await contract.account.grantPermissions(signer, permissions);\n     * const receipt = tx.receipt();\n     * ```\n     *\n     * @twfeature AccountPermissions\n     */\n    _defineProperty(this, \"grantPermissions\", /* @__PURE__ */buildTransactionFunction(async (signerAddress, permissions) => {\n      const resolvedSignerAddress = await resolveAddress(signerAddress);\n      const resolvedPermissions = await SignerPermissionsSchema.parseAsync(permissions);\n      if (await this.isAdmin(resolvedSignerAddress)) {\n        throw new Error(\"Signer is already an admin. Cannot grant permissions to an existing admin.\");\n      }\n      if (await this.isSigner(resolvedSignerAddress)) {\n        throw new Error(\"Signer already has permissions. Cannot grant permissions to an existing signer. You can update permissions using `updatePermissions`.\");\n      }\n      return await this.sendSignerPermissionRequest(resolvedSignerAddress, resolvedPermissions);\n    }));\n    /**\n     * Update the permissions of a signer for using the account.\n     *\n     * @remarks Updates the permissions of a signer for using the account.\n     *\n     * @param signer - The signer whose permissions to use the account are to be updated.\n     * @param permissions - The permissions to be applied to the signer's use of the account.\n     *\n     * @example\n     * ```javascript\n     * const tx = await contract.account.updatePermissions(signer, permissions);\n     * const receipt = tx.receipt();\n     * ```\n     *\n     * @twfeature AccountPermissions\n     */\n    _defineProperty(this, \"updatePermissions\", /* @__PURE__ */buildTransactionFunction(async (signerAddress, permissions) => {\n      const resolvedSignerAddress = await resolveAddress(signerAddress);\n      const resolvedPermissions = await SignerPermissionsSchema.parseAsync(permissions);\n      if (await this.isAdmin(resolvedSignerAddress)) {\n        throw new Error(\"Signer is already an admin. Cannot update permissions of an existing admin.\");\n      }\n      if (!(await this.isSigner(resolvedSignerAddress))) {\n        throw new Error(\"Signer does not already have permissions. You can grant permissions using `grantPermissions`.\");\n      }\n      return await this.sendSignerPermissionRequest(resolvedSignerAddress, resolvedPermissions);\n    }));\n    /**\n     * Revoke a scoped access address to the account\n     *\n     * @remarks Revokes an address' access to the account.\n     *\n     * @param signer - The address whose access to the account is to be revoked.\n     *\n     * @example\n     * ```javascript\n     * const tx = await contract.account.revokeAccess(signer);\n     * const receipt = tx.receipt();\n     * ```\n     *\n     * @twfeature AccountPermissions\n     */\n    _defineProperty(this, \"revokeAccess\", /* @__PURE__ */buildTransactionFunction(async signerAddress => {\n      const resolvedSignerAddress = await resolveAddress(signerAddress);\n      if (await this.isAdmin(resolvedSignerAddress)) {\n        throw new Error(\"Signer is already an admin. Cannot revoke permissions of an admin.\");\n      }\n      if (!(await this.isSigner(resolvedSignerAddress))) {\n        throw new Error(\"Signer does not already have permissions. You can grant permissions using `grantPermissions`.\");\n      }\n      return await this.sendSignerPermissionRequest(resolvedSignerAddress, {\n        startDate: BigNumber.from(0),\n        expirationDate: BigNumber.from(0),\n        approvedCallTargets: [],\n        nativeTokenLimitPerTransaction: \"0\"\n      });\n    }));\n    /**\n     * Approve an address as a call target for a given signer on the account\n     *\n     * @remarks Approves an address as a call target for a given signer on the account.\n     *\n     * @param signer - A signer with restricted access to the account.\n     * @param target - The address to approve as a call target for the signer.\n     *\n     * @example\n     * ```javascript\n     * const tx = await contract.account.approveTargetForSigner(signer, target);\n     * const receipt = tx.receipt();\n     * ```\n     *\n     * @twfeature AccountPermissions\n     */\n    _defineProperty(this, \"approveTargetForSigner\", /* @__PURE__ */buildTransactionFunction(async (signerAddress, target) => {\n      const resolvedSignerAddress = await resolveAddress(signerAddress);\n      const resolvedTarget = await resolveAddress(target);\n      if (await this.isAdmin(resolvedSignerAddress)) {\n        throw new Error(\"Signer is already an admin. Cannot approve targets for an admin.\");\n      }\n      if (!(await this.isSigner(resolvedSignerAddress))) {\n        throw new Error(\"Signer does not already have permissions. You can grant permissions using `grantPermissions`.\");\n      }\n      const permissions = await this.contractWrapper.read(\"getPermissionsForSigner\", [resolvedSignerAddress]);\n      if (permissions.approvedTargets.includes(target)) {\n        throw new Error(\"Target is already approved\");\n      }\n      const newTargets = [...permissions.approvedTargets, resolvedTarget];\n      return await this.sendSignerPermissionRequest(resolvedSignerAddress, {\n        startDate: BigNumber.from(permissions.startTimestamp),\n        expirationDate: BigNumber.from(permissions.endTimestamp),\n        approvedCallTargets: newTargets,\n        nativeTokenLimitPerTransaction: permissions.nativeTokenLimitPerTransaction.toString()\n      });\n    }));\n    /**\n     * Disapprove an address as a call target for a given signer on the account\n     *\n     * @remarks Disapprove an address as a call target for a given signer on the account.\n     *\n     * @param signer - A signer with restricted access to the account.\n     * @param target - The address to disapprove as a call target for the signer.\n     *\n     * @example\n     * ```javascript\n     * const tx = await contract.account.disapproveTargetForSigner(signer, target);\n     * const receipt = tx.receipt();\n     * ```\n     *\n     * @twfeature AccountPermissions\n     */\n    _defineProperty(this, \"disapproveTargetForSigner\", /* @__PURE__ */buildTransactionFunction(async (signerAddress, target) => {\n      const resolvedSignerAddress = await resolveAddress(signerAddress);\n      const resolvedTarget = await resolveAddress(target);\n      if (await this.isAdmin(resolvedSignerAddress)) {\n        throw new Error(\"Signer is already an admin. Cannot approve targets for an admin.\");\n      }\n      if (!(await this.isSigner(resolvedSignerAddress))) {\n        throw new Error(\"Signer does not already have permissions. You can grant permissions using `grantPermissions`.\");\n      }\n      const permissions = await this.contractWrapper.read(\"getPermissionsForSigner\", [resolvedSignerAddress]);\n      if (!permissions.approvedTargets.includes(resolvedTarget)) {\n        throw new Error(\"Target is currently not approved\");\n      }\n      const newTargets = permissions.approvedTargets.filter(approvedTarget => utils.getAddress(approvedTarget) !== utils.getAddress(resolvedTarget));\n      return await this.sendSignerPermissionRequest(resolvedSignerAddress, {\n        startDate: BigNumber.from(permissions.startTimestamp),\n        expirationDate: BigNumber.from(permissions.endTimestamp),\n        approvedCallTargets: newTargets,\n        nativeTokenLimitPerTransaction: permissions.nativeTokenLimitPerTransaction.toString()\n      });\n    }));\n    /**\n     * Set the account's entire snapshot of permissions.\n     *\n     * @remarks Sets the account's entire snapshot of permissions.\n     *\n     * @param permissionSnapshot - the snapshot to set as the account's entire permission snapshot.\n     *\n     * @example\n     * ```javascript\n     * const tx = await contract.account.setAccess(permissionSnapshot);\n     * const receipt = tx.receipt();\n     * ```\n     *\n     * @twfeature AccountPermissions\n     */\n    _defineProperty(this, \"resetAllPermissions\", /* @__PURE__ */buildTransactionFunction(async permissionSnapshot => {\n      const resolvedSnapshot = await PermissionSnapshotSchema.parseAsync(permissionSnapshot);\n\n      /**\n       * All cases\n       *\n       * - Add new admin :check:\n       * - Remove current admin :check:\n       * - Add new scoped :check:\n       * - Remove current scoped :check:\n       * - Update current scoped :check:\n       * - Current admin -> new scoped :check:\n       * - Current scoped -> new admin :check:\n       **/\n\n      // No duplicate signers in input!\n      if (this.hasDuplicateSigners(resolvedSnapshot)) {\n        throw new Error(\"Duplicate signers found in input.\");\n      }\n      const addAdminData = [];\n      const removeAdminData = [];\n      const addOrUpdateSignerData = [];\n      const removeSignerData = [];\n\n      // Remove all existing admins not included in the passed snapshot.\n      const allAdmins = await this.getAllAdmins();\n      const allToMakeAdmin = resolvedSnapshot.filter(item => item.makeAdmin).map(item => item.signer);\n      allAdmins.forEach(admin => {\n        if (!allToMakeAdmin.includes(admin)) {\n          removeAdminData.push(this.contractWrapper.writeContract.interface.encodeFunctionData(\"setAdmin\", [admin, false]));\n        }\n      });\n\n      // Remove all existing signers not included in the passed snapshot.\n      const allSigners = await this.getAllSigners();\n      const allToMakeSigners = resolvedSnapshot.filter(item => {\n        return !item.makeAdmin;\n      }).map(item => item.signer);\n      await Promise.all(allSigners.map(async item => {\n        if (!allToMakeSigners.includes(item.signer)) {\n          const data = await this.buildSignerPermissionRequest(item.signer, {\n            startDate: BigNumber.from(0),\n            expirationDate: BigNumber.from(0),\n            approvedCallTargets: [],\n            nativeTokenLimitPerTransaction: \"0\"\n          });\n          removeSignerData.push(data);\n        }\n      }));\n      for (const member of resolvedSnapshot) {\n        // Add new admin\n        if (member.makeAdmin) {\n          addAdminData.push(this.contractWrapper.writeContract.interface.encodeFunctionData(\"setAdmin\", [member.signer, true]));\n        } else {\n          // Add new scoped\n          const data = await this.buildSignerPermissionRequest(member.signer, member.permissions);\n          addOrUpdateSignerData.push(data);\n        }\n      }\n      const data = [];\n      removeAdminData.forEach(item => {\n        data.push(item);\n      });\n      removeSignerData.forEach(item => {\n        data.push(item);\n      });\n      addOrUpdateSignerData.forEach(item => {\n        data.push(item);\n      });\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"multicall\",\n        args: [data]\n      });\n    }));\n    this.contractWrapper = contractWrapper;\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /*********************************\n   * HELPER FUNCTIONS\n   ********************************/\n\n  hasDuplicateSigners(snapshot) {\n    const checkedSigner = {};\n    const signers = snapshot.map(item => item.signer);\n    for (const signer of signers) {\n      if (!checkedSigner[signer]) {\n        checkedSigner[signer] = true;\n      } else {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Format the access restrictions for a given role\n   *\n   * @param restrictions - The access restrictions for a given role\n   * @returns formatted role restrictions\n   *\n   */\n  parseSignerPermissionsStruct(permissions) {\n    return {\n      startDate: new Date(parseInt(permissions.startTimestamp.toString()) * 1000),\n      expirationDate: new Date(parseInt(permissions.endTimestamp.toString()) * 1000),\n      nativeTokenLimitPerTransaction: BigNumber.from(permissions.nativeTokenLimitPerTransaction),\n      approvedCallTargets: permissions.approvedTargets\n    };\n  }\n  async sendSignerPermissionRequest(signerAddress, permissions) {\n    const {\n      payload,\n      signature\n    } = await this.generatePayload(signerAddress, permissions);\n    const [success] = await this.contractWrapper.read(\"verifySignerPermissionRequest\", [payload, signature]);\n    if (!success) {\n      throw new Error(\"Invalid signature.\");\n    }\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"setPermissionsForSigner\",\n      args: [payload, signature]\n    });\n  }\n  async buildSignerPermissionRequest(signerAddress, permissions) {\n    const {\n      payload,\n      signature\n    } = await this.generatePayload(signerAddress, permissions);\n    const isValidSigner = await this.contractWrapper.read(\"verifySignerPermissionRequest\", [payload, signature]);\n    if (!isValidSigner) {\n      throw new Error(\"Invalid signature.\");\n    }\n    return this.contractWrapper.writeContract.interface.encodeFunctionData(\"setPermissionsForSigner\", [payload, signature]);\n  }\n\n  /**\n   * Generate and sign a payload to grant or revoke a signer's access to the account.\n   *\n   * @param signer - The address of the signer\n   * @param roleAction - The address of the signer\n   * @returns The generated payload and signature produced on signing that payload.\n   *\n   */\n  async generatePayload(signerAddress, permissions) {\n    // Get payload struct.\n    const payload = {\n      signer: signerAddress,\n      approvedTargets: permissions.approvedCallTargets,\n      nativeTokenLimitPerTransaction: utils.parseEther(permissions.nativeTokenLimitPerTransaction),\n      permissionStartTimestamp: permissions.startDate,\n      permissionEndTimestamp: permissions.expirationDate,\n      reqValidityStartTimestamp: 0,\n      // Req validity ends 10 years from now.\n      reqValidityEndTimestamp: BigNumber.from(Math.floor(new Date(Date.now() + 1000 * 60 * 60 * 24 * 365 * 10).getTime() / 1000)),\n      uid: resolveOrGenerateId(undefined)\n    };\n\n    // Generate signature\n    const chainId = await this.contractWrapper.getChainID();\n    const connectedSigner = this.contractWrapper.getSigner();\n    invariant(connectedSigner, \"No signer available\");\n    const signature = await this.contractWrapper.signTypedData(connectedSigner, {\n      name: \"Account\",\n      version: \"1\",\n      chainId,\n      verifyingContract: this.getAddress()\n    }, {\n      SignerPermissionRequest\n    }, payload);\n    return {\n      payload,\n      signature\n    };\n  }\n\n  /*********************************\n   * READ FUNCTIONS\n   ********************************/\n\n  /**\n   * Get whether a signer is an admin on the account.\n   *\n   * @example\n   * ```javascript\n   * const isAdmin = await contract.account.isAdmin(signer);\n   * ```\n   * @param signer - The address of a signer of the account.\n   * @returns whether a signer is an admin on the account.\n   *\n   * @twfeature AccountPermissions\n   */\n  async isAdmin(signerAddress) {\n    const resolvedSignerAddress = await resolveAddress(signerAddress);\n    return await this.contractWrapper.read(\"isAdmin\", [resolvedSignerAddress]);\n  }\n\n  /**\n   * Get whether a signer has permissions to use the account.\n   *\n   * @example\n   * ```javascript\n   * const isAdmin = await contract.account.isSigner(signer);\n   * ```\n   * @param signer - The address of a signer of the account.\n   * @returns whether a signer has permissions to use the account.\n   *\n   * @twfeature AccountPermissions\n   */\n  async isSigner(signerAddress) {\n    const resolvedSignerAddress = await resolveAddress(signerAddress);\n    return await this.contractWrapper.read(\"isActiveSigner\", [resolvedSignerAddress]);\n  }\n\n  /**\n   * Get all admins of the account.\n   *\n   * @example\n   * ```javascript\n   * const allAdmins = await contract.account.getAllAdmins();\n   * ```\n   *\n   * @returns all admins of the account.\n   *\n   * @twfeature AccountPermissions\n   */\n  async getAllAdmins() {\n    return await this.contractWrapper.read(\"getAllAdmins\", []);\n  }\n\n  /**\n   * Get all (non-admin) signers with permissions to use the account.\n   *\n   * @example\n   * ```javascript\n   * const allSigners = await contract.account.getAllSigners();\n   * ```\n   *\n   * @returns all (non-admin) signers with permissions to use the account.\n   *\n   * @twfeature AccountPermissions\n   */\n  async getAllSigners() {\n    const activeSignersWithPerms = await this.contractWrapper.read(\"getAllActiveSigners\", []);\n    return await Promise.all(activeSignersWithPerms.map(async signerWithPermissions => {\n      const signer = signerWithPermissions.signer;\n      const permissions = this.parseSignerPermissionsStruct(signerWithPermissions);\n      return {\n        signer,\n        permissions\n      };\n    }));\n  }\n\n  /**\n   * Get all admins and non-admin signers with permissions to use the account.\n   *\n   * @example\n   * ```javascript\n   * const allAdminsAndSigners = await contract.account.getAllAdminsAndSigners();\n   * ```\n   *\n   * @returns all admins and non-admin signers with permissions to use the account.\n   *\n   * @twfeature AccountPermissions\n   */\n  async getAllAdminsAndSigners() {\n    const allAdmins = await this.getAllAdmins();\n    const transformedAdmins = allAdmins.map(admin => {\n      return {\n        isAdmin: true,\n        signer: admin,\n        permissions: {\n          startDate: new Date(0),\n          expirationDate: new Date(0),\n          nativeTokenLimitPerTransaction: BigNumber.from(0),\n          approvedCallTargets: []\n        }\n      };\n    });\n    const allSigners = await this.getAllSigners();\n    return [...transformedAdmins, ...allSigners];\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars -- TO BE REMOVED IN V4\nclass Account {\n  constructor(contractWrapper) {\n    _defineProperty(this, \"featureName\", FEATURE_ACCOUNT.name);\n    /*********************************\n     * WRITE FUNCTIONS\n     ********************************/\n    /**\n     * Grant an address admin access to the account.\n     *\n     * @remarks Grants an address admin access to the account. The admin will have complete authority over the account.\n     *\n     * @param signer - The address to be granted admin access to the account.\n     *\n     * @example\n     * ```javascript\n     * const tx = await contract.account.grantAdminAccess(signer);\n     * const receipt = tx.receipt();\n     * ```\n     *\n     * @twfeature AccountPermissions\n     */\n    _defineProperty(this, \"grantAdminPermissions\", /* @__PURE__ */buildTransactionFunction(async signerAddress => {\n      return assertEnabled(this.accountPermissions, FEATURE_ACCOUNT_PERMISSIONS).grantAdminPermissions.prepare(signerAddress);\n    }));\n    /**\n     * Revoke an address' admin access to the account.\n     *\n     * @remarks Revokes an address' admin access to the account.\n     *\n     * @param signer - The address of an admin of the account.\n     *\n     * @example\n     * ```javascript\n     * const tx = await contract.account.revokeAdminAccess(signer);\n     * const receipt = tx.receipt();\n     * ```\n     *\n     * @twfeature AccountPermissions\n     */\n    _defineProperty(this, \"revokeAdminPermissions\", /* @__PURE__ */buildTransactionFunction(async signerAddress => {\n      return assertEnabled(this.accountPermissions, FEATURE_ACCOUNT_PERMISSIONS).revokeAdminPermissions.prepare(signerAddress);\n    }));\n    /**\n     * Grant a signer permissions to use the account.\n     *\n     * @remarks Grants a signer permissions to use the account.\n     *\n     * @param signer - The signer to be granted permissions to use the account.\n     * @param permissions - The permissions to be applied to the signer's use of the account.\n     *\n     * @example\n     * ```javascript\n     * const tx = await contract.account.grantPermissions(signer, permissions);\n     * const receipt = tx.receipt();\n     * ```\n     *\n     * @twfeature AccountPermissions\n     */\n    _defineProperty(this, \"grantPermissions\", /* @__PURE__ */buildTransactionFunction(async (signerAddress, permissions) => {\n      return assertEnabled(this.accountPermissions, FEATURE_ACCOUNT_PERMISSIONS).grantPermissions.prepare(signerAddress, permissions);\n    }));\n    /**\n     * Update the permissions of a signer for using the account.\n     *\n     * @remarks Updates the permissions of a signer for using the account.\n     *\n     * @param signer - The signer whose permissions to use the account are to be updated.\n     * @param permissions - The permissions to be applied to the signer's use of the account.\n     *\n     * @example\n     * ```javascript\n     * const tx = await contract.account.updateAccess(signer, restrictions);\n     * const receipt = tx.receipt();\n     * ```\n     *\n     * @twfeature AccountPermissions\n     */\n    _defineProperty(this, \"updatePermissions\", /* @__PURE__ */buildTransactionFunction(async (signerAddress, permissions) => {\n      return assertEnabled(this.accountPermissions, FEATURE_ACCOUNT_PERMISSIONS).updatePermissions.prepare(signerAddress, permissions);\n    }));\n    /**\n     * Revoke a scoped access address to the account\n     *\n     * @remarks Revokes an address' access to the account.\n     *\n     * @param signer - The address whose access to the account is to be revoked.\n     *\n     * @example\n     * ```javascript\n     * const tx = await contract.account.revokeAccess(signer);\n     * const receipt = tx.receipt();\n     * ```\n     *\n     * @twfeature AccountPermissions\n     */\n    _defineProperty(this, \"revokeAccess\", /* @__PURE__ */buildTransactionFunction(async signerAddress => {\n      return assertEnabled(this.accountPermissions, FEATURE_ACCOUNT_PERMISSIONS).revokeAccess.prepare(signerAddress);\n    }));\n    /**\n     * Approve an address as a call target for a given signer on the account\n     *\n     * @remarks Approves an address as a call target for a given signer on the account.\n     *\n     * @param signer - A signer with restricted access to the account.\n     * @param target - The address to approve as a call target for the signer.\n     *\n     * @example\n     * ```javascript\n     * const tx = await contract.account.approveTargetForSigner(signer, target);\n     * const receipt = tx.receipt();\n     * ```\n     *\n     * @twfeature AccountPermissions\n     */\n    _defineProperty(this, \"approveTargetForSigner\", /* @__PURE__ */buildTransactionFunction(async (signerAddress, target) => {\n      return assertEnabled(this.accountPermissions, FEATURE_ACCOUNT_PERMISSIONS).approveTargetForSigner.prepare(signerAddress, target);\n    }));\n    /**\n     * Disapprove an address as a call target for a given signer on the account\n     *\n     * @remarks Disapprove an address as a call target for a given signer on the account.\n     *\n     * @param signer - A signer with restricted access to the account.\n     * @param target - The address to disapprove as a call target for the signer.\n     *\n     * @example\n     * ```javascript\n     * const tx = await contract.account.disapproveTargetForSigner(signer, target);\n     * const receipt = tx.receipt();\n     * ```\n     *\n     * @twfeature AccountPermissions\n     */\n    _defineProperty(this, \"disapproveTargetForSigner\", /* @__PURE__ */buildTransactionFunction(async (signerAddress, target) => {\n      return assertEnabled(this.accountPermissions, FEATURE_ACCOUNT_PERMISSIONS).disapproveTargetForSigner.prepare(signerAddress, target);\n    }));\n    /**\n     * Set the account's entire snapshot of permissions.\n     *\n     * @remarks Sets the account's entire snapshot of permissions.\n     *\n     * @param permissionSnapshot - the snapshot to set as the account's entire permission snapshot.\n     *\n     * @example\n     * ```javascript\n     * const tx = await contract.account.setAccess(permissionSnapshot);\n     * const receipt = tx.receipt();\n     * ```\n     *\n     * @twfeature AccountPermissions\n     */\n    _defineProperty(this, \"resetAllPermissions\", /* @__PURE__ */buildTransactionFunction(async permissionSnapshot => {\n      return assertEnabled(this.accountPermissions, FEATURE_ACCOUNT_PERMISSIONS).resetAllPermissions.prepare(permissionSnapshot);\n    }));\n    this.contractWrapper = contractWrapper;\n    this.accountPermissions = this.detectAccountPermissions();\n  }\n  detectAccountPermissions() {\n    if (detectContractFeature(this.contractWrapper, \"AccountPermissions\")) {\n      return new AccountPermissions(this.contractWrapper);\n    }\n    return undefined;\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /*********************************\n   * READ FUNCTIONS\n   ********************************/\n\n  /**\n   * Get whether a signer is an admin on the account.\n   *\n   * @example\n   * ```javascript\n   * const isAdmin = await contract.account.isAdmin(signer);\n   * ```\n   * @param signer - The address of a signer of the account.\n   * @returns whether a signer is an admin on the account.\n   *\n   * @twfeature AccountPermissions\n   */\n  async isAdmin(signerAddress) {\n    return assertEnabled(this.accountPermissions, FEATURE_ACCOUNT_PERMISSIONS).isAdmin(signerAddress);\n  }\n\n  /**\n   * Get whether a signer has permissions to use the account.\n   *\n   * @example\n   * ```javascript\n   * const isAdmin = await contract.account.isSigner(signer);\n   * ```\n   * @param signer - The address of a signer of the account.\n   * @returns whether a signer has permissions to use the account.\n   *\n   * @twfeature AccountPermissions\n   */\n  async isSigner(signerAddress) {\n    return assertEnabled(this.accountPermissions, FEATURE_ACCOUNT_PERMISSIONS).isSigner(signerAddress);\n  }\n\n  /**\n   * Get all admins of the account.\n   *\n   * @example\n   * ```javascript\n   * const allAdmins = await contract.account.getAllAdmins();\n   * ```\n   *\n   * @returns all admins of the account.\n   *\n   * @twfeature AccountPermissions\n   */\n  async getAllAdmins() {\n    return assertEnabled(this.accountPermissions, FEATURE_ACCOUNT_PERMISSIONS).getAllAdmins();\n  }\n\n  /**\n   * Get all (non-admin) signers with permissions to use the account.\n   *\n   * @example\n   * ```javascript\n   * const allSigners = await contract.account.getAllSigners();\n   * ```\n   *\n   * @returns all (non-admin) signers with permissions to use the account.\n   *\n   * @twfeature AccountPermissions\n   */\n  async getAllSigners() {\n    return assertEnabled(this.accountPermissions, FEATURE_ACCOUNT_PERMISSIONS).getAllSigners();\n  }\n\n  /**\n   * Get all admins and non-admin signers with permissions to use the account.\n   *\n   * @example\n   * ```javascript\n   * const allAdminsAndSigners = await contract.account.getAllAdminsAndSigners();\n   * ```\n   *\n   * @returns all admins and non-admin signers with permissions to use the account.\n   *\n   * @twfeature AccountPermissions\n   */\n  async getAllAdminsAndSigners() {\n    return assertEnabled(this.accountPermissions, FEATURE_ACCOUNT_PERMISSIONS).getAllAdminsAndSigners();\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars -- TO BE REMOVED IN V4\nclass AccountFactory {\n  // utilities\n\n  constructor(contractWrapper) {\n    _defineProperty(this, \"featureName\", FEATURE_ACCOUNT_FACTORY.name);\n    /*********************************\n     * WRITE FUNCTIONS\n     *******************************/\n    /**\n     * Create a account\n     *\n     * @remarks Create a account for an admin. The admin will have complete authority over the account.\n     *\n     * @param admin - The admin of the account.\n     * @param extraData - (Optional) Extra data to be passed to the account on creation.\n     *\n     * @example\n     *  ```javascript\n     * const tx = await contract.accountFactory.createAccount(admin, extraData);\n     * const receipt = tx.receipt();\n     * const accountAddress = tx.address;\n     * ```\n     *\n     * @twfeature AccountFactory\n     */\n    _defineProperty(this, \"createAccount\", /* @__PURE__ */buildTransactionFunction(async (accountAdmin, extraData) => {\n      if (await this.isAccountDeployed(accountAdmin, extraData)) {\n        throw new Error(\"Account already deployed for admin: \".concat(accountAdmin));\n      }\n      let data = utils.toUtf8Bytes(\"\");\n      if (extraData) {\n        data = extraData;\n      }\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"createAccount\",\n        args: [accountAdmin, data],\n        parse: receipt => {\n          const event = this.contractWrapper.parseLogs(\"AccountCreated\", receipt === null || receipt === void 0 ? void 0 : receipt.logs);\n          return {\n            address: event[0].args.account,\n            receipt\n          };\n        }\n      });\n    }));\n    this.contractWrapper = contractWrapper;\n    this.events = new ContractEvents(this.contractWrapper);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /*********************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get the deterministic address of the account that will be created\n   *\n   * @example\n   * ```javascript\n   * const accountAddress = await contract.accountFactory.predictAccountAddress(admin);\n   * ```\n   * @param admin - The admin of the account.\n   * @param extraData - (Optional) Extra data to be passed to the account on creation.\n   * @returns the deterministic address of the account that will be created for the given admin.\n   *\n   * @twfeature AccountFactory\n   */\n  async predictAccountAddress(admin, extraData) {\n    let data = utils.toUtf8Bytes(\"\");\n    if (extraData) {\n      data = extraData;\n    }\n    return this.contractWrapper.read(\"getAddress\", [admin, data]);\n  }\n\n  /**\n   * Get all accounts on which the given signer has authority\n   *\n   * @example\n   * ```javascript\n   * const allAccounts = await contract.accountFactory.getAssociatedAccounts(admin);\n   * ```\n   * @param signer - The account address.\n   * @returns all accounts on which the given signer has authority.\n   *\n   * @twfeature AccountFactory\n   */\n  async getAssociatedAccounts(signer) {\n    return this.contractWrapper.read(\"getAccountsOfSigner\", [signer]);\n  }\n\n  /**\n   * Get all accounts\n   *\n   * @example\n   * ```javascript\n   * const allAccounts = await contract.accountFactory.getAllAccounts();\n   * ```\n   *\n   * @returns all accounts created via the account factory.\n   *\n   * @twfeature AccountFactory\n   */\n  async getAllAccounts() {\n    return await this.contractWrapper.read(\"getAllAccounts\", []);\n  }\n\n  /**\n   * Check if a account has been deployed for the given admin\n   *\n   * @param admin - The admin of the account.\n   * @param extraData - (Optional) Extra data to be passed to the account on creation.\n   * @returns whether the account has been deployed for the given admin.\n   */\n  async isAccountDeployed(admin, extraData) {\n    const addr = await this.predictAccountAddress(admin, extraData);\n    return isContractDeployed(addr, this.contractWrapper.getProvider());\n  }\n}\n\n/**\n * @public\n */\nclass Airdrop1155 {\n  constructor(contractWrapper) {\n    _defineProperty(this, \"featureName\", FEATURE_AIRDROP_ERC1155.name);\n    /** ******************************\n     * WRITE FUNCTIONS\n     *******************************/\n    /**\n     * Perform airdrop of ERC1155 tokens\n     *\n     * @example\n     * ```javascript\n     * // Airdrop content array, with recipients and tokenIds\n     * const contents = [\n     *      {\n     *        recipient: \"0xabc...\", // first recipient address\n     *        tokenId: 0,\n     *        amount: \"10\" // number of tokens\n     *      },\n     *      {\n     *        recipient: \"0x123...\", // second recipient address\n     *        tokenId: 0\n     *        amount: \"20\" // number of tokens\n     *      }\n     *   ]\n     *\n     * const tokenAddress = \"0x...\" // Address of the ERC1155 token being airdropped\n     * const tokenOwner = \"0x...\" // Address of the owner of the tokens being airdropped\n     *\n     * const output = await contract.airdrop1155.drop(tokenAddress, tokenOwner, contents);\n     *\n     * // the `output` return value above contains:\n     * //     - count of successful and failed drops\n     * //     - array containing failed drops, if any\n     *\n     * ```\n     * @param tokenAddress\n     * @param tokenOwner\n     * @param contents\n     *\n     * @returns an array of recipients for who the airdrop failed (empty means all transfers were successful)\n     * @twfeature AirdropERC1155\n     */\n    _defineProperty(this, \"drop\", /* @__PURE__ */buildTransactionFunction(async (tokenAddress, tokenOwner, contents) => {\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"airdropERC1155\",\n        args: [tokenAddress, tokenOwner, contents],\n        parse: receipt => {\n          const events = this.contractWrapper.parseLogs(\"AirdropFailed\", receipt.logs);\n          const failedDrops = events.map(e => {\n            return {\n              recipient: e.args.recipient,\n              tokenId: e.args.tokenId.toNumber(),\n              amount: e.args.amount.toString()\n            };\n          });\n          return {\n            successfulDropCount: contents.length - failedDrops.length,\n            failedDropCount: failedDrops.length,\n            failedDrops\n          };\n        }\n      });\n    }));\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * @internal\n   */\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n}\n\n/**\n * @public\n */\nclass Airdrop20 {\n  constructor(contractWrapper) {\n    _defineProperty(this, \"featureName\", FEATURE_AIRDROP_ERC20.name);\n    /** ******************************\n     * WRITE FUNCTIONS\n     *******************************/\n    /**\n     * Perform airdrop of ERC20 tokens\n     *\n     * @example\n     * ```javascript\n     * // Airdrop content array, with recipients and token amounts\n     * const contents = [\n     *      {\n     *        recipient: \"0xabc...\", // first recipient address\n     *        amount: \"10\" // number of tokens in wei units\n     *      },\n     *      {\n     *        recipient: \"0x123...\", // second recipient address\n     *        amount: \"20\" // number of tokens in wei units\n     *      }\n     *   ]\n     *\n     * const tokenAddress = \"0x...\" // Address of the ERC20 token being airdropped\n     * const tokenOwner = \"0x...\" // Address of the owner of the tokens being airdropped\n     *\n     * const output = await contract.airdrop20.drop(tokenAddress, tokenOwner, contents);\n     *\n     * // the `output` return value above contains:\n     * //     - count of successful and failed drops\n     * //     - array containing failed drops, if any\n     *\n     * ```\n     * @param tokenAddress\n     * @param tokenOwner\n     * @param contents\n     *\n     * @returns an array of recipients for who the airdrop failed (empty means all transfers were successful)\n     * @twfeature AirdropERC20\n     */\n    _defineProperty(this, \"drop\", /* @__PURE__ */buildTransactionFunction(async (tokenAddress, tokenOwner, contents) => {\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"airdropERC20\",\n        args: [tokenAddress, tokenOwner, contents],\n        parse: receipt => {\n          const events = this.contractWrapper.parseLogs(\"AirdropFailed\", receipt.logs);\n          const failedDrops = events.map(e => {\n            return {\n              recipient: e.args.recipient,\n              amount: e.args.amount.toString()\n            };\n          });\n          return {\n            successfulDropCount: contents.length - failedDrops.length,\n            failedDropCount: failedDrops.length,\n            failedDrops\n          };\n        }\n      });\n    }));\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * @internal\n   */\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n}\n\n/**\n * @public\n */\nclass Airdrop721 {\n  constructor(contractWrapper) {\n    _defineProperty(this, \"featureName\", FEATURE_AIRDROP_ERC721.name);\n    /** ******************************\n     * WRITE FUNCTIONS\n     *******************************/\n    /**\n     * Perform airdrop of ERC721 tokens\n     *\n     * @example\n     * ```javascript\n     * // Airdrop content array, with recipients and tokenIds\n     * const contents = [\n     *      {\n     *        recipient: \"0xabc...\", // first recipient address\n     *        tokenId: 0\n     *      },\n     *      {\n     *        recipient: \"0x123...\", // second recipient address\n     *        tokenId: 2\n     *      }\n     *   ]\n     *\n     * const tokenAddress = \"0x...\" // Address of the ERC721 token being airdropped\n     * const tokenOwner = \"0x...\" // Address of the owner of the tokens being airdropped\n     *\n     * const output = await contract.airdrop721.drop(tokenAddress, tokenOwner, contents);\n     *\n     * // the `output` return value above contains:\n     * //     - count of successful and failed drops\n     * //     - array containing failed drops, if any\n     *\n     * ```\n     * @param tokenAddress\n     * @param tokenOwner\n     * @param contents\n     *\n     * @returns an array of recipients for who the airdrop failed (empty means all transfers were successful)\n     * @twfeature AirdropERC721\n     */\n    _defineProperty(this, \"drop\", /* @__PURE__ */buildTransactionFunction(async (tokenAddress, tokenOwner, contents) => {\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"airdropERC721\",\n        args: [tokenAddress, tokenOwner, contents],\n        parse: receipt => {\n          const events = this.contractWrapper.parseLogs(\"AirdropFailed\", receipt.logs);\n          const failedDrops = events.map(e => {\n            return {\n              recipient: e.args.recipient,\n              tokenId: e.args.tokenId.toNumber()\n            };\n          });\n          return {\n            successfulDropCount: contents.length - failedDrops.length,\n            failedDropCount: failedDrops.length,\n            failedDrops\n          };\n        }\n      });\n    }));\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * @internal\n   */\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n}\nclass ExtensionManager {\n  constructor(contractWrapper) {\n    _defineProperty(this, \"featureName\", FEATURE_DYNAMIC_CONTRACT.name);\n    /** ******************************\n     * WRITE FUNCTIONS\n     *******************************/\n    /**\n     * Adds an extension to the contract\n     */\n    _defineProperty(this, \"add\", /* @__PURE__ */buildTransactionFunction(async inputArgs => {\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"addExtension\",\n        args: [inputArgs.extension],\n        parse: async receipt => {\n          const events = this.contractWrapper.parseLogs(\"ExtensionAdded\", receipt.logs);\n          if (events.length < 1) {\n            throw new Error(\"No ExtensionAdded event found\");\n          }\n          const extensionAbi = inputArgs.extensionAbi ? AbiSchema.parse(inputArgs.extensionAbi) : (await fetchContractMetadataFromAddress(inputArgs.extension.metadata.implementation, this.contractWrapper.getProvider(), this.contractWrapper.storage)).abi;\n          const abiToAdd = this.filterAbiForAdd(extensionAbi, inputArgs.extension);\n          const updatedAbi = joinABIs([AbiSchema.parse(this.contractWrapper.abi), abiToAdd]);\n          this.contractWrapper.updateAbi(updatedAbi);\n          return receipt;\n        }\n      });\n    }));\n    /**\n     * Adds a deployed extension to the contract\n     */\n    _defineProperty(this, \"addDeployed\", /* @__PURE__ */buildTransactionFunction(async inputArgs => {\n      let extensionAbi = inputArgs.extensionAbi;\n      if (!extensionAbi) {\n        const metadata = await fetchContractMetadataFromAddress(inputArgs.extensionAddress, this.contractWrapper.getProvider(), this.contractWrapper.storage, this.contractWrapper.options);\n        extensionAbi = metadata.abi;\n      }\n      invariant(extensionAbi, \"Require extension ABI\");\n      let extensionMetadataUri = \"\";\n      if (inputArgs.extensionMetadata) {\n        if (typeof inputArgs.extensionMetadata === \"string\") {\n          extensionMetadataUri = inputArgs.extensionMetadata;\n        } else {\n          const parsedMetadata = await CommonContractSchema.parseAsync(inputArgs.extensionMetadata);\n          extensionMetadataUri = await this.contractWrapper.storage.upload(parsedMetadata);\n        }\n      }\n      const extensionFunctions = generateExtensionFunctions(AbiSchema.parse(extensionAbi));\n      const extension = {\n        metadata: {\n          name: inputArgs.extensionName,\n          metadataURI: extensionMetadataUri,\n          implementation: inputArgs.extensionAddress\n        },\n        functions: extensionFunctions\n      };\n      return this.add.prepare({\n        extension,\n        extensionAbi\n      });\n    }));\n    /**\n     * Adds a published extension to the contract, and deploys it deterministically if necessary\n     */\n    _defineProperty(this, \"addPublished\", /* @__PURE__ */buildTransactionFunction(async inputArgs => {\n      const version = inputArgs.version || \"latest\";\n      const {\n        deployedExtensionAddress,\n        extensionMetadata\n      } = await this.deployExtension(inputArgs.extensionName, inputArgs.publisherAddress || THIRDWEB_DEPLOYER, version);\n      return this.addDeployed.prepare({\n        extensionName: inputArgs.extensionName,\n        extensionAddress: deployedExtensionAddress,\n        extensionMetadata: inputArgs.extensionMetadataOverride || extensionMetadata\n      });\n    }));\n    _defineProperty(this, \"replace\", /* @__PURE__ */buildTransactionFunction(async inputArgs => {\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"replaceExtension\",\n        args: [inputArgs.extension],\n        parse: async receipt => {\n          const events = this.contractWrapper.parseLogs(\"ExtensionReplaced\", receipt.logs);\n          if (events.length < 1) {\n            throw new Error(\"No ExtensionReplaced event found\");\n          }\n          const extensionAbi = inputArgs.extensionAbi ? AbiSchema.parse(inputArgs.extensionAbi) : (await fetchContractMetadataFromAddress(inputArgs.extension.metadata.implementation, this.contractWrapper.getProvider(), this.contractWrapper.storage)).abi;\n          const contractAbi = this.filterAbiForRemove(AbiSchema.parse(this.contractWrapper.abi), extensionAbi);\n          const abiToAdd = this.filterAbiForAdd(extensionAbi, inputArgs.extension);\n          const updatedAbi = joinABIs([contractAbi, abiToAdd]);\n          this.contractWrapper.updateAbi(updatedAbi);\n          return receipt;\n        }\n      });\n    }));\n    _defineProperty(this, \"replaceDeployed\", /* @__PURE__ */buildTransactionFunction(async inputArgs => {\n      let extensionAbi = inputArgs.extensionAbi;\n      if (!extensionAbi) {\n        const metadata = await fetchContractMetadataFromAddress(inputArgs.extensionAddress, this.contractWrapper.getProvider(), this.contractWrapper.storage, this.contractWrapper.options);\n        extensionAbi = metadata.abi;\n      }\n      invariant(extensionAbi, \"Require extension ABI\");\n      let extensionMetadataUri = \"\";\n      if (inputArgs.extensionMetadata) {\n        if (typeof inputArgs.extensionMetadata === \"string\") {\n          extensionMetadataUri = inputArgs.extensionMetadata;\n        } else {\n          const parsedMetadata = await CommonContractSchema.parseAsync(inputArgs.extensionMetadata);\n          extensionMetadataUri = await this.contractWrapper.storage.upload(parsedMetadata);\n        }\n      }\n      const extensionFunctions = generateExtensionFunctions(AbiSchema.parse(extensionAbi));\n      const extension = {\n        metadata: {\n          name: inputArgs.extensionName,\n          metadataURI: extensionMetadataUri,\n          implementation: inputArgs.extensionAddress\n        },\n        functions: extensionFunctions\n      };\n      return this.replace.prepare({\n        extension,\n        extensionAbi\n      });\n    }));\n    _defineProperty(this, \"replacePublished\", /* @__PURE__ */buildTransactionFunction(async inputArgs => {\n      const version = inputArgs.version || \"latest\";\n      const {\n        deployedExtensionAddress,\n        extensionMetadata\n      } = await this.deployExtension(inputArgs.extensionName, inputArgs.publisherAddress || THIRDWEB_DEPLOYER, version);\n      return this.replaceDeployed.prepare({\n        extensionName: inputArgs.extensionName,\n        extensionAddress: deployedExtensionAddress,\n        extensionMetadata: inputArgs.extensionMetadataOverride || extensionMetadata\n      });\n    }));\n    _defineProperty(this, \"remove\", /* @__PURE__ */buildTransactionFunction(async inputArgs => {\n      const extensionAddress = await this.getExtensionAddress(inputArgs.extensionName);\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"removeExtension\",\n        args: [inputArgs.extensionName],\n        parse: async receipt => {\n          const events = this.contractWrapper.parseLogs(\"ExtensionRemoved\", receipt.logs);\n          if (events.length < 1) {\n            throw new Error(\"No ExtensionRemoved event found\");\n          }\n          const extensionAbi = (await fetchContractMetadataFromAddress(extensionAddress, this.contractWrapper.getProvider(), this.contractWrapper.storage)).abi;\n          const updatedAbi = this.filterAbiForRemove(AbiSchema.parse(this.contractWrapper.abi), extensionAbi);\n          this.contractWrapper.updateAbi(updatedAbi);\n          return receipt;\n        }\n      });\n    }));\n    this.contractWrapper = contractWrapper;\n  }\n  getAddress() {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  async getAll() {\n    const extensions = await this.contractWrapper.readContract.getAllExtensions();\n    return extensions;\n  }\n  async get(extensionName) {\n    const extension = await this.contractWrapper.readContract.getExtension(extensionName);\n    return extension;\n  }\n  async getExtensionAddress(extensionName) {\n    const extension = await this.get(extensionName);\n    return extension.metadata.implementation;\n  }\n  async getAllFunctions(extensionName) {\n    const extension = await this.get(extensionName);\n    return extension.functions;\n  }\n  async getExtensionForFunction(functionInput) {\n    let selector = functionInput.functionSelector;\n    if (!selector) {\n      invariant(functionInput.functionSignature, \"Atleast one of function selector and signature must be provided\");\n      selector = utils.id(functionInput.functionSignature).substring(0, 10);\n    }\n    const extensionMetadata = await this.contractWrapper.readContract.getMetadataForFunction(selector);\n    return extensionMetadata;\n  }\n  async getExtensionAddressForFunction(functionInput) {\n    const extensionMetadata = await this.getExtensionForFunction(functionInput);\n    return extensionMetadata.implementation;\n  }\n  /** ******************************\n   * Internal / private\n   *******************************/\n\n  filterAbiForAdd(extensionAbi, extension) {\n    const extensionAbiInterface = new utils.Interface(extensionAbi);\n    const extensionFunctionSelectors = extension.functions.map(fn => fn.functionSelector);\n    const filtered = extensionAbi.filter(item => {\n      const fnFragment = Object.values(new utils.Interface([item]).functions);\n      if (fnFragment.length === 0) {\n        return false;\n      }\n      const fnSigHash = extensionAbiInterface.getSighash(fnFragment[0]);\n      return extensionFunctionSelectors.includes(fnSigHash);\n    });\n    return filtered;\n  }\n  filterAbiForRemove(fullAbi, abiToRemove) {\n    const fullAbiInterface = new utils.Interface(fullAbi);\n    const interfaceToRemove = new utils.Interface(abiToRemove);\n    const functionsToRemove = Object.values(interfaceToRemove.functions).map(fn => interfaceToRemove.getSighash(fn));\n    const filtered = fullAbi.filter(item => {\n      const fnFragment = Object.values(new utils.Interface([item]).functions);\n      if (fnFragment.length === 0) {\n        return false;\n      }\n      const fnSigHash = fullAbiInterface.getSighash(fnFragment[0]);\n      return !functionsToRemove.includes(fnSigHash);\n    });\n    return filtered;\n  }\n  async deployExtension(extensionName, publisherAddress) {\n    var _deploymentInfo$find;\n    let version = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"latest\";\n    const published = await fetchPublishedContractFromPolygon(publisherAddress, extensionName, version, this.contractWrapper.storage, this.contractWrapper.options.clientId, this.contractWrapper.options.secretKey);\n    const deploymentInfo = await getDeploymentInfo(published.metadataUri, this.contractWrapper.storage, this.contractWrapper.getProvider(), \"\", this.contractWrapper.options.clientId, this.contractWrapper.options.secretKey);\n    const implementationAddress = (_deploymentInfo$find = deploymentInfo.find(i => i.type === \"implementation\")) === null || _deploymentInfo$find === void 0 ? void 0 : _deploymentInfo$find.transaction.predictedAddress;\n\n    // deploy infra + plugins + implementation using a throwaway Deployer contract\n\n    // filter out already deployed contracts (data is empty)\n    const transactionsToSend = deploymentInfo.filter(i => i.transaction.data && i.transaction.data.length > 0);\n    const transactionsforDirectDeploy = transactionsToSend.filter(i => {\n      return i.type !== \"infra\";\n    }).map(i => i.transaction);\n    const transactionsForThrowawayDeployer = transactionsToSend.filter(i => {\n      return i.type === \"infra\";\n    }).map(i => i.transaction);\n    const signer = this.contractWrapper.getSigner();\n    invariant(signer, \"Signer is required\");\n\n    // deploy via throwaway deployer, multiple infra contracts in one transaction\n    await deployWithThrowawayDeployer(signer, transactionsForThrowawayDeployer, {});\n\n    // send each transaction directly to Create2 factory\n    // process txns one at a time\n    for (const tx of transactionsforDirectDeploy) {\n      try {\n        await deployContractDeterministic(signer, tx);\n      } catch (e) {\n        console.debug(\"Error deploying contract at \".concat(tx.predictedAddress), e === null || e === void 0 ? void 0 : e.message);\n      }\n    }\n    return {\n      deployedExtensionAddress: implementationAddress,\n      extensionMetadata: published.metadataUri\n    };\n  }\n}\n\n/**\n * Custom contract dynamic class with feature detection\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(provider);\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n *\n * // call any function in your contract\n * await contract.call(\"myCustomFunction\", [param1, param2]);\n *\n * // if your contract follows the ERC721 standard, contract.nft will be present\n * const allNFTs = await contract.erc721.query.all()\n *\n * // if your contract extends IMintableERC721, contract.nft.mint() will be available\n * const tx = await contract.erc721.mint({\n *     name: \"Cool NFT\",\n *     image: readFileSync(\"some_image.png\"),\n *   });\n * ```\n *\n * @beta\n */\nclass SmartContract {\n  // utilities\n\n  get abi() {\n    return AbiSchema.parse(this.contractWrapper.abi || []);\n  }\n\n  /**\n   * Handle royalties\n   */\n  get royalties() {\n    return assertEnabled(this.detectRoyalties(), FEATURE_ROYALTY);\n  }\n\n  /**\n   * Handle permissions\n   */\n  get roles() {\n    return assertEnabled(this.detectRoles(), FEATURE_PERMISSIONS);\n  }\n\n  /**\n   * Handle primary sales\n   */\n  get sales() {\n    return assertEnabled(this.detectPrimarySales(), FEATURE_PRIMARY_SALE);\n  }\n\n  /**\n   * Handle platform fees\n   */\n  get platformFees() {\n    return assertEnabled(this.detectPlatformFees(), FEATURE_PLATFORM_FEE);\n  }\n\n  /**\n   * Set and get the owner of the contract\n   */\n  get owner() {\n    return assertEnabled(this.detectOwnable(), FEATURE_OWNER);\n  }\n\n  /**\n   * Auto-detects ERC20 standard functions.\n   */\n  get erc20() {\n    return assertEnabled(this.detectErc20(), FEATURE_TOKEN);\n  }\n\n  /**\n   * Auto-detects ERC721 standard functions.\n   */\n  get erc721() {\n    return assertEnabled(this.detectErc721(), FEATURE_NFT);\n  }\n\n  /**\n   * Auto-detects ERC1155 standard functions.\n   */\n  get erc1155() {\n    return assertEnabled(this.detectErc1155(), FEATURE_EDITION);\n  }\n\n  /**\n   * Auto-detects AppURI standard functions.\n   */\n  get app() {\n    return assertEnabled(this.detectApp(), FEATURE_APPURI);\n  }\n\n  /**\n   * Direct listings\n   * @remarks Create and manage direct listings in your marketplace.\n   * ```javascript\n   * // Data of the listing you want to create\n   * const listing = {\n   *   // address of the contract the asset you want to list is on\n   *   assetContractAddress: \"0x...\",\n   *   // token ID of the asset you want to list\n   *   tokenId: \"0\",\n   *   // how many of the asset you want to list\n   *   quantity: 1,\n   *   // address of the currency contract that will be used to pay for the listing\n   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n   *   // The price to pay per unit of NFTs listed.\n   *   pricePerToken: 1.5,\n   *   // when should the listing open up for offers\n   *   startTimestamp: new Date(Date.now()),\n   *   // how long the listing will be open for\n   *   endTimestamp: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000),\n   *   // Whether the listing is reserved for a specific set of buyers.\n   *   isReservedListing: false\n   * }\n   *\n   * const tx = await contract.directListings.createListing(listing);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const id = tx.id; // the id of the newly created listing\n   *\n   * // And on the buyers side:\n   * // The ID of the listing you want to buy from\n   * const listingId = 0;\n   * // Quantity of the asset you want to buy\n   * const quantityDesired = 1;\n   *\n   * await contract.directListings.buyFromListing(listingId, quantityDesired);\n   * ```\n   */\n  get directListings() {\n    return assertEnabled(this.detectDirectListings(), FEATURE_DIRECT_LISTINGS);\n  }\n  /**\n   * Auctions\n   * @remarks Create and manage auctions in your marketplace.\n   * @example\n   * ```javascript\n   * // Data of the auction you want to create\n   * const auction = {\n   *   // address of the contract of the asset you want to auction\n   *   assetContractAddress: \"0x...\",\n   *   // token ID of the asset you want to auction\n   *   tokenId: \"0\",\n   *   // how many of the asset you want to auction\n   *   quantity: 1,\n   *   // address of the currency contract that will be used to pay for the auctioned tokens\n   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n   *   // the minimum bid that will be accepted for the token\n   *   minimumBidAmount: \"1.5\",\n   *   // how much people would have to bid to instantly buy the asset\n   *   buyoutBidAmount: \"10\",\n   *   // If a bid is made less than these many seconds before expiration, the expiration time is increased by this.\n   *   timeBufferInSeconds: \"1000\",\n   *   // A bid must be at least this much bps greater than the current winning bid\n   *   bidBufferBps: \"100\", // 100 bps stands for 1%\n   *   // when should the auction open up for bidding\n   *   startTimestamp: new Date(Date.now()),\n   *   // end time of auction\n   *   endTimestamp: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000),\n   * }\n   *\n   * const tx = await contract.englishAuctions.createAuction(auction);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const id = tx.id; // the id of the newly created auction\n   *\n   * // And on the buyers side:\n   * // The auction ID of the asset you want to bid on\n   * const auctionId = 0;\n   * // The total amount you are willing to bid for auctioned tokens\n   * const bidAmount = 1;\n   *\n   * await contract.englishAuctions.makeBid(auctionId, bidAmount);\n   * ```\n   */\n  get englishAuctions() {\n    return assertEnabled(this.detectEnglishAuctions(), FEATURE_ENGLISH_AUCTIONS);\n  }\n\n  /**\n   * Offers\n   * @remarks Make and manage offers.\n   * @example\n   * ```javascript\n   * // Data of the offer you want to make\n   * const offer = {\n   *   // address of the contract the asset you want to make an offer for\n   *   assetContractAddress: \"0x...\",\n   *   // token ID of the asset you want to buy\n   *   tokenId: \"0\",\n   *   // how many of the asset you want to buy\n   *   quantity: 1,\n   *   // address of the currency contract that you offer to pay in\n   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n   *   // Total price you offer to pay for the mentioned token(s)\n   *   totalPrice: \"1.5\",\n   *   // Offer valid until\n   *   endTimestamp: new Date(),\n   * }\n   *\n   * const tx = await contract.offers.makeOffer(offer);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const id = tx.id; // the id of the newly created offer\n   *\n   * // And on the seller's side:\n   * // The ID of the offer you want to accept\n   * const offerId = 0;\n   * await contract.offers.acceptOffer(offerId);\n   * ```\n   */\n  get offers() {\n    return assertEnabled(this.detectOffers(), FEATURE_OFFERS);\n  }\n  get airdrop20() {\n    return assertEnabled(this.detectAirdrop20(), FEATURE_AIRDROP_ERC20);\n  }\n  get airdrop721() {\n    return assertEnabled(this.detectAirdrop721(), FEATURE_AIRDROP_ERC721);\n  }\n  get airdrop1155() {\n    return assertEnabled(this.detectAirdrop1155(), FEATURE_AIRDROP_ERC1155);\n  }\n\n  /**\n   * Account Factory\n   *\n   * @remarks Create accounts and fetch data about them.\n   * @example\n   * ```javascript\n   *\n   * // Predict the address of the account that will be created for an admin.\n   * const deterministicAddress = await contract.accountFactory.predictAccountAddress(admin, extraData);\n   *\n   * // Create accounts\n   * const tx = await contract.accountFactory.createAccount(admin, extraData);\n   * // the same as `deterministicAddress`\n   * const accountAddress = tx.address;\n   *\n   * // Get all accounts created by the factory\n   * const allAccounts = await contract.accountFactory.getAllAccounts();\n   *\n   * // Get all accounts on which a signer has been given authority.\n   * const associatedAccounts = await contract.accountFactory.getAssociatedAccounts(signer);\n   *\n   * // Get all signers who have been given authority on a account.\n   * const associatedSigners = await contract.accountFactory.getAssociatedSigners(accountAddress);\n   *\n   * // Check whether a account has already been created for a given admin.\n   * const isAccountDeployed = await contract.accountFactory.isAccountDeployed(admin, extraData);\n   * ```\n   */\n  get accountFactory() {\n    return assertEnabled(this.detectAccountFactory(), FEATURE_ACCOUNT_FACTORY);\n  }\n\n  // TODO documentation\n  get account() {\n    return assertEnabled(this.detectAccount(), FEATURE_ACCOUNT);\n  }\n  get extensions() {\n    return assertEnabled(this.detectBaseRouter(), FEATURE_DYNAMIC_CONTRACT);\n  }\n  get chainId() {\n    return this._chainId;\n  }\n  constructor(network, address, abi, storage) {\n    let options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options, storage);\n    this._chainId = chainId;\n    this.storage = storage;\n    this.contractWrapper = contractWrapper;\n    this.events = new ContractEvents(this.contractWrapper);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.publishedMetadata = new ContractPublishedMetadata(this.contractWrapper, this.storage);\n    this.metadata = new ContractMetadata(this.contractWrapper, CustomContractSchema, this.storage);\n  }\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /**\n   * Prepare a transaction for sending\n   */\n  prepare(method, args, overrides) {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method,\n      args,\n      overrides\n    });\n  }\n\n  /**\n   * Call any function on this contract\n   * @example\n   * ```javascript\n   * // read functions will return the data from the contract\n   * const myValue = await contract.call(\"myReadFunction\");\n   * console.log(myValue);\n   *\n   * // write functions will return the transaction receipt\n   * const tx = await contract.call(\"myWriteFunction\", [arg1, arg2]);\n   * const receipt = tx.receipt;\n   *\n   * // Optionally override transaction options\n   * await contract.call(\"myWriteFunction\", [arg1, arg2], {\n   *  gasLimit: 1000000, // override default gas limit\n   *  value: ethers.utils.parseEther(\"0.1\"), // send 0.1 ether with the contract call\n   * };\n   * ```\n   * @param functionName - the name of the function to call\n   * @param args - the arguments of the function\n   */\n  async call(functionName, args, overrides) {\n    return this.contractWrapper.call(functionName, args, overrides);\n  }\n\n  /** ********************\n   * FEATURE DETECTION\n   * ********************/\n\n  detectRoyalties() {\n    if (detectContractFeature(this.contractWrapper, \"Royalty\")) {\n      // ContractMetadata is stateless, it's fine to create a new one here\n      // This also makes it not order dependent in the feature detection process\n      const metadata = new ContractMetadata(this.contractWrapper, CustomContractSchema, this.storage);\n      return new ContractRoyalty(this.contractWrapper, metadata);\n    }\n    return undefined;\n  }\n  detectRoles() {\n    if (detectContractFeature(this.contractWrapper, \"Permissions\")) {\n      return new ContractRoles(this.contractWrapper, ALL_ROLES);\n    }\n    return undefined;\n  }\n  detectPrimarySales() {\n    if (detectContractFeature(this.contractWrapper, \"PrimarySale\")) {\n      return new ContractPrimarySale(this.contractWrapper);\n    }\n    return undefined;\n  }\n  detectPlatformFees() {\n    if (detectContractFeature(this.contractWrapper, \"PlatformFee\")) {\n      return new ContractPlatformFee(this.contractWrapper);\n    }\n    return undefined;\n  }\n  detectErc20() {\n    if (detectContractFeature(this.contractWrapper, \"ERC20\")) {\n      return new Erc20(this.contractWrapper, this.storage, this.chainId);\n    }\n    return undefined;\n  }\n  detectErc721() {\n    if (detectContractFeature(this.contractWrapper, \"ERC721\")) {\n      return new Erc721(this.contractWrapper, this.storage, this.chainId);\n    }\n    return undefined;\n  }\n  detectErc1155() {\n    if (detectContractFeature(this.contractWrapper, \"ERC1155\")) {\n      return new Erc1155(this.contractWrapper, this.storage, this.chainId);\n    }\n    return undefined;\n  }\n  detectOwnable() {\n    if (detectContractFeature(this.contractWrapper, \"Ownable\")) {\n      return new ContractOwner(this.contractWrapper);\n    }\n    return undefined;\n  }\n  detectApp() {\n    const metadata = new ContractMetadata(this.contractWrapper, CustomContractSchema, this.storage);\n    if (detectContractFeature(this.contractWrapper, \"AppURI\")) {\n      return new ContractAppURI(this.contractWrapper, metadata, this.storage);\n    } else if (detectContractFeature(this.contractWrapper, \"ContractMetadata\")) {\n      return new ContractAppURI(this.contractWrapper, metadata, this.storage);\n    }\n    return undefined;\n  }\n  detectDirectListings() {\n    if (detectContractFeature(this.contractWrapper, \"DirectListings\")) {\n      return new MarketplaceV3DirectListings(this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n  detectEnglishAuctions() {\n    if (detectContractFeature(this.contractWrapper, \"EnglishAuctions\")) {\n      return new MarketplaceV3EnglishAuctions(this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n  detectOffers() {\n    if (detectContractFeature(this.contractWrapper, \"Offers\")) {\n      return new MarketplaceV3Offers(this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n  detectBaseRouter() {\n    if (detectContractFeature(this.contractWrapper, FEATURE_DYNAMIC_CONTRACT.name)) {\n      return new ExtensionManager(this.contractWrapper);\n    }\n    return undefined;\n  }\n  detectAirdrop20() {\n    if (detectContractFeature(this.contractWrapper, \"AirdropERC20\")) {\n      return new Airdrop20(this.contractWrapper);\n    }\n    return undefined;\n  }\n  detectAirdrop721() {\n    if (detectContractFeature(this.contractWrapper, \"AirdropERC721\")) {\n      return new Airdrop721(this.contractWrapper);\n    }\n    return undefined;\n  }\n  detectAirdrop1155() {\n    if (detectContractFeature(this.contractWrapper, \"AirdropERC1155\")) {\n      return new Airdrop1155(this.contractWrapper);\n    }\n    return undefined;\n  }\n\n  // ========== Account features ==========\n\n  detectAccountFactory() {\n    if (detectContractFeature(this.contractWrapper, FEATURE_ACCOUNT_FACTORY.name)) {\n      return new AccountFactory(this.contractWrapper);\n    }\n    return undefined;\n  }\n  detectAccount() {\n    if (detectContractFeature(this.contractWrapper, FEATURE_ACCOUNT.name)) {\n      return new Account(this.contractWrapper);\n    }\n    return undefined;\n  }\n}\n\n/**\n * Handles publishing contracts (EXPERIMENTAL)\n * @internal\n */\nclass ContractPublisher extends RPCConnectionHandler {\n  constructor(network, options, storage) {\n    super(network, options);\n    /**\n     * @internal\n     * @param profileMetadata\n     */\n    _defineProperty(this, \"updatePublisherProfile\", /* @__PURE__ */buildTransactionFunction(async profileMetadata => {\n      const signer = this.getSigner();\n      invariant(signer, \"A signer is required\");\n      const publisher = await signer.getAddress();\n      const profileUri = await this.storage.upload(profileMetadata);\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.publisher,\n        method: \"setPublisherProfileUri\",\n        args: [publisher, profileUri]\n      });\n    }));\n    _defineProperty(this, \"publish\", /* @__PURE__ */buildTransactionFunction(async (predeployUri, extraMetadata) => {\n      const signer = this.getSigner();\n      invariant(signer, \"A signer is required\");\n      const publisher = await signer.getAddress();\n      const predeployMetadata = await fetchRawPredeployMetadata(predeployUri, this.storage);\n      const compilerMetadata = await fetchContractMetadata(predeployMetadata.metadataUri, this.storage);\n      const isPlugin = isFeatureEnabled(AbiSchema.parse(compilerMetadata.abi), \"PluginRouter\");\n      const isDynamic = isFeatureEnabled(AbiSchema.parse(compilerMetadata.abi), \"DynamicContract\");\n      extraMetadata.routerType = isPlugin ? \"plugin\" : isDynamic ? \"dynamic\" : \"none\";\n\n      // For a dynamic contract Router, try to fetch plugin/extension metadata\n      if (isDynamic || isPlugin) {\n        const defaultExtensions = extraMetadata.defaultExtensions;\n        if (defaultExtensions && defaultExtensions.length > 0) {\n          try {\n            const publishedExtensions = await Promise.all(defaultExtensions.map(e => {\n              return fetchPublishedContractFromPolygon(e.publisherAddress, e.extensionName, e.extensionVersion, this.storage, this.options.clientId, this.options.secretKey);\n            }));\n            const publishedExtensionUris = publishedExtensions.map(ext => ext.metadataUri);\n            const extensionABIs = (await Promise.all(publishedExtensionUris.map(async uri => {\n              return fetchAndCacheDeployMetadata(uri, this.storage);\n            }))).map(fetchedMetadata => fetchedMetadata.compilerMetadata.abi);\n            const composite = joinABIs([compilerMetadata.abi, ...extensionABIs]);\n            extraMetadata.compositeAbi = AbiSchema.parse(composite);\n          } catch {}\n        }\n      }\n\n      // ensure version is incremental\n      const latestContract = await this.getLatest(publisher, predeployMetadata.name);\n      if (latestContract && latestContract.metadataUri) {\n        const latestMetadata = await this.fetchPublishedContractInfo(latestContract);\n        const latestVersion = latestMetadata.publishedMetadata.version;\n        if (!isIncrementalVersion(latestVersion, extraMetadata.version)) {\n          throw Error(\"Version \".concat(extraMetadata.version, \" is not greater than \").concat(latestVersion));\n        }\n      }\n      const fetchedBytecode = await (await this.storage.download(predeployMetadata.bytecodeUri)).text();\n      const bytecode = fetchedBytecode.startsWith(\"0x\") ? fetchedBytecode : \"0x\".concat(fetchedBytecode);\n      const bytecodeHash = utils.solidityKeccak256([\"bytes\"], [bytecode]);\n      const contractId = predeployMetadata.name;\n      const fullMetadata = await FullPublishMetadataSchemaInput.parseAsync({\n        ...extraMetadata,\n        metadataUri: predeployMetadata.metadataUri,\n        bytecodeUri: predeployMetadata.bytecodeUri,\n        name: predeployMetadata.name,\n        analytics: predeployMetadata.analytics,\n        publisher\n      });\n      const fullMetadataUri = await this.storage.upload(fullMetadata);\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.publisher,\n        method: \"publishContract\",\n        args: [publisher, contractId, fullMetadataUri, predeployMetadata.metadataUri, bytecodeHash, constants.AddressZero],\n        parse: receipt => {\n          const events = this.publisher.parseLogs(\"ContractPublished\", receipt.logs);\n          if (events.length < 1) {\n            throw new Error(\"No ContractPublished event found\");\n          }\n          const contract = events[0].args.publishedContract;\n          return {\n            receipt,\n            data: async () => this.toPublishedContract(contract)\n          };\n        }\n      });\n    }));\n    _defineProperty(this, \"unpublish\", /* @__PURE__ */buildTransactionFunction(async (publisher, contractId) => {\n      const resolvedPublisher = await resolveAddress(publisher);\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.publisher,\n        method: \"unpublishContract\",\n        args: [resolvedPublisher, contractId]\n      });\n    }));\n    this.storage = storage;\n    this.publisher = new ContractWrapper(network, getContractPublisherAddress(), ContractPublisherAbi, options, storage);\n  }\n  updateSignerOrProvider(network) {\n    super.updateSignerOrProvider(network);\n    this.publisher.updateSignerOrProvider(network);\n  }\n\n  /**\n   * @internal\n   * @param metadataUri\n   */\n  async extractConstructorParams(metadataUri) {\n    return extractConstructorParams(metadataUri, this.storage);\n  }\n\n  /**\n   * @internal\n   * @param predeployMetadataUri\n   */\n  async extractFunctions(predeployMetadataUri) {\n    return extractFunctions(predeployMetadataUri, this.storage);\n  }\n\n  /**\n   * @internal\n   * @param predeployUri\n   */\n  async fetchCompilerMetadataFromPredeployURI(predeployUri) {\n    return fetchPreDeployMetadata(predeployUri, this.storage);\n  }\n\n  /**\n   * @internal\n   * @param prepublishUri\n   * @param publisherAddress\n   */\n  async fetchPrePublishMetadata(prepublishUri, publisherAddress) {\n    const preDeployMetadataFetched = await fetchPreDeployMetadata(prepublishUri, this.storage);\n    const latestPublishedContract = publisherAddress ? await this.getLatest(publisherAddress, preDeployMetadataFetched.name) : undefined;\n    const latestPublishedContractMetadata = latestPublishedContract ? await this.fetchPublishedContractInfo(latestPublishedContract) : undefined;\n    return {\n      preDeployMetadata: preDeployMetadataFetched,\n      latestPublishedContractMetadata\n    };\n  }\n\n  /**\n   * @internal\n   * @param address\n   */\n  async fetchCompilerMetadataFromAddress(address) {\n    const resolvedAddress = await resolveAddress(address);\n    return fetchContractMetadataFromAddress(resolvedAddress, this.getProvider(), this.storage, this.options);\n  }\n\n  /**\n   * @internal\n   * Get the full information about a published contract\n   * @param contract\n   */\n  async fetchPublishedContractInfo(contract) {\n    return {\n      name: contract.id,\n      publishedTimestamp: contract.timestamp,\n      publishedMetadata: await this.fetchFullPublishMetadata(contract.metadataUri)\n    };\n  }\n\n  /**\n   * @internal\n   * @param publishedMetadataUri\n   */\n  async fetchFullPublishMetadata(publishedMetadataUri) {\n    return fetchExtendedReleaseMetadata(publishedMetadataUri, this.storage);\n  }\n\n  /**\n   * @internal\n   * // TODO expose a resolvePublishMetadata(contractAddress, chainId) that handles the dual chain case\n   * // TODO will be easy to do with the multichain pattern of 3.0\n   * @param compilerMetadataUri\n   */\n  async resolvePublishMetadataFromCompilerMetadata(compilerMetadataUri) {\n    const publishedMetadataUri = await this.publisher.read(\"getPublishedUriFromCompilerUri\", [compilerMetadataUri]);\n    if (publishedMetadataUri.length === 0) {\n      throw Error(\"Could not resolve published metadata URI from \".concat(compilerMetadataUri));\n    }\n    return await Promise.all(publishedMetadataUri.filter(uri => uri.length > 0).map(uri => this.fetchFullPublishMetadata(uri)));\n  }\n\n  /**\n   * @internal\n   * TODO clean this up (see method above, too)\n   */\n  async resolveContractUriFromAddress(address) {\n    const resolvedAddress = await resolveAddress(address);\n    const contractUri = await resolveContractUriFromAddress(resolvedAddress, this.getProvider());\n    invariant(contractUri, \"Could not resolve contract URI from address\");\n    return contractUri;\n  }\n\n  /**\n   * @internal\n   * @param address\n   */\n  async fetchContractSourcesFromAddress(address) {\n    const resolvedAddress = await resolveAddress(address);\n    const metadata = await this.fetchCompilerMetadataFromAddress(resolvedAddress);\n    return await fetchSourceFilesFromMetadata(metadata, this.storage);\n  }\n  /**\n   * @internal\n   * @param publisherAddress\n   */\n  async getPublisherProfile(publisherAddress) {\n    const resolvedPublisherAddress = await resolveAddress(publisherAddress);\n    const profileUri = await this.publisher.read(\"getPublisherProfileUri\", [resolvedPublisherAddress]);\n    if (!profileUri || profileUri.length === 0) {\n      return {};\n    }\n    return ProfileSchemaOutput.parse(await this.storage.downloadJSON(profileUri));\n  }\n\n  /**\n   * @internal\n   * @param publisherAddress\n   */\n  async getAll(publisherAddress) {\n    const resolvedPublisherAddress = await resolveAddress(publisherAddress);\n    const data = await this.publisher.read(\"getAllPublishedContracts\", [resolvedPublisherAddress]);\n    // since we can fetch from multiple publisher contracts, just keep the latest one in the list\n    const map = data.reduce((acc, curr) => {\n      // replaces the previous contract with the latest one\n      acc[curr.contractId] = curr;\n      return acc;\n    }, {});\n    return Object.entries(map).map(_ref => {\n      let [, struct] = _ref;\n      return this.toPublishedContract(struct);\n    });\n  }\n\n  /**\n   * @internal\n   * @param publisherAddress\n   * @param contractId\n   */\n  async getAllVersions(publisherAddress, contractId) {\n    const resolvedPublisherAddress = await resolveAddress(publisherAddress);\n    const contractStructs = await this.publisher.read(\"getPublishedContractVersions\", [resolvedPublisherAddress, contractId]);\n    if (contractStructs.length === 0) {\n      throw Error(\"Not found\");\n    }\n    return contractStructs.map(d => this.toPublishedContract(d));\n  }\n  async getVersion(publisherAddress, contractId) {\n    let version = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"latest\";\n    const resolvedPublisherAddress = await resolveAddress(publisherAddress);\n    if (version === \"latest\") {\n      return this.getLatest(resolvedPublisherAddress, contractId);\n    }\n    const allVersions = await this.getAllVersions(resolvedPublisherAddress, contractId);\n    // get the metadata for each version\n    const versionMetadata = await Promise.all(allVersions.map(contract => this.fetchPublishedContractInfo(contract)));\n    // find the version that matches the version string\n    const versionMatch = versionMetadata.find(metadata => metadata.publishedMetadata.version === version);\n    invariant(versionMatch, \"Contract version not found\");\n    // match the version back to the contract based on the published timestamp\n    return allVersions.find(contract => contract.timestamp === versionMatch.publishedTimestamp);\n  }\n  async getLatest(publisherAddress, contractId) {\n    const resolvedPublisherAddress = await resolveAddress(publisherAddress);\n    const model = await this.publisher.read(\"getPublishedContract\", [resolvedPublisherAddress, contractId]);\n    if (model && model.publishMetadataUri) {\n      return this.toPublishedContract(model);\n    }\n    return undefined;\n  }\n  toPublishedContract(contractModel) {\n    return PublishedContractSchema.parse({\n      id: contractModel.contractId,\n      timestamp: contractModel.publishTimestamp,\n      metadataUri: contractModel.publishMetadataUri\n    });\n  }\n}\nexport { MintRequest721withQuantity as $, AbiTypeSchema as A, BYOCContractMetadataSchema as B, CustomContractInput as C, DeployTypeInput as D, ExtraPublishMetadataSchemaInput as E, FactoryDeploymentSchema as F, CommonPlatformFeeSchema as G, CommonTrustedForwarderSchema as H, CommonSymbolSchema as I, CurrencySchema as J, CurrencyValueSchema as K, BaseSignaturePayloadInput as L, Signature20PayloadInput as M, Signature20PayloadOutput as N, Signature721PayloadInput as O, PreDeployMetadata as P, Signature721PayloadOutput as Q, RouterTypeInput as R, StaticJsonRpcBatchProvider as S, Signature1155PayloadInput as T, Signature1155PayloadInputWithTokenId as U, Signature1155PayloadOutput as V, Signature721WithQuantityInput as W, Signature721WithQuantityOutput as X, MintRequest20 as Y, MintRequest721 as Z, MintRequest1155 as _, CustomContractOutput as a, prepareGaslessRequest as a$, GenericRequest as a0, MerkleSchema as a1, SnapshotEntryInput as a2, SnapshotInputSchema as a3, SnapshotEntryWithProofSchema as a4, SnapshotSchema as a5, SnapshotInfoSchema as a6, BigNumberSchema as a7, BigNumberishSchema as a8, BigNumberTransformSchema as a9, Erc721Supply as aA, Erc721Enumerable as aB, Erc721TieredDrop as aC, Erc721 as aD, Erc721WithQuantitySignatureMintable as aE, Erc721Burnable as aF, Erc1155BatchMintable as aG, Erc1155Burnable as aH, Erc1155Enumerable as aI, Erc1155LazyMintable as aJ, Erc1155Mintable as aK, Erc1155 as aL, Erc1155SignatureMintable as aM, MarketplaceV3DirectListings as aN, MarketplaceV3EnglishAuctions as aO, MarketplaceV3Offers as aP, GasCostEstimator as aQ, ContractEvents as aR, ContractInterceptor as aS, ContractPlatformFee as aT, ContractPublishedMetadata as aU, ContractOwner as aV, Transaction as aW, DeployTransaction as aX, defaultGaslessSendFunction as aY, biconomySendFunction as aZ, defenderSendFunction as a_, AddressSchema as aa, AddressOrEnsSchema as ab, RawDateSchema as ac, StartDateSchema as ad, EndDateSchema as ae, CallOverrideSchema as af, ContractEncoder as ag, ContractMetadata as ah, ContractRoles as ai, ContractRoyalty as aj, ContractPrimarySale as ak, DelayedReveal as al, DropClaimConditions as am, DropErc1155ClaimConditions as an, Erc20BatchMintable as ao, Erc20Burnable as ap, Erc20ClaimableWithConditions as aq, Erc20Droppable as ar, Erc20Mintable as as, Erc20SignatureMintable as at, Erc20 as au, Erc721BatchMintable as av, Erc721ClaimableWithConditions as aw, Erc721Claimable as ax, Erc721LazyMintable as ay, Erc721Mintable as az, CustomContractDeploy as b, resolveImplementation as b$, ContractAppURI as b0, Account as b1, AccountFactory as b2, SignerPermissionsSchema as b3, PermissionSnapshotSchema as b4, SignerPermissionRequest as b5, Status as b6, ClaimEligibility as b7, isNativeToken as b8, cleanCurrencyAddress as b9, AdminRoleMissingError as bA, AuctionHasNotEndedError as bB, ExtensionNotImplementedError as bC, TransactionError as bD, parseRevertReason as bE, includesErrorMessage as bF, createSnapshot as bG, ALL_ROLES as bH, getRoleHash as bI, fetchContractMetadataFromAddress as bJ, fetchAbiFromAddress as bK, getDefaultGasOverrides as bL, getDynamicFeeData as bM, getGasPrice as bN, getPolygonGasPriorityFee as bO, fetchContractMetadata as bP, hasMatchingAbi as bQ, matchesAbiFromBytecode as bR, extractConstructorParams as bS, extractFunctions as bT, extractCommentFromMetadata as bU, extractConstructorParamsFromAbi as bV, extractFunctionsFromAbi as bW, extractEventsFromAbi as bX, extractMinimalProxyImplementationAddress as bY, resolveContractUriFromAddress as bZ, resolveContractUriAndBytecode as b_, normalizePriceValue as ba, fetchCurrencyMetadata as bb, fetchCurrencyValue as bc, setErc20Allowance as bd, approveErc20Allowance as be, normalizeAmount as bf, toWei as bg, convertToReadableQuantity as bh, fetchSnapshotEntryForAddress as bi, NotFoundError as bj, InvalidAddressError as bk, MissingRoleError as bl, AssetNotFoundError as bm, UploadError as bn, FileNameMissingError as bo, DuplicateFileNameError as bp, NotEnoughTokensError as bq, MissingOwnerRoleError as br, QuantityAboveLimitError as bs, FetchError as bt, DuplicateLeafsError as bu, AuctionAlreadyStartedError as bv, FunctionDeprecatedError as bw, ListingNotFoundError as bx, WrongListingTypeError as by, RestrictedTransferError as bz, CustomContractSchema as c, getChainProvider as c$, extractIPFSHashFromBytecode as c0, fetchRawPredeployMetadata as c1, fetchPreDeployMetadata as c2, fetchExtendedReleaseMetadata as c3, detectFeatures as c4, detectFeaturesFromBytecode as c5, getAllDetectedFeatures as c6, getAllDetectedExtensionsFromBytecode as c7, constructAbiFromBytecode as c8, getAllDetectedExtensions as c9, getDeploymentInfo as cA, deployWithThrowawayDeployer as cB, computeDeploymentInfo as cC, encodeConstructorParamsForImplementation as cD, getCreate2FactoryDeploymentInfo as cE, THIRDWEB_DEPLOYER as cF, fetchPublishedContractFromPolygon as cG, fetchAndCacheDeployMetadata as cH, estimateGasForDeploy as cI, createTransactionBatches as cJ, resolveEns as cK, resolveAddress as cL, OZ_DEFENDER_FORWARDER_ADDRESS as cM, CONTRACT_ADDRESSES as cN, getContractAddressByChainId as cO, getContractPublisherAddress as cP, getMultichainRegistryAddress as cQ, ChainId as cR, setSupportedChains as cS, getSupportedChains as cT, InterfaceId_IERC721 as cU, InterfaceId_IERC1155 as cV, NATIVE_TOKEN_ADDRESS as cW, NATIVE_TOKENS as cX, getNativeTokenByChainId as cY, LINK_TOKEN_ADDRESS as cZ, EventType as c_, isFeatureEnabled as ca, isExtensionEnabled as cb, assertEnabled as cc, detectContractFeature as cd, hasFunction as ce, joinABIs as cf, toSemver as cg, isIncrementalVersion as ch, isDowngradeVersion as ci, fetchSourceFilesFromMetadata as cj, CREATE2_FACTORY_BYTECODE as ck, SIGNATURE as cl, COMMON_FACTORY as cm, GAS_LIMIT_FOR_DEPLOYER as cn, DEPLOYER_BYTECODE as co, DEPLOYER_ABI as cp, isContractDeployed as cq, isEIP155Enforced as cr, getCreate2FactoryAddress as cs, getSaltHash as ct, getInitBytecodeWithSalt as cu, computeDeploymentAddress as cv, computeEOAForwarderAddress as cw, computeForwarderAddress as cx, getKeylessTxn as cy, deployContractDeterministic as cz, AbiObjectSchema as d, SplitsContractSchema as d$, getChainIdFromNetwork as d0, getChainIdOrName as d1, isChainConfig as d2, getProviderFromRpcUrl as d3, getSignerAndProvider as d4, SUPPORTED_FEATURES as d5, EditionDropInitializer as d6, EditionInitializer as d7, MarketplaceInitializer as d8, MarketplaceV3Initializer as d9, getCompositePluginABI as dA, buildDeployTransactionFunction as dB, getProcessEnv as dC, DropErc721ContractSchema as dD, mapOffer as dE, fetchTokenMetadataForContract as dF, isTokenApprovedForTransfer as dG, validateNewListingParam as dH, handleTokenApproval as dI, isWinningBid as dJ, NFT_BASE_CONTRACT_ROLES as dK, DropErc1155ContractSchema as dL, TokenErc1155ContractSchema as dM, MARKETPLACE_CONTRACT_ROLES as dN, MarketplaceContractSchema as dO, FEATURE_DIRECT_LISTINGS as dP, FEATURE_ENGLISH_AUCTIONS as dQ, FEATURE_OFFERS as dR, MULTIWRAP_CONTRACT_ROLES as dS, MultiwrapContractSchema as dT, uploadOrExtractURI as dU, TokenErc721ContractSchema as dV, FEATURE_NFT_REVEALABLE as dW, FEATURE_PACK_VRF as dX, PACK_CONTRACT_ROLES as dY, PackContractSchema as dZ, ADMIN_ROLE as d_, MultiwrapInitializer as da, NFTCollectionInitializer as db, NFTDropInitializer as dc, PackInitializer as dd, SignatureDropInitializer as de, SplitInitializer as df, TokenDropInitializer as dg, TokenInitializer as dh, VoteInitializer as di, PREBUILT_CONTRACTS_MAP as dj, PREBUILT_CONTRACTS_APPURI_MAP as dk, CONTRACTS_MAP as dl, getContractTypeForRemoteName as dm, getContractName as dn, isProvider as dp, isSigner as dq, AddressZero as dr, extractFeatures as ds, CUSTOM_GAS_FOR_CHAIN as dt, RPCConnectionHandler as du, signTypedDataInternal as dv, ContractWrapper as dw, buildTransactionFunction as dx, ContractPublisher as dy, SmartContract as dz, AbiSchema as e, TOKEN_DROP_CONTRACT_ROLES as e0, DropErc20ContractSchema as e1, TokenErc20ContractSchema as e2, VoteContractSchema as e3, ChainIdToAddressSchema as f, CustomFactoryInput as g, DeploymentNetworkInput as h, ExtraPublishMetadataSchemaOutput as i, FullPublishMetadataSchemaInput as j, FullPublishMetadataSchemaOutput as k, ProfileSchemaInput as l, ProfileSchemaOutput as m, PublishedContractSchema as n, ContractInfoSchema as o, CompilerMetadataFetchedSchema as p, PreDeployMetadataFetchedSchema as q, ClaimConditionMetadataSchema as r, ClaimConditionInputSchema as s, ClaimConditionInputArray as t, PartialClaimConditionInputSchema as u, ClaimConditionOutputSchema as v, CommonContractSchema as w, CommonContractOutputSchema as x, CommonRoyaltySchema as y, CommonPrimarySaleSchema as z };","map":{"version":3,"names":["Q","QuantitySchema","A","AmountSchema","B","BytesLikeSchema","N","NFTInputOrUriSchema","a","BasisPointsSchema","F","FileOrBufferOrStringSchema","P","PercentSchema","C","CommonNFTOutput","b","CommonNFTInput","D","DEFAULT_QUERY_ALL_COUNT","c","BasicNFTInput","M","MAX_BPS","z","BigNumber","providers","utils","constants","Contract","ContractFactory","invariant","v4","isBrowser","isBrowser$1","isFileOrBuffer","replaceGatewayUrlWithScheme","ERC165Abi","IERC721MetadataAbi","Erc1155MetadataAbi","ERC20Abi","IERC20MetadataAbi","deepEqual","MerkleTree","IThirdwebContractABI","DeprecatedAbi","Erc1155Abi","Erc721Abi","ContractPublisherAbi","defaultChains","getValidChainRPCs","Polygon","Mumbai","bs58","TWRegistryABI","IBurnableERC20Abi","IDrop","DropERC20_V2Abi","IDropSinglePhase","IDropSinglePhaseV1","IERC20PermitAbi","IMintableERC20Abi","MulticallAbi","ISignatureMintERC20Abi","IBurnableERC721Abi","IClaimableERC721","DelayedRevealAbi","DropERC721_V3Abi","Erc721EnumerableAbi","Erc721AQueryableAbi","Erc721SupplyAbi","ILazyMintAbi","IMintableERC721Abi","SignatureMintERC721Abi","SignatureMintERC721_V1Abi","TieredDropAbi","SharedMetadataAbi","zora_IDropERC721","ILoyaltyCardAbi","INFTMetadataAbi","IBurnableERC1155Abi","IClaimableERC1155","IDropMultiPhase1155","DropERC1155_V2Abi","IDropSinglePhase1155","IDropSinglePhase1155_V1","Erc1155SupplyAbi","Erc1155EnumerableAbi","IMintableERC1155Abi","ISignatureMintERC1155Abi","IERC2771ContextAbi","IAppURI","IContractMetadataAbi","IDirectListingsAbi","IEnglishAuctionsAbi","IOffersAbi","IPackVRFAbi","IPermissionsAbi","IPermissionsEnumerableAbi","IThirdwebPlatformFeeAbi","IThirdwebPrimarySaleAbi","IThirdwebRoyaltyAbi","IOwnableAbi","IAirdropERC20","IAirdropERC721","IAirdropERC1155","IAccountFactoryCore","IAccountPermissions","IAccount","Interface","ForwarderABI","fetch","EventEmitter","MAX_LENGTH","NUMERIC_IDENTIFIER","MAIN_VERSION_IDENTIFIER","concat","REGEX_MAIN_VERSION","RegExp","toSemver","version","length","Error","matches","trim","match","major","Number","minor","patch","versionString","join","isIncrementalVersion","current","next","currentSemver","nextSemver","eqMajor","eqMinor","isDowngradeVersion","BigNumberSchema","union","string","number","bigint","custom","data","isBigNumber","transform","arg","from","BigNumberishSchema","toString","BigNumberTransformSchema","isSigner","value","_isSigner","isProvider","_isProvider","DEFAULT_BATCH_TIME_LIMIT_MS","DEFAULT_BATCH_SIZE_LIMIT","DEFAULT_BATCH_OPTIONS","timeLimitMs","sizeLimit","StaticJsonRpcBatchProvider","StaticJsonRpcProvider","constructor","url","network","batchOptions","arguments","undefined","_timeLimitMs","_sizeLimit","_pendingBatchAggregator","_pendingBatch","sendCurrentBatch","request","clearTimeout","batch","request_","map","inflight","emit","action","deepCopy","provider","fetchJson","connection","JSON","stringify","then","result","response","forEach","inflightRequest_","index","payload","error","message","code","reject","resolve","send","method","params","id","_nextId","jsonrpc","inflightRequest","promise","Promise","push","setTimeout","ChainInfoInputSchema","object","rpc","array","chainId","nativeCurrency","name","symbol","decimals","slug","SDKOptionsSchema","supportedChains","default","clientId","optional","secretKey","readonlySettings","rpcUrl","gasSettings","maxPriceInGwei","min","speed","enum","gasless","openzeppelin","relayerUrl","relayerForwarderAddress","useEOAForwarder","boolean","domainName","domainVersion","experimentalChainlessSupport","biconomy","apiId","apiKey","deadlineSeconds","gatewayUrls","pkg","description","repository","license","main","module","browser","exports","files","preconstruct","entrypoints","envConditions","sideEffects","scripts","format","lint","fix","clean","build","devDependencies","chai","eslint","ethers","hardhat","mocha","nyc","prettier","typescript","peerDependencies","peerDependenciesMeta","dependencies","abitype","buffer","eventemitter3","merkletreejs","tweetnacl","uuid","yaml","zod","bugs","author","buildDefaultMap","options","reduce","previousValue","currentValue","getChainProvider","sdkOptions","isRpcUrl","getProviderFromRpcUrl","parse","isChainConfig","filter","rpcMap","getChainIdFromNetwork","e","chainNameToId","acc","curr","getChainIdOrName","getNetwork","n","toLowerCase","RPC_PROVIDER_MAP","Map","headers","authStrategy","isTwUrl","pto","crypto","require","hashedSecretKey","createHash","update","digest","derivedClientId","slice","utilizedRpcUrl","URL","pathname","globalThis","TW_AUTH_TOKEN","TW_CLI_AUTH_TOKEN","bundleId","APP_BUNDLE_ID","includes","window","bridge","seralizedOpts","existingProvider","get","newProvider","JsonRpcBatchProvider","set","WebSocketProvider","getDefaultProvider","hostname","endsWith","getSignerAndProvider","signer","ENS_CACHE","resolveEns","ens","depth","ensPromise","has","resolveName","address","expirationTime","Date","now","resolvedPromise","delete","EnsSchema","refine","isAddress","AddressSchema","out","AddressOrEnsSchema","invalid_type_error","ChainId","setSupportedChains","chains","getSupportedChains","NATIVE_TOKEN_ADDRESS","NATIVE_TOKENS","Mainnet","wrapped","Goerli","Avalanche","AvalancheFujiTestnet","Fantom","FantomTestnet","Arbitrum","ArbitrumGoerli","Optimism","OptimismGoerli","BinanceSmartChainMainnet","BinanceSmartChainTestnet","Hardhat","Localhost","getNativeTokenByChainId","chain","find","AddressZero","LINK_TOKEN_ADDRESS","RawDateSchema","date","i","Math","floor","getTime","StartDateSchema","EndDateSchema","CurrencySchema","CurrencyValueSchema","extend","displayValue","MerkleSchema","merkle","record","SnapshotEntryInput","maxClaimable","price","currencyAddress","SnapshotInputSchema","strings","all","parseAsync","SnapshotEntryWithProofSchema","proof","SnapshotSchema","merkleRoot","claims","SnapshotInfoSchema","snapshotUri","ClaimConditionMetadataSchema","catchall","unknown","ClaimConditionInputSchema","startTime","maxClaimableSupply","maxClaimablePerWallet","waitInSeconds","merkleRootHash","hexZeroPad","snapshot","nullable","metadata","ClaimConditionInputArray","PartialClaimConditionInputSchema","partial","ClaimConditionOutputSchema","availableSupply","currentMintSupply","currencyMetadata","toNumber","resolveOrGenerateId","requestUId","Buffer","alloc","hexlify","toUtf8Bytes","BaseSignaturePayloadInput","to","mintStartTime","mintEndTime","uid","primarySaleRecipient","Signature20PayloadInput","quantity","Signature20PayloadOutput","Signature721PayloadInput","royaltyRecipient","royaltyBps","Signature721PayloadOutput","uri","Signature1155PayloadInput","Signature1155PayloadInputWithTokenId","tokenId","Signature1155PayloadOutput","Signature721WithQuantityInput","Signature721WithQuantityOutput","MintRequest20","type","MintRequest721","MintRequest1155","MintRequest721withQuantity","GenericRequest","CommonContractSchema","image","external_link","app_uri","social_urls","CommonContractOutputSchema","CommonRoyaltySchema","seller_fee_basis_points","fee_recipient","CommonPrimarySaleSchema","primary_sale_recipient","CommonPlatformFeeSchema","platform_fee_basis_points","platform_fee_recipient","CommonTrustedForwarderSchema","trusted_forwarders","CommonSymbolSchema","BYOCContractMetadataSchema","CustomContractInput","merge","any","CustomContractOutput","CustomContractDeploy","CustomContractSchema","deploy","output","input","AbiTypeBaseSchema","AbiTypeSchema","stateMutability","components","AbiObjectSchema","inputs","outputs","AbiSchema","PreDeployMetadata","metadataUri","bytecodeUri","analytics","ChainIdToAddressSchema","CustomFactoryInput","factoryFunction","customFactoryAddresses","FactoryDeploymentSchema","implementationAddresses","implementationInitializerFunction","customFactoryInput","factoryAddresses","DeployTypeInput","literal","RouterTypeInput","DeploymentNetworkInput","allNetworks","networksEnabled","ExtraPublishMetadataSchemaInput","v","displayName","readme","changelog","tags","audit","logo","isDeployableViaFactory","isDeployableViaProxy","factoryDeploymentData","deployType","routerType","defaultExtensions","extensionName","extensionVersion","publisherAddress","networksForDeployment","constructorParams","defaultValue","hidden","compositeAbi","ExtraPublishMetadataSchemaOutput","FullPublishMetadataSchemaInput","publisher","FullPublishMetadataSchemaOutput","ProfileSchemaInput","bio","avatar","website","twitter","telegram","facebook","github","medium","linkedin","reddit","discord","ProfileSchemaOutput","PublishedContractSchema","timestamp","ContractInfoSchema","title","details","notice","CompilerMetadataFetchedSchema","abi","info","licenses","isPartialAbi","PreDeployMetadataFetchedSchema","bytecode","CallOverrideSchema","gasLimit","gasPrice","maxFeePerGas","maxPriorityFeePerGas","nonce","blockTag","strict","ContractEncoder","contractWrapper","encode","fn","args","readContract","interface","encodeFunctionData","decode","encodedArgs","decodeFunctionData","NotFoundError","identifier","InvalidAddressError","MissingRoleError","role","AssetNotFoundError","UploadError","FileNameMissingError","DuplicateFileNameError","fileName","NotEnoughTokensError","contractAddress","available","MissingOwnerRoleError","QuantityAboveLimitError","FetchError","innerError","DuplicateLeafsError","AuctionAlreadyStartedError","FunctionDeprecatedError","ListingNotFoundError","marketplaceContractAddress","listingId","WrongListingTypeError","actualType","expectedType","RestrictedTransferError","assetAddress","AdminRoleMissingError","AuctionHasNotEndedError","endTime","ExtensionNotImplementedError","feature","_reason","WeakMap","_info","_raw","TransactionError","raw","errorMessage","reason","withSpaces","contractName","e2","hash","gt","_NATIVE_TOKENS$info$n","formatEther","sources","revertFile","file","source","lines","split","line","revertLine","findIndex","errorLines","filename","replace","_classPrivateFieldInitSpec","writable","_classPrivateFieldSet","_classPrivateFieldGet","parseRevertReason","errorString","parseMessageParts","label","content","spaces","Array","fill","regex","msgMatches","extracted","includesErrorMessage","err","FEATURE_TOKEN_CLAIM_CONDITIONS_V1","namespace","docLinks","sdk","contracts","abis","features","FEATURE_TOKEN_CLAIM_CONDITIONS_V2","FEATURE_TOKEN_CLAIM_PHASES_V2","FEATURE_TOKEN_CLAIM_PHASES_V1","FEATURE_TOKEN_BURNABLE","FEATURE_TOKEN_SIGNATURE_MINTABLE","FEATURE_TOKEN_BATCH_MINTABLE","FEATURE_TOKEN_MINTABLE","FEATURE_TOKEN_PERMIT","FEATURE_TOKEN","FEATURE_NFT_BURNABLE","FEATURE_NFT_REVEALABLE","FEATURE_NFT_TIERED_DROP","FEATURE_NFT_CLAIM_CONDITIONS_V1","FEATURE_NFT_CLAIM_CONDITIONS_V2","FEATURE_NFT_CLAIM_PHASES_V1","FEATURE_NFT_CLAIM_PHASES_V2","FEATURE_NFT_CLAIM_CUSTOM","FEATURE_NFT_CLAIM_ZORA","FEATURE_NFT_LAZY_MINTABLE","FEATURE_NFT_BATCH_MINTABLE","FEATURE_NFT_MINTABLE","FEATURE_NFT_SIGNATURE_MINTABLE_V2","FEATURE_NFT_SIGNATURE_MINTABLE_V1","FEATURE_NFT_ENUMERABLE","FEATURE_NFT_QUERYABLE","FEATURE_NFT_SUPPLY","FEATURE_NFT_SHARED_METADATA","FEATURE_NFT_LOYALTY_CARD","FEATURE_NFT_UPDATABLE_METADATA","FEATURE_NFT","NAME_SYMBOL_ABI","internalType","FEATURE_EDITION_BURNABLE","FEATURE_EDITION_CLAIM_CONDITIONS_V1","FEATURE_EDITION_CLAIM_CONDITIONS_V2","FEATURE_EDITION_CLAIM_PHASES_V2","FEATURE_EDITION_CLAIM_PHASES_V1","FEATURE_EDITION_CLAIM_CUSTOM","FEATURE_EDITION_REVEALABLE","FEATURE_EDITION_LAZY_MINTABLE_V2","FEATURE_EDITION_LAZY_MINTABLE_V1","FEATURE_EDITION_SIGNATURE_MINTABLE","FEATURE_EDITION_BATCH_MINTABLE","FEATURE_EDITION_MINTABLE","FEATURE_EDITION_ENUMERABLE","FEATURE_EDITION_UPDATABLE_METADATA","FEATURE_EDITION_SUPPLY","FEATURE_EDITION","getAllPluginsAbi","getAllExtensionsAbi","FEATURE_ROYALTY","FEATURE_PRIMARY_SALE","FEATURE_PLATFORM_FEE","FEATURE_PERMISSIONS_ENUMERABLE","FEATURE_PERMISSIONS","FEATURE_METADATA","FEATURE_APPURI","FEATURE_OWNER","FEATURE_GASLESS","FEATURE_PACK_VRF","FEATURE_PLUGIN_ROUTER","FEATURE_DYNAMIC_CONTRACT","FEATURE_DIRECT_LISTINGS","FEATURE_ENGLISH_AUCTIONS","FEATURE_OFFERS","FEATURE_ACCOUNT_FACTORY","FEATURE_ACCOUNT_PERMISSIONS","FEATURE_ACCOUNT","FEATURE_AIRDROP_ERC20","FEATURE_AIRDROP_ERC721","FEATURE_AIRDROP_ERC1155","SUPPORTED_FEATURES","toJSType","contractType","isReturnType","withName","jsType","isArray","startsWith","extractCommentFromMetadata","_metadata$output","_metadata$output2","_metadata$output3","_metadata$output4","userdoc","Object","keys","devdoc","extractFunctionsFromAbi","functions","el","parsed","f","_f$inputs","_f$outputs","doc","fargs","o","signature","comment","hasMatchingAbi","contractAbi","featureAbis","contractFn","interfaceFn","flatMap","intersection","iFn","every","_i$components","cIndex","_fn$inputs$index$comp","matchesAbiFromBytecode","contractBytecode","interfaces","selectors","values","getSighash","uniqueSelectors","Set","selector","detectFeatures","results","featureKey","enabled","matchesAbiInterface","childResults","detectFeaturesFromBytecode","isFeatureEnabled","featureName","_featureEnabled","isExtensionEnabled","found","key","detectContractFeature","hasFunction","functionName","decoder","TextDecoder","src","srcEnd","position","LEGACY_RECORD_INLINE_ID","RECORD_DEFINITIONS_ID","RECORD_INLINE_ID","BUNDLED_STRINGS_ID","PACKED_REFERENCE_TAG_ID","STOP_CODE","currentDecoder","currentStructures","srcString","srcStringStart","srcStringEnd","bundledStrings","referenceMap","currentExtensions","currentExtensionRanges","packedValues","dataView","restoreMapsAsObject","defaultOptions","useRecords","mapsAsObjects","sequentialMode","Decoder","keyMap","_keyMap","getStructures","getShared","structures","uninitialized","mapKey","k","entries","assign","decodeKey","end","saveState","clearSource","prototype","call","DataView","byteOffset","byteLength","Uint8Array","sharedValues","pack","maxPrivatePackedValues","checkedRead","read","postBundlePosition","incomplete","RangeError","token","majorType","getFloat16","getUint16","getFloat32","useFloat32","multiplier","mult10","getUint32","getFloat64","int64AsNumber","getBigUint64","safeKey","readBin","shortStringInJS","longStringInJS","readFixedString","structure","createStructureReader","recordDefinition","readJustLength","readBundleExt","loadShared","extension","handlesRead","Tag","packedValue","getPackedValues","isNaN","validName","readObject","compiledReader","propertyCount","slowReads","Function","test","readStringJS","subarray","units","byte1","byte2","byte3","byte4","unit","fromCharCode","apply","String","start","bytes","byte","d","g","h","j","l","m","copyBuffers","f32Array","Float32Array","u8Array","byte0","exponent","NaN","Infinity","abs","tag","dateString","epochSec","round","BigInt","fraction","exp","log","definition","existingStructure","isShared","restoreStructures","position0","position1","glbl","packedTable","_read","newPackedValues","prefixes","suffixes","stringRefs","target","refEntry","targetProperties","used","combine","SHARED_DATA_TAG_ID","isLittleEndianMachine","Uint16Array","typedArrays","typedArrayTags","registerTypedArray","TypedArray","dvMethod","bytesPerElement","BYTES_PER_ELEMENT","littleEndian","sizeShift","dv","elements","ta","bundlePosition","bundleLength","dataPosition","sharedData","updatedStructures","sharedVersion","splice","callback","savedSrcEnd","savedPosition","savedSrcStringStart","savedSrcStringEnd","savedSrcString","savedReferenceMap","savedBundledStrings","savedSrc","savedStructures","savedDecoder","savedSequentialMode","defaultDecoder","hexToBytes","hex","isHexStrict","parseInt","extractIPFSHashFromBytecode","numericBytecode","cborLength","bytecodeBuffer","cborData","console","warn","extractMinimalProxyImplementationAddress","implementationAddress","resolveContractUriFromAddress","resolveImplementation","resolveContractUriAndBytecode","getCode","proxyStorage","getStorageAt","CONTRACT_METADATA_TIMEOUT_SEC","fetchContractMetadata","compilerMetadataUri","storage","downloadJSON","timeoutInSeconds","compilationTarget","settings","targets","detail","_ref","getProcessEnv","process","env","MultichainRegistry_address","getMultichainRegistryAddress","isNode","unique","joinABIs","parsedABIs","flat","filteredABIs","finalABIs","item","extractFeatures","enabledExtensions","extensionKey","getAllDetectedFeatures","getAllDetectedExtensionsFromBytecode","constructAbiFromBytecode","extensions","getAllDetectedExtensions","metadataCache","multichainRegistry","getCacheKey","putInCache","getFromCache","fetchContractMetadataFromAddress","cached","ipfsData","registryData","catch","getMetadataUriFromMultichainRegistry","_sdkOptions$supported","polygonChain","importedUri","getMetadataUri","fetchAbiFromAddress","buildDeployTransactionFunction","executeFn","tx","execute","prepare","buildTransactionFunction","getDefaultGasOverrides","originalProvider","feeData","getDynamicFeeData","getGasPrice","block","eth_maxPriorityFeePerGas","getBlock","baseBlockFee","baseFeePerGas","parseUnits","getPolygonGasPriorityFee","getFeeData","mul","add","getPreferredPriorityFee","defaultPriorityFeePerGas","percentMultiplier","extraTip","div","txGasPrice","maxGasPrice","getGasStationUrl","MIN_POLYGON_GAS_PRICE","MIN_MUMBAI_GAS_PRICE","getDefaultGasFee","gasStationUrl","json","priorityFee","fixedFee","parseFloat","toFixed","fetchSourceFilesFromMetadata","publishedMetadata","path","urls","ipfsLink","ipfsHash","timeout","_r","rej","race","download","text","isRouterContract","isPluginRouter","isBaseRouter","ERROR_SUBSTRINGS","ERROR_SUBSTRINGS_COMPOSITE","CUSTOM_GAS_FOR_CHAIN","matchError","errorIndex","substring","compositeErrorIndex","arr","foundError","CREATE2_FACTORY_BYTECODE","SIGNATURE","r","s","COMMON_FACTORY","GAS_LIMIT_FOR_DEPLOYER","DEPLOYER_BYTECODE","DEPLOYER_ABI","isContractDeployed","isEIP155Enforced","sendTransaction","errorMsg","errorJson","getKeylessTxn","transaction","arrayify","keccak256","serializeTransaction","recoverAddress","signedSerializedTx","getCreate2FactoryDeploymentInfo","joinSignature","deploymentTransaction","create2FactoryAddress","getContractAddress","deployment","getCreate2FactoryAddress","commonFactoryExists","enforceEip155","networkId","deploymentInfo","ContractPublisher_address","getContractPublisherAddress","DropErc721ContractInput","DropErc721ContractOutput","DropErc721ContractDeploy","DropErc721ContractSchema","DropErc1155ContractInput","DropErc1155ContractOutput","DropErc1155ContractDeploy","DropErc1155ContractSchema","MarketplaceContractInput","MarketplaceContractOutput","MarketplaceContractDeploy","MarketplaceContractSchema","PackContractInput","PackContractOutput","PackContractDeploy","PackContractSchema","SplitRecipientInputSchema","sharesBps","SplitRecipientOuputSchema","SplitsContractInput","recipients","superRefine","val","context","addressMap","totalShares","entry","addIssue","ZodIssueCode","SplitsContractOutput","SplitsContractDeploy","SplitsContractSchema","TokenErc20ContractInput","TokenErc20ContractOutput","TokenErc20ContractDeploy","TokenErc20ContractSchema","TokenErc721ContractInput","TokenErc721ContractOutput","TokenErc721ContractDeploy","TokenErc721ContractSchema","TokenErc1155ContractInput","TokenErc1155ContractOutput","TokenErc1155ContractDeploy","TokenErc1155ContractSchema","VoteSettingsInputSchema","voting_delay_in_blocks","voting_period_in_blocks","voting_token_address","voting_quorum_fraction","proposal_token_threshold","VoteSettingsOuputSchema","VoteContractInput","VoteContractOutput","VoteContractDeploy","VoteContractSchema","resolveAddress","addressOrEns","fetchExtendedReleaseMetadata","publishMetadataUri","meta","fetchRawPredeployMetadata","fetchPreDeployMetadata","rawMeta","deployBytecode","parsedMeta","deployMetadataCache","fetchAndCacheDeployMetadata","compilerMetadata","extendedMetadata","TWRegistry_address","TWFactory_address","OZ_DEFENDER_FORWARDER_ADDRESS","CONTRACT_ADDRESSES","openzeppelinForwarder","openzeppelinForwarderEOA","biconomyForwarder","twFactory","twRegistry","twBYOCRegistry","getContractAddressByChainId","_CONTRACT_ADDRESSES$c","InterfaceId_IERC721","InterfaceId_IERC1155","EventType","THIRDWEB_DEPLOYER","fetchPublishedContractFromPolygon","contract","publishedContract","model","getPublishedContract","contractId","publishTimestamp","allVersions","getPublishedContractVersions","versionMetadata","publishedTimestamp","versionMatch","_metadata$publishedMe","getSaltHash","bytecodePrefixed","bytecodeHash","salt","saltHash","getInitBytecodeWithSalt","initBytecodeWithSalt","solidityPack","computeDeploymentAddress","initBytecode","deployInfoPacked","solidityKeccak256","hashedDeployInfo","extractConstructorParamsFromAbi","parsedAbi","caches","deploymentPresets","getRoyaltyEngineV1ByChainId","ROYALTY_ENGINE_V1_ADDRESS","computeDeploymentInfo","create2Factory","contractOptions","contractDeployed","predictedAddress","encodeConstructorParamsForImplementation","constructorParamMap","constructorParamTypes","p","ParamType","constructorParamValues","nativeTokenWrapperAddress","defaultAbiCoder","computeEOAForwarderAddress","computeForwarderAddress","ForwardRequest","ChainAwareForwardRequest","BiconomyForwarderAbi","_nonces","_noncesSyncTimestamp","getAndIncrementNonce","forwarder","forwarderFunction","forwarderArgs","shouldSync","nonceResult","signTypedDataInternal","signerInput","domain","types","_signer","_provider$provider","originalSigner","_TypedDataEncoder","getPayload","signerAddress","getAddress","isWalletConnect","_signTypedData","_err$message","finalErr","splitSignature","NAME_ABI","DOMAIN_SEPARATOR_ABI","constant","payable","NONCES_ABI","getSignerNonce","nonces","getNonce","getDomainSeperator","DOMAIN_SEPARATOR","err2","getTokenName","getChainDomainSeperator","contractDomainSeparator","verifyingContract","polygonDomain","toHexString","hashDomain","signEIP2612Permit","owner","spender","deadline","getChainId","MaxUint256","Permit","TransactionContext","overrides","connect","getSigner","getProvider","getStorage","getArgs","getOverrides","getValue","setArgs","setOverrides","updateOverrides","setValue","setGasLimit","setGasPrice","setNonce","setMaxFeePerGas","setMaxPriorityFeePerGas","setType","setAccessList","accessList","setCustomData","customData","setCcipReadEnabled","ccipReadEnabled","setGasLimitMultiple","factor","gasMultiple","estimateGasCost","estimateGasLimit","gasCost","ether","wei","getSignerAddress","getGasOverrides","Transaction","fromContractWrapper","optionsWithContract","writeContract","fromContractInfo","gaslessOptions","getTarget","getMethod","getGaslessOptions","setGaslessOptions","setParse","sign","populatedTx","populateTransaction","signedTx","signTransaction","gasOverrides","simulate","callStatic","functionError","transactionError","estimateGas","gasEstimate","sendGasless","receipt","wait","prepareGasless","txHash","defaultGaslessSendFunction","sentTx","iteration","getTransaction","_this$overrides","gas","lt","functionArgs","callOverrides","_provider$connection","_error$transaction","_error$receipt","functionSignature","getFunction","methodArgs","joinedArgs","transactionHash","DeployTransaction","factory","events","encodeDeploy","getDeployTransaction","deployError","status","_provider$connection2","_error$transaction2","_error$receipt2","biconomySendFunction","defenderSendFunction","biconomyPrepareRequest","ok","resp","statusText","defenderPrepareRequest","_message","forwarderAddress","chainid","amount","permit","sig","messageType","body","prepareGaslessRequest","gaslessTx","_gaslessOptions$bicon","batchId","batchNonce","txGas","tokenGasPrice","hashToSign","signMessage","ContractMetadata","schema","_defineProperty","_parseAndUploadMetadata","wrapper","supportsContractMetadata","parseOutputMetadata","parseInputMetadata","_publishedMetadata","_publishedMetadata2","contractSymbol","parsedMetadata","upload","roleMap","admin","transfer","minter","pauser","lister","asset","unwrap","ALL_ROLES","getRoleHash","ContractRoles","roles","rolesWithAddresses","contractEncoder","currentRoles","getAll","encoded","sortedRoles","sort","_rolesWithAddresses$r","_currentRoles$role","addresses","currentAddresses","toAdd","toRemove","revokeFunctionName","getRevokeRoleFunctionName","resolvedAddress","roleHash","count","verify","members","ContractRoyalty","royaltyData","oldMetadata","mergedMetadata","contractURI","getDefaultRoyaltyInfo","parsedRoyaltyData","getTokenRoyaltyInfo","ContractPrimarySale","recipient","getRecipient","FALLBACK_METADATA","fetchTokenMetadata","tokenUri","base64","jsonMetadata","parsedUri","unparsedTokenIdUri","fetchTokenMetadataForContract","erc165","isERC721","isERC1155","supportsInterface","erc721","tokenURI","erc1155","uploadOrExtractURI","uploadOrExtractURIs","metadatas","startNumber","isUriList","isMetadataList","uris","uploadBatch","rewriteFileNames","fileStartNumber","onProgress","getBaseUriFromBatch","baseUri","lastIndexOf","DelayedReveal","nextTokenIdToMintFn","placeholder","password","placeholderUris","placeholderUri","startFileNumber","baseUriId","hashedPassword","hashDelayRevealPassword","encryptedBaseUri","legacyContract","isLegacyContract","getChainID","provenanceHash","parseLogs","logs","startingIndex","startTokenId","endingIndex","endTokenId","lte","decryptedUri","reveal","getBatchesToReveal","isZero","countRangeArray","uriIndices","uriIndicesWithZeroStart","tokenMetadatas","getNftMetadata","encryptedUriData","getLegacyEncryptedData","encryptedBaseUris","hexDataLength","batchUri","placeholderMetadata","_","batchTokenIndex","legacy","abstractContractModelToLegacy","startTimestamp","supplyClaimed","pricePerToken","currency","quantityLimitPerTransaction","waitTimeInSecondsBetweenClaims","abstractContractModelToNew","quantityLimitPerWallet","convertQuantityToBigNumber","tokenDecimals","isNativeToken","tokenAddress","fetchCurrencyMetadata","nativeToken","erc20","parseSnapshotInputs","chunkSize","chunks","ceil","chunk","SHARD_NYBBLES","SnapshotFormatVersion","ShardedMerkleTree","originalEntriesUri","shardNybbles","shards","trees","fromUri","shardedMerkleTreeInfo","isShardedMerkleTree","fromShardedMerkleTreeInfo","hashEntry","currencyDecimals","snapshotFormatVersion","V1","V2","fetchAndCacheDecimals","cache","buildAndUpload","snapshotInput","snapshotEntry","shard","currencyDecimalMap","subTrees","getHexRoot","roots","fromEntries","tree","shardsToUpload","shardId","proofs","getProof","shardedMerkleInfo","masterUri","hashedEntries","leaf","getAllEntries","fetchSnapshotEntryForAddress","merkleMetadata","merkleTree","snapshotData","legacyContractModelToAbstract","newContractModelToAbstract","RPCConnectionHandler","optionParseError","updateSignerOrProvider","isReadOnly","getSignerOrProvider","ContractWrapper","updateAbi","updatedAbi","getCallOverrides","emitTransactionEvent","multiCall","withTransactionOverride","hook","customOverrides","ethersFnName","fnName","txOptions","_this$options","sendGaslessTransaction","waitForTransaction","isValidContract","sendTransactionByFunction","staticErr","formatError","func","_provider$connection3","_error$transaction3","_error$receipt3","signTypedData","Signature","eventName","topic","getEventTopic","parsedLogs","x","topics","indexOf","parseLog","_this$options2","_this$options$gasless","_message2","approveErc20Allowance","contractToApprove","allowance","totalPrice","normalizePriceValue","inputPrice","prepareClaim","addressToClaim","activeClaimCondition","merkleMetadataFetcher","checkERC20Allowance","priceInProof","currencyAddressInProof","createSnapshot","hasDuplicates","size","compare","left","right","eq","processSnapshotData","claimConditionInputs","snapshotInfos","inputsWithSnapshots","conditionInput","snapshotInfo","convertToContractModel","metadataOrUri","processClaimConditionInputs","parsedInputs","sortedConditions","fetchCurrencyValue","providerOrSigner","formatUnits","fetchSnapshot","smt","claim","convertToReadableQuantity","bn","transformResultToClaimCondition","pm","shouldDownloadSnapshot","_pm$waitTimeInSeconds","cv","sub","resolvedMetadata","updateExistingClaimConditions","claimConditionInput","existingConditions","priceDecimals","priceInWei","priceInTokens","newConditionParsed","mergedConditionOutput","existingOutput","newConditionAtIndex","formattedPrice","Status","ClaimEligibility","DropClaimConditions","_this","resetClaimEligibilityForAll","claimConditionsProcessed","isLegacySinglePhaseDrop","isNewSinglePhaseDrop","isNewMultiphaseDrop","cc","_cc$maxClaimablePerWa","_s$maxClaimable","getTokenDecimals","getSnapshotFormatVersion","merkleInfo","cw","baseContractEncoder","contractEncoderLegacy","isLegacyMultiPhaseDrop","newConditionInputs","getActive","withAllowList","conditionId","contractModel","currentStartId","countBn","startId","conditions","fetchedConditions","canClaim","addressToCheck","getClaimIneligibilityReasons","reasons","activeConditionIndex","claimCondition","quantityWithDecimals","NoWallet","NoClaimConditionSet","Unknown","supplyWithDecimals","NotEnoughSupply","merkleRootArray","stripZeros","hasAllowList","allowListEntry","getClaimerProofs","AddressNotAllowed","claimVerification","validMerkleProof","maxQuantityInAllowlist","OverMaxClaimablePerWallet","WrongPriceOrCurrency","ClaimPhaseNotStarted","claimedSupply","getSupplyClaimedByWallet","lastClaimedTimestamp","timestampForNextClaim","AlreadyClaimed","WaitBeforeNextClaimTransaction","balance","getBalance","NotEnoughTokens","claimerAddress","claimConditionId","walletAddress","activeClaimConditionId","getClaimArguments","destinationAddress","getClaimTransaction","DropErc1155ClaimConditions","setBatch","claimConditions","_this2","claimConditionsForToken","processedClaimConditions","_cc$maxClaimablePerWa2","_s$maxClaimable2","_ref2","legacyContractEncoder","mc","Erc20BatchMintable","toAddress","normalizeAmount","Erc20Burnable","holder","Erc20ClaimableWithConditions","Erc20Droppable","Erc20Mintable","getMintTransaction","detectErc20BatchMintable","setErc20Allowance","Erc20SignatureMintable","signedPayload","mintRequest","mapPayloadToContractStruct","signedPayloads","contractPayloads","verification","generate","generateBatch","payloadsToSign","_this$roles","parsedRequests","finalPayload","MintRequest","normalizedPrice","amountWithDecimals","validityEndTimestamp","validityStartTimestamp","assertEnabled","Erc20","_chainId","mintTo","receiver","mintable","_this$mintable","burnable","tokens","claimTo","_this$droppable","droppable","detectErc20Mintable","detectErc20Burnable","detectErc20Droppable","signatureMintable","detectErc20SignatureMintable","onNetworkUpdated","balanceOf","totalSupply","spenderAddress","allowanceOf","_this$droppable2","Erc721BatchMintable","tokenIdMinted","Erc721ClaimableWithConditions","event","calculateClaimCost","totalCost","Erc721Claimable","Erc721LazyMintable","nextTokenIdToMint","getTokenMetadata","revealer","detectErc721Revealable","Erc721Mintable","detectErc721BatchMintable","Erc721Enumerable","tokenIds","indices","Erc721AQueryable","Erc721Supply","owned","detectErc721Owned","queryParams","maxSupply","maxId","allOwners","totalCount","totalClaimedSupply","owners","ownerOf","totalCirculatingSupply","TieredDropPayloadSchema","tierPriority","Erc721TieredDrop","tier","getMetadataInTier","tiers","batches","t","nfts","ranges","range","nftsInRange","baseURIs","startIdInclusive","endIdNonInclusive","getTokensInTier","endIndex","payloadToSign","parsedPayloads","claimWithSignature","normalizedTotalPrice","quantityClaimed","Erc721Burnable","toWei","parseEther","Erc721ClaimableZora","_this$contractWrapper","saleDetails","getSaleDetails","publicSalePrice","zoraFee","firstPurchasedTokenId","Erc721LoyaltyCard","Erc721UpdatableMetadata","Erc721SharedMetadata","sanitizeJSONString","animation_url","imageUri","animationUri","imageURI","animationURI","sanitized","Erc721WithQuantitySignatureMintable","isLegacyNFTContract","mapLegacyPayloadToContractStruct","normalizedPricePerToken","Erc721","_to","fromAddress","operator","approved","mintBatchTo","_this$mintable2","loyaltyCard","cancel","revoke","lazyMintable","lazyMint","updatableMetadata","claimWithConditions","claimCustom","claimZora","query","detectErc721Enumerable","detectErc721Mintable","detectErc721Burnable","detectErc721LazyMintable","tieredDropable","detectErc721TieredDrop","detectErc721SignatureMintable","detectErc721ClaimableWithConditions","detectErc721Claimable","detectErc721ClaimableZora","erc721SharedMetadata","detectErc721SharedMetadata","detectErc721LoyaltyCard","detectErc721UpdatableMetadata","supply","isApproved","_address","_operator","getAllOwners","getOwned","_this$query","_i$owner","getOwnedTokenIds","_this$query2","_i$owner2","totalUnclaimedSupply","tieredDrop","_this$lazyMintable","sharedMetadata","Erc1155BatchMintable","metadataWithSupply","supplies","Erc1155Burnable","account","amounts","batchFrom","Erc1155Enumerable","balances","ownedBalances","editionMetadata","quantityOwned","getPrebuiltInfo","toUtf8String","contractVersion","Erc1155LazyMintable","prebuiltInfo","isLegacyEditionDropContract","detectErc1155Revealable","Erc1155Mintable","additionalSupply","detectErc1155BatchMintable","AirdropAddressInput","AirdropInputSchema","ERC1155Claimable","Erc1155ClaimableWithConditions","Erc1155SignatureMintable","generateFromTokenId","payloads","generateBatchFromTokenIds","_this$roles2","contractInfo","Erc1155","_this3","totalToAirdrop","prev","additionalSupplyTo","_this$mintable3","detectErc1155Enumerable","detectErc1155Mintable","detectErc1155Burnable","detectErc1155LazyMintable","detectErc1155SignatureMintable","detectErc1155Claimable","detectErc1155ClaimableWithConditions","_this$lazyMintable2","cleanCurrencyAddress","isTokenApprovedForTransfer","transferrerContractAddress","assetContract","_approvedAddress","isApprovedForAll","approvedAddress","getApproved","handleTokenApproval","marketplaceAddress","isTokenApproved","validateNewListingParam","param","assetContractAddress","buyoutPricePerToken","listingDurationInSeconds","reservePricePerToken","mapOffer","offer","quantityDesired","currencyContractAddress","buyerAddress","offeror","quantityWanted","currencyValue","isWinningBid","winningPrice","newBidPrice","bidBuffer","gte","getAllInBatches","ContractEvents","addTransactionListener","listener","addListener","removeTransactionListener","off","addEventListener","getEvent","wrappedListener","parsedLog","toContractEvent","eventFragment","on","listenToAllEvents","removeEventListener","removeAllListeners","getAllEvents","filters","fromBlock","toBlock","order","queryFilter","orderedEvents","blockNumber","parseEvents","getEvents","eventInterface","rawLog","objArray","tuple","obj","DirectListingInputParamsSchema","endTimestamp","isReservedListing","ContractInterceptor","overrideNextTransaction","GasCostEstimator","gasCostOf","gasUnits","gasLimitOf","currentGasPriceInGwei","MarketplaceV3DirectListings","listing","parsedListing","blockTime","reserved","listings","createListing","validateListing","valid","isStillValidListing","buyFor","buyer","isBuyerApprovedForListing","pricePerTokenInCurrency","resolvedCurrencyAddress","currencyPrice","encoder","interceptor","estimator","getTotalCount","totalListings","rawListings","endId","filteredListings","applyFilter","mapListing","getAllValid","getListing","isCurrencyApprovedForListing","currencyPriceForListing","isApprovedCurrency","UNSET","Created","Expired","Active","Completed","Cancelled","currencyValuePerToken","startTimeInSeconds","endTimeInSeconds","creatorAddress","listingCreator","_owner","seller","resolvedSeller","tokenContract","resolvedToken","_filter$tokenId","EnglishAuctionInputParamsSchema","minimumBidAmount","buyoutBidAmount","timeBufferInSeconds","bidBufferBps","MarketplaceV3EnglishAuctions","auction","parsedAuction","normalizedBuyoutAmount","normalizedMinBidAmount","auctionId","createAuction","validateAuction","makeBid","bidAmount","normalizedBidAmount","winningBid","getWinningBid","isWinnner","tokenPrice","closeFor","closeForSeller","closeForBuyer","totalAuctions","rawAuctions","filteredAuctions","mapAuction","getAuction","bid","_bidder","mapBid","_currency","_bidAmount","getWinner","contractEvent","closedAuctions","closed","winningBidder","getBidBufferBps","getMinimumNextBid","currentBidBufferBps","currentBidOrReservePrice","minimumNextBid","auctionCreator","minimumBidCurrencyValue","buyoutCurrencyValue","bidderAddress","resolvedBidderAddress","bidAmountCurrencyValue","auctions","_filter$tokenId2","OfferInputParamsSchema","MarketplaceV3Offers","parsedOffer","expirationTimestamp","offerId","validateOffer","isStillValidOffer","totalOffers","rawOffers","filteredOffers","getOffer","offerorAddress","offerorBalance","offerorAllowance","offers","resolvedOfferor","_filter$tokenId3","ContractPlatformFee","platformFeeInfo","platformFeeRecipient","platformFeeBps","extractEventsFromAbi","ContractPublishedMetadata","_cachedMetadata","extractFunctions","_publishedMetadata3","extractEvents","_publishedMetadata4","ContractOwner","ContractAppURI","appURI","getGatewayUrls","extractConstructorParams","predeployMetadataUri","getFunctionSignature","fnInputs","generatePluginFunctions","pluginAddress","pluginAbi","pluginInterface","pluginFunctions","fnFragment","functionSelector","generateExtensionFunctions","extensionAbi","extensionInterface","extensionFunctions","getDeploymentInfo","customParams","finalDeploymentInfo","publishedExtensions","pluginMetadata","fetchedMetadata","pluginDeploymentInfo","mapInput","pluginMapTransaction","_pluginsToAdd","extensionMetadata","extensionDeploymentInfo","routerInput","metadataURI","implementation","implementationDeployInfo","factoryInfo","deployContractDeterministic","_options$notifier","_options$notifier2","debug","notifier","estimateGasForDeploy","initCode","sum","createTransactionBatches","transactions","upperGasLimit","transactionBatches","deployWithThrowawayDeployer","_options$notifier3","_options$notifier4","deployTxns","txBatch","deployer","deployed","getCompositeABIfromRelease","getPluginABI","getCompositePluginABI","pluginABIs","isbaseRouter","plugins","pluginAddresses","pluginMap","allPlugins","DropErc20ContractInput","DropErc20ContractOutput","DropErc20ContractDeploy","DropErc20ContractSchema","MultiwrapContractInput","MultiwrapContractOutput","MultiwrapContractDeploy","MultiwrapContractSchema","ADMIN_ROLE","NFT_BASE_CONTRACT_ROLES","MARKETPLACE_CONTRACT_ROLES","PACK_CONTRACT_ROLES","TOKEN_DROP_CONTRACT_ROLES","MULTIWRAP_CONTRACT_ROLES","prebuiltContractTypes","vote","edition","marketplace","multiwrap","EditionDropInitializer","initialize","_len","_key","_network","getAbi","EditionDrop","getContractInfo","EditionInitializer","_len2","_key2","Edition","MarketplaceInitializer","_len3","_ref3","_key3","Marketplace","MarketplaceV3Initializer","_len4","_ref4","_key4","MarketplaceV3","isZkSync","localAbi","MultiwrapInitializer","_len5","_ref5","_key5","Multiwrap","NFTCollectionInitializer","_len6","_ref6","_key6","NFTCollection","NFTDropInitializer","_len7","_ref7","_key7","NFTDrop","PackInitializer","_len8","_ref8","_key8","Pack","SignatureDropInitializer","_len9","_ref9","_key9","SignatureDrop","SplitInitializer","_len10","_ref10","_key10","Split","TokenDropInitializer","_len11","_ref11","_key11","TokenDrop","TokenInitializer","_len12","_ref12","_key12","Token","VoteInitializer","_len13","_ref13","_key13","Vote","PREBUILT_CONTRACTS_MAP","PREBUILT_CONTRACTS_APPURI_MAP","SmartContract$1","CONTRACTS_MAP","getContractTypeForRemoteName","_Object$values$find","getContractName","_Object$values$find2","SignerPermissionsSchema","startDate","expirationDate","nativeTokenLimitPerTransaction","approvedCallTargets","PermissionSnapshotSchema","makeAdmin","permissions","SignerPermissionRequest","AccountPermissions","resolvedSignerAddress","resolvedPermissions","isAdmin","sendSignerPermissionRequest","resolvedTarget","approvedTargets","newTargets","approvedTarget","permissionSnapshot","resolvedSnapshot","hasDuplicateSigners","addAdminData","removeAdminData","addOrUpdateSignerData","removeSignerData","allAdmins","getAllAdmins","allToMakeAdmin","allSigners","getAllSigners","allToMakeSigners","buildSignerPermissionRequest","member","checkedSigner","signers","parseSignerPermissionsStruct","generatePayload","success","isValidSigner","permissionStartTimestamp","permissionEndTimestamp","reqValidityStartTimestamp","reqValidityEndTimestamp","connectedSigner","activeSignersWithPerms","signerWithPermissions","getAllAdminsAndSigners","transformedAdmins","Account","accountPermissions","grantAdminPermissions","revokeAdminPermissions","grantPermissions","updatePermissions","revokeAccess","approveTargetForSigner","disapproveTargetForSigner","resetAllPermissions","detectAccountPermissions","AccountFactory","accountAdmin","extraData","isAccountDeployed","predictAccountAddress","getAssociatedAccounts","getAllAccounts","addr","Airdrop1155","tokenOwner","contents","failedDrops","successfulDropCount","failedDropCount","Airdrop20","Airdrop721","ExtensionManager","inputArgs","abiToAdd","filterAbiForAdd","extensionAddress","extensionMetadataUri","deployedExtensionAddress","deployExtension","addDeployed","extensionMetadataOverride","filterAbiForRemove","replaceDeployed","getExtensionAddress","getAllExtensions","getExtension","getAllFunctions","getExtensionForFunction","functionInput","getMetadataForFunction","getExtensionAddressForFunction","extensionAbiInterface","extensionFunctionSelectors","filtered","fnSigHash","fullAbi","abiToRemove","fullAbiInterface","interfaceToRemove","functionsToRemove","_deploymentInfo$find","published","transactionsToSend","transactionsforDirectDeploy","transactionsForThrowawayDeployer","SmartContract","royalties","detectRoyalties","detectRoles","sales","detectPrimarySales","platformFees","detectPlatformFees","detectOwnable","detectErc20","detectErc721","detectErc1155","app","detectApp","directListings","detectDirectListings","englishAuctions","detectEnglishAuctions","detectOffers","airdrop20","detectAirdrop20","airdrop721","detectAirdrop721","airdrop1155","detectAirdrop1155","accountFactory","detectAccountFactory","detectAccount","detectBaseRouter","ContractPublisher","profileMetadata","profileUri","predeployUri","extraMetadata","predeployMetadata","isPlugin","isDynamic","publishedExtensionUris","ext","extensionABIs","composite","latestContract","getLatest","latestMetadata","fetchPublishedContractInfo","latestVersion","fetchedBytecode","fullMetadata","fullMetadataUri","toPublishedContract","resolvedPublisher","fetchCompilerMetadataFromPredeployURI","fetchPrePublishMetadata","prepublishUri","preDeployMetadataFetched","latestPublishedContract","latestPublishedContractMetadata","preDeployMetadata","fetchCompilerMetadataFromAddress","fetchFullPublishMetadata","publishedMetadataUri","resolvePublishMetadataFromCompilerMetadata","contractUri","fetchContractSourcesFromAddress","getPublisherProfile","resolvedPublisherAddress","struct","getAllVersions","contractStructs","getVersion","$","E","G","H","I","J","K","L","O","R","S","T","U","V","W","X","Y","Z","a$","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","aA","aB","aC","aD","aE","aF","aG","aH","aI","aJ","aK","aL","aM","aN","aO","aP","aQ","aR","aS","aT","aU","aV","aW","aX","aY","aZ","a_","aa","ab","ac","ad","ae","af","ag","ah","ai","aj","ak","al","am","an","ao","ap","aq","ar","as","at","au","av","aw","ax","ay","az","b$","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","bA","bB","bC","bD","bE","bF","bG","bH","bI","bJ","bK","bL","bM","bN","bO","bP","bQ","bR","bS","bT","bU","bV","bW","bX","bY","bZ","b_","ba","bb","bc","bd","be","bf","bg","bh","bi","bj","bk","bl","bm","bo","bp","bq","br","bs","bt","bu","bv","bw","bx","by","bz","c$","c0","c1","c2","c3","c4","c5","c6","c7","c8","c9","cA","cB","cC","cD","cE","cF","cG","cH","cI","cJ","cK","cL","cM","cN","cO","cP","cQ","cR","cS","cT","cU","cV","cW","cX","cY","cZ","c_","ca","cb","cd","ce","cf","cg","ch","ci","cj","ck","cl","cm","cn","co","cp","cq","cr","cs","ct","cu","cx","cy","cz","d$","d0","d1","d2","d3","d4","d5","d6","d7","d8","d9","dA","dB","dC","dD","dE","dF","dG","dH","dI","dJ","dK","dL","dM","dN","dO","dP","dQ","dR","dS","dT","dU","dV","dW","dX","dY","dZ","d_","da","db","dc","dd","de","df","dg","dh","di","dj","dk","dl","dm","dn","dp","dq","dr","ds","dt","du","dw","dx","dy","dz","e0","e1","e3","q","u","w","y"],"sources":["C:/Misc/Documents/Career/FinTech/BlockChain/FrontEnd/buildspace-dao-starter/node_modules/@thirdweb-dev/sdk/dist/contract-publisher-1ff1fe07.browser.esm.js"],"sourcesContent":["import { Q as QuantitySchema, A as AmountSchema, B as BytesLikeSchema, N as NFTInputOrUriSchema, a as BasisPointsSchema, F as FileOrBufferOrStringSchema, P as PercentSchema, C as CommonNFTOutput, b as CommonNFTInput, D as DEFAULT_QUERY_ALL_COUNT, c as BasicNFTInput, M as MAX_BPS } from './QueryParams-39bcad7a.browser.esm.js';\nimport { z } from 'zod';\nimport { BigNumber, providers, utils, constants, Contract, ContractFactory } from 'ethers';\nimport invariant from 'tiny-invariant';\nimport { v4 } from 'uuid';\nimport { isBrowser as isBrowser$1, isFileOrBuffer, replaceGatewayUrlWithScheme } from '@thirdweb-dev/storage';\nimport ERC165Abi from '@thirdweb-dev/contracts-js/dist/abis/IERC165.json';\nimport IERC721MetadataAbi from '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport Erc1155MetadataAbi from '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport ERC20Abi from '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport IERC20MetadataAbi from '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport deepEqual from 'fast-deep-equal';\nimport { MerkleTree } from 'merkletreejs';\nimport IThirdwebContractABI from '@thirdweb-dev/contracts-js/dist/abis/IThirdwebContract.json';\nimport DeprecatedAbi from '@thirdweb-dev/contracts-js/dist/abis/IDelayedRevealDeprecated.json';\nimport Erc1155Abi from '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport Erc721Abi from '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport ContractPublisherAbi from '@thirdweb-dev/contracts-js/dist/abis/ContractPublisher.json';\nimport { defaultChains, getValidChainRPCs, Polygon, Mumbai } from '@thirdweb-dev/chains';\nimport bs58 from 'bs58';\nimport TWRegistryABI from '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryLogic.json';\nimport IBurnableERC20Abi from '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport IDrop from '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport DropERC20_V2Abi from '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport IDropSinglePhase from '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport IDropSinglePhaseV1 from '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport IERC20PermitAbi from '@thirdweb-dev/contracts-js/dist/abis/IERC20Permit.json';\nimport IMintableERC20Abi from '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport MulticallAbi from '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport ISignatureMintERC20Abi from '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport IBurnableERC721Abi from '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport IClaimableERC721 from '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport DelayedRevealAbi from '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport DropERC721_V3Abi from '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport Erc721EnumerableAbi from '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport Erc721AQueryableAbi from '@thirdweb-dev/contracts-js/dist/abis/IERC721AQueryableUpgradeable.json';\nimport Erc721SupplyAbi from '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport ILazyMintAbi from '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport IMintableERC721Abi from '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport SignatureMintERC721Abi from '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport SignatureMintERC721_V1Abi from '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport TieredDropAbi from '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier.json';\nimport SharedMetadataAbi from '@thirdweb-dev/contracts-js/dist/abis/SharedMetadata.json';\nimport zora_IDropERC721 from '@thirdweb-dev/contracts-js/dist/abis/zora_IERC721Drop.json';\nimport ILoyaltyCardAbi from '@thirdweb-dev/contracts-js/dist/abis/ILoyaltyCard.json';\nimport INFTMetadataAbi from '@thirdweb-dev/contracts-js/dist/abis/INFTMetadata.json';\nimport IBurnableERC1155Abi from '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport IClaimableERC1155 from '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport IDropMultiPhase1155 from '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport DropERC1155_V2Abi from '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport IDropSinglePhase1155 from '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport IDropSinglePhase1155_V1 from '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport Erc1155SupplyAbi from '@thirdweb-dev/contracts-js/dist/abis/IERC1155Supply.json';\nimport Erc1155EnumerableAbi from '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport IMintableERC1155Abi from '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport ISignatureMintERC1155Abi from '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport IERC2771ContextAbi from '@thirdweb-dev/contracts-js/dist/abis/IERC2771Context.json';\nimport IAppURI from '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport IContractMetadataAbi from '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport IDirectListingsAbi from '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport IEnglishAuctionsAbi from '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport IOffersAbi from '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport IPackVRFAbi from '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport IPermissionsAbi from '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport IPermissionsEnumerableAbi from '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport IThirdwebPlatformFeeAbi from '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport IThirdwebPrimarySaleAbi from '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport IThirdwebRoyaltyAbi from '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport IOwnableAbi from '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport IAirdropERC20 from '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC20.json';\nimport IAirdropERC721 from '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC721.json';\nimport IAirdropERC1155 from '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC1155.json';\nimport IAccountFactoryCore from '@thirdweb-dev/contracts-js/dist/abis/IAccountFactoryCore.json';\nimport IAccountPermissions from '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions.json';\nimport IAccount from '@thirdweb-dev/contracts-js/dist/abis/IAccount.json';\nimport { Interface } from 'ethers/lib/utils';\nimport ForwarderABI from '@thirdweb-dev/contracts-js/dist/abis/Forwarder.json';\nimport fetch from 'cross-fetch';\nimport EventEmitter from 'eventemitter3';\n\nconst MAX_LENGTH = 256;\nconst NUMERIC_IDENTIFIER = \"0|[1-9]\\\\d*\";\nconst MAIN_VERSION_IDENTIFIER = `(${NUMERIC_IDENTIFIER})\\\\.(${NUMERIC_IDENTIFIER})\\\\.(${NUMERIC_IDENTIFIER})`;\nconst REGEX_MAIN_VERSION = new RegExp(MAIN_VERSION_IDENTIFIER);\n\n/**\n * @internal\n */\n\n/**\n * @internal\n * @param version\n */\nfunction toSemver(version) {\n  if (version.length > MAX_LENGTH) {\n    throw new Error(`version is longer than ${MAX_LENGTH} characters`);\n  }\n  const matches = version.trim().match(REGEX_MAIN_VERSION);\n  if (!matches || matches?.length !== 4) {\n    throw new Error(`${version} is not a valid semantic version. Should be in the format of major.minor.patch. Ex: 0.4.1`);\n  }\n  const major = Number(matches[1]);\n  const minor = Number(matches[2]);\n  const patch = Number(matches[3]);\n  const versionString = [major, minor, patch].join(\".\");\n  return {\n    major,\n    minor,\n    patch,\n    versionString\n  };\n}\n\n/**\n * @internal\n * @param current\n * @param next\n */\nfunction isIncrementalVersion(current, next) {\n  const currentSemver = toSemver(current);\n  const nextSemver = toSemver(next);\n  if (nextSemver.major > currentSemver.major) {\n    return true;\n  }\n  const eqMajor = nextSemver.major === currentSemver.major;\n  if (eqMajor && nextSemver.minor > currentSemver.minor) {\n    return true;\n  }\n  const eqMinor = nextSemver.minor === currentSemver.minor;\n  return eqMajor && eqMinor && nextSemver.patch > currentSemver.patch;\n}\nfunction isDowngradeVersion(current, next) {\n  const currentSemver = toSemver(current);\n  const nextSemver = toSemver(next);\n  if (nextSemver.major < currentSemver.major) {\n    return true;\n  }\n  const eqMajor = nextSemver.major === currentSemver.major;\n  if (eqMajor && nextSemver.minor < currentSemver.minor) {\n    return true;\n  }\n  const eqMinor = nextSemver.minor === currentSemver.minor;\n  return eqMajor && eqMinor && nextSemver.patch < currentSemver.patch;\n}\n\nconst BigNumberSchema = /* @__PURE__ */(() => z.union([z.string(), z.number(), z.bigint(), z.custom(data => {\n  return BigNumber.isBigNumber(data);\n})]).transform(arg => BigNumber.from(arg)))();\nconst BigNumberishSchema = /* @__PURE__ */BigNumberSchema.transform(arg => arg.toString());\nconst BigNumberTransformSchema = /* @__PURE__ */(() => z.union([z.bigint(), z.custom(data => {\n  return BigNumber.isBigNumber(data);\n})]).transform(arg => {\n  return BigNumber.from(arg).toString();\n}))();\n\n/**\n * util function to check for signer, ripped out of ethers Signer.isProvider\n *\n * @param value possible signer\n * @returns boolean if value is a signer\n * @internal\n */\nfunction isSigner(value) {\n  return !!(value && value._isSigner);\n}\n\n/**\n * util function to check for provider, ripped out of ethers providers.Provider.isProvider\n *\n * @param value possible provider\n * @returns boolean if value is a provider\n * @internal\n */\nfunction isProvider(value) {\n  return !!(value && value._isProvider);\n}\n\nconst DEFAULT_BATCH_TIME_LIMIT_MS = 50;\nconst DEFAULT_BATCH_SIZE_LIMIT = 250;\nconst DEFAULT_BATCH_OPTIONS = {\n  timeLimitMs: DEFAULT_BATCH_TIME_LIMIT_MS,\n  sizeLimit: DEFAULT_BATCH_SIZE_LIMIT\n};\n// mostly copied from ethers.js directly but make it a StaticJsonRpcProvider\nclass StaticJsonRpcBatchProvider extends providers.StaticJsonRpcProvider {\n  constructor(url, network) {\n    let batchOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_BATCH_OPTIONS;\n    super(url, network);\n    this._timeLimitMs = batchOptions.timeLimitMs || DEFAULT_BATCH_SIZE_LIMIT;\n    this._sizeLimit = batchOptions.sizeLimit || DEFAULT_BATCH_TIME_LIMIT_MS;\n    this._pendingBatchAggregator = null;\n    this._pendingBatch = null;\n  }\n  sendCurrentBatch(request) {\n    // if we still have a timeout clear that first\n    if (this._pendingBatchAggregator) {\n      clearTimeout(this._pendingBatchAggregator);\n    }\n    // Get the current batch and clear it, so new requests\n    // go into the next batch\n    const batch = this._pendingBatch || [];\n    this._pendingBatch = null;\n    this._pendingBatchAggregator = null;\n\n    // Get the request as an array of requests\n    const request_ = batch.map(inflight => inflight.request);\n    this.emit(\"debug\", {\n      action: \"requestBatch\",\n      request: utils.deepCopy(request),\n      provider: this\n    });\n    return utils.fetchJson(this.connection, JSON.stringify(request_)).then(result => {\n      this.emit(\"debug\", {\n        action: \"response\",\n        request: request_,\n        response: result,\n        provider: this\n      });\n\n      // For each result, feed it to the correct Promise, depending\n      // on whether it was a success or error\n      batch.forEach((inflightRequest_, index) => {\n        const payload = result[index];\n\n        // there may *not* be a payload for a given request (typically RPC error level)\n        if (payload) {\n          // if there is a payload, check for an error\n          if (payload.error) {\n            const error = new Error(payload.error.message);\n            error.code = payload.error.code;\n            error.data = payload.error.data;\n            inflightRequest_.reject(error);\n          } else {\n            // if there's no error resolve the request\n            inflightRequest_.resolve(payload.result);\n          }\n        } else {\n          // if there is no payload, reject the request\n          inflightRequest_.reject(new Error(\"No response for request\"));\n        }\n      });\n    }, error => {\n      this.emit(\"debug\", {\n        action: \"response\",\n        error: error,\n        request: request_,\n        provider: this\n      });\n\n      // If there was an error, reject all the requests\n      batch.forEach(inflightRequest_ => {\n        inflightRequest_.reject(error);\n      });\n    });\n  }\n  send(method, params) {\n    const request = {\n      method: method,\n      params: params,\n      id: this._nextId++,\n      jsonrpc: \"2.0\"\n    };\n    if (this._pendingBatch === null) {\n      this._pendingBatch = [];\n    }\n    const inflightRequest = {\n      request,\n      resolve: null,\n      reject: null\n    };\n    const promise = new Promise((resolve, reject) => {\n      inflightRequest.resolve = resolve;\n      inflightRequest.reject = reject;\n    });\n    this._pendingBatch.push(inflightRequest);\n\n    // if we would go *over* the size limit of the batch with this request, send the batch now\n    if (this._pendingBatch.length === this._sizeLimit) {\n      this.sendCurrentBatch(request);\n    }\n    if (!this._pendingBatchAggregator) {\n      // Schedule batch for next event loop + short duration\n      this._pendingBatchAggregator = setTimeout(() => {\n        this.sendCurrentBatch(request);\n      }, this._timeLimitMs);\n    }\n    return promise;\n  }\n}\n\nconst ChainInfoInputSchema = /* @__PURE__ */(() => z.object({\n  rpc: z.array(z.string().url()),\n  chainId: z.number(),\n  nativeCurrency: z.object({\n    name: z.string(),\n    symbol: z.string(),\n    decimals: z.number()\n  }),\n  slug: z.string()\n}))();\n\n/**\n * @public\n */\nconst SDKOptionsSchema = /* @__PURE__ */(() => z.object({\n  // @ts-expect-error - zod doesn't know anything about readonly\n  supportedChains: z.array(ChainInfoInputSchema).default(defaultChains),\n  clientId: z.string().optional(),\n  secretKey: z.string().optional(),\n  readonlySettings: z.object({\n    rpcUrl: z.string().url(),\n    chainId: z.number().optional()\n  }).optional(),\n  gasSettings: z.object({\n    maxPriceInGwei: z.number().min(1, \"gas price cannot be less than 1\").default(300),\n    speed: z.enum([\"standard\", \"fast\", \"fastest\"]).default(\"fastest\")\n  }).default({\n    maxPriceInGwei: 300,\n    speed: \"fastest\"\n  }),\n  gasless: z.union([z.object({\n    openzeppelin: z.object({\n      relayerUrl: z.string().url(),\n      relayerForwarderAddress: z.string().optional(),\n      useEOAForwarder: z.boolean().default(false),\n      domainName: z.string().default(\"GSNv2 Forwarder\"),\n      domainVersion: z.string().default(\"0.0.1\")\n    }),\n    experimentalChainlessSupport: z.boolean().default(false)\n  }), z.object({\n    biconomy: z.object({\n      apiId: z.string(),\n      apiKey: z.string(),\n      deadlineSeconds: z.number().min(1, \"deadlineSeconds cannot be les than 1\").default(3600)\n    })\n  })]).optional(),\n  gatewayUrls: z.array(z.string()).optional()\n}).default({\n  gasSettings: {\n    maxPriceInGwei: 300,\n    speed: \"fastest\"\n  }\n}))();\n\n/**\n * @public\n * All these configuration options are optional with sane defaults:\n * @example\n * ```javascript\n * {\n *   readonlySettings: {\n *     rpcUrl, // force read calls to go through your own RPC url\n *     chainId, // reduce RPC calls by sepcifying your chain ID\n *   },\n *   gasSettings: {\n *     maxPriceInGwei, // Maximum gas price for transactions (default 300 gwei)\n *     speed, // the tx speed setting: 'standard'|'fast|'fastest' (default: 'fastest')\n *   },\n *   gasless: {\n *     // By specifying a gasless configuration - all transactions will get forwarded to enable gasless transactions\n *     openzeppelin: {\n *       relayerUrl, // your OZ Defender relayer URL\n *       relayerForwarderAddress, // the OZ defender relayer address (defaults to the standard one)\n *     },\n *     biconomy: {\n *       apiId, // your Biconomy API Id\n *       apiKey, // your Biconomy API Key\n *       deadlineSeconds, // your Biconomy timeout preference\n *     },\n *   },\n * }\n * ```\n */\n\n/**\n * @internal\n */\n\n/**\n * @public\n */\n\nvar pkg = {\n\tname: \"@thirdweb-dev/sdk\",\n\tversion: \"3.10.67\",\n\tdescription: \"The main thirdweb SDK.\",\n\trepository: \"https://github.com/thirdweb-dev/js/tree/main/packages/sdk\",\n\tlicense: \"Apache-2.0\",\n\tmain: \"dist/thirdweb-dev-sdk.cjs.js\",\n\tmodule: \"dist/thirdweb-dev-sdk.esm.js\",\n\tbrowser: {\n\t\t\"./dist/thirdweb-dev-sdk.esm.js\": \"./dist/thirdweb-dev-sdk.browser.esm.js\"\n\t},\n\texports: {\n\t\t\".\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./dist/thirdweb-dev-sdk.browser.esm.js\",\n\t\t\t\t\"default\": \"./dist/thirdweb-dev-sdk.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./dist/thirdweb-dev-sdk.cjs.js\"\n\t\t},\n\t\t\"./evm\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/dist/thirdweb-dev-sdk-evm.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/dist/thirdweb-dev-sdk-evm.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/dist/thirdweb-dev-sdk-evm.cjs.js\"\n\t\t},\n\t\t\"./solana\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./solana/dist/thirdweb-dev-sdk-solana.browser.esm.js\",\n\t\t\t\t\"default\": \"./solana/dist/thirdweb-dev-sdk-solana.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./solana/dist/thirdweb-dev-sdk-solana.cjs.js\"\n\t\t},\n\t\t\"./evm/zksync\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/zksync/dist/thirdweb-dev-sdk-evm-zksync.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/zksync/dist/thirdweb-dev-sdk-evm-zksync.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/zksync/dist/thirdweb-dev-sdk-evm-zksync.cjs.js\"\n\t\t},\n\t\t\"./evm/functions\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/functions/dist/thirdweb-dev-sdk-evm-functions.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/functions/dist/thirdweb-dev-sdk-evm-functions.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/functions/dist/thirdweb-dev-sdk-evm-functions.cjs.js\"\n\t\t},\n\t\t\"./solana/server\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./solana/server/dist/thirdweb-dev-sdk-solana-server.browser.esm.js\",\n\t\t\t\t\"default\": \"./solana/server/dist/thirdweb-dev-sdk-solana-server.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./solana/server/dist/thirdweb-dev-sdk-solana-server.cjs.js\"\n\t\t},\n\t\t\"./package.json\": \"./package.json\"\n\t},\n\tfiles: [\n\t\t\"dist/\",\n\t\t\"evm/\",\n\t\t\"solana/\",\n\t\t\"server/\"\n\t],\n\tpreconstruct: {\n\t\tentrypoints: [\n\t\t\t\"index.ts\",\n\t\t\t\"evm/index.ts\",\n\t\t\t\"evm/functions/index.ts\",\n\t\t\t\"evm/zksync/index.ts\",\n\t\t\t\"solana/index.ts\",\n\t\t\t\"solana/server/index.ts\"\n\t\t],\n\t\texports: {\n\t\t\tenvConditions: [\n\t\t\t\t\"browser\"\n\t\t\t]\n\t\t}\n\t},\n\tsideEffects: false,\n\tscripts: {\n\t\tformat: \"prettier --write 'src/**/*'\",\n\t\tlint: \"eslint src/\",\n\t\tfix: \"eslint src/ --fix\",\n\t\tclean: \"rm -rf dist/\",\n\t\t\"generate-docs\": \"pnpm generate-docs:evm && pnpm generate-docs:solana && pnpm generate-snippets\",\n\t\t\"generate-docs:evm\": \"api-extractor run --local --config ./config/api-extractor-evm.json && api-documenter markdown -i ./temp -o ./docs/evm && rm -rf ./temp-evm && mv ./temp ./temp-evm\",\n\t\t\"generate-docs:solana\": \"api-extractor run --local --config ./config/api-extractor-solana.json && api-documenter markdown -i ./temp -o ./docs/solana && rm -rf ./temp-solana && mv ./temp ./temp-solana\",\n\t\t\"generate-snippets\": \"node ./scripts/generate-snippets.mjs && node ./scripts/generate-feature-snippets-evm.mjs\",\n\t\tbuild: \"tsc && preconstruct build\",\n\t\t\"test:evm:all\": \"SWC_NODE_PROJECT=./tsconfig.test.json nyc --reporter lcovonly --report-dir ./coverage/evm mocha --config './test/evm/.mocharc.json' --timeout 90000 --parallel './test/evm/**/*.test.ts'\",\n\t\t\"test:evm\": \"make test-evm\",\n\t\t\"test:evm:single\": \"SWC_NODE_PROJECT=./tsconfig.test.json mocha --config './test/evm/.mocharc.json' --timeout 90000\",\n\t\t\"node:solana:start\": \"DEBUG='amman:(info|error|debug)' amman start --forceClone\",\n\t\t\"node:solana:stop\": \"amman stop\",\n\t\t\"test:solana:all\": \"SWC_NODE_PROJECT=./tsconfig.test.json nyc --reporter lcovonly --report-dir ./coverage/solana  mocha --config './test/solana/.mocharc.json' --timeout 30000 --parallel './test/solana/**/*.test.ts'\",\n\t\t\"test:solana\": \"make test-sol\",\n\t\t\"test:solana:single\": \"SWC_NODE_PROJECT=./tsconfig.test.json mocha --config './test/solana/.mocharc.json' --timeout 30000\",\n\t\tpush: \"yalc push\"\n\t},\n\tdevDependencies: {\n\t\t\"@aws-sdk/client-secrets-manager\": \"^3.378.0\",\n\t\t\"@ethersproject/abstract-provider\": \"^5.7.0\",\n\t\t\"@metaplex-foundation/amman\": \"^0.12.1\",\n\t\t\"@metaplex-foundation/amman-client\": \"^0.2.4\",\n\t\t\"@metaplex-foundation/js\": \"^0.19.2\",\n\t\t\"@metaplex-foundation/mpl-token-metadata\": \"^2.12.0\",\n\t\t\"@microsoft/api-documenter\": \"^7.22.30\",\n\t\t\"@microsoft/api-extractor\": \"^7.36.3\",\n\t\t\"@microsoft/tsdoc\": \"^0.14.1\",\n\t\t\"@nomiclabs/hardhat-ethers\": \"^2.2.3\",\n\t\t\"@preconstruct/cli\": \"2.7.0\",\n\t\t\"@project-serum/anchor\": \"^0.25.0\",\n\t\t\"@solana/spl-token\": \"^0.3.5\",\n\t\t\"@solana/web3.js\": \"^1.62.0\",\n\t\t\"@swc-node/register\": \"^1.6.6\",\n\t\t\"@swc/core\": \"^1.3.71\",\n\t\t\"@thirdweb-dev/tsconfig\": \"workspace:*\",\n\t\t\"@types/bn.js\": \"^5.1.1\",\n\t\t\"@types/chai\": \"^4.3.5\",\n\t\t\"@types/deep-equal-in-any-order\": \"^1.0.1\",\n\t\t\"@types/mocha\": \"^10.0.0\",\n\t\t\"@types/node\": \"^18.17.1\",\n\t\t\"@types/uuid\": \"^9.0.2\",\n\t\t\"@typescript-eslint/eslint-plugin\": \"^6.2.0\",\n\t\t\"@typescript-eslint/parser\": \"^6.2.0\",\n\t\tchai: \"^4.3.6\",\n\t\t\"deep-equal-in-any-order\": \"^1.1.18\",\n\t\t\"dotenv-mono\": \"^1.3.10\",\n\t\teslint: \"^8.45.0\",\n\t\t\"eslint-config-prettier\": \"^8.9.0\",\n\t\t\"eslint-config-thirdweb\": \"workspace:*\",\n\t\t\"eslint-plugin-better-tree-shaking\": \"0.0.3\",\n\t\t\"eslint-plugin-import\": \"^2.26.0\",\n\t\t\"eslint-plugin-inclusive-language\": \"^2.2.0\",\n\t\t\"eslint-plugin-prettier\": \"^5.0.0\",\n\t\t\"eslint-plugin-tsdoc\": \"^0.2.16\",\n\t\tethers: \"^5.7.2\",\n\t\t\"ethers-aws-kms-signer\": \"^1.3.2\",\n\t\thardhat: \"^2.17.0\",\n\t\tmocha: \"^10.2.0\",\n\t\tnyc: \"^15.1.0\",\n\t\tprettier: \"^3.0.0\",\n\t\ttypescript: \"^5.1.6\",\n\t\t\"zksync-web3\": \"^0.14.3\"\n\t},\n\tpeerDependencies: {\n\t\t\"@aws-sdk/client-secrets-manager\": \"^3.215.0\",\n\t\t\"@metaplex-foundation/js\": \"^0.17.6\",\n\t\t\"@metaplex-foundation/mpl-token-metadata\": \"^2.3.3\",\n\t\t\"@project-serum/anchor\": \"^0.25.0\",\n\t\t\"@solana/spl-token\": \"^0.3.5\",\n\t\t\"@solana/web3.js\": \"^1.62.0\",\n\t\tethers: \"^5\",\n\t\t\"ethers-aws-kms-signer\": \"^1.3.2\",\n\t\t\"zksync-web3\": \"^0.14.3\"\n\t},\n\tpeerDependenciesMeta: {\n\t\t\"@aws-sdk/client-secrets-manager\": {\n\t\t\toptional: true\n\t\t},\n\t\t\"ethers-aws-kms-signer\": {\n\t\t\toptional: true\n\t\t},\n\t\t\"@solana/spl-token\": {\n\t\t\toptional: true\n\t\t},\n\t\t\"@solana/web3.js\": {\n\t\t\toptional: true\n\t\t},\n\t\t\"@project-serum/anchor\": {\n\t\t\toptional: true\n\t\t},\n\t\t\"@metaplex-foundation/mpl-token-metadata\": {\n\t\t\toptional: true\n\t\t},\n\t\t\"@metaplex-foundation/js\": {\n\t\t\toptional: true\n\t\t},\n\t\t\"zksync-web3\": {\n\t\t\toptional: true\n\t\t}\n\t},\n\tdependencies: {\n\t\t\"@thirdweb-dev/chains\": \"workspace:*\",\n\t\t\"@thirdweb-dev/contracts-js\": \"workspace:*\",\n\t\t\"@thirdweb-dev/generated-abis\": \"workspace:*\",\n\t\t\"@thirdweb-dev/storage\": \"workspace:*\",\n\t\tabitype: \"^0.2.5\",\n\t\t\"bn.js\": \"^5.2.1\",\n\t\tbs58: \"^5.0.0\",\n\t\tbuffer: \"^6.0.3\",\n\t\t\"cross-fetch\": \"^3.1.8\",\n\t\teventemitter3: \"^5.0.1\",\n\t\t\"fast-deep-equal\": \"^3.1.3\",\n\t\tmerkletreejs: \"^0.2.24\",\n\t\t\"tiny-invariant\": \"^1.2.0\",\n\t\ttweetnacl: \"^1.0.3\",\n\t\tuuid: \"^9.0.0\",\n\t\tyaml: \"^2.3.1\",\n\t\tzod: \"^3.20.2\"\n\t},\n\tbugs: {\n\t\turl: \"https://github.com/thirdweb-dev/js/issues\"\n\t},\n\tauthor: \"thirdweb eng <eng@thirdweb.com>\"\n};\n\n/**\n * @internal\n */\nfunction buildDefaultMap(options) {\n  return options.supportedChains.reduce((previousValue, currentValue) => {\n    previousValue[currentValue.chainId] = currentValue;\n    return previousValue;\n  }, {});\n}\n\n/**\n * Get an ethers provider for the specified network\n *\n * @internal\n */\nfunction getChainProvider(network, sdkOptions) {\n  // If we have an RPC URL, use that for the provider\n  if (typeof network === \"string\" && isRpcUrl(network)) {\n    return getProviderFromRpcUrl(network, sdkOptions);\n  }\n\n  // Add the chain to the supportedChains\n  const options = SDKOptionsSchema.parse(sdkOptions);\n  if (isChainConfig(network)) {\n    options.supportedChains = [\n    // @ts-expect-error - we know this is a chain and it will work to build the map\n    network, ...options.supportedChains.filter(c => c.chainId !== network.chainId)];\n  }\n\n  // Build a map of chainId -> ChainInfo based on the supportedChains\n  const rpcMap = buildDefaultMap(options);\n  let rpcUrl = \"\";\n  let chainId;\n  try {\n    // Resolve the chain id from the network, which could be a chain, chain name, or chain id\n    chainId = getChainIdFromNetwork(network, options);\n    // Attempt to get the RPC url from the map based on the chainId\n    rpcUrl = getValidChainRPCs(rpcMap[chainId], options.clientId)[0];\n  } catch (e) {\n    // no-op\n  }\n\n  // if we still don't have an url fall back to just using the chainId or slug in the rpc and try that\n  if (!rpcUrl) {\n    rpcUrl = `https://${chainId || network}.rpc.thirdweb.com/${options.clientId || \"\"}`;\n  }\n  if (!rpcUrl) {\n    throw new Error(`No rpc url found for chain ${network}. Please provide a valid rpc url via the 'supportedChains' property of the sdk options.`);\n  }\n  return getProviderFromRpcUrl(rpcUrl, sdkOptions, chainId);\n}\nfunction getChainIdFromNetwork(network, options) {\n  if (isChainConfig(network)) {\n    // If it's a chain just return the chain id\n    return network.chainId;\n  } else if (typeof network === \"number\") {\n    // If it's a number (chainId) return it directly\n    return network;\n  } else {\n    // If it's a string (chain name) return the chain id from the map\n    const chainNameToId = options.supportedChains.reduce((acc, curr) => {\n      acc[curr.slug] = curr.chainId;\n      return acc;\n    }, {});\n    if (network in chainNameToId) {\n      return chainNameToId[network];\n    }\n  }\n  throw new Error(`Cannot resolve chainId from: ${network} - please pass the chainId instead and specify it in the 'supportedChains' property of the SDK options.`);\n}\nasync function getChainIdOrName(network) {\n  if (isChainConfig(network)) {\n    // If it's a chain just return the chain id\n    return network.chainId;\n  } else if (typeof network === \"number\") {\n    // If it's a number (chainId) return it directly\n    return network;\n  } else if (typeof network === \"number\") {\n    // If it's a string (chain name) return the chain id from the map\n    return network;\n  } else if (isProvider(network)) {\n    return network.getNetwork().then(n => n.chainId);\n  } else if (isSigner(network)) {\n    if (!network.provider) {\n      throw new Error(\"Signer does not have a provider\");\n    }\n    return network.provider.getNetwork().then(n => n.chainId);\n  }\n  throw new Error(`Cannot resolve chainId from: ${network}.`);\n}\n\n/**\n * Check whether a NetworkInput value is a Chain config (naively, without parsing)\n */\nfunction isChainConfig(network) {\n  return typeof network !== \"string\" && typeof network !== \"number\" && !isSigner(network) && !isProvider(network);\n}\n\n/**\n * Returns whether the specified url is a valid RPC url, as implemented by ethers.getDefaultProvier():\n * - https://github.com/ethers-io/ethers.js/blob/ec1b9583039a14a0e0fa15d0a2a6082a2f41cf5b/packages/providers/src.ts/index.ts#L55\n *\n * @param url - The url to check\n *\n * @internal\n */\nfunction isRpcUrl(url) {\n  const match = url.match(/^(ws|http)s?:/i);\n  if (match) {\n    switch (match[1].toLowerCase()) {\n      case \"http\":\n      case \"https\":\n      case \"ws\":\n      case \"wss\":\n        return true;\n    }\n  }\n  return false;\n}\nconst RPC_PROVIDER_MAP = new Map();\n\n/**\n * Get an ethers provider based on the specified RPC URL\n *\n * @param rpcUrl - The RPC URL\n * @param chainId - The optional chain ID\n * @returns The provider for the specified RPC URL\n *\n * @internal\n */\nfunction getProviderFromRpcUrl(rpcUrl, sdkOptions, chainId) {\n  try {\n    const headers = {};\n    // will be used to make sure we don't cache providers with different auth strategies\n    let authStrategy = \"none\";\n    if (isTwUrl(rpcUrl)) {\n      // if we have a secret key passed in the SDK options we want to always use that\n      if (sdkOptions?.secretKey) {\n        // compute the clientId from the secret key\n        // should only be used on Node.js in a backend/script context\n        if (\"object\" !== \"undefined\") {\n          throw new Error(\"Cannot use secretKey in browser context\");\n        }\n        // this is on purpose because we're using the crypto module only in node\n        // try to trick webpack :)\n        const pto = \"pto\";\n        // eslint-disable-next-line @typescript-eslint/no-var-requires\n        const crypto = require(\"cry\" + pto);\n        const hashedSecretKey = crypto.createHash(\"sha256\").update(sdkOptions.secretKey).digest(\"hex\");\n        const derivedClientId = hashedSecretKey.slice(0, 32);\n        const utilizedRpcUrl = new URL(rpcUrl);\n        // always set the clientId on the path to the derived client id\n        utilizedRpcUrl.pathname = derivedClientId;\n        // set the headers\n        headers[\"x-client-id\"] = derivedClientId;\n        headers[\"x-secret-key\"] = sdkOptions.secretKey;\n        // set the final rpc url\n        rpcUrl = utilizedRpcUrl.toString();\n        authStrategy = \"secretKey\";\n      }\n      // if we do NOT have a secret key but we have a client id we want to use that\n      else if (sdkOptions?.clientId) {\n        const utilizedRpcUrl = new URL(rpcUrl);\n        // always set the clientId on the path to the client id\n        utilizedRpcUrl.pathname = sdkOptions.clientId;\n        // set the headers\n        headers[\"x-client-id\"] = sdkOptions.clientId;\n        // set the final rpc url\n        rpcUrl = utilizedRpcUrl.toString();\n        authStrategy = \"clientId\";\n      }\n\n      // if we *also* have a tw auth token on global context add it to the headers (in addition to anything else)\n      if (typeof globalThis !== \"undefined\" && \"TW_AUTH_TOKEN\" in globalThis && typeof globalThis.TW_AUTH_TOKEN === \"string\") {\n        headers[\"authorization\"] = `Bearer ${globalThis.TW_AUTH_TOKEN}`;\n        authStrategy = \"twAuthToken\";\n      }\n      if (typeof globalThis !== \"undefined\" && \"TW_CLI_AUTH_TOKEN\" in globalThis && typeof globalThis.TW_CLI_AUTH_TOKEN === \"string\") {\n        headers[\"x-authorize-wallet\"] = \"true\";\n      }\n      const bundleId = typeof globalThis !== \"undefined\" && \"APP_BUNDLE_ID\" in globalThis ? globalThis.APP_BUNDLE_ID : undefined;\n      if (!rpcUrl.includes(\"bundleId\")) {\n        rpcUrl = rpcUrl + (bundleId ? `?bundleId=${bundleId}` : \"\");\n      }\n      headers[\"x-sdk-version\"] = pkg.version;\n      headers[\"x-sdk-name\"] = pkg.name;\n      headers[\"x-sdk-platform\"] = bundleId ? \"react-native\" : isBrowser$1() ? window.bridge !== undefined ? \"webGL\" : \"browser\" : \"node\";\n    }\n    const match = rpcUrl.match(/^(ws|http)s?:/i);\n    // Try the JSON batch provider if available\n    if (match) {\n      switch (match[1].toLowerCase()) {\n        case \"http\":\n        case \"https\":\n          // Create a unique cache key for these params\n          const seralizedOpts = `${rpcUrl}-${chainId || -1}-${authStrategy}`;\n\n          // Check if we have a provider in our cache already\n          const existingProvider = RPC_PROVIDER_MAP.get(seralizedOpts);\n          if (existingProvider) {\n            return existingProvider;\n          }\n\n          // Otherwise, create a new provider on the specific network\n          const newProvider = chainId ?\n          // If we know the chainId we should use the StaticJsonRpcBatchProvider\n          new StaticJsonRpcBatchProvider({\n            url: rpcUrl,\n            headers\n          }, chainId) :\n          // Otherwise fall back to the built in json rpc batch provider\n          new providers.JsonRpcBatchProvider({\n            url: rpcUrl,\n            headers\n          });\n\n          // Save the provider in our cache\n          RPC_PROVIDER_MAP.set(seralizedOpts, newProvider);\n          return newProvider;\n        case \"ws\":\n        case \"wss\":\n          // Use the WebSocketProvider for ws:// URLs\n          // TODO: handle auth for WS at some point\n          return new providers.WebSocketProvider(rpcUrl, chainId);\n      }\n    }\n  } catch (e) {\n    // no-op\n  }\n\n  // Always fallback to the default provider if no other option worked\n  return providers.getDefaultProvider(rpcUrl);\n}\n\n// TODO move to utils package\nfunction isTwUrl(url) {\n  return new URL(url).hostname.endsWith(\".thirdweb.com\");\n}\n\n/**\n * @internal\n */\nfunction getSignerAndProvider(network, options) {\n  let signer;\n  let provider;\n  if (isSigner(network)) {\n    // Here, we have an ethers.Signer\n    signer = network;\n    if (network.provider) {\n      provider = network.provider;\n    }\n  } else if (isProvider(network)) {\n    // Here, we have an ethers.providers.Provider\n    provider = network;\n  } else {\n    // Here, we must have a ChainOrRpcUrl, which is a chain name, chain id, rpc url, or chain config\n    // All of which, getChainProvider can handle for us\n    provider = getChainProvider(network, options);\n  }\n  if (options?.readonlySettings) {\n    // If readonly settings are specified, then overwrite the provider\n    provider = getProviderFromRpcUrl(options.readonlySettings.rpcUrl, options, options.readonlySettings.chainId);\n  }\n\n  // At this point, if we don't have a provider, don't default to a random chain\n  // Instead, just throw an error\n  if (!provider) {\n    if (signer) {\n      throw new Error(\"No provider passed to the SDK! Please make sure that your signer is connected to a provider!\");\n    }\n    throw new Error(\"No provider found! Make sure to specify which network to connect to, or pass a signer or provider to the SDK!\");\n  }\n  return [signer, provider];\n}\n\n// TODO: Respect SDK RPC configuration and don't pull straight from ethers\nlet provider;\nconst ENS_CACHE = new Map();\nasync function resolveEns(ens) {\n  let depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  if (!provider) {\n    // if we don't already have a provider then get one\n    provider = getSignerAndProvider(\"ethereum\")[1];\n  }\n  let ensPromise;\n  if (ENS_CACHE.has(ens)) {\n    ensPromise = ENS_CACHE.get(ens);\n  } else {\n    ensPromise = provider.resolveName(ens).then(address => {\n      // If they don't have an ENS, only cache for 30s\n      if (!address) {\n        return {\n          address: null,\n          expirationTime: new Date(Date.now() + 1000 * 30)\n        };\n      }\n\n      // Cache ENS for 1 hour\n      return {\n        address,\n        expirationTime: new Date(Date.now() + 1000 * 60 * 5)\n      };\n    });\n  }\n  const resolvedPromise = await ensPromise;\n  if (resolvedPromise.expirationTime < new Date()) {\n    // delete the cache if it's expired\n    ENS_CACHE.delete(ens);\n    // then call ourselves again to refresh the cache, but don't block on the result\n    if (depth === 0) {\n      resolveEns(ens, depth + 1);\n    }\n  }\n  return resolvedPromise.address;\n}\n\n// Only pass through to provider call if value ends with .eth or .cb.id\nconst EnsSchema = /* @__PURE__ */(() => z.custom(ens => typeof ens === \"string\" && (ens.endsWith(\".eth\") || ens.endsWith(\".cb.id\"))).transform(async ens => resolveEns(ens)).refine(address => !!address && utils.isAddress(address), {\n  message: \"Provided value was not a valid ENS name\"\n}))();\n\nconst AddressSchema = /* @__PURE__ */z.custom(address => typeof address === \"string\" && utils.isAddress(address), out => {\n  return {\n    message: `${out} is not a valid address`\n  };\n});\n\n// Important for address check to come before ENS so network request is only made when necessary\nconst AddressOrEnsSchema = /* @__PURE__ */z.union([AddressSchema, EnsSchema], {\n  invalid_type_error: \"Provided value was not a valid address or ENS name\"\n});\n\n// Use this everywhere even though it's just string so we can optionally switch it out\n// more easily if we want to later\n\n/**\n * @public\n */\nlet ChainId = /*#__PURE__*/function (ChainId) {\n  ChainId[ChainId[\"Mainnet\"] = 1] = \"Mainnet\";\n  ChainId[ChainId[\"Goerli\"] = 5] = \"Goerli\";\n  ChainId[ChainId[\"Polygon\"] = 137] = \"Polygon\";\n  ChainId[ChainId[\"Mumbai\"] = 80001] = \"Mumbai\";\n  ChainId[ChainId[\"Localhost\"] = 1337] = \"Localhost\";\n  ChainId[ChainId[\"Hardhat\"] = 31337] = \"Hardhat\";\n  ChainId[ChainId[\"Fantom\"] = 250] = \"Fantom\";\n  ChainId[ChainId[\"FantomTestnet\"] = 4002] = \"FantomTestnet\";\n  ChainId[ChainId[\"Avalanche\"] = 43114] = \"Avalanche\";\n  ChainId[ChainId[\"AvalancheFujiTestnet\"] = 43113] = \"AvalancheFujiTestnet\";\n  ChainId[ChainId[\"Optimism\"] = 10] = \"Optimism\";\n  ChainId[ChainId[\"OptimismGoerli\"] = 420] = \"OptimismGoerli\";\n  ChainId[ChainId[\"Arbitrum\"] = 42161] = \"Arbitrum\";\n  ChainId[ChainId[\"ArbitrumGoerli\"] = 421613] = \"ArbitrumGoerli\";\n  ChainId[ChainId[\"BinanceSmartChainMainnet\"] = 56] = \"BinanceSmartChainMainnet\";\n  ChainId[ChainId[\"BinanceSmartChainTestnet\"] = 97] = \"BinanceSmartChainTestnet\";\n  return ChainId;\n}({});\n\n// @ts-expect-error - readonly vs not\nlet supportedChains = defaultChains;\n\n/**\n * @internal\n */\nfunction setSupportedChains(chains) {\n  if (chains && chains.length > 0) {\n    supportedChains = chains;\n  } else {\n    // @ts-expect-error - readonly vs not\n    supportedChains = defaultChains;\n  }\n}\n\n/**\n * @internal\n */\nfunction getSupportedChains() {\n  return supportedChains;\n}\n\n/**\n * @public\n */\nconst NATIVE_TOKEN_ADDRESS = \"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\";\n\n/**\n * @public\n */\nconst NATIVE_TOKENS = {\n  [ChainId.Mainnet]: {\n    name: \"Ether\",\n    symbol: \"ETH\",\n    decimals: 18,\n    wrapped: {\n      address: \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\n      name: \"Wrapped Ether\",\n      symbol: \"WETH\"\n    }\n  },\n  [ChainId.Goerli]: {\n    name: \"Görli Ether\",\n    symbol: \"GOR\",\n    decimals: 18,\n    wrapped: {\n      address: \"0xb4fbf271143f4fbf7b91a5ded31805e42b2208d6\",\n      name: \"Wrapped Ether\",\n      symbol: \"WETH\"\n    }\n  },\n  11155111: {\n    name: \"Sepolia Ether\",\n    symbol: \"SEP\",\n    decimals: 18,\n    wrapped: {\n      address: \"0x7b79995e5f793A07Bc00c21412e50Ecae098E7f9\",\n      name: \"Wrapped Ether\",\n      symbol: \"WETH\"\n    }\n  },\n  [ChainId.Polygon]: {\n    name: \"Matic\",\n    symbol: \"MATIC\",\n    decimals: 18,\n    wrapped: {\n      address: \"0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270\",\n      name: \"Wrapped Matic\",\n      symbol: \"WMATIC\"\n    }\n  },\n  [ChainId.Mumbai]: {\n    name: \"Matic\",\n    symbol: \"MATIC\",\n    decimals: 18,\n    wrapped: {\n      address: \"0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889\",\n      name: \"Wrapped Matic\",\n      symbol: \"WMATIC\"\n    }\n  },\n  [ChainId.Avalanche]: {\n    name: \"Avalanche\",\n    symbol: \"AVAX\",\n    decimals: 18,\n    wrapped: {\n      address: \"0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7\",\n      name: \"Wrapped AVAX\",\n      symbol: \"WAVAX\"\n    }\n  },\n  [ChainId.AvalancheFujiTestnet]: {\n    name: \"Avalanche\",\n    symbol: \"AVAX\",\n    decimals: 18,\n    wrapped: {\n      address: \"0xd00ae08403B9bbb9124bB305C09058E32C39A48c\",\n      name: \"Wrapped AVAX\",\n      symbol: \"WAVAX\"\n    }\n  },\n  [ChainId.Fantom]: {\n    name: \"Fantom\",\n    symbol: \"FTM\",\n    decimals: 18,\n    wrapped: {\n      address: \"0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83\",\n      name: \"Wrapped Fantom\",\n      symbol: \"WFTM\"\n    }\n  },\n  [ChainId.FantomTestnet]: {\n    name: \"Fantom\",\n    symbol: \"FTM\",\n    decimals: 18,\n    wrapped: {\n      address: \"0xf1277d1Ed8AD466beddF92ef448A132661956621\",\n      name: \"Wrapped Fantom\",\n      symbol: \"WFTM\"\n    }\n  },\n  [ChainId.Arbitrum]: {\n    name: \"Ether\",\n    symbol: \"ETH\",\n    decimals: 18,\n    wrapped: {\n      address: \"0x82af49447d8a07e3bd95bd0d56f35241523fbab1\",\n      name: \"Wrapped Ether\",\n      symbol: \"WETH\"\n    }\n  },\n  [ChainId.ArbitrumGoerli]: {\n    name: \"Arbitrum Goerli Ether\",\n    symbol: \"AGOR\",\n    decimals: 18,\n    wrapped: {\n      address: \"0xe39Ab88f8A4777030A534146A9Ca3B52bd5D43A3\",\n      name: \"Wrapped Ether\",\n      symbol: \"WETH\"\n    }\n  },\n  [ChainId.Optimism]: {\n    name: \"Ether\",\n    symbol: \"ETH\",\n    decimals: 18,\n    wrapped: {\n      address: \"0x4200000000000000000000000000000000000006\",\n      name: \"Wrapped Ether\",\n      symbol: \"WETH\"\n    }\n  },\n  [ChainId.OptimismGoerli]: {\n    name: \"Goerli Ether\",\n    symbol: \"ETH\",\n    decimals: 18,\n    wrapped: {\n      address: \"0x4200000000000000000000000000000000000006\",\n      name: \"Wrapped Ether\",\n      symbol: \"WETH\"\n    }\n  },\n  [ChainId.BinanceSmartChainMainnet]: {\n    name: \"Binance Chain Native Token\",\n    symbol: \"BNB\",\n    decimals: 18,\n    wrapped: {\n      address: \"0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c\",\n      name: \"Wrapped Binance Chain Token\",\n      symbol: \"WBNB\"\n    }\n  },\n  [ChainId.BinanceSmartChainTestnet]: {\n    name: \"Binance Chain Native Token\",\n    symbol: \"TBNB\",\n    decimals: 18,\n    wrapped: {\n      address: \"0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd\",\n      name: \"Wrapped Binance Chain Testnet Token\",\n      symbol: \"WBNB\"\n    }\n  },\n  [ChainId.Hardhat]: {\n    name: \"Ether\",\n    symbol: \"ETH\",\n    decimals: 18,\n    wrapped: {\n      address: \"0x5FbDB2315678afecb367f032d93F642f64180aa3\",\n      name: \"Wrapped Ether\",\n      symbol: \"WETH\"\n    }\n  },\n  [ChainId.Localhost]: {\n    name: \"Ether\",\n    symbol: \"ETH\",\n    decimals: 18,\n    wrapped: {\n      address: \"0x5FbDB2315678afecb367f032d93F642f64180aa3\",\n      name: \"Wrapped Ether\",\n      symbol: \"WETH\"\n    }\n  },\n  84531: {\n    name: \"Base Goerli Testnet\",\n    symbol: \"ETH\",\n    decimals: 18,\n    wrapped: {\n      address: \"0x4200000000000000000000000000000000000006\",\n      name: \"Wrapped Ether\",\n      symbol: \"WETH\"\n    }\n  },\n  // eslint-disable-next-line no-useless-computed-key\n  [280]: {\n    name: \"zkSync Era Testnet\",\n    symbol: \"ETH\",\n    decimals: 18,\n    wrapped: {\n      address: \"0x5AEa5775959fBC2557Cc8789bC1bf90A239D9a91\",\n      name: \"Wrapped Ether\",\n      symbol: \"WETH\"\n    }\n  }\n};\n\n/**\n * Returns the native token for a given chain\n * @param chainId - the chain id\n * @public\n */\nfunction getNativeTokenByChainId(chainId) {\n  const chain = getSupportedChains().find(c => c.chainId === chainId);\n  if (chain && chain.nativeCurrency) {\n    return {\n      name: chain.nativeCurrency.name,\n      symbol: chain.nativeCurrency.symbol,\n      decimals: 18,\n      wrapped: {\n        address: constants.AddressZero,\n        name: `Wrapped ${chain.nativeCurrency.name}`,\n        symbol: `W${chain.nativeCurrency.symbol}`\n      }\n    };\n  }\n  return NATIVE_TOKENS[chainId] || {\n    name: \"Ether\",\n    symbol: \"ETH\",\n    decimals: 18,\n    wrapped: {\n      address: constants.AddressZero,\n      name: \"Wrapped Ether\",\n      symbol: \"WETH\"\n    }\n  };\n}\nconst LINK_TOKEN_ADDRESS = {\n  [ChainId.Mainnet]: \"0x514910771AF9Ca656af840dff83E8264EcF986CA\",\n  [ChainId.Goerli]: \"0x326C977E6efc84E512bB9C30f76E30c160eD06FB\",\n  [ChainId.BinanceSmartChainMainnet]: \"0x404460C6A5EdE2D891e8297795264fDe62ADBB75\",\n  [ChainId.Polygon]: \"0xb0897686c545045aFc77CF20eC7A532E3120E0F1\",\n  [ChainId.Mumbai]: \"0x326C977E6efc84E512bB9C30f76E30c160eD06FB\",\n  [ChainId.Avalanche]: \"0x5947BB275c521040051D82396192181b413227A3\",\n  [ChainId.AvalancheFujiTestnet]: \"0x0b9d5D9136855f6FEc3c0993feE6E9CE8a297846\",\n  [ChainId.Fantom]: \"0x6F43FF82CCA38001B6699a8AC47A2d0E66939407\",\n  [ChainId.FantomTestnet]: \"0xfaFedb041c0DD4fA2Dc0d87a6B0979Ee6FA7af5F\"\n};\n\nconst RawDateSchema = /* @__PURE__ */(() => z.union([z.date().transform(i => {\n  return BigNumber.from(Math.floor(i.getTime() / 1000));\n}), z.number().transform(i => {\n  return BigNumber.from(i);\n})]))();\n\n/**\n * Default to now\n */\nconst StartDateSchema = /* @__PURE__ */(() => RawDateSchema.default(new Date(0)))();\n\n/**\n * Default to 10 years from now\n */\nconst EndDateSchema = /* @__PURE__ */(() => RawDateSchema.default(new Date(Date.now() + 1000 * 60 * 60 * 24 * 365 * 10)))();\n\n/**\n * @internal\n */\nconst CurrencySchema = /* @__PURE__ */(() => z.object({\n  name: z.string(),\n  symbol: z.string(),\n  decimals: z.number()\n}))();\n\n/**\n * @internal\n */\nconst CurrencyValueSchema = /* @__PURE__ */(() => CurrencySchema.extend({\n  value: BigNumberSchema,\n  displayValue: z.string()\n}))();\n\n/**\n * @internal\n */\nconst MerkleSchema = /* @__PURE__ */(() => z.object({\n  merkle: z.record(z.string()).default({})\n}))();\nconst SnapshotEntryInput = /* @__PURE__ */(() => z.object({\n  address: AddressOrEnsSchema,\n  maxClaimable: QuantitySchema.default(0),\n  // defaults to 0\n  price: QuantitySchema.optional(),\n  // defaults to unlimited, but can be undefined in old snapshots\n  currencyAddress: AddressOrEnsSchema.default(constants.AddressZero).optional() // defaults to AddressZero, but can be undefined for old snapshots\n}))();\n\n/**\n * @internal\n */\nconst SnapshotInputSchema = /* @__PURE__ */(() => z.union([z.array(z.string()).transform(async strings => await Promise.all(strings.map(address => SnapshotEntryInput.parseAsync({\n  address\n})))), z.array(SnapshotEntryInput)]))();\nconst SnapshotEntryWithProofSchema = /* @__PURE__ */(() => SnapshotEntryInput.extend({\n  proof: z.array(z.string())\n}))();\n\n/**\n * @internal\n */\nconst SnapshotSchema = /* @__PURE__ */(() => z.object({\n  /**\n   * The merkle root\n   */\n  merkleRoot: z.string(),\n  claims: z.array(SnapshotEntryWithProofSchema)\n}))();\n\n/**\n * @internal\n */\n\n/**\n * @internal\n */\nconst SnapshotInfoSchema = /* @__PURE__ */(() => z.object({\n  merkleRoot: z.string(),\n  snapshotUri: z.string()\n}))();\n\n/**\n * @internal\n */\nconst ClaimConditionMetadataSchema = /* @__PURE__ */(() => z.object({\n  name: z.string().optional()\n}).catchall(z.unknown()))();\n\n/**\n * @internal\n */\nconst ClaimConditionInputSchema = /* @__PURE__ */(() => z.object({\n  startTime: StartDateSchema,\n  currencyAddress: z.string().default(NATIVE_TOKEN_ADDRESS),\n  price: AmountSchema.default(0),\n  maxClaimableSupply: QuantitySchema,\n  maxClaimablePerWallet: QuantitySchema,\n  waitInSeconds: BigNumberishSchema.default(0),\n  merkleRootHash: BytesLikeSchema.default(utils.hexZeroPad([0], 32)),\n  snapshot: z.optional(SnapshotInputSchema).nullable(),\n  metadata: ClaimConditionMetadataSchema.optional()\n}))();\n\n/**\n * @internal\n */\nconst ClaimConditionInputArray = /* @__PURE__ */z.array(ClaimConditionInputSchema);\n\n/**\n * @internal\n */\nconst PartialClaimConditionInputSchema = /* @__PURE__ */ClaimConditionInputSchema.partial();\n\n/**\n * @internal\n */\nconst ClaimConditionOutputSchema = /* @__PURE__ */(() => ClaimConditionInputSchema.extend({\n  availableSupply: QuantitySchema,\n  currentMintSupply: QuantitySchema,\n  currencyMetadata: CurrencyValueSchema.default({\n    value: BigNumber.from(\"0\"),\n    displayValue: \"0\",\n    symbol: \"\",\n    decimals: 18,\n    name: \"\"\n  }),\n  price: BigNumberSchema,\n  waitInSeconds: BigNumberSchema,\n  startTime: BigNumberSchema.transform(n => new Date(n.toNumber() * 1000)),\n  snapshot: SnapshotInputSchema.optional().nullable()\n}))();\n\nfunction resolveOrGenerateId(requestUId) {\n  if (requestUId === undefined) {\n    const buffer = Buffer.alloc(16);\n    v4({}, buffer);\n    return utils.hexlify(utils.toUtf8Bytes(buffer.toString(\"hex\")));\n  } else {\n    return utils.hexlify(requestUId);\n  }\n}\n\n/**\n * @internal\n */\nconst BaseSignaturePayloadInput = /* @__PURE__ */(() => z.object({\n  to: AddressOrEnsSchema.refine(address => address.toLowerCase() !== constants.AddressZero, {\n    message: \"Cannot create payload to mint to zero address\"\n  }),\n  price: AmountSchema.default(0),\n  currencyAddress: AddressSchema.default(NATIVE_TOKEN_ADDRESS),\n  mintStartTime: StartDateSchema,\n  mintEndTime: EndDateSchema,\n  uid: z.string().optional().transform(arg => resolveOrGenerateId(arg)),\n  primarySaleRecipient: AddressOrEnsSchema.default(constants.AddressZero)\n}))();\n\n/**\n * @internal\n */\nconst Signature20PayloadInput = /* @__PURE__ */BaseSignaturePayloadInput.extend({\n  quantity: AmountSchema\n});\n\n/**\n * @internal\n */\nconst Signature20PayloadOutput = /* @__PURE__ */Signature20PayloadInput.extend({\n  mintStartTime: BigNumberSchema,\n  mintEndTime: BigNumberSchema\n});\n\n/**\n * @internal\n */\nconst Signature721PayloadInput = /* @__PURE__ */(() => BaseSignaturePayloadInput.extend({\n  metadata: NFTInputOrUriSchema,\n  royaltyRecipient: z.string().default(constants.AddressZero),\n  royaltyBps: BasisPointsSchema.default(0)\n}))();\n\n/**\n * @internal\n */\nconst Signature721PayloadOutput = /* @__PURE__ */(() => Signature721PayloadInput.extend({\n  metadata: NFTInputOrUriSchema.default(\"\"),\n  uri: z.string(),\n  royaltyBps: BigNumberSchema,\n  mintStartTime: BigNumberSchema,\n  mintEndTime: BigNumberSchema\n}))();\n\n/**\n * @internal\n */\nconst Signature1155PayloadInput = /* @__PURE__ */(() => Signature721PayloadInput.extend({\n  metadata: NFTInputOrUriSchema.default(\"\"),\n  quantity: BigNumberishSchema\n}))();\n\n/**\n * @internal\n */\nconst Signature1155PayloadInputWithTokenId = /* @__PURE__ */Signature1155PayloadInput.extend({\n  tokenId: BigNumberishSchema\n});\n\n/**\n * @internal\n */\nconst Signature1155PayloadOutput = /* @__PURE__ */Signature721PayloadOutput.extend({\n  tokenId: BigNumberSchema,\n  quantity: BigNumberSchema\n});\n\n/**\n * @internal\n */\nconst Signature721WithQuantityInput = /* @__PURE__ */(() => Signature721PayloadInput.extend({\n  metadata: NFTInputOrUriSchema.default(\"\"),\n  quantity: BigNumberSchema.default(1)\n}))();\n\n/**\n * @internal\n */\nconst Signature721WithQuantityOutput = /* @__PURE__ */(() => Signature721PayloadOutput.extend({\n  quantity: BigNumberSchema.default(1)\n}))();\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\n/**\n * @public\n */\n\nconst MintRequest20 = [{\n  name: \"to\",\n  type: \"address\"\n}, {\n  name: \"primarySaleRecipient\",\n  type: \"address\"\n}, {\n  name: \"quantity\",\n  type: \"uint256\"\n}, {\n  name: \"price\",\n  type: \"uint256\"\n}, {\n  name: \"currency\",\n  type: \"address\"\n}, {\n  name: \"validityStartTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"validityEndTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"uid\",\n  type: \"bytes32\"\n}];\nconst MintRequest721 = [{\n  name: \"to\",\n  type: \"address\"\n}, {\n  name: \"royaltyRecipient\",\n  type: \"address\"\n}, {\n  name: \"royaltyBps\",\n  type: \"uint256\"\n}, {\n  name: \"primarySaleRecipient\",\n  type: \"address\"\n}, {\n  name: \"uri\",\n  type: \"string\"\n}, {\n  name: \"price\",\n  type: \"uint256\"\n}, {\n  name: \"currency\",\n  type: \"address\"\n}, {\n  name: \"validityStartTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"validityEndTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"uid\",\n  type: \"bytes32\"\n}];\nconst MintRequest1155 = [{\n  name: \"to\",\n  type: \"address\"\n}, {\n  name: \"royaltyRecipient\",\n  type: \"address\"\n}, {\n  name: \"royaltyBps\",\n  type: \"uint256\"\n}, {\n  name: \"primarySaleRecipient\",\n  type: \"address\"\n}, {\n  name: \"tokenId\",\n  type: \"uint256\"\n}, {\n  name: \"uri\",\n  type: \"string\"\n}, {\n  name: \"quantity\",\n  type: \"uint256\"\n}, {\n  name: \"pricePerToken\",\n  type: \"uint256\"\n}, {\n  name: \"currency\",\n  type: \"address\"\n}, {\n  name: \"validityStartTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"validityEndTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"uid\",\n  type: \"bytes32\"\n}];\nconst MintRequest721withQuantity = [{\n  name: \"to\",\n  type: \"address\"\n}, {\n  name: \"royaltyRecipient\",\n  type: \"address\"\n}, {\n  name: \"royaltyBps\",\n  type: \"uint256\"\n}, {\n  name: \"primarySaleRecipient\",\n  type: \"address\"\n}, {\n  name: \"uri\",\n  type: \"string\"\n}, {\n  name: \"quantity\",\n  type: \"uint256\"\n}, {\n  name: \"pricePerToken\",\n  type: \"uint256\"\n}, {\n  name: \"currency\",\n  type: \"address\"\n}, {\n  name: \"validityStartTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"validityEndTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"uid\",\n  type: \"bytes32\"\n}];\nconst GenericRequest = [{\n  name: \"validityStartTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"validityEndTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"uid\",\n  type: \"bytes32\"\n}, {\n  name: \"data\",\n  type: \"bytes\"\n}];\n\n/**\n * @internal\n */\nconst CommonContractSchema = /* @__PURE__ */(() => z.object({\n  name: z.string(),\n  description: z.string().optional(),\n  image: FileOrBufferOrStringSchema.optional(),\n  external_link: z.string().optional(),\n  app_uri: z.string().optional(),\n  social_urls: z.record(z.string()).optional()\n}).catchall(z.unknown()))();\n/**\n * @internal\n */\nconst CommonContractOutputSchema = /* @__PURE__ */(() => CommonContractSchema.extend({\n  image: z.string().optional()\n}).catchall(z.unknown()))();\n\n/**\n * @internal\n */\nconst CommonRoyaltySchema = /* @__PURE__ */(() => z.object({\n  /**\n   * The amount of royalty collected on all royalties represented as basis points.\n   * The default is 0 (no royalties).\n   *\n   * 1 basis point = 0.01%\n   *\n   * For example: if this value is 100, then the royalty is 1% of the total sales.\n   *\n   *  @internalremarks used by OpenSea \"seller_fee_basis_points\"\n   */\n  seller_fee_basis_points: BasisPointsSchema.default(0),\n  /**\n   * The address of the royalty recipient. All royalties will be sent\n   * to this address.\n   * @internalremarks used by OpenSea \"fee_recipient\"\n   */\n  fee_recipient: AddressOrEnsSchema.default(constants.AddressZero)\n}))();\n\n/**\n * @internal\n */\nconst CommonPrimarySaleSchema = /* @__PURE__ */z.object({\n  /**\n   * primary sale recipient address\n   */\n  primary_sale_recipient: AddressOrEnsSchema\n});\n\n/**\n * @internal\n */\nconst CommonPlatformFeeSchema = /* @__PURE__ */(() => z.object({\n  /**\n   * platform fee basis points\n   */\n  platform_fee_basis_points: BasisPointsSchema.default(0),\n  /**\n   * platform fee recipient address\n   */\n  platform_fee_recipient: AddressOrEnsSchema.default(constants.AddressZero)\n}))();\n\n/**\n * @internal\n */\nconst CommonTrustedForwarderSchema = /* @__PURE__ */(() => z.object({\n  trusted_forwarders: z.array(AddressOrEnsSchema).default([])\n}))();\n\n/**\n * @internal\n */\nconst CommonSymbolSchema = /* @__PURE__ */(() => z.object({\n  symbol: z.string().default(\"\")\n}))();\n\n/**\n * @internal\n */\nconst BYOCContractMetadataSchema = /* @__PURE__ */(() => CommonContractSchema.catchall(z.union([BigNumberTransformSchema, z.unknown()])))();\n\n/**\n * @internal\n */\n\n/**\n * @internal\n */\nconst CustomContractInput = /* @__PURE__ */(() => BYOCContractMetadataSchema.merge(CommonRoyaltySchema.merge(MerkleSchema).merge(CommonSymbolSchema).partial()).catchall(z.any()))();\n\n/**\n * @internal\n */\nconst CustomContractOutput = /* @__PURE__ */(() => CommonContractOutputSchema.merge(CommonRoyaltySchema.merge(MerkleSchema).merge(CommonSymbolSchema).partial()).catchall(z.any()))();\n\n/**\n * @internal\n */\nconst CustomContractDeploy = /* @__PURE__ */(() => CustomContractInput.merge(CommonPlatformFeeSchema.merge(CommonPrimarySaleSchema).merge(CommonTrustedForwarderSchema).partial()))();\n\n/**\n * @internal\n */\nconst CustomContractSchema = {\n  deploy: CustomContractDeploy,\n  output: CustomContractOutput,\n  input: CustomContractInput\n};\n\n/**\n * @internal\n */\nconst AbiTypeBaseSchema = /* @__PURE__ */(() => z.object({\n  type: z.string(),\n  name: z.string().default(\"\")\n}).catchall(z.any()))();\n\n/**\n * @internal\n */\nconst AbiTypeSchema = /* @__PURE__ */(() => AbiTypeBaseSchema.extend({\n  stateMutability: z.string().optional(),\n  components: z.array(AbiTypeBaseSchema).optional()\n}).catchall(z.any()))();\n\n/**\n * @internal\n */\nconst AbiObjectSchema = /* @__PURE__ */(() => z.object({\n  type: z.string(),\n  name: z.string().default(\"\"),\n  inputs: z.array(AbiTypeSchema).default([]),\n  outputs: z.array(AbiTypeSchema).default([])\n}).catchall(z.any()))();\n\n/**\n * @internal\n */\nconst AbiSchema = /* @__PURE__ */z.array(AbiObjectSchema);\n// if we want to statically type this for external usage it has to *awlways* be the output type\n\n// input type is only used internally\n/**\n * @internal\n */\n/**\n * @internal\n */\nconst PreDeployMetadata = /* @__PURE__ */(() => z.object({\n  name: z.string(),\n  metadataUri: z.string(),\n  bytecodeUri: z.string(),\n  analytics: z.any().optional()\n}).catchall(z.any()))();\n\n/**\n * @internal\n */\nconst ChainIdToAddressSchema = /* @__PURE__ */(() => z.record(z.string(), z.string()))();\n\n/**\n * @internal\n */\nconst CustomFactoryInput = /* @__PURE__ */(() => z.object({\n  factoryFunction: z.string(),\n  params: z.array(z.object({\n    name: z.string(),\n    type: z.string()\n  })).default([]),\n  customFactoryAddresses: ChainIdToAddressSchema\n}))();\n\n/**\n * @internal\n */\nconst FactoryDeploymentSchema = /* @__PURE__ */(() => z.object({\n  implementationAddresses: ChainIdToAddressSchema,\n  implementationInitializerFunction: z.string().default(\"initialize\"),\n  customFactoryInput: CustomFactoryInput.optional(),\n  factoryAddresses: ChainIdToAddressSchema.optional()\n}))();\n\n/**\n * @internal\n */\nconst DeployTypeInput = /* @__PURE__ */(() => z.union([z.literal(\"standard\"), z.literal(\"autoFactory\"), z.literal(\"customFactory\")]))();\n\n/**\n * @internal\n */\nconst RouterTypeInput = /* @__PURE__ */(() => z.union([z.literal(\"none\"), z.literal(\"plugin\"), z.literal(\"dynamic\")]))();\n\n/**\n * @internal\n */\nconst DeploymentNetworkInput = /* @__PURE__ */(() => z.object({\n  allNetworks: z.boolean().optional(),\n  networksEnabled: z.array(z.number()).default([])\n}))();\n\n/**\n * @internal\n */\nconst ExtraPublishMetadataSchemaInput = /* @__PURE__ */(() => z.object({\n  version: z.string().refine(v => {\n    try {\n      toSemver(v);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }, out => {\n    return {\n      message: `'${out}' is not a valid semantic version. Should be in the format of major.minor.patch. Ex: 0.4.1`\n    };\n  }),\n  displayName: z.string().optional(),\n  description: z.string().optional(),\n  readme: z.string().optional(),\n  license: z.string().optional(),\n  changelog: z.string().optional(),\n  tags: z.array(z.string()).optional(),\n  audit: FileOrBufferOrStringSchema.nullable().optional(),\n  logo: FileOrBufferOrStringSchema.nullable().optional(),\n  isDeployableViaFactory: z.boolean().optional(),\n  isDeployableViaProxy: z.boolean().optional(),\n  factoryDeploymentData: FactoryDeploymentSchema.optional(),\n  deployType: DeployTypeInput.optional(),\n  routerType: RouterTypeInput.optional(),\n  defaultExtensions: z.array(z.object({\n    extensionName: z.string(),\n    extensionVersion: z.string().default(\"latest\"),\n    publisherAddress: AddressOrEnsSchema\n  })).optional(),\n  networksForDeployment: DeploymentNetworkInput.optional(),\n  constructorParams: z.record(z.string(), z.object({\n    displayName: z.string().optional(),\n    description: z.string().optional(),\n    defaultValue: z.string().optional(),\n    hidden: z.boolean().optional()\n  }).catchall(z.any())).optional(),\n  compositeAbi: AbiSchema.optional()\n}).catchall(z.any()))();\n\n/**\n * @internal\n */\nconst ExtraPublishMetadataSchemaOutput = /* @__PURE__ */(() => ExtraPublishMetadataSchemaInput.extend({\n  audit: z.string().nullable().optional(),\n  logo: z.string().nullable().optional()\n}))();\n/**\n * @internal\n */\nconst FullPublishMetadataSchemaInput = /* @__PURE__ */(() => PreDeployMetadata.merge(ExtraPublishMetadataSchemaInput).extend({\n  publisher: AddressOrEnsSchema.optional()\n}))();\n\n/**\n * @internal\n */\nconst FullPublishMetadataSchemaOutput = /* @__PURE__ */(() => PreDeployMetadata.merge(ExtraPublishMetadataSchemaOutput).extend({\n  publisher: AddressOrEnsSchema.optional()\n}))();\n/**\n * @internal\n */\nconst ProfileSchemaInput = /* @__PURE__ */(() => z.object({\n  name: z.string().optional(),\n  bio: z.string().optional(),\n  avatar: FileOrBufferOrStringSchema.nullable().optional(),\n  website: z.string().optional(),\n  twitter: z.string().optional(),\n  telegram: z.string().optional(),\n  facebook: z.string().optional(),\n  github: z.string().optional(),\n  medium: z.string().optional(),\n  linkedin: z.string().optional(),\n  reddit: z.string().optional(),\n  discord: z.string().optional()\n}))();\nconst ProfileSchemaOutput = /* @__PURE__ */(() => ProfileSchemaInput.extend({\n  avatar: z.string().nullable().optional()\n}))();\n/**\n * @internal\n */\nconst PublishedContractSchema = /* @__PURE__ */(() => z.object({\n  id: z.string(),\n  timestamp: BigNumberishSchema,\n  metadataUri: z.string()\n}))();\n\n/**\n * @internal\n * Follows https://docs.soliditylang.org/en/v0.8.15/natspec-format.html\n */\nconst ContractInfoSchema = /* @__PURE__ */(() => z.object({\n  title: z.string().optional(),\n  author: z.string().optional(),\n  details: z.string().optional(),\n  notice: z.string().optional()\n}))();\n\n/**\n * @internal\n */\nconst CompilerMetadataFetchedSchema = /* @__PURE__ */(() => z.object({\n  name: z.string(),\n  abi: AbiSchema,\n  metadata: z.record(z.string(), z.any()),\n  info: ContractInfoSchema,\n  licenses: z.array(z.string().optional()).default([]).transform(v => {\n    return v.filter(license => license !== undefined);\n  }),\n  isPartialAbi: z.boolean().optional()\n}))();\n\n/**\n * @internal\n */\nconst PreDeployMetadataFetchedSchema = /* @__PURE__ */(() => PreDeployMetadata.merge(CompilerMetadataFetchedSchema).extend({\n  bytecode: z.string()\n}))();\n\nconst CallOverrideSchema = /* @__PURE__ */(() => z.object({\n  gasLimit: BigNumberishSchema.optional(),\n  gasPrice: BigNumberishSchema.optional(),\n  maxFeePerGas: BigNumberishSchema.optional(),\n  maxPriorityFeePerGas: BigNumberishSchema.optional(),\n  nonce: BigNumberishSchema.optional(),\n  value: BigNumberishSchema.optional(),\n  blockTag: z.union([z.string(), z.number()]).optional(),\n  from: AddressOrEnsSchema.optional(),\n  type: z.number().optional()\n}).strict())();\n\n/**\n * Encodes and decodes Contract functions\n * @public\n */\nclass ContractEncoder {\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Encodes the given contract function with argument\n   * @returns the encoded data\n   */\n  encode(fn, args) {\n    return this.contractWrapper.readContract.interface.encodeFunctionData(fn, args);\n  }\n\n  /**\n   * Decode encoded call data for a given function\n   * @param fn - the function to decode\n   * @param encodedArgs - the encoded arguments\n   */\n  decode(fn, encodedArgs) {\n    return this.contractWrapper.readContract.interface.decodeFunctionData(fn, encodedArgs);\n  }\n}\n\n/**\n * Error that may get thrown if IPFS returns nothing for a given uri.\n * @internal\n */\nclass NotFoundError extends Error {\n  /** @internal */\n  constructor(identifier) {\n    super(identifier ? `Object with id ${identifier} NOT FOUND` : \"NOT_FOUND\");\n  }\n}\n\n/**\n * Error that may get thrown if an invalid address was passed\n * @internal\n */\nclass InvalidAddressError extends Error {\n  /** @internal */\n  constructor(address) {\n    super(address ? `'${address}' is an invalid address` : \"Invalid address passed\");\n  }\n}\n\n/**\n * @internal\n */\nclass MissingRoleError extends Error {\n  /** @internal */\n  /** @internal */\n  constructor(address, role) {\n    super(`MISSING ROLE: ${address} does not have the '${role}' role`);\n  }\n}\n\n/**\n * @internal\n */\nclass AssetNotFoundError extends Error {\n  /** @internal */\n  /** @internal */\n  constructor() {\n    let message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"The asset you're trying to use could not be found.\";\n    super(`message: ${message}`);\n  }\n}\n\n/**\n * @internal\n */\nclass UploadError extends Error {\n  /** @internal */\n  constructor(message) {\n    super(`UPLOAD_FAILED: ${message}`);\n  }\n}\n\n/**\n * @internal\n */\nclass FileNameMissingError extends Error {\n  /** @internal */\n  constructor() {\n    super(\"File name is required when object is not a `File` type object.\");\n  }\n}\n\n/**\n * @internal\n */\nclass DuplicateFileNameError extends Error {\n  /** @internal */\n  constructor(fileName) {\n    super(`DUPLICATE_FILE_NAME_ERROR: File name ${fileName} was passed for more than one file.`);\n  }\n}\n\n/**\n * @internal\n */\nclass NotEnoughTokensError extends Error {\n  /** @internal */\n  constructor(contractAddress, quantity, available) {\n    super(`BALANCE ERROR: you do not have enough balance on contract ${contractAddress} to use ${quantity} tokens. You have ${available} tokens available.`);\n  }\n}\n\n/**\n * @internal\n */\nclass MissingOwnerRoleError extends Error {\n  /** @internal */\n  constructor() {\n    super(`LIST ERROR: you should be the owner of the token to list it.`);\n  }\n}\n\n/**\n * @internal\n */\nclass QuantityAboveLimitError extends Error {\n  /** @internal */\n  constructor(quantity) {\n    super(`BUY ERROR: You cannot buy more than ${quantity} tokens`);\n  }\n}\n\n/**\n * Thrown when data fails to fetch from storage.\n * @internal\n */\nclass FetchError extends Error {\n  /** @internal */\n  constructor(message, innerError) {\n    super(`FETCH_FAILED: ${message}`);\n    this.innerError = innerError;\n  }\n}\n\n/**\n * Thrown when attempting to create a snapshot with duplicate leafs\n * @internal\n */\nclass DuplicateLeafsError extends Error {\n  constructor(message) {\n    super(`DUPLICATE_LEAFS${message ? ` : ${message}` : \"\"}`);\n  }\n}\n\n/**\n * Thrown when attempting to update/cancel an auction that already started\n * @internal\n */\nclass AuctionAlreadyStartedError extends Error {\n  constructor(id) {\n    super(`Auction already started with existing bid${id ? `, id: ${id}` : \"\"}`);\n  }\n}\n\n/**\n * @internal\n */\nclass FunctionDeprecatedError extends Error {\n  /** @internal */\n  constructor(message) {\n    super(`FUNCTION DEPRECATED. ${message ? `Use ${message} instead` : \"\"}`);\n  }\n}\n\n/**\n * Thrown when trying to retrieve a listing from a marketplace that doesn't exist\n * @internal\n */\nclass ListingNotFoundError extends Error {\n  constructor(marketplaceContractAddress, listingId) {\n    super(`Could not find listing.${marketplaceContractAddress ? ` marketplace address: ${marketplaceContractAddress}` : \"\"}${listingId ? ` listing id: ${listingId}` : \"\"}`);\n  }\n}\n\n/**\n * Thrown when trying to retrieve a listing of the wrong type\n * @internal\n */\nclass WrongListingTypeError extends Error {\n  constructor(marketplaceContractAddress, listingId, actualType, expectedType) {\n    super(`Incorrect listing type. Are you sure you're using the right method?.${marketplaceContractAddress ? ` marketplace address: ${marketplaceContractAddress}` : \"\"}${listingId ? ` listing id: ${listingId}` : \"\"}${expectedType ? ` expected type: ${expectedType}` : \"\"}${actualType ? ` actual type: ${actualType}` : \"\"}`);\n  }\n}\n\n/**\n * Thrown when attempting to transfer an asset that has restricted transferability\n * @internal\n */\nclass RestrictedTransferError extends Error {\n  constructor(assetAddress) {\n    super(`Failed to transfer asset, transfer is restricted.${assetAddress ? ` Address : ${assetAddress}` : \"\"}`);\n  }\n}\n\n/**\n * Thrown when attempting to execute an admin-role function.\n * @internal\n */\nclass AdminRoleMissingError extends Error {\n  constructor(address, contractAddress) {\n    let message = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"Failed to execute transaction\";\n    super(`${message}, admin role is missing${address ? ` on address: ${address}` : \"\"}${contractAddress ? ` on contract: ${contractAddress}` : \"\"}`);\n  }\n}\n\n/**\n * Thrown when attempting to close an auction that has not ended\n * @internal\n */\nclass AuctionHasNotEndedError extends Error {\n  constructor(id, endTime) {\n    super(`Auction has not ended yet${id ? `, id: ${id}` : \"\"}${endTime ? `, end time: ${endTime.toString()}` : \"\"}`);\n  }\n}\n\n/**\n * Thrown when attempting to call a contract function that is not implemented\n * @internal\n */\nclass ExtensionNotImplementedError extends Error {\n  constructor(feature) {\n    super(`This functionality is not available because the contract does not implement the '${feature.name}' Extension. Learn how to unlock this functionality at https://portal.thirdweb.com/extensions `);\n  }\n}\n\n/**\n * @internal\n */\n\n/**\n * @public\n */\nclass TransactionError extends Error {\n  #reason;\n  #info;\n  #raw;\n  constructor(info, raw) {\n    let errorMessage = `\\n\\n\\n╔═══════════════════╗\\n║ TRANSACTION ERROR ║\\n╚═══════════════════╝\\n\\n`;\n    errorMessage += `Reason: ${info.reason}`;\n    errorMessage += `\\n\\n\\n╔═════════════════════════╗\\n║ TRANSACTION INFORMATION ║\\n╚═════════════════════════╝\\n`;\n    errorMessage += withSpaces(\"from\", info.from);\n    if (info.to) {\n      errorMessage += withSpaces(\"to\", info.contractName ? `${info.to} (${info.contractName})` : info.to);\n    }\n    errorMessage += withSpaces(`chain`, `${info.network.name} (${info.network.chainId})`);\n    if (info.rpcUrl) {\n      try {\n        const url = new URL(info.rpcUrl);\n        errorMessage += withSpaces(`rpc`, url.hostname);\n      } catch (e2) {\n        // ignore if can't parse URL\n      }\n    }\n    if (info.hash) {\n      errorMessage += withSpaces(`tx hash`, info.hash);\n    }\n    if (info.value && info.value.gt(0)) {\n      errorMessage += withSpaces(\"value\", `${utils.formatEther(info.value)} ${NATIVE_TOKENS[info.network.chainId]?.symbol || \"\"}`);\n    }\n    errorMessage += withSpaces(`data`, `${info.data}`);\n    if (info.method) {\n      errorMessage += withSpaces(\"method\", info.method);\n    }\n    if (info.sources) {\n      const revertFile = info.sources.find(file => file.source.includes(info.reason));\n      if (revertFile) {\n        const lines = revertFile.source.split(\"\\n\").map((line, index) => `${index + 1}  ${line}`);\n        const revertLine = lines.findIndex(line => line.includes(info.reason));\n        lines[revertLine] += \"   <-- REVERT\";\n        const errorLines = lines.slice(revertLine - 8, revertLine + 4);\n        errorMessage += `\\n\\n\\n╔══════════════════════╗\\n║ SOLIDITY STACK TRACE ║\\n╚══════════════════════╝\\n\\n`;\n        errorMessage += `File: ${revertFile.filename.replace(\"node_modules/\", \"\")}\\n\\n`;\n        errorMessage += errorLines.join(\"\\n\");\n      }\n    }\n    errorMessage += `\\n\\n\\n╔═════════════════════╗\\n║ DEBUGGING RESOURCES ║\\n╚═════════════════════╝\\n\\n`;\n    errorMessage += `Need helping debugging? Join our Discord: https://discord.gg/thirdweb`;\n    errorMessage += `\\n\\n`;\n    super(errorMessage);\n    this.#reason = info.reason;\n    this.#info = info;\n    this.#raw = raw;\n  }\n\n  // Keep reason here for backwards compatibility\n  get reason() {\n    return this.#reason;\n  }\n  get raw() {\n    return this.#raw;\n  }\n  get info() {\n    return this.#info;\n  }\n}\n\n/**\n * @internal\n */\nfunction parseRevertReason(error) {\n  if (error.reason && !error.reason.includes(\"cannot estimate gas\")) {\n    return error.reason;\n  }\n  if (error.error) {\n    return error.error;\n  }\n\n  // I think this code path should never be hit, but just in case\n\n  let errorString = error;\n  if (typeof error === \"object\") {\n    // MetaMask errors come as objects so parse them first\n    errorString = JSON.stringify(error);\n  } else if (typeof error !== \"string\") {\n    errorString = error.toString();\n  }\n  return parseMessageParts(/.*?\"message\":\"([^\"\\\\]*).*?/, errorString) || parseMessageParts(/.*?\"reason\":\"([^\"\\\\]*).*?/, errorString) || error.message || \"\";\n}\nfunction withSpaces(label, content) {\n  if (content === \"\") {\n    return content;\n  }\n  const spaces = Array(10 - label.length).fill(\" \").join(\"\");\n  if (content.includes(\"\\n\")) {\n    content = \"\\n\\n  \" + content.split(\"\\n\").join(`\\n  `);\n  } else {\n    content = `${spaces}${content}`;\n  }\n  return `\\n${label}:${content}`;\n}\nfunction parseMessageParts(regex, raw) {\n  const msgMatches = raw.match(regex) || [];\n  let extracted = \"\";\n  if (msgMatches?.length > 0) {\n    extracted += msgMatches[1];\n  }\n  return extracted;\n}\n\n/**\n * @internal\n * @param err\n * @param message\n */\nfunction includesErrorMessage(err, message) {\n  if (!err) {\n    return false;\n  }\n  return err && err.toString().includes(message) || err && err.message && err.message.toString().includes(message) || err && err.error && err.error.toString().includes(message);\n}\n\nconst FEATURE_TOKEN_CLAIM_CONDITIONS_V1 = {\n  name: \"ERC20ClaimConditionsV1\",\n  namespace: \"token.drop.claim\",\n  docLinks: {\n    sdk: \"sdk.erc20dclaimable\",\n    contracts: \"erc20claimconditions\"\n  },\n  abis: [ERC20Abi, IDropSinglePhaseV1],\n  features: {}\n};\nconst FEATURE_TOKEN_CLAIM_CONDITIONS_V2 = {\n  name: \"ERC20ClaimConditionsV2\",\n  namespace: \"token.drop.claim\",\n  docLinks: {\n    sdk: \"sdk.erc20dclaimable\",\n    contracts: \"erc20claimconditions\"\n  },\n  abis: [ERC20Abi, IDropSinglePhase],\n  features: {}\n};\nconst FEATURE_TOKEN_CLAIM_PHASES_V2 = {\n  name: \"ERC20ClaimPhasesV2\",\n  namespace: \"token.drop.claim\",\n  docLinks: {\n    sdk: \"sdk.erc20dclaimable\",\n    contracts: \"erc20claimphases\"\n  },\n  abis: [ERC20Abi, IDrop],\n  features: {}\n};\nconst FEATURE_TOKEN_CLAIM_PHASES_V1 = {\n  name: \"ERC20ClaimPhasesV1\",\n  namespace: \"token.drop.claim\",\n  docLinks: {\n    sdk: \"sdk.erc20dclaimable\",\n    contracts: \"erc20claimphases\"\n  },\n  abis: [DropERC20_V2Abi],\n  features: {}\n};\nconst FEATURE_TOKEN_BURNABLE = {\n  name: \"ERC20Burnable\",\n  namespace: \"token.burn\",\n  docLinks: {\n    sdk: \"sdk.erc20burnable\",\n    contracts: \"erc20burnable\"\n  },\n  abis: [ERC20Abi, IBurnableERC20Abi],\n  features: {}\n};\nconst FEATURE_TOKEN_SIGNATURE_MINTABLE = {\n  name: \"ERC20SignatureMintable\",\n  namespace: \"token.signature\",\n  docLinks: {\n    sdk: \"sdk.erc20signaturemintable\",\n    contracts: \"erc20signaturemint\"\n  },\n  abis: [ERC20Abi, ISignatureMintERC20Abi],\n  features: {}\n};\nconst FEATURE_TOKEN_BATCH_MINTABLE = {\n  name: \"ERC20BatchMintable\",\n  namespace: \"token.mint.batch\",\n  docLinks: {\n    sdk: \"sdk.erc20batchmintable\",\n    contracts: \"erc20batchmintable\"\n  },\n  abis: [ERC20Abi, IMintableERC20Abi, MulticallAbi],\n  features: {}\n};\nconst FEATURE_TOKEN_MINTABLE = {\n  name: \"ERC20Mintable\",\n  namespace: \"token.mint\",\n  docLinks: {\n    sdk: \"sdk.erc20mintable\",\n    contracts: \"erc20mintable\"\n  },\n  abis: [ERC20Abi, IMintableERC20Abi],\n  features: {\n    [FEATURE_TOKEN_BATCH_MINTABLE.name]: FEATURE_TOKEN_BATCH_MINTABLE\n  }\n};\nconst FEATURE_TOKEN_PERMIT = {\n  name: \"ERC20Permit\",\n  namespace: \"token.permit\",\n  docLinks: {\n    sdk: \"sdk.erc20permit\",\n    contracts: \"erc20permit\"\n  },\n  abis: [ERC20Abi, IERC20PermitAbi],\n  features: {}\n};\nconst FEATURE_TOKEN = {\n  name: \"ERC20\",\n  namespace: \"token\",\n  docLinks: {\n    sdk: \"sdk.erc20\",\n    contracts: \"erc20\"\n  },\n  abis: [ERC20Abi, IERC20MetadataAbi],\n  features: {\n    [FEATURE_TOKEN_BURNABLE.name]: FEATURE_TOKEN_BURNABLE,\n    [FEATURE_TOKEN_MINTABLE.name]: FEATURE_TOKEN_MINTABLE,\n    [FEATURE_TOKEN_CLAIM_CONDITIONS_V1.name]: FEATURE_TOKEN_CLAIM_CONDITIONS_V1,\n    [FEATURE_TOKEN_CLAIM_CONDITIONS_V2.name]: FEATURE_TOKEN_CLAIM_CONDITIONS_V2,\n    [FEATURE_TOKEN_CLAIM_PHASES_V1.name]: FEATURE_TOKEN_CLAIM_PHASES_V1,\n    [FEATURE_TOKEN_CLAIM_PHASES_V2.name]: FEATURE_TOKEN_CLAIM_PHASES_V2,\n    [FEATURE_TOKEN_SIGNATURE_MINTABLE.name]: FEATURE_TOKEN_SIGNATURE_MINTABLE,\n    [FEATURE_TOKEN_PERMIT.name]: FEATURE_TOKEN_PERMIT\n  }\n};\n\nconst FEATURE_NFT_BURNABLE = {\n  name: \"ERC721Burnable\",\n  namespace: \"nft.burn\",\n  docLinks: {\n    sdk: \"sdk.erc721burnable\",\n    contracts: \"erc721burnable\"\n  },\n  abis: [Erc721Abi, IBurnableERC721Abi],\n  features: {}\n};\nconst FEATURE_NFT_REVEALABLE = {\n  name: \"ERC721Revealable\",\n  namespace: \"nft.drop.revealer\",\n  docLinks: {\n    sdk: \"sdk.delayedreveal\",\n    contracts: \"erc721revealable\"\n  },\n  abis: [Erc721Abi, ILazyMintAbi, DelayedRevealAbi],\n  features: {}\n};\nconst FEATURE_NFT_TIERED_DROP = {\n  name: \"ERC721TieredDrop\",\n  namespace: \"nft.tieredDrop\",\n  docLinks: {\n    sdk: \"sdk.erc721tiereddrop\",\n    //TODO\n    contracts: \"\"\n  },\n  abis: [Erc721Abi, TieredDropAbi],\n  features: {}\n};\nconst FEATURE_NFT_CLAIM_CONDITIONS_V1 = {\n  name: \"ERC721ClaimConditionsV1\",\n  namespace: \"nft.drop.claim\",\n  docLinks: {\n    sdk: \"sdk.erc721claimable\",\n    contracts: \"erc721claimconditions\"\n  },\n  abis: [Erc721Abi, IDropSinglePhaseV1],\n  features: {}\n};\nconst FEATURE_NFT_CLAIM_CONDITIONS_V2 = {\n  name: \"ERC721ClaimConditionsV2\",\n  namespace: \"nft.drop.claim\",\n  docLinks: {\n    sdk: \"sdk.erc721claimable\",\n    contracts: \"erc721claimconditions\"\n  },\n  abis: [Erc721Abi, IDropSinglePhase],\n  features: {}\n};\nconst FEATURE_NFT_CLAIM_PHASES_V1 = {\n  name: \"ERC721ClaimPhasesV1\",\n  namespace: \"nft.drop.claim\",\n  docLinks: {\n    sdk: \"sdk.erc721claimable\",\n    contracts: \"erc721claimphases\"\n  },\n  abis: [DropERC721_V3Abi],\n  features: {}\n};\nconst FEATURE_NFT_CLAIM_PHASES_V2 = {\n  name: \"ERC721ClaimPhasesV2\",\n  namespace: \"nft.drop.claim\",\n  docLinks: {\n    sdk: \"sdk.erc721claimable\",\n    contracts: \"erc721claimphases\"\n  },\n  abis: [Erc721Abi, IDrop],\n  features: {}\n};\nconst FEATURE_NFT_CLAIM_CUSTOM = {\n  name: \"ERC721ClaimCustom\",\n  namespace: \"nft.drop.claim\",\n  docLinks: {\n    sdk: \"sdk.erc721claimable\",\n    contracts: \"erc721claimcustom\"\n  },\n  abis: [Erc721Abi, IClaimableERC721],\n  features: {}\n};\nconst FEATURE_NFT_CLAIM_ZORA = {\n  name: \"ERC721ClaimZora\",\n  namespace: \"nft.drop.claim\",\n  docLinks: {\n    sdk: \"sdk.erc721claimable\",\n    contracts: \"erc721claimzora\"\n  },\n  abis: [Erc721Abi, zora_IDropERC721],\n  features: {}\n};\nconst FEATURE_NFT_LAZY_MINTABLE = {\n  name: \"ERC721LazyMintable\",\n  namespace: \"nft.drop\",\n  docLinks: {\n    sdk: \"sdk.erc721lazymintable\",\n    contracts: \"lazymint\"\n  },\n  abis: [Erc721Abi, ILazyMintAbi],\n  features: {\n    [FEATURE_NFT_REVEALABLE.name]: FEATURE_NFT_REVEALABLE\n  }\n};\nconst FEATURE_NFT_BATCH_MINTABLE = {\n  name: \"ERC721BatchMintable\",\n  namespace: \"nft.mint.batch\",\n  docLinks: {\n    sdk: \"sdk.erc721batchmintable\",\n    contracts: \"erc721batchmintable\"\n  },\n  abis: [Erc721Abi, IMintableERC721Abi, MulticallAbi],\n  features: {}\n};\nconst FEATURE_NFT_MINTABLE = {\n  name: \"ERC721Mintable\",\n  namespace: \"nft.mint\",\n  docLinks: {\n    sdk: \"sdk.erc721mintable\",\n    contracts: \"erc721mintable\"\n  },\n  abis: [Erc721Abi, IMintableERC721Abi],\n  features: {\n    [FEATURE_NFT_BATCH_MINTABLE.name]: FEATURE_NFT_BATCH_MINTABLE\n  }\n};\nconst FEATURE_NFT_SIGNATURE_MINTABLE_V2 = {\n  name: \"ERC721SignatureMintV2\",\n  namespace: \"nft.signature\",\n  docLinks: {\n    sdk: \"sdk.erc721signaturemint\",\n    contracts: \"erc721signaturemint\"\n  },\n  abis: [Erc721Abi, SignatureMintERC721Abi],\n  features: {}\n};\nconst FEATURE_NFT_SIGNATURE_MINTABLE_V1 = {\n  name: \"ERC721SignatureMintV1\",\n  namespace: \"nft.signature\",\n  docLinks: {\n    sdk: \"sdk.erc721signaturemint\",\n    contracts: \"erc721signaturemint\"\n  },\n  abis: [SignatureMintERC721_V1Abi],\n  features: {}\n};\nconst FEATURE_NFT_ENUMERABLE = {\n  name: \"ERC721Enumerable\",\n  namespace: \"nft.query.owned\",\n  docLinks: {\n    sdk: \"sdk.erc721enumerable\",\n    contracts: \"erc721enumerable\"\n  },\n  abis: [Erc721Abi, Erc721EnumerableAbi],\n  features: {}\n};\nconst FEATURE_NFT_QUERYABLE = {\n  name: \"ERC721AQueryable\",\n  namespace: \"nft.query.owned\",\n  docLinks: {\n    sdk: \"\",\n    contracts: \"\"\n  },\n  abis: [Erc721AQueryableAbi],\n  features: {}\n};\nconst FEATURE_NFT_SUPPLY = {\n  name: \"ERC721Supply\",\n  namespace: \"nft.query\",\n  docLinks: {\n    sdk: \"sdk.erc721supply\",\n    contracts: \"erc721supply\"\n  },\n  abis: [Erc721Abi, Erc721SupplyAbi],\n  features: {\n    [FEATURE_NFT_ENUMERABLE.name]: FEATURE_NFT_ENUMERABLE,\n    [FEATURE_NFT_QUERYABLE.name]: FEATURE_NFT_QUERYABLE\n  }\n};\nconst FEATURE_NFT_SHARED_METADATA = {\n  name: \"ERC721SharedMetadata\",\n  namespace: \"nft.sharedmetadata\",\n  docLinks: {\n    sdk: \"sdk.sharedmetadata\",\n    contracts: \"SharedMetadata\"\n  },\n  abis: [Erc721Abi, SharedMetadataAbi],\n  features: {}\n};\nconst FEATURE_NFT_LOYALTY_CARD = {\n  name: \"ERC721LoyaltyCard\",\n  namespace: \"nft.loyaltyCard\",\n  docLinks: {\n    // TODO\n    sdk: \"\",\n    contracts: \"\"\n  },\n  abis: [ILoyaltyCardAbi],\n  features: {}\n};\nconst FEATURE_NFT_UPDATABLE_METADATA = {\n  name: \"ERC721UpdatableMetadata\",\n  namespace: \"nft.metadata\",\n  docLinks: {\n    // TODO\n    sdk: \"\",\n    contracts: \"\"\n  },\n  abis: [Erc721Abi, INFTMetadataAbi],\n  features: {}\n};\nconst FEATURE_NFT = {\n  name: \"ERC721\",\n  namespace: \"nft\",\n  docLinks: {\n    sdk: \"sdk.erc721\",\n    contracts: \"erc721\"\n  },\n  abis: [Erc721Abi, IERC721MetadataAbi],\n  features: {\n    [FEATURE_NFT_BURNABLE.name]: FEATURE_NFT_BURNABLE,\n    [FEATURE_NFT_SUPPLY.name]: FEATURE_NFT_SUPPLY,\n    [FEATURE_NFT_MINTABLE.name]: FEATURE_NFT_MINTABLE,\n    [FEATURE_NFT_LAZY_MINTABLE.name]: FEATURE_NFT_LAZY_MINTABLE,\n    [FEATURE_NFT_SIGNATURE_MINTABLE_V1.name]: FEATURE_NFT_SIGNATURE_MINTABLE_V1,\n    [FEATURE_NFT_SIGNATURE_MINTABLE_V2.name]: FEATURE_NFT_SIGNATURE_MINTABLE_V2,\n    [FEATURE_NFT_TIERED_DROP.name]: FEATURE_NFT_TIERED_DROP,\n    [FEATURE_NFT_CLAIM_CUSTOM.name]: FEATURE_NFT_CLAIM_CUSTOM,\n    [FEATURE_NFT_CLAIM_ZORA.name]: FEATURE_NFT_CLAIM_ZORA,\n    [FEATURE_NFT_CLAIM_CONDITIONS_V1.name]: FEATURE_NFT_CLAIM_CONDITIONS_V1,\n    [FEATURE_NFT_CLAIM_CONDITIONS_V2.name]: FEATURE_NFT_CLAIM_CONDITIONS_V2,\n    [FEATURE_NFT_CLAIM_PHASES_V1.name]: FEATURE_NFT_CLAIM_PHASES_V1,\n    [FEATURE_NFT_CLAIM_PHASES_V2.name]: FEATURE_NFT_CLAIM_PHASES_V2,\n    [FEATURE_NFT_SHARED_METADATA.name]: FEATURE_NFT_SHARED_METADATA,\n    [FEATURE_NFT_LOYALTY_CARD.name]: FEATURE_NFT_LOYALTY_CARD,\n    [FEATURE_NFT_UPDATABLE_METADATA.name]: FEATURE_NFT_UPDATABLE_METADATA\n  }\n};\n\n// TODO could be part of IERC1155Metadata even though its not in the spec\nconst NAME_SYMBOL_ABI = [{\n  inputs: [],\n  name: \"name\",\n  outputs: [{\n    internalType: \"string\",\n    name: \"\",\n    type: \"string\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  inputs: [],\n  name: \"symbol\",\n  outputs: [{\n    internalType: \"string\",\n    name: \"\",\n    type: \"string\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}];\nconst FEATURE_EDITION_BURNABLE = {\n  name: \"ERC1155Burnable\",\n  namespace: \"edition.burn\",\n  docLinks: {\n    sdk: \"sdk.erc1155burnable\",\n    contracts: \"erc1155burnable\"\n  },\n  abis: [Erc1155Abi, IBurnableERC1155Abi],\n  features: {}\n};\nconst FEATURE_EDITION_CLAIM_CONDITIONS_V1 = {\n  name: \"ERC1155ClaimConditionsV1\",\n  namespace: \"edition.drop.claim\",\n  docLinks: {\n    sdk: \"sdk.erc1155claimable\",\n    contracts: \"erc1155dropsinglephase\"\n  },\n  abis: [Erc1155Abi, IDropSinglePhase1155_V1],\n  features: {}\n};\nconst FEATURE_EDITION_CLAIM_CONDITIONS_V2 = {\n  name: \"ERC1155ClaimConditionsV2\",\n  namespace: \"edition.drop.claim\",\n  docLinks: {\n    sdk: \"sdk.erc1155claimable\",\n    contracts: \"erc1155claimconditions\"\n  },\n  abis: [Erc1155Abi, IDropSinglePhase1155],\n  features: {}\n};\nconst FEATURE_EDITION_CLAIM_PHASES_V2 = {\n  name: \"ERC1155ClaimPhasesV2\",\n  namespace: \"edition.drop.claim\",\n  docLinks: {\n    sdk: \"sdk.erc1155claimable\",\n    contracts: \"erc1155claimphases\"\n  },\n  abis: [Erc1155Abi, IDropMultiPhase1155],\n  features: {}\n};\nconst FEATURE_EDITION_CLAIM_PHASES_V1 = {\n  name: \"ERC1155ClaimPhasesV1\",\n  namespace: \"edition.drop.claim\",\n  docLinks: {\n    sdk: \"sdk.erc1155claimable\",\n    contracts: \"erc1155claimphases\"\n  },\n  abis: [DropERC1155_V2Abi],\n  features: {}\n};\nconst FEATURE_EDITION_CLAIM_CUSTOM = {\n  name: \"ERC1155ClaimCustom\",\n  namespace: \"edition.drop.claim\",\n  docLinks: {\n    sdk: \"sdk.erc1155claimable\",\n    contracts: \"erc1155claimcustom\"\n  },\n  abis: [Erc1155Abi, IClaimableERC1155],\n  features: {}\n};\nconst FEATURE_EDITION_REVEALABLE = {\n  name: \"ERC1155Revealable\",\n  namespace: \"edition.drop.revealer\",\n  docLinks: {\n    sdk: \"sdk.drop.delayedreveal\",\n    contracts: \"erc1155revealable\"\n  },\n  abis: [Erc1155Abi, ILazyMintAbi, DelayedRevealAbi],\n  features: {}\n};\nconst FEATURE_EDITION_LAZY_MINTABLE_V2 = {\n  name: \"ERC1155LazyMintableV2\",\n  namespace: \"edition.drop\",\n  docLinks: {\n    sdk: \"sdk.erc1155droppable\",\n    contracts: \"lazymint\"\n  },\n  abis: [Erc1155Abi, ILazyMintAbi],\n  features: {\n    [FEATURE_EDITION_REVEALABLE.name]: FEATURE_EDITION_REVEALABLE\n  }\n};\nconst FEATURE_EDITION_LAZY_MINTABLE_V1 = {\n  name: \"ERC1155LazyMintableV1\",\n  namespace: \"edition.drop\",\n  docLinks: {\n    sdk: \"sdk.erc1155droppable\",\n    contracts: \"lazymint\"\n  },\n  abis: [DropERC1155_V2Abi],\n  features: {\n    [FEATURE_EDITION_CLAIM_PHASES_V1.name]: FEATURE_EDITION_CLAIM_PHASES_V1\n  }\n};\nconst FEATURE_EDITION_SIGNATURE_MINTABLE = {\n  name: \"ERC1155SignatureMintable\",\n  namespace: \"edition.signature\",\n  docLinks: {\n    sdk: \"sdk.erc1155signaturemintable\",\n    contracts: \"erc1155signaturemint\"\n  },\n  abis: [Erc1155Abi, ISignatureMintERC1155Abi],\n  features: {}\n};\nconst FEATURE_EDITION_BATCH_MINTABLE = {\n  name: \"ERC1155BatchMintable\",\n  namespace: \"edition.mint.batch\",\n  docLinks: {\n    sdk: \"sdk.erc1155batchmintable\",\n    contracts: \"erc1155batchmintable\"\n  },\n  abis: [Erc1155Abi, IMintableERC1155Abi, MulticallAbi],\n  features: {}\n};\nconst FEATURE_EDITION_MINTABLE = {\n  name: \"ERC1155Mintable\",\n  namespace: \"edition.mint\",\n  docLinks: {\n    sdk: \"sdk.erc1155mintable\",\n    contracts: \"erc1155mintable\"\n  },\n  abis: [Erc1155Abi, IMintableERC1155Abi],\n  features: {\n    [FEATURE_EDITION_BATCH_MINTABLE.name]: FEATURE_EDITION_BATCH_MINTABLE\n  }\n};\nconst FEATURE_EDITION_ENUMERABLE = {\n  name: \"ERC1155Enumerable\",\n  namespace: \"edition.query\",\n  docLinks: {\n    sdk: \"sdk.erc1155\",\n    contracts: \"erc1155enumerable\"\n  },\n  abis: [Erc1155Abi, Erc1155EnumerableAbi],\n  features: {}\n};\nconst FEATURE_EDITION_UPDATABLE_METADATA = {\n  name: \"ERC1155UpdatableMetadata\",\n  namespace: \"edition.metadata\",\n  docLinks: {\n    // TODO\n    sdk: \"\",\n    contracts: \"\"\n  },\n  abis: [Erc1155Abi, INFTMetadataAbi],\n  features: {}\n};\nconst FEATURE_EDITION_SUPPLY = {\n  name: \"ERC1155Supply\",\n  namespace: \"edition.supply\",\n  docLinks: {\n    sdk: \"\",\n    contracts: \"\"\n  },\n  abis: [Erc1155Abi, Erc1155SupplyAbi],\n  features: {}\n};\nconst FEATURE_EDITION = {\n  name: \"ERC1155\",\n  namespace: \"edition\",\n  docLinks: {\n    sdk: \"sdk.erc1155enumerable\",\n    contracts: \"erc1155\"\n  },\n  abis: [Erc1155Abi, Erc1155MetadataAbi, NAME_SYMBOL_ABI],\n  features: {\n    [FEATURE_EDITION_SUPPLY.name]: FEATURE_EDITION_SUPPLY,\n    [FEATURE_EDITION_BURNABLE.name]: FEATURE_EDITION_BURNABLE,\n    [FEATURE_EDITION_ENUMERABLE.name]: FEATURE_EDITION_ENUMERABLE,\n    [FEATURE_EDITION_MINTABLE.name]: FEATURE_EDITION_MINTABLE,\n    [FEATURE_EDITION_LAZY_MINTABLE_V1.name]: FEATURE_EDITION_LAZY_MINTABLE_V1,\n    [FEATURE_EDITION_LAZY_MINTABLE_V2.name]: FEATURE_EDITION_LAZY_MINTABLE_V2,\n    [FEATURE_EDITION_REVEALABLE.name]: FEATURE_EDITION_REVEALABLE,\n    [FEATURE_EDITION_SIGNATURE_MINTABLE.name]: FEATURE_EDITION_SIGNATURE_MINTABLE,\n    [FEATURE_EDITION_CLAIM_CUSTOM.name]: FEATURE_EDITION_CLAIM_CUSTOM,\n    [FEATURE_EDITION_CLAIM_CONDITIONS_V1.name]: FEATURE_EDITION_CLAIM_CONDITIONS_V1,\n    [FEATURE_EDITION_CLAIM_CONDITIONS_V2.name]: FEATURE_EDITION_CLAIM_CONDITIONS_V2,\n    [FEATURE_EDITION_CLAIM_PHASES_V2.name]: FEATURE_EDITION_CLAIM_PHASES_V2,\n    [FEATURE_EDITION_UPDATABLE_METADATA.name]: FEATURE_EDITION_UPDATABLE_METADATA\n  }\n};\n\nconst getAllPluginsAbi = [{\n  inputs: [],\n  name: \"getAllPlugins\",\n  outputs: [{\n    components: [{\n      internalType: \"bytes4\",\n      name: \"functionSelector\",\n      type: \"bytes4\"\n    }, {\n      internalType: \"string\",\n      name: \"functionSignature\",\n      type: \"string\"\n    }, {\n      internalType: \"address\",\n      name: \"pluginAddress\",\n      type: \"address\"\n    }],\n    internalType: \"struct IPluginMap.Plugin[]\",\n    name: \"registered\",\n    type: \"tuple[]\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}];\nconst getAllExtensionsAbi = [{\n  inputs: [],\n  name: \"getAllExtensions\",\n  outputs: [{\n    components: [{\n      components: [{\n        internalType: \"string\",\n        name: \"name\",\n        type: \"string\"\n      }, {\n        internalType: \"string\",\n        name: \"metadataURI\",\n        type: \"string\"\n      }, {\n        internalType: \"address\",\n        name: \"implementation\",\n        type: \"address\"\n      }],\n      internalType: \"struct IExtension.ExtensionMetadata\",\n      name: \"metadata\",\n      type: \"tuple\"\n    }, {\n      components: [{\n        internalType: \"bytes4\",\n        name: \"functionSelector\",\n        type: \"bytes4\"\n      }, {\n        internalType: \"string\",\n        name: \"functionSignature\",\n        type: \"string\"\n      }],\n      internalType: \"struct IExtension.ExtensionFunction[]\",\n      name: \"functions\",\n      type: \"tuple[]\"\n    }],\n    internalType: \"struct IExtension.Extension[]\",\n    name: \"allExtensions\",\n    type: \"tuple[]\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}];\nconst FEATURE_ROYALTY = {\n  name: \"Royalty\",\n  namespace: \"royalty\",\n  docLinks: {\n    sdk: \"sdk.contractroyalty\",\n    contracts: \"royalty\"\n  },\n  abis: [IThirdwebRoyaltyAbi],\n  features: {}\n};\nconst FEATURE_PRIMARY_SALE = {\n  name: \"PrimarySale\",\n  namespace: \"sales\",\n  docLinks: {\n    sdk: \"sdk.contractprimarysale\",\n    contracts: \"primarysale\"\n  },\n  abis: [IThirdwebPrimarySaleAbi],\n  features: {}\n};\nconst FEATURE_PLATFORM_FEE = {\n  name: \"PlatformFee\",\n  namespace: \"platformFees\",\n  docLinks: {\n    sdk: \"sdk.platformfee\",\n    contracts: \"platformfee\"\n  },\n  abis: [IThirdwebPlatformFeeAbi],\n  features: {}\n};\nconst FEATURE_PERMISSIONS_ENUMERABLE = {\n  name: \"PermissionsEnumerable\",\n  namespace: \"roles\",\n  docLinks: {\n    sdk: \"sdk.contractroles\",\n    contracts: \"permissionsenumerable\"\n  },\n  abis: [IPermissionsEnumerableAbi],\n  features: {}\n};\nconst FEATURE_PERMISSIONS = {\n  name: \"Permissions\",\n  namespace: \"roles\",\n  docLinks: {\n    sdk: \"sdk.contractroles\",\n    contracts: \"permissions\"\n  },\n  abis: [IPermissionsAbi],\n  features: {\n    [FEATURE_PERMISSIONS_ENUMERABLE.name]: FEATURE_PERMISSIONS_ENUMERABLE\n  }\n};\nconst FEATURE_METADATA = {\n  name: \"ContractMetadata\",\n  namespace: \"metadata\",\n  docLinks: {\n    sdk: \"sdk.contractmetadata\",\n    contracts: \"contractmetadata\"\n  },\n  abis: [IContractMetadataAbi],\n  features: {}\n};\nconst FEATURE_APPURI = {\n  name: \"AppURI\",\n  namespace: \"appURI\",\n  docLinks: {\n    sdk: \"sdk.appURI\",\n    //TODO\n    contracts: \"\"\n  },\n  abis: [IAppURI],\n  features: {}\n};\nconst FEATURE_OWNER = {\n  name: \"Ownable\",\n  namespace: \"owner\",\n  docLinks: {\n    sdk: \"sdk.owner\",\n    contracts: \"ownable\"\n  },\n  abis: [IOwnableAbi],\n  features: {}\n};\nconst FEATURE_GASLESS = {\n  name: \"Gasless\",\n  namespace: \"gasless\",\n  docLinks: {\n    sdk: \"sdk.gaslesstransaction\",\n    // TODO add the correct name for this once it's added to portal\n    contracts: \"IERC2771Context\"\n  },\n  abis: [IERC2771ContextAbi],\n  features: {}\n};\nconst FEATURE_PACK_VRF = {\n  name: \"PackVRF\",\n  namespace: \"pack.vrf\",\n  docLinks: {\n    sdk: \"sdk.packvrf\",\n    //TODO\n    contracts: \"IPackVRF\"\n  },\n  abis: [IPackVRFAbi],\n  features: {}\n};\nconst FEATURE_PLUGIN_ROUTER = {\n  name: \"PluginRouter\",\n  namespace: \"plugin.router\",\n  docLinks: {\n    sdk: \"sdk.pluginrouter\",\n    //TODO\n    contracts: \"PluginRouter\"\n  },\n  abis: [getAllPluginsAbi],\n  features: {}\n};\nconst FEATURE_DYNAMIC_CONTRACT = {\n  name: \"DynamicContract\",\n  namespace: \"dynamic.contract\",\n  docLinks: {\n    sdk: \"\",\n    //TODO\n    contracts: \"IExtensionsManager\"\n  },\n  abis: [getAllExtensionsAbi],\n  features: {}\n};\nconst FEATURE_DIRECT_LISTINGS = {\n  name: \"DirectListings\",\n  namespace: \"direct.listings\",\n  docLinks: {\n    // TODO\n    sdk: \"\",\n    contracts: \"IDirectListings\"\n  },\n  abis: [IDirectListingsAbi],\n  features: {}\n};\nconst FEATURE_ENGLISH_AUCTIONS = {\n  name: \"EnglishAuctions\",\n  namespace: \"english.auctions\",\n  docLinks: {\n    // TODO\n    sdk: \"\",\n    contracts: \"IEnglishAuctions\"\n  },\n  abis: [IEnglishAuctionsAbi],\n  features: {}\n};\nconst FEATURE_OFFERS = {\n  name: \"Offers\",\n  namespace: \"offers\",\n  docLinks: {\n    // TODO\n    sdk: \"\",\n    contracts: \"IOffers\"\n  },\n  abis: [IOffersAbi],\n  features: {}\n};\nconst FEATURE_ACCOUNT_FACTORY = {\n  name: \"AccountFactory\",\n  namespace: \"accountFactory\",\n  docLinks: {\n    // TODO\n    sdk: \"sdk.accountFactory\",\n    contracts: \"IAccountFactory\"\n  },\n  abis: [IAccountFactoryCore],\n  features: {}\n};\nconst FEATURE_ACCOUNT_PERMISSIONS = {\n  name: \"AccountPermissions\",\n  namespace: \"accountPermissions\",\n  docLinks: {\n    // TODO\n    sdk: \"sdk.account\",\n    contracts: \"IAccountPermissions\"\n  },\n  abis: [IAccountPermissions],\n  features: {}\n};\nconst FEATURE_ACCOUNT = {\n  name: \"Account\",\n  namespace: \"account\",\n  docLinks: {\n    // TODO\n    sdk: \"sdk.account\",\n    contracts: \"IAccount\"\n  },\n  abis: [IAccount],\n  features: {\n    [FEATURE_ACCOUNT_PERMISSIONS.name]: FEATURE_ACCOUNT_PERMISSIONS\n  }\n};\nconst FEATURE_AIRDROP_ERC20 = {\n  name: \"AirdropERC20\",\n  namespace: \"airdrop20\",\n  docLinks: {\n    // TODO\n    sdk: \"\",\n    contracts: \"IAirdropERC20\"\n  },\n  abis: [IAirdropERC20],\n  features: {}\n};\nconst FEATURE_AIRDROP_ERC721 = {\n  name: \"AirdropERC721\",\n  namespace: \"airdrop721\",\n  docLinks: {\n    // TODO\n    sdk: \"\",\n    contracts: \"IAirdropERC721\"\n  },\n  abis: [IAirdropERC721],\n  features: {}\n};\nconst FEATURE_AIRDROP_ERC1155 = {\n  name: \"AirdropERC1155\",\n  namespace: \"airdrop1155\",\n  docLinks: {\n    // TODO\n    sdk: \"\",\n    contracts: \"IAirdropERC1155\"\n  },\n  abis: [IAirdropERC1155],\n  features: {}\n};\n\n/**\n * @internal\n */\n\n/**\n * @internal\n */\n\n/**\n * @internal\n */\n\n/**\n * @internal\n */\nconst SUPPORTED_FEATURES = {\n  [FEATURE_TOKEN.name]: FEATURE_TOKEN,\n  [FEATURE_NFT.name]: FEATURE_NFT,\n  [FEATURE_EDITION.name]: FEATURE_EDITION,\n  [FEATURE_ROYALTY.name]: FEATURE_ROYALTY,\n  [FEATURE_PLATFORM_FEE.name]: FEATURE_PLATFORM_FEE,\n  [FEATURE_PRIMARY_SALE.name]: FEATURE_PRIMARY_SALE,\n  [FEATURE_PERMISSIONS.name]: FEATURE_PERMISSIONS,\n  [FEATURE_METADATA.name]: FEATURE_METADATA,\n  [FEATURE_APPURI.name]: FEATURE_APPURI,\n  [FEATURE_OWNER.name]: FEATURE_OWNER,\n  [FEATURE_GASLESS.name]: FEATURE_GASLESS,\n  [FEATURE_PACK_VRF.name]: FEATURE_PACK_VRF,\n  [FEATURE_PLUGIN_ROUTER.name]: FEATURE_PLUGIN_ROUTER,\n  [FEATURE_DYNAMIC_CONTRACT.name]: FEATURE_DYNAMIC_CONTRACT,\n  [FEATURE_DIRECT_LISTINGS.name]: FEATURE_DIRECT_LISTINGS,\n  [FEATURE_ENGLISH_AUCTIONS.name]: FEATURE_ENGLISH_AUCTIONS,\n  [FEATURE_OFFERS.name]: FEATURE_OFFERS,\n  [FEATURE_AIRDROP_ERC20.name]: FEATURE_AIRDROP_ERC20,\n  [FEATURE_AIRDROP_ERC721.name]: FEATURE_AIRDROP_ERC721,\n  [FEATURE_AIRDROP_ERC1155.name]: FEATURE_AIRDROP_ERC1155,\n  [FEATURE_ACCOUNT_FACTORY.name]: FEATURE_ACCOUNT_FACTORY,\n  [FEATURE_ACCOUNT.name]: FEATURE_ACCOUNT,\n  [FEATURE_NFT_LOYALTY_CARD.name]: FEATURE_NFT_LOYALTY_CARD,\n  [FEATURE_NFT_UPDATABLE_METADATA.name]: FEATURE_NFT_UPDATABLE_METADATA\n};\n\nfunction toJSType(contractType) {\n  let isReturnType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  let withName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  let jsType = contractType.type;\n  let isArray = false;\n  if (jsType.endsWith(\"[]\")) {\n    isArray = true;\n    jsType = jsType.slice(0, -2);\n  }\n  if (jsType.startsWith(\"bytes\")) {\n    jsType = \"BytesLike\";\n  }\n  if (jsType.startsWith(\"uint\") || jsType.startsWith(\"int\")) {\n    jsType = isReturnType ? \"BigNumber\" : \"BigNumberish\";\n  }\n  if (jsType.startsWith(\"bool\")) {\n    jsType = \"boolean\";\n  }\n  if (jsType === \"address\") {\n    jsType = \"string\";\n  }\n  if (jsType === \"tuple\") {\n    if (contractType.components) {\n      jsType = `{ ${contractType.components.map(a => toJSType(a, false, true)).join(\", \")} }`;\n    }\n  }\n  if (isArray) {\n    jsType += \"[]\";\n  }\n  if (withName) {\n    jsType = `${contractType.name}: ${jsType}`;\n  }\n  return jsType;\n}\n\n/**\n * @internal\n * @param name\n * @param metadata\n * @param type\n */\nfunction extractCommentFromMetadata(name, metadata, type) {\n  return metadata?.output?.userdoc?.[type]?.[Object.keys(metadata?.output?.userdoc[type] || {}).find(fn => fn.includes(name || \"unknown\")) || \"\"]?.notice || metadata?.output?.devdoc?.[type]?.[Object.keys(metadata?.output?.devdoc[type] || {}).find(fn => fn.includes(name || \"unknown\")) || \"\"]?.details;\n}\n\n/**\n * @internal\n * @param abi\n * @param metadata\n */\nfunction extractFunctionsFromAbi(abi, metadata) {\n  const functions = (abi || []).filter(el => el.type === \"function\");\n  const parsed = [];\n  for (const f of functions) {\n    const doc = extractCommentFromMetadata(f.name, metadata, \"methods\");\n    const args = f.inputs?.map(i => `${i.name || \"key\"}: ${toJSType(i)}`)?.join(\", \") || \"\";\n    const fargs = args ? `, [${args}]` : \"\";\n    const out = f.outputs?.map(o => toJSType(o, true))?.join(\", \");\n    const promise = out ? `: Promise<${out}>` : `: Promise<TransactionResult>`;\n    const signature = `contract.call(\"${f.name}\"${fargs})${promise}`;\n    parsed.push({\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore we know AbiTypeBaseSchema.name is not going to be undefined since we're doing `.default(\"\")`\n      inputs: f.inputs || [],\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore we know the AbiTypeBaseSchema.name is not going to be undefined since we're doing `.default(\"\")`\n      outputs: f.outputs || [],\n      name: f.name || \"unknown\",\n      signature,\n      stateMutability: f.stateMutability || \"\",\n      comment: doc\n    });\n  }\n  return parsed;\n}\n\n/**\n * @internal\n * @param contractAbi\n * @param featureAbis\n * @returns\n */\nfunction hasMatchingAbi(contractAbi, featureAbis) {\n  const contractFn = extractFunctionsFromAbi(contractAbi);\n  const interfaceFn = featureAbis.flatMap(i => extractFunctionsFromAbi(i));\n  // match every function and their arguments\n  const intersection = contractFn.filter(fn => {\n    const match = interfaceFn.find(iFn => iFn.name === fn.name && iFn.inputs.length === fn.inputs.length && iFn.inputs.every((i, index) => {\n      if (i.type === \"tuple\" || i.type === \"tuple[]\") {\n        // check that all properties in the tuple are the same type\n        return i.type === fn.inputs[index].type && i.components?.every((c, cIndex) => {\n          return c.type === fn.inputs[index].components?.[cIndex]?.type;\n        });\n      }\n      return i.type === fn.inputs[index].type;\n    }));\n    return match !== undefined;\n  });\n  return intersection.length === interfaceFn.length;\n}\nfunction matchesAbiFromBytecode(contractBytecode, featureAbis) {\n  const interfaces = featureAbis.map(abi => new Interface(abi));\n  const selectors = interfaces.flatMap(i => {\n    return Object.values(i.functions).map(fn => Number(i.getSighash(fn)).toString(16));\n  });\n  const uniqueSelectors = [...new Set(selectors)];\n  // checks that all unique selectors are found in the bytecode\n  return uniqueSelectors.every(selector => contractBytecode.includes(selector));\n}\n\n/**\n * Processes ALL supported features and sets whether the passed in abi supports each individual feature\n * @internal\n * @param abi\n * @param features\n * @returns the nested struct of all features and whether they're detected in the abi\n */\nfunction detectFeatures(abi) {\n  let features = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : SUPPORTED_FEATURES;\n  const results = {};\n  for (const featureKey in features) {\n    const feature = features[featureKey];\n    const enabled = matchesAbiInterface(abi, feature);\n    const childResults = detectFeatures(abi, feature.features);\n    results[featureKey] = {\n      ...feature,\n      features: childResults,\n      enabled\n    };\n  }\n  return results;\n}\nfunction detectFeaturesFromBytecode(bytecode) {\n  let features = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : SUPPORTED_FEATURES;\n  const results = {};\n  for (const featureKey in features) {\n    const feature = features[featureKey];\n    const enabled = matchesAbiFromBytecode(bytecode, feature.abis);\n    const childResults = detectFeaturesFromBytecode(bytecode, feature.features);\n    results[featureKey] = {\n      ...feature,\n      features: childResults,\n      enabled\n    };\n  }\n  return results;\n}\n\n/**\n * @internal\n * @param abi\n * @param feature\n */\nfunction matchesAbiInterface(abi, feature) {\n  // returns true if all the functions in `interfaceToMatch` are found in `contract` (removing any duplicates)\n  return hasMatchingAbi(abi, feature.abis);\n}\n\n/**\n * Checks whether the given ABI supports a given feature\n * @deprecated use isExtensionEnabled instead\n * @param abi\n * @param featureName\n */\nfunction isFeatureEnabled(abi, featureName) {\n  const features = detectFeatures(abi);\n  return _featureEnabled(features, featureName);\n}\n\n/**\n * Checks whether the given ABI supports a given extension\n * @public\n * @param abi\n * @param featureName\n */\nfunction isExtensionEnabled(abi, featureName) {\n  return isFeatureEnabled(abi, featureName);\n}\n\n/**\n * Searches the feature map for featureName and returns whether its enabled\n * @internal\n * @param features\n * @param featureName\n */\nfunction _featureEnabled(features, featureName) {\n  const keys = Object.keys(features);\n  if (!keys.includes(featureName)) {\n    let found = false;\n    for (const key of keys) {\n      const f = features[key];\n      found = _featureEnabled(f.features, featureName);\n      if (found) {\n        break;\n      }\n    }\n    return found;\n  }\n  const feature = features[featureName];\n  return feature.enabled;\n}\n\n/**\n * Type guard for contractWrappers depending on passed feature name\n * @internal\n * @param contractWrapper\n * @param featureName\n */\nfunction detectContractFeature(contractWrapper, featureName) {\n  return isExtensionEnabled(AbiSchema.parse(contractWrapper.abi), featureName);\n}\n\n/**\n * @internal\n * @param contractWrapper\n * @param functionName\n */\nfunction hasFunction(functionName, contractWrapper) {\n  return functionName in contractWrapper.readContract.functions;\n}\n\n/* eslint-disable eqeqeq */\n/* eslint-disable better-tree-shaking/no-top-level-side-effects  */\nlet decoder;\ntry {\n  decoder = new TextDecoder();\n} catch (error) {}\nlet src;\nlet srcEnd;\nlet position = 0;\nconst LEGACY_RECORD_INLINE_ID = 105;\nconst RECORD_DEFINITIONS_ID = 0xdffe;\nconst RECORD_INLINE_ID = 0xdfff; // temporary first-come first-serve tag // proposed tag: 0x7265 // 're'\nconst BUNDLED_STRINGS_ID = 0xdff9;\nconst PACKED_REFERENCE_TAG_ID = 6;\nconst STOP_CODE = {};\nlet currentDecoder = {};\nlet currentStructures;\nlet srcString;\nlet srcStringStart = 0;\nlet srcStringEnd = 0;\nlet bundledStrings;\nlet referenceMap;\nlet currentExtensions = [];\nlet currentExtensionRanges = [];\nlet packedValues;\nlet dataView;\nlet restoreMapsAsObject;\nlet defaultOptions = {\n  useRecords: false,\n  mapsAsObjects: true\n};\nlet sequentialMode = false;\nclass Decoder {\n  constructor(options) {\n    if (options) {\n      if ((options.keyMap || options._keyMap) && !options.useRecords) {\n        options.useRecords = false;\n        options.mapsAsObjects = true;\n      }\n      if (options.useRecords === false && options.mapsAsObjects === undefined) {\n        options.mapsAsObjects = true;\n      }\n      if (options.getStructures) {\n        options.getShared = options.getStructures;\n      }\n      if (options.getShared && !options.structures) {\n        (options.structures = []).uninitialized = true;\n      } // this is what we use to denote an uninitialized structures\n      if (options.keyMap) {\n        this.mapKey = new Map();\n        for (let [k, v] of Object.entries(options.keyMap)) {\n          this.mapKey.set(v, k);\n        }\n      }\n    }\n    Object.assign(this, options);\n  }\n  decodeKey(key) {\n    return this.keyMap ? this.mapKey.get(key) || key : key;\n  }\n  decode(source, end) {\n    if (src) {\n      // re-entrant execution, save the state and restore it after we do this decode\n      return saveState(() => {\n        clearSource();\n        return this ? this.decode(source, end) : Decoder.prototype.decode.call(defaultOptions, source, end);\n      });\n    }\n    srcEnd = end > -1 ? end : source.length;\n    position = 0;\n    srcStringEnd = 0;\n    srcString = null;\n    bundledStrings = null;\n    src = source;\n    // this provides cached access to the data view for a buffer if it is getting reused, which is a recommend\n    // technique for getting data from a database where it can be copied into an existing buffer instead of creating\n    // new ones\n    try {\n      dataView = source.dataView || (source.dataView = new DataView(source.buffer, source.byteOffset, source.byteLength));\n    } catch (error) {\n      // if it doesn't have a buffer, maybe it is the wrong type of object\n      src = null;\n      if (source instanceof Uint8Array) {\n        throw error;\n      }\n      throw new Error(\"Source must be a Uint8Array or Buffer but was a \" + (source && typeof source === \"object\" ? source.constructor.name : typeof source));\n    }\n    if (this instanceof Decoder) {\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      currentDecoder = this;\n      packedValues = this.sharedValues && (this.pack ? new Array(this.maxPrivatePackedValues || 16).concat(this.sharedValues) : this.sharedValues);\n      if (this.structures) {\n        currentStructures = this.structures;\n        return checkedRead();\n      } else if (!currentStructures || currentStructures.length > 0) {\n        currentStructures = [];\n      }\n    } else {\n      currentDecoder = defaultOptions;\n      if (!currentStructures || currentStructures.length > 0) {\n        currentStructures = [];\n      }\n      packedValues = null;\n    }\n    return checkedRead();\n  }\n}\nfunction checkedRead() {\n  try {\n    let result = read();\n    if (bundledStrings) {\n      if (position >= bundledStrings.postBundlePosition) {\n        let error = new Error(\"Unexpected bundle position\");\n        error.incomplete = true;\n        throw error;\n      }\n      // bundled strings to skip past\n      position = bundledStrings.postBundlePosition;\n      bundledStrings = null;\n    }\n    if (position == srcEnd) {\n      // finished reading this source, cleanup references\n      currentStructures = null;\n      src = null;\n      if (referenceMap) {\n        referenceMap = null;\n      }\n    } else if (position > srcEnd) {\n      // over read\n      let error = new Error(\"Unexpected end of CBOR data\");\n      error.incomplete = true;\n      throw error;\n    } else if (!sequentialMode) {\n      throw new Error(\"Data read, but end of buffer not reached\");\n    }\n    // else more to read, but we are reading sequentially, so don't clear source yet\n    return result;\n  } catch (error) {\n    clearSource();\n    if (error instanceof RangeError || error.message.startsWith(\"Unexpected end of buffer\")) {\n      error.incomplete = true;\n    }\n    throw error;\n  }\n}\nfunction read() {\n  let token = src[position++];\n  let majorType = token >> 5;\n  token = token & 0x1f;\n  if (token > 0x17) {\n    switch (token) {\n      case 0x18:\n        token = src[position++];\n        break;\n      case 0x19:\n        if (majorType == 7) {\n          return getFloat16();\n        }\n        token = dataView.getUint16(position);\n        position += 2;\n        break;\n      case 0x1a:\n        if (majorType == 7) {\n          let value = dataView.getFloat32(position);\n          if (currentDecoder.useFloat32 > 2) {\n            // this does rounding of numbers that were encoded in 32-bit float to nearest significant decimal digit that could be preserved\n            let multiplier = mult10[(src[position] & 0x7f) << 1 | src[position + 1] >> 7];\n            position += 4;\n            return (multiplier * value + (value > 0 ? 0.5 : -0.5) >> 0) / multiplier;\n          }\n          position += 4;\n          return value;\n        }\n        token = dataView.getUint32(position);\n        position += 4;\n        break;\n      case 0x1b:\n        if (majorType == 7) {\n          let value = dataView.getFloat64(position);\n          position += 8;\n          return value;\n        }\n        if (majorType > 1) {\n          if (dataView.getUint32(position) > 0) {\n            throw new Error(\"JavaScript does not support arrays, maps, or strings with length over 4294967295\");\n          }\n          token = dataView.getUint32(position + 4);\n        } else if (currentDecoder.int64AsNumber) {\n          token = dataView.getUint32(position) * 0x100000000;\n          token += dataView.getUint32(position + 4);\n        } else {\n          token = dataView.getBigUint64(position);\n        }\n        position += 8;\n        break;\n      case 0x1f:\n        // indefinite length\n        switch (majorType) {\n          case 2: // byte string\n          case 3:\n            // text string\n            throw new Error(\"Indefinite length not supported for byte or text strings\");\n          case 4:\n            // array\n            let array = [];\n            let value,\n              i = 0;\n            while ((value = read()) != STOP_CODE) {\n              array[i++] = value;\n            }\n            return majorType == 4 ? array : majorType == 3 ? array.join(\"\") : Buffer.concat(array);\n          case 5:\n            // map\n            let key;\n            if (currentDecoder.mapsAsObjects) {\n              let object = {};\n              if (currentDecoder.keyMap) {\n                while ((key = read()) != STOP_CODE) {\n                  object[safeKey(currentDecoder.decodeKey(key))] = read();\n                }\n              } else {\n                while ((key = read()) != STOP_CODE) {\n                  object[safeKey(key)] = read();\n                }\n              }\n              return object;\n            } else {\n              if (restoreMapsAsObject) {\n                currentDecoder.mapsAsObjects = true;\n                restoreMapsAsObject = false;\n              }\n              let map = new Map();\n              if (currentDecoder.keyMap) {\n                while ((key = read()) != STOP_CODE) {\n                  map.set(currentDecoder.decodeKey(key), read());\n                }\n              } else {\n                while ((key = read()) != STOP_CODE) {\n                  map.set(key, read());\n                }\n              }\n              return map;\n            }\n          case 7:\n            return STOP_CODE;\n          default:\n            throw new Error(\"Invalid major type for indefinite length \" + majorType);\n        }\n      default:\n        throw new Error(\"Unknown token \" + token);\n    }\n  }\n  switch (majorType) {\n    case 0:\n      // positive int\n      return token;\n    case 1:\n      // negative int\n      return ~token;\n    case 2:\n      // buffer\n      return readBin(token);\n    case 3:\n      // string\n      if (srcStringEnd >= position) {\n        return srcString.slice(position - srcStringStart, (position += token) - srcStringStart);\n      }\n      if (srcStringEnd == 0 && srcEnd < 140 && token < 32) {\n        // for small blocks, avoiding the overhead of the extract call is helpful\n        let string = token < 16 ? shortStringInJS(token) : longStringInJS(token);\n        if (string != null) {\n          return string;\n        }\n      }\n      return readFixedString(token);\n    case 4:\n      // array\n      let array = new Array(token);\n      //if (currentDecoder.keyMap) for (let i = 0; i < token; i++) array[i] = currentDecoder.decodeKey(read())\n      //else\n      for (let i = 0; i < token; i++) {\n        array[i] = read();\n      }\n      return array;\n    case 5:\n      // map\n      if (currentDecoder.mapsAsObjects) {\n        let object = {};\n        if (currentDecoder.keyMap) {\n          for (let i = 0; i < token; i++) {\n            object[safeKey(currentDecoder.decodeKey(read()))] = read();\n          }\n        } else {\n          for (let i = 0; i < token; i++) {\n            object[safeKey(read())] = read();\n          }\n        }\n        return object;\n      } else {\n        if (restoreMapsAsObject) {\n          currentDecoder.mapsAsObjects = true;\n          restoreMapsAsObject = false;\n        }\n        let map = new Map();\n        if (currentDecoder.keyMap) {\n          for (let i = 0; i < token; i++) {\n            map.set(currentDecoder.decodeKey(read()), read());\n          }\n        } else {\n          for (let i = 0; i < token; i++) {\n            map.set(read(), read());\n          }\n        }\n        return map;\n      }\n    case 6:\n      // extension\n      if (token >= BUNDLED_STRINGS_ID) {\n        let structure = currentStructures[token & 0x1fff]; // check record structures first\n        // At some point we may provide an option for dynamic tag assignment with a range like token >= 8 && (token < 16 || (token > 0x80 && token < 0xc0) || (token > 0x130 && token < 0x4000))\n        if (structure) {\n          if (!structure.read) {\n            structure.read = createStructureReader(structure);\n          }\n          return structure.read();\n        }\n        if (token < 0x10000) {\n          if (token == RECORD_INLINE_ID) {\n            // we do a special check for this so that we can keep the currentExtensions as densely stored array (v8 stores arrays densely under about 3000 elements)\n            return recordDefinition(read());\n          } else if (token == RECORD_DEFINITIONS_ID) {\n            let length = readJustLength();\n            let id = read();\n            for (let i = 2; i < length; i++) {\n              recordDefinition([id++, read()]);\n            }\n            return read();\n          } else if (token == BUNDLED_STRINGS_ID) {\n            return readBundleExt();\n          }\n          if (currentDecoder.getShared) {\n            loadShared();\n            structure = currentStructures[token & 0x1fff];\n            if (structure) {\n              if (!structure.read) {\n                structure.read = createStructureReader(structure);\n              }\n              return structure.read();\n            }\n          }\n        }\n      }\n      let extension = currentExtensions[token];\n      if (extension) {\n        if (extension.handlesRead) {\n          return extension(read);\n        } else {\n          return extension(read());\n        }\n      } else {\n        let input = read();\n        for (let i = 0; i < currentExtensionRanges.length; i++) {\n          let value = currentExtensionRanges[i](token, input);\n          if (value !== undefined) {\n            return value;\n          }\n        }\n        return new Tag(input, token);\n      }\n    case 7:\n      // fixed value\n      switch (token) {\n        case 0x14:\n          return false;\n        case 0x15:\n          return true;\n        case 0x16:\n          return null;\n        case 0x17:\n          return;\n        // undefined\n        case 0x1f:\n        default:\n          let packedValue = (packedValues || getPackedValues())[token];\n          if (packedValue !== undefined) {\n            return packedValue;\n          }\n          throw new Error(\"Unknown token \" + token);\n      }\n    default:\n      // negative int\n      if (isNaN(token)) {\n        let error = new Error(\"Unexpected end of CBOR data\");\n        error.incomplete = true;\n        throw error;\n      }\n      throw new Error(\"Unknown CBOR token \" + token);\n  }\n}\nconst validName = /^[a-zA-Z_$][a-zA-Z\\d_$]*$/;\nfunction createStructureReader(structure) {\n  function readObject() {\n    // get the array size from the header\n    let length = src[position++];\n    //let majorType = token >> 5\n    length = length & 0x1f;\n    if (length > 0x17) {\n      switch (length) {\n        case 0x18:\n          length = src[position++];\n          break;\n        case 0x19:\n          length = dataView.getUint16(position);\n          position += 2;\n          break;\n        case 0x1a:\n          length = dataView.getUint32(position);\n          position += 4;\n          break;\n        default:\n          throw new Error(\"Expected array header, but got \" + src[position - 1]);\n      }\n    }\n    // This initial function is quick to instantiate, but runs slower. After several iterations pay the cost to build the faster function\n    let compiledReader = this.compiledReader; // first look to see if we have the fast compiled function\n    while (compiledReader) {\n      // we have a fast compiled object literal reader\n      if (compiledReader.propertyCount === length) {\n        return compiledReader(read);\n      } // with the right length, so we use it\n      compiledReader = compiledReader.next; // see if there is another reader with the right length\n    }\n\n    if (this.slowReads++ >= 3) {\n      // create a fast compiled reader\n      let array = this.length == length ? this : this.slice(0, length);\n      compiledReader = currentDecoder.keyMap ? new Function(\"r\", \"return {\" + array.map(k => currentDecoder.decodeKey(k)).map(k => validName.test(k) ? safeKey(k) + \":r()\" : \"[\" + JSON.stringify(k) + \"]:r()\").join(\",\") + \"}\") : new Function(\"r\", \"return {\" + array.map(key => validName.test(key) ? safeKey(key) + \":r()\" : \"[\" + JSON.stringify(key) + \"]:r()\").join(\",\") + \"}\");\n      if (this.compiledReader) {\n        compiledReader.next = this.compiledReader;\n      } // if there is an existing one, we store multiple readers as a linked list because it is usually pretty rare to have multiple readers (of different length) for the same structure\n      compiledReader.propertyCount = length;\n      this.compiledReader = compiledReader;\n      return compiledReader(read);\n    }\n    let object = {};\n    if (currentDecoder.keyMap) {\n      for (let i = 0; i < length; i++) {\n        object[safeKey(currentDecoder.decodeKey(this[i]))] = read();\n      }\n    } else {\n      for (let i = 0; i < length; i++) {\n        object[safeKey(this[i])] = read();\n      }\n    }\n    return object;\n  }\n  structure.slowReads = 0;\n  return readObject;\n}\nfunction safeKey(key) {\n  return key === \"__proto__\" ? \"__proto_\" : key;\n}\nlet readFixedString = readStringJS;\nfunction readStringJS(length) {\n  let result;\n  if (length < 16) {\n    if (result = shortStringInJS(length)) {\n      return result;\n    }\n  }\n  if (length > 64 && decoder) {\n    return decoder.decode(src.subarray(position, position += length));\n  }\n  const end = position + length;\n  const units = [];\n  result = \"\";\n  while (position < end) {\n    const byte1 = src[position++];\n    if ((byte1 & 0x80) === 0) {\n      // 1 byte\n      units.push(byte1);\n    } else if ((byte1 & 0xe0) === 0xc0) {\n      // 2 bytes\n      const byte2 = src[position++] & 0x3f;\n      units.push((byte1 & 0x1f) << 6 | byte2);\n    } else if ((byte1 & 0xf0) === 0xe0) {\n      // 3 bytes\n      const byte2 = src[position++] & 0x3f;\n      const byte3 = src[position++] & 0x3f;\n      units.push((byte1 & 0x1f) << 12 | byte2 << 6 | byte3);\n    } else if ((byte1 & 0xf8) === 0xf0) {\n      // 4 bytes\n      const byte2 = src[position++] & 0x3f;\n      const byte3 = src[position++] & 0x3f;\n      const byte4 = src[position++] & 0x3f;\n      let unit = (byte1 & 0x07) << 0x12 | byte2 << 0x0c | byte3 << 0x06 | byte4;\n      if (unit > 0xffff) {\n        unit -= 0x10000;\n        units.push(unit >>> 10 & 0x3ff | 0xd800);\n        unit = 0xdc00 | unit & 0x3ff;\n      }\n      units.push(unit);\n    } else {\n      units.push(byte1);\n    }\n    if (units.length >= 0x1000) {\n      result += fromCharCode.apply(String, units);\n      units.length = 0;\n    }\n  }\n  if (units.length > 0) {\n    result += fromCharCode.apply(String, units);\n  }\n  return result;\n}\nlet fromCharCode = String.fromCharCode;\nfunction longStringInJS(length) {\n  let start = position;\n  let bytes = new Array(length);\n  for (let i = 0; i < length; i++) {\n    const byte = src[position++];\n    if ((byte & 0x80) > 0) {\n      position = start;\n      return;\n    }\n    bytes[i] = byte;\n  }\n  return fromCharCode.apply(String, bytes);\n}\nfunction shortStringInJS(length) {\n  if (length < 4) {\n    if (length < 2) {\n      if (length === 0) {\n        return \"\";\n      } else {\n        let a = src[position++];\n        if ((a & 0x80) > 1) {\n          position -= 1;\n          return;\n        }\n        return fromCharCode(a);\n      }\n    } else {\n      let a = src[position++];\n      let b = src[position++];\n      if ((a & 0x80) > 0 || (b & 0x80) > 0) {\n        position -= 2;\n        return;\n      }\n      if (length < 3) {\n        return fromCharCode(a, b);\n      }\n      let c = src[position++];\n      if ((c & 0x80) > 0) {\n        position -= 3;\n        return;\n      }\n      return fromCharCode(a, b, c);\n    }\n  } else {\n    let a = src[position++];\n    let b = src[position++];\n    let c = src[position++];\n    let d = src[position++];\n    if ((a & 0x80) > 0 || (b & 0x80) > 0 || (c & 0x80) > 0 || (d & 0x80) > 0) {\n      position -= 4;\n      return;\n    }\n    if (length < 6) {\n      if (length === 4) {\n        return fromCharCode(a, b, c, d);\n      } else {\n        let e = src[position++];\n        if ((e & 0x80) > 0) {\n          position -= 5;\n          return;\n        }\n        return fromCharCode(a, b, c, d, e);\n      }\n    } else if (length < 8) {\n      let e = src[position++];\n      let f = src[position++];\n      if ((e & 0x80) > 0 || (f & 0x80) > 0) {\n        position -= 6;\n        return;\n      }\n      if (length < 7) {\n        return fromCharCode(a, b, c, d, e, f);\n      }\n      let g = src[position++];\n      if ((g & 0x80) > 0) {\n        position -= 7;\n        return;\n      }\n      return fromCharCode(a, b, c, d, e, f, g);\n    } else {\n      let e = src[position++];\n      let f = src[position++];\n      let g = src[position++];\n      let h = src[position++];\n      if ((e & 0x80) > 0 || (f & 0x80) > 0 || (g & 0x80) > 0 || (h & 0x80) > 0) {\n        position -= 8;\n        return;\n      }\n      if (length < 10) {\n        if (length === 8) {\n          return fromCharCode(a, b, c, d, e, f, g, h);\n        } else {\n          let i = src[position++];\n          if ((i & 0x80) > 0) {\n            position -= 9;\n            return;\n          }\n          return fromCharCode(a, b, c, d, e, f, g, h, i);\n        }\n      } else if (length < 12) {\n        let i = src[position++];\n        let j = src[position++];\n        if ((i & 0x80) > 0 || (j & 0x80) > 0) {\n          position -= 10;\n          return;\n        }\n        if (length < 11) {\n          return fromCharCode(a, b, c, d, e, f, g, h, i, j);\n        }\n        let k = src[position++];\n        if ((k & 0x80) > 0) {\n          position -= 11;\n          return;\n        }\n        return fromCharCode(a, b, c, d, e, f, g, h, i, j, k);\n      } else {\n        let i = src[position++];\n        let j = src[position++];\n        let k = src[position++];\n        let l = src[position++];\n        if ((i & 0x80) > 0 || (j & 0x80) > 0 || (k & 0x80) > 0 || (l & 0x80) > 0) {\n          position -= 12;\n          return;\n        }\n        if (length < 14) {\n          if (length === 12) {\n            return fromCharCode(a, b, c, d, e, f, g, h, i, j, k, l);\n          } else {\n            let m = src[position++];\n            if ((m & 0x80) > 0) {\n              position -= 13;\n              return;\n            }\n            return fromCharCode(a, b, c, d, e, f, g, h, i, j, k, l, m);\n          }\n        } else {\n          let m = src[position++];\n          let n = src[position++];\n          if ((m & 0x80) > 0 || (n & 0x80) > 0) {\n            position -= 14;\n            return;\n          }\n          if (length < 15) {\n            return fromCharCode(a, b, c, d, e, f, g, h, i, j, k, l, m, n);\n          }\n          let o = src[position++];\n          if ((o & 0x80) > 0) {\n            position -= 15;\n            return;\n          }\n          return fromCharCode(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);\n        }\n      }\n    }\n  }\n}\nfunction readBin(length) {\n  return currentDecoder.copyBuffers ?\n  // specifically use the copying slice (not the node one)\n  Uint8Array.prototype.slice.call(src, position, position += length) : src.subarray(position, position += length);\n}\nlet f32Array = new Float32Array(1);\nlet u8Array = new Uint8Array(f32Array.buffer, 0, 4);\nfunction getFloat16() {\n  let byte0 = src[position++];\n  let byte1 = src[position++];\n  let exponent = (byte0 & 0x7f) >> 2;\n  if (exponent === 0x1f) {\n    // specials\n    if (byte1 || byte0 & 3) {\n      return NaN;\n    }\n    return byte0 & 0x80 ? -Infinity : Infinity;\n  }\n  if (exponent === 0) {\n    // sub-normals\n    // significand with 10 fractional bits and divided by 2^14\n    let abs = ((byte0 & 3) << 8 | byte1) / (1 << 24);\n    return byte0 & 0x80 ? -abs : abs;\n  }\n  u8Array[3] = byte0 & 0x80 |\n  // sign bit\n  (exponent >> 1) + 56; // 4 of 5 of the exponent bits, re-offset-ed\n  u8Array[2] = (byte0 & 7) << 5 |\n  // last exponent bit and first two mantissa bits\n  byte1 >> 3; // next 5 bits of mantissa\n  u8Array[1] = byte1 << 5; // last three bits of mantissa\n  u8Array[0] = 0;\n  return f32Array[0];\n}\nclass Tag {\n  constructor(value, tag) {\n    this.value = value;\n    this.tag = tag;\n  }\n}\ncurrentExtensions[0] = dateString => {\n  // string date extension\n  return new Date(dateString);\n};\ncurrentExtensions[1] = epochSec => {\n  // numeric date extension\n  return new Date(Math.round(epochSec * 1000));\n};\ncurrentExtensions[2] = buffer => {\n  // bigint extension\n  let value = BigInt(0);\n  for (let i = 0, l = buffer.byteLength; i < l; i++) {\n    value = BigInt(buffer[i]) + value << BigInt(8);\n  }\n  return value;\n};\ncurrentExtensions[3] = buffer => {\n  // negative bigint extension\n  return BigInt(-1) - currentExtensions[2](buffer);\n};\ncurrentExtensions[4] = fraction => {\n  // best to reparse to maintain accuracy\n  return Number(fraction[1] + \"e\" + fraction[0]);\n};\ncurrentExtensions[5] = fraction => {\n  // probably not sufficiently accurate\n  return fraction[1] * Math.exp(fraction[0] * Math.log(2));\n};\n\n// the registration of the record definition extension\nconst recordDefinition = definition => {\n  let id = definition[0] - 0xe000;\n  let structure = definition[1];\n  let existingStructure = currentStructures[id];\n  if (existingStructure && existingStructure.isShared) {\n    (currentStructures.restoreStructures || (currentStructures.restoreStructures = []))[id] = existingStructure;\n  }\n  currentStructures[id] = structure;\n  structure.read = createStructureReader(structure);\n  let object = {};\n  if (currentDecoder.keyMap) {\n    for (let i = 2, l = definition.length; i < l; i++) {\n      let key = currentDecoder.decodeKey(structure[i - 2]);\n      object[safeKey(key)] = definition[i];\n    }\n  } else {\n    for (let i = 2, l = definition.length; i < l; i++) {\n      let key = structure[i - 2];\n      object[safeKey(key)] = definition[i];\n    }\n  }\n  return object;\n};\ncurrentExtensions[LEGACY_RECORD_INLINE_ID] = recordDefinition;\ncurrentExtensions[14] = value => {\n  if (bundledStrings) {\n    return bundledStrings[0].slice(bundledStrings.position0, bundledStrings.position0 += value);\n  }\n  return new Tag(value, 14);\n};\ncurrentExtensions[15] = value => {\n  if (bundledStrings) {\n    return bundledStrings[1].slice(bundledStrings.position1, bundledStrings.position1 += value);\n  }\n  return new Tag(value, 15);\n};\nlet glbl = {\n  Error,\n  RegExp\n};\ncurrentExtensions[27] = data => {\n  // http://cbor.schmorp.de/generic-object\n  return (glbl[data[0]] || Error)(data[1], data[2]);\n};\nconst packedTable = _read => {\n  if (src[position++] != 0x84) {\n    throw new Error(\"Packed values structure must be followed by a 4 element array\");\n  }\n  let newPackedValues = _read(); // packed values\n  packedValues = packedValues ? newPackedValues.concat(packedValues.slice(newPackedValues.length)) : newPackedValues;\n  packedValues.prefixes = _read();\n  packedValues.suffixes = _read();\n  return _read(); // read the rump\n};\n\npackedTable.handlesRead = true;\ncurrentExtensions[51] = packedTable;\ncurrentExtensions[PACKED_REFERENCE_TAG_ID] = data => {\n  // packed reference\n  if (!packedValues) {\n    if (currentDecoder.getShared) {\n      loadShared();\n    } else {\n      return new Tag(data, PACKED_REFERENCE_TAG_ID);\n    }\n  }\n  if (typeof data === \"number\") {\n    return packedValues[16 + (data >= 0 ? 2 * data : -2 * data - 1)];\n  }\n  throw new Error(\"No support for non-integer packed references yet\");\n};\ncurrentExtensions[25] = id => {\n  return stringRefs[id];\n};\ncurrentExtensions[256] = _read => {\n  stringRefs = [];\n  try {\n    return _read();\n  } finally {\n    stringRefs = null;\n  }\n};\ncurrentExtensions[256].handlesRead = true;\ncurrentExtensions[28] = _read => {\n  // shareable http://cbor.schmorp.de/value-sharing (for structured clones)\n  if (!referenceMap) {\n    referenceMap = new Map();\n    referenceMap.id = 0;\n  }\n  let id = referenceMap.id++;\n  let token = src[position];\n  let target;\n  // TODO: handle Maps, Sets, and other types that can cycle; this is complicated, because you potentially need to read\n  // ahead past references to record structure definitions\n  if (token >> 5 == 4) {\n    target = [];\n  } else {\n    target = {};\n  }\n  let refEntry = {\n    target\n  }; // a placeholder object\n  referenceMap.set(id, refEntry);\n  let targetProperties = _read(); // read the next value as the target object to id\n  if (refEntry.used) {\n    // there is a cycle, so we have to assign properties to original target\n    return Object.assign(target, targetProperties);\n  }\n  refEntry.target = targetProperties; // the placeholder wasn't used, replace with the deserialized one\n  return targetProperties; // no cycle, can just use the returned read object\n};\n\ncurrentExtensions[28].handlesRead = true;\ncurrentExtensions[29] = id => {\n  // sharedref http://cbor.schmorp.de/value-sharing (for structured clones)\n  let refEntry = referenceMap.get(id);\n  refEntry.used = true;\n  return refEntry.target;\n};\ncurrentExtensions[258] = array => new Set(array); // https://github.com/input-output-hk/cbor-sets-spec/blob/master/CBOR_SETS.md\n(currentExtensions[259] = _read => {\n  // https://github.com/shanewholloway/js-cbor-codec/blob/master/docs/CBOR-259-spec\n  // for decoding as a standard Map\n  if (currentDecoder.mapsAsObjects) {\n    currentDecoder.mapsAsObjects = false;\n    restoreMapsAsObject = true;\n  }\n  return _read();\n}).handlesRead = true;\nfunction combine(a, b) {\n  if (typeof a === \"string\") {\n    return a + b;\n  }\n  if (a instanceof Array) {\n    return a.concat(b);\n  }\n  return Object.assign({}, a, b);\n}\nfunction getPackedValues() {\n  if (!packedValues) {\n    if (currentDecoder.getShared) {\n      loadShared();\n    } else {\n      throw new Error(\"No packed values available\");\n    }\n  }\n  return packedValues;\n}\nconst SHARED_DATA_TAG_ID = 0x53687264; // ascii 'Shrd'\ncurrentExtensionRanges.push((tag, input) => {\n  if (tag >= 225 && tag <= 255) {\n    return combine(getPackedValues().prefixes[tag - 224], input);\n  }\n  if (tag >= 28704 && tag <= 32767) {\n    return combine(getPackedValues().prefixes[tag - 28672], input);\n  }\n  if (tag >= 1879052288 && tag <= 2147483647) {\n    return combine(getPackedValues().prefixes[tag - 1879048192], input);\n  }\n  if (tag >= 216 && tag <= 223) {\n    return combine(input, getPackedValues().suffixes[tag - 216]);\n  }\n  if (tag >= 27647 && tag <= 28671) {\n    return combine(input, getPackedValues().suffixes[tag - 27639]);\n  }\n  if (tag >= 1811940352 && tag <= 1879048191) {\n    return combine(input, getPackedValues().suffixes[tag - 1811939328]);\n  }\n  if (tag == SHARED_DATA_TAG_ID) {\n    // we do a special check for this so that we can keep the currentExtensions as densely stored array (v8 stores arrays densely under about 3000 elements)\n    return {\n      packedValues: packedValues,\n      structures: currentStructures.slice(0),\n      version: input\n    };\n  }\n  if (tag == 55799) {\n    // self-descriptive CBOR tag, just return input value\n    return input;\n  }\n});\nconst isLittleEndianMachine = new Uint8Array(new Uint16Array([1]).buffer)[0] == 1;\nconst typedArrays = [Uint8Array];\nconst typedArrayTags = [64];\nfor (let i = 0; i < typedArrays.length; i++) {\n  registerTypedArray(typedArrays[i], typedArrayTags[i]);\n}\nfunction registerTypedArray(TypedArray, tag) {\n  let dvMethod = \"get\" + TypedArray.name.slice(0, -5);\n  if (typeof TypedArray !== \"function\") {\n    TypedArray = null;\n  }\n  let bytesPerElement = TypedArray.BYTES_PER_ELEMENT;\n  for (let littleEndian = 0; littleEndian < 2; littleEndian++) {\n    if (!littleEndian && bytesPerElement == 1) {\n      continue;\n    }\n    let sizeShift = bytesPerElement == 2 ? 1 : bytesPerElement == 4 ? 2 : 3;\n    currentExtensions[littleEndian ? tag : tag - 4] = bytesPerElement == 1 || littleEndian == isLittleEndianMachine ? buffer => {\n      if (!TypedArray) {\n        throw new Error(\"Could not find typed array for code \" + tag);\n      }\n      // we have to always slice/copy here to get a new ArrayBuffer that is word/byte aligned\n      return new TypedArray(Uint8Array.prototype.slice.call(buffer, 0).buffer);\n    } : buffer => {\n      if (!TypedArray) {\n        throw new Error(\"Could not find typed array for code \" + tag);\n      }\n      let dv = new DataView(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n      let elements = buffer.length >> sizeShift;\n      let ta = new TypedArray(elements);\n      let method = dv[dvMethod];\n      for (let i = 0; i < elements; i++) {\n        ta[i] = method.call(dv, i << sizeShift, littleEndian);\n      }\n      return ta;\n    };\n  }\n}\nfunction readBundleExt() {\n  let length = readJustLength();\n  let bundlePosition = position + read();\n  for (let i = 2; i < length; i++) {\n    // skip past bundles that were already read\n    let bundleLength = readJustLength(); // this will increment position, so must add to position afterwards\n    position += bundleLength;\n  }\n  let dataPosition = position;\n  position = bundlePosition;\n  bundledStrings = [readStringJS(readJustLength()), readStringJS(readJustLength())];\n  bundledStrings.position0 = 0;\n  bundledStrings.position1 = 0;\n  bundledStrings.postBundlePosition = position;\n  position = dataPosition;\n  return read();\n}\nfunction readJustLength() {\n  let token = src[position++] & 0x1f;\n  if (token > 0x17) {\n    switch (token) {\n      case 0x18:\n        token = src[position++];\n        break;\n      case 0x19:\n        token = dataView.getUint16(position);\n        position += 2;\n        break;\n      case 0x1a:\n        token = dataView.getUint32(position);\n        position += 4;\n        break;\n    }\n  }\n  return token;\n}\nfunction loadShared() {\n  if (currentDecoder.getShared) {\n    let sharedData = saveState(() => {\n      // save the state in case getShared modifies our buffer\n      src = null;\n      return currentDecoder.getShared();\n    }) || {};\n    let updatedStructures = sharedData.structures || [];\n    currentDecoder.sharedVersion = sharedData.version;\n    packedValues = currentDecoder.sharedValues = sharedData.packedValues;\n    if (currentStructures === true) {\n      currentDecoder.structures = currentStructures = updatedStructures;\n    } else {\n      currentStructures.splice.apply(currentStructures, [0, updatedStructures.length].concat(updatedStructures));\n    }\n  }\n}\nfunction saveState(callback) {\n  let savedSrcEnd = srcEnd;\n  let savedPosition = position;\n  let savedSrcStringStart = srcStringStart;\n  let savedSrcStringEnd = srcStringEnd;\n  let savedSrcString = srcString;\n  let savedReferenceMap = referenceMap;\n  let savedBundledStrings = bundledStrings;\n\n  // TODO: We may need to revisit this if we do more external calls to user code (since it could be slow)\n  let savedSrc = new Uint8Array(src.slice(0, srcEnd)); // we copy the data in case it changes while external data is processed\n  let savedStructures = currentStructures;\n  let savedDecoder = currentDecoder;\n  let savedSequentialMode = sequentialMode;\n  let value = callback();\n  srcEnd = savedSrcEnd;\n  position = savedPosition;\n  srcStringStart = savedSrcStringStart;\n  srcStringEnd = savedSrcStringEnd;\n  srcString = savedSrcString;\n  referenceMap = savedReferenceMap;\n  bundledStrings = savedBundledStrings;\n  src = savedSrc;\n  sequentialMode = savedSequentialMode;\n  currentStructures = savedStructures;\n  currentDecoder = savedDecoder;\n  dataView = new DataView(src.buffer, src.byteOffset, src.byteLength);\n  return value;\n}\nfunction clearSource() {\n  src = null;\n  referenceMap = null;\n  currentStructures = null;\n}\nconst mult10 = new Array(147); // this is a table matching binary exponents to the multiplier to determine significant digit rounding\nfor (let i = 0; i < 256; i++) {\n  mult10[i] = Number(\"1e\" + Math.floor(45.15 - i * 0.30103));\n}\nconst defaultDecoder = new Decoder({\n  useRecords: false\n});\nconst decode = defaultDecoder.decode;\n\n/**\n * @internal\n * @param hex\n */\nfunction hexToBytes(hex) {\n  hex = hex.toString(16);\n  if (!hex.startsWith(\"0x\")) {\n    hex = `0x${hex}`;\n  }\n  if (!isHexStrict(hex)) {\n    throw new Error(`Given value \"${hex}\" is not a valid hex string.`);\n  }\n  hex = hex.replace(/^0x/i, \"\");\n  const bytes = [];\n  for (let c = 0; c < hex.length; c += 2) {\n    bytes.push(parseInt(hex.slice(c, c + 2), 16));\n  }\n  return bytes;\n}\n\n/**\n * @internal\n * @param hex\n */\nfunction isHexStrict(hex) {\n  return (typeof hex === \"string\" || typeof hex === \"number\") && /^(-)?0x[0-9a-f]*$/i.test(hex.toString());\n}\n\n/**\n * @internal\n * @param bytecode\n */\nfunction extractIPFSHashFromBytecode(bytecode) {\n  const numericBytecode = hexToBytes(bytecode);\n  const cborLength = numericBytecode[numericBytecode.length - 2] * 0x100 + numericBytecode[numericBytecode.length - 1];\n  const bytecodeBuffer = Uint8Array.from(numericBytecode.slice(numericBytecode.length - 2 - cborLength, -2));\n  const cborData = decode(bytecodeBuffer);\n  if (\"ipfs\" in cborData && cborData[\"ipfs\"]) {\n    try {\n      return `ipfs://${bs58.encode(cborData[\"ipfs\"])}`;\n    } catch (e) {\n      console.warn(\"feature-detection ipfs cbor failed\", e);\n    }\n  }\n  return undefined;\n}\n\n/**\n * @internal\n * @param bytecode\n */\nfunction extractMinimalProxyImplementationAddress(bytecode) {\n  // EIP-1167 clone minimal proxy - https://eips.ethereum.org/EIPS/eip-1167\n  if (bytecode.startsWith(\"0x363d3d373d3d3d363d73\")) {\n    const implementationAddress = bytecode.slice(22, 62);\n    return `0x${implementationAddress}`;\n  }\n\n  // Minimal Proxy with receive() from 0xSplits - https://github.com/0xSplits/splits-contracts/blob/c7b741926ec9746182d0d1e2c4c2046102e5d337/contracts/libraries/Clones.sol\n  if (bytecode.startsWith(\"0x36603057343d5230\")) {\n    // +40 = size of addr\n    const implementationAddress = bytecode.slice(122, 122 + 40);\n    return `0x${implementationAddress}`;\n  }\n\n  // 0age's minimal proxy - https://medium.com/coinmonks/the-more-minimal-proxy-5756ae08ee48\n  if (bytecode.startsWith(\"0x3d3d3d3d363d3d37363d73\")) {\n    // +40 = size of addr\n    const implementationAddress = bytecode.slice(24, 24 + 40);\n    return `0x${implementationAddress}`;\n  }\n\n  // vyper's minimal proxy (uniswap v1) - https://etherscan.io/address/0x09cabec1ead1c0ba254b09efb3ee13841712be14#code\n  if (bytecode.startsWith(\"0x366000600037611000600036600073\")) {\n    const implementationAddress = bytecode.slice(32, 32 + 40);\n    return `0x${implementationAddress}`;\n  }\n  return undefined;\n}\n\n/**\n * @internal\n * @param address\n * @param provider\n */\nasync function resolveContractUriFromAddress(address, provider) {\n  const {\n    bytecode\n  } = await resolveImplementation(address, provider);\n  return extractIPFSHashFromBytecode(bytecode);\n}\nasync function resolveContractUriAndBytecode(address, provider) {\n  const {\n    bytecode\n  } = await resolveImplementation(address, provider);\n  return {\n    uri: extractIPFSHashFromBytecode(bytecode),\n    bytecode\n  };\n}\n\n/**\n * Resolve the implementation address of a proxy contract and its bytecode\n * @param address the contract address\n * @param provider RPC provider\n * @returns the implementation address and its bytecode\n */\nasync function resolveImplementation(address, provider) {\n  let bytecode;\n  try {\n    bytecode = await provider.getCode(address);\n  } catch (e) {\n    throw new Error(`Failed to get bytecode for address ${address}: ${e}`);\n  }\n  if (bytecode === \"0x\") {\n    const chain = await provider.getNetwork();\n    throw new Error(`Contract at ${address} does not exist on chain '${chain.name}' (chainId: ${chain.chainId})`);\n  }\n  try {\n    // TODO support other types of proxies\n    const implementationAddress = extractMinimalProxyImplementationAddress(bytecode);\n    if (implementationAddress) {\n      return await resolveImplementation(implementationAddress, provider);\n    }\n  } catch (e) {\n    // ignore\n  }\n\n  // EIP-1967 proxy storage slots - https://eips.ethereum.org/EIPS/eip-1967\n  try {\n    const proxyStorage = await provider.getStorageAt(address, BigNumber.from(\"0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc\"));\n    const implementationAddress = `0x${proxyStorage.slice(-40)}`;\n    if (utils.isAddress(implementationAddress) && implementationAddress !== constants.AddressZero) {\n      return await resolveImplementation(implementationAddress, provider);\n    }\n  } catch (e) {\n    // ignore\n  }\n  if (!bytecode) {\n    throw new Error(`Error fetching bytecode for ${address}`);\n  }\n  return {\n    address,\n    bytecode\n  };\n}\n\nconst CONTRACT_METADATA_TIMEOUT_SEC = 2;\n\n/**\n * @internal\n * @param compilerMetadataUri\n * @param storage\n */\nasync function fetchContractMetadata(compilerMetadataUri, storage) {\n  // short timeout to avoid hanging on unpinned contract metadata CIDs\n  const metadata = await storage.downloadJSON(compilerMetadataUri, {\n    timeoutInSeconds: CONTRACT_METADATA_TIMEOUT_SEC\n  });\n  if (!metadata || !metadata.output) {\n    throw new Error(`Could not resolve metadata for contract at ${compilerMetadataUri}`);\n  }\n  const abi = AbiSchema.parse(metadata.output.abi);\n  const compilationTarget = metadata.settings.compilationTarget;\n  const targets = Object.keys(compilationTarget);\n  const name = compilationTarget[targets[0]];\n  const info = ContractInfoSchema.parse({\n    title: metadata.output.devdoc.title,\n    author: metadata.output.devdoc.author,\n    details: metadata.output.devdoc.detail,\n    notice: metadata.output.userdoc.notice\n  });\n  const licenses = [...new Set(Object.entries(metadata.sources).map(_ref => {\n    let [, src] = _ref;\n    return src.license;\n  }))];\n  return {\n    name,\n    abi,\n    metadata,\n    info,\n    licenses\n  };\n}\n\nfunction getProcessEnv(key) {\n  let defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n  if (typeof process !== \"undefined\") {\n    if (process.env[key]) {\n      return process.env[key];\n    }\n  }\n  return defaultValue;\n}\n\nconst MultichainRegistry_address = \"0xcdAD8FA86e18538aC207872E8ff3536501431B73\"; // Polygon only\n\n/**\n * @internal\n */\nfunction getMultichainRegistryAddress() {\n  return getProcessEnv(\"multiChainRegistryAddress\", MultichainRegistry_address);\n}\n\n/**\n * @internal\n */\nconst isBrowser = () => \"object\" !== \"undefined\";\n\n/**\n * @internal\n */\nconst isNode = () => !isBrowser();\n\n/**\n * @internal\n */\nfunction unique(a, fn) {\n  if (a.length === 0 || a.length === 1) {\n    return a;\n  }\n  if (!fn) {\n    return a;\n  }\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      if (fn(a[i], a[j])) {\n        a.splice(j, 1);\n      }\n    }\n  }\n  return a;\n}\n\n/**\n * @internal\n */\nfunction joinABIs(abis) {\n  const parsedABIs = abis.map(abi => AbiSchema.parse(abi)).flat();\n  const filteredABIs = unique(parsedABIs, (a, b) => {\n    return a.name === b.name && a.type === b.type && a.inputs.length === b.inputs.length;\n  });\n  const finalABIs = filteredABIs.filter(item => item.type !== \"constructor\");\n  return AbiSchema.parse(finalABIs);\n}\n\nfunction extractFeatures(input, enabledExtensions) {\n  if (!input) {\n    return;\n  }\n  for (const extensionKey in input) {\n    const extension = input[extensionKey];\n    // if extension is enabled, then add it to enabledFeatures\n    if (extension.enabled) {\n      enabledExtensions.push(extension);\n    }\n    // recurse\n    extractFeatures(extension.features, enabledExtensions);\n  }\n}\n\n/**\n * Return all the detected features in the abi\n * @param abi - parsed array of abi entries\n * @returns array of all detected extensions with full information on each feature\n * @internal\n * @deprecated use getAllDetectedExtensions instead\n */\nfunction getAllDetectedFeatures(abi) {\n  const features = [];\n  extractFeatures(detectFeatures(abi), features);\n  return features;\n}\nfunction getAllDetectedExtensionsFromBytecode(bytecode) {\n  const features = [];\n  extractFeatures(detectFeaturesFromBytecode(bytecode), features);\n  return features;\n}\nfunction constructAbiFromBytecode(bytecode) {\n  let extensions = getAllDetectedExtensionsFromBytecode(bytecode);\n  // special deduping for ERC721 and ERC20\n  if (extensions.find(f => f.name === \"ERC721\")) {\n    extensions = extensions.filter(f => f.name !== \"ERC20\");\n  }\n  const abi = joinABIs(extensions.map(f => joinABIs(f.abis)));\n  return abi;\n}\n\n/**\n * Return all the detected extensions in the abi\n * @param abi - parsed array of abi entries\n * @returns array of all detected extensions with full information on each feature\n * @public\n */\nfunction getAllDetectedExtensions(abi) {\n  return getAllDetectedFeatures(abi).map(f => ({\n    ...f,\n    extensions: f.features\n  }));\n}\n\n// Internal static cache\nconst metadataCache = {};\nlet multichainRegistry = undefined;\nfunction getCacheKey(address, chainId) {\n  return `${address}-${chainId}`;\n}\nfunction putInCache(address, chainId, metadata) {\n  metadataCache[getCacheKey(address, chainId)] = metadata;\n}\nfunction getFromCache(address, chainId) {\n  return metadataCache[getCacheKey(address, chainId)];\n}\n\n/**\n * @internal\n * @param address\n * @param provider\n * @param storage\n */\nasync function fetchContractMetadataFromAddress(address, provider, storage) {\n  let sdkOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const chainId = (await provider.getNetwork()).chainId; // TODO resolve from sdk network\n  const cached = getFromCache(address, chainId);\n  if (cached) {\n    return cached;\n  }\n  let metadata;\n\n  // we can't race here, because the contract URI might resolve first with a non pinned URI\n  const [ipfsData, registryData] = await Promise.all([resolveContractUriAndBytecode(address, provider).catch(() => undefined), getMetadataUriFromMultichainRegistry(address, chainId, sdkOptions).then(uri => {\n    if (!uri) {\n      return undefined;\n    }\n    return {\n      uri,\n      bytecode: \"\"\n    };\n  }).catch(() => undefined)]);\n  const bytecode = ipfsData?.bytecode;\n  const metadataUri = registryData?.uri || ipfsData?.uri;\n  if (!metadataUri && !bytecode) {\n    throw new Error(`Could not fetch bytecode for contract at ${address} on chain ${chainId}, double check that the address and chainId are correct.`);\n  }\n  try {\n    metadata = await fetchContractMetadata(metadataUri, storage);\n  } catch (e) {\n    // Don't warn here, its common to not have IPFS metadata for a contract, fallback to bytecode\n  }\n  if (!metadata && bytecode) {\n    const abi = constructAbiFromBytecode(bytecode);\n    if (abi && abi.length > 0) {\n      console.warn(`Contract metadata could only be partially resolved, some contract functions might be unavailable. Try importing the contract by visiting: https://thirdweb.com/${chainId}/${address}`);\n      // return partial ABI\n      metadata = {\n        name: \"Unimported Contract\",\n        abi: abi,\n        metadata: {},\n        info: {},\n        licenses: [],\n        isPartialAbi: true\n      };\n      // return without caching\n      return metadata;\n    }\n  }\n  if (!metadata) {\n    throw new Error(`Could not resolve contract. Try importing it by visiting: https://thirdweb.com/${chainId}/${address}`);\n  }\n  putInCache(address, chainId, metadata);\n  return metadata;\n}\nasync function getMetadataUriFromMultichainRegistry(address, chainId, sdkOptions) {\n  if (!multichainRegistry) {\n    const polygonChain = sdkOptions?.supportedChains?.find(c => c.chainId === 137);\n    const chain = polygonChain || Polygon;\n    multichainRegistry = new Contract(getMultichainRegistryAddress(), TWRegistryABI, getChainProvider(chain, sdkOptions));\n  }\n  const importedUri = await multichainRegistry.getMetadataUri(chainId, address);\n  return importedUri;\n}\n\n/**\n * @internal\n * @param address\n * @param provider\n * @param storage\n * @returns\n */\nasync function fetchAbiFromAddress(address, provider, storage) {\n  try {\n    const metadata = await fetchContractMetadataFromAddress(address, provider, storage);\n    if (metadata && metadata.abi) {\n      return metadata.abi;\n    }\n  } catch (e) {\n    // ignore and return undefined\n    // will fallback to embedded ABIs for prebuilts\n  }\n  return undefined;\n}\n\nfunction buildDeployTransactionFunction(fn) {\n  async function executeFn() {\n    const tx = await fn(...arguments);\n    return tx.execute();\n  }\n  executeFn.prepare = fn;\n  return executeFn;\n}\nfunction buildTransactionFunction(fn) {\n  async function executeFn() {\n    const tx = await fn(...arguments);\n    return tx.execute();\n  }\n  executeFn.prepare = fn;\n  return executeFn;\n}\n\nasync function getDefaultGasOverrides(provider) {\n  // If we're running in the browser, let users configure gas price in their wallet UI\n  if (isBrowser()) {\n    return {};\n  }\n\n  // handle smart wallet provider\n  if (provider.originalProvider) {\n    provider = provider.originalProvider;\n  }\n  const feeData = await getDynamicFeeData(provider);\n  if (feeData.maxFeePerGas && feeData.maxPriorityFeePerGas) {\n    return {\n      maxFeePerGas: feeData.maxFeePerGas,\n      maxPriorityFeePerGas: feeData.maxPriorityFeePerGas\n    };\n  } else {\n    return {\n      gasPrice: await getGasPrice(provider)\n    };\n  }\n}\nasync function getDynamicFeeData(provider) {\n  let maxFeePerGas = null;\n  let maxPriorityFeePerGas = null;\n  const [{\n    chainId\n  }, block, eth_maxPriorityFeePerGas] = await Promise.all([provider.getNetwork(), provider.getBlock(\"latest\"), provider.send(\"eth_maxPriorityFeePerGas\", []).catch(() => null)]);\n  const baseBlockFee = block && block.baseFeePerGas ? block.baseFeePerGas : utils.parseUnits(\"100\", \"wei\");\n  if (chainId === Mumbai.chainId || chainId === Polygon.chainId) {\n    // for polygon, get fee data from gas station\n    maxPriorityFeePerGas = await getPolygonGasPriorityFee(chainId);\n  } else if (eth_maxPriorityFeePerGas) {\n    // prioritize fee from eth_maxPriorityFeePerGas\n    maxPriorityFeePerGas = BigNumber.from(eth_maxPriorityFeePerGas);\n  } else {\n    // if eth_maxPriorityFeePerGas is not available, use 1.5 gwei default\n    const feeData = await provider.getFeeData();\n    maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;\n    if (!maxPriorityFeePerGas) {\n      // chain does not support eip-1559, return null for both\n      return {\n        maxFeePerGas: null,\n        maxPriorityFeePerGas: null\n      };\n    }\n  }\n\n  // eip-1559 formula, with an extra 10% tip to account for gas volatility\n  maxFeePerGas = baseBlockFee.mul(2).add(getPreferredPriorityFee(maxPriorityFeePerGas));\n  return {\n    maxFeePerGas,\n    maxPriorityFeePerGas\n  };\n}\nfunction getPreferredPriorityFee(defaultPriorityFeePerGas) {\n  let percentMultiplier = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n  const extraTip = defaultPriorityFeePerGas.div(100).mul(percentMultiplier); // + 10%\n  const txGasPrice = defaultPriorityFeePerGas.add(extraTip);\n  return txGasPrice;\n}\nasync function getGasPrice(provider) {\n  const gasPrice = await provider.getGasPrice();\n  const maxGasPrice = utils.parseUnits(\"300\", \"gwei\"); // 300 gwei\n  const extraTip = gasPrice.div(100).mul(10); // + 10%\n  const txGasPrice = gasPrice.add(extraTip);\n  if (txGasPrice.gt(maxGasPrice)) {\n    return maxGasPrice;\n  }\n  return txGasPrice;\n}\n\n/**\n * @internal\n */\nfunction getGasStationUrl(chainId) {\n  switch (chainId) {\n    case ChainId.Polygon:\n      return \"https://gasstation.polygon.technology/v2\";\n    case ChainId.Mumbai:\n      return \"https://gasstation-testnet.polygon.technology/v2\";\n  }\n}\nconst MIN_POLYGON_GAS_PRICE = /* @__PURE__ */utils.parseUnits(\"31\", \"gwei\");\nconst MIN_MUMBAI_GAS_PRICE = /* @__PURE__ */utils.parseUnits(\"1\", \"gwei\");\n\n/**\n * @internal\n */\nfunction getDefaultGasFee(chainId) {\n  switch (chainId) {\n    case ChainId.Polygon:\n      return MIN_POLYGON_GAS_PRICE;\n    case ChainId.Mumbai:\n      return MIN_MUMBAI_GAS_PRICE;\n  }\n}\n\n/**\n *\n * @returns the gas price\n * @internal\n */\nasync function getPolygonGasPriorityFee(chainId) {\n  const gasStationUrl = getGasStationUrl(chainId);\n  try {\n    const data = await (await fetch(gasStationUrl)).json();\n    // take the standard speed here, SDK options will define the extra tip\n    const priorityFee = data[\"fast\"][\"maxPriorityFee\"];\n    if (priorityFee > 0) {\n      const fixedFee = parseFloat(priorityFee).toFixed(9);\n      return utils.parseUnits(fixedFee, \"gwei\");\n    }\n  } catch (e) {\n    console.error(\"failed to fetch gas\", e);\n  }\n  return getDefaultGasFee(chainId);\n}\n\n/**\n * @internal\n * @param publishedMetadata\n * @param storage\n */\n\nasync function fetchSourceFilesFromMetadata(publishedMetadata, storage) {\n  return await Promise.all(Object.entries(publishedMetadata.metadata.sources).map(async _ref => {\n    let [path, info] = _ref;\n    const urls = info.urls;\n    const ipfsLink = urls ? urls.find(url => url.includes(\"ipfs\")) : undefined;\n    if (ipfsLink) {\n      const ipfsHash = ipfsLink.split(\"ipfs/\")[1];\n      // 3 sec timeout for sources that haven't been uploaded to ipfs\n      const timeout = new Promise((_r, rej) => setTimeout(() => rej(\"timeout\"), 3000));\n      const source = await Promise.race([(await storage.download(`ipfs://${ipfsHash}`)).text(), timeout]);\n      return {\n        filename: path,\n        source\n      };\n    } else {\n      return {\n        filename: path,\n        source: info.content || \"Could not find source for this contract\"\n      };\n    }\n  }));\n}\n\nfunction isRouterContract(abi) {\n  const isPluginRouter = isFeatureEnabled(AbiSchema.parse(abi), \"PluginRouter\");\n  const isBaseRouter = isFeatureEnabled(AbiSchema.parse(abi), \"DynamicContract\");\n  return isBaseRouter || isPluginRouter;\n}\n\nconst ERROR_SUBSTRINGS = [\"eip-155\", \"eip155\", \"protected\", \"invalid chain id for signer\", \"chain id none\", \"chain_id mismatch\", \"recovered sender mismatch\", \"transaction hash mismatch\", \"chainid no support\", \"chainid (0)\", \"chainid(0)\"];\nconst ERROR_SUBSTRINGS_COMPOSITE = [[\"account\", \"not found\"], [\"wrong\", \"chainid\"]];\n\n/* eslint-disable no-useless-computed-key */\nconst CUSTOM_GAS_FOR_CHAIN = {\n  [5001]: {\n    name: \"Mantle Testnet\",\n    gasPrice: 1\n  },\n  [71402]: {\n    name: \"Godwoken Mainnet\",\n    gasPrice: 40_000 * 10 ** 9\n  },\n  [1351057110]: {\n    name: \"Chaos (SKALE Testnet)\",\n    gasPrice: 100000\n  },\n  [361]: {\n    name: \"Theta Mainnet\",\n    gasPrice: 4000 * 10 ** 9\n  },\n  [365]: {\n    name: \"Theta Testnet\",\n    gasPrice: 4000 * 10 ** 9\n  },\n  [7700]: {\n    name: \"Canto\",\n    gasPrice: 1000 * 10 ** 9\n  },\n  [7701]: {\n    name: \"Canto Testnet\",\n    gasPrice: 1000 * 10 ** 9\n  },\n  [338]: {\n    name: \"Cronos Testnet\",\n    gasPrice: 2000 * 10 ** 9\n  },\n  [199]: {\n    name: \"BitTorrent Chain\",\n    gasPrice: 300_000 * 10 ** 9\n  }\n};\n/* eslint-enable no-useless-computed-key */\n\nfunction matchError(error) {\n  const errorIndex = ERROR_SUBSTRINGS.findIndex(substring => error.includes(substring));\n  const compositeErrorIndex = ERROR_SUBSTRINGS_COMPOSITE.findIndex(arr => {\n    let foundError = true;\n    arr.forEach(substring => {\n      foundError &&= error.includes(substring);\n    });\n    return foundError;\n  });\n  return errorIndex !== -1 || compositeErrorIndex !== -1;\n}\n\nconst CREATE2_FACTORY_BYTECODE = \"0x604580600e600039806000f350fe7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe03601600081602082378035828234f58015156039578182fd5b8082525050506014600cf3\";\nconst SIGNATURE = {\n  v: 27,\n  r: \"0x2222222222222222222222222222222222222222222222222222222222222222\",\n  s: \"0x2222222222222222222222222222222222222222222222222222222222222222\"\n};\nconst COMMON_FACTORY = \"0x4e59b44847b379578588920cA78FbF26c0B4956C\"; // for pre-eip-155 supporting chains\n\nconst GAS_LIMIT_FOR_DEPLOYER = 5_000_000;\nconst DEPLOYER_BYTECODE = \"0x60806040526040516107f33803806107f383398101604081905261002291610359565b805160005b818110156100c157828181518110610041576100416104c9565b6020026020010151600001516001600160a01b03163b600014156100af576100ad838281518110610074576100746104c9565b602002602001015160200151848381518110610092576100926104c9565b6020026020010151604001516100c960201b6100091760201c565b505b806100b9816104df565b915050610027565b505050610557565b606061011183836040518060400160405280601e81526020017f416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564000081525061011860201b60201c565b9392505050565b6060610127848460008561012f565b949350505050565b6060824710156101955760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084015b60405180910390fd5b6001600160a01b0385163b6101ec5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161018c565b600080866001600160a01b031685876040516102089190610508565b60006040518083038185875af1925050503d8060008114610245576040519150601f19603f3d011682016040523d82523d6000602084013e61024a565b606091505b50909250905061025b828286610266565b979650505050505050565b60608315610275575081610111565b8251156102855782518084602001fd5b8160405162461bcd60e51b815260040161018c9190610524565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b03811182821017156102d7576102d761029f565b60405290565b604051601f8201601f191681016001600160401b03811182821017156103055761030561029f565b604052919050565b80516001600160a01b038116811461032457600080fd5b919050565b60005b8381101561034457818101518382015260200161032c565b83811115610353576000848401525b50505050565b6000602080838503121561036c57600080fd5b82516001600160401b038082111561038357600080fd5b818501915085601f83011261039757600080fd5b8151818111156103a9576103a961029f565b8060051b6103b88582016102dd565b91825283810185019185810190898411156103d257600080fd5b86860192505b838310156104bc578251858111156103f05760008081fd5b86016060601f19828d0381018213156104095760008081fd5b6104116102b5565b61041c8b850161030d565b8152604061042b81860161030d565b828d01529284015192898411156104425760008081fd5b83850194508e603f86011261045957600093508384fd5b8b85015193508984111561046f5761046f61029f565b61047f8c84601f870116016102dd565b92508383528e818587010111156104965760008081fd5b6104a5848d8501838801610329565b8101919091528452505091860191908601906103d8565b9998505050505050505050565b634e487b7160e01b600052603260045260246000fd5b600060001982141561050157634e487b7160e01b600052601160045260246000fd5b5060010190565b6000825161051a818460208701610329565b9190910192915050565b6020815260008251806020840152610543816040850160208701610329565b601f01601f19169190910160400192915050565b61028d806105666000396000f3fe6080604052600080fd5b606061004b83836040518060400160405280601e81526020017f416464726573733a206c6f772d6c6576656c2063616c6c206661696c65640000815250610052565b9392505050565b60606100618484600085610069565b949350505050565b6060824710156100cf5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084015b60405180910390fd5b6001600160a01b0385163b6101265760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016100c6565b600080866001600160a01b031685876040516101429190610208565b60006040518083038185875af1925050503d806000811461017f576040519150601f19603f3d011682016040523d82523d6000602084013e610184565b606091505b509150915061019482828661019f565b979650505050505050565b606083156101ae57508161004b565b8251156101be5782518084602001fd5b8160405162461bcd60e51b81526004016100c69190610224565b60005b838110156101f35781810151838201526020016101db565b83811115610202576000848401525b50505050565b6000825161021a8184602087016101d8565b9190910192915050565b60208152600082518060208401526102438160408501602087016101d8565b601f01601f1916919091016040019291505056fea26469706673582212200b524eb8ceaafe6c603273ee859fddbc2d6f1b7860c3d853dcf6f129f9d9371364736f6c634300080c0033\";\nconst DEPLOYER_ABI = [{\n  inputs: [{\n    components: [{\n      internalType: \"address\",\n      name: \"predictedAddress\",\n      type: \"address\"\n    }, {\n      internalType: \"address\",\n      name: \"to\",\n      type: \"address\"\n    }, {\n      internalType: \"bytes\",\n      name: \"data\",\n      type: \"bytes\"\n    }],\n    internalType: \"struct IDeployer.Transaction[]\",\n    name: \"transactions\",\n    type: \"tuple[]\"\n  }],\n  stateMutability: \"payable\",\n  type: \"constructor\"\n}];\n\n/**\n * Check if a contract exists at the given address\n *\n * @internal\n * @param address\n * @param provider\n */\nasync function isContractDeployed(address, provider) {\n  const code = await provider.getCode(address);\n  return code !== \"0x\" && code !== \"0x0\";\n}\n\n/**\n * Check if a chain enforces EIP-155 transactions\n * Ref: https://eips.ethereum.org/EIPS/eip-155\n *\n * @internal\n * @param provider\n */\nasync function isEIP155Enforced(provider) {\n  try {\n    // TODO: Find a better way to check this.\n\n    // Send a random transaction of legacy type (pre-eip-155).\n    // It will fail. Parse the error message to check whether eip-155 is enforced.\n    await provider.sendTransaction(\"0xf8a58085174876e800830186a08080b853604580600e600039806000f350fe7fffffffffffffffafffffffffffffffffffffffffffffffffffffffffffffffe03601600081602082378035828234f58015156039578182fd5b8082525050506014600cf31ba02222222222222222222222222222222222222222222222222222222222222222a02222222222222222222222222222222222222222222222222222222222222222\");\n  } catch (e) {\n    const errorMsg = e.toString().toLowerCase();\n    const errorJson = JSON.stringify(e).toLowerCase();\n    if (matchError(errorMsg) || matchError(errorJson)) {\n      return true;\n    }\n    return false;\n  }\n  return false;\n}\n\n/**\n * Generate a transaction to be sent with a keyless signer.\n *\n * @public\n * @param transaction: Unsigned transaction object\n * @param signature: Signature bytes\n */\nfunction getKeylessTxn(transaction, signature) {\n  // 1. Create serialized txn string\n  const digest = utils.arrayify(utils.keccak256(utils.serializeTransaction(transaction)));\n\n  // 2. Determine signer address from custom signature + txn\n  const signer = utils.recoverAddress(digest, signature);\n\n  // 3. Create the signed serialized txn string.\n  // To be sent directly to the chain using a provider.\n  const signedSerializedTx = utils.serializeTransaction(transaction, signature);\n  return {\n    signer: signer,\n    transaction: signedSerializedTx\n  };\n}\n\n/**\n *\n * @public\n * @param transaction: Unsigned transaction object\n * @param signature: Signature bytes\n */\nfunction getCreate2FactoryDeploymentInfo(chainId, gasPrice) {\n  const signature = utils.joinSignature(SIGNATURE);\n  const deploymentTransaction = getKeylessTxn({\n    gasPrice: gasPrice ? gasPrice : 100 * 10 ** 9,\n    gasLimit: 100000,\n    nonce: 0,\n    data: CREATE2_FACTORY_BYTECODE,\n    chainId: chainId\n  }, signature);\n  const create2FactoryAddress = utils.getContractAddress({\n    from: deploymentTransaction.signer,\n    nonce: 0\n  });\n  return {\n    ...deploymentTransaction,\n    deployment: create2FactoryAddress\n  };\n}\n\n/**\n * Get the CREATE2 Factory address for a network\n * Source code of the factory:\n * https://github.com/Arachnid/deterministic-deployment-proxy/blob/master/source/deterministic-deployment-proxy.yul\n *\n * @internal\n * @param provider\n */\nasync function getCreate2FactoryAddress(provider) {\n  const commonFactoryExists = await isContractDeployed(COMMON_FACTORY, provider);\n  if (commonFactoryExists) {\n    return COMMON_FACTORY;\n  }\n  const enforceEip155 = await isEIP155Enforced(provider);\n  const networkId = (await provider.getNetwork()).chainId;\n  const chainId = enforceEip155 ? networkId : 0;\n  const deploymentInfo = CUSTOM_GAS_FOR_CHAIN[networkId] ? getCreate2FactoryDeploymentInfo(chainId, CUSTOM_GAS_FOR_CHAIN[networkId].gasPrice) : getCreate2FactoryDeploymentInfo(chainId);\n  return deploymentInfo.deployment;\n}\n\nconst bytecode = \"0x60606040526040805190810160405280600d81526020017f57726170706564204574686572000000000000000000000000000000000000008152506000908051906020019061004f9291906100c8565b506040805190810160405280600481526020017f57455448000000000000000000000000000000000000000000000000000000008152506001908051906020019061009b9291906100c8565b506012600260006101000a81548160ff021916908360ff16021790555034156100c357600080fd5b61016d565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061010957805160ff1916838001178555610137565b82800160010185558215610137579182015b8281111561013657825182559160200191906001019061011b565b5b5090506101449190610148565b5090565b61016a91905b8082111561016657600081600090555060010161014e565b5090565b90565b610c348061017c6000396000f3006060604052600436106100af576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100b9578063095ea7b31461014757806318160ddd146101a157806323b872dd146101ca5780632e1a7d4d14610243578063313ce5671461026657806370a082311461029557806395d89b41146102e2578063a9059cbb14610370578063d0e30db0146103ca578063dd62ed3e146103d4575b6100b7610440565b005b34156100c457600080fd5b6100cc6104dd565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561010c5780820151818401526020810190506100f1565b50505050905090810190601f1680156101395780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561015257600080fd5b610187600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061057b565b604051808215151515815260200191505060405180910390f35b34156101ac57600080fd5b6101b461066d565b6040518082815260200191505060405180910390f35b34156101d557600080fd5b610229600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061068c565b604051808215151515815260200191505060405180910390f35b341561024e57600080fd5b61026460048080359060200190919050506109d9565b005b341561027157600080fd5b610279610b05565b604051808260ff1660ff16815260200191505060405180910390f35b34156102a057600080fd5b6102cc600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610b18565b6040518082815260200191505060405180910390f35b34156102ed57600080fd5b6102f5610b30565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561033557808201518184015260208101905061031a565b50505050905090810190601f1680156103625780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561037b57600080fd5b6103b0600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610bce565b604051808215151515815260200191505060405180910390f35b6103d2610440565b005b34156103df57600080fd5b61042a600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610be3565b6040518082815260200191505060405180910390f35b34600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055503373ffffffffffffffffffffffffffffffffffffffff167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c346040518082815260200191505060405180910390a2565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105735780601f1061054857610100808354040283529160200191610573565b820191906000526020600020905b81548152906001019060200180831161055657829003601f168201915b505050505081565b600081600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60003073ffffffffffffffffffffffffffffffffffffffff1631905090565b600081600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156106dc57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141580156107b457507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414155b156108cf5781600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561084457600080fd5b81600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055505b81600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b80600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610a2757600080fd5b80600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501515610ab457600080fd5b3373ffffffffffffffffffffffffffffffffffffffff167f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b65826040518082815260200191505060405180910390a250565b600260009054906101000a900460ff1681565b60036020528060005260406000206000915090505481565b60018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610bc65780601f10610b9b57610100808354040283529160200191610bc6565b820191906000526020600020905b815481529060010190602001808311610ba957829003601f168201915b505050505081565b6000610bdb33848461068c565b905092915050565b60046020528160005260406000206020528060005260406000206000915091505054815600a165627a7a72305820deb4c2ccab3c2fdca32ab3f46728389c2fe2c165d5fafa07661e4e004f6c344a0029\";\n\nconst ContractPublisher_address = \"0x664244560eBa21Bf82d7150C791bE1AbcD5B4cd7\"; // Polygon only\n\n/**\n * @internal\n */\nfunction getContractPublisherAddress() {\n  return getProcessEnv(\"contractPublisherAddress\", ContractPublisher_address);\n}\n\nconst DropErc721ContractInput = /* @__PURE__ */CommonContractSchema.merge(CommonRoyaltySchema).merge(MerkleSchema).merge(CommonSymbolSchema);\nconst DropErc721ContractOutput = /* @__PURE__ */CommonContractOutputSchema.merge(CommonRoyaltySchema).merge(MerkleSchema).merge(CommonSymbolSchema);\nconst DropErc721ContractDeploy = /* @__PURE__ */DropErc721ContractInput.merge(CommonPlatformFeeSchema).merge(CommonPrimarySaleSchema).merge(CommonTrustedForwarderSchema);\nconst DropErc721ContractSchema = {\n  deploy: DropErc721ContractDeploy,\n  output: DropErc721ContractOutput,\n  input: DropErc721ContractInput\n};\n\nconst DropErc1155ContractInput = /* @__PURE__ */CommonContractSchema.merge(CommonRoyaltySchema).merge(MerkleSchema).merge(CommonSymbolSchema);\nconst DropErc1155ContractOutput = /* @__PURE__ */CommonContractOutputSchema.merge(CommonRoyaltySchema).merge(MerkleSchema).merge(CommonSymbolSchema);\nconst DropErc1155ContractDeploy = /* @__PURE__ */DropErc1155ContractInput.merge(CommonPlatformFeeSchema).merge(CommonPrimarySaleSchema).merge(CommonTrustedForwarderSchema);\nconst DropErc1155ContractSchema = {\n  deploy: DropErc1155ContractDeploy,\n  output: DropErc1155ContractOutput,\n  input: DropErc1155ContractInput\n};\n\nconst MarketplaceContractInput = CommonContractSchema;\nconst MarketplaceContractOutput = CommonContractOutputSchema;\nconst MarketplaceContractDeploy = /* @__PURE__ */MarketplaceContractInput.merge(CommonPlatformFeeSchema).merge(CommonTrustedForwarderSchema);\nconst MarketplaceContractSchema = {\n  deploy: MarketplaceContractDeploy,\n  output: MarketplaceContractOutput,\n  input: MarketplaceContractInput\n};\n\nconst PackContractInput = /* @__PURE__ */CommonContractSchema.merge(CommonRoyaltySchema).merge(CommonSymbolSchema);\nconst PackContractOutput = /* @__PURE__ */CommonContractOutputSchema.merge(CommonRoyaltySchema).merge(CommonSymbolSchema);\nconst PackContractDeploy = /* @__PURE__ */PackContractInput.merge(CommonPlatformFeeSchema).merge(CommonTrustedForwarderSchema);\nconst PackContractSchema = {\n  deploy: PackContractDeploy,\n  output: PackContractOutput,\n  input: PackContractInput\n};\n\nconst SplitRecipientInputSchema = /* @__PURE__ */(() => z.object({\n  address: AddressOrEnsSchema,\n  sharesBps: BasisPointsSchema.gt(0, \"Shares must be greater than 0\")\n}))();\nconst SplitRecipientOuputSchema = /* @__PURE__ */SplitRecipientInputSchema.extend({\n  address: AddressOrEnsSchema,\n  sharesBps: BasisPointsSchema\n});\nconst SplitsContractInput = /* @__PURE__ */(() => CommonContractSchema.extend({\n  recipients: z.array(SplitRecipientInputSchema).default([]).superRefine((val, context) => {\n    const addressMap = {};\n    let totalShares = 0;\n    for (let index = 0; index < val.length; index++) {\n      const entry = val[index];\n      if (addressMap[entry.address]) {\n        context.addIssue({\n          code: z.ZodIssueCode.custom,\n          message: `Duplicate address.`,\n          path: [index, `address`]\n        });\n      }\n      addressMap[entry.address] = true;\n      totalShares += entry.sharesBps;\n      if (totalShares > 10000) {\n        context.addIssue({\n          code: z.ZodIssueCode.custom,\n          message: `Total shares cannot go over 100%.`,\n          path: [index, `sharesBps`]\n        });\n      }\n    }\n    if (totalShares !== 10000) {\n      context.addIssue({\n        code: z.ZodIssueCode.custom,\n        message: `Total shares need to add up to 100%. Total shares are currently ${totalShares / 100}%`,\n        path: []\n      });\n    }\n  })\n}))();\nconst SplitsContractOutput = /* @__PURE__ */(() => CommonContractOutputSchema.extend({\n  recipients: z.array(SplitRecipientOuputSchema)\n}))();\nconst SplitsContractDeploy = /* @__PURE__ */SplitsContractInput.merge(SplitsContractInput).merge(CommonTrustedForwarderSchema);\nconst SplitsContractSchema = {\n  deploy: SplitsContractDeploy,\n  output: SplitsContractOutput,\n  input: SplitsContractInput\n};\n\nconst TokenErc20ContractInput = /* @__PURE__ */CommonContractSchema.merge(CommonSymbolSchema);\nconst TokenErc20ContractOutput = /* @__PURE__ */CommonContractOutputSchema.merge(CommonSymbolSchema);\nconst TokenErc20ContractDeploy = /* @__PURE__ */TokenErc20ContractInput.merge(CommonPlatformFeeSchema).merge(CommonPrimarySaleSchema).merge(CommonTrustedForwarderSchema);\nconst TokenErc20ContractSchema = {\n  deploy: TokenErc20ContractDeploy,\n  output: TokenErc20ContractOutput,\n  input: TokenErc20ContractInput\n};\n\nconst TokenErc721ContractInput = /* @__PURE__ */CommonContractSchema.merge(CommonRoyaltySchema).merge(CommonSymbolSchema);\nconst TokenErc721ContractOutput = /* @__PURE__ */CommonContractOutputSchema.merge(CommonRoyaltySchema).merge(CommonSymbolSchema);\nconst TokenErc721ContractDeploy = /* @__PURE__ */TokenErc721ContractInput.merge(CommonPlatformFeeSchema).merge(CommonPrimarySaleSchema).merge(CommonTrustedForwarderSchema);\nconst TokenErc721ContractSchema = {\n  deploy: TokenErc721ContractDeploy,\n  output: TokenErc721ContractOutput,\n  input: TokenErc721ContractInput\n};\n\nconst TokenErc1155ContractInput = /* @__PURE__ */CommonContractSchema.merge(CommonRoyaltySchema).merge(CommonSymbolSchema);\nconst TokenErc1155ContractOutput = /* @__PURE__ */CommonContractOutputSchema.merge(CommonRoyaltySchema).merge(CommonSymbolSchema);\nconst TokenErc1155ContractDeploy = /* @__PURE__ */TokenErc1155ContractInput.merge(CommonPlatformFeeSchema).merge(CommonPrimarySaleSchema).merge(CommonTrustedForwarderSchema);\nconst TokenErc1155ContractSchema = {\n  deploy: TokenErc1155ContractDeploy,\n  output: TokenErc1155ContractOutput,\n  input: TokenErc1155ContractInput\n};\n\nconst VoteSettingsInputSchema = /* @__PURE__ */(() => z.object({\n  voting_delay_in_blocks: z.number().min(0).default(0),\n  voting_period_in_blocks: z.number().min(1).default(1),\n  voting_token_address: AddressOrEnsSchema,\n  voting_quorum_fraction: PercentSchema.default(0),\n  proposal_token_threshold: BigNumberishSchema.default(1)\n}))();\nconst VoteSettingsOuputSchema = /* @__PURE__ */VoteSettingsInputSchema.extend({\n  proposal_token_threshold: BigNumberSchema\n});\nconst VoteContractInput = /* @__PURE__ */CommonContractSchema.merge(VoteSettingsInputSchema);\nconst VoteContractOutput = /* @__PURE__ */CommonContractOutputSchema.merge(VoteSettingsOuputSchema);\nconst VoteContractDeploy = /* @__PURE__ */VoteContractInput.merge(CommonTrustedForwarderSchema);\nconst VoteContractSchema = {\n  deploy: VoteContractDeploy,\n  output: VoteContractOutput,\n  input: VoteContractInput\n};\n\nasync function resolveAddress(addressOrEns) {\n  return AddressOrEnsSchema.parseAsync(addressOrEns);\n}\n\n/**\n * Fetch and parse the full metadata AFTER publishing a contract, with all the extra information (version, readme, etc)\n * @internal\n * @param publishMetadataUri\n * @param storage\n */\nasync function fetchExtendedReleaseMetadata(publishMetadataUri, storage) {\n  const meta = await (await storage.download(publishMetadataUri)).text();\n  return FullPublishMetadataSchemaOutput.parse(JSON.parse(meta));\n}\n\n/**\n * @internal\n * @param publishMetadataUri\n * @param storage\n */\nasync function fetchRawPredeployMetadata(publishMetadataUri, storage) {\n  return PreDeployMetadata.parse(JSON.parse(await (await storage.download(publishMetadataUri)).text()));\n}\n\n/**\n * Fetch the metadata coming from CLI, this is before deploying or releasing the contract.\n * @internal\n * @param publishMetadataUri\n * @param storage\n */\nasync function fetchPreDeployMetadata(publishMetadataUri, storage) {\n  const rawMeta = await fetchRawPredeployMetadata(publishMetadataUri, storage);\n  const deployBytecode = await (await storage.download(rawMeta.bytecodeUri)).text();\n  const parsedMeta = await fetchContractMetadata(rawMeta.metadataUri, storage);\n  return PreDeployMetadataFetchedSchema.parse({\n    ...rawMeta,\n    ...parsedMeta,\n    bytecode: deployBytecode\n  });\n}\n\nconst deployMetadataCache = {};\nasync function fetchAndCacheDeployMetadata(publishMetadataUri, storage) {\n  if (deployMetadataCache[publishMetadataUri]) {\n    return deployMetadataCache[publishMetadataUri];\n  }\n  const compilerMetadata = await fetchPreDeployMetadata(publishMetadataUri, storage);\n  let extendedMetadata;\n  try {\n    extendedMetadata = await fetchExtendedReleaseMetadata(publishMetadataUri, storage);\n  } catch (e) {\n    // not a factory deployment, ignore\n  }\n  const data = {\n    compilerMetadata,\n    extendedMetadata\n  };\n  deployMetadataCache[publishMetadataUri] = data;\n  return data;\n}\n\nconst AddressZero = \"0x0000000000000000000000000000000000000000\";\n\nconst TWRegistry_address = \"0x7c487845f98938Bb955B1D5AD069d9a30e4131fd\";\nconst TWFactory_address = \"0x5DBC7B840baa9daBcBe9D2492E45D7244B54A2A0\";\n\n/**\n * @internal\n */\nconst OZ_DEFENDER_FORWARDER_ADDRESS = \"0xc82BbE41f2cF04e3a8efA18F7032BDD7f6d98a81\";\n\n/**\n * @internal\n */\nconst CONTRACT_ADDRESSES = {\n  [ChainId.Mainnet]: {\n    openzeppelinForwarder: OZ_DEFENDER_FORWARDER_ADDRESS,\n    openzeppelinForwarderEOA: \"0x76ce2CB1Ae48Fa067f4fb8c5f803111AE0B24BEA\",\n    biconomyForwarder: \"0x84a0856b038eaAd1cC7E297cF34A7e72685A8693\",\n    twFactory: TWFactory_address,\n    twRegistry: TWRegistry_address,\n    twBYOCRegistry: AddressZero\n  },\n  [ChainId.Goerli]: {\n    openzeppelinForwarder: \"0x5001A14CA6163143316a7C614e30e6041033Ac20\",\n    openzeppelinForwarderEOA: \"0xe73c50cB9c5B378627ff625BB6e6725A4A5D65d2\",\n    biconomyForwarder: \"0xE041608922d06a4F26C0d4c27d8bCD01daf1f792\",\n    twFactory: TWFactory_address,\n    twRegistry: TWRegistry_address,\n    twBYOCRegistry: \"0xB1Bd9d7942A250BA2Dce27DD601F2ED4211A60C4\"\n  },\n  [ChainId.Polygon]: {\n    openzeppelinForwarder: OZ_DEFENDER_FORWARDER_ADDRESS,\n    openzeppelinForwarderEOA: \"0x4f247c69184ad61036EC2Bb3213b69F10FbEDe1F\",\n    biconomyForwarder: \"0x86C80a8aa58e0A4fa09A69624c31Ab2a6CAD56b8\",\n    twFactory: TWFactory_address,\n    twRegistry: TWRegistry_address,\n    twBYOCRegistry: \"0x308473Be900F4185A56587dE54bDFF5E8f7a6AE7\"\n  },\n  [ChainId.Mumbai]: {\n    openzeppelinForwarder: OZ_DEFENDER_FORWARDER_ADDRESS,\n    openzeppelinForwarderEOA: \"0xb1A2883fc4d287d9cB8Dbb96cFF60C76BEf2D250\",\n    biconomyForwarder: \"0x9399BB24DBB5C4b782C70c2969F58716Ebbd6a3b\",\n    twFactory: TWFactory_address,\n    twRegistry: TWRegistry_address,\n    twBYOCRegistry: \"0x3F17972CB27506eb4a6a3D59659e0B57a43fd16C\"\n  },\n  [ChainId.Avalanche]: {\n    openzeppelinForwarder: OZ_DEFENDER_FORWARDER_ADDRESS,\n    openzeppelinForwarderEOA: \"0xb1A2883fc4d287d9cB8Dbb96cFF60C76BEf2D250\",\n    biconomyForwarder: \"0x64CD353384109423a966dCd3Aa30D884C9b2E057\",\n    twFactory: TWFactory_address,\n    twRegistry: TWRegistry_address,\n    twBYOCRegistry: AddressZero\n  },\n  [ChainId.AvalancheFujiTestnet]: {\n    openzeppelinForwarder: OZ_DEFENDER_FORWARDER_ADDRESS,\n    openzeppelinForwarderEOA: \"0xe73c50cB9c5B378627ff625BB6e6725A4A5D65d2\",\n    biconomyForwarder: \"0x6271Ca63D30507f2Dcbf99B52787032506D75BBF\",\n    twFactory: TWFactory_address,\n    twRegistry: TWRegistry_address,\n    twBYOCRegistry: \"0x3E6eE864f850F5e5A98bc950B68E181Cf4010F23\"\n  },\n  [ChainId.Fantom]: {\n    openzeppelinForwarder: OZ_DEFENDER_FORWARDER_ADDRESS,\n    openzeppelinForwarderEOA: \"0xb1A2883fc4d287d9cB8Dbb96cFF60C76BEf2D250\",\n    biconomyForwarder: \"0x64CD353384109423a966dCd3Aa30D884C9b2E057\",\n    twFactory: \"0x97EA0Fcc552D5A8Fb5e9101316AAd0D62Ea0876B\",\n    twRegistry: TWRegistry_address,\n    twBYOCRegistry: AddressZero\n  },\n  [ChainId.FantomTestnet]: {\n    openzeppelinForwarder: OZ_DEFENDER_FORWARDER_ADDRESS,\n    openzeppelinForwarderEOA: \"0x42D3048b595B6e1c28a588d70366CcC2AA4dB47b\",\n    biconomyForwarder: \"0x69FB8Dca8067A5D38703b9e8b39cf2D51473E4b4\",\n    twFactory: TWFactory_address,\n    twRegistry: TWRegistry_address,\n    twBYOCRegistry: \"0x3E6eE864f850F5e5A98bc950B68E181Cf4010F23\"\n  },\n  [ChainId.Arbitrum]: {\n    openzeppelinForwarder: \"0x4a8AC7f22DeD2CF923A51e4A1c67490bd8868add\",\n    openzeppelinForwarderEOA: \"0x4f247c69184ad61036EC2Bb3213b69F10FbEDe1F\",\n    biconomyForwarder: \"0xfe0fa3C06d03bDC7fb49c892BbB39113B534fB57\",\n    twFactory: \"0xd24b3de085CFd8c54b94feAD08a7962D343E6DE0\",\n    twRegistry: TWRegistry_address,\n    twBYOCRegistry: AddressZero\n  },\n  [ChainId.ArbitrumGoerli]: {\n    openzeppelinForwarder: \"0x8cbc8B5d71702032904750A66AEfE8B603eBC538\",\n    openzeppelinForwarderEOA: \"0x119704314Ef304EaAAE4b3c7C9ABd59272A28310\",\n    biconomyForwarder: AddressZero,\n    twFactory: \"0xd24b3de085CFd8c54b94feAD08a7962D343E6DE0\",\n    twRegistry: TWRegistry_address,\n    twBYOCRegistry: AddressZero\n  },\n  [ChainId.Optimism]: {\n    openzeppelinForwarder: \"0xd85da690EF288A6976DE0E85Fb2Aad512eBAfbf7\",\n    openzeppelinForwarderEOA: \"0x7e80648EB2071E26937F9D42A513ccf4815fc702\",\n    biconomyForwarder: \"0xefba8a2a82ec1fb1273806174f5e28fbb917cf95\",\n    twFactory: \"0xd24b3de085CFd8c54b94feAD08a7962D343E6DE0\",\n    twRegistry: TWRegistry_address,\n    twBYOCRegistry: AddressZero\n  },\n  [ChainId.OptimismGoerli]: {\n    openzeppelinForwarder: \"0x8cbc8B5d71702032904750A66AEfE8B603eBC538\",\n    openzeppelinForwarderEOA: \"0x119704314Ef304EaAAE4b3c7C9ABd59272A28310\",\n    biconomyForwarder: AddressZero,\n    twFactory: \"0xd24b3de085CFd8c54b94feAD08a7962D343E6DE0\",\n    twRegistry: TWRegistry_address,\n    twBYOCRegistry: AddressZero\n  },\n  [ChainId.BinanceSmartChainMainnet]: {\n    openzeppelinForwarder: \"0x7C4717039B89d5859c4Fbb85EDB19A6E2ce61171\",\n    openzeppelinForwarderEOA: \"0xE8dd2Ff0212F86d3197b4AfDC6dAC6ac47eb10aC\",\n    biconomyForwarder: \"0x86C80a8aa58e0A4fa09A69624c31Ab2a6CAD56b8\",\n    twBYOCRegistry: AddressZero,\n    twFactory: \"0xd24b3de085CFd8c54b94feAD08a7962D343E6DE0\",\n    twRegistry: TWRegistry_address\n  },\n  [ChainId.BinanceSmartChainTestnet]: {\n    openzeppelinForwarder: \"0x44bE9D54B9C8b5e57a3325E8Ec9154640e7c6955\",\n    openzeppelinForwarderEOA: \"0x7e80648EB2071E26937F9D42A513ccf4815fc702\",\n    biconomyForwarder: \"0x61456BF1715C1415730076BB79ae118E806E74d2\",\n    twBYOCRegistry: AddressZero,\n    twFactory: \"0xd24b3de085CFd8c54b94feAD08a7962D343E6DE0\",\n    twRegistry: TWRegistry_address\n  },\n  [ChainId.Hardhat]: {\n    openzeppelinForwarder: AddressZero,\n    openzeppelinForwarderEOA: AddressZero,\n    biconomyForwarder: AddressZero,\n    twFactory: AddressZero,\n    twRegistry: AddressZero,\n    twBYOCRegistry: AddressZero\n  },\n  [ChainId.Localhost]: {\n    openzeppelinForwarder: AddressZero,\n    openzeppelinForwarderEOA: AddressZero,\n    biconomyForwarder: AddressZero,\n    twFactory: AddressZero,\n    twRegistry: AddressZero,\n    twBYOCRegistry: AddressZero\n  }\n};\n\n/**\n * @internal\n */\nfunction getContractAddressByChainId(chainId, contractName) {\n  // for testing only\n  if (chainId === ChainId.Hardhat || chainId === ChainId.Localhost) {\n    if (contractName === \"twFactory\") {\n      return getProcessEnv(\"factoryAddress\");\n    } else if (contractName === \"twRegistry\") {\n      return getProcessEnv(\"registryAddress\");\n    } else {\n      return AddressZero;\n    }\n  }\n  // real output here\n  return CONTRACT_ADDRESSES[chainId]?.[contractName];\n}\n\n/**\n * @internal\n */\n\n/**\n * @internal\n */\nconst InterfaceId_IERC721 = /* @__PURE__ */utils.arrayify(\"0x80ac58cd\");\n\n/**\n * @internal\n */\nconst InterfaceId_IERC1155 = /* @__PURE__ */utils.arrayify(\"0xd9b67a26\");\n\n/**\n * @public\n */\nlet EventType = /*#__PURE__*/function (EventType) {\n  EventType[\"Transaction\"] = \"transaction\";\n  EventType[\"Signature\"] = \"signature\";\n  return EventType;\n}({});\n\nconst THIRDWEB_DEPLOYER = \"0xdd99b75f095d0c4d5112aCe938e4e6ed962fb024\";\nasync function fetchPublishedContractFromPolygon(publisherAddress, contractName) {\n  let version = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"latest\";\n  let storage = arguments.length > 3 ? arguments[3] : undefined;\n  let clientId = arguments.length > 4 ? arguments[4] : undefined;\n  let secretKey = arguments.length > 5 ? arguments[5] : undefined;\n  const polygonChain = getSupportedChains().find(c => c.chainId === 137);\n  const chain = polygonChain || Polygon;\n  const publisher = await resolveAddress(publisherAddress);\n  const contract = new Contract(getContractPublisherAddress(), ContractPublisherAbi, getChainProvider(chain, {\n    clientId,\n    secretKey\n  }));\n  let publishedContract;\n  if (!version || version === \"latest\") {\n    const model = await contract.getPublishedContract(publisher, contractName);\n    publishedContract = PublishedContractSchema.parse({\n      id: model.contractId,\n      timestamp: model.publishTimestamp,\n      metadataUri: model.publishMetadataUri\n    });\n  } else {\n    const allVersions = (await contract.getPublishedContractVersions(publisher, contractName)).map(c => {\n      return PublishedContractSchema.parse({\n        id: c.contractId,\n        timestamp: c.publishTimestamp,\n        metadataUri: c.publishMetadataUri\n      });\n    });\n\n    // get the metadata for each version\n    const versionMetadata = await Promise.all(allVersions.map(async c => {\n      return {\n        name: c.id,\n        publishedTimestamp: c.timestamp,\n        publishedMetadata: await fetchAndCacheDeployMetadata(c.metadataUri, storage)\n      };\n    }));\n    // find the version that matches the version string\n    const versionMatch = versionMetadata.find(metadata => metadata.publishedMetadata.extendedMetadata?.version === version);\n    invariant(versionMatch, \"Contract version not found\");\n    // match the version back to the contract based on the published timestamp\n    publishedContract = allVersions.find(c => c.timestamp === versionMatch.publishedTimestamp);\n  }\n  if (!publishedContract) {\n    throw new Error(`No published contract found for ${contractName} at version by '${THIRDWEB_DEPLOYER}'`);\n  }\n  return publishedContract;\n}\n\n/**\n * Generate salt for deployment with Create2\n * Note: Salt component is generated by appending `tw` (thirdweb) to the bytecode\n *\n * @internal\n * @param bytecode: Creation bytecode of the contract to deploy\n */\nfunction getSaltHash(bytecode) {\n  const bytecodePrefixed = bytecode.startsWith(\"0x\") ? bytecode : `0x${bytecode}`;\n  const bytecodeHash = utils.id(bytecodePrefixed);\n  const salt = `tw.${bytecodeHash}`;\n  const saltHash = utils.id(salt);\n  return saltHash;\n}\n\n/**\n *\n * Construct init-bytecode, packed with salthash.\n * This hex data is intended to be sent to the CREATE2 factory address\n *\n * @internal\n * @param bytecode: Creation bytecode of the contract to deploy\n * @param encodedArgs: Abi-encoded constructor params\n */\nfunction getInitBytecodeWithSalt(bytecode, encodedArgs, salt) {\n  const bytecodePrefixed = bytecode.startsWith(\"0x\") ? bytecode : `0x${bytecode}`;\n  const saltHash = salt ? utils.id(salt) : getSaltHash(bytecodePrefixed);\n  const initBytecodeWithSalt = utils.solidityPack([\"bytes32\", \"bytes\", \"bytes\"], [saltHash, bytecodePrefixed, encodedArgs]);\n  return initBytecodeWithSalt;\n}\n\n/**\n * Pre-compute a contract's deployment address for a CREATE2 deployment.\n *\n * @public\n * @param bytecode: Creation bytecode of the contract to deploy\n * @param encodedArgs: Abi-encoded constructor params\n * @param create2FactoryAddress\n */\nfunction computeDeploymentAddress(bytecode, encodedArgs, create2FactoryAddress, salt) {\n  const bytecodePrefixed = bytecode.startsWith(\"0x\") ? bytecode : `0x${bytecode}`;\n  const saltHash = salt ? utils.id(salt) : getSaltHash(bytecodePrefixed);\n\n  // 1. create init bytecode hash with contract's bytecode and encoded args\n  const initBytecode = utils.solidityPack([\"bytes\", \"bytes\"], [bytecodePrefixed, encodedArgs]);\n\n  // 2. abi-encode pack the deployer address, salt, and bytecode hash\n  const deployInfoPacked = utils.solidityPack([\"bytes1\", \"address\", \"bytes32\", \"bytes32\"], [\"0xff\", create2FactoryAddress, saltHash, utils.solidityKeccak256([\"bytes\"], [initBytecode])]);\n\n  // 3. hash the packed deploy info\n  const hashedDeployInfo = utils.solidityKeccak256([\"bytes\"], [deployInfoPacked]);\n\n  // 4. return last 20 bytes (40 characters) of the hash -- this is the predicted address\n  return `0x${hashedDeployInfo.slice(26)}`;\n}\n\n/**\n *\n * @param abi\n * @returns\n * @internal\n */\nfunction extractConstructorParamsFromAbi(abi) {\n  const parsedAbi = AbiSchema.parse(abi || []);\n  for (const input of parsedAbi) {\n    if (input.type === \"constructor\") {\n      return input.inputs || [];\n    }\n  }\n  return [];\n}\n\nconst caches = {\n  deploymentPresets: {}\n};\n\n/**\n * Returns the RoyaltyEngineV1 address for a given chain\n * @param chainId - the chain id\n * @public\n */\nfunction getRoyaltyEngineV1ByChainId(chainId) {\n  return ROYALTY_ENGINE_V1_ADDRESS[chainId] || constants.AddressZero;\n}\nconst ROYALTY_ENGINE_V1_ADDRESS = {\n  [ChainId.Mainnet]: \"0x0385603ab55642cb4dd5de3ae9e306809991804f\",\n  [ChainId.Goerli]: \"0xEF770dFb6D5620977213f55f99bfd781D04BBE15\",\n  [ChainId.BinanceSmartChainMainnet]: \"0xEF770dFb6D5620977213f55f99bfd781D04BBE15\",\n  [ChainId.Polygon]: \"0x28EdFcF0Be7E86b07493466e7631a213bDe8eEF2\",\n  [ChainId.Mumbai]: \"0x0a01E11887f727D1b1Cd81251eeEE9BEE4262D07\",\n  [ChainId.Avalanche]: \"0xEF770dFb6D5620977213f55f99bfd781D04BBE15\",\n  [ChainId.Optimism]: \"0xEF770dFb6D5620977213f55f99bfd781D04BBE15\",\n  [ChainId.Arbitrum]: \"0xEF770dFb6D5620977213f55f99bfd781D04BBE15\"\n};\n\nasync function computeDeploymentInfo(contractType, provider, storage, create2Factory, contractOptions, clientId, secretKey) {\n  const contractName = contractOptions && contractOptions.contractName;\n  const version = contractOptions && contractOptions.version;\n  let publisherAddress = contractOptions && contractOptions.publisherAddress;\n  let metadata = contractOptions && contractOptions.metadata;\n  invariant(contractName || metadata, \"Require contract name or metadata\");\n  if (contractName && caches.deploymentPresets[contractName]) {\n    return caches.deploymentPresets[contractName];\n  }\n\n  // Different treatment for WETH contract\n  if (contractName === \"WETH9\") {\n    const address = computeDeploymentAddress(bytecode, [], create2Factory);\n    const contractDeployed = await isContractDeployed(address, provider);\n    let initBytecodeWithSalt = \"\";\n    if (!contractDeployed) {\n      initBytecodeWithSalt = getInitBytecodeWithSalt(bytecode, []);\n    }\n    return {\n      name: contractName,\n      type: contractType,\n      transaction: {\n        predictedAddress: address,\n        to: create2Factory,\n        data: initBytecodeWithSalt\n      }\n    };\n  }\n  if (!metadata) {\n    invariant(contractName, \"Require contract name\");\n    if (!publisherAddress) {\n      publisherAddress = THIRDWEB_DEPLOYER;\n    }\n    const publishedContract = await fetchPublishedContractFromPolygon(publisherAddress, contractName, version, storage, clientId, secretKey);\n    metadata = (await fetchAndCacheDeployMetadata(publishedContract.metadataUri, storage)).compilerMetadata;\n  }\n  const encodedArgs = await encodeConstructorParamsForImplementation(metadata, provider, storage, create2Factory, contractOptions?.constructorParams, clientId, secretKey);\n  const address = computeDeploymentAddress(metadata.bytecode, encodedArgs, create2Factory);\n  const contractDeployed = await isContractDeployed(address, provider);\n  let initBytecodeWithSalt = \"\";\n  if (!contractDeployed) {\n    initBytecodeWithSalt = getInitBytecodeWithSalt(metadata.bytecode, encodedArgs);\n  }\n  return {\n    name: contractName,\n    type: contractType,\n    transaction: {\n      predictedAddress: address,\n      to: create2Factory,\n      data: initBytecodeWithSalt\n    },\n    encodedArgs\n  };\n}\n\n/**\n * @internal\n *\n * Determine constructor params required by an implementation contract.\n * Return abi-encoded params.\n */\nasync function encodeConstructorParamsForImplementation(compilerMetadata, provider, storage, create2Factory, constructorParamMap, clientId, secretKey) {\n  const constructorParams = extractConstructorParamsFromAbi(compilerMetadata.abi);\n  const constructorParamTypes = constructorParams.map(p => {\n    if (p.type === \"tuple[]\") {\n      return utils.ParamType.from(p);\n    } else {\n      return p.type;\n    }\n  });\n  const constructorParamValues = await Promise.all(constructorParams.map(async p => {\n    if (constructorParamMap && constructorParamMap[p.name]) {\n      if (constructorParamMap[p.name].type) {\n        invariant(constructorParamMap[p.name].type === p.type, `Provided type ${constructorParamMap[p.name].type} doesn't match the actual type ${p.type} from Abi`);\n      }\n      return constructorParamMap[p.name].value;\n    }\n    if (p.name && p.name.includes(\"nativeTokenWrapper\")) {\n      const chainId = (await provider.getNetwork()).chainId;\n      let nativeTokenWrapperAddress = getNativeTokenByChainId(chainId).wrapped.address;\n      if (nativeTokenWrapperAddress === constants.AddressZero) {\n        const deploymentInfo = await computeDeploymentInfo(\"infra\", provider, storage, create2Factory, {\n          contractName: \"WETH9\"\n        }, clientId, secretKey);\n        if (!caches.deploymentPresets[\"WETH9\"]) {\n          caches.deploymentPresets[\"WETH9\"] = deploymentInfo;\n        }\n        nativeTokenWrapperAddress = deploymentInfo.transaction.predictedAddress;\n      }\n      return nativeTokenWrapperAddress;\n    } else if (p.name && p.name.includes(\"trustedForwarder\")) {\n      if (compilerMetadata.name === \"Pack\") {\n        // EOAForwarder for Pack\n        const deploymentInfo = await computeDeploymentInfo(\"infra\", provider, storage, create2Factory, {\n          contractName: \"ForwarderEOAOnly\"\n        }, clientId, secretKey);\n        if (!caches.deploymentPresets[\"ForwarderEOAOnly\"]) {\n          caches.deploymentPresets[\"ForwarderEOAOnly\"] = deploymentInfo;\n        }\n        return deploymentInfo.transaction.predictedAddress;\n      }\n      const deploymentInfo = await computeDeploymentInfo(\"infra\", provider, storage, create2Factory, {\n        contractName: \"Forwarder\"\n      }, clientId, secretKey);\n      if (!caches.deploymentPresets[\"Forwarder\"]) {\n        caches.deploymentPresets[\"Forwarder\"] = deploymentInfo;\n      }\n      return deploymentInfo.transaction.predictedAddress;\n    } else if (p.name && p.name.includes(\"royaltyEngineAddress\")) {\n      const chainId = (await provider.getNetwork()).chainId;\n      return getRoyaltyEngineV1ByChainId(chainId);\n    } else {\n      throw new Error(\"Can't resolve constructor arguments\");\n    }\n  }));\n  const encodedArgs = utils.defaultAbiCoder.encode(constructorParamTypes, constructorParamValues);\n  return encodedArgs;\n}\n\n/**\n *\n * @internal\n * @param provider\n * @param storage\n * @param create2Factory\n */\nasync function computeEOAForwarderAddress(provider, storage, create2Factory, clientId, secretKey) {\n  if (!create2Factory || create2Factory === \"\") {\n    create2Factory = await getCreate2FactoryAddress(provider);\n  }\n  return (await computeDeploymentInfo(\"infra\", provider, storage, create2Factory, {\n    contractName: \"ForwarderEOAOnly\"\n  }, clientId, secretKey)).transaction.predictedAddress;\n}\n\n/**\n *\n * @internal\n * @param provider\n * @param storage\n * @param create2Factory\n */\nasync function computeForwarderAddress(provider, storage, create2Factory, clientId, secretKey) {\n  if (!create2Factory || create2Factory === \"\") {\n    create2Factory = await getCreate2FactoryAddress(provider);\n  }\n  return (await computeDeploymentInfo(\"infra\", provider, storage, create2Factory, {\n    contractName: \"Forwarder\"\n  }, clientId, secretKey)).transaction.predictedAddress;\n}\n\n/**\n * @internal\n */\nconst ForwardRequest = [{\n  name: \"from\",\n  type: \"address\"\n}, {\n  name: \"to\",\n  type: \"address\"\n}, {\n  name: \"value\",\n  type: \"uint256\"\n}, {\n  name: \"gas\",\n  type: \"uint256\"\n}, {\n  name: \"nonce\",\n  type: \"uint256\"\n}, {\n  name: \"data\",\n  type: \"bytes\"\n}];\nconst ChainAwareForwardRequest = [{\n  name: \"from\",\n  type: \"address\"\n}, {\n  name: \"to\",\n  type: \"address\"\n}, {\n  name: \"value\",\n  type: \"uint256\"\n}, {\n  name: \"gas\",\n  type: \"uint256\"\n}, {\n  name: \"nonce\",\n  type: \"uint256\"\n}, {\n  name: \"data\",\n  type: \"bytes\"\n}, {\n  name: \"chainid\",\n  type: \"uint256\"\n}];\n\n/**\n * @internal\n */\nconst BiconomyForwarderAbi = [{\n  inputs: [{\n    internalType: \"address\",\n    name: \"from\",\n    type: \"address\"\n  }, {\n    internalType: \"uint256\",\n    name: \"batchId\",\n    type: \"uint256\"\n  }],\n  name: \"getNonce\",\n  outputs: [{\n    internalType: \"uint256\",\n    name: \"\",\n    type: \"uint256\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}];\nconst _nonces = {};\nconst _noncesSyncTimestamp = {};\n\n/**\n * @internal\n */\nasync function getAndIncrementNonce(forwarder, forwarderFunction, forwarderArgs) {\n  // address is only used for internal caching :)\n  const address = forwarderArgs.join(\"|\");\n  const timestamp = _noncesSyncTimestamp[address];\n  // if it's within 2 seconds we're optimistically increment the nonce\n  // should we always sync?\n  const shouldSync = Date.now() - timestamp >= 2000;\n  if (!(address in _nonces) || shouldSync) {\n    const nonceResult = await forwarder.functions[forwarderFunction](...forwarderArgs);\n    if (Array.isArray(nonceResult) && nonceResult.length > 0) {\n      _nonces[address] = BigNumber.from(nonceResult[0]);\n    } else {\n      _nonces[address] = BigNumber.from(nonceResult);\n    }\n    _noncesSyncTimestamp[address] = Date.now();\n  }\n  const nonce = _nonces[address];\n  _nonces[address] = BigNumber.from(_nonces[address]).add(1);\n  return nonce;\n}\n\n/**\n * @internal\n */\n\n/**\n * @internal\n */\n\n/**\n * @internal\n */\n\n/**\n * eip712 sign typed data with different wallet handling including ledger live\n * @internal\n */\nasync function signTypedDataInternal(signerInput, domain, types, message) {\n  // Handle ERC4337Signer\n  let signer = signerInput;\n  if (signerInput.originalSigner) {\n    signer = signerInput.originalSigner;\n  }\n  const provider = signer?.provider;\n  if (!provider) {\n    throw new Error(\"missing provider\");\n  }\n  const payload = utils._TypedDataEncoder.getPayload(domain, types, message);\n  let signature = \"\";\n  const signerAddress = (await signer.getAddress()).toLowerCase();\n\n  // an indirect way for accessing walletconnect's underlying provider\n  if (provider?.provider?.isWalletConnect) {\n    signature = await provider.send(\"eth_signTypedData\", [(await signer.getAddress()).toLowerCase(), JSON.stringify(payload)]);\n  } else {\n    try {\n      signature = await signer._signTypedData(domain, types, message);\n    } catch (err) {\n      if (err?.message?.includes(\"eth_signTypedData_v4\")) {\n        signature = await provider.send(\"eth_signTypedData\", [signerAddress, JSON.stringify(payload)]);\n      } else {\n        // magic.link signer only supports this way\n        try {\n          await provider.send(\"eth_signTypedData_v4\", [signerAddress, JSON.stringify(payload)]);\n        } catch (finalErr) {\n          throw finalErr;\n        }\n      }\n    }\n  }\n\n  // fix ledger live where signature result in v = 0, 1. ethers magically fix it in split/join.\n  return {\n    payload,\n    signature: utils.joinSignature(utils.splitSignature(signature))\n  };\n}\n\nconst NAME_ABI = [{\n  inputs: [],\n  name: \"name\",\n  outputs: [{\n    internalType: \"string\",\n    name: \"\",\n    type: \"string\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}];\nconst DOMAIN_SEPARATOR_ABI = [{\n  constant: true,\n  inputs: [],\n  name: \"DOMAIN_SEPARATOR\",\n  outputs: [{\n    internalType: \"bytes32\",\n    name: \"\",\n    type: \"bytes32\"\n  }],\n  payable: false,\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  inputs: [],\n  name: \"getDomainSeperator\",\n  outputs: [{\n    internalType: \"bytes32\",\n    name: \"\",\n    type: \"bytes32\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}];\nconst NONCES_ABI = [{\n  inputs: [{\n    internalType: \"address\",\n    name: \"owner\",\n    type: \"address\"\n  }],\n  name: \"nonces\",\n  outputs: [{\n    internalType: \"uint256\",\n    name: \"\",\n    type: \"uint256\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  inputs: [{\n    internalType: \"address\",\n    name: \"user\",\n    type: \"address\"\n  }],\n  name: \"getNonce\",\n  outputs: [{\n    internalType: \"uint256\",\n    name: \"nonce\",\n    type: \"uint256\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}];\nasync function getSignerNonce(signer, contractAddress) {\n  const contract = new Contract(contractAddress, NONCES_ABI, signer);\n  try {\n    return await contract.nonces(await signer.getAddress());\n  } catch (err) {\n    return await contract.getNonce(await signer.getAddress());\n  }\n}\nasync function getDomainSeperator(signer, contractAddress) {\n  const contract = new Contract(contractAddress, DOMAIN_SEPARATOR_ABI, signer);\n  try {\n    return await contract.DOMAIN_SEPARATOR();\n  } catch (err) {\n    try {\n      return await contract.getDomainSeperator();\n    } catch (err2) {\n      console.error(\"Error getting domain separator\", err2);\n    }\n  }\n}\nasync function getTokenName(signer, contractAddress) {\n  return new Contract(contractAddress, NAME_ABI, signer).name();\n}\n\n/**\n * Polygon chain has different EIP712 domain separator for USDC, DAI compared to other chains and slightly different than EIP-2612.\n */\nasync function getChainDomainSeperator(signer, domain) {\n  const contractDomainSeparator = await getDomainSeperator(signer, domain.verifyingContract);\n  const polygonDomain = {\n    name: domain.name,\n    version: domain.version,\n    verifyingContract: domain.verifyingContract,\n    salt: utils.hexZeroPad(BigNumber.from(domain.chainId).toHexString(), 32)\n  };\n  if (utils._TypedDataEncoder.hashDomain(polygonDomain) === contractDomainSeparator) {\n    return polygonDomain;\n  }\n  return domain;\n}\n\n/**\n * @internal\n */\nasync function signEIP2612Permit(signer, currencyAddress, owner, spender, value, deadline, nonce) {\n  const domain = await getChainDomainSeperator(signer, {\n    name: await getTokenName(signer, currencyAddress),\n    version: \"1\",\n    chainId: await signer.getChainId(),\n    verifyingContract: currencyAddress\n  });\n  nonce = nonce || (await getSignerNonce(signer, currencyAddress)).toString();\n  deadline = deadline || constants.MaxUint256;\n  const message = {\n    owner,\n    spender,\n    value,\n    nonce,\n    deadline\n  };\n  const types = {\n    Permit: [{\n      name: \"owner\",\n      type: \"address\"\n    }, {\n      name: \"spender\",\n      type: \"address\"\n    }, {\n      name: \"value\",\n      type: \"uint256\"\n    }, {\n      name: \"nonce\",\n      type: \"uint256\"\n    }, {\n      name: \"deadline\",\n      type: \"uint256\"\n    }]\n  };\n  const {\n    signature\n  } = await signTypedDataInternal(signer, domain, types, message);\n  return {\n    message,\n    signature\n  };\n}\n\nclass TransactionContext {\n  constructor(options) {\n    this.args = options.args;\n    this.overrides = options.overrides || {};\n    this.provider = options.provider;\n    this.signer = options.signer;\n    this.storage = options.storage;\n\n    // Connect provider to signer if it isn't already connected\n    if (!this.signer.provider) {\n      this.signer = this.signer.connect(this.provider);\n    }\n  }\n  get getSigner() {\n    return this.signer;\n  }\n  get getProvider() {\n    return this.provider;\n  }\n  get getStorage() {\n    return this.storage;\n  }\n  getArgs() {\n    return this.args;\n  }\n  getOverrides() {\n    return this.overrides;\n  }\n  getValue() {\n    return this.overrides.value || 0;\n  }\n  setArgs(args) {\n    this.args = args;\n    return this;\n  }\n  setOverrides(overrides) {\n    this.overrides = overrides;\n    return this;\n  }\n  updateOverrides(overrides) {\n    this.overrides = {\n      ...this.overrides,\n      ...overrides\n    };\n    return this;\n  }\n  setValue(value) {\n    this.updateOverrides({\n      value\n    });\n    return this;\n  }\n  setGasLimit(gasLimit) {\n    this.updateOverrides({\n      gasLimit\n    });\n    return this;\n  }\n  setGasPrice(gasPrice) {\n    this.updateOverrides({\n      gasPrice\n    });\n    return this;\n  }\n  setNonce(nonce) {\n    this.updateOverrides({\n      nonce\n    });\n    return this;\n  }\n  setMaxFeePerGas(maxFeePerGas) {\n    this.updateOverrides({\n      maxFeePerGas\n    });\n    return this;\n  }\n  setMaxPriorityFeePerGas(maxPriorityFeePerGas) {\n    this.updateOverrides({\n      maxPriorityFeePerGas\n    });\n    return this;\n  }\n  setType(type) {\n    this.updateOverrides({\n      type\n    });\n    return this;\n  }\n  setAccessList(accessList) {\n    this.updateOverrides({\n      accessList\n    });\n    return this;\n  }\n  setCustomData(customData) {\n    this.updateOverrides({\n      customData\n    });\n    return this;\n  }\n  setCcipReadEnabled(ccipReadEnabled) {\n    this.updateOverrides({\n      ccipReadEnabled\n    });\n    return this;\n  }\n  /**\n   * Set a multiple to multiply the gas limit by\n   *\n   * @example\n   * ```js\n   * // Set the gas limit multiple to 1.2 (increase by 20%)\n   * tx.setGasLimitMultiple(1.2)\n   * ```\n   */\n  setGasLimitMultiple(factor) {\n    // If gasLimit override is set, we can just set it synchronously\n    if (BigNumber.isBigNumber(this.overrides.gasLimit)) {\n      this.overrides.gasLimit = BigNumber.from(Math.floor(BigNumber.from(this.overrides.gasLimit).toNumber() * factor));\n    } else {\n      // Otherwise, set a gas multiple to use later\n      this.gasMultiple = factor;\n    }\n  }\n\n  /**\n   * Estimate the total gas cost of this transaction (in both ether and wei)\n   */\n  async estimateGasCost() {\n    const [gasLimit, gasPrice] = await Promise.all([this.estimateGasLimit(), this.getGasPrice()]);\n    const gasCost = gasLimit.mul(gasPrice);\n    return {\n      ether: utils.formatEther(gasCost),\n      wei: gasCost\n    };\n  }\n\n  /**\n   * Calculates the gas price for transactions (adding a 10% tip buffer)\n   */\n  async getGasPrice() {\n    return getGasPrice(this.provider);\n  }\n\n  /**\n   * Get the address of the transaction signer\n   */\n  async getSignerAddress() {\n    return this.signer.getAddress();\n  }\n\n  /**\n   * Get gas overrides for the transaction\n   */\n  async getGasOverrides() {\n    return getDefaultGasOverrides(this.provider);\n  }\n\n  /**\n   * Calculates the priority fee per gas according (adding a 10% buffer)\n   */\n  getPreferredPriorityFee(defaultPriorityFeePerGas) {\n    const extraTip = defaultPriorityFeePerGas.div(100).mul(10); // + 10%\n    const txGasPrice = defaultPriorityFeePerGas.add(extraTip);\n    return txGasPrice;\n  }\n}\nclass Transaction extends TransactionContext {\n  static fromContractWrapper(options) {\n    const signer = options.contractWrapper.getSigner();\n    if (!signer) {\n      throw new Error(\"Cannot create a transaction without a signer. Please ensure that you have a connected signer.\");\n    }\n    const optionsWithContract = {\n      ...options,\n      contract: options.contractWrapper.writeContract,\n      provider: options.contractWrapper.getProvider(),\n      signer,\n      gasless: options.contractWrapper.options.gasless,\n      storage: options.contractWrapper.storage\n    };\n    return new Transaction(optionsWithContract);\n  }\n  static async fromContractInfo(options) {\n    const storage = options.storage;\n    let contractAbi = options.contractAbi;\n    if (!contractAbi) {\n      try {\n        const metadata = await fetchContractMetadataFromAddress(options.contractAddress, options.provider, storage);\n        contractAbi = metadata.abi;\n      } catch {\n        throw new Error(`Could resolve contract metadata for address ${options.contractAddress}. Please pass the contract ABI manually with the 'contractAbi' option.`);\n      }\n    }\n    const contract = new Contract(options.contractAddress, contractAbi, options.provider);\n    const optionsWithContract = {\n      ...options,\n      storage,\n      contract\n    };\n    return new Transaction(optionsWithContract);\n  }\n  constructor(options) {\n    super({\n      args: options.args,\n      overrides: options.overrides,\n      provider: options.provider,\n      signer: options.signer,\n      storage: options.storage\n    });\n    this.method = options.method;\n    this.gaslessOptions = options.gasless;\n    this.parse = options.parse;\n\n    // Always connect the signer to the contract\n    this.contract = options.contract.connect(this.signer);\n\n    // Create new storage instance if one isn't provided\n    this.storage = options.storage;\n  }\n  getTarget() {\n    return this.contract.address;\n  }\n  getMethod() {\n    return this.method;\n  }\n  getGaslessOptions() {\n    return this.gaslessOptions;\n  }\n  setGaslessOptions(options) {\n    this.gaslessOptions = options;\n    return this;\n  }\n  setParse(parse) {\n    this.parse = parse;\n    return this;\n  }\n\n  /**\n   * Encode the function data for this transaction\n   */\n  encode() {\n    return this.contract.interface.encodeFunctionData(this.method, this.args);\n  }\n\n  /**\n   * Get the signed transaction\n   */\n  async sign() {\n    const populatedTx = await this.populateTransaction();\n    const signedTx = await this.contract.signer.signTransaction(populatedTx);\n    return signedTx;\n  }\n  async populateTransaction() {\n    const gasOverrides = await this.getGasOverrides();\n    const overrides = {\n      ...gasOverrides,\n      ...this.overrides\n    };\n\n    // First, if no gasLimit is passed, call estimate gas ourselves\n    if (!overrides.gasLimit) {\n      overrides.gasLimit = await this.estimateGasLimit();\n    }\n    const tx = await this.contract.populateTransaction[this.method](...this.args, overrides);\n    const populatedTx = await this.contract.signer.populateTransaction(tx);\n    return populatedTx;\n  }\n\n  /**\n   * Simulate the transaction on-chain without executing\n   */\n  async simulate() {\n    if (!this.contract.callStatic[this.method]) {\n      throw this.functionError();\n    }\n    try {\n      return await this.contract.callStatic[this.method](...this.args, ...(this.overrides.value ? [{\n        value: this.overrides.value\n      }] : []));\n    } catch (err) {\n      throw await this.transactionError(err);\n    }\n  }\n\n  /**\n   * Estimate the gas limit of this transaction\n   */\n  async estimateGasLimit() {\n    if (!this.contract.estimateGas[this.method]) {\n      throw this.functionError();\n    }\n    try {\n      const gasEstimate = await this.contract.estimateGas[this.method](...this.args, this.overrides);\n      if (this.gasMultiple) {\n        return BigNumber.from(Math.floor(BigNumber.from(gasEstimate).toNumber() * this.gasMultiple));\n      }\n      return gasEstimate;\n    } catch (err) {\n      // If gas estimation fails, we'll call static to get a better error message\n      await this.simulate();\n\n      // If transaction simulation (static call) doesn't throw, then throw a generic error\n      throw await this.transactionError(err);\n    }\n  }\n\n  /**\n   * Send the transaction without waiting for it to be mined.\n   */\n  async send() {\n    if (!this.contract.functions[this.method]) {\n      throw this.functionError();\n    }\n    if (this.gaslessOptions && (\"openzeppelin\" in this.gaslessOptions || \"biconomy\" in this.gaslessOptions)) {\n      return this.sendGasless();\n    }\n    const gasOverrides = await this.getGasOverrides();\n    const overrides = {\n      ...gasOverrides,\n      ...this.overrides\n    };\n\n    // First, if no gasLimit is passed, call estimate gas ourselves\n    if (!overrides.gasLimit) {\n      overrides.gasLimit = await this.estimateGasLimit();\n      try {\n        // for dynamic contracts, add 30% to the gas limit to account for multiple delegate calls\n        const abi = JSON.parse(this.contract.interface.format(\"json\"));\n        if (isRouterContract(abi)) {\n          overrides.gasLimit = overrides.gasLimit.mul(110).div(100);\n        }\n      } catch (err) {\n        console.warn(\"Error raising gas limit\", err);\n      }\n    }\n\n    // Now there should be no gas estimate errors\n    try {\n      return await this.contract.functions[this.method](...this.args, overrides);\n    } catch (err) {\n      throw await this.transactionError(err);\n    }\n  }\n\n  /**\n   * Send the transaction and wait for it to be mined\n   */\n  async execute() {\n    const tx = await this.send();\n    let receipt;\n    try {\n      receipt = await tx.wait();\n    } catch (err) {\n      // If tx.wait() fails, it just gives us a generic \"transaction failed\"\n      // error. So instead, we need to call static to get an informative error message\n      await this.simulate();\n\n      // If transaction simulation (static call) doesn't throw, then throw with the message that we have\n      throw await this.transactionError(err);\n    }\n    if (this.parse) {\n      return this.parse(receipt);\n    }\n    return {\n      receipt\n    };\n  }\n\n  /**\n   * Execute the transaction with gasless\n   */\n  async sendGasless() {\n    const tx = await this.prepareGasless();\n    const txHash = await defaultGaslessSendFunction(tx, this.signer, this.provider, this.storage, this.gaslessOptions);\n\n    // Need to poll here because ethers.provider.getTransaction lies about the type\n    // It can actually return null, which can happen if we're still in gasless API send queue\n    let sentTx;\n    let iteration = 1;\n    while (!sentTx) {\n      try {\n        sentTx = await this.provider.getTransaction(txHash);\n      } catch (err) {\n        // some providers can throw an error if the tx is very recent\n      }\n      // Exponential (ish) backoff for polling\n      if (!sentTx) {\n        await new Promise(resolve => setTimeout(resolve, Math.min(iteration * 1000, 10000)));\n        iteration++;\n      }\n\n      // Timeout if we still don't have it after a while\n      if (iteration > 20) {\n        throw new Error(`Unable to retrieve transaction with hash ${txHash}`);\n      }\n    }\n    return sentTx;\n  }\n\n  /**\n   * @internal\n   * @returns\n   */\n  async prepareGasless() {\n    invariant(this.gaslessOptions && (\"openzeppelin\" in this.gaslessOptions || \"biconomy\" in this.gaslessOptions), \"No gasless options set on this transaction!\");\n    const signerAddress = await this.getSignerAddress();\n    const args = [...this.args];\n    if (this.method === \"multicall\" && Array.isArray(this.args[0]) && args[0].length > 0) {\n      args[0] = args[0].map(tx => utils.solidityPack([\"bytes\", \"address\"], [tx, signerAddress]));\n    }\n    invariant(this.signer, \"Cannot execute gasless transaction without valid signer\");\n    const [{\n      chainId\n    }, from] = await Promise.all([this.provider.getNetwork(), this.overrides.from || signerAddress]);\n    const to = this.contract.address;\n    const value = this.overrides?.value || 0;\n    if (BigNumber.from(value).gt(0)) {\n      throw new Error(\"Cannot send native token value with gasless transaction\");\n    }\n    const data = this.contract.interface.encodeFunctionData(this.method, args);\n    let gas = BigNumber.from(0);\n    try {\n      const gasEstimate = await this.contract.estimateGas[this.method](...args);\n      gas = gasEstimate.mul(2);\n    } catch (e) {\n      // ignore\n    }\n\n    // in some cases WalletConnect doesn't properly give an estimate for how much gas it would actually use.\n    // as a fix, we're setting it to a high arbitrary number (500k) as the gas limit that should cover for most function calls.\n    if (gas.lt(100000)) {\n      gas = BigNumber.from(500000);\n    }\n\n    // check for gas override in callOverrides\n    if (this.overrides.gasLimit && BigNumber.from(this.overrides.gasLimit).gt(gas)) {\n      gas = BigNumber.from(this.overrides.gasLimit);\n    }\n    return {\n      from,\n      to,\n      data,\n      chainId,\n      gasLimit: gas,\n      functionName: this.method,\n      functionArgs: args,\n      callOverrides: this.overrides\n    };\n  }\n  functionError() {\n    return new Error(`Contract \"${this.contract.address}\" does not have function \"${this.method}\"`);\n  }\n\n  /**\n   * Create a nicely formatted error message with tx metadata and solidity stack trace\n   */\n  async transactionError(error) {\n    const provider = this.provider;\n\n    // Get metadata for transaction to populate into error\n    const [network, from] = await Promise.all([provider.getNetwork(), this.overrides.from || this.getSignerAddress()]);\n    const to = this.contract.address;\n    const data = this.encode();\n    const value = BigNumber.from(this.overrides.value || 0);\n    const rpcUrl = provider.connection?.url;\n\n    // Render function signature with arguments filled in\n    const functionSignature = this.contract.interface.getFunction(this.method);\n    const methodArgs = this.args.map(arg => {\n      if (JSON.stringify(arg).length <= 80) {\n        return JSON.stringify(arg);\n      }\n      return JSON.stringify(arg, undefined, 2);\n    });\n    const joinedArgs = methodArgs.join(\", \").length <= 80 ? methodArgs.join(\", \") : \"\\n\" + methodArgs.map(arg => \"  \" + arg.split(\"\\n\").join(\"\\n  \")).join(\",\\n\") + \"\\n\";\n    const method = `${functionSignature.name}(${joinedArgs})`;\n    const hash = error.transactionHash || error.transaction?.hash || error.receipt?.transactionHash;\n\n    // Parse the revert reason from the error\n    const reason = parseRevertReason(error);\n\n    // Get contract sources for stack trace\n    let sources = undefined;\n    let contractName = undefined;\n    try {\n      const metadata = await fetchContractMetadataFromAddress(this.contract.address, this.provider, this.storage);\n      if (metadata.name) {\n        contractName = metadata.name;\n      }\n      if (metadata.metadata.sources) {\n        sources = await fetchSourceFilesFromMetadata(metadata, this.storage);\n      }\n    } catch (err) {\n      // no-op\n    }\n    return new TransactionError({\n      reason,\n      from,\n      to,\n      method,\n      data,\n      network,\n      rpcUrl,\n      value,\n      hash,\n      contractName,\n      sources\n    }, error);\n  }\n}\nclass DeployTransaction extends TransactionContext {\n  constructor(options) {\n    super(options);\n    this.factory = options.factory;\n    this.events = options.events;\n  }\n  encode() {\n    return utils.hexlify(utils.concat([this.factory.bytecode, this.factory.interface.encodeDeploy(this.args)]));\n  }\n  getTarget() {\n    return constants.AddressZero;\n  }\n  getMethod() {\n    return \"deploy\";\n  }\n  async sign() {\n    const populatedTx = await this.populateTransaction();\n    return this.signer.signTransaction(populatedTx);\n  }\n  async simulate() {\n    const populatedTx = await this.populateTransaction();\n    return this.signer.call(populatedTx);\n  }\n  async estimateGasLimit() {\n    try {\n      const gasOverrides = await this.getGasOverrides();\n      const overrides = {\n        ...gasOverrides,\n        ...this.overrides\n      };\n      const populatedTx = this.factory.getDeployTransaction(...this.args, overrides);\n      return this.signer.estimateGas(populatedTx);\n    } catch (err) {\n      // No need to do simulation here, since there can't be revert errors\n      throw await this.deployError(err);\n    }\n  }\n  async send() {\n    try {\n      const populatedTx = await this.populateTransaction();\n      return await this.signer.sendTransaction(populatedTx);\n    } catch (err) {\n      throw await this.deployError(err);\n    }\n  }\n  async execute() {\n    const tx = await this.send();\n    try {\n      await tx.wait();\n    } catch (err) {\n      // If tx.wait() fails, it just gives us a generic \"transaction failed\"\n      // error. So instead, we need to call static to get an informative error message\n      await this.simulate();\n\n      // If transaction simulation (static call) doesn't throw, then throw with the message that we have\n      throw await this.deployError(err);\n    }\n    const contractAddress = utils.getContractAddress({\n      from: tx.from,\n      nonce: tx.nonce\n    });\n\n    // TODO: Remove when we delete events from deploy\n    if (this.events) {\n      this.events.emit(\"contractDeployed\", {\n        status: \"completed\",\n        contractAddress,\n        transactionHash: tx.hash\n      });\n    }\n    return contractAddress;\n  }\n  async populateTransaction() {\n    const gasOverrides = await this.getGasOverrides();\n    const overrides = {\n      ...gasOverrides,\n      ...this.overrides\n    };\n\n    // First, if no gasLimit is passed, call estimate gas ourselves\n    if (!overrides.gasLimit) {\n      overrides.gasLimit = await this.estimateGasLimit();\n    }\n    return this.factory.getDeployTransaction(...this.args, overrides);\n  }\n\n  /**\n   * Create a nicely formatted error message with tx metadata and solidity stack trace\n   */\n  async deployError(error) {\n    const provider = this.provider;\n\n    // Get metadata for transaction to populate into error\n    const [network, from] = await Promise.all([provider.getNetwork(), this.overrides.from || this.getSignerAddress()]);\n    const data = this.encode();\n    const value = BigNumber.from(this.overrides.value || 0);\n    const rpcUrl = provider.connection?.url;\n    const methodArgs = this.args.map(arg => {\n      if (JSON.stringify(arg).length <= 80) {\n        return JSON.stringify(arg);\n      }\n      return JSON.stringify(arg, undefined, 2);\n    });\n    const joinedArgs = methodArgs.join(\", \").length <= 80 ? methodArgs.join(\", \") : \"\\n\" + methodArgs.map(arg => \"  \" + arg.split(\"\\n\").join(\"\\n  \")).join(\",\\n\") + \"\\n\";\n    const method = `deployContract(${joinedArgs})`;\n    const hash = error.transactionHash || error.transaction?.hash || error.receipt?.transactionHash;\n\n    // Parse the revert reason from the error\n    const reason = parseRevertReason(error);\n    return new TransactionError({\n      reason,\n      from,\n      method,\n      data,\n      network,\n      rpcUrl,\n      value,\n      hash\n    }, error);\n  }\n}\nasync function defaultGaslessSendFunction(transaction, signer, provider, storage, gaslessOptions) {\n  if (gaslessOptions && \"biconomy\" in gaslessOptions) {\n    return biconomySendFunction(transaction, signer, provider, gaslessOptions);\n  }\n  return defenderSendFunction(transaction, signer, provider, storage, gaslessOptions);\n}\nasync function biconomySendFunction(transaction, signer, provider, gaslessOptions) {\n  const request = await biconomyPrepareRequest(transaction, signer, provider, gaslessOptions);\n  const response = await fetch(\"https://api.biconomy.io/api/v2/meta-tx/native\", request);\n  if (response.ok) {\n    const resp = await response.json();\n    if (!resp.txHash) {\n      throw new Error(`relay transaction failed: ${resp.log}`);\n    }\n    return resp.txHash;\n  }\n  throw new Error(`relay transaction failed with status: ${response.status} (${response.statusText})`);\n}\nasync function defenderSendFunction(transaction, signer, provider, storage, gaslessOptions) {\n  invariant(gaslessOptions && \"openzeppelin\" in gaslessOptions, \"calling openzeppelin gasless transaction without openzeppelin config in the SDK options\");\n  const request = await defenderPrepareRequest(transaction, signer, provider, storage, gaslessOptions);\n  const response = await fetch(gaslessOptions.openzeppelin.relayerUrl, request);\n  if (response.ok) {\n    const resp = await response.json();\n    if (!resp.result) {\n      throw new Error(`Relay transaction failed: ${resp.message}`);\n    }\n    const result = JSON.parse(resp.result);\n    return result.txHash;\n  }\n  throw new Error(`relay transaction failed with status: ${response.status} (${response.statusText})`);\n}\nasync function defenderPrepareRequest(transaction, signer, provider, storage, gaslessOptions) {\n  invariant(gaslessOptions && \"openzeppelin\" in gaslessOptions, \"calling openzeppelin gasless transaction without openzeppelin config in the SDK options\");\n  invariant(signer, \"provider is not set\");\n  invariant(provider, \"provider is not set\");\n  const forwarderAddress = gaslessOptions.openzeppelin.relayerForwarderAddress || (gaslessOptions.openzeppelin.useEOAForwarder ? CONTRACT_ADDRESSES[transaction.chainId].openzeppelinForwarderEOA || (await computeEOAForwarderAddress(provider, storage)) : CONTRACT_ADDRESSES[transaction.chainId].openzeppelinForwarder || (await computeForwarderAddress(provider, storage)));\n  const forwarder = new Contract(forwarderAddress, ForwarderABI, provider);\n  const nonce = await getAndIncrementNonce(forwarder, \"getNonce\", [transaction.from]);\n  let domain;\n  let types;\n  let message;\n  if (gaslessOptions.experimentalChainlessSupport) {\n    domain = {\n      name: \"GSNv2 Forwarder\",\n      version: \"0.0.1\",\n      verifyingContract: forwarderAddress\n    };\n    types = {\n      ForwardRequest: ChainAwareForwardRequest\n    };\n    message = {\n      from: transaction.from,\n      to: transaction.to,\n      value: BigNumber.from(0).toString(),\n      gas: BigNumber.from(transaction.gasLimit).toString(),\n      nonce: BigNumber.from(nonce).toString(),\n      data: transaction.data,\n      chainid: BigNumber.from(transaction.chainId).toString()\n    };\n  } else {\n    domain = {\n      name: gaslessOptions.openzeppelin.domainName,\n      version: gaslessOptions.openzeppelin.domainVersion,\n      chainId: transaction.chainId,\n      verifyingContract: forwarderAddress\n    };\n    types = {\n      ForwardRequest\n    };\n    message = {\n      from: transaction.from,\n      to: transaction.to,\n      value: BigNumber.from(0).toString(),\n      gas: BigNumber.from(transaction.gasLimit).toString(),\n      nonce: BigNumber.from(nonce).toString(),\n      data: transaction.data\n    };\n  }\n  let signature;\n\n  // if the executing function is \"approve\" and matches with erc20 approve signature\n  // and if the token supports permit, then we use permit for gasless instead of approve.\n  if (transaction.functionName === \"approve\" && transaction.functionArgs.length === 2) {\n    const spender = transaction.functionArgs[0];\n    const amount = transaction.functionArgs[1];\n    // TODO: support DAI permit by signDAIPermit\n    const {\n      message: permit,\n      signature: sig\n    } = await signEIP2612Permit(signer, transaction.to, transaction.from, spender, amount);\n    const {\n      r,\n      s,\n      v\n    } = utils.splitSignature(sig);\n    message = {\n      to: transaction.to,\n      owner: permit.owner,\n      spender: permit.spender,\n      value: BigNumber.from(permit.value).toString(),\n      nonce: BigNumber.from(permit.nonce).toString(),\n      deadline: BigNumber.from(permit.deadline).toString(),\n      r,\n      s,\n      v\n    };\n    signature = sig;\n  } else {\n    const {\n      signature: sig\n    } = await signTypedDataInternal(signer, domain, types, message);\n    signature = sig;\n  }\n  let messageType = \"forward\";\n\n  // if has owner property then it's permit :)\n  if (message?.owner) {\n    messageType = \"permit\";\n  }\n  return {\n    method: \"POST\",\n    body: JSON.stringify({\n      request: message,\n      signature,\n      forwarderAddress,\n      type: messageType\n    })\n  };\n}\nasync function prepareGaslessRequest(tx) {\n  const gaslessTx = await tx.prepareGasless();\n  const gaslessOptions = tx.getGaslessOptions();\n  if (gaslessOptions && \"biconomy\" in gaslessOptions) {\n    const request = await biconomyPrepareRequest(gaslessTx, tx.getSigner, tx.getProvider, gaslessOptions);\n    return {\n      url: \"https://api.biconomy.io/api/v2/meta-tx/native\",\n      ...request\n    };\n  } else {\n    invariant(gaslessOptions && \"openzeppelin\" in gaslessOptions, \"calling openzeppelin gasless transaction without openzeppelin config in the SDK options\");\n    const request = await defenderPrepareRequest(gaslessTx, tx.getSigner, tx.getProvider, tx.getStorage, gaslessOptions);\n    return {\n      url: gaslessOptions.openzeppelin.relayerUrl,\n      ...request\n    };\n  }\n}\nasync function biconomyPrepareRequest(transaction, signer, provider, gaslessOptions) {\n  invariant(gaslessOptions && \"biconomy\" in gaslessOptions, \"calling biconomySendFunction without biconomy\");\n  invariant(signer && provider, \"signer and provider must be set\");\n  const forwarder = new Contract(getContractAddressByChainId(transaction.chainId, \"biconomyForwarder\"), BiconomyForwarderAbi, provider);\n  const batchId = 0;\n  const batchNonce = await getAndIncrementNonce(forwarder, \"getNonce\", [transaction.from, batchId]);\n  const request = {\n    from: transaction.from,\n    to: transaction.to,\n    token: constants.AddressZero,\n    txGas: transaction.gasLimit.toNumber(),\n    tokenGasPrice: \"0\",\n    batchId,\n    batchNonce: batchNonce.toNumber(),\n    deadline: Math.floor(Date.now() / 1000 + (gaslessOptions && \"biconomy\" in gaslessOptions && gaslessOptions.biconomy?.deadlineSeconds || 3600)),\n    data: transaction.data\n  };\n  const hashToSign = utils.arrayify(utils.solidityKeccak256([\"address\", \"address\", \"address\", \"uint256\", \"uint256\", \"uint256\", \"uint256\", \"uint256\", \"bytes32\"], [request.from, request.to, request.token, request.txGas, request.tokenGasPrice, request.batchId, request.batchNonce, request.deadline, utils.keccak256(request.data)]));\n  const signature = await signer.signMessage(hashToSign);\n  return {\n    method: \"POST\",\n    body: JSON.stringify({\n      from: transaction.from,\n      apiId: gaslessOptions.biconomy.apiId,\n      params: [request, signature],\n      to: transaction.to,\n      gasLimit: transaction.gasLimit.toHexString()\n    }),\n    headers: {\n      \"x-api-key\": gaslessOptions.biconomy.apiKey,\n      \"Content-Type\": \"application/json;charset=utf-8\"\n    }\n  };\n}\n\n/**\n * @internal\n */\n\n/**\n * Handles metadata for a Contract\n * @remarks Read and update metadata for this contract\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const metadata = await contract.metadata.get();\n * await contract.metadata.set({\n *   name: \"My Contract\",\n *   description: \"My contract description\"\n * })\n * ```\n * @public\n */\nclass ContractMetadata {\n  featureName = FEATURE_METADATA.name;\n  constructor(contractWrapper, schema, storage) {\n    this.contractWrapper = contractWrapper;\n    this.schema = schema;\n    this.storage = storage;\n  }\n  /**\n   * @internal\n   */\n  parseOutputMetadata(metadata) {\n    return this.schema.output.parseAsync(metadata);\n  }\n\n  /**\n   * @internal\n   */\n  parseInputMetadata(metadata) {\n    return this.schema.input.parseAsync(metadata);\n  }\n  /**\n   * Get the metadata of this contract\n   * @remarks Get the metadata of a contract\n   * @example\n   * ```javascript\n   * const metadata = await contract.metadata.get();\n   * console.log(metadata);\n   * ```\n   * @public\n   * @returns the metadata of the given contract\n   * @twfeature ContractMetadata\n   */\n  async get() {\n    let data;\n    if (this.supportsContractMetadata(this.contractWrapper)) {\n      const uri = await this.contractWrapper.read(\"contractURI\", []);\n      if (uri && uri.includes(\"://\")) {\n        data = await this.storage.downloadJSON(uri);\n      }\n    }\n    if (!data) {\n      try {\n        // try fetching metadata from bytecode and / or contract itself\n        let contractName;\n        try {\n          if (hasFunction(\"name\", this.contractWrapper)) {\n            contractName = await this.contractWrapper.read(\"name\", []);\n          }\n        } catch (err) {\n          // no-op\n        }\n        let contractSymbol;\n        try {\n          if (hasFunction(\"symbol\", this.contractWrapper)) {\n            contractSymbol = await this.contractWrapper.read(\"symbol\", []);\n          }\n        } catch (err) {\n          // no-op\n        }\n        let publishedMetadata;\n        try {\n          publishedMetadata = await fetchContractMetadataFromAddress(this.contractWrapper.address, this.contractWrapper.getProvider(), this.storage, this.contractWrapper.options);\n        } catch (err) {}\n        data = {\n          name: contractName || publishedMetadata?.name,\n          symbol: contractSymbol,\n          description: publishedMetadata?.info.title\n        };\n      } catch (e) {\n        throw new Error(\"Could not fetch contract metadata\");\n      }\n    }\n    return this.parseOutputMetadata(data);\n  }\n\n  /**\n   * Set the metadata of this contract\n   * @remarks OVERWRITE the metadata of a contract\n   * @example\n   * ```javascript\n   * await contract.metadata.set({\n   *   name: \"My Contract\",\n   *   description: \"My contract description\"\n   * })\n   * ```\n   * @public\n   * @param metadata - the metadata to set\n   * @twfeature ContractMetadata\n   */\n  set = /* @__PURE__ */buildTransactionFunction(async metadata => {\n    const uri = await this._parseAndUploadMetadata(metadata);\n    const wrapper = this.contractWrapper;\n    if (this.supportsContractMetadata(wrapper)) {\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"setContractURI\",\n        args: [uri],\n        parse: receipt => {\n          return {\n            receipt,\n            data: this.get\n          };\n        }\n      });\n    } else {\n      throw new ExtensionNotImplementedError(FEATURE_METADATA);\n    }\n  });\n\n  /**\n   * Update the metadata of a contract\n   * @remarks Update the metadata of a contract\n   * @example\n   * ```javascript\n   * await contract.metadata.update({\n   *   description: \"My new contract description\"\n   * })\n   * ```\n   * @public\n   * @param metadata - the metadata to update\n   * @twfeature ContractMetadata\n   * */\n  update = /* @__PURE__ */buildTransactionFunction(async metadata => {\n    return await this.set.prepare({\n      ...(await this.get()),\n      ...metadata\n    });\n  });\n\n  /**\n   *\n   * @internal\n   * @param metadata - the metadata to set\n   * @returns\n   */\n  async _parseAndUploadMetadata(metadata) {\n    const parsedMetadata = await this.parseInputMetadata(metadata);\n    return this.storage.upload(parsedMetadata);\n  }\n  supportsContractMetadata(contractWrapper) {\n    return detectContractFeature(contractWrapper, \"ContractMetadata\");\n  }\n}\n\n/**\n *\n * @internal\n */\nconst roleMap = {\n  admin: \"\",\n  transfer: \"TRANSFER_ROLE\",\n  minter: \"MINTER_ROLE\",\n  pauser: \"PAUSER_ROLE\",\n  lister: \"LISTER_ROLE\",\n  asset: \"ASSET_ROLE\",\n  unwrap: \"UNWRAP_ROLE\",\n  factory: \"FACTORY_ROLE\",\n  signer: \"SIGNER_ROLE\"\n};\n\n/**\n * @public\n */\n\n/**\n * @public\n */\nconst ALL_ROLES = /* @__PURE__ */Object.keys(roleMap);\n\n/**\n * @internal\n */\nfunction getRoleHash(role) {\n  if (role === \"admin\") {\n    return utils.hexZeroPad([0], 32);\n  }\n  return utils.id(roleMap[role]);\n}\n\n/**\n * Handle contract permissions\n * @remarks Configure roles and permissions for a contract, to restrict certain actions.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const rolesAndMembers = await contract.roles.getAll();\n * await contract.roles.grantRole(\"admin\", \"0x...\");\n * ```\n * @public\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars -- TO BE REMOVED IN V4\nclass ContractRoles {\n  featureName = FEATURE_PERMISSIONS.name;\n\n  /**\n   * @internal\n   * @remarks This is used for typing inside react hooks which is why it has to be public.\n   */\n\n  constructor(contractWrapper, roles) {\n    this.contractWrapper = contractWrapper;\n    this.roles = roles;\n  }\n\n  /** **************************\n   * READ FUNCTIONS\n   ****************************/\n\n  /**\n   * Get all members of all roles\n   * @remarks See {@link ContractRoles.get} to get a list of addresses that are members of a specific role.\n   * @example\n   * ```javascript\n   * const rolesAndMembers = await contract.roles.getAll();\n   * ```\n   * @returns A record of {@link Role}s to lists of addresses that are members of the given role.\n   * @throws If the contract does not support roles this will throw an error.\n   *\n   * @public\n   * @twfeature PermissionsEnumerable\n   */\n  async getAll() {\n    invariant(this.roles.length, \"this contract has no support for roles\");\n    const roles = {};\n    for (const role of this.roles) {\n      roles[role] = await this.get(role);\n    }\n    return roles;\n  }\n\n  /**\n   * Get all members of a specific role\n   * @remarks See {@link ContractRoles.getAll} to get get a list of addresses for all supported roles on the contract.\n   * @param role - The Role to to get a memberlist for.\n   * @returns The list of addresses that are members of the specific role.\n   * @throws If you are requesting a role that does not exist on the contract this will throw an error.\n   *\n   * @example Say you want to get the list of addresses that are members of the minter role.\n   * ```javascript\n   * const minterAddresses = await contract.roles.get(\"minter\");\n   * ```\n   *\n   * @public\n   * @twfeature Permissions\n   */\n  async get(role) {\n    invariant(this.roles.includes(role), `this contract does not support the \"${role}\" role`);\n    const wrapper = this.contractWrapper;\n    if (hasFunction(\"getRoleMemberCount\", wrapper) && hasFunction(\"getRoleMember\", wrapper)) {\n      const roleHash = getRoleHash(role);\n      const count = (await wrapper.read(\"getRoleMemberCount\", [roleHash])).toNumber();\n      return await Promise.all(Array.from(Array(count).keys()).map(i => wrapper.read(\"getRoleMember\", [roleHash, i])));\n    }\n    throw new Error(\"Contract does not support enumerating roles. Please implement IPermissionsEnumerable to unlock this functionality.\");\n  }\n\n  /**\n   * Overwrite the list of members for specific roles\n   *\n   * @remarks Every role in the list will be overwritten with the new list of addresses provided with them.\n   * If you want to add or remove addresses for a single address use {@link ContractRoles.grant} and {@link ContractRoles.revoke} respectively instead.\n   * @param rolesWithAddresses - A record of {@link Role}s to lists of addresses that should be members of the given role.\n   * @throws If you are requesting a role that does not exist on the contract this will throw an error.\n   * @example Say you want to overwrite the list of addresses that are members of the minter role.\n   * ```javascript\n   * const minterAddresses = await contract.roles.get(\"minter\");\n   * await contract.roles.setAll({\n   *  minter: []\n   * });\n   * console.log(await contract.roles.get(\"minter\")); // No matter what members had the role before, the new list will be set to []\n   * ```\n   * @public\n   * @twfeature Permissions\n   *\n   * */\n  setAll = /* @__PURE__ */buildTransactionFunction(async rolesWithAddresses => {\n    const contractEncoder = new ContractEncoder(this.contractWrapper);\n    const roles = Object.keys(rolesWithAddresses);\n    invariant(roles.length, \"you must provide at least one role to set\");\n    invariant(roles.every(role => this.roles.includes(role)), \"this contract does not support the given role\");\n    const currentRoles = await this.getAll();\n    const encoded = [];\n    // add / remove admin role at the end so we don't revoke admin then grant\n    const sortedRoles = roles.sort(role => role === \"admin\" ? 1 : -1);\n    for (let i = 0; i < sortedRoles.length; i++) {\n      const role = sortedRoles[i];\n      const addresses = await Promise.all(rolesWithAddresses[role]?.map(async addressOrEns => await resolveAddress(addressOrEns)) || []);\n      const currentAddresses = await Promise.all(currentRoles[role]?.map(async addressOrEns => await resolveAddress(addressOrEns)) || []);\n      const toAdd = addresses.filter(address => !currentAddresses.includes(address));\n      const toRemove = currentAddresses.filter(address => !addresses.includes(address));\n      if (toAdd.length) {\n        toAdd.forEach(address => {\n          encoded.push(contractEncoder.encode(\"grantRole\", [getRoleHash(role), address]));\n        });\n      }\n      if (toRemove.length) {\n        for (let j = 0; j < toRemove.length; j++) {\n          const address = toRemove[j];\n          const revokeFunctionName = await this.getRevokeRoleFunctionName(address);\n          encoded.push(contractEncoder.encode(revokeFunctionName, [getRoleHash(role), address]));\n        }\n      }\n    }\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"multicall\",\n      args: [encoded]\n    });\n  });\n\n  /**\n   * Throws an error if an address is missing the roles specified.\n   *\n   * @param roles - The roles to check\n   * @param address - The address to check\n   *\n   * @internal\n   */\n  async verify(roles, address) {\n    await Promise.all(roles.map(async role => {\n      const members = await this.get(role);\n      const resolvedAddress = await resolveAddress(address);\n      if (!members.map(a => a.toLowerCase()).includes(resolvedAddress.toLowerCase())) {\n        throw new MissingRoleError(resolvedAddress, role);\n      }\n    }));\n  }\n\n  /** **************************\n   * WRITE FUNCTIONS\n   ****************************/\n\n  /**\n   * Grant a role to a specific address\n   *\n   * @remarks Make sure you are sure you want to grant the role to the address.\n   *\n   * @example\n   * ```javascript\n   * await contract.roles.grant(\"minter\", \"{{wallet_address}}\");\n   * ```\n   *\n   * @param role - The {@link Role} to grant to the address\n   * @param address - The address to grant the role to\n   * @returns The transaction receipt\n   * @throws If you are trying to grant does not exist on the contract this will throw an error.\n   *\n   * @public\n   * @twfeature Permissions\n   */\n  grant = /* @__PURE__ */buildTransactionFunction(async (role, address) => {\n    invariant(this.roles.includes(role), `this contract does not support the \"${role}\" role`);\n    const resolvedAddress = await resolveAddress(address);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"grantRole\",\n      args: [getRoleHash(role), resolvedAddress]\n    });\n  });\n\n  /**\n   * Revoke a role from a specific address\n   *\n   * @remarks\n   *\n   * -- Caution --\n   *\n   * This will let you remove yourself from the role, too.\n   * If you remove yourself from the admin role, you will no longer be able to administer the contract.\n   * There is no way to recover from this.\n   *\n   * @example\n   * ```javascript\n   * await contract.roles.revoke(\"minter\", \"{{wallet_address}}\");\n   * ```\n   *\n   * @param role - The {@link Role} to revoke\n   * @param address - The address to revoke the role from\n   * @returns The transaction receipt\n   * @throws If you are trying to revoke does not exist on the module this will throw an error.\n   *\n   * @public\n   * @twfeature Permissions\n   */\n  revoke = /* @__PURE__ */buildTransactionFunction(async (role, address) => {\n    invariant(this.roles.includes(role), `this contract does not support the \"${role}\" role`);\n    const resolvedAddress = await resolveAddress(address);\n    const revokeFunctionName = await this.getRevokeRoleFunctionName(resolvedAddress);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: revokeFunctionName,\n      args: [getRoleHash(role), resolvedAddress]\n    });\n  });\n\n  /** **************************\n   * PRIVATE FUNCTIONS\n   ****************************/\n\n  async getRevokeRoleFunctionName(address) {\n    const resolvedAddress = await resolveAddress(address);\n    const signerAddress = await this.contractWrapper.getSignerAddress();\n    if (signerAddress.toLowerCase() === resolvedAddress.toLowerCase()) {\n      return \"renounceRole\";\n    }\n    return \"revokeRole\";\n  }\n}\n\n/**\n * Handle contract royalties\n * @remarks Configure royalties for an entire contract or a particular token.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const royaltyInfo = await contract.royalties.getDefaultRoyaltyInfo();\n * await contract.roles.setTokenRoyaltyInfo(tokenId, {\n *   seller_fee_basis_points: 100, // 1% royalty fee\n *   fee_recipient: \"0x...\", // the fee recipient\n * });\n * ```\n * @public\n */\nclass ContractRoyalty {\n  featureName = FEATURE_ROYALTY.name;\n  constructor(contractWrapper, metadata) {\n    this.contractWrapper = contractWrapper;\n    this.metadata = metadata;\n  }\n\n  /**\n   * Get the royalty recipient and fee\n   * @returns - The royalty recipient and BPS\n   * @example\n   * ```javascript\n   * const royaltyInfo = await contract.royalties.getDefaultRoyaltyInfo();\n   * console.log(royaltyInfo.fee_recipient);\n   * console.log(royaltyInfo.seller_fee_basis_points);\n   * ```\n   * @public\n   * @twfeature Royalty\n   */\n  async getDefaultRoyaltyInfo() {\n    const [royaltyRecipient, royaltyBps] = await this.contractWrapper.read(\"getDefaultRoyaltyInfo\", []);\n    // parse it on the way out to make sure we default things if they are not set\n    return CommonRoyaltySchema.parseAsync({\n      fee_recipient: royaltyRecipient,\n      seller_fee_basis_points: royaltyBps\n    });\n  }\n\n  /**\n   * Get the royalty recipient and fee of a particular token\n   * @returns - The royalty recipient and BPS\n   * @example\n   * ```javascript\n   * const royaltyInfo = await contract.royalties.getDefaultRoyaltyInfo();\n   * console.log(royaltyInfo.fee_recipient);\n   * console.log(royaltyInfo.seller_fee_basis_points);\n   * ```\n   * @public\n   * @twfeature Royalty\n   */\n  async getTokenRoyaltyInfo(tokenId) {\n    const [royaltyRecipient, royaltyBps] = await this.contractWrapper.read(\"getRoyaltyInfoForToken\", [tokenId]);\n    return CommonRoyaltySchema.parseAsync({\n      fee_recipient: royaltyRecipient,\n      seller_fee_basis_points: royaltyBps\n    });\n  }\n\n  /**\n   * Set the royalty recipient and fee\n   * @param royaltyData - the royalty recipient and fee\n   *  @example\n   * ```javascript\n   * await contract.roles.setDefaultRoyaltyInfo({\n   *   seller_fee_basis_points: 100, // 1% royalty fee\n   *   fee_recipient: \"0x...\", // the fee recipient\n   * });\n   * ```\n   * @public\n   * @twfeature Royalty\n   */\n  setDefaultRoyaltyInfo = /* @__PURE__ */buildTransactionFunction(async royaltyData => {\n    // read the metadata from the contract\n    const oldMetadata = await this.metadata.get();\n\n    // update the metadata with the new royalty data\n    // if one of the keys is \"undefined\" it will be ignored (which is the desired behavior)\n    const mergedMetadata = await this.metadata.parseInputMetadata({\n      ...oldMetadata,\n      ...royaltyData\n    });\n\n    // why not use this.metadata.set()? - because that would end up sending it's own separate transaction to `setContractURI`\n    // but we want to send both the `setRoyaltyInfo` and `setContractURI` in one transaction!\n    const contractURI = await this.metadata._parseAndUploadMetadata(mergedMetadata);\n    if (hasFunction(\"setContractURI\", this.contractWrapper)) {\n      const contractEncoder = new ContractEncoder(this.contractWrapper);\n      // encode both the functions we want to send\n      const encoded = [contractEncoder.encode(\"setDefaultRoyaltyInfo\", [mergedMetadata.fee_recipient, mergedMetadata.seller_fee_basis_points]), contractEncoder.encode(\"setContractURI\", [contractURI])];\n      // actually send the transaction and return the receipt + a way to get the new royalty info\n\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"multicall\",\n        args: [encoded],\n        parse: receipt => ({\n          receipt,\n          data: () => this.getDefaultRoyaltyInfo()\n        })\n      });\n    } else {\n      throw new Error(\"Updating royalties requires implementing ContractMetadata in your contract to support marketplaces like OpenSea.\");\n    }\n  });\n\n  /**\n   * Set the royalty recipient and fee for a particular token\n   * @param tokenId - the token id\n   * @param royaltyData - the royalty recipient and fee\n   * @example\n   * ```javascript\n   * const tokenId = 0;\n   * await contract.roles.setTokenRoyaltyInfo(tokenId, {\n   *   seller_fee_basis_points: 100, // 1% royalty fee\n   *   fee_recipient: \"0x...\", // the fee recipient\n   * });\n   * ```\n   * @public\n   * @twfeature Royalty\n   */\n  setTokenRoyaltyInfo = /* @__PURE__ */buildTransactionFunction(async (tokenId, royaltyData) => {\n    const parsedRoyaltyData = CommonRoyaltySchema.parse(royaltyData);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"setRoyaltyInfoForToken\",\n      args: [tokenId, parsedRoyaltyData.fee_recipient, parsedRoyaltyData.seller_fee_basis_points],\n      parse: receipt => ({\n        receipt,\n        data: () => this.getDefaultRoyaltyInfo()\n      })\n    });\n  });\n}\n\n/**\n * Handle primary sales recipients\n * @remarks Configure primary sale recipients for an entire contract.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const salesRecipient = await contract.sales.getRecipient();\n * await contract.sales.setRecipient(recipientWalletAddress);\n * ```\n * @public\n */\nclass ContractPrimarySale {\n  featureName = FEATURE_PRIMARY_SALE.name;\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Get the primary sale recipient\n   * @returns the wallet address.\n   * @example\n   * ```javascript\n   * const salesRecipient = await contract.sales.getRecipient();\n   * ```\n   * @public\n   * @twfeature PrimarySale\n   */\n  async getRecipient() {\n    const result = await this.contractWrapper.read(\"primarySaleRecipient\", []);\n    return result;\n  }\n\n  /**\n   * Set the primary sale recipient\n   * @param recipient - the wallet address\n   * @example\n   * ```javascript\n   * await contract.sales.setRecipient(recipientWalletAddress);\n   * ```\n   * @public\n   * @twfeature PrimarySale\n   */\n  setRecipient = /* @__PURE__ */buildTransactionFunction(async recipient => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"setPrimarySaleRecipient\",\n      args: [recipient]\n    });\n  });\n}\n\nconst FALLBACK_METADATA = {\n  name: \"Failed to load NFT metadata\"\n};\n\n/**\n * fetches the token metadata\n * @param tokenId - the id (to get it back in the output)\n * @param tokenUri - the uri to fetch\n * @param storage - which storage to fetch from\n *\n * @internal\n */\nasync function fetchTokenMetadata(tokenId, tokenUri, storage) {\n  // check for base64 encoded JSON\n  if (tokenUri.startsWith(\"data:application/json;base64\") && typeof Buffer !== \"undefined\") {\n    const base64 = tokenUri.split(\",\")[1];\n    const jsonMetadata = JSON.parse(Buffer.from(base64, \"base64\").toString(\"utf-8\"));\n    return CommonNFTOutput.parse({\n      ...jsonMetadata,\n      id: BigNumber.from(tokenId).toString(),\n      uri: tokenUri\n    });\n  }\n  // handle dynamic id URIs (2 possible formats)\n  const parsedUri = tokenUri.replace(\"{id}\", utils.hexZeroPad(BigNumber.from(tokenId).toHexString(), 32).slice(2));\n  let jsonMetadata;\n  try {\n    jsonMetadata = await storage.downloadJSON(parsedUri);\n  } catch (err) {\n    const unparsedTokenIdUri = tokenUri.replace(\"{id}\", BigNumber.from(tokenId).toString());\n    try {\n      jsonMetadata = await storage.downloadJSON(unparsedTokenIdUri);\n    } catch (e) {\n      console.warn(`failed to get token metadata: ${JSON.stringify({\n        tokenId: tokenId.toString(),\n        tokenUri\n      })} -- falling back to default metadata`);\n      jsonMetadata = FALLBACK_METADATA;\n    }\n  }\n  return CommonNFTOutput.parse({\n    ...jsonMetadata,\n    id: BigNumber.from(tokenId).toString(),\n    uri: tokenUri\n  });\n}\n\n// Used for marketplace to fetch NFT metadata from contract address + tokenId\n/**\n * @internal\n * @param contractAddress\n * @param provider\n * @param tokenId\n * @param storage\n */\nasync function fetchTokenMetadataForContract(contractAddress, provider, tokenId, storage) {\n  let uri;\n  const erc165 = new Contract(contractAddress, ERC165Abi, provider);\n  const [isERC721, isERC1155] = await Promise.all([erc165.supportsInterface(InterfaceId_IERC721), erc165.supportsInterface(InterfaceId_IERC1155)]);\n  if (isERC721) {\n    const erc721 = new Contract(contractAddress, IERC721MetadataAbi, provider);\n    uri = await erc721.tokenURI(tokenId);\n  } else if (isERC1155) {\n    const erc1155 = new Contract(contractAddress, Erc1155MetadataAbi, provider);\n    uri = await erc1155.uri(tokenId);\n  } else {\n    throw Error(\"Contract must implement ERC 1155 or ERC 721.\");\n  }\n  if (!uri) {\n    // no uri found, return fallback metadata\n    return CommonNFTOutput.parse({\n      ...FALLBACK_METADATA,\n      id: BigNumber.from(tokenId).toString(),\n      uri: \"\"\n    });\n  }\n  return fetchTokenMetadata(tokenId, uri, storage);\n}\n\n/**\n * @internal\n * @param metadata\n * @param storage\n */\nasync function uploadOrExtractURI(metadata, storage) {\n  if (typeof metadata === \"string\") {\n    return metadata;\n  } else {\n    return await storage.upload(CommonNFTInput.parse(metadata));\n  }\n}\n\n/**\n * @internal\n * @param metadatas\n * @param storage\n * @param startNumber\n * @param contractAddress\n * @param signerAddress\n * @param options\n */\nasync function uploadOrExtractURIs(metadatas, storage, startNumber, options) {\n  if (isUriList(metadatas)) {\n    return metadatas;\n  } else if (isMetadataList(metadatas)) {\n    const uris = await storage.uploadBatch(metadatas.map(m => CommonNFTInput.parse(m)), {\n      rewriteFileNames: {\n        fileStartNumber: startNumber || 0\n      },\n      onProgress: options?.onProgress\n    });\n    return uris;\n  } else {\n    throw new Error(\"NFT metadatas must all be of the same type (all URI or all NFTMetadataInput)\");\n  }\n}\nfunction getBaseUriFromBatch(uris) {\n  const baseUri = uris[0].substring(0, uris[0].lastIndexOf(\"/\"));\n  for (let i = 0; i < uris.length; i++) {\n    const uri = uris[i].substring(0, uris[i].lastIndexOf(\"/\"));\n    if (baseUri !== uri) {\n      throw new Error(`Can only create batches with the same base URI for every entry in the batch. Expected '${baseUri}' but got '${uri}'`);\n    }\n  }\n\n  // Ensure that baseUri ends with trailing slash\n  return baseUri.replace(/\\/$/, \"\") + \"/\";\n}\nfunction isUriList(metadatas) {\n  return metadatas.find(m => typeof m !== \"string\") === undefined;\n}\nfunction isMetadataList(metadatas) {\n  return metadatas.find(m => typeof m !== \"object\") === undefined;\n}\n\n/**\n * Handles delayed reveal logic\n * @public\n */\nclass DelayedReveal {\n  constructor(contractWrapper, storage, featureName, nextTokenIdToMintFn) {\n    this.featureName = featureName;\n    this.nextTokenIdToMintFn = nextTokenIdToMintFn;\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n  }\n\n  /**\n   * Create a batch of encrypted NFTs that can be revealed at a later time.\n   * @remarks Create a batch of encrypted NFTs that can be revealed at a later time.\n   * @example\n   * ```javascript\n   * // the real NFTs, these will be encrypted until your reveal them!\n   * const realNFTs = [{\n   *   name: \"Common NFT #1\",\n   *   description: \"Common NFT, one of many.\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }, {\n   *   name: \"Super Rare NFT #2\",\n   *   description: \"You got a Super Rare NFT!\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }];\n   * // A placeholder NFT that people will get immediately in their wallet, until the reveal happens!\n   * const placeholderNFT = {\n   *   name: \"Hidden NFT\",\n   *   description: \"Will be revealed next week!\"\n   * };\n   * // Create and encrypt the NFTs\n   * await contract.revealer.createDelayedRevealBatch(\n   *   placeholderNFT,\n   *   realNFTs,\n   *   \"my secret password\",\n   * );\n   * ```\n   * @public\n   * @param placeholder - the placeholder NFT to show before the reveal\n   * @param metadatas - the final NFTs that will be hidden\n   * @param password - the password that will be used to reveal these NFTs\n   * @param options - additional options like upload progress\n   */\n  createDelayedRevealBatch = /* @__PURE__ */buildTransactionFunction(async (placeholder, metadatas, password, options) => {\n    if (!password) {\n      throw new Error(\"Password is required\");\n    }\n    const placeholderUris = await this.storage.uploadBatch([CommonNFTInput.parse(placeholder)], {\n      rewriteFileNames: {\n        fileStartNumber: 0\n      }\n    });\n    const placeholderUri = getBaseUriFromBatch(placeholderUris);\n    const startFileNumber = await this.nextTokenIdToMintFn();\n    const uris = await this.storage.uploadBatch(metadatas.map(m => CommonNFTInput.parse(m)), {\n      onProgress: options?.onProgress,\n      rewriteFileNames: {\n        fileStartNumber: startFileNumber.toNumber()\n      }\n    });\n    const baseUri = getBaseUriFromBatch(uris);\n    const baseUriId = await this.contractWrapper.read(\"getBaseURICount\", []);\n    const hashedPassword = await this.hashDelayRevealPassword(baseUriId, password);\n    const encryptedBaseUri = await this.contractWrapper.read(\"encryptDecrypt\", [utils.toUtf8Bytes(baseUri), hashedPassword]);\n    let data;\n    const legacyContract = await this.isLegacyContract();\n    if (legacyContract) {\n      data = encryptedBaseUri;\n    } else {\n      const chainId = await this.contractWrapper.getChainID();\n      const provenanceHash = utils.solidityKeccak256([\"bytes\", \"bytes\", \"uint256\"], [utils.toUtf8Bytes(baseUri), hashedPassword, chainId]);\n      data = utils.defaultAbiCoder.encode([\"bytes\", \"bytes32\"], [encryptedBaseUri, provenanceHash]);\n    }\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"lazyMint\",\n      args: [uris.length, placeholderUri.endsWith(\"/\") ? placeholderUri : `${placeholderUri}/`, data],\n      parse: receipt => {\n        const events = this.contractWrapper.parseLogs(\"TokensLazyMinted\", receipt?.logs);\n        const startingIndex = events[0].args.startTokenId;\n        const endingIndex = events[0].args.endTokenId;\n        const results = [];\n        for (let id = startingIndex; id.lte(endingIndex); id = id.add(1)) {\n          results.push({\n            id,\n            receipt\n          });\n        }\n        return results;\n      }\n    });\n  });\n\n  /**\n   * Reveal a batch of hidden NFTs\n   * @remarks Reveal the NFTs of a batch using the password.\n   * @example\n   * ```javascript\n   * // the batch to reveal\n   * const batchId = 0;\n   * // reveal the batch\n   * await contract.revealer.reveal(batchId, \"my secret password\");\n   * ```\n   * @public\n   * @param batchId - the id of the batch to reveal\n   * @param password - the password\n   */\n  reveal = /* @__PURE__ */buildTransactionFunction(async (batchId, password) => {\n    if (!password) {\n      throw new Error(\"Password is required\");\n    }\n    const key = await this.hashDelayRevealPassword(batchId, password);\n    // performing the reveal locally to make sure it'd succeed before sending the transaction\n    try {\n      const decryptedUri = await this.contractWrapper.callStatic().reveal(batchId, key);\n      // basic sanity check for making sure decryptedUri is valid\n      // this is optional because invalid decryption key would result in non-utf8 bytes and\n      // ethers would throw when trying to decode it\n      if (!decryptedUri.includes(\"://\") || !decryptedUri.endsWith(\"/\")) {\n        throw new Error(\"invalid password\");\n      }\n    } catch (e) {\n      throw new Error(\"invalid password\");\n    }\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"reveal\",\n      args: [batchId, key]\n    });\n  });\n\n  /**\n   * Gets the list of unrevealed NFT batches.\n   * @remarks Gets the list of unrevealed NFT batches.\n   * @example\n   * ```javascript\n   * const batches = await contract.revealer.getBatchesToReveal();\n   * ```\n   * @public\n   */\n  async getBatchesToReveal() {\n    const count = await this.contractWrapper.read(\"getBaseURICount\", []);\n    if (count.isZero()) {\n      return [];\n    }\n    const countRangeArray = Array.from(Array(count.toNumber()).keys());\n    // map over to get the base uri indices, which should be the end token id of every batch\n    const uriIndices = await Promise.all(countRangeArray.map(i => {\n      if (hasFunction(\"getBatchIdAtIndex\", this.contractWrapper)) {\n        return this.contractWrapper.read(\"getBatchIdAtIndex\", [i]);\n      }\n      if (hasFunction(\"baseURIIndices\", this.contractWrapper)) {\n        return this.contractWrapper.read(\"baseURIIndices\", [i]);\n      }\n      throw new Error(\"Contract does not have getBatchIdAtIndex or baseURIIndices.\");\n    }));\n\n    // first batch always start from 0. don't need to fetch the last batch so pop it from the range array\n    const uriIndicesWithZeroStart = uriIndices.slice(0, uriIndices.length - 1);\n\n    // returns the token uri for each batches. first batch always starts from token id 0.\n    const tokenMetadatas = await Promise.all(Array.from([0, ...uriIndicesWithZeroStart]).map(i => this.getNftMetadata(i.toString())));\n\n    // index is the uri indices, which is end token id. different from uris\n    const legacyContract = await this.isLegacyContract();\n    const encryptedUriData = await Promise.all(Array.from([...uriIndices]).map(i => legacyContract ? this.getLegacyEncryptedData(i) : this.contractWrapper.read(\"encryptedData\", [i])));\n    const encryptedBaseUris = encryptedUriData.map(data => {\n      if (utils.hexDataLength(data) > 0) {\n        if (legacyContract) {\n          return data;\n        }\n        const result = utils.defaultAbiCoder.decode([\"bytes\", \"bytes32\"], data);\n        return result[0];\n      } else {\n        return data;\n      }\n    });\n    return tokenMetadatas.map((meta, index) => ({\n      batchId: BigNumber.from(index),\n      batchUri: meta.uri,\n      placeholderMetadata: meta\n    })).filter((_, index) => utils.hexDataLength(encryptedBaseUris[index]) > 0);\n  }\n\n  /**\n   * Algorithm to hash delay reveal password, so we don't broadcast the input password on-chain.\n   *\n   * @internal\n   */\n  async hashDelayRevealPassword(batchTokenIndex, password) {\n    const chainId = await this.contractWrapper.getChainID();\n    const contractAddress = this.contractWrapper.address;\n    return utils.solidityKeccak256([\"string\", \"uint256\", \"uint256\", \"address\"], [password, chainId, batchTokenIndex, contractAddress]);\n  }\n  async getNftMetadata(tokenId) {\n    return fetchTokenMetadataForContract(this.contractWrapper.address, this.contractWrapper.getProvider(), tokenId, this.storage);\n  }\n  async isLegacyContract() {\n    if (hasFunction(\"contractVersion\", this.contractWrapper)) {\n      try {\n        const version = await this.contractWrapper.read(\"contractVersion\", []);\n        return version <= 2;\n      } catch (e) {\n        return false;\n      }\n    }\n    return false;\n  }\n  async getLegacyEncryptedData(index) {\n    const legacy = new Contract(this.contractWrapper.address, DeprecatedAbi, this.contractWrapper.getProvider());\n    const result = await legacy.functions[\"encryptedBaseURI\"](index);\n    if (result.length > 0) {\n      return result[0];\n    } else {\n      return \"0x\";\n    }\n  }\n}\n\nfunction abstractContractModelToLegacy(model) {\n  return {\n    startTimestamp: model.startTimestamp,\n    maxClaimableSupply: model.maxClaimableSupply,\n    supplyClaimed: model.supplyClaimed,\n    merkleRoot: model.merkleRoot,\n    pricePerToken: model.pricePerToken,\n    currency: model.currency,\n    quantityLimitPerTransaction: model.maxClaimablePerWallet,\n    waitTimeInSecondsBetweenClaims: model.waitTimeInSecondsBetweenClaims || 0\n  };\n}\n\nfunction abstractContractModelToNew(model) {\n  return {\n    startTimestamp: model.startTimestamp,\n    maxClaimableSupply: model.maxClaimableSupply,\n    supplyClaimed: model.supplyClaimed,\n    merkleRoot: model.merkleRoot,\n    pricePerToken: model.pricePerToken,\n    currency: model.currency,\n    quantityLimitPerWallet: model.maxClaimablePerWallet,\n    metadata: model.metadata || \"\"\n  };\n}\n\n/**\n * @internal\n * @param quantity\n * @param tokenDecimals\n */\nfunction convertQuantityToBigNumber(quantity, tokenDecimals) {\n  if (quantity === \"unlimited\") {\n    return constants.MaxUint256;\n  } else {\n    return utils.parseUnits(quantity, tokenDecimals);\n  }\n}\n\nfunction isNativeToken(tokenAddress) {\n  return tokenAddress.toLowerCase() === NATIVE_TOKEN_ADDRESS || tokenAddress.toLowerCase() === constants.AddressZero;\n}\n\n/**\n *\n * @param provider\n * @param asset\n * @returns\n * @internal\n */\nasync function fetchCurrencyMetadata(provider, asset) {\n  if (isNativeToken(asset)) {\n    const network = await provider.getNetwork();\n    const nativeToken = getNativeTokenByChainId(network.chainId);\n    return {\n      name: nativeToken.name,\n      symbol: nativeToken.symbol,\n      decimals: nativeToken.decimals\n    };\n  } else {\n    const erc20 = new Contract(asset, IERC20MetadataAbi, provider);\n    const [name, symbol, decimals] = await Promise.all([erc20.name(), erc20.symbol(), erc20.decimals()]);\n    return {\n      name,\n      symbol,\n      decimals\n    };\n  }\n}\n\nasync function parseSnapshotInputs(inputs) {\n  const chunkSize = 25000;\n  const chunks = Array.from({\n    length: Math.ceil(inputs.length / chunkSize)\n  }, (_, i) => inputs.slice(i * chunkSize, i * chunkSize + chunkSize));\n  const results = [];\n  for (const chunk of chunks) {\n    results.push(...(await SnapshotInputSchema.parseAsync(chunk)));\n  }\n  return results;\n}\n\n// shard using the first 2 hex character of the address\n// this splits the merkle tree into 256 shards\n// shard files will be 00.json, 01.json, 02.json, ..., ff.json\nconst SHARD_NYBBLES = 2;\nlet SnapshotFormatVersion = /*#__PURE__*/function (SnapshotFormatVersion) {\n  SnapshotFormatVersion[SnapshotFormatVersion[\"V1\"] = 1] = \"V1\";\n  SnapshotFormatVersion[SnapshotFormatVersion[\"V2\"] = 2] = \"V2\";\n  return SnapshotFormatVersion;\n}({}); // address, maxClaimable, price, currencyAddress\nclass ShardedMerkleTree {\n  constructor(storage, baseUri, originalEntriesUri, shardNybbles, tokenDecimals) {\n    this.storage = storage;\n    this.shardNybbles = shardNybbles;\n    this.baseUri = baseUri;\n    this.originalEntriesUri = originalEntriesUri;\n    this.tokenDecimals = tokenDecimals;\n    this.shards = {};\n    this.trees = {};\n  }\n  static async fromUri(uri, storage) {\n    try {\n      const shardedMerkleTreeInfo = await storage.downloadJSON(uri);\n      if (shardedMerkleTreeInfo.isShardedMerkleTree) {\n        return ShardedMerkleTree.fromShardedMerkleTreeInfo(shardedMerkleTreeInfo, storage);\n      }\n    } catch (e) {\n      return undefined;\n    }\n  }\n  static async fromShardedMerkleTreeInfo(info, storage) {\n    return new ShardedMerkleTree(storage, info.baseUri, info.originalEntriesUri, info.shardNybbles, info.tokenDecimals);\n  }\n  static hashEntry(entry, tokenDecimals, currencyDecimals, snapshotFormatVersion) {\n    switch (snapshotFormatVersion) {\n      case SnapshotFormatVersion.V1:\n        return utils.solidityKeccak256([\"address\", \"uint256\"], [entry.address, convertQuantityToBigNumber(entry.maxClaimable, tokenDecimals)]);\n      case SnapshotFormatVersion.V2:\n        return utils.solidityKeccak256([\"address\", \"uint256\", \"uint256\", \"address\"], [entry.address, convertQuantityToBigNumber(entry.maxClaimable, tokenDecimals), convertQuantityToBigNumber(entry.price || \"unlimited\", currencyDecimals), entry.currencyAddress || constants.AddressZero]);\n    }\n  }\n  static async fetchAndCacheDecimals(cache, provider, currencyAddress) {\n    if (!currencyAddress) {\n      return 18;\n    }\n    // cache decimals for each currency to avoid refetching for every address\n    let currencyDecimals = cache[currencyAddress];\n    if (currencyDecimals === undefined) {\n      const currencyMetadata = await fetchCurrencyMetadata(provider, currencyAddress);\n      currencyDecimals = currencyMetadata.decimals;\n      cache[currencyAddress] = currencyDecimals;\n    }\n    return currencyDecimals;\n  }\n  static async buildAndUpload(snapshotInput, tokenDecimals, provider, storage, snapshotFormatVersion) {\n    let shardNybbles = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : SHARD_NYBBLES;\n    const inputs = await parseSnapshotInputs(snapshotInput);\n\n    // TODO Could also derive shardNybbles from input size\n    const shards = {};\n    for (const snapshotEntry of inputs) {\n      const shard = snapshotEntry.address.slice(2, 2 + shardNybbles).toLowerCase();\n      if (shards[shard] === undefined) {\n        shards[shard] = [];\n      }\n      shards[shard].push(snapshotEntry);\n    }\n    const currencyDecimalMap = {};\n    // create shard => subtree root map\n    const subTrees = await Promise.all(Object.entries(shards).map(async _ref => {\n      let [shard, entries] = _ref;\n      return [shard, new MerkleTree(await Promise.all(entries.map(async entry => {\n        // cache decimals for each currency to avoid refetching for every address\n        const currencyDecimals = await ShardedMerkleTree.fetchAndCacheDecimals(currencyDecimalMap, provider, entry.currencyAddress);\n        return ShardedMerkleTree.hashEntry(entry, tokenDecimals, currencyDecimals, snapshotFormatVersion);\n      })), utils.keccak256, {\n        sort: true\n      }).getHexRoot()];\n    }));\n    const roots = Object.fromEntries(subTrees);\n    // create master tree from shard => subtree root map\n    const tree = new MerkleTree(Object.values(roots), utils.keccak256, {\n      sort: true\n    });\n    const shardsToUpload = [];\n    for (const [shardId, entries] of Object.entries(shards)) {\n      const data = {\n        proofs: tree.getProof(roots[shardId]).map(value => \"0x\" + value.data.toString(\"hex\")),\n        entries\n      };\n      shardsToUpload.push({\n        data: JSON.stringify(data),\n        name: `${shardId}.json`\n      });\n    }\n    const uris = await storage.uploadBatch(shardsToUpload);\n    const baseUri = uris[0].slice(0, uris[0].lastIndexOf(\"/\"));\n    const originalEntriesUri = await storage.upload(inputs);\n    const shardedMerkleInfo = {\n      merkleRoot: tree.getHexRoot(),\n      baseUri,\n      originalEntriesUri,\n      shardNybbles,\n      tokenDecimals,\n      isShardedMerkleTree: true\n    };\n    const masterUri = await storage.upload(shardedMerkleInfo);\n    return {\n      shardedMerkleInfo,\n      uri: masterUri\n    };\n  }\n  async getProof(address, provider, snapshotFormatVersion) {\n    const shardId = address.slice(2, 2 + this.shardNybbles).toLowerCase();\n    let shard = this.shards[shardId];\n    const currencyDecimalMap = {};\n    if (shard === undefined) {\n      try {\n        shard = this.shards[shardId] = await this.storage.downloadJSON(`${this.baseUri}/${shardId}.json`);\n        const hashedEntries = await Promise.all(shard.entries.map(async entry => {\n          // cache decimals for each currency to avoid refetching for every address\n          const currencyDecimals = await ShardedMerkleTree.fetchAndCacheDecimals(currencyDecimalMap, provider, entry.currencyAddress);\n          return ShardedMerkleTree.hashEntry(entry, this.tokenDecimals, currencyDecimals, snapshotFormatVersion);\n        }));\n        this.trees[shardId] = new MerkleTree(hashedEntries, utils.keccak256, {\n          sort: true\n        });\n      } catch (e) {\n        return null;\n      }\n    }\n    const entry = shard.entries.find(i => i.address.toLowerCase() === address.toLowerCase());\n    if (!entry) {\n      return null;\n    }\n    const currencyDecimals = await ShardedMerkleTree.fetchAndCacheDecimals(currencyDecimalMap, provider, entry.currencyAddress);\n    const leaf = ShardedMerkleTree.hashEntry(entry, this.tokenDecimals, currencyDecimals, snapshotFormatVersion);\n    const proof = this.trees[shardId].getProof(leaf).map(i => \"0x\" + i.data.toString(\"hex\"));\n    return SnapshotEntryWithProofSchema.parseAsync({\n      ...entry,\n      proof: proof.concat(shard.proofs)\n    });\n  }\n  async getAllEntries() {\n    try {\n      return await this.storage.downloadJSON(this.originalEntriesUri);\n    } catch (e) {\n      console.warn(\"Could not fetch original snapshot entries\", e);\n      return [];\n    }\n  }\n}\n\nasync function fetchSnapshotEntryForAddress(address, merkleRoot, merkleMetadata, provider, storage, snapshotFormatVersion) {\n  if (!merkleMetadata) {\n    return null;\n  }\n  const snapshotUri = merkleMetadata[merkleRoot];\n  if (snapshotUri) {\n    const raw = await storage.downloadJSON(snapshotUri);\n    if (raw.isShardedMerkleTree && raw.merkleRoot === merkleRoot) {\n      const merkleTree = await ShardedMerkleTree.fromShardedMerkleTreeInfo(raw, storage);\n      return await merkleTree.getProof(address, provider, snapshotFormatVersion);\n    }\n    // legacy non-sharded, just fetch it all and filter out\n    const snapshotData = await SnapshotSchema.parseAsync(raw);\n    if (merkleRoot === snapshotData.merkleRoot) {\n      return snapshotData.claims.find(c => c.address.toLowerCase() === address.toLowerCase()) || null;\n    }\n  }\n  return null;\n}\n\nfunction legacyContractModelToAbstract(model) {\n  return {\n    startTimestamp: model.startTimestamp,\n    maxClaimableSupply: model.maxClaimableSupply,\n    supplyClaimed: model.supplyClaimed,\n    merkleRoot: model.merkleRoot.toString(),\n    pricePerToken: model.pricePerToken,\n    currency: model.currency,\n    maxClaimablePerWallet: model.quantityLimitPerTransaction,\n    waitTimeInSecondsBetweenClaims: model.waitTimeInSecondsBetweenClaims\n  };\n}\n\nfunction newContractModelToAbstract(model) {\n  return {\n    startTimestamp: model.startTimestamp,\n    maxClaimableSupply: model.maxClaimableSupply,\n    supplyClaimed: model.supplyClaimed,\n    merkleRoot: model.merkleRoot.toString(),\n    pricePerToken: model.pricePerToken,\n    currency: model.currency,\n    maxClaimablePerWallet: model.quantityLimitPerWallet,\n    waitTimeInSecondsBetweenClaims: 0,\n    metadata: model.metadata\n  };\n}\n\n/**\n * @internal\n */\nclass RPCConnectionHandler extends EventEmitter {\n  constructor(network, options) {\n    super();\n    try {\n      this.options = SDKOptionsSchema.parse(options);\n    } catch (optionParseError) {\n      console.error(\"invalid sdk options object passed, falling back to default options\", optionParseError);\n      this.options = SDKOptionsSchema.parse({});\n    }\n    const [signer, provider] = getSignerAndProvider(network, this.options);\n    this.network = network;\n    this.signer = signer;\n    this.provider = provider;\n  }\n  /**\n   * The function to call whenever the network changes, such as when the users connects their wallet, disconnects their wallet, the connected chain changes, etc.\n   *\n   * @param network - a network, signer or provider that ethers js can interpret\n   */\n  updateSignerOrProvider(network) {\n    const [signer, provider] = getSignerAndProvider(network, this.options);\n    this.network = network;\n    this.signer = signer;\n    this.provider = provider;\n  }\n  /**\n   *\n   * @returns whether or not a signer is set, `true` if there is no signer so the class is in \"read only\" mode\n   */\n  isReadOnly() {\n    return !isSigner(this.signer);\n  }\n\n  /**\n   * Explicitly get the active signer.\n   * @returns the active signer, if there is one\n   */\n  getSigner() {\n    return this.signer;\n  }\n\n  /**\n   * Explicitly get the active provider.\n   * @returns the active provider\n   */\n  getProvider() {\n    return this.provider;\n  }\n\n  /**\n   *\n   * @returns the current signer if there is one, otherwise the active provider\n   */\n  getSignerOrProvider() {\n    return this.getSigner() || this.getProvider();\n  }\n}\n\n/**\n * @internal\n */\nclass ContractWrapper extends RPCConnectionHandler {\n  isValidContract = false;\n  customOverrides = () => ({});\n  /**\n   * @internal\n   */\n\n  constructor(network, contractAddress, contractAbi, options, storage) {\n    super(network, options);\n    this.abi = contractAbi;\n    this.address = contractAddress;\n    // set up the contract\n    this.writeContract = new Contract(contractAddress, contractAbi, this.getSignerOrProvider());\n    // setup the read only contract\n    this.readContract = this.writeContract.connect(this.getProvider());\n    this.storage = storage;\n  }\n  updateSignerOrProvider(network) {\n    // update the underlying base class\n    super.updateSignerOrProvider(network);\n    // re-connect the contract with the new signer / provider\n    this.writeContract = this.writeContract.connect(this.getSignerOrProvider());\n    // setup the read only contract\n    this.readContract = this.writeContract.connect(this.getProvider());\n  }\n  updateAbi(updatedAbi) {\n    // re-connect the contract with the new signer / provider\n    this.writeContract = new Contract(this.address, updatedAbi, this.getSignerOrProvider());\n\n    // setup the read only contract\n    this.readContract = this.writeContract.connect(this.getProvider());\n    this.abi = AbiSchema.parse(updatedAbi);\n  }\n\n  /**\n   * @internal\n   */\n  async getChainID() {\n    const provider = this.getProvider();\n    const {\n      chainId\n    } = await provider.getNetwork();\n    return chainId;\n  }\n  /**\n   * @internal\n   */\n  async getSignerAddress() {\n    const signer = this.getSigner();\n    if (!signer) {\n      throw new Error(\"This action requires a connected wallet to sign the transaction. Please pass a valid signer to the SDK.\");\n    }\n    return await signer.getAddress();\n  }\n\n  /**\n   * @internal\n   */\n  callStatic() {\n    return this.writeContract.callStatic;\n  }\n\n  /**\n   * @internal\n   */\n  async getCallOverrides() {\n    return getDefaultGasOverrides(this.getProvider());\n  }\n\n  /**\n   * @internal\n   */\n  emitTransactionEvent(status, transactionHash) {\n    this.emit(EventType.Transaction, {\n      status,\n      transactionHash\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async multiCall(encoded) {\n    return this.sendTransaction(\"multicall\", [encoded]);\n  }\n\n  /**\n   * @internal\n   */\n  async estimateGas(fn, args) {\n    return this.writeContract.estimateGas[fn](...args);\n  }\n\n  /**\n   * @internal\n   */\n  withTransactionOverride(hook) {\n    this.customOverrides = hook;\n  }\n\n  /**\n   *\n   * @param functionName The function name on the contract to call\n   * @param args The arguments to be passed to the functionName\n   * @returns The return value of the function call\n   */\n  async read(functionName, args) {\n    const functions = extractFunctionsFromAbi(AbiSchema.parse(this.abi)).filter(f => f.name === functionName);\n    if (!functions.length) {\n      throw new Error(`Function \"${functionName.toString()}\" not found in contract. Check your dashboard for the list of functions available`);\n    }\n    const fn = functions.find(f => f.name === functionName && f.inputs.length === args.length);\n\n    // TODO extract this and re-use for deploy function to check constructor args\n    if (!fn) {\n      throw new Error(`Function \"${functionName.toString()}\" requires ${functions[0].inputs.length} arguments, but ${args.length} were provided.\\nExpected function signature: ${functions[0].signature}`);\n    }\n    const ethersFnName = `${functionName.toString()}(${fn.inputs.map(i => i.type).join()})`;\n\n    // check if the function exists on the contract, otherwise use the name passed in\n    const fnName = ethersFnName in this.readContract.functions ? ethersFnName : functionName;\n    if (fn.stateMutability === \"view\" || fn.stateMutability === \"pure\") {\n      // read function\n      const result = await this.readContract[fnName.toString()](...args);\n      return result;\n    }\n    throw new Error(\"Cannot call a write function with read()\");\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName) {\n    let args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    let overrides = arguments.length > 2 ? arguments[2] : undefined;\n    // parse last arg as tx options if present\n    const txOptions = overrides ? await CallOverrideSchema.parseAsync(overrides) : undefined;\n    const functions = extractFunctionsFromAbi(AbiSchema.parse(this.abi)).filter(f => f.name === functionName);\n    if (!functions.length) {\n      throw new Error(`Function \"${functionName}\" not found in contract. Check your dashboard for the list of functions available`);\n    }\n    const fn = functions.find(f => f.name === functionName && f.inputs.length === args.length);\n\n    // TODO extract this and re-use for deploy function to check constructor args\n    if (!fn) {\n      throw new Error(`Function \"${functionName}\" requires ${functions[0].inputs.length} arguments, but ${args.length} were provided.\\nExpected function signature: ${functions[0].signature}`);\n    }\n    const ethersFnName = `${functionName}(${fn.inputs.map(i => i.type).join()})`;\n\n    // check if the function exists on the contract, otherwise use the name passed in\n    const fnName = ethersFnName in this.readContract.functions ? ethersFnName : functionName;\n\n    // TODO validate each argument\n    if (fn.stateMutability === \"view\" || fn.stateMutability === \"pure\") {\n      // read function\n      return txOptions ? this.readContract[fnName](...args, txOptions) : this.readContract[fnName](...args);\n    } else {\n      // write function\n      const receipt = await this.sendTransaction(fnName, args, txOptions);\n      return {\n        receipt\n      };\n    }\n  }\n\n  /**\n   * @internal\n   */\n  async sendTransaction(\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  fn, args, callOverrides) {\n    if (!callOverrides) {\n      callOverrides = await this.getCallOverrides();\n    }\n    // if a custom override is set, merge our override with the custom one\n    callOverrides = {\n      ...callOverrides,\n      ...this.customOverrides()\n    };\n    // clear up the override (single use)\n    this.customOverrides = () => ({});\n    if (this.options?.gasless && (\"openzeppelin\" in this.options.gasless || \"biconomy\" in this.options.gasless)) {\n      if (fn === \"multicall\" && Array.isArray(args[0]) && args[0].length > 0) {\n        const from = await this.getSignerAddress();\n        args[0] = args[0].map(tx => utils.solidityPack([\"bytes\", \"address\"], [tx, from]));\n      }\n      const provider = this.getProvider();\n      const txHash = await this.sendGaslessTransaction(fn, args, callOverrides);\n      this.emitTransactionEvent(\"submitted\", txHash);\n      const receipt = await provider.waitForTransaction(txHash);\n      this.emitTransactionEvent(\"completed\", txHash);\n      return receipt;\n    } else {\n      // one time verification that this is a valid contract (to avoid sending funds to wrong addresses)\n      if (!this.isValidContract) {\n        const code = await this.getProvider().getCode(this.address);\n        this.isValidContract = code !== \"0x\";\n        if (!this.isValidContract) {\n          throw new Error(\"The address you're trying to send a transaction to is not a smart contract. Make sure you are on the correct network and the contract address is correct\");\n        }\n      }\n      const tx = await this.sendTransactionByFunction(fn, args, callOverrides);\n      this.emitTransactionEvent(\"submitted\", tx.hash);\n\n      // tx.wait() can fail so we need to wrap it with a catch\n      let receipt;\n      try {\n        receipt = await tx.wait();\n      } catch (err) {\n        try {\n          // If tx.wait() fails, it just gives us a generic \"transaction failed\"\n          // error. So instead, we need to call static to get an informative error message\n          await this.writeContract.callStatic[fn](...args, ...(callOverrides.value ? [{\n            value: callOverrides.value\n          }] : []));\n        } catch (staticErr) {\n          throw await this.formatError(staticErr, fn, args, callOverrides);\n        }\n        throw await this.formatError(err, fn, args, callOverrides);\n      }\n      this.emitTransactionEvent(\"completed\", tx.hash);\n      return receipt;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  async sendTransactionByFunction(fn, args, callOverrides) {\n    const func = this.writeContract.functions[fn];\n    if (!func) {\n      throw new Error(`invalid function: \"${fn.toString()}\"`);\n    }\n\n    // First, if no gasLimit is passed, call estimate gas ourselves\n    if (!callOverrides.gasLimit) {\n      try {\n        callOverrides.gasLimit = await this.writeContract.estimateGas[fn](...args, callOverrides);\n      } catch (e) {\n        // If gas estimation fails, we'll call static to get a better error message\n        try {\n          await this.writeContract.callStatic[fn](...args, ...(callOverrides.value ? [{\n            value: callOverrides.value\n          }] : []));\n        } catch (err) {\n          throw await this.formatError(err, fn, args, callOverrides);\n        }\n      }\n    }\n\n    // Now there should be no gas estimate errors\n    try {\n      return await func(...args, callOverrides);\n    } catch (err) {\n      throw await this.formatError(err, fn, args, callOverrides);\n    }\n  }\n  async formatError(error, fn, args, callOverrides) {\n    const provider = this.getProvider();\n\n    // Get metadata for transaction to populate into error\n    const network = await provider.getNetwork();\n    const from = await (callOverrides.from || this.getSignerAddress());\n    const to = this.address;\n    const data = this.readContract.interface.encodeFunctionData(fn, args);\n    const value = BigNumber.from(callOverrides.value || 0);\n    const rpcUrl = provider.connection?.url;\n\n    // Render function signature with arguments filled in\n    const functionSignature = this.readContract.interface.getFunction(fn);\n    const methodArgs = args.map(arg => {\n      if (JSON.stringify(arg).length <= 80) {\n        return JSON.stringify(arg);\n      }\n      return JSON.stringify(arg, undefined, 2);\n    });\n    const joinedArgs = methodArgs.join(\", \").length <= 80 ? methodArgs.join(\", \") : \"\\n\" + methodArgs.map(arg => \"  \" + arg.split(\"\\n\").join(\"\\n  \")).join(\",\\n\") + \"\\n\";\n    const method = `${functionSignature.name}(${joinedArgs})`;\n    const hash = error.transactionHash || error.transaction?.hash || error.receipt?.transactionHash;\n\n    // Parse the revert reason from the error\n    const reason = parseRevertReason(error);\n\n    // Get contract sources for stack trace\n    let sources = undefined;\n    let contractName = undefined;\n    try {\n      const metadata = await fetchContractMetadataFromAddress(this.address, this.getProvider(), this.storage, this.options);\n      if (metadata.name) {\n        contractName = metadata.name;\n      }\n      if (metadata.metadata.sources) {\n        sources = await fetchSourceFilesFromMetadata(metadata, this.storage);\n      }\n    } catch (err) {\n      // no-op\n    }\n    return new TransactionError({\n      reason,\n      from,\n      to,\n      method,\n      data,\n      network,\n      rpcUrl,\n      value,\n      hash,\n      contractName,\n      sources\n    }, error);\n  }\n\n  /**\n   * @internal\n   */\n  async sendGaslessTransaction(fn) {\n    let args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    let callOverrides = arguments.length > 2 ? arguments[2] : undefined;\n    const signer = this.getSigner();\n    invariant(signer, \"Cannot execute gasless transaction without valid signer\");\n    const chainId = await this.getChainID();\n    const from = await this.getSignerAddress();\n    const to = this.writeContract.address;\n    const value = callOverrides?.value || 0;\n    if (BigNumber.from(value).gt(0)) {\n      throw new Error(\"Cannot send native token value with gasless transaction\");\n    }\n    const data = this.writeContract.interface.encodeFunctionData(fn, args);\n    let gas = BigNumber.from(0);\n    try {\n      const gasEstimate = await this.readContract.estimateGas[fn](...args);\n      gas = gasEstimate.mul(2);\n    } catch (e) {\n      // ignore\n    }\n\n    // in some cases WalletConnect doesn't properly gives an estimate for how much gas it would actually use.\n    // as a fix, we're setting it to a high arbitrary number (500k) as the gas limit that should cover for most function calls.\n    if (gas.lt(100000)) {\n      gas = BigNumber.from(500000);\n    }\n\n    // check for gas override in callOverrides\n    if (callOverrides.gasLimit && BigNumber.from(callOverrides.gasLimit).gt(gas)) {\n      gas = BigNumber.from(callOverrides.gasLimit);\n    }\n    const tx = {\n      from,\n      to,\n      data,\n      chainId,\n      gasLimit: gas,\n      functionName: fn.toString(),\n      functionArgs: args,\n      callOverrides\n    };\n    return await this.defaultGaslessSendFunction(tx);\n  }\n  async signTypedData(signer, domain, types, message) {\n    this.emit(EventType.Signature, {\n      status: \"submitted\",\n      message,\n      signature: \"\"\n    });\n    const {\n      signature: sig\n    } = await signTypedDataInternal(signer, domain, types, message);\n    this.emit(EventType.Signature, {\n      status: \"completed\",\n      message,\n      signature: sig\n    });\n    return sig;\n  }\n  parseLogs(eventName, logs) {\n    if (!logs || logs.length === 0) {\n      return [];\n    }\n    const topic = this.writeContract.interface.getEventTopic(eventName);\n    const parsedLogs = logs.filter(x => x.topics.indexOf(topic) >= 0);\n    return parsedLogs.map(l => this.writeContract.interface.parseLog(l));\n  }\n  async defaultGaslessSendFunction(transaction) {\n    if (this.options.gasless && \"biconomy\" in this.options.gasless) {\n      return this.biconomySendFunction(transaction);\n    }\n    return this.defenderSendFunction(transaction);\n  }\n  async biconomySendFunction(transaction) {\n    invariant(this.options.gasless && \"biconomy\" in this.options.gasless, \"calling biconomySendFunction without biconomy\");\n    const signer = this.getSigner();\n    const provider = this.getProvider();\n    invariant(signer && provider, \"signer and provider must be set\");\n    const forwarder = new Contract(getContractAddressByChainId(transaction.chainId, \"biconomyForwarder\"), BiconomyForwarderAbi, provider);\n    const batchId = 0;\n    const batchNonce = await getAndIncrementNonce(forwarder, \"getNonce\", [transaction.from, batchId]);\n    const request = {\n      from: transaction.from,\n      to: transaction.to,\n      token: constants.AddressZero,\n      txGas: transaction.gasLimit.toNumber(),\n      tokenGasPrice: \"0\",\n      batchId,\n      batchNonce: batchNonce.toNumber(),\n      deadline: Math.floor(Date.now() / 1000 + (this.options?.gasless && \"biconomy\" in this.options.gasless && this.options.gasless.biconomy?.deadlineSeconds || 3600)),\n      data: transaction.data\n    };\n    const hashToSign = utils.arrayify(utils.solidityKeccak256([\"address\", \"address\", \"address\", \"uint256\", \"uint256\", \"uint256\", \"uint256\", \"uint256\", \"bytes32\"], [request.from, request.to, request.token, request.txGas, request.tokenGasPrice, request.batchId, request.batchNonce, request.deadline, utils.keccak256(request.data)]));\n    this.emit(EventType.Signature, {\n      status: \"submitted\",\n      message: hashToSign,\n      signature: \"\"\n    });\n    const signature = await signer.signMessage(hashToSign);\n    this.emit(EventType.Signature, {\n      status: \"completed\",\n      message: hashToSign,\n      signature\n    });\n    const response = await fetch(\"https://api.biconomy.io/api/v2/meta-tx/native\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        from: transaction.from,\n        apiId: this.options.gasless.biconomy.apiId,\n        params: [request, signature],\n        to: transaction.to,\n        gasLimit: transaction.gasLimit.toHexString()\n      }),\n      headers: {\n        \"x-api-key\": this.options.gasless.biconomy.apiKey,\n        \"Content-Type\": \"application/json;charset=utf-8\"\n      }\n    });\n    if (response.ok) {\n      const resp = await response.json();\n      if (!resp.txHash) {\n        throw new Error(`relay transaction failed: ${resp.log}`);\n      }\n      return resp.txHash;\n    }\n    throw new Error(`relay transaction failed with status: ${response.status} (${response.statusText})`);\n  }\n  async defenderSendFunction(transaction) {\n    invariant(this.options.gasless && \"openzeppelin\" in this.options.gasless, \"calling openzeppelin gasless transaction without openzeppelin config in the SDK options\");\n    const signer = this.getSigner();\n    const provider = this.getProvider();\n    invariant(signer, \"provider is not set\");\n    invariant(provider, \"provider is not set\");\n    const forwarderAddress = this.options.gasless.openzeppelin.relayerForwarderAddress || (this.options.gasless.openzeppelin.useEOAForwarder ? CONTRACT_ADDRESSES[transaction.chainId].openzeppelinForwarderEOA || (await computeEOAForwarderAddress(this.getProvider(), this.storage, \"\", this.options.clientId, this.options.secretKey)) : CONTRACT_ADDRESSES[transaction.chainId].openzeppelinForwarder || (await computeForwarderAddress(this.getProvider(), this.storage, \"\", this.options.clientId, this.options.secretKey)));\n    const forwarder = new Contract(forwarderAddress, ForwarderABI, provider);\n    const nonce = await getAndIncrementNonce(forwarder, \"getNonce\", [transaction.from]);\n    let domain;\n    let types;\n    let message;\n    if (this.options.gasless.experimentalChainlessSupport) {\n      domain = {\n        name: \"GSNv2 Forwarder\",\n        version: \"0.0.1\",\n        verifyingContract: forwarderAddress\n      };\n      types = {\n        ForwardRequest: ChainAwareForwardRequest\n      };\n      message = {\n        from: transaction.from,\n        to: transaction.to,\n        value: BigNumber.from(0).toString(),\n        gas: BigNumber.from(transaction.gasLimit).toString(),\n        nonce: BigNumber.from(nonce).toString(),\n        data: transaction.data,\n        chainid: BigNumber.from(transaction.chainId).toString()\n      };\n    } else {\n      domain = {\n        name: this.options.gasless.openzeppelin.domainName,\n        version: this.options.gasless.openzeppelin.domainVersion,\n        chainId: transaction.chainId,\n        verifyingContract: forwarderAddress\n      };\n      types = {\n        ForwardRequest\n      };\n      message = {\n        from: transaction.from,\n        to: transaction.to,\n        value: BigNumber.from(0).toString(),\n        gas: BigNumber.from(transaction.gasLimit).toString(),\n        nonce: BigNumber.from(nonce).toString(),\n        data: transaction.data\n      };\n    }\n    let signature;\n    this.emit(EventType.Signature, {\n      status: \"submitted\",\n      message,\n      signature: \"\"\n    });\n\n    // if the executing function is \"approve\" and matches with erc20 approve signature\n    // and if the token supports permit, then we use permit for gasless instead of approve.\n    if (transaction.functionName === \"approve\" && transaction.functionArgs.length === 2) {\n      const spender = transaction.functionArgs[0];\n      const amount = transaction.functionArgs[1];\n      // TODO: support DAI permit by signDAIPermit\n      const {\n        message: permit,\n        signature: sig\n      } = await signEIP2612Permit(signer, this.writeContract.address, transaction.from, spender, amount);\n      const {\n        r,\n        s,\n        v\n      } = utils.splitSignature(sig);\n      message = {\n        to: this.address,\n        owner: permit.owner,\n        spender: permit.spender,\n        value: BigNumber.from(permit.value).toString(),\n        nonce: BigNumber.from(permit.nonce).toString(),\n        deadline: BigNumber.from(permit.deadline).toString(),\n        r,\n        s,\n        v\n      };\n      signature = sig;\n    } else {\n      const {\n        signature: sig\n      } = await signTypedDataInternal(signer, domain, types, message);\n      signature = sig;\n    }\n    let messageType = \"forward\";\n\n    // if has owner property then it's permit :)\n    if (message?.owner) {\n      messageType = \"permit\";\n    }\n    const body = JSON.stringify({\n      request: message,\n      signature,\n      forwarderAddress,\n      type: messageType\n    });\n    this.emit(EventType.Signature, {\n      status: \"completed\",\n      message,\n      signature\n    });\n    const response = await fetch(this.options.gasless.openzeppelin.relayerUrl, {\n      method: \"POST\",\n      body\n    });\n    if (response.ok) {\n      const resp = await response.json();\n      if (!resp.result) {\n        throw new Error(`Relay transaction failed: ${resp.message}`);\n      }\n      const result = JSON.parse(resp.result);\n      return result.txHash;\n    }\n    throw new Error(`relay transaction failed with status: ${response.status} (${response.statusText})`);\n  }\n}\n\nasync function approveErc20Allowance(contractToApprove, currencyAddress, price, quantity, tokenDecimals) {\n  const signer = contractToApprove.getSigner();\n  const provider = contractToApprove.getProvider();\n  const erc20 = new ContractWrapper(signer || provider, currencyAddress, ERC20Abi, contractToApprove.options, contractToApprove.storage);\n  const owner = await contractToApprove.getSignerAddress();\n  const spender = contractToApprove.address;\n  const allowance = await erc20.read(\"allowance\", [owner, spender]);\n  const totalPrice = BigNumber.from(price).mul(BigNumber.from(quantity)).div(utils.parseUnits(\"1\", tokenDecimals));\n  if (allowance.lt(totalPrice)) {\n    await erc20.sendTransaction(\"approve\", [spender, allowance.add(totalPrice)]);\n  }\n}\n\n/**\n *\n * @param provider\n * @param inputPrice\n * @param currencyAddress\n * @returns\n * @internal\n */\nasync function normalizePriceValue(provider, inputPrice, currencyAddress) {\n  const metadata = await fetchCurrencyMetadata(provider, currencyAddress);\n  return utils.parseUnits(AmountSchema.parse(inputPrice), metadata.decimals);\n}\n\n/**\n * Returns proofs and the overrides required for the transaction.\n * @internal\n * @returns - `overrides` and `proofs` as an object.\n */\nasync function prepareClaim(addressToClaim, quantity, activeClaimCondition, merkleMetadataFetcher, tokenDecimals, contractWrapper, storage, checkERC20Allowance, snapshotFormatVersion) {\n  let maxClaimable = convertQuantityToBigNumber(activeClaimCondition.maxClaimablePerWallet, tokenDecimals);\n  let proofs = [utils.hexZeroPad([0], 32)];\n  let priceInProof = activeClaimCondition.price; // the price to send to the contract in claim proofs\n  let currencyAddressInProof = activeClaimCondition.currencyAddress;\n  try {\n    if (!activeClaimCondition.merkleRootHash.toString().startsWith(constants.AddressZero)) {\n      const snapshotEntry = await fetchSnapshotEntryForAddress(addressToClaim, activeClaimCondition.merkleRootHash.toString(), await merkleMetadataFetcher(), contractWrapper.getProvider(), storage, snapshotFormatVersion);\n      if (snapshotEntry) {\n        proofs = snapshotEntry.proof;\n        // override only if not default values (unlimited for quantity, zero addr for currency)\n        maxClaimable = snapshotEntry.maxClaimable === \"unlimited\" ? constants.MaxUint256 : utils.parseUnits(snapshotEntry.maxClaimable, tokenDecimals);\n        priceInProof = snapshotEntry.price === undefined || snapshotEntry.price === \"unlimited\" ? constants.MaxUint256 : await normalizePriceValue(contractWrapper.getProvider(), snapshotEntry.price, snapshotEntry.currencyAddress || constants.AddressZero);\n        currencyAddressInProof = snapshotEntry.currencyAddress || constants.AddressZero;\n      } else {\n        // if no snapshot entry, and it's a v1 format (exclusive allowlist) then address can't claim\n        if (snapshotFormatVersion === SnapshotFormatVersion.V1) {\n          throw new Error(\"No claim found for this address\");\n        }\n        // but if its snapshot v2 (override list behavior) then address can still claim with default settings\n      }\n    }\n  } catch (e) {\n    // have to handle the valid error case that we *do* want to throw on\n    if (e?.message === \"No claim found for this address\") {\n      throw e;\n    }\n    // other errors we wanna ignore and try to continue\n    console.warn(\"failed to check claim condition merkle root hash, continuing anyways\", e);\n  }\n  const overrides = (await contractWrapper.getCallOverrides()) || {};\n  // the actual price to check allowance against\n  // if proof price is unlimited, then we use the price from the claim condition\n  // this mimics the contract behavior\n  const pricePerToken = priceInProof.toString() !== constants.MaxUint256.toString() ? priceInProof : activeClaimCondition.price;\n  // same for currency address\n  const currencyAddress = currencyAddressInProof !== constants.AddressZero ? currencyAddressInProof : activeClaimCondition.currencyAddress;\n  if (pricePerToken.gt(0)) {\n    if (isNativeToken(currencyAddress)) {\n      overrides[\"value\"] = BigNumber.from(pricePerToken).mul(quantity).div(utils.parseUnits(\"1\", tokenDecimals));\n    } else if (checkERC20Allowance) {\n      await approveErc20Allowance(contractWrapper, currencyAddress, pricePerToken, quantity, tokenDecimals);\n    }\n  }\n  return {\n    overrides,\n    proofs,\n    maxClaimable,\n    price: pricePerToken,\n    currencyAddress: currencyAddress,\n    priceInProof,\n    currencyAddressInProof\n  };\n}\n\n/**\n * Create a snapshot (merkle tree) from a list of addresses and uploads it to IPFS\n * @param snapshotInput - the list of addresses to hash\n * @param tokenDecimals - the token decimals\n * @param provider\n * @param storage - the storage to upload to\n * @param snapshotFormatVersion\n * @returns the generated snapshot and URI\n * @internal\n */\nasync function createSnapshot(snapshotInput, tokenDecimals, provider, storage, snapshotFormatVersion) {\n  const input = await parseSnapshotInputs(snapshotInput);\n  const addresses = input.map(i => i.address);\n  const hasDuplicates = new Set(addresses).size < addresses.length;\n  if (hasDuplicates) {\n    throw new DuplicateLeafsError();\n  }\n  const tree = await ShardedMerkleTree.buildAndUpload(input, tokenDecimals, provider, storage, snapshotFormatVersion);\n  return {\n    merkleRoot: tree.shardedMerkleInfo.merkleRoot,\n    snapshotUri: tree.uri\n  };\n}\n\nfunction compare(a, b) {\n  const left = BigNumber.from(a);\n  const right = BigNumber.from(b);\n  if (left.eq(right)) {\n    return 0;\n  } else if (left.gt(right)) {\n    return 1;\n  } else {\n    return -1;\n  }\n}\n\n/**\n * @internal\n * Decorates claim conditions with merkle roots from snapshots if present\n * @param claimConditionInputs\n * @param tokenDecimals\n * @param provider\n * @param storage\n * @param snapshotFormatVersion\n */\nasync function processSnapshotData(claimConditionInputs, tokenDecimals, provider, storage, snapshotFormatVersion) {\n  const snapshotInfos = [];\n  const inputsWithSnapshots = await Promise.all(claimConditionInputs.map(async conditionInput => {\n    // check snapshots and upload if provided\n    if (conditionInput.snapshot && conditionInput.snapshot.length > 0) {\n      const snapshotInfo = await createSnapshot(conditionInput.snapshot, tokenDecimals, provider, storage, snapshotFormatVersion);\n      snapshotInfos.push(snapshotInfo);\n      conditionInput.merkleRootHash = snapshotInfo.merkleRoot;\n    } else {\n      // if no snapshot is passed or empty, reset the merkle root\n      conditionInput.merkleRootHash = utils.hexZeroPad([0], 32);\n    }\n    // fill condition with defaults values if not provided\n    return conditionInput;\n  }));\n  return {\n    inputsWithSnapshots,\n    snapshotInfos\n  };\n}\n\n/**\n * Converts a local SDK model to contract model\n * @param c\n * @param tokenDecimals\n * @param provider\n * @param storage\n * @internal\n */\nasync function convertToContractModel(c, tokenDecimals, provider, storage) {\n  const currency = c.currencyAddress === constants.AddressZero ? NATIVE_TOKEN_ADDRESS : c.currencyAddress;\n  const maxClaimableSupply = convertQuantityToBigNumber(c.maxClaimableSupply, tokenDecimals);\n  const maxClaimablePerWallet = convertQuantityToBigNumber(c.maxClaimablePerWallet, tokenDecimals);\n  let metadataOrUri;\n  if (c.metadata) {\n    if (typeof c.metadata === \"string\") {\n      metadataOrUri = c.metadata;\n    } else {\n      metadataOrUri = await storage.upload(c.metadata);\n    }\n  }\n  return {\n    startTimestamp: c.startTime,\n    maxClaimableSupply,\n    supplyClaimed: 0,\n    maxClaimablePerWallet,\n    pricePerToken: await normalizePriceValue(provider, c.price, currency),\n    currency,\n    merkleRoot: c.merkleRootHash.toString(),\n    waitTimeInSecondsBetweenClaims: c.waitInSeconds || 0,\n    metadata: metadataOrUri\n  };\n}\n\n/**\n * Create and uploads snapshots + converts claim conditions to contract format\n * @param claimConditionInputs\n * @param tokenDecimals\n * @param provider\n * @param storage\n * @param snapshotFormatVersion\n * @internal\n */\nasync function processClaimConditionInputs(claimConditionInputs, tokenDecimals, provider, storage, snapshotFormatVersion) {\n  const {\n    inputsWithSnapshots,\n    snapshotInfos\n  } = await processSnapshotData(claimConditionInputs, tokenDecimals, provider, storage, snapshotFormatVersion);\n  const parsedInputs = await ClaimConditionInputArray.parseAsync(inputsWithSnapshots);\n  // Convert processed inputs to the format the contract expects, and sort by timestamp\n  const sortedConditions = (await Promise.all(parsedInputs.map(c => convertToContractModel(c, tokenDecimals, provider, storage)))).sort((a, b) => {\n    return compare(a.startTimestamp, b.startTimestamp);\n  });\n  return {\n    snapshotInfos,\n    sortedConditions\n  };\n}\n\n/**\n *\n * @param providerOrSigner\n * @param asset\n * @param price\n * @returns\n * @internal\n */\nasync function fetchCurrencyValue(providerOrSigner, asset, price) {\n  const metadata = await fetchCurrencyMetadata(providerOrSigner, asset);\n  return {\n    ...metadata,\n    value: BigNumber.from(price),\n    displayValue: utils.formatUnits(price, metadata.decimals)\n  };\n}\n\n/**\n * @internal\n * @param merkleRoot\n * @param merkleMetadata\n * @param storage\n */\nasync function fetchSnapshot(merkleRoot, merkleMetadata, storage) {\n  if (!merkleMetadata) {\n    return null;\n  }\n  const snapshotUri = merkleMetadata[merkleRoot];\n  if (snapshotUri) {\n    const raw = await storage.downloadJSON(snapshotUri);\n    if (raw.isShardedMerkleTree && raw.merkleRoot === merkleRoot) {\n      const smt = await ShardedMerkleTree.fromUri(snapshotUri, storage);\n      return smt?.getAllEntries() || null;\n    } else {\n      const snapshotData = await SnapshotSchema.parseAsync(raw);\n      if (merkleRoot === snapshotData.merkleRoot) {\n        return snapshotData.claims.map(claim => ({\n          address: claim.address,\n          maxClaimable: claim.maxClaimable,\n          price: claim.price,\n          currencyAddress: claim.currencyAddress\n        }));\n      }\n    }\n  }\n  return null;\n}\n\n/**\n * @internal\n * @param bn\n * @param tokenDecimals\n */\nfunction convertToReadableQuantity(bn, tokenDecimals) {\n  if (bn.toString() === constants.MaxUint256.toString()) {\n    return \"unlimited\";\n  } else {\n    return utils.formatUnits(bn, tokenDecimals);\n  }\n}\n\n/**\n * Transforms a contract model to local model\n * @param pm\n * @param tokenDecimals\n * @param provider\n * @param merkleMetadata\n * @param storage\n * @param shouldDownloadSnapshot\n * @internal\n */\nasync function transformResultToClaimCondition(pm, tokenDecimals, provider, merkleMetadata, storage, shouldDownloadSnapshot) {\n  const cv = await fetchCurrencyValue(provider, pm.currency, pm.pricePerToken);\n  const maxClaimableSupply = convertToReadableQuantity(pm.maxClaimableSupply, tokenDecimals);\n  const maxClaimablePerWallet = convertToReadableQuantity(pm.maxClaimablePerWallet, tokenDecimals);\n  const availableSupply = convertToReadableQuantity(BigNumber.from(pm.maxClaimableSupply).sub(pm.supplyClaimed), tokenDecimals);\n  const currentMintSupply = convertToReadableQuantity(pm.supplyClaimed, tokenDecimals);\n  let resolvedMetadata;\n  if (pm.metadata) {\n    resolvedMetadata = await storage.downloadJSON(pm.metadata);\n  }\n  return ClaimConditionOutputSchema.parseAsync({\n    startTime: pm.startTimestamp,\n    maxClaimableSupply,\n    maxClaimablePerWallet,\n    currentMintSupply,\n    availableSupply,\n    waitInSeconds: pm.waitTimeInSecondsBetweenClaims?.toString(),\n    price: BigNumber.from(pm.pricePerToken),\n    currency: pm.currency,\n    currencyAddress: pm.currency,\n    currencyMetadata: cv,\n    merkleRootHash: pm.merkleRoot,\n    snapshot: shouldDownloadSnapshot ? await fetchSnapshot(pm.merkleRoot, merkleMetadata, storage) : undefined,\n    metadata: resolvedMetadata\n  });\n}\n\n/**\n * @internal\n * @param index\n * @param claimConditionInput\n * @param existingConditions\n */\nasync function updateExistingClaimConditions(index, claimConditionInput, existingConditions) {\n  if (index >= existingConditions.length) {\n    throw Error(`Index out of bounds - got index: ${index} with ${existingConditions.length} conditions`);\n  }\n  // merge input with existing claim condition\n  const priceDecimals = existingConditions[index].currencyMetadata.decimals;\n  const priceInWei = existingConditions[index].price;\n  const priceInTokens = utils.formatUnits(priceInWei, priceDecimals);\n\n  // merge existing (output format) with incoming (input format)\n  const newConditionParsed = await ClaimConditionInputSchema.parseAsync({\n    ...existingConditions[index],\n    price: priceInTokens,\n    ...claimConditionInput\n  });\n\n  // convert to output claim condition\n  const mergedConditionOutput = await ClaimConditionOutputSchema.parseAsync({\n    ...newConditionParsed,\n    price: priceInWei\n  });\n  return existingConditions.map((existingOutput, i) => {\n    let newConditionAtIndex;\n    if (i === index) {\n      newConditionAtIndex = mergedConditionOutput;\n    } else {\n      newConditionAtIndex = existingOutput;\n    }\n    const formattedPrice = utils.formatUnits(newConditionAtIndex.price, priceDecimals);\n    return {\n      ...newConditionAtIndex,\n      price: formattedPrice // manually transform back to input price type\n    };\n  });\n}\n\nlet Status = /*#__PURE__*/function (Status) {\n  Status[Status[\"UNSET\"] = 0] = \"UNSET\";\n  Status[Status[\"Created\"] = 1] = \"Created\";\n  Status[Status[\"Completed\"] = 2] = \"Completed\";\n  Status[Status[\"Cancelled\"] = 3] = \"Cancelled\";\n  Status[Status[\"Active\"] = 4] = \"Active\";\n  Status[Status[\"Expired\"] = 5] = \"Expired\";\n  return Status;\n}({});\n\nlet ClaimEligibility = /*#__PURE__*/function (ClaimEligibility) {\n  ClaimEligibility[\"NotEnoughSupply\"] = \"There is not enough supply to claim.\";\n  ClaimEligibility[\"AddressNotAllowed\"] = \"This address is not on the allowlist.\";\n  ClaimEligibility[\"WaitBeforeNextClaimTransaction\"] = \"Not enough time since last claim transaction. Please wait.\";\n  ClaimEligibility[\"ClaimPhaseNotStarted\"] = \"Claim phase has not started yet.\";\n  ClaimEligibility[\"AlreadyClaimed\"] = \"You have already claimed the token.\";\n  ClaimEligibility[\"WrongPriceOrCurrency\"] = \"Incorrect price or currency.\";\n  ClaimEligibility[\"OverMaxClaimablePerWallet\"] = \"Cannot claim more than maximum allowed quantity.\";\n  ClaimEligibility[\"NotEnoughTokens\"] = \"There are not enough tokens in the wallet to pay for the claim.\";\n  ClaimEligibility[\"NoActiveClaimPhase\"] = \"There is no active claim phase at the moment. Please check back in later.\";\n  ClaimEligibility[\"NoClaimConditionSet\"] = \"There is no claim condition set.\";\n  ClaimEligibility[\"NoWallet\"] = \"No wallet connected.\";\n  ClaimEligibility[\"Unknown\"] = \"No claim conditions found.\";\n  return ClaimEligibility;\n}({});\n\n/**\n * Manages claim conditions for NFT Drop contracts\n * @public\n */\nclass DropClaimConditions {\n  constructor(contractWrapper, metadata, storage) {\n    this.storage = storage;\n    this.contractWrapper = contractWrapper;\n    this.metadata = metadata;\n  }\n\n  /** ***************************************\n   * READ FUNCTIONS\n   *****************************************/\n\n  /**\n   * Get the currently active claim condition\n   *\n   * @returns the claim condition metadata\n   */\n  async getActive(options) {\n    const cc = await this.get();\n    const metadata = await this.metadata.get();\n    return await transformResultToClaimCondition(cc, await this.getTokenDecimals(), this.contractWrapper.getProvider(), metadata.merkle || {}, this.storage, options?.withAllowList || false);\n  }\n  async get(conditionId) {\n    if (this.isLegacySinglePhaseDrop(this.contractWrapper)) {\n      const contractModel = await this.contractWrapper.read(\"claimCondition\", []);\n      return legacyContractModelToAbstract(contractModel);\n    } else if (this.isLegacyMultiPhaseDrop(this.contractWrapper)) {\n      const id = conditionId !== undefined ? conditionId : await this.contractWrapper.read(\"getActiveClaimConditionId\", []);\n      const contractModel = await this.contractWrapper.read(\"getClaimConditionById\", [id]);\n      return legacyContractModelToAbstract(contractModel);\n    } else if (this.isNewSinglePhaseDrop(this.contractWrapper)) {\n      const contractModel = await this.contractWrapper.read(\"claimCondition\", []);\n      return newContractModelToAbstract(contractModel);\n    } else if (this.isNewMultiphaseDrop(this.contractWrapper)) {\n      const id = conditionId !== undefined ? conditionId : await this.contractWrapper.read(\"getActiveClaimConditionId\", []);\n      const contractModel = await this.contractWrapper.read(\"getClaimConditionById\", [id]);\n      return newContractModelToAbstract(contractModel);\n    } else {\n      throw new Error(\"Contract does not support claim conditions\");\n    }\n  }\n\n  /**\n   * Get all the claim conditions\n   *\n   * @returns the claim conditions metadata\n   */\n  async getAll(options) {\n    if (this.isLegacyMultiPhaseDrop(this.contractWrapper) || this.isNewMultiphaseDrop(this.contractWrapper)) {\n      const [currentStartId, countBn] = await this.contractWrapper.read(\"claimCondition\", []);\n      const startId = currentStartId.toNumber();\n      const count = countBn.toNumber();\n      const conditions = [];\n      for (let i = startId; i < startId + count; i++) {\n        conditions.push(this.get(i));\n      }\n      const [metadata, decimals, ...fetchedConditions] = await Promise.all([this.metadata.get(), this.getTokenDecimals(), ...conditions]);\n      return Promise.all(fetchedConditions.map(c => transformResultToClaimCondition(c, decimals, this.contractWrapper.getProvider(), metadata.merkle, this.storage, options?.withAllowList || false)));\n    } else {\n      return [await this.getActive(options)];\n    }\n  }\n\n  /**\n   * Can Claim\n   *\n   * @remarks Check if the drop can currently be claimed.\n   *\n   * @example\n   * ```javascript\n   * // Quantity of tokens to check claimability of\n   * const quantity = 1;\n   * const canClaim = await contract.canClaim(quantity);\n   * ```\n   */\n  async canClaim(quantity, addressToCheck) {\n    // TODO switch to use verifyClaim\n    if (addressToCheck) {\n      addressToCheck = await resolveAddress(addressToCheck);\n    }\n    return (await this.getClaimIneligibilityReasons(quantity, addressToCheck)).length === 0;\n  }\n\n  /**\n   * For any claim conditions that a particular wallet is violating,\n   * this function returns human readable information about the\n   * breaks in the condition that can be used to inform the user.\n   *\n   * @param quantity - The desired quantity that would be claimed.\n   * @param addressToCheck - The wallet address, defaults to the connected wallet.\n   *\n   */\n  async getClaimIneligibilityReasons(quantity, addressToCheck) {\n    const reasons = [];\n    let activeConditionIndex;\n    let claimCondition;\n    const decimals = await this.getTokenDecimals();\n    const quantityWithDecimals = utils.parseUnits(AmountSchema.parse(quantity), decimals);\n    if (addressToCheck === undefined) {\n      try {\n        addressToCheck = await this.contractWrapper.getSignerAddress();\n      } catch (err) {\n        console.warn(\"failed to get signer address\", err);\n      }\n    }\n\n    // if we have been unable to get a signer address, we can't check eligibility, so return a NoWallet error reason\n    if (!addressToCheck) {\n      return [ClaimEligibility.NoWallet];\n    }\n    const resolvedAddress = await resolveAddress(addressToCheck);\n    try {\n      claimCondition = await this.getActive();\n    } catch (err) {\n      if (includesErrorMessage(err, \"!CONDITION\") || includesErrorMessage(err, \"no active mint condition\")) {\n        reasons.push(ClaimEligibility.NoClaimConditionSet);\n        return reasons;\n      }\n      console.warn(\"failed to get active claim condition\", err);\n      reasons.push(ClaimEligibility.Unknown);\n      return reasons;\n    }\n    if (claimCondition.availableSupply !== \"unlimited\") {\n      const supplyWithDecimals = utils.parseUnits(claimCondition.availableSupply, decimals);\n      if (supplyWithDecimals.lt(quantityWithDecimals)) {\n        reasons.push(ClaimEligibility.NotEnoughSupply);\n        return reasons;\n      }\n    }\n\n    // check for merkle root inclusion\n    const merkleRootArray = utils.stripZeros(claimCondition.merkleRootHash);\n    const hasAllowList = merkleRootArray.length > 0;\n    let allowListEntry = null;\n    if (hasAllowList) {\n      allowListEntry = await this.getClaimerProofs(resolvedAddress);\n      if (!allowListEntry && (this.isLegacySinglePhaseDrop(this.contractWrapper) || this.isLegacyMultiPhaseDrop(this.contractWrapper))) {\n        // exclusive allowlist behavior\n        reasons.push(ClaimEligibility.AddressNotAllowed);\n        return reasons;\n      }\n      if (allowListEntry) {\n        try {\n          const claimVerification = await this.prepareClaim(quantity, false, decimals, resolvedAddress);\n          let validMerkleProof;\n          if (this.isLegacyMultiPhaseDrop(this.contractWrapper)) {\n            activeConditionIndex = await this.contractWrapper.read(\"getActiveClaimConditionId\", []);\n            // legacy verifyClaimerMerkleProofs function\n            [validMerkleProof] = await this.contractWrapper.read(\"verifyClaimMerkleProof\", [activeConditionIndex, resolvedAddress, quantity, claimVerification.proofs, claimVerification.maxClaimable]);\n            if (!validMerkleProof) {\n              reasons.push(ClaimEligibility.AddressNotAllowed);\n              return reasons;\n            }\n          } else if (this.isLegacySinglePhaseDrop(this.contractWrapper)) {\n            [validMerkleProof] = await this.contractWrapper.read(\"verifyClaimMerkleProof\", [resolvedAddress, quantity, {\n              proof: claimVerification.proofs,\n              maxQuantityInAllowlist: claimVerification.maxClaimable\n            }]);\n            if (!validMerkleProof) {\n              reasons.push(ClaimEligibility.AddressNotAllowed);\n              return reasons;\n            }\n          } else if (this.isNewSinglePhaseDrop(this.contractWrapper)) {\n            await this.contractWrapper.read(\"verifyClaim\", [resolvedAddress, quantity, claimVerification.currencyAddress, claimVerification.price, {\n              proof: claimVerification.proofs,\n              quantityLimitPerWallet: claimVerification.maxClaimable,\n              currency: claimVerification.currencyAddressInProof,\n              pricePerToken: claimVerification.priceInProof\n            }]);\n          } else if (this.isNewMultiphaseDrop(this.contractWrapper)) {\n            activeConditionIndex = await this.contractWrapper.read(\"getActiveClaimConditionId\", []);\n            await this.contractWrapper.read(\"verifyClaim\", [activeConditionIndex, resolvedAddress, quantity, claimVerification.currencyAddress, claimVerification.price, {\n              proof: claimVerification.proofs,\n              quantityLimitPerWallet: claimVerification.maxClaimable,\n              currency: claimVerification.currencyAddressInProof,\n              pricePerToken: claimVerification.priceInProof\n            }]);\n          }\n        } catch (e) {\n          console.warn(\"Merkle proof verification failed:\", \"reason\" in e ? e.reason : e);\n          const reason = e.reason;\n          switch (reason) {\n            case \"!Qty\":\n              reasons.push(ClaimEligibility.OverMaxClaimablePerWallet);\n              break;\n            case \"!PriceOrCurrency\":\n              reasons.push(ClaimEligibility.WrongPriceOrCurrency);\n              break;\n            case \"!MaxSupply\":\n              reasons.push(ClaimEligibility.NotEnoughSupply);\n              break;\n            case \"cant claim yet\":\n              reasons.push(ClaimEligibility.ClaimPhaseNotStarted);\n              break;\n            default:\n              {\n                reasons.push(ClaimEligibility.AddressNotAllowed);\n                break;\n              }\n          }\n          return reasons;\n        }\n      }\n    }\n    if (this.isNewSinglePhaseDrop(this.contractWrapper) || this.isNewMultiphaseDrop(this.contractWrapper)) {\n      let claimedSupply = BigNumber.from(0);\n      let maxClaimable = convertQuantityToBigNumber(claimCondition.maxClaimablePerWallet, decimals);\n      try {\n        claimedSupply = await this.getSupplyClaimedByWallet(resolvedAddress);\n      } catch (e) {\n        // no-op\n      }\n      if (allowListEntry) {\n        maxClaimable = convertQuantityToBigNumber(allowListEntry.maxClaimable, decimals);\n      }\n      if (maxClaimable.gt(0) && maxClaimable.lt(claimedSupply.add(quantityWithDecimals))) {\n        reasons.push(ClaimEligibility.OverMaxClaimablePerWallet);\n        return reasons;\n      }\n\n      // if there is no allowlist, or if there is an allowlist and the address is not in it\n      // if maxClaimable is 0, we consider it as the address is not allowed\n      if (!hasAllowList || hasAllowList && !allowListEntry) {\n        if (maxClaimable.lte(claimedSupply) || maxClaimable.eq(0)) {\n          reasons.push(ClaimEligibility.AddressNotAllowed);\n          return reasons;\n        }\n      }\n    }\n\n    // check for claim timestamp between claims (ONLY FOR LEGACY)\n    if (this.isLegacySinglePhaseDrop(this.contractWrapper) || this.isLegacyMultiPhaseDrop(this.contractWrapper)) {\n      let [lastClaimedTimestamp, timestampForNextClaim] = [BigNumber.from(0), BigNumber.from(0)];\n      if (this.isLegacyMultiPhaseDrop(this.contractWrapper)) {\n        activeConditionIndex = await this.contractWrapper.read(\"getActiveClaimConditionId\", []);\n        [lastClaimedTimestamp, timestampForNextClaim] = await this.contractWrapper.read(\"getClaimTimestamp\", [activeConditionIndex, resolvedAddress]);\n      } else if (this.isLegacySinglePhaseDrop(this.contractWrapper)) {\n        // check for claim timestamp between claims\n        [lastClaimedTimestamp, timestampForNextClaim] = await this.contractWrapper.read(\"getClaimTimestamp\", [resolvedAddress]);\n      }\n      const now = BigNumber.from(Date.now()).div(1000);\n      if (lastClaimedTimestamp.gt(0) && now.lt(timestampForNextClaim)) {\n        // contract will return MaxUint256 if user has already claimed and cannot claim again\n        if (timestampForNextClaim.eq(constants.MaxUint256)) {\n          reasons.push(ClaimEligibility.AlreadyClaimed);\n        } else {\n          reasons.push(ClaimEligibility.WaitBeforeNextClaimTransaction);\n        }\n        return reasons;\n      }\n    }\n\n    // if not within a browser conetext, check for wallet balance.\n    // In browser context, let the wallet do that job\n    if (claimCondition.price.gt(0) && isNode()) {\n      const totalPrice = claimCondition.price.mul(BigNumber.from(quantity));\n      const provider = this.contractWrapper.getProvider();\n      if (isNativeToken(claimCondition.currencyAddress)) {\n        const balance = await provider.getBalance(resolvedAddress);\n        if (balance.lt(totalPrice)) {\n          reasons.push(ClaimEligibility.NotEnoughTokens);\n        }\n      } else {\n        const erc20 = new ContractWrapper(provider, claimCondition.currencyAddress, ERC20Abi, {}, this.storage);\n        const balance = await erc20.read(\"balanceOf\", [resolvedAddress]);\n        if (balance.lt(totalPrice)) {\n          reasons.push(ClaimEligibility.NotEnoughTokens);\n        }\n      }\n    }\n    return reasons;\n  }\n\n  /**\n   * Returns allow list information and merkle proofs for the given address.\n   * @param claimerAddress - the claimer address\n   * @param claimConditionId - optional the claim condition id to get the proofs for\n   */\n  async getClaimerProofs(claimerAddress, claimConditionId) {\n    const claimCondition = await this.get(claimConditionId);\n    const merkleRoot = claimCondition.merkleRoot;\n    const merkleRootArray = utils.stripZeros(merkleRoot);\n    if (merkleRootArray.length > 0) {\n      const metadata = await this.metadata.get();\n      const resolvedAddress = await resolveAddress(claimerAddress);\n      return await fetchSnapshotEntryForAddress(resolvedAddress, merkleRoot.toString(), metadata.merkle, this.contractWrapper.getProvider(), this.storage, this.getSnapshotFormatVersion());\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Get the total supply claimed by a specific wallet\n   * @param walletAddress the wallet address to check\n   * @returns the total supply claimed\n   */\n  async getSupplyClaimedByWallet(walletAddress) {\n    const resolvedAddress = await resolveAddress(walletAddress);\n    if (this.isNewSinglePhaseDrop(this.contractWrapper)) {\n      return await this.contractWrapper.read(\"getSupplyClaimedByWallet\", [resolvedAddress]);\n    }\n    if (this.isNewMultiphaseDrop(this.contractWrapper)) {\n      const activeClaimConditionId = await this.contractWrapper.read(\"getActiveClaimConditionId\", []);\n      return await this.contractWrapper.read(\"getSupplyClaimedByWallet\", [activeClaimConditionId, resolvedAddress]);\n    }\n    throw new Error(\"This contract does not support the getSupplyClaimedByWallet function\");\n  }\n\n  /** ***************************************\n   * WRITE FUNCTIONS\n   *****************************************/\n\n  /**\n   * Set public mint conditions\n   *\n   * @remarks Sets the public mint conditions that need to be fullfiled by users to claim NFTs.\n   *\n   * @example\n   * ```javascript\n   * const presaleStartTime = new Date();\n   * const publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   *\n   * // Optionally specify addresses that can claim\n   * const snapshots = ['0x...', '0x...']\n   *\n   * // Or alternatively, you can pass snapshots with the max number of NFTs each address can claim\n   * // const snapshots = [{ address: '0x...', maxClaimable: 1 }, { address: '0x...', maxClaimable: 2 }]\n   *\n   * const claimConditions = [\n   *   {\n   *     startTime: presaleStartTime, // start the presale now\n   *     maxClaimableSupply: 2, // limit how many mints for this presale\n   *     price: 0.01, // presale price\n   *     snapshot: snapshots, // limit minting to only certain addresses\n   *   },\n   *   {\n   *     startTime: publicSaleStartTime, // 24h after presale, start public sale\n   *     price: 0.08, // public sale price\n   *   }\n   * ]);\n   *\n   * await dropContract.claimConditions.set(claimConditions);\n   * ```\n   *\n   * @param claimConditionInputs - The claim conditions\n   * @param resetClaimEligibilityForAll - Whether to reset the state of who already claimed NFTs previously\n   */\n  set = /* @__PURE__ */buildTransactionFunction((() => {\n    var _this = this;\n    return async function (claimConditionInputs) {\n      let resetClaimEligibilityForAll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      let claimConditionsProcessed = claimConditionInputs;\n      if (_this.isLegacySinglePhaseDrop(_this.contractWrapper) || _this.isNewSinglePhaseDrop(_this.contractWrapper)) {\n        resetClaimEligibilityForAll = true;\n        if (claimConditionInputs.length === 0) {\n          claimConditionsProcessed = [{\n            startTime: new Date(0),\n            currencyAddress: constants.AddressZero,\n            price: 0,\n            maxClaimableSupply: 0,\n            maxClaimablePerWallet: 0,\n            waitInSeconds: 0,\n            merkleRootHash: utils.hexZeroPad([0], 32),\n            snapshot: []\n          }];\n        } else if (claimConditionInputs.length > 1) {\n          throw new Error(\"Single phase drop contract cannot have multiple claim conditions, only one is allowed\");\n        }\n      }\n\n      // if using new snapshot format, make sure that maxClaimablePerWallet is set if allowlist is set as well\n      if (_this.isNewSinglePhaseDrop(_this.contractWrapper) || _this.isNewMultiphaseDrop(_this.contractWrapper)) {\n        claimConditionsProcessed.forEach(cc => {\n          if (cc.snapshot && cc.snapshot.length > 0 && (cc.maxClaimablePerWallet === undefined || cc.maxClaimablePerWallet === \"unlimited\")) {\n            throw new Error(\"maxClaimablePerWallet must be set to a specific value when an allowlist is set.\\n\" + \"Example: Set it to 0 to only allow addresses in the allowlist to claim the amount specified in the allowlist.\\n\" + \"contract.claimConditions.set([{ snapshot: [{ address: '0x...', maxClaimable: 1 }], maxClaimablePerWallet: 0 }])\");\n          }\n          if (cc.snapshot && cc.snapshot.length > 0 && cc.maxClaimablePerWallet?.toString() === \"0\" && cc.snapshot.map(s => {\n            if (typeof s === \"string\") {\n              return 0;\n            } else {\n              return Number(s.maxClaimable?.toString() || 0);\n            }\n          }).reduce((acc, current) => {\n            return acc + current;\n          }, 0) === 0) {\n            throw new Error(\"maxClaimablePerWallet is set to 0, and all addresses in the allowlist have max claimable 0. This means that no one can claim.\");\n          }\n        });\n      }\n\n      // process inputs\n      const {\n        snapshotInfos,\n        sortedConditions\n      } = await processClaimConditionInputs(claimConditionsProcessed, await _this.getTokenDecimals(), _this.contractWrapper.getProvider(), _this.storage, _this.getSnapshotFormatVersion());\n      const merkleInfo = {};\n      snapshotInfos.forEach(s => {\n        merkleInfo[s.merkleRoot] = s.snapshotUri;\n      });\n      const metadata = await _this.metadata.get();\n      const encoded = [];\n\n      // upload new merkle roots to snapshot URIs if updated\n      if (!deepEqual(metadata.merkle, merkleInfo)) {\n        const mergedMetadata = await _this.metadata.parseInputMetadata({\n          ...metadata,\n          merkle: merkleInfo\n        });\n        // using internal method to just upload, avoids one contract call\n        const contractURI = await _this.metadata._parseAndUploadMetadata(mergedMetadata);\n\n        // TODO (cc) we could write the merkle tree info on the claim condition metadata instead\n        // TODO (cc) but we still need to maintain the behavior here for older contracts\n        if (hasFunction(\"setContractURI\", _this.contractWrapper)) {\n          const contractEncoder = new ContractEncoder(_this.contractWrapper);\n          encoded.push(contractEncoder.encode(\"setContractURI\", [contractURI]));\n        } else {\n          throw new Error(\"Setting a merkle root requires implementing ContractMetadata in your contract to support storing a merkle root.\");\n        }\n      }\n      const cw = _this.contractWrapper;\n      const baseContractEncoder = new ContractEncoder(cw);\n      if (_this.isLegacySinglePhaseDrop(cw)) {\n        const contractEncoderLegacy = new ContractEncoder(cw);\n        encoded.push(contractEncoderLegacy.encode(\"setClaimConditions\", [abstractContractModelToLegacy(sortedConditions[0]), resetClaimEligibilityForAll]));\n      } else if (_this.isLegacyMultiPhaseDrop(cw)) {\n        encoded.push(baseContractEncoder.encode(\"setClaimConditions\", [sortedConditions.map(abstractContractModelToLegacy), resetClaimEligibilityForAll]));\n      } else if (_this.isNewSinglePhaseDrop(cw)) {\n        encoded.push(baseContractEncoder.encode(\"setClaimConditions\", [abstractContractModelToNew(sortedConditions[0]), resetClaimEligibilityForAll]));\n      } else if (_this.isNewMultiphaseDrop(cw)) {\n        encoded.push(baseContractEncoder.encode(\"setClaimConditions\", [sortedConditions.map(abstractContractModelToNew), resetClaimEligibilityForAll]));\n      } else {\n        throw new Error(\"Contract does not support claim conditions\");\n      }\n      if (hasFunction(\"multicall\", _this.contractWrapper)) {\n        return Transaction.fromContractWrapper({\n          contractWrapper: _this.contractWrapper,\n          method: \"multicall\",\n          args: [encoded]\n        });\n      }\n      throw new Error(\"Contract does not support multicall\");\n    };\n  })());\n\n  /**\n   * Update a single claim condition with new data.\n   *\n   * @param index - the index of the claim condition to update, as given by the index from the result of `getAll()`\n   * @param claimConditionInput - the new data to update, previous data will be retained\n   */\n  update = /* @__PURE__ */buildTransactionFunction(async (index, claimConditionInput) => {\n    const existingConditions = await this.getAll();\n    const newConditionInputs = await updateExistingClaimConditions(index, claimConditionInput, existingConditions);\n    return await this.set.prepare(newConditionInputs);\n  });\n\n  /** ***************************************\n   * PRIVATE FUNCTIONS\n   *****************************************/\n\n  async getTokenDecimals() {\n    if (detectContractFeature(this.contractWrapper, \"ERC20\")) {\n      return this.contractWrapper.read(\"decimals\", []);\n    } else {\n      return Promise.resolve(0);\n    }\n  }\n\n  /**\n   * Returns proofs and the overrides required for the transaction.\n   *\n   * @returns - `overrides` and `proofs` as an object.\n   * @internal\n   */\n  async prepareClaim(quantity, checkERC20Allowance) {\n    let decimals = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let address = arguments.length > 3 ? arguments[3] : undefined;\n    const addressToClaim = address ? address : await this.contractWrapper.getSignerAddress();\n    return prepareClaim(addressToClaim, quantity, await this.getActive(), async () => (await this.metadata.get()).merkle, decimals, this.contractWrapper, this.storage, checkERC20Allowance, this.getSnapshotFormatVersion());\n  }\n  async getClaimArguments(destinationAddress, quantity, claimVerification) {\n    const resolvedAddress = await resolveAddress(destinationAddress);\n    if (this.isLegacyMultiPhaseDrop(this.contractWrapper)) {\n      return [resolvedAddress, quantity, claimVerification.currencyAddress, claimVerification.price, claimVerification.proofs, claimVerification.maxClaimable];\n    } else if (this.isLegacySinglePhaseDrop(this.contractWrapper)) {\n      return [resolvedAddress, quantity, claimVerification.currencyAddress, claimVerification.price, {\n        proof: claimVerification.proofs,\n        maxQuantityInAllowlist: claimVerification.maxClaimable\n      }, utils.toUtf8Bytes(\"\")];\n    }\n    return [resolvedAddress, quantity, claimVerification.currencyAddress, claimVerification.price, {\n      proof: claimVerification.proofs,\n      quantityLimitPerWallet: claimVerification.maxClaimable,\n      pricePerToken: claimVerification.priceInProof,\n      currency: claimVerification.currencyAddressInProof\n    }, utils.toUtf8Bytes(\"\")];\n  }\n\n  /**\n   * Construct a claim transaction without executing it.\n   * This is useful for estimating the gas cost of a claim transaction, overriding transaction options and having fine grained control over the transaction execution.\n   * @param destinationAddress\n   * @param quantity\n   * @param options\n   *\n   * @deprecated Use `contract.erc721.claim.prepare(...args)` instead\n   */\n  async getClaimTransaction(destinationAddress, quantity, options) {\n    // TODO: Transaction Sequence Pattern\n    if (options?.pricePerToken) {\n      throw new Error(\"Price per token is be set via claim conditions by calling `contract.erc721.claimConditions.set()`\");\n    }\n    const claimVerification = await this.prepareClaim(quantity, options?.checkERC20Allowance === undefined ? true : options.checkERC20Allowance, await this.getTokenDecimals());\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"claim\",\n      args: await this.getClaimArguments(destinationAddress, quantity, claimVerification),\n      overrides: claimVerification.overrides\n    });\n  }\n  isNewSinglePhaseDrop(contractWrapper) {\n    return detectContractFeature(contractWrapper, \"ERC721ClaimConditionsV2\") || detectContractFeature(contractWrapper, \"ERC20ClaimConditionsV2\");\n  }\n  isNewMultiphaseDrop(contractWrapper) {\n    return detectContractFeature(contractWrapper, \"ERC721ClaimPhasesV2\") || detectContractFeature(contractWrapper, \"ERC20ClaimPhasesV2\");\n  }\n  isLegacySinglePhaseDrop(contractWrapper) {\n    return detectContractFeature(contractWrapper, \"ERC721ClaimConditionsV1\") || detectContractFeature(contractWrapper, \"ERC20ClaimConditionsV1\");\n  }\n  isLegacyMultiPhaseDrop(contractWrapper) {\n    return detectContractFeature(contractWrapper, \"ERC721ClaimPhasesV1\") || detectContractFeature(contractWrapper, \"ERC20ClaimPhasesV1\");\n  }\n  getSnapshotFormatVersion() {\n    return this.isLegacyMultiPhaseDrop(this.contractWrapper) || this.isLegacySinglePhaseDrop(this.contractWrapper) ? SnapshotFormatVersion.V1 : SnapshotFormatVersion.V2;\n  }\n}\n\n/**\n * Manages claim conditions for Edition Drop contracts\n * @public\n */\nclass DropErc1155ClaimConditions {\n  constructor(contractWrapper, metadata, storage) {\n    this.storage = storage;\n    this.contractWrapper = contractWrapper;\n    this.metadata = metadata;\n  }\n\n  /** ***************************************\n   * READ FUNCTIONS\n   *****************************************/\n\n  /**\n   * Get the currently active claim condition\n   *\n   * @returns the claim condition metadata\n   */\n  async getActive(tokenId, options) {\n    const mc = await this.get(tokenId);\n    const metadata = await this.metadata.get();\n    return await transformResultToClaimCondition(mc, 0, this.contractWrapper.getProvider(), metadata.merkle, this.storage, options?.withAllowList || false);\n  }\n  async get(tokenId, conditionId) {\n    if (this.isLegacySinglePhaseDrop(this.contractWrapper)) {\n      const contractModel = await this.contractWrapper.read(\"claimCondition\", [tokenId]);\n      return legacyContractModelToAbstract(contractModel);\n    } else if (this.isLegacyMultiPhaseDrop(this.contractWrapper)) {\n      const id = conditionId !== undefined ? conditionId : await this.contractWrapper.read(\"getActiveClaimConditionId\", [tokenId]);\n      const contractModel = await this.contractWrapper.read(\"getClaimConditionById\", [tokenId, id]);\n      return legacyContractModelToAbstract(contractModel);\n    } else if (this.isNewSinglePhaseDrop(this.contractWrapper)) {\n      const contractModel = await this.contractWrapper.read(\"claimCondition\", [tokenId]);\n      return newContractModelToAbstract(contractModel);\n    } else if (this.isNewMultiphaseDrop(this.contractWrapper)) {\n      const id = conditionId !== undefined ? conditionId : await this.contractWrapper.read(\"getActiveClaimConditionId\", [tokenId]);\n      const contractModel = await this.contractWrapper.read(\"getClaimConditionById\", [tokenId, id]);\n      return newContractModelToAbstract(contractModel);\n    } else {\n      throw new Error(\"Contract does not support claim conditions\");\n    }\n  }\n\n  /**\n   * Get all the claim conditions\n   *\n   * @returns the claim conditions metadata\n   */\n  async getAll(tokenId, options) {\n    if (this.isLegacyMultiPhaseDrop(this.contractWrapper) || this.isNewMultiphaseDrop(this.contractWrapper)) {\n      const claimCondition = await this.contractWrapper.read(\"claimCondition\", [tokenId]);\n      const startId = claimCondition.currentStartId.toNumber();\n      const count = claimCondition.count.toNumber();\n      const conditions = [];\n      for (let i = startId; i < startId + count; i++) {\n        conditions.push(await this.get(tokenId, i));\n      }\n      const metadata = await this.metadata.get();\n      return Promise.all(conditions.map(c => transformResultToClaimCondition(c, 0, this.contractWrapper.getProvider(), metadata.merkle, this.storage, options?.withAllowList || false)));\n    } else {\n      return [await this.getActive(tokenId, options)];\n    }\n  }\n\n  /**\n   * Can Claim\n   *\n   * @remarks Check if a particular NFT can currently be claimed by a given user.\n   *\n   * @example\n   * ```javascript\n   * // Quantity of tokens to check claimability of\n   * const quantity = 1;\n   * const canClaim = await contract.canClaim(quantity);\n   * ```\n   */\n  async canClaim(tokenId, quantity, addressToCheck) {\n    // TODO switch to use verifyClaim\n    if (addressToCheck) {\n      addressToCheck = await resolveAddress(addressToCheck);\n    }\n    return (await this.getClaimIneligibilityReasons(tokenId, quantity, addressToCheck)).length === 0;\n  }\n\n  /**\n   * For any claim conditions that a particular wallet is violating,\n   * this function returns human-readable information about the\n   * breaks in the condition that can be used to inform the user.\n   *\n   * @param tokenId - the token id to check\n   * @param quantity - The desired quantity that would be claimed.\n   * @param addressToCheck - The wallet address, defaults to the connected wallet.\n   *\n   */\n  async getClaimIneligibilityReasons(tokenId, quantity, addressToCheck) {\n    const reasons = [];\n    let activeConditionIndex;\n    let claimCondition;\n    if (addressToCheck === undefined) {\n      try {\n        addressToCheck = await this.contractWrapper.getSignerAddress();\n      } catch (err) {\n        console.warn(\"failed to get signer address\", err);\n      }\n    }\n\n    // if we have been unable to get a signer address, we can't check eligibility, so return a NoWallet error reason\n    if (!addressToCheck) {\n      return [ClaimEligibility.NoWallet];\n    }\n    const resolvedAddress = await resolveAddress(addressToCheck);\n    try {\n      claimCondition = await this.getActive(tokenId);\n    } catch (err) {\n      if (includesErrorMessage(err, \"!CONDITION\") || includesErrorMessage(err, \"no active mint condition\")) {\n        reasons.push(ClaimEligibility.NoClaimConditionSet);\n        return reasons;\n      }\n      reasons.push(ClaimEligibility.Unknown);\n      return reasons;\n    }\n    if (claimCondition.availableSupply !== \"unlimited\") {\n      if (BigNumber.from(claimCondition.availableSupply).lt(quantity)) {\n        reasons.push(ClaimEligibility.NotEnoughSupply);\n        return reasons;\n      }\n    }\n\n    // check for merkle root inclusion\n    const merkleRootArray = utils.stripZeros(claimCondition.merkleRootHash);\n    const hasAllowList = merkleRootArray.length > 0;\n    let allowListEntry = null;\n    if (hasAllowList) {\n      allowListEntry = await this.getClaimerProofs(tokenId, resolvedAddress);\n      if (!allowListEntry && (this.isLegacySinglePhaseDrop(this.contractWrapper) || this.isLegacyMultiPhaseDrop(this.contractWrapper))) {\n        // exclusive allowlist behavior\n        reasons.push(ClaimEligibility.AddressNotAllowed);\n        return reasons;\n      }\n      if (allowListEntry) {\n        try {\n          const claimVerification = await this.prepareClaim(tokenId, quantity, false, resolvedAddress);\n          let validMerkleProof;\n          if (this.isLegacyMultiPhaseDrop(this.contractWrapper)) {\n            activeConditionIndex = await this.contractWrapper.read(\"getActiveClaimConditionId\", [tokenId]);\n            // legacy verifyClaimerMerkleProofs function\n            [validMerkleProof] = await this.contractWrapper.read(\"verifyClaimMerkleProof\", [activeConditionIndex, resolvedAddress, tokenId, quantity, claimVerification.proofs, claimVerification.maxClaimable]);\n            if (!validMerkleProof) {\n              reasons.push(ClaimEligibility.AddressNotAllowed);\n              return reasons;\n            }\n          } else if (this.isLegacySinglePhaseDrop(this.contractWrapper)) {\n            [validMerkleProof] = await this.contractWrapper.read(\"verifyClaimMerkleProof\", [tokenId, resolvedAddress, quantity, {\n              proof: claimVerification.proofs,\n              maxQuantityInAllowlist: claimVerification.maxClaimable\n            }]);\n            if (!validMerkleProof) {\n              reasons.push(ClaimEligibility.AddressNotAllowed);\n              return reasons;\n            }\n          } else if (this.isNewSinglePhaseDrop(this.contractWrapper)) {\n            await this.contractWrapper.read(\"verifyClaim\", [tokenId, resolvedAddress, quantity, claimVerification.currencyAddress, claimVerification.price, {\n              proof: claimVerification.proofs,\n              quantityLimitPerWallet: claimVerification.maxClaimable,\n              currency: claimVerification.currencyAddressInProof,\n              pricePerToken: claimVerification.priceInProof\n            }]);\n          } else if (this.isNewMultiphaseDrop(this.contractWrapper)) {\n            activeConditionIndex = await this.contractWrapper.read(\"getActiveClaimConditionId\", [tokenId]);\n            await this.contractWrapper.read(\"verifyClaim\", [activeConditionIndex, resolvedAddress, tokenId, quantity, claimVerification.currencyAddress, claimVerification.price, {\n              proof: claimVerification.proofs,\n              quantityLimitPerWallet: claimVerification.maxClaimable,\n              currency: claimVerification.currencyAddressInProof,\n              pricePerToken: claimVerification.priceInProof\n            }]);\n          }\n        } catch (e) {\n          console.warn(\"Merkle proof verification failed:\", \"reason\" in e ? e.reason : e);\n          const reason = e.reason;\n          switch (reason) {\n            case \"!Qty\":\n              reasons.push(ClaimEligibility.OverMaxClaimablePerWallet);\n              break;\n            case \"!PriceOrCurrency\":\n              reasons.push(ClaimEligibility.WrongPriceOrCurrency);\n              break;\n            case \"!MaxSupply\":\n              reasons.push(ClaimEligibility.NotEnoughSupply);\n              break;\n            case \"cant claim yet\":\n              reasons.push(ClaimEligibility.ClaimPhaseNotStarted);\n              break;\n            default:\n              {\n                reasons.push(ClaimEligibility.AddressNotAllowed);\n                break;\n              }\n          }\n          return reasons;\n        }\n      }\n    }\n    if (this.isNewSinglePhaseDrop(this.contractWrapper) || this.isNewMultiphaseDrop(this.contractWrapper)) {\n      let claimedSupply = BigNumber.from(0);\n      let maxClaimable = convertQuantityToBigNumber(claimCondition.maxClaimablePerWallet, 0);\n      try {\n        claimedSupply = await this.getSupplyClaimedByWallet(tokenId, resolvedAddress);\n      } catch (e) {\n        // no-op\n      }\n      if (allowListEntry) {\n        maxClaimable = convertQuantityToBigNumber(allowListEntry.maxClaimable, 0);\n      }\n      if (maxClaimable.gt(0) && maxClaimable.lt(claimedSupply.add(quantity))) {\n        reasons.push(ClaimEligibility.OverMaxClaimablePerWallet);\n        return reasons;\n      }\n\n      // if there is no allowlist, or if there is an allowlist and the address is not in it\n      // if maxClaimable is 0, we consider it as the address is not allowed\n      if (!hasAllowList || hasAllowList && !allowListEntry) {\n        if (maxClaimable.lte(claimedSupply) || maxClaimable.eq(0)) {\n          reasons.push(ClaimEligibility.AddressNotAllowed);\n          return reasons;\n        }\n      }\n    }\n\n    // check for claim timestamp between claims\n    let [lastClaimedTimestamp, timestampForNextClaim] = [BigNumber.from(0), BigNumber.from(0)];\n    if (this.isLegacyMultiPhaseDrop(this.contractWrapper)) {\n      activeConditionIndex = await this.contractWrapper.read(\"getActiveClaimConditionId\", [tokenId]);\n      [lastClaimedTimestamp, timestampForNextClaim] = await this.contractWrapper.read(\"getClaimTimestamp\", [tokenId, activeConditionIndex, resolvedAddress]);\n    } else if (this.isLegacySinglePhaseDrop(this.contractWrapper)) {\n      [lastClaimedTimestamp, timestampForNextClaim] = await this.contractWrapper.read(\"getClaimTimestamp\", [tokenId, resolvedAddress]);\n    }\n    const now = BigNumber.from(Date.now()).div(1000);\n    if (lastClaimedTimestamp.gt(0) && now.lt(timestampForNextClaim)) {\n      // contract will return MaxUint256 if user has already claimed and cannot claim again\n      if (timestampForNextClaim.eq(constants.MaxUint256)) {\n        reasons.push(ClaimEligibility.AlreadyClaimed);\n      } else {\n        reasons.push(ClaimEligibility.WaitBeforeNextClaimTransaction);\n      }\n      return reasons;\n    }\n\n    // if not within a browser conetext, check for wallet balance.\n    // In browser context, let the wallet do that job\n    if (claimCondition.price.gt(0) && isNode()) {\n      const totalPrice = claimCondition.price.mul(quantity);\n      const provider = this.contractWrapper.getProvider();\n      if (isNativeToken(claimCondition.currencyAddress)) {\n        const balance = await provider.getBalance(resolvedAddress);\n        if (balance.lt(totalPrice)) {\n          reasons.push(ClaimEligibility.NotEnoughTokens);\n        }\n      } else {\n        const erc20 = new ContractWrapper(provider, claimCondition.currencyAddress, ERC20Abi, {}, this.storage);\n        const balance = await erc20.read(\"balanceOf\", [resolvedAddress]);\n        if (balance.lt(totalPrice)) {\n          reasons.push(ClaimEligibility.NotEnoughTokens);\n        }\n      }\n    }\n    return reasons;\n  }\n\n  /**\n   * Returns allow list information and merkle proofs for the given address.\n   * @param tokenId - the token ID to check\n   * @param claimerAddress - the claimer address\n   * @param claimConditionId - optional the claim condition id to get the proofs for\n   */\n  async getClaimerProofs(tokenId, claimerAddress, claimConditionId) {\n    const claimCondition = await this.get(tokenId, claimConditionId);\n    const merkleRoot = claimCondition.merkleRoot;\n    const merkleRootArray = utils.stripZeros(merkleRoot);\n    if (merkleRootArray.length > 0) {\n      const metadata = await this.metadata.get();\n      const resolvedAddress = await resolveAddress(claimerAddress);\n      return await fetchSnapshotEntryForAddress(resolvedAddress, merkleRoot.toString(), metadata.merkle, this.contractWrapper.getProvider(), this.storage, this.getSnapshotFormatVersion());\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Get the total supply claimed by a specific wallet\n   * @param walletAddress the wallet address to check\n   * @returns the total supply claimed\n   */\n  async getSupplyClaimedByWallet(tokenId, walletAddress) {\n    const resolvedAddress = await resolveAddress(walletAddress);\n    if (this.isNewSinglePhaseDrop(this.contractWrapper)) {\n      return await this.contractWrapper.read(\"getSupplyClaimedByWallet\", [tokenId, resolvedAddress]);\n    }\n    if (this.isNewMultiphaseDrop(this.contractWrapper)) {\n      const activeClaimConditionId = await this.contractWrapper.read(\"getActiveClaimConditionId\", [tokenId]);\n      return await this.contractWrapper.read(\"getSupplyClaimedByWallet\", [tokenId, activeClaimConditionId, resolvedAddress]);\n    }\n    throw new Error(\"This contract does not support the getSupplyClaimedByWallet function\");\n  }\n\n  /** ***************************************\n   * WRITE FUNCTIONS\n   *****************************************/\n\n  /**\n   * Set claim conditions on a single NFT\n   *\n   * @remarks Sets the public mint conditions that need to be fulfilled by users to claim a particular NFT in this contract.\n   *\n   * @example\n   * ```javascript\n   * const presaleStartTime = new Date();\n   * const publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   *\n   * // Optionally specify addresses that can claim\n   * const snapshots = ['0x...', '0x...']\n   *\n   * // Or alternatively, you can pass snapshots with the max number of NFTs each address can claim\n   * // const snapshots = [{ address: '0x...', maxClaimable: 1 }, { address: '0x...', maxClaimable: 2 }]\n   *\n   * const claimConditions = [\n   *   {\n   *     startTime: presaleStartTime, // start the presale now\n   *     maxClaimableSupply: 2, // limit how many mints for this presale\n   *     price: 0.01, // presale price\n   *     snapshot: snapshots, // limit minting to only certain addresses\n   *   },\n   *   {\n   *     startTime: publicSaleStartTime, // 24h after presale, start public sale\n   *     price: 0.08, // public sale price\n   *   }\n   * ]);\n   *\n   * const tokenId = 0; // the id of the NFT to set claim conditions on\n   * await dropContract.claimConditions.set(tokenId, claimConditions);\n   * ```\n   *\n   * @param tokenId - The id of the NFT to set the claim conditions on\n   * @param claimConditionInputs - The claim conditions\n   * @param resetClaimEligibilityForAll - Whether to reset the state of who already claimed NFTs previously\n   */\n  set = /* @__PURE__ */buildTransactionFunction((() => {\n    var _this = this;\n    return async function (tokenId, claimConditionInputs) {\n      let resetClaimEligibilityForAll = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      return _this.setBatch.prepare([{\n        tokenId,\n        claimConditions: claimConditionInputs\n      }], resetClaimEligibilityForAll);\n    };\n  })());\n\n  /**\n   * Set claim conditions on multiple NFTs at once\n   *\n   * @remarks Sets the claim conditions that need to be fulfilled by users to claim the given NFTs in this contract.\n   *\n   * @example\n   * ```javascript\n   * const claimConditionsForTokens = [\n   *   {\n   *     tokenId: 0,\n   *     claimConditions: [{\n   *       startTime: new Date(), // start the claim phase now\n   *       maxClaimableSupply: 2, // limit how many mints for this tokenId\n   *       price: 0.01, // price for this tokenId\n   *       snapshot: ['0x...', '0x...'], // limit minting to only certain addresses\n   *     }]\n   *   },\n   *   {\n   *     tokenId: 1,\n   *     claimConditions: [{\n   *       startTime: new Date(),\n   *       price: 0.08, // different price for this tokenId\n   *     }]\n   *   },\n   * ];\n   *\n   * await dropContract.claimConditions.setBatch(claimConditionsForTokens);\n   * ```\n   *\n   * @param claimConditionsForToken - The claim conditions for each NFT\n   * @param resetClaimEligibilityForAll - Whether to reset the state of who already claimed NFTs previously\n   */\n  setBatch = /* @__PURE__ */buildTransactionFunction((() => {\n    var _this2 = this;\n    return async function (claimConditionsForToken) {\n      let resetClaimEligibilityForAll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      const merkleInfo = {};\n      const processedClaimConditions = await Promise.all(claimConditionsForToken.map(async _ref => {\n        let {\n          tokenId,\n          claimConditions\n        } = _ref;\n        // sanitize for single phase deletions\n        let claimConditionsProcessed = claimConditions;\n        if (_this2.isLegacySinglePhaseDrop(_this2.contractWrapper)) {\n          resetClaimEligibilityForAll = true;\n          if (claimConditions.length === 0) {\n            claimConditionsProcessed = [{\n              startTime: new Date(0),\n              currencyAddress: constants.AddressZero,\n              price: 0,\n              maxClaimableSupply: 0,\n              maxClaimablePerWallet: 0,\n              waitInSeconds: 0,\n              merkleRootHash: utils.hexZeroPad([0], 32),\n              snapshot: []\n            }];\n          } else if (claimConditions.length > 1) {\n            throw new Error(\"Single phase drop contract cannot have multiple claim conditions, only one is allowed\");\n          }\n        }\n        // if using new snapshot format, make sure that maxClaimablePerWallet is set if allowlist is set as well\n        if (_this2.isNewSinglePhaseDrop(_this2.contractWrapper) || _this2.isNewMultiphaseDrop(_this2.contractWrapper)) {\n          claimConditionsProcessed.forEach(cc => {\n            if (cc.snapshot && cc.snapshot.length > 0 && (cc.maxClaimablePerWallet === undefined || cc.maxClaimablePerWallet === \"unlimited\")) {\n              throw new Error(\"maxClaimablePerWallet must be set to a specific value when an allowlist is set.\\n\" + \"Set it to 0 to only allow addresses in the allowlist to claim the amount specified in the allowlist.\" + \"\\n\\nex:\\n\" + \"contract.claimConditions.set(tokenId, [{ snapshot: [{ address: '0x...', maxClaimable: 1 }], maxClaimablePerWallet: 0 }])\");\n            }\n            if (cc.snapshot && cc.snapshot.length > 0 && cc.maxClaimablePerWallet?.toString() === \"0\" && cc.snapshot.map(s => {\n              if (typeof s === \"string\") {\n                return 0;\n              } else {\n                return Number(s.maxClaimable?.toString() || 0);\n              }\n            }).reduce((acc, current) => {\n              return acc + current;\n            }, 0) === 0) {\n              throw new Error(\"maxClaimablePerWallet is set to 0, and all addresses in the allowlist have max claimable 0. This means that no one can claim.\");\n            }\n          });\n        }\n        // process inputs\n        const {\n          snapshotInfos,\n          sortedConditions\n        } = await processClaimConditionInputs(claimConditionsProcessed, 0, _this2.contractWrapper.getProvider(), _this2.storage, _this2.getSnapshotFormatVersion());\n        snapshotInfos.forEach(s => {\n          merkleInfo[s.merkleRoot] = s.snapshotUri;\n        });\n        return {\n          tokenId,\n          sortedConditions\n        };\n      }));\n      const metadata = await _this2.metadata.get();\n      const encoded = [];\n\n      // keep the old merkle roots from other tokenIds\n      for (const key of Object.keys(metadata.merkle || {})) {\n        merkleInfo[key] = metadata.merkle[key];\n      }\n\n      // upload new merkle roots to snapshot URIs if updated\n      if (!deepEqual(metadata.merkle, merkleInfo)) {\n        const mergedMetadata = await _this2.metadata.parseInputMetadata({\n          ...metadata,\n          merkle: merkleInfo\n        });\n        // using internal method to just upload, avoids one contract call\n        const contractURI = await _this2.metadata._parseAndUploadMetadata(mergedMetadata);\n        if (hasFunction(\"setContractURI\", _this2.contractWrapper)) {\n          const contractEncoder = new ContractEncoder(_this2.contractWrapper);\n          encoded.push(contractEncoder.encode(\"setContractURI\", [contractURI]));\n        } else {\n          throw new Error(\"Setting a merkle root requires implementing ContractMetadata in your contract to support storing a merkle root.\");\n        }\n      }\n      processedClaimConditions.forEach(_ref2 => {\n        let {\n          tokenId,\n          sortedConditions\n        } = _ref2;\n        const baseContractEncoder = new ContractEncoder(_this2.contractWrapper);\n        if (_this2.isLegacySinglePhaseDrop(_this2.contractWrapper)) {\n          const legacyContractEncoder = new ContractEncoder(_this2.contractWrapper);\n          encoded.push(legacyContractEncoder.encode(\"setClaimConditions\", [tokenId, abstractContractModelToLegacy(sortedConditions[0]), resetClaimEligibilityForAll]));\n        } else if (_this2.isLegacyMultiPhaseDrop(_this2.contractWrapper)) {\n          encoded.push(baseContractEncoder.encode(\"setClaimConditions\", [tokenId, sortedConditions.map(abstractContractModelToLegacy), resetClaimEligibilityForAll]));\n        } else if (_this2.isNewSinglePhaseDrop(_this2.contractWrapper)) {\n          encoded.push(baseContractEncoder.encode(\"setClaimConditions\", [tokenId, abstractContractModelToNew(sortedConditions[0]), resetClaimEligibilityForAll]));\n        } else if (_this2.isNewMultiphaseDrop(_this2.contractWrapper)) {\n          encoded.push(baseContractEncoder.encode(\"setClaimConditions\", [tokenId, sortedConditions.map(abstractContractModelToNew), resetClaimEligibilityForAll]));\n        } else {\n          throw new Error(\"Contract does not support claim conditions\");\n        }\n      });\n      if (hasFunction(\"multicall\", _this2.contractWrapper)) {\n        return Transaction.fromContractWrapper({\n          contractWrapper: _this2.contractWrapper,\n          method: \"multicall\",\n          args: [encoded]\n        });\n      }\n      throw new Error(\"Contract does not support multicall\");\n    };\n  })());\n\n  /**\n   * Update a single claim condition with new data.\n   * @param tokenId - the token id to update\n   * @param index - the index of the claim condition to update, as given by the index from the result of `getAll()`\n   * @param claimConditionInput - the new data to update, previous data will be retained\n   */\n  update = /* @__PURE__ */buildTransactionFunction(async (tokenId, index, claimConditionInput) => {\n    const existingConditions = await this.getAll(tokenId);\n    const newConditionInputs = await updateExistingClaimConditions(index, claimConditionInput, existingConditions);\n    return await this.set.prepare(tokenId, newConditionInputs);\n  });\n\n  /**\n   * Returns proofs and the overrides required for the transaction.\n   *\n   * @returns - `overrides` and `proofs` as an object.\n   */\n  async prepareClaim(tokenId, quantity, checkERC20Allowance, address) {\n    const addressToClaim = await resolveAddress(address ? address : await this.contractWrapper.getSignerAddress());\n    return prepareClaim(addressToClaim, quantity, await this.getActive(tokenId), async () => (await this.metadata.get()).merkle, 0, this.contractWrapper, this.storage, checkERC20Allowance, this.getSnapshotFormatVersion());\n  }\n  async getClaimArguments(tokenId, destinationAddress, quantity, claimVerification) {\n    const resolvedAddress = await resolveAddress(destinationAddress);\n    if (this.isLegacyMultiPhaseDrop(this.contractWrapper)) {\n      return [resolvedAddress, tokenId, quantity, claimVerification.currencyAddress, claimVerification.price, claimVerification.proofs, claimVerification.maxClaimable];\n    } else if (this.isLegacySinglePhaseDrop(this.contractWrapper)) {\n      return [resolvedAddress, tokenId, quantity, claimVerification.currencyAddress, claimVerification.price, {\n        proof: claimVerification.proofs,\n        maxQuantityInAllowlist: claimVerification.maxClaimable\n      }, utils.toUtf8Bytes(\"\")];\n    }\n    return [resolvedAddress, tokenId, quantity, claimVerification.currencyAddress, claimVerification.price, {\n      proof: claimVerification.proofs,\n      quantityLimitPerWallet: claimVerification.maxClaimable,\n      pricePerToken: claimVerification.priceInProof,\n      currency: claimVerification.currencyAddressInProof\n    }, utils.toUtf8Bytes(\"\")];\n  }\n\n  /**\n   * Construct a claim transaction without executing it.\n   * This is useful for estimating the gas cost of a claim transaction, overriding transaction options and having fine grained control over the transaction execution.\n   * @param destinationAddress - Address you want to send the token to\n   * @param tokenId - Id of the token you want to claim\n   * @param quantity - Quantity of the tokens you want to claim\n   *\n   * @deprecated Use `contract.erc1155.claim.prepare(...args)` instead\n   */\n  async getClaimTransaction(destinationAddress, tokenId, quantity, options) {\n    if (options?.pricePerToken) {\n      throw new Error(\"Price per token should be set via claim conditions by calling `contract.erc1155.claimConditions.set()`\");\n    }\n    const claimVerification = await this.prepareClaim(tokenId, quantity, options?.checkERC20Allowance || true);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"claim\",\n      args: await this.getClaimArguments(tokenId, destinationAddress, quantity, claimVerification),\n      overrides: claimVerification.overrides\n    });\n  }\n  isNewSinglePhaseDrop(contractWrapper) {\n    return detectContractFeature(contractWrapper, \"ERC1155ClaimConditionsV2\");\n  }\n  isNewMultiphaseDrop(contractWrapper) {\n    return detectContractFeature(contractWrapper, \"ERC1155ClaimPhasesV2\");\n  }\n  isLegacySinglePhaseDrop(contractWrapper) {\n    return detectContractFeature(contractWrapper, \"ERC1155ClaimConditionsV1\");\n  }\n  isLegacyMultiPhaseDrop(contractWrapper) {\n    return detectContractFeature(contractWrapper, \"ERC1155ClaimPhasesV1\");\n  }\n  getSnapshotFormatVersion() {\n    return this.isLegacyMultiPhaseDrop(this.contractWrapper) || this.isLegacySinglePhaseDrop(this.contractWrapper) ? SnapshotFormatVersion.V1 : SnapshotFormatVersion.V2;\n  }\n}\n\n/**\n * Mint Many ERC20 Tokens at once\n * @remarks Token batch minting functionality that handles unit parsing for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.token.mint.batch.to(walletAddress, [nftMetadata1, nftMetadata2, ...]);\n * ```\n * @public\n */\n\nclass Erc20BatchMintable {\n  featureName = FEATURE_TOKEN_BATCH_MINTABLE.name;\n  constructor(erc20, contractWrapper) {\n    this.erc20 = erc20;\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Mint Tokens To Many Wallets\n   *\n   * @remarks Mint tokens to many wallets in one transaction.\n   *\n   * @example\n   * ```javascript\n   * // Data of the tokens you want to mint\n   * const data = [\n   *   {\n   *     toAddress: \"{{wallet_address}}\", // Address to mint tokens to\n   *     amount: 0.2, // How many tokens to mint to specified address\n   *   },\n   *  {\n   *    toAddress: \"0x...\",\n   *    amount: 1.4,\n   *  }\n   * ]\n   *\n   * await contract.token.mint.batch(data);\n   * ```\n   */\n  to = /* @__PURE__ */buildTransactionFunction(async args => {\n    const encoded = [];\n    const contractEncoder = new ContractEncoder(this.contractWrapper);\n    for (const arg of args) {\n      encoded.push(contractEncoder.encode(\"mintTo\", [await resolveAddress(arg.toAddress), await this.erc20.normalizeAmount(arg.amount)]));\n    }\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"multicall\",\n      args: [encoded]\n    });\n  });\n}\n\nclass Erc20Burnable {\n  featureName = FEATURE_TOKEN_BURNABLE.name;\n  constructor(erc20, contractWrapper) {\n    this.erc20 = erc20;\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Burn Tokens\n   *\n   * @remarks Burn tokens held by the connected wallet\n   *\n   * @example\n   * ```javascript\n   * // The amount of this token you want to burn\n   * const amount = 1.2;\n   *\n   * await contract.token.burn.tokens(amount);\n   * ```\n   */\n  tokens = /* @__PURE__ */buildTransactionFunction(async amount => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"burn\",\n      args: [await this.erc20.normalizeAmount(amount)]\n    });\n  });\n\n  /**\n   * Burn Tokens\n   *\n   * @remarks Burn tokens held by the specified wallet\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet sending the tokens\n   * const holderAddress = \"{{wallet_address}}\";\n   *\n   * // The amount of this token you want to burn\n   * const amount = 1.2;\n   *\n   * await contract.token.burn.from(holderAddress, amount);\n   * ```\n   */\n  from = /* @__PURE__ */buildTransactionFunction(async (holder, amount) => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"burnFrom\",\n      args: [await resolveAddress(holder), await this.erc20.normalizeAmount(amount)]\n    });\n  });\n}\n\n/**\n * Configure and claim ERC20 tokens\n * @remarks Manage claim phases and claim ERC20 tokens that have been lazily minted.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.token.drop.claim.to(\"0x...\", quantity);\n * ```\n */\n\nclass Erc20ClaimableWithConditions {\n  featureName = FEATURE_TOKEN_CLAIM_CONDITIONS_V2.name;\n  /**\n   * Configure claim conditions\n   * @remarks Define who can claim NFTs in the collection, when and how many.\n   * @example\n   * ```javascript\n   * const presaleStartTime = new Date();\n   * const publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const claimConditions = [\n   *   {\n   *     startTime: presaleStartTime, // start the presale now\n   *     maxClaimableSupply: 2, // limit how many mints for this presale\n   *     price: 0.01, // presale price\n   *     snapshot: ['0x...', '0x...'], // limit minting to only certain addresses\n   *   },\n   *   {\n   *     startTime: publicSaleStartTime, // 24h after presale, start public sale\n   *     price: 0.08, // public sale price\n   *   }\n   * ]);\n   * await contract.token.drop.claim.conditions.set(claimConditions);\n   * ```\n   */\n\n  constructor(erc20, contractWrapper, storage) {\n    this.erc20 = erc20;\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    const metadata = new ContractMetadata(this.contractWrapper, CustomContractSchema, this.storage);\n    this.conditions = new DropClaimConditions(this.contractWrapper, metadata, this.storage);\n  }\n\n  /**\n   * Claim a certain amount of tokens to a specific Wallet\n   *\n   * @remarks Let the specified wallet claim Tokens.\n   *\n   * @example\n   * ```javascript\n   * const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\n   * const quantity = 42.69; // how many tokens you want to claim\n   *\n   * const tx = await contract.token.drop.claim.to(address, quantity);\n   * const receipt = tx.receipt; // the transaction receipt\n   * ```\n   *\n   * @param destinationAddress - Address you want to send the token to\n   * @param amount - Quantity of the tokens you want to claim\n   * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer\n   * @param claimData\n   * @returns - The transaction receipt\n   */\n  to = /* @__PURE__ */buildTransactionFunction(async (destinationAddress, amount, options) => {\n    const quantity = await this.erc20.normalizeAmount(amount);\n    return await this.conditions.getClaimTransaction(destinationAddress, quantity, options);\n  });\n}\n\n/**\n * Configure and claim ERC20 tokens\n * @remarks Manage claim phases and claim ERC20 tokens that have been lazily minted.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.token.drop.claim.to(\"0x...\", quantity);\n * ```\n */\n\nclass Erc20Droppable {\n  /**\n   * Configure claim conditions\n   * @remarks Define who can claim NFTs in the collection, when and how many.\n   * @example\n   * ```javascript\n   * const presaleStartTime = new Date();\n   * const publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const claimConditions = [\n   *   {\n   *     startTime: presaleStartTime, // start the presale now\n   *     maxClaimableSupply: 2, // limit how many mints for this presale\n   *     price: 0.01, // presale price\n   *     snapshot: ['0x...', '0x...'], // limit minting to only certain addresses\n   *   },\n   *   {\n   *     startTime: publicSaleStartTime, // 24h after presale, start public sale\n   *     price: 0.08, // public sale price\n   *   }\n   * ]);\n   * await contract.nft.drop.claim.conditions.set(claimConditions);\n   * ```\n   */\n\n  constructor(erc20, contractWrapper, storage) {\n    this.erc20 = erc20;\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.claim = new Erc20ClaimableWithConditions(this.erc20, this.contractWrapper, this.storage);\n  }\n}\n\n/**\n * Mint ERC20 Tokens\n * @remarks Token minting functionality that handles unit parsing for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.nft.mint.to(walletAddress, nftMetadata);\n * ```\n * @public\n */\n\nclass Erc20Mintable {\n  featureName = FEATURE_TOKEN_MINTABLE.name;\n\n  /**\n   * Batch mint Tokens to many addresses\n   */\n\n  constructor(erc20, contractWrapper) {\n    this.erc20 = erc20;\n    this.contractWrapper = contractWrapper;\n    this.batch = this.detectErc20BatchMintable();\n  }\n\n  /**\n   * Mint Tokens\n   *\n   * @remarks Mint tokens to a specified address.\n   *\n   * @example\n   * ```javascript\n   * const toAddress = \"{{wallet_address}}\"; // Address of the wallet you want to mint the tokens to\n   * const amount = \"1.5\"; // The amount of this token you want to mint\n   * await contract.token.mint.to(toAddress, amount);\n   * ```\n   */\n  to = /* @__PURE__ */buildTransactionFunction(async (to, amount) => {\n    return await this.getMintTransaction(to, amount);\n  });\n\n  /**\n   * @deprecated Use `contract.erc20.mint.prepare(...args)` instead\n   */\n  async getMintTransaction(to, amount) {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"mintTo\",\n      args: [await resolveAddress(to), await this.erc20.normalizeAmount(amount)]\n    });\n  }\n  detectErc20BatchMintable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC20BatchMintable\")) {\n      return new Erc20BatchMintable(this.erc20, this.contractWrapper);\n    }\n    return undefined;\n  }\n}\n\nasync function setErc20Allowance(contractToApprove, value, currencyAddress, overrides) {\n  if (isNativeToken(currencyAddress)) {\n    overrides[\"value\"] = value;\n  } else {\n    const signer = contractToApprove.getSigner();\n    const provider = contractToApprove.getProvider();\n    const erc20 = new ContractWrapper(signer || provider, currencyAddress, ERC20Abi, contractToApprove.options, contractToApprove.storage);\n    const owner = await contractToApprove.getSignerAddress();\n    const spender = contractToApprove.address;\n    const allowance = await erc20.read(\"allowance\", [owner, spender]);\n    if (allowance.lt(value)) {\n      // approve overrides the previous allowance, set it to the minimum required for this tx\n      await erc20.sendTransaction(\"approve\", [spender, value]);\n    }\n    return overrides;\n  }\n}\n\n/**\n * Enables generating ERC20 Tokens with rules and an associated signature, which can then be minted by anyone securely\n * @public\n */\n// TODO consolidate into a single class\n\nclass Erc20SignatureMintable {\n  featureName = FEATURE_TOKEN_SIGNATURE_MINTABLE.name;\n  constructor(contractWrapper, roles) {\n    this.contractWrapper = contractWrapper;\n    this.roles = roles;\n  }\n\n  /**\n   * Mint tokens from a signature\n   *\n   * @remarks Mint a certain amount of tokens from a previously generated signature.\n   *\n   * @example\n   * ```javascript\n   * // see how to craft a payload to sign in the `generate()` documentation\n   * const signedPayload = contract.erc20.signature.generate(payload);\n   *\n   * // Use the signed payload to mint the tokens\n   * const tx = contract.erc20.signature.mint(signedPayload);\n   * ```\n   * @param signedPayload - the previously generated payload and signature with {@link Erc20SignatureMintable.generate}\n   * @twfeature ERC20SignatureMintable\n   */\n  mint = /* @__PURE__ */buildTransactionFunction(async signedPayload => {\n    const mintRequest = signedPayload.payload;\n    const signature = signedPayload.signature;\n    const message = await this.mapPayloadToContractStruct(mintRequest);\n    const overrides = await this.contractWrapper.getCallOverrides();\n    // TODO: Transaction Sequence Pattern\n    await setErc20Allowance(this.contractWrapper, BigNumber.from(message.price), mintRequest.currencyAddress, overrides);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"mintWithSignature\",\n      args: [message, signature],\n      overrides\n    });\n  });\n\n  /**\n   * Mint any number of generated tokens signatures at once\n   * @remarks Mint multiple token signatures in one transaction. Note that this is only possible for free mints (cannot batch mints with a price attached to it for security reasons)\n   * @param signedPayloads - the array of signed payloads to mint\n   * @twfeature ERC20SignatureMintable\n   */\n  mintBatch = /* @__PURE__ */buildTransactionFunction(async signedPayloads => {\n    const contractPayloads = await Promise.all(signedPayloads.map(async s => {\n      const message = await this.mapPayloadToContractStruct(s.payload);\n      const signature = s.signature;\n      const price = s.payload.price;\n      if (BigNumber.from(price).gt(0)) {\n        throw new Error(\"Can only batch free mints. For mints with a price, use regular mint()\");\n      }\n      return {\n        message,\n        signature\n      };\n    }));\n    const contractEncoder = new ContractEncoder(this.contractWrapper);\n    const encoded = contractPayloads.map(p => {\n      return contractEncoder.encode(\"mintWithSignature\", [p.message, p.signature]);\n    });\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"multicall\",\n      args: [encoded]\n    });\n  });\n\n  /**\n   * Verify that a payload is correctly signed\n   * @param signedPayload - the payload to verify\n   * @twfeature ERC20SignatureMintable\n   *\n   * ```javascript\n   * const startTime = new Date();\n   * const endTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const payload = {\n   *   quantity: 4.2, // The quantity of tokens to be minted\n   *   to: {{wallet_address}}, // Who will receive the tokens\n   *   price: 0.5, // the price to pay for minting those tokens\n   *   currencyAddress: NATIVE_TOKEN_ADDRESS, // the currency to pay with\n   *   mintStartTime: startTime, // can mint anytime from now\n   *   mintEndTime: endTime, // to 24h from now,\n   *   primarySaleRecipient: \"0x...\", // custom sale recipient for this token mint\n   * };\n   *\n   * const signedPayload = await contract.erc20.signature.generate(payload);\n   * // Now you can verify if the signed payload is valid\n   * const isValid = await contract.erc20.signature.verify(signedPayload);\n   * ```\n   */\n  async verify(signedPayload) {\n    const mintRequest = signedPayload.payload;\n    const signature = signedPayload.signature;\n    const message = await this.mapPayloadToContractStruct(mintRequest);\n    const verification = await this.contractWrapper.read(\"verify\", [message, signature]);\n    return verification[0];\n  }\n\n  /**\n   * Generate a signature that can be used to mint a certain amount of tokens\n   *\n   * @remarks Takes in a quantity of tokens, some conditions for how it can be minted and signs it with your private key. The generated signature can then be used to mint those tokens using the exact payload and signature generated.\n   *\n   * @example\n   * ```javascript\n   * const startTime = new Date();\n   * const endTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const payload = {\n   *   quantity: 4.2, // The quantity of tokens to be minted\n   *   to: {{wallet_address}}, // Who will receive the tokens\n   *   price: 0.5, // the price to pay for minting those tokens\n   *   currencyAddress: NATIVE_TOKEN_ADDRESS, // the currency to pay with\n   *   mintStartTime: startTime, // can mint anytime from now\n   *   mintEndTime: endTime, // to 24h from now,\n   *   primarySaleRecipient: \"0x...\", // custom sale recipient for this token mint\n   * };\n   *\n   * const signedPayload = await contract.erc20.signature.generate(payload);\n   * // now anyone can use these to mint the NFT using `contract.erc20.signature.mint(signedPayload)`\n   * ```\n   * @param mintRequest - the payload to sign\n   * @returns the signed payload and the corresponding signature\n   * @twfeature ERC20SignatureMintable\n   */\n  async generate(mintRequest) {\n    return (await this.generateBatch([mintRequest]))[0];\n  }\n\n  /**\n   * Generate a batch of signatures that can be used to mint many token signatures.\n   *\n   * @remarks See {@link Erc20SignatureMintable.generate}\n   *\n   * @param payloadsToSign - the payloads to sign\n   * @returns an array of payloads and signatures\n   * @twfeature ERC20SignatureMintable\n   */\n  async generateBatch(payloadsToSign) {\n    await this.roles?.verify([\"minter\"], await this.contractWrapper.getSignerAddress());\n    const parsedRequests = await Promise.all(payloadsToSign.map(m => Signature20PayloadInput.parseAsync(m)));\n    const chainId = await this.contractWrapper.getChainID();\n    const signer = this.contractWrapper.getSigner();\n    invariant(signer, \"No signer available\");\n\n    // ERC20Permit (EIP-712) spec differs from signature mint 721, 1155.\n    const name = await this.contractWrapper.read(\"name\", []);\n    return await Promise.all(parsedRequests.map(async m => {\n      const finalPayload = await Signature20PayloadOutput.parseAsync(m);\n      const signature = await this.contractWrapper.signTypedData(signer, {\n        name,\n        version: \"1\",\n        chainId,\n        verifyingContract: this.contractWrapper.address\n      }, {\n        MintRequest: MintRequest20\n      }, await this.mapPayloadToContractStruct(finalPayload));\n      return {\n        payload: finalPayload,\n        signature: signature.toString()\n      };\n    }));\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n  /**\n   * Maps a payload to the format expected by the contract\n   *\n   * @internal\n   *\n   * @param mintRequest - The payload to map.\n   * @returns - The mapped payload.\n   */\n  async mapPayloadToContractStruct(mintRequest) {\n    const normalizedPrice = await normalizePriceValue(this.contractWrapper.getProvider(), mintRequest.price, mintRequest.currencyAddress);\n    const amountWithDecimals = utils.parseUnits(mintRequest.quantity, await this.contractWrapper.read(\"decimals\", []));\n    return {\n      to: mintRequest.to,\n      primarySaleRecipient: mintRequest.primarySaleRecipient,\n      quantity: amountWithDecimals,\n      price: normalizedPrice,\n      currency: mintRequest.currencyAddress,\n      validityEndTimestamp: mintRequest.mintEndTime,\n      validityStartTimestamp: mintRequest.mintStartTime,\n      uid: mintRequest.uid\n    };\n  }\n}\n\n/**\n * Checks whether the given DetectableFeature is defined\n * @internal\n * @param namespace The namespace to check\n * @param feature The corresponding feature\n */\nfunction assertEnabled(namespace, feature) {\n  if (!namespace) {\n    throw new ExtensionNotImplementedError(feature);\n  }\n  return namespace;\n}\n\nasync function normalizeAmount(contractWrapper, amount) {\n  const decimals = await contractWrapper.read(\"decimals\", []);\n  return utils.parseUnits(AmountSchema.parse(amount), decimals);\n}\n\n/**\n * Standard ERC20 Token functions\n * @remarks Basic functionality for a ERC20 contract that handles all unit transformation for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.erc20.transfer(walletAddress, amount);\n * ```\n * @public\n */\nclass Erc20 {\n  featureName = FEATURE_TOKEN.name;\n  /**\n   * Mint tokens\n   */\n\n  get chainId() {\n    return this._chainId;\n  }\n  constructor(contractWrapper, storage, chainId) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.mintable = this.detectErc20Mintable();\n    this.burnable = this.detectErc20Burnable();\n    this.droppable = this.detectErc20Droppable();\n    this.signatureMintable = this.detectErc20SignatureMintable();\n    this._chainId = chainId;\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n\n  /**\n   * @internal\n   */\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  ////// Standard ERC20 Extension //////\n\n  /**\n   * Get the token metadata\n   * @remarks name, symbol, etc...\n   * @example\n   * ```javascript\n   * const token = await contract.erc20.get();\n   * ```\n   * @returns The token metadata\n   * @twfeature ERC20\n   */\n  async get() {\n    return await fetchCurrencyMetadata(this.contractWrapper.getProvider(), this.getAddress());\n  }\n\n  /**\n   * Get token balance for the currently connected wallet\n   *\n   * @remarks Get a wallets token balance.\n   *\n   * @example\n   * ```javascript\n   * const balance = await contract.erc20.balance();\n   * ```\n   *\n   * @returns The balance of a specific wallet.\n   * @twfeature ERC20\n   */\n  async balance() {\n    return await this.balanceOf(await this.contractWrapper.getSignerAddress());\n  }\n\n  /**\n   * Get token balance for a specific wallet\n   *\n   * @remarks Get a wallets token balance.\n   *\n   * @example\n   * ```javascript\n   * const walletAddress = \"{{wallet_address}}\";\n   * const balance = await contract.erc20.balanceOf(walletAddress);\n   * ```\n   *\n   * @returns The balance of a specific wallet.\n   * @twfeature ERC20\n   */\n  async balanceOf(address) {\n    return this.getValue(await this.contractWrapper.read(\"balanceOf\", [await resolveAddress(address)]));\n  }\n\n  /**\n   * Get the total supply for this token\n   * @remarks Get how much supply has been minted\n   * @example\n   * ```javascript\n   * const balance = await contract.erc20.totalSupply();\n   * ```\n   * @twfeature ERC20\n   */\n  async totalSupply() {\n    return await this.getValue(await this.contractWrapper.read(\"totalSupply\", []));\n  }\n\n  /**\n   * Get token allowance\n   *\n   * @remarks Get the allowance of a 'spender' wallet over the connected wallet's funds - the allowance of a different address for a token is the amount of tokens that the `spender` wallet is allowed to spend on behalf of the connected wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to check token allowance\n   * const spenderAddress = \"0x...\";\n   * const allowance = await contract.erc20.allowance(spenderAddress);\n   * ```\n   *\n   * @returns The allowance of one wallet over anothers funds.\n   * @twfeature ERC20\n   */\n  async allowance(spender) {\n    const [owner, spenderAddress] = await Promise.all([this.contractWrapper.getSignerAddress(), resolveAddress(spender)]);\n    return await this.allowanceOf(owner, spenderAddress);\n  }\n\n  /**\n   * Get token allowance of a specific wallet\n   *\n   * @remarks Get the allowance of one wallet over another wallet's funds - the allowance of a different address for a token is the amount of tokens that the wallet is allowed to spend on behalf of the specified wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet who owns the funds\n   * const owner = \"{{wallet_address}}\";\n   * // Address of the wallet to check token allowance\n   * const spender = \"0x...\";\n   * const allowance = await contract.erc20.allowanceOf(owner, spender);\n   * ```\n   *\n   * @returns The allowance of one wallet over anothers funds.\n   * @twfeature ERC20\n   */\n  async allowanceOf(owner, spender) {\n    const args = await Promise.all([resolveAddress(owner), resolveAddress(spender)]);\n    return await this.getValue(await this.contractWrapper.read(\"allowance\", args));\n  }\n\n  /**\n   * Transfer tokens\n   *\n   * @remarks Transfer tokens from the connected wallet to another wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to send the tokens to\n   * const toAddress = \"0x...\";\n   * // The amount of tokens you want to send\n   * const amount = 0.1;\n   * await contract.erc20.transfer(toAddress, amount);\n   * ```\n   * @twfeature ERC20\n   */\n  transfer = /* @__PURE__ */buildTransactionFunction(async (to, amount) => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"transfer\",\n      args: await Promise.all([resolveAddress(to), this.normalizeAmount(amount)])\n    });\n  });\n\n  /**\n   * Transfer tokens from a specific address\n   *\n   * @remarks Transfer tokens from one wallet to another\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet sending the tokens\n   * const fromAddress = \"{{wallet_address}}\";\n   * // Address of the wallet you want to send the tokens to\n   * const toAddress = \"0x...\";\n   * // The number of tokens you want to send\n   * const amount = 1.2\n   * // Note that the connected wallet must have approval to transfer the tokens of the fromAddress\n   * await contract.erc20.transferFrom(fromAddress, toAddress, amount);\n   * ```\n   * @twfeature ERC20\n   */\n  transferFrom = /* @__PURE__ */buildTransactionFunction(async (from, to, amount) => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"transferFrom\",\n      args: await Promise.all([resolveAddress(from), resolveAddress(to), this.normalizeAmount(amount)])\n    });\n  });\n\n  /**\n   * Set token allowance\n   * @remarks Allows the specified `spender` wallet to transfer the given `amount` of tokens to another wallet\n   * @example\n   * ```javascript\n   * // Address of the wallet to allow transfers from\n   * const spenderAddress = \"0x...\";\n   * // The number of tokens to give as allowance\n   * const amount = 100\n   * await contract.erc20.setAllowance(spenderAddress, amount);\n   * ```\n   * @twfeature ERC20\n   */\n  setAllowance = /* @__PURE__ */buildTransactionFunction(async (spender, amount) => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"approve\",\n      args: await Promise.all([resolveAddress(spender), this.normalizeAmount(amount)])\n    });\n  });\n\n  /**\n   * Transfer tokens to many wallets\n   *\n   * @remarks Mint tokens from the connected wallet to many wallets\n   *\n   * @example\n   * ```javascript\n   * // Data of the tokens you want to mint\n   * const data = [\n   *   {\n   *     toAddress: \"{{wallet_address}}\", // Address to mint tokens to\n   *     amount: 100, // How many tokens to mint to specified address\n   *   },\n   *  {\n   *    toAddress: \"0x...\",\n   *    amount: 100,\n   *  }\n   * ]\n   *\n   * await contract.erc20.transferBatch(data);\n   * ```\n   */\n  transferBatch = /* @__PURE__ */buildTransactionFunction(async args => {\n    const contractEncoder = new ContractEncoder(this.contractWrapper);\n    const encoded = (await Promise.all(args.map(arg => Promise.all([this.normalizeAmount(arg.amount), resolveAddress(arg.toAddress)])))).map(_ref => {\n      let [amountWithDecimals, address] = _ref;\n      return contractEncoder.encode(\"transfer\", [address, amountWithDecimals]);\n    });\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"multicall\",\n      args: [encoded]\n    });\n  });\n\n  ////// ERC20 Mintable Extension //////\n\n  /**\n   * Mint tokens\n   *\n   * @remarks Mint tokens to the connected wallet.\n   *\n   * @example\n   * ```javascript\n   * const amount = \"1.5\"; // The amount of this token you want to mint\n   * await contract.erc20.mint(amount);\n   * ```\n   * @twfeature ERC20Mintable\n   */\n  mint = /* @__PURE__ */buildTransactionFunction(async amount => {\n    return this.mintTo.prepare(await this.contractWrapper.getSignerAddress(), amount);\n  });\n\n  /**\n   * Mint tokens to a specific wallet\n   *\n   * @remarks Mint tokens to a specified address.\n   *\n   * @example\n   * ```javascript\n   * const toAddress = \"{{wallet_address}}\"; // Address of the wallet you want to mint the tokens to\n   * const amount = \"1.5\"; // The amount of this token you want to mint\n   * await contract.erc20.mintTo(toAddress, amount);\n   * ```\n   * @twfeature ERC20Mintable\n   */\n  mintTo = /* @__PURE__ */buildTransactionFunction(async (receiver, amount) => {\n    return assertEnabled(this.mintable, FEATURE_TOKEN_MINTABLE).to.prepare(receiver, amount);\n  });\n\n  /**\n   * Construct a mint transaction without executing it\n   * @remarks This is useful for estimating the gas cost of a mint transaction, overriding transaction options and having fine grained control over the transaction execution.\n   * @param receiver - Address you want to send the token to\n   * @param amount - The amount of tokens you want to mint\n   *\n   * @deprecated Use `contract.erc20.mint.prepare(...args)` instead\n   * @twfeature ERC20Mintable\n   */\n  async getMintTransaction(receiver, amount) {\n    return assertEnabled(this.mintable, FEATURE_TOKEN_MINTABLE).getMintTransaction(receiver, amount);\n  }\n\n  ////// ERC20 BatchMintable Extension //////\n\n  /**\n   * Mint tokens to many wallets\n   *\n   * @remarks Mint tokens to many wallets in one transaction.\n   *\n   * @example\n   * ```javascript\n   * // Data of the tokens you want to mint\n   * const data = [\n   *   {\n   *     toAddress: \"{{wallet_address}}\", // Address to mint tokens to\n   *     amount: 0.2, // How many tokens to mint to specified address\n   *   },\n   *  {\n   *    toAddress: \"0x...\",\n   *    amount: 1.4,\n   *  }\n   * ]\n   *\n   * await contract.mintBatchTo(data);\n   * ```\n   * @twfeature ERC20BatchMintable\n   */\n  mintBatchTo = /* @__PURE__ */buildTransactionFunction(async args => {\n    return assertEnabled(this.mintable?.batch, FEATURE_TOKEN_BATCH_MINTABLE).to.prepare(args);\n  });\n\n  ////// ERC20 Burnable Extension //////\n\n  /**\n   * Burn tokens\n   *\n   * @remarks Burn tokens held by the connected wallet\n   *\n   * @example\n   * ```javascript\n   * // The amount of this token you want to burn\n   * const amount = 1.2;\n   *\n   * await contract.erc20.burn(amount);\n   * ```\n   * @twfeature ERC20Burnable\n   */\n  burn = /* @__PURE__ */buildTransactionFunction(async amount => {\n    return assertEnabled(this.burnable, FEATURE_TOKEN_BURNABLE).tokens.prepare(amount);\n  });\n\n  /**\n   * Burn tokens from a specific wallet\n   *\n   * @remarks Burn tokens held by the specified wallet\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet sending the tokens\n   * const holderAddress = \"{{wallet_address}}\";\n   *\n   * // The amount of this token you want to burn\n   * const amount = 1.2;\n   *\n   * await contract.erc20.burnFrom(holderAddress, amount);\n   * ```\n   * @twfeature ERC20Burnable\n   */\n  burnFrom = /* @__PURE__ */buildTransactionFunction(async (holder, amount) => {\n    return assertEnabled(this.burnable, FEATURE_TOKEN_BURNABLE).from.prepare(holder, amount);\n  });\n\n  ////// ERC20 Claimable Extension //////\n\n  /**\n   * Claim tokens\n   *\n   * @remarks Let the specified wallet claim Tokens.\n   *\n   * @example\n   * ```javascript\n   * const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\n   * const quantity = 42.69; // how many tokens you want to claim\n   *\n   * const tx = await contract.erc20.claim(address, quantity);\n   * const receipt = tx.receipt; // the transaction receipt\n   * ```\n   *\n   * @param destinationAddress - Address you want to send the token to\n   * @param amount - Quantity of the tokens you want to claim\n   * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer\n   * @param claimData\n   * @returns - The transaction receipt\n   * @twfeature ERC20ClaimPhasesV2 | ERC20ClaimPhasesV1 | ERC20ClaimConditionsV2 | ERC20ClaimConditionsV1\n   */\n  claim = /* @__PURE__ */buildTransactionFunction(async (amount, options) => {\n    return this.claimTo.prepare(await this.contractWrapper.getSignerAddress(), amount, options);\n  });\n\n  /**\n   * Claim tokens to a specific wallet\n   *\n   * @remarks Let the specified wallet claim Tokens.\n   *\n   * @example\n   * ```javascript\n   * const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\n   * const quantity = 42.69; // how many tokens you want to claim\n   *\n   * const tx = await contract.erc20.claim(address, quantity);\n   * const receipt = tx.receipt; // the transaction receipt\n   * ```\n   *\n   * @param destinationAddress - Address you want to send the token to\n   * @param amount - Quantity of the tokens you want to claim\n   * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer\n   * @param claimData\n   * @returns - The transaction receipt\n   * @twfeature ERC20ClaimPhasesV2 | ERC20ClaimPhasesV1 | ERC20ClaimConditionsV2 | ERC20ClaimConditionsV1\n   */\n  claimTo = /* @__PURE__ */buildTransactionFunction(async (destinationAddress, amount, options) => {\n    return assertEnabled(this.droppable?.claim, FEATURE_TOKEN_CLAIM_CONDITIONS_V2).to.prepare(destinationAddress, amount, options);\n  });\n\n  /**\n   * Configure claim conditions\n   * @remarks Define who can claim NFTs in the collection, when and how many.\n   * @example\n   * ```javascript\n   * const presaleStartTime = new Date();\n   * const publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const claimConditions = [\n   *   {\n   *     startTime: presaleStartTime, // start the presale now\n   *     maxClaimableSupply: 2, // limit how many mints for this presale\n   *     price: 0.01, // presale price\n   *     snapshot: ['0x...', '0x...'], // limit minting to only certain addresses\n   *   },\n   *   {\n   *     startTime: publicSaleStartTime, // 24h after presale, start public sale\n   *     price: 0.08, // public sale price\n   *   }\n   * ]);\n   * await contract.erc20.claimConditions.set(claimConditions);\n   * ```\n   * @twfeature ERC20ClaimPhasesV2 | ERC20ClaimPhasesV1 | ERC20ClaimConditionsV2 | ERC20ClaimConditionsV1\n   */\n  get claimConditions() {\n    return assertEnabled(this.droppable?.claim, FEATURE_TOKEN_CLAIM_CONDITIONS_V2).conditions;\n  }\n\n  ////// ERC20 SignatureMint Extension //////\n\n  /**\n   * Mint with signature\n   * @remarks Generate dynamic tokens with your own signature, and let others mint them using that signature.\n   * @example\n   * ```javascript\n   * // see how to craft a payload to sign in the `contract.erc20.signature.generate()` documentation\n   * const signedPayload = contract.erc20.signature().generate(payload);\n   *\n   * // now the payload can be used to mint tokens\n   * const tx = contract.erc20.signature.mint(signedPayload);\n   * ```\n   * @twfeature ERC20SignatureMintable\n   */\n  get signature() {\n    return assertEnabled(this.signatureMintable, FEATURE_TOKEN_SIGNATURE_MINTABLE);\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  /**\n   * returns the wei amount from a token amount\n   * @internal\n   * @param amount\n   */\n  async normalizeAmount(amount) {\n    return normalizeAmount(this.contractWrapper, amount);\n  }\n\n  /**\n   * @internal\n   */\n  async getValue(value) {\n    return await fetchCurrencyValue(this.contractWrapper.getProvider(), this.getAddress(), BigNumber.from(value));\n  }\n  detectErc20Mintable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC20\")) {\n      return new Erc20Mintable(this, this.contractWrapper);\n    }\n    return undefined;\n  }\n  detectErc20Burnable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC20Burnable\")) {\n      return new Erc20Burnable(this, this.contractWrapper);\n    }\n    return undefined;\n  }\n  detectErc20Droppable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC20ClaimConditionsV1\") || detectContractFeature(this.contractWrapper, \"ERC20ClaimConditionsV2\") || detectContractFeature(this.contractWrapper, \"ERC20ClaimPhasesV1\") || detectContractFeature(this.contractWrapper, \"ERC20ClaimPhasesV2\")) {\n      return new Erc20Droppable(this, this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n  detectErc20SignatureMintable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC20SignatureMintable\")) {\n      return new Erc20SignatureMintable(this.contractWrapper);\n    }\n    return undefined;\n  }\n}\n\n/**\n * Mint Many ERC721 NFTs at once\n * @remarks NFT batch minting functionality that handles IPFS storage for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.nft.mint.batch.to(walletAddress, [nftMetadata1, nftMetadata2, ...]);\n * ```\n * @public\n */\n\nclass Erc721BatchMintable {\n  featureName = FEATURE_NFT_BATCH_MINTABLE.name;\n  constructor(erc721, contractWrapper, storage) {\n    this.erc721 = erc721;\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n  }\n\n  /**\n   * Mint Many unique NFTs\n   *\n   * @remarks Mint many unique NFTs at once to a specified wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to mint the NFT to\n   * const walletAddress = \"{{wallet_address}}\";\n   *\n   * // Custom metadata of the NFTs you want to mint.\n   * const metadatas = [{\n   *   name: \"Cool NFT #1\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }, {\n   *   name: \"Cool NFT #2\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/other/image.png\"),\n   * }];\n   *\n   * const tx = await contract.mint.batch.to(walletAddress, metadatas);\n   * const receipt = tx[0].receipt; // same transaction receipt for all minted NFTs\n   * const firstTokenId = tx[0].id; // token id of the first minted NFT\n   * const firstNFT = await tx[0].data(); // (optional) fetch details of the first minted NFT\n   * ```\n   */\n  to = /* @__PURE__ */buildTransactionFunction(async (to, metadatas) => {\n    const [uris, resolvedAddress] = await Promise.all([uploadOrExtractURIs(metadatas, this.storage), resolveAddress(to)]);\n    const contractEncoder = new ContractEncoder(this.contractWrapper);\n    const encoded = uris.map(uri => contractEncoder.encode(\"mintTo\", [resolvedAddress, uri]));\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"multicall\",\n      args: [encoded],\n      parse: receipt => {\n        const events = this.contractWrapper.parseLogs(\"TokensMinted\", receipt.logs);\n        if (events.length === 0 || events.length < metadatas.length) {\n          throw new Error(\"TokenMinted event not found, minting failed\");\n        }\n        return events.map(e => {\n          const id = e.args.tokenIdMinted;\n          return {\n            id,\n            receipt,\n            data: () => this.erc721.get(id)\n          };\n        });\n      }\n    });\n  });\n}\n\n/**\n * Configure and claim ERC721 NFTs\n * @remarks Manage claim phases and claim ERC721 NFTs that have been lazily minted.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.erc721.claim(quantity);\n * await contract.erc721.claimConditions.getActive();\n * ```\n */\n\nclass Erc721ClaimableWithConditions {\n  featureName = FEATURE_NFT_CLAIM_CONDITIONS_V2.name;\n\n  /**\n   * Configure claim conditions\n   * @remarks Define who can claim NFTs in the collection, when and how many.\n   * @example\n   * ```javascript\n   * const presaleStartTime = new Date();\n   * const publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const claimConditions = [\n   *   {\n   *     startTime: presaleStartTime, // start the presale now\n   *     maxClaimableSupply: 2, // limit how many mints for this presale\n   *     price: 0.01, // presale price\n   *     snapshot: ['0x...', '0x...'], // limit minting to only certain addresses\n   *   },\n   *   {\n   *     startTime: publicSaleStartTime, // 24h after presale, start public sale\n   *     price: 0.08, // public sale price\n   *   }\n   * ]);\n   * await contract.erc721.claimConditions.set(claimConditions);\n   * ```\n   */\n\n  constructor(erc721, contractWrapper, storage) {\n    this.erc721 = erc721;\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    const metadata = new ContractMetadata(this.contractWrapper, CustomContractSchema, this.storage);\n    this.conditions = new DropClaimConditions(this.contractWrapper, metadata, this.storage);\n  }\n\n  /**\n   * Claim unique NFTs to a specific Wallet\n   *\n   * @remarks Let the specified wallet claim NFTs.\n   *\n   * @example\n   * ```javascript\n   * const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\n   * const quantity = 1; // how many unique NFTs you want to claim\n   *\n   * const tx = await contract.erc721.claimTo(address, quantity);\n   * const receipt = tx[0].receipt; // the transaction receipt\n   * const claimedTokenId = tx[0].id; // the id of the first NFT claimed\n   * const claimedNFT = await tx[0].data(); // (optional) get the first claimed NFT metadata\n   * ```\n   *\n   * @param destinationAddress - Address you want to send the token to\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param options\n   * @returns - an array of results containing the id of the token claimed, the transaction receipt and a promise to optionally fetch the nft metadata\n   */\n  to = /* @__PURE__ */buildTransactionFunction(async (destinationAddress, quantity, options) => {\n    // TODO: Transaction Sequence Pattern\n    const tx = await this.conditions.getClaimTransaction(destinationAddress, quantity, options);\n    tx.setParse(receipt => {\n      const event = this.contractWrapper.parseLogs(\"TokensClaimed\", receipt?.logs);\n      const startingIndex = event[0].args.startTokenId;\n      const endingIndex = startingIndex.add(quantity);\n      const results = [];\n      for (let id = startingIndex; id.lt(endingIndex); id = id.add(1)) {\n        results.push({\n          id,\n          receipt,\n          data: () => this.erc721.get(id)\n        });\n      }\n      return results;\n    });\n    return tx;\n  });\n}\n\nasync function calculateClaimCost(contractWrapper, pricePerToken, quantity, currencyAddress, checkERC20Allowance) {\n  let overrides = {};\n  const currency = currencyAddress || NATIVE_TOKEN_ADDRESS;\n  const normalizedPrice = await normalizePriceValue(contractWrapper.getProvider(), pricePerToken, currency);\n  const totalCost = normalizedPrice.mul(quantity);\n  if (totalCost.gt(0)) {\n    if (currency === NATIVE_TOKEN_ADDRESS) {\n      overrides = {\n        value: totalCost\n      };\n    } else if (currency !== NATIVE_TOKEN_ADDRESS && checkERC20Allowance) {\n      await approveErc20Allowance(contractWrapper, currency, totalCost, quantity, 0);\n    }\n  }\n  return overrides;\n}\n\n/**\n * Configure and claim ERC721 NFTs\n * @remarks Manage claim phases and claim ERC721 NFTs that have been lazily minted.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.erc721.claim(tokenId, quantity);\n * ```\n */\n\nclass Erc721Claimable {\n  featureName = FEATURE_NFT_CLAIM_CUSTOM.name;\n  constructor(erc721, contractWrapper) {\n    this.erc721 = erc721;\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Construct a claim transaction without executing it.\n   * This is useful for estimating the gas cost of a claim transaction, overriding transaction options and having fine grained control over the transaction execution.\n   * @param destinationAddress - Address you want to send the token to\n   * @param tokenId - Id of the token you want to claim\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param options - Options for claiming the NFTs\n   *\n   * @deprecated Use `contract.erc721.claim.prepare(...args)` instead\n   */\n  async getClaimTransaction(destinationAddress, quantity, options) {\n    // TODO: Transaction Sequence Pattern\n    let overrides = {};\n    if (options && options.pricePerToken) {\n      overrides = await calculateClaimCost(this.contractWrapper, options.pricePerToken, quantity, options.currencyAddress, options.checkERC20Allowance);\n    }\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"claim\",\n      args: [destinationAddress, quantity],\n      overrides\n    });\n  }\n\n  /**\n   * Claim NFTs to a specific Wallet\n   *\n   * @remarks Let the specified wallet claim NFTs.\n   *\n   * @example\n   * ```javascript\n   * const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\n   * const quantity = 1; // how many NFTs you want to claim\n   *\n   * const tx = await contract.erc721.claimTo(address, quantity);\n   * const receipt = tx[0].receipt; // the transaction receipt\n   * ```\n   *\n   * @param destinationAddress - Address you want to send the token to\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param options - Options for claiming the NFTs\n   *\n   * @returns - Receipt for the transaction\n   */\n  to = /* @__PURE__ */buildTransactionFunction(async (destinationAddress, quantity, options) => {\n    // TODO: Transaction Sequence Pattern\n    const tx = await this.getClaimTransaction(destinationAddress, quantity, options);\n    tx.setParse(receipt => {\n      const event = this.contractWrapper.parseLogs(\"TokensClaimed\", receipt?.logs);\n      const startingIndex = event[0].args.startTokenId;\n      const endingIndex = startingIndex.add(quantity);\n      const results = [];\n      for (let id = startingIndex; id.lt(endingIndex); id = id.add(1)) {\n        results.push({\n          id,\n          receipt,\n          data: () => this.erc721.get(id)\n        });\n      }\n      return results;\n    });\n    return tx;\n  });\n}\n\n/**\n * Lazily mint and claim ERC721 NFTs\n * @remarks Manage claim phases and claim ERC721 NFTs that have been lazily minted.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.drop.claim(quantity);\n * ```\n */\n\nclass Erc721LazyMintable {\n  featureName = FEATURE_NFT_LAZY_MINTABLE.name;\n\n  /**\n   * Delayed reveal\n   * @remarks Create a batch of encrypted NFTs that can be revealed at a later time.\n   * @example\n   * ```javascript\n   * // the real NFTs, these will be encrypted until you reveal them\n   * const realNFTs = [{\n   *   name: \"Common NFT #1\",\n   *   description: \"Common NFT, one of many.\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }, {\n   *   name: \"Super Rare NFT #2\",\n   *   description: \"You got a Super Rare NFT!\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }];\n   * // A placeholder NFT that people will get immediately in their wallet, and will be converted to the real NFT at reveal time\n   * const placeholderNFT = {\n   *   name: \"Hidden NFT\",\n   *   description: \"Will be revealed next week!\"\n   * };\n   * // Create and encrypt the NFTs\n   * await contract.nft.drop.revealer.createDelayedRevealBatch(\n   *   placeholderNFT,\n   *   realNFTs,\n   *   \"my secret password\",\n   * );\n   * // Whenever you're ready, reveal your NFTs at any time\n   * const batchId = 0; // the batch to reveal\n   * await contract.erc721.revealer.reveal(batchId, \"my secret password\");\n   * ```\n   */\n\n  constructor(erc721, contractWrapper, storage) {\n    this.erc721 = erc721;\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.revealer = this.detectErc721Revealable();\n  }\n\n  /**\n   * Create a batch of unique NFTs to be claimed in the future\n   *\n   * @remarks Create batch allows you to create a batch of many unique NFTs in one transaction.\n   *\n   * @example\n   * ```javascript\n   * // Custom metadata of the NFTs to create\n   * const metadatas = [{\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }, {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }];\n   *\n   * const results = await contract.erc721.lazyMint(metadatas); // uploads and creates the NFTs on chain\n   * const firstTokenId = results[0].id; // token id of the first created NFT\n   * const firstNFT = await results[0].data(); // (optional) fetch details of the first created NFT\n   * ```\n   *\n   * @param metadatas - The metadata to include in the batch.\n   * @param options - optional upload progress callback\n   */\n  lazyMint = /* @__PURE__ */buildTransactionFunction(async (metadatas, options) => {\n    const startFileNumber = await this.erc721.nextTokenIdToMint();\n    const batch = await uploadOrExtractURIs(metadatas, this.storage, startFileNumber.toNumber(), options);\n    // ensure baseUri is the same for the entire batch\n    const baseUri = getBaseUriFromBatch(batch);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"lazyMint\",\n      args: [batch.length, baseUri.endsWith(\"/\") ? baseUri : `${baseUri}/`, utils.toUtf8Bytes(\"\")],\n      parse: receipt => {\n        const event = this.contractWrapper.parseLogs(\"TokensLazyMinted\", receipt?.logs);\n        const startingIndex = event[0].args.startTokenId;\n        const endingIndex = event[0].args.endTokenId;\n        const results = [];\n        for (let id = startingIndex; id.lte(endingIndex); id = id.add(1)) {\n          results.push({\n            id,\n            receipt,\n            data: () => this.erc721.getTokenMetadata(id)\n          });\n        }\n        return results;\n      }\n    });\n  });\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n  detectErc721Revealable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC721Revealable\")) {\n      return new DelayedReveal(this.contractWrapper, this.storage, FEATURE_NFT_REVEALABLE.name, () => this.erc721.nextTokenIdToMint());\n    }\n    return undefined;\n  }\n}\n\n/**\n * Mint ERC721 NFTs\n * @remarks NFT minting functionality that handles IPFS storage for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.nft.mint.to(walletAddress, nftMetadata);\n * ```\n * @public\n */\n\nclass Erc721Mintable {\n  featureName = FEATURE_NFT_MINTABLE.name;\n  constructor(erc721, contractWrapper, storage) {\n    this.erc721 = erc721;\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.batch = this.detectErc721BatchMintable();\n  }\n\n  /**\n   * Mint a unique NFT\n   *\n   * @remarks Mint a unique NFT to a specified wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to mint the NFT to\n   * const walletAddress = \"{{wallet_address}}\";\n   *\n   * // Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\n   * const metadata = {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * };\n   *\n   * const tx = await contract.nft.mint.to(walletAddress, metadata);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const tokenId = tx.id; // the id of the NFT minted\n   * const nft = await tx.data(); // (optional) fetch details of minted NFT\n   * ```\n   */\n  to = /* @__PURE__ */buildTransactionFunction(async (to, metadata) => {\n    const [uri, toAddress] = await Promise.all([uploadOrExtractURI(metadata, this.storage), resolveAddress(to)]);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"mintTo\",\n      args: [toAddress, uri],\n      parse: receipt => {\n        const event = this.contractWrapper.parseLogs(\"Transfer\", receipt?.logs);\n        if (event.length === 0) {\n          throw new Error(\"TransferEvent event not found\");\n        }\n        const id = event[0].args.tokenId;\n        return {\n          id,\n          receipt,\n          data: () => this.erc721.get(id)\n        };\n      }\n    });\n  });\n\n  /**\n   * @deprecated Use `contract.erc721.mint.prepare(...args)` instead\n   */\n  async getMintTransaction(to, metadata) {\n    return this.to.prepare(await resolveAddress(to), metadata);\n  }\n  detectErc721BatchMintable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC721BatchMintable\")) {\n      return new Erc721BatchMintable(this.erc721, this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n}\n\n/**\n * List owned ERC721 NFTs\n * @remarks Easily list all the NFTs from a ERC721 contract, owned by a certain wallet.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const walletAddress = \"0x...\";\n * const ownedNFTs = await contract.nft.query.owned.all(walletAddress);\n * ```\n * @public\n */\n\nclass Erc721Enumerable {\n  featureName = FEATURE_NFT_ENUMERABLE.name;\n  constructor(erc721, contractWrapper) {\n    this.erc721 = erc721;\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Get all NFTs owned by a specific wallet\n   *\n   * @remarks Get all the data associated with the NFTs owned by a specific wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to get the NFTs of\n   * const address = \"{{wallet_address}}\";\n   * const nfts = await contract.nft.query.owned.all(address);\n   * ```\n   * @param walletAddress - the wallet address to query, defaults to the connected wallet\n   * @returns The NFT metadata for all NFTs in the contract.\n   */\n  async all(walletAddress) {\n    const tokenIds = await this.tokenIds(walletAddress);\n    return await Promise.all(tokenIds.map(tokenId => this.erc721.get(tokenId.toString())));\n  }\n\n  /**\n   * Get all token ids of NFTs owned by a specific wallet.\n   * @param walletAddress - the wallet address to query, defaults to the connected wallet\n   */\n  async tokenIds(walletAddress) {\n    const address = await resolveAddress(walletAddress || (await this.contractWrapper.getSignerAddress()));\n    const balance = await this.contractWrapper.read(\"balanceOf\", [address]);\n    const indices = Array.from(Array(balance.toNumber()).keys());\n    return await Promise.all(indices.map(i => this.contractWrapper.read(\"tokenOfOwnerByIndex\", [address, i])));\n  }\n}\n\n/**\n * List owned ERC721 NFTs\n * @remarks Easily list all the NFTs from a ERC721 contract, owned by a certain wallet.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const walletAddress = \"0x...\";\n * const ownedNFTs = await contract.nft.query.owned.all(walletAddress);\n * ```\n * @public\n */\n\nclass Erc721AQueryable {\n  featureName = FEATURE_NFT_QUERYABLE.name;\n  constructor(erc721, contractWrapper) {\n    this.erc721 = erc721;\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Get all NFTs owned by a specific wallet\n   *\n   * @remarks Get all the data associated with the NFTs owned by a specific wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to get the NFTs of\n   * const address = \"{{wallet_address}}\";\n   * const nfts = await contract.nft.query.owned.all(address);\n   * ```\n   * @param walletAddress - the wallet address to query, defaults to the connected wallet\n   * @returns The NFT metadata for all NFTs in the contract.\n   */\n  async all(walletAddress) {\n    const tokenIds = await this.tokenIds(walletAddress);\n    return await Promise.all(tokenIds.map(tokenId => this.erc721.get(tokenId.toString())));\n  }\n\n  /**\n   * Get all token ids of NFTs owned by a specific wallet.\n   * @param walletAddress - the wallet address to query, defaults to the connected wallet\n   */\n  async tokenIds(walletAddress) {\n    const address = await resolveAddress(walletAddress || (await this.contractWrapper.getSignerAddress()));\n    return await this.contractWrapper.read(\"tokensOfOwner\", [address]);\n  }\n}\n\n/**\n * List ERC721 NFTs\n * @remarks Easily list all the NFTs in a ERC721 contract.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const nfts = await contract.nft.query.all();\n * ```\n * @public\n */\n\nclass Erc721Supply {\n  featureName = FEATURE_NFT_SUPPLY.name;\n  constructor(erc721, contractWrapper) {\n    this.erc721 = erc721;\n    this.contractWrapper = contractWrapper;\n    this.owned = this.detectErc721Owned();\n  }\n\n  /**\n   * Get all NFTs\n   *\n   * @remarks Get all the data associated with every NFT in this contract.\n   *\n   * By default, returns the first 100 NFTs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const nfts = await contract.nft.query.all();\n   * ```\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs queried.\n   */\n  async all(queryParams) {\n    let startTokenId = BigNumber.from(0);\n    if (hasFunction(\"startTokenId\", this.contractWrapper)) {\n      startTokenId = await this.contractWrapper.read(\"startTokenId\", []);\n    }\n    const start = BigNumber.from(queryParams?.start || 0).add(startTokenId).toNumber();\n    const count = BigNumber.from(queryParams?.count || DEFAULT_QUERY_ALL_COUNT).toNumber();\n    const maxSupply = await this.erc721.nextTokenIdToMint();\n    const maxId = Math.min(maxSupply.add(startTokenId).toNumber(), start + count);\n    return await Promise.all([...Array(maxId - start).keys()].map(i => this.erc721.get((start + i).toString())));\n  }\n\n  /**\n   * Return all the owners of each token id in this contract\n   * @returns\n   */\n  async allOwners() {\n    let totalCount;\n    let startTokenId = BigNumber.from(0);\n    if (hasFunction(\"startTokenId\", this.contractWrapper)) {\n      startTokenId = await this.contractWrapper.read(\"startTokenId\", []);\n    }\n    try {\n      totalCount = await this.erc721.totalClaimedSupply();\n    } catch (e) {\n      totalCount = await this.totalCount();\n    }\n    totalCount = totalCount.add(startTokenId);\n\n    // TODO use multicall3 if available\n    // TODO can't call toNumber() here, this can be a very large number\n    const arr = [...new Array(totalCount.toNumber()).keys()];\n    const owners = await Promise.all(arr.map(i => this.erc721.ownerOf(i).catch(() => constants.AddressZero)));\n    return arr.map(i => ({\n      tokenId: i,\n      owner: owners[i]\n    })).filter(o => o.owner !== constants.AddressZero);\n  }\n\n  /**\n   * Get the number of NFTs minted\n   * @remarks This returns the total number of NFTs minted in this contract, **not** the total supply of a given token.\n   *\n   * @returns the total number of NFTs minted in this contract\n   * @public\n   */\n  async totalCount() {\n    return await this.erc721.nextTokenIdToMint();\n  }\n\n  /**\n   * Get the number of NFTs of this contract currently owned by end users\n   * @returns the total number of NFTs of this contract in circulation (minted & not burned)\n   * @public\n   */\n  async totalCirculatingSupply() {\n    return await this.contractWrapper.read(\"totalSupply\", []);\n  }\n  detectErc721Owned() {\n    if (detectContractFeature(this.contractWrapper, \"ERC721Enumerable\")) {\n      return new Erc721Enumerable(this.erc721, this.contractWrapper);\n    } else if (detectContractFeature(this.contractWrapper, \"ERC721AQueryable\")) {\n      return new Erc721AQueryable(this.erc721, this.contractWrapper);\n    }\n    return undefined;\n  }\n}\n\n/**\n * @internal\n */\nconst TieredDropPayloadSchema = /* @__PURE__ */(() => BaseSignaturePayloadInput.extend({\n  tierPriority: z.array(z.string()),\n  royaltyRecipient: AddressOrEnsSchema.default(constants.AddressZero),\n  royaltyBps: BasisPointsSchema.default(0),\n  quantity: BigNumberSchema.default(1)\n}))();\n\nclass Erc721TieredDrop {\n  featureName = FEATURE_NFT_TIERED_DROP.name;\n  constructor(erc721, contractWrapper, storage) {\n    this.erc721 = erc721;\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n  }\n  async getMetadataInTier(tier) {\n    const tiers = await this.contractWrapper.read(\"getMetadataForAllTiers\", []);\n    const batches = tiers.find(t => t.tier === tier);\n    if (!batches) {\n      throw new Error(\"Tier not found in contract.\");\n    }\n    const nfts = await Promise.all(batches.ranges.map((range, i) => {\n      const nftsInRange = [];\n      const baseUri = batches.baseURIs[i];\n      for (let j = range.startIdInclusive.toNumber(); j < range.endIdNonInclusive.toNumber(); j++) {\n        const uri = baseUri.endsWith(\"/\") ? `${baseUri}${j}` : `${baseUri}/${j}`;\n        const metadata = this.storage.downloadJSON(uri);\n        nftsInRange.push(metadata);\n      }\n      return nftsInRange;\n    }).flat());\n    return nfts;\n  }\n  async getTokensInTier(tier) {\n    const endIndex = await this.contractWrapper.read(\"getTokensInTierLen\", []);\n    if (endIndex.eq(0)) {\n      return [];\n    }\n    const ranges = await this.contractWrapper.read(\"getTokensInTier\", [tier, 0, endIndex]);\n    const nfts = await Promise.all(ranges.map(range => {\n      const nftsInRange = [];\n      for (let i = range.startIdInclusive.toNumber(); i < range.endIdNonInclusive.toNumber(); i++) {\n        nftsInRange.push(this.erc721.get(i));\n      }\n      return nftsInRange;\n    }).flat());\n    return nfts;\n  }\n  createBatchWithTier = /* @__PURE__ */buildTransactionFunction(async (metadatas, tier, options) => {\n    // TODO: Change this to on extension\n    const startFileNumber = await this.erc721.nextTokenIdToMint();\n    const batch = await uploadOrExtractURIs(metadatas, this.storage, startFileNumber.toNumber(), options);\n    const baseUri = getBaseUriFromBatch(batch);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"lazyMint\",\n      args: [batch.length, baseUri.endsWith(\"/\") ? baseUri : `${baseUri}/`, tier, utils.toUtf8Bytes(\"\")],\n      parse: receipt => {\n        const event = this.contractWrapper.parseLogs(\"TokensLazyMinted\", receipt?.logs);\n        const startingIndex = event[0].args[1];\n        const endingIndex = event[0].args[2];\n        const results = [];\n        for (let id = startingIndex; id.lte(endingIndex); id = id.add(1)) {\n          results.push({\n            id,\n            receipt,\n            data: () => this.erc721.getTokenMetadata(id)\n          });\n        }\n        return results;\n      }\n    });\n  });\n  createDelayedRevealBatchWithTier = /* @__PURE__ */buildTransactionFunction(async (placeholder, metadatas, password, tier, options) => {\n    if (!password) {\n      throw new Error(\"Password is required\");\n    }\n    const placeholderUris = await this.storage.uploadBatch([CommonNFTInput.parse(placeholder)], {\n      rewriteFileNames: {\n        fileStartNumber: 0\n      }\n    });\n    const placeholderUri = getBaseUriFromBatch(placeholderUris);\n    const startFileNumber = await this.erc721.nextTokenIdToMint();\n    const uris = await this.storage.uploadBatch(metadatas.map(m => CommonNFTInput.parse(m)), {\n      onProgress: options?.onProgress,\n      rewriteFileNames: {\n        fileStartNumber: startFileNumber.toNumber()\n      }\n    });\n    const baseUri = getBaseUriFromBatch(uris);\n    const baseUriId = await this.contractWrapper.read(\"getBaseURICount\", []);\n    const chainId = await this.contractWrapper.getChainID();\n    const hashedPassword = utils.solidityKeccak256([\"string\", \"uint256\", \"uint256\", \"address\"], [password, chainId, baseUriId, this.contractWrapper.address]);\n    const encryptedBaseUri = await this.contractWrapper.read(\"encryptDecrypt\", [utils.toUtf8Bytes(baseUri), hashedPassword]);\n    const provenanceHash = utils.solidityKeccak256([\"bytes\", \"bytes\", \"uint256\"], [utils.toUtf8Bytes(baseUri), hashedPassword, chainId]);\n    const data = utils.defaultAbiCoder.encode([\"bytes\", \"bytes32\"], [encryptedBaseUri, provenanceHash]);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"lazyMint\",\n      args: [uris.length, placeholderUri.endsWith(\"/\") ? placeholderUri : `${placeholderUri}/`, tier, data],\n      parse: receipt => {\n        const event = this.contractWrapper.parseLogs(\"TokensLazyMinted\", receipt?.logs);\n        const startingIndex = event[0].args[1];\n        const endingIndex = event[0].args[2];\n        const results = [];\n        for (let id = startingIndex; id.lte(endingIndex); id = id.add(1)) {\n          results.push({\n            id,\n            receipt,\n            data: () => this.erc721.getTokenMetadata(id)\n          });\n        }\n        return results;\n      }\n    });\n  });\n  reveal = /* @__PURE__ */buildTransactionFunction(async (batchId, password) => {\n    if (!password) {\n      throw new Error(\"Password is required\");\n    }\n    const chainId = await this.contractWrapper.getChainID();\n    const key = utils.solidityKeccak256([\"string\", \"uint256\", \"uint256\", \"address\"], [password, chainId, batchId, this.contractWrapper.address]);\n    // performing the reveal locally to make sure it'd succeed before sending the transaction\n    try {\n      const decryptedUri = await this.contractWrapper.callStatic().reveal(batchId, key);\n      // basic sanity check for making sure decryptedUri is valid\n      // this is optional because invalid decryption key would result in non-utf8 bytes and\n      // ethers would throw when trying to decode it\n      if (!decryptedUri.includes(\"://\") || !decryptedUri.endsWith(\"/\")) {\n        throw new Error(\"invalid password\");\n      }\n    } catch (e) {\n      throw new Error(\"invalid password\");\n    }\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"reveal\",\n      args: [batchId, key]\n    });\n  });\n  async generate(payloadToSign) {\n    const [payload] = await this.generateBatch([payloadToSign]);\n    return payload;\n  }\n  async generateBatch(payloadsToSign) {\n    const parsedPayloads = await Promise.all(payloadsToSign.map(payload => TieredDropPayloadSchema.parseAsync(payload)));\n    const chainId = await this.contractWrapper.getChainID();\n    const signer = this.contractWrapper.getSigner();\n    invariant(signer, \"No signer available\");\n    return await Promise.all(parsedPayloads.map(async payload => {\n      const signature = await this.contractWrapper.signTypedData(signer, {\n        name: \"SignatureAction\",\n        version: \"1\",\n        chainId,\n        verifyingContract: this.contractWrapper.address\n      }, {\n        GenericRequest: GenericRequest\n      }, await this.mapPayloadToContractStruct(payload));\n      return {\n        payload,\n        signature: signature.toString()\n      };\n    }));\n  }\n  async verify(signedPayload) {\n    const message = await this.mapPayloadToContractStruct(signedPayload.payload);\n    const verification = await this.contractWrapper.read(\"verify\", [message, signedPayload.signature]);\n    return verification[0];\n  }\n  async claimWithSignature(signedPayload) {\n    const message = await this.mapPayloadToContractStruct(signedPayload.payload);\n    const normalizedTotalPrice = await normalizePriceValue(this.contractWrapper.getProvider(), signedPayload.payload.price, signedPayload.payload.currencyAddress);\n    const overrides = await this.contractWrapper.getCallOverrides();\n    await setErc20Allowance(this.contractWrapper, normalizedTotalPrice, signedPayload.payload.currencyAddress, overrides);\n    const receipt = await this.contractWrapper.sendTransaction(\"claimWithSignature\", [message, signedPayload.signature], overrides);\n    const event = this.contractWrapper.parseLogs(\"TokensClaimed\", receipt?.logs);\n    const startingIndex = event[0].args.startTokenId;\n    const endingIndex = startingIndex.add(event[0].args.quantityClaimed);\n    const results = [];\n    for (let id = startingIndex; id.lt(endingIndex); id = id.add(1)) {\n      results.push({\n        id,\n        receipt,\n        data: () => this.erc721.get(id)\n      });\n    }\n    return results;\n  }\n  async mapPayloadToContractStruct(payload) {\n    const normalizedTotalPrice = await normalizePriceValue(this.contractWrapper.getProvider(), payload.price, payload.currencyAddress);\n    const data = utils.defaultAbiCoder.encode([\"string[]\", \"address\", \"address\", \"uint256\", \"address\", \"uint256\", \"uint256\", \"address\"], [payload.tierPriority, payload.to, payload.royaltyRecipient, payload.royaltyBps, payload.primarySaleRecipient, payload.quantity, normalizedTotalPrice, payload.currencyAddress]);\n    return {\n      uid: payload.uid,\n      validityStartTimestamp: payload.mintStartTime,\n      validityEndTimestamp: payload.mintEndTime,\n      data\n    };\n  }\n}\n\nclass Erc721Burnable {\n  featureName = FEATURE_NFT_BURNABLE.name;\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Burn NFTs\n   *\n   * @remarks Burn NFTs held by the connected wallet\n   *\n   * @example\n   * ```javascript\n   * // The token ID of the NFT you want to burn\n   * const tokenId = 0;\n   *\n   * await contract.nft.burn.token(tokenId);\n   * ```\n   */\n  token = /* @__PURE__ */buildTransactionFunction(async tokenId => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"burn\",\n      args: [tokenId]\n    });\n  });\n}\n\nfunction toWei(amount) {\n  return utils.parseEther(AmountSchema.parse(amount));\n}\n\n/**\n * Claim ERC721 NFTs from a Zora Drop\n * @remarks Purchase NFTs on a Zora Drop\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.erc721.claim(tokenId, quantity);\n * ```\n */\nclass Erc721ClaimableZora {\n  featureName = FEATURE_NFT_CLAIM_ZORA.name;\n  constructor(erc721, contractWrapper) {\n    this.erc721 = erc721;\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Claim NFT\n   *\n   * @remarks Let the specified wallet claim NFTs.\n   *\n   * @example\n   * ```javascript\n   * const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\n   * const quantity = 1; // how many NFTs you want to claim\n   *\n   * const tx = await contract.erc721.claimTo(address, quantity);\n   * const receipt = tx[0].receipt; // the transaction receipt\n   * ```\n   *\n   * @param destinationAddress - Address you want to send the token to, needs to be the connected wallet address\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param options - Not applicable\n   *\n   * @returns - Receipt for the transaction\n   */\n  to = /* @__PURE__ */buildTransactionFunction(async (destinationAddress, quantity, options) => {\n    // TODO validation on destinationAddr / options\n    const signerAddress = await this.contractWrapper.getSigner()?.getAddress();\n    if (destinationAddress !== signerAddress) {\n      throw new Error(\"Zora Drop: Destination address must match connected wallet address\");\n    }\n    if (options?.pricePerToken) {\n      throw new Error(\"Zora Drop: Custom pricePerToken is not supported. Price is automatically calculated\");\n    }\n    const saleDetails = await this.getSaleDetails();\n    const price = saleDetails.publicSalePrice;\n    const zoraFee = toWei(\"0.000777\");\n    const totalPrice = BigNumber.from(price).add(zoraFee).mul(quantity);\n    const tx = Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"purchase\",\n      args: [quantity],\n      overrides: {\n        value: totalPrice\n      }\n    });\n    tx.setParse(receipt => {\n      const event = this.contractWrapper.parseLogs(\"Sale\", receipt?.logs);\n      const startingIndex = event[0].args.firstPurchasedTokenId;\n      const endingIndex = startingIndex.add(quantity);\n      const results = [];\n      for (let id = startingIndex; id.lt(endingIndex); id = id.add(1)) {\n        results.push({\n          id,\n          receipt,\n          data: () => this.erc721.get(id)\n        });\n      }\n      return results;\n    });\n    return tx;\n  });\n  async getSaleDetails() {\n    return this.contractWrapper.read(\"saleDetails\", []);\n  }\n}\n\nclass Erc721LoyaltyCard {\n  featureName = FEATURE_NFT_LOYALTY_CARD.name;\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Cancel loyalty card NFTs\n   *\n   * @remarks Cancel loyalty card NFTs held by the connected wallet\n   *\n   * @example\n   * ```javascript\n   * // The token ID of the loyalty card you want to cancel\n   * const tokenId = 0;\n   *\n   * await contract.nft.loyaltyCard.cancel(tokenId);\n   * ```\n   */\n  cancel = /* @__PURE__ */buildTransactionFunction(async tokenId => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"cancel\",\n      args: [tokenId]\n    });\n  });\n\n  /**\n   * Revoke loyalty card NFTs\n   *\n   * @remarks Revoke loyalty card NFTs held by some owner.\n   *\n   * @example\n   * ```javascript\n   * // The token ID of the loyalty card you want to revoke\n   * const tokenId = 0;\n   *\n   * await contract.nft.loyaltyCard.revoke(tokenId);\n   * ```\n   */\n  revoke = /* @__PURE__ */buildTransactionFunction(async tokenId => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"revoke\",\n      args: [tokenId]\n    });\n  });\n}\n\nclass Erc721UpdatableMetadata {\n  featureName = FEATURE_NFT_UPDATABLE_METADATA.name;\n  constructor(contractWrapper, storage) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n  }\n\n  /**\n   * Update the metadata of an NFT\n   *\n   * @remarks Update the metadata of an NFT\n   *\n   * @example\n   * ```javascript\n   * // The token ID of the NFT whose metadata you want to update\n   * const tokenId = 0;\n   * // The new metadata\n   * const metadata = { name: \"My NFT\", description: \"My NFT description\"\"}\n   *\n   * await contract.nft.metadata.update(tokenId, metadata);\n   * ```\n   */\n  update = /* @__PURE__ */buildTransactionFunction(async (tokenId, metadata) => {\n    const uri = await uploadOrExtractURI(metadata, this.storage);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"setTokenURI\",\n      args: [tokenId, uri]\n    });\n  });\n}\n\n/**\n * Set shared metadata for ERC721 NFTs (Open Edition)\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.erc721.sharedMetadata.set(metadata);\n * ```\n */\nclass Erc721SharedMetadata {\n  featureName = FEATURE_NFT_SHARED_METADATA.name;\n  constructor(contractWrapper, storage) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n  }\n\n  /**\n   * Get Shared Metadata\n   *\n   * @remarks Get the shared metadata for the Open Edition NFTs.\n   *\n   * @example\n   * ```javascript\n   * const contract = await sdk.getContract(\"{{contract_address}}\");\n   *\n   * const tx = await contract.erc721.sharedMetadata.get();\n   * ```\n   *\n   * @returns - The shared metadata for the Open Edition NFTs.\n   */\n  async get() {\n    const metadata = await this.contractWrapper.read(\"sharedMetadata\", []);\n    if (metadata.every(value => value === \"\")) {\n      return undefined;\n    }\n    return {\n      name: metadata.name,\n      description: metadata.description,\n      image: metadata.imageURI,\n      animation_url: metadata.animationURI\n    };\n  }\n\n  /**\n   * Set Shared Metadata\n   *\n   * @remarks Set the shared metadata for the Open Edition NFTs.\n   *\n   * @example\n   * ```javascript\n   * const metadata = {\n   *  name: \"My NFT\",\n   *  description: \"This is my NFT\",\n   *  image: ...\n   *  animation_url: ...\n   * };\n   *\n   * const contract = await sdk.getContract(\"{{contract_address}}\");\n   *\n   * const tx = await contract.erc721.sharedMetadata.set(metadata);\n   * ```\n   *\n   * @param metadata - The metadata you want to set for the shared metadata.\n   *\n   * @returns - Receipt for the transaction\n   */\n  set = /* @__PURE__ */buildTransactionFunction(async metadata => {\n    const parsedMetadata = BasicNFTInput.parse(metadata);\n    // cleanup description\n    parsedMetadata.description = this.sanitizeJSONString(parsedMetadata.description);\n\n    // take the input and upload image and animation if it is not a URI already\n    const batch = [];\n    if (isFileOrBuffer(parsedMetadata.image)) {\n      batch.push(this.storage.upload(parsedMetadata.image));\n    } else if (typeof parsedMetadata.image === \"string\") {\n      batch.push(Promise.resolve(parsedMetadata.image));\n    } else {\n      batch.push(Promise.resolve(undefined));\n    }\n    if (isFileOrBuffer(parsedMetadata.animation_url)) {\n      batch.push(this.storage.upload(parsedMetadata.animation_url));\n    } else if (typeof parsedMetadata.animation_url === \"string\") {\n      batch.push(Promise.resolve(parsedMetadata.animation_url));\n    } else {\n      batch.push(Promise.resolve(undefined));\n    }\n    const [imageUri, animationUri] = await Promise.all(batch);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"setSharedMetadata\",\n      args: [{\n        name: `${parsedMetadata.name || \"\"}`,\n        description: parsedMetadata.description || \"\",\n        imageURI: imageUri || \"\",\n        animationURI: animationUri || \"\"\n      }]\n    });\n  });\n  sanitizeJSONString(val) {\n    if (!val) {\n      return val;\n    }\n    const sanitized = JSON.stringify(val);\n    return sanitized.slice(1, sanitized.length - 1);\n  }\n}\n\n/**\n * Enables generating dynamic ERC721 NFTs with rules and an associated signature, which can then be minted by anyone securely\n * @public\n */\nclass Erc721WithQuantitySignatureMintable {\n  featureName = FEATURE_NFT_SIGNATURE_MINTABLE_V2.name;\n  constructor(contractWrapper, storage) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n  }\n\n  /**\n   * Mint a dynamically generated NFT\n   *\n   * @remarks Mint a dynamic NFT with a previously generated signature.\n   *\n   * @example\n   * ```javascript\n   * // see how to craft a payload to sign in the `generate()` documentation\n   * const signedPayload = contract.erc721.signature.generate(payload);\n   *\n   * // now anyone can mint the NFT\n   * const tx = contract.erc721.signature.mint(signedPayload);\n   * const receipt = tx.receipt; // the mint transaction receipt\n   * const mintedId = tx.id; // the id of the NFT minted\n   * ```\n   * @param signedPayload - the previously generated payload and signature with {@link Erc721WithQuantitySignatureMintable.generate}\n   * @twfeature ERC721SignatureMint\n   */\n  mint = /* @__PURE__ */buildTransactionFunction(async signedPayload => {\n    const mintRequest = signedPayload.payload;\n    const signature = signedPayload.signature;\n    const overrides = await this.contractWrapper.getCallOverrides();\n    const parse = receipt => {\n      const t = this.contractWrapper.parseLogs(\"TokensMintedWithSignature\", receipt.logs);\n      if (t.length === 0) {\n        throw new Error(\"No MintWithSignature event found\");\n      }\n      const id = t[0].args.tokenIdMinted;\n      return {\n        id,\n        receipt\n      };\n    };\n    if (await this.isLegacyNFTContract()) {\n      const message = await this.mapLegacyPayloadToContractStruct(mintRequest);\n      const price = message.price;\n\n      // TODO: Transaction Sequence Pattern\n      await setErc20Allowance(this.contractWrapper, price, mintRequest.currencyAddress, overrides);\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"mintWithSignature\",\n        args: [message, signature],\n        overrides,\n        parse\n      });\n    } else {\n      const message = await this.mapPayloadToContractStruct(mintRequest);\n      const price = message.pricePerToken.mul(message.quantity);\n\n      // TODO: Transaction Sequence Pattern\n      await setErc20Allowance(this.contractWrapper, price, mintRequest.currencyAddress, overrides);\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"mintWithSignature\",\n        args: [message, signature],\n        overrides,\n        parse\n      });\n    }\n  });\n\n  /**\n   * Mint any number of dynamically generated NFT at once\n   * @remarks Mint multiple dynamic NFTs in one transaction. Note that this is only possible for free mints (cannot batch mints with a price attached to it for security reasons)\n   * @param signedPayloads - the array of signed payloads to mint\n   * @twfeature ERC721SignatureMint\n   */\n  mintBatch = /* @__PURE__ */buildTransactionFunction(async signedPayloads => {\n    const isLegacyNFTContract = await this.isLegacyNFTContract();\n    const contractPayloads = (await Promise.all(signedPayloads.map(s => isLegacyNFTContract ? this.mapLegacyPayloadToContractStruct(s.payload) : this.mapPayloadToContractStruct(s.payload)))).map((message, index) => {\n      const s = signedPayloads[index];\n      const signature = s.signature;\n      const price = s.payload.price;\n      if (BigNumber.from(price).gt(0)) {\n        throw new Error(\"Can only batch free mints. For mints with a price, use regular mint()\");\n      }\n      return {\n        message,\n        signature\n      };\n    });\n    const contractEncoder = new ContractEncoder(this.contractWrapper);\n    const encoded = contractPayloads.map(p => {\n      if (isLegacyNFTContract) {\n        return contractEncoder.encode(\"mintWithSignature\", [p.message, p.signature]);\n      } else {\n        return contractEncoder.encode(\"mintWithSignature\", [p.message, p.signature]);\n      }\n    });\n    if (hasFunction(\"multicall\", this.contractWrapper)) {\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"multicall\",\n        args: [encoded],\n        parse: receipt => {\n          const events = this.contractWrapper.parseLogs(\"TokensMintedWithSignature\", receipt.logs);\n          if (events.length === 0) {\n            throw new Error(\"No MintWithSignature event found\");\n          }\n          return events.map(log => ({\n            id: log.args.tokenIdMinted,\n            receipt\n          }));\n        }\n      });\n    } else {\n      throw new Error(\"Multicall not available on this contract!\");\n    }\n  });\n\n  /**\n   * Verify that a payload is correctly signed\n   * @param signedPayload - the payload to verify\n   * @twfeature ERC721SignatureMint\n   *\n   * @example\n   * ```javascript\n   * const nftMetadata = {\n   *   name: \"Cool NFT #1\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * };\n   *\n   * const startTime = new Date();\n   * const endTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const payload = {\n   *   metadata: nftMetadata, // The NFT to mint\n   *   to: {{wallet_address}}, // Who will receive the NFT\n   *   quantity: 2, // the quantity of NFTs to mint\n   *   price: 0.5, // the price per NFT\n   *   currencyAddress: NATIVE_TOKEN_ADDRESS, // the currency to pay with\n   *   mintStartTime: startTime, // can mint anytime from now\n   *   mintEndTime: endTime, // to 24h from now\n   *   royaltyRecipient: \"0x...\", // custom royalty recipient for this NFT\n   *   royaltyBps: 100, // custom royalty fees for this NFT (in bps)\n   *   primarySaleRecipient: \"0x...\", // custom sale recipient for this NFT\n   * };\n   *\n   * const signedPayload = await contract.erc721.signature.generate(payload);\n   * // Now you can verify if the signed payload is valid\n   * const isValid = await contract.erc721.signature.verify(signedPayload);\n   * ```\n   */\n  async verify(signedPayload) {\n    const isLegacyNFTContract = await this.isLegacyNFTContract();\n    const mintRequest = signedPayload.payload;\n    const signature = signedPayload.signature;\n    let message;\n    let verification;\n    if (isLegacyNFTContract) {\n      message = await this.mapLegacyPayloadToContractStruct(mintRequest);\n      verification = await this.contractWrapper.read(\"verify\", [message, signature]);\n    } else {\n      message = await this.mapPayloadToContractStruct(mintRequest);\n      verification = await this.contractWrapper.read(\"verify\", [message, signature]);\n    }\n    return verification[0];\n  }\n\n  /**\n   * Generate a signature that can be used to mint a dynamic NFT\n   *\n   * @remarks Takes in an NFT and some information about how it can be minted, uploads the metadata and signs it with your private key. The generated signature can then be used to mint an NFT using the exact payload and signature generated.\n   *\n   * @example\n   * ```javascript\n   * const nftMetadata = {\n   *   name: \"Cool NFT #1\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * };\n   *\n   * const startTime = new Date();\n   * const endTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const payload = {\n   *   metadata: nftMetadata, // The NFT to mint\n   *   to: {{wallet_address}}, // Who will receive the NFT\n   *   quantity: 2, // the quantity of NFTs to mint\n   *   price: 0.5, // the price per NFT\n   *   currencyAddress: NATIVE_TOKEN_ADDRESS, // the currency to pay with\n   *   mintStartTime: startTime, // can mint anytime from now\n   *   mintEndTime: endTime, // to 24h from now\n   *   royaltyRecipient: \"0x...\", // custom royalty recipient for this NFT\n   *   royaltyBps: 100, // custom royalty fees for this NFT (in bps)\n   *   primarySaleRecipient: \"0x...\", // custom sale recipient for this NFT\n   * };\n   *\n   * const signedPayload = await contract.erc721.signature.generate(payload);\n   * // now anyone can use these to mint the NFT using `contract.erc721.signature.mint(signedPayload)`\n   * ```\n   * @param mintRequest - the payload to sign\n   * @returns the signed payload and the corresponding signature\n   * @twfeature ERC721SignatureMint\n   */\n  async generate(mintRequest) {\n    return (await this.generateBatch([mintRequest]))[0];\n  }\n\n  /**\n   * Genrate a batch of signatures that can be used to mint many dynamic NFTs.\n   *\n   * @remarks See {@link Erc721WithQuantitySignatureMintable.generate}\n   *\n   * @param payloadsToSign - the payloads to sign\n   * @returns an array of payloads and signatures\n   * @twfeature ERC721SignatureMint\n   */\n  async generateBatch(payloadsToSign) {\n    const isLegacyNFTContract = await this.isLegacyNFTContract();\n    const parsedRequests = await Promise.all(payloadsToSign.map(m => Signature721WithQuantityInput.parseAsync(m)));\n    const metadatas = parsedRequests.map(r => r.metadata);\n    const uris = await uploadOrExtractURIs(metadatas, this.storage);\n    const chainId = await this.contractWrapper.getChainID();\n    const signer = this.contractWrapper.getSigner();\n    invariant(signer, \"No signer available\");\n    return await Promise.all(parsedRequests.map(async (m, i) => {\n      const uri = uris[i];\n      const finalPayload = await Signature721WithQuantityOutput.parseAsync({\n        ...m,\n        uri\n      });\n      let signature;\n      if (isLegacyNFTContract) {\n        signature = await this.contractWrapper.signTypedData(signer, {\n          name: \"TokenERC721\",\n          version: \"1\",\n          chainId,\n          verifyingContract: this.contractWrapper.address\n        }, {\n          MintRequest: MintRequest721\n        }, await this.mapLegacyPayloadToContractStruct(finalPayload));\n      } else {\n        signature = await this.contractWrapper.signTypedData(signer, {\n          name: \"SignatureMintERC721\",\n          version: \"1\",\n          chainId,\n          verifyingContract: await this.contractWrapper.address\n        }, {\n          MintRequest: MintRequest721withQuantity\n        },\n        // TYPEHASH\n        await this.mapPayloadToContractStruct(finalPayload));\n      }\n      return {\n        payload: finalPayload,\n        signature: signature.toString()\n      };\n    }));\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  /**\n   * Maps a payload to the format expected by the contract\n   *\n   * @internal\n   *\n   * @param mintRequest - The payload to map.\n   * @returns - The mapped payload.\n   */\n  async mapPayloadToContractStruct(mintRequest) {\n    const normalizedPricePerToken = await normalizePriceValue(this.contractWrapper.getProvider(), mintRequest.price, mintRequest.currencyAddress);\n    return {\n      to: mintRequest.to,\n      royaltyRecipient: mintRequest.royaltyRecipient,\n      royaltyBps: mintRequest.royaltyBps,\n      primarySaleRecipient: mintRequest.primarySaleRecipient,\n      uri: mintRequest.uri,\n      quantity: mintRequest.quantity,\n      pricePerToken: normalizedPricePerToken,\n      currency: mintRequest.currencyAddress,\n      validityStartTimestamp: mintRequest.mintStartTime,\n      validityEndTimestamp: mintRequest.mintEndTime,\n      uid: mintRequest.uid\n    };\n  }\n  async mapLegacyPayloadToContractStruct(mintRequest) {\n    const normalizedPricePerToken = await normalizePriceValue(this.contractWrapper.getProvider(), mintRequest.price, mintRequest.currencyAddress);\n    return {\n      to: mintRequest.to,\n      price: normalizedPricePerToken,\n      uri: mintRequest.uri,\n      currency: mintRequest.currencyAddress,\n      validityEndTimestamp: mintRequest.mintEndTime,\n      validityStartTimestamp: mintRequest.mintStartTime,\n      uid: mintRequest.uid,\n      royaltyRecipient: mintRequest.royaltyRecipient,\n      royaltyBps: mintRequest.royaltyBps,\n      primarySaleRecipient: mintRequest.primarySaleRecipient\n    };\n  }\n  async isLegacyNFTContract() {\n    return detectContractFeature(this.contractWrapper, \"ERC721SignatureMintV1\");\n  }\n}\n\n/**\n * Standard ERC721 NFT functions\n * @remarks Basic functionality for a ERC721 contract that handles IPFS storage for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.erc721.transfer(walletAddress, tokenId);\n * ```\n * @public\n */\nclass Erc721 {\n  featureName = FEATURE_NFT.name;\n  get chainId() {\n    return this._chainId;\n  }\n  constructor(contractWrapper, storage, chainId) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.query = this.detectErc721Enumerable();\n    this.mintable = this.detectErc721Mintable();\n    this.burnable = this.detectErc721Burnable();\n    this.lazyMintable = this.detectErc721LazyMintable();\n    this.tieredDropable = this.detectErc721TieredDrop();\n    this.signatureMintable = this.detectErc721SignatureMintable();\n    this.claimWithConditions = this.detectErc721ClaimableWithConditions();\n    this.claimCustom = this.detectErc721Claimable();\n    this.claimZora = this.detectErc721ClaimableZora();\n    this.erc721SharedMetadata = this.detectErc721SharedMetadata();\n    this.loyaltyCard = this.detectErc721LoyaltyCard();\n    this.updatableMetadata = this.detectErc721UpdatableMetadata();\n    this._chainId = chainId;\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  ////// Standard ERC721 Extension //////\n\n  /**\n   * Get a single NFT\n   *\n   * @example\n   * ```javascript\n   * const tokenId = 0;\n   * const nft = await contract.erc721.get(tokenId);\n   * ```\n   * @param tokenId - the tokenId of the NFT to retrieve\n   * @returns The NFT metadata\n   * @twfeature ERC721\n   */\n  async get(tokenId) {\n    const [owner, metadata] = await Promise.all([this.ownerOf(tokenId).catch(() => constants.AddressZero), this.getTokenMetadata(tokenId).catch(() => ({\n      id: tokenId.toString(),\n      uri: \"\",\n      ...FALLBACK_METADATA\n    }))]);\n    return {\n      owner,\n      metadata,\n      type: \"ERC721\",\n      supply: \"1\"\n    };\n  }\n\n  /**\n   * Get the current owner of an NFT\n   *\n   * @param tokenId - the tokenId of the NFT\n   * @returns the address of the owner\n   * @twfeature ERC721\n   */\n  async ownerOf(tokenId) {\n    return await this.contractWrapper.read(\"ownerOf\", [tokenId]);\n  }\n\n  /**\n   * Get NFT balance of a specific wallet\n   *\n   * @remarks Get a wallets NFT balance (number of NFTs in this contract owned by the wallet).\n   *\n   * @example\n   * ```javascript\n   * const walletAddress = \"{{wallet_address}}\";\n   * const balance = await contract.erc721.balanceOf(walletAddress);\n   * console.log(balance);\n   * ```\n   * @twfeature ERC721\n   */\n  async balanceOf(address) {\n    return await this.contractWrapper.read(\"balanceOf\", [await resolveAddress(address)]);\n  }\n\n  /**\n   * Get NFT balance for the currently connected wallet\n   */\n  async balance() {\n    return await this.balanceOf(await this.contractWrapper.getSignerAddress());\n  }\n\n  /**\n   * Get whether this wallet has approved transfers from the given operator\n   * @param address - the wallet address\n   * @param operator - the operator address\n   */\n  async isApproved(address, operator) {\n    const [_address, _operator] = await Promise.all([resolveAddress(address), resolveAddress(operator)]);\n    return await this.contractWrapper.read(\"isApprovedForAll\", [_address, _operator]);\n  }\n\n  /**\n   * Transfer an NFT\n   *\n   * @remarks Transfer an NFT from the connected wallet to another wallet.\n   *\n   * @example\n   * ```javascript\n   * const walletAddress = \"{{wallet_address}}\";\n   * const tokenId = 0;\n   * await contract.erc721.transfer(walletAddress, tokenId);\n   * ```\n   * @twfeature ERC721\n   */\n  transfer = /* @__PURE__ */buildTransactionFunction(async (to, tokenId) => {\n    const [from, _to] = await Promise.all([this.contractWrapper.getSignerAddress(), resolveAddress(to)]);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"transferFrom(address,address,uint256)\",\n      args: [from, _to, tokenId]\n    });\n  });\n\n  /**\n   * Transfer an NFT from a specific wallet\n   *\n   * @remarks Transfer an NFT from the given wallet to another wallet.\n   *\n   * @example\n   * ```javascript\n   * const fromWalletAddress = \"{{wallet_address}}\";\n   * const toWalletAddress = \"{{wallet_address}}\";\n   * const tokenId = 0;\n   * await contract.erc721.transferFrom(fromWalletAddress, toWalletAddress, tokenId);\n   * ```\n   * @twfeature ERC721\n   */\n  transferFrom = /* @__PURE__ */buildTransactionFunction(async (from, to, tokenId) => {\n    const [fromAddress, toAddress] = await Promise.all([resolveAddress(from), resolveAddress(to)]);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"transferFrom(address,address,uint256)\",\n      args: [fromAddress, toAddress, tokenId]\n    });\n  });\n\n  /**\n   * Set approval for all NFTs\n   * @remarks Approve or remove operator as an operator for the caller. Operators can call transferFrom or safeTransferFrom for any token owned by the caller.\n   * @example\n   * ```javascript\n   * const operator = \"{{wallet_address}}\";\n   * await contract.erc721.setApprovalForAll(operator, true);\n   * ```\n   * @param operator - the operator's address\n   * @param approved - whether to approve or remove\n   * @twfeature ERC721\n   */\n  setApprovalForAll = /* @__PURE__ */buildTransactionFunction(async (operator, approved) => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"setApprovalForAll\",\n      args: [await resolveAddress(operator), approved]\n    });\n  });\n\n  /**\n   * Set approval for a single NFT\n   * @remarks Approve an operator for the NFT owner. Operators can call transferFrom or safeTransferFrom for the specified token.\n   * @example\n   * ```javascript\n   * const operator = \"{{wallet_address}}\";\n   * const tokenId = 0;\n   * await contract.erc721.setApprovalForToken(operator, tokenId);\n   * ```\n   * @param operator - the operator's address\n   * @param tokenId - the tokenId to give approval for\n   *\n   * @internal\n   */\n  setApprovalForToken = /* @__PURE__ */buildTransactionFunction(async (operator, tokenId) => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"approve\",\n      args: [await resolveAddress(operator), tokenId]\n    });\n  });\n\n  ////// ERC721 Supply Extension //////\n\n  /**\n   * Get all NFTs\n   *\n   * @remarks Get all the data associated with every NFT in this contract.\n   *\n   * By default, returns the first 100 NFTs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const nfts = await contract.erc721.getAll();\n   * console.log(nfts);\n   * ```\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs queried.\n   * @twfeature ERC721Supply | ERC721Enumerable\n   */\n  async getAll(queryParams) {\n    return assertEnabled(this.query, FEATURE_NFT_SUPPLY).all(queryParams);\n  }\n\n  /**\n   * Get all NFT owners\n   * @example\n   * ```javascript\n   * const owners = await contract.erc721.getAllOwners();\n   * console.log(owners);\n   * ```\n   * @returns an array of token ids and owners\n   * @twfeature ERC721Supply | ERC721Enumerable\n   */\n  async getAllOwners() {\n    return assertEnabled(this.query, FEATURE_NFT_SUPPLY).allOwners();\n  }\n\n  /**\n   * Get the total number of NFTs minted\n   * @remarks This returns the total number of NFTs minted in this contract, **not** the total supply of a given token.\n   * @example\n   * ```javascript\n   * const count = await contract.erc721.totalCount();\n   * console.log(count);\n   * ```\n   *\n   * @returns the total number of NFTs minted in this contract\n   * @public\n   */\n  async totalCount() {\n    return this.nextTokenIdToMint();\n  }\n\n  /**\n   * Get the total count NFTs minted in this contract\n   * @twfeature ERC721Supply | ERC721Enumerable\n   */\n  async totalCirculatingSupply() {\n    return assertEnabled(this.query, FEATURE_NFT_SUPPLY).totalCirculatingSupply();\n  }\n\n  ////// ERC721 Enumerable Extension //////\n\n  /**\n   * Get all NFTs owned by a specific wallet\n   *\n   * @remarks Get all the data associated with the NFTs owned by a specific wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to get the NFTs of\n   * const address = \"{{wallet_address}}\";\n   * const nfts = await contract.erc721.getOwned(address);\n   * console.log(nfts);\n   * ```\n   * @param walletAddress - the wallet address to query, defaults to the connected wallet\n   * @returns The NFT metadata for all NFTs in the contract.\n   * @twfeature ERC721Supply | ERC721Enumerable\n   */\n  async getOwned(walletAddress) {\n    if (walletAddress) {\n      walletAddress = await resolveAddress(walletAddress);\n    }\n    if (this.query?.owned) {\n      return this.query.owned.all(walletAddress);\n    } else {\n      const [address, allOwners] = await Promise.all([walletAddress || this.contractWrapper.getSignerAddress(), this.getAllOwners()]);\n      return await Promise.all((allOwners || []).filter(i => address?.toLowerCase() === i.owner?.toLowerCase()).map(i => this.get(i.tokenId)));\n    }\n  }\n\n  /**\n   * Get all token ids of NFTs owned by a specific wallet.\n   * @param walletAddress - the wallet address to query, defaults to the connected wallet\n   */\n  async getOwnedTokenIds(walletAddress) {\n    if (walletAddress) {\n      walletAddress = await resolveAddress(walletAddress);\n    }\n    if (this.query?.owned) {\n      return this.query.owned.tokenIds(walletAddress);\n    } else {\n      const [address, allOwners] = await Promise.all([walletAddress || this.contractWrapper.getSignerAddress(), this.getAllOwners()]);\n      return (allOwners || []).filter(i => address?.toLowerCase() === i.owner?.toLowerCase()).map(i => BigNumber.from(i.tokenId));\n    }\n  }\n\n  ////// ERC721 Mintable Extension //////\n\n  /**\n   * Mint an NFT\n   *\n   * @remarks Mint an NFT to the connected wallet.\n   *\n   * @example\n   * ```javascript\n   * // Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\n   * const metadata = {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * };\n   *\n   * const tx = await contract.erc721.mint(metadata);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const tokenId = tx.id; // the id of the NFT minted\n   * const nft = await tx.data(); // (optional) fetch details of minted NFT\n   * ```\n   * @twfeature ERC721Mintable\n   */\n  mint = /* @__PURE__ */buildTransactionFunction(async metadata => {\n    return this.mintTo.prepare(await this.contractWrapper.getSignerAddress(), metadata);\n  });\n\n  /**\n   * Mint an NFT to a specific wallet\n   *\n   * @remarks Mint a unique NFT to a specified wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to mint the NFT to\n   * const walletAddress = \"{{wallet_address}}\";\n   *\n   * // Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\n   * const metadata = {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * };\n   *\n   * const tx = await contract.erc721.mintTo(walletAddress, metadata);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const tokenId = tx.id; // the id of the NFT minted\n   * const nft = await tx.data(); // (optional) fetch details of minted NFT\n   * ```\n   * @twfeature ERC721Mintable\n   */\n  mintTo = /* @__PURE__ */buildTransactionFunction(async (receiver, metadata) => {\n    return assertEnabled(this.mintable, FEATURE_NFT_MINTABLE).to.prepare(receiver, metadata);\n  });\n\n  /**\n   * Construct a mint transaction without executing it.\n   * This is useful for estimating the gas cost of a mint transaction, overriding transaction options and having fine grained control over the transaction execution.\n   * @param receiver - Address you want to send the token to\n   * @param metadata - The metadata of the NFT you want to mint\n   *\n   * @deprecated Use `contract.erc721.mint.prepare(...args)` instead\n   * @twfeature ERC721Mintable\n   */\n  async getMintTransaction(receiver, metadata) {\n    return this.mintTo.prepare(receiver, metadata);\n  }\n\n  ////// ERC721 Batch Mintable Extension //////\n\n  /**\n   * Mint many NFTs\n   *\n   * @remarks Mint many unique NFTs at once to the connected wallet\n   *\n   * @example\n   * ```javascript*\n   * // Custom metadata of the NFTs you want to mint.\n   * const metadatas = [{\n   *   name: \"Cool NFT #1\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }, {\n   *   name: \"Cool NFT #2\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/other/image.png\"),\n   * }];\n   *\n   * const tx = await contract.erc721.mintBatch(metadatas);\n   * const receipt = tx[0].receipt; // same transaction receipt for all minted NFTs\n   * const firstTokenId = tx[0].id; // token id of the first minted NFT\n   * const firstNFT = await tx[0].data(); // (optional) fetch details of the first minted NFT\n   * ```\n   * @twfeature ERC721BatchMintable\n   */\n  mintBatch = /* @__PURE__ */buildTransactionFunction(async metadatas => {\n    return this.mintBatchTo.prepare(await this.contractWrapper.getSignerAddress(), metadatas);\n  });\n\n  /**\n   * Mint many NFTs to a specific wallet\n   *\n   * @remarks Mint many unique NFTs at once to a specified wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to mint the NFT to\n   * const walletAddress = \"{{wallet_address}}\";\n   *\n   * // Custom metadata of the NFTs you want to mint.\n   * const metadatas = [{\n   *   name: \"Cool NFT #1\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }, {\n   *   name: \"Cool NFT #2\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/other/image.png\"),\n   * }];\n   *\n   * const tx = await contract.erc721.mintBatchTo(walletAddress, metadatas);\n   * const receipt = tx[0].receipt; // same transaction receipt for all minted NFTs\n   * const firstTokenId = tx[0].id; // token id of the first minted NFT\n   * const firstNFT = await tx[0].data(); // (optional) fetch details of the first minted NFT\n   * ```\n   * @twfeature ERC721BatchMintable\n   */\n  mintBatchTo = /* @__PURE__ */buildTransactionFunction(async (receiver, metadatas) => {\n    return assertEnabled(this.mintable?.batch, FEATURE_NFT_BATCH_MINTABLE).to.prepare(receiver, metadatas);\n  });\n\n  ////// ERC721 Burnable Extension //////\n\n  /**\n   * Burn a single NFT\n   * @param tokenId - the token Id to burn\n   *\n   * @example\n   * ```javascript\n   * const result = await contract.erc721.burn(tokenId);\n   * ```\n   * @twfeature ERC721Burnable\n   */\n  burn = /* @__PURE__ */buildTransactionFunction(async tokenId => {\n    return assertEnabled(this.burnable, FEATURE_NFT_BURNABLE).token.prepare(tokenId);\n  });\n\n  ////// ERC721 Loyalty Card Extension //////\n\n  /**\n   * Cancel loyalty card NFTs\n   *\n   * @remarks Cancel loyalty card NFTs held by the connected wallet\n   *\n   * @example\n   * ```javascript\n   * // The token ID of the loyalty card you want to cancel\n   * const tokenId = 0;\n   *\n   * const result = await contract.erc721.cancel(tokenId);\n   * ```\n   * @twfeature ERC721LoyaltyCard\n   */\n  cancel = /* @__PURE__ */buildTransactionFunction(async tokenId => {\n    return assertEnabled(this.loyaltyCard, FEATURE_NFT_LOYALTY_CARD).cancel.prepare(tokenId);\n  });\n\n  /**\n   * Revoke loyalty card NFTs\n   *\n   * @remarks Revoke loyalty card NFTs held by some owner.\n   *\n   * @example\n   * ```javascript\n   * // The token ID of the loyalty card you want to revoke\n   * const tokenId = 0;\n   *\n   * const result = await contract.erc721.revoke(tokenId);\n   * ```\n   * @twfeature ERC721LoyaltyCard\n   */\n  revoke = /* @__PURE__ */buildTransactionFunction(async tokenId => {\n    return assertEnabled(this.loyaltyCard, FEATURE_NFT_LOYALTY_CARD).revoke.prepare(tokenId);\n  });\n\n  ////// ERC721 LazyMint Extension //////\n\n  /**\n   * Lazy mint NFTs\n   *\n   * @remarks Create batch allows you to create a batch of many unique NFTs in one transaction.\n   *\n   * @example\n   * ```javascript\n   * // Custom metadata of the NFTs to create\n   * const metadatas = [{\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }, {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }];\n   *\n   * const results = await contract.erc721.lazyMint(metadatas); // uploads and creates the NFTs on chain\n   * const firstTokenId = results[0].id; // token id of the first created NFT\n   * const firstNFT = await results[0].data(); // (optional) fetch details of the first created NFT\n   * ```\n   *\n   * @param metadatas - The metadata to include in the batch.\n   * @param options - optional upload progress callback\n   * @twfeature ERC721LazyMintable\n   */\n  lazyMint = /* @__PURE__ */buildTransactionFunction(async (metadatas, options) => {\n    return assertEnabled(this.lazyMintable, FEATURE_NFT_LAZY_MINTABLE).lazyMint.prepare(metadatas, options);\n  });\n\n  ////// ERC721 Metadata Extension //////\n\n  /**\n   * Update the metadata of an NFT\n   *\n   * @remarks Update the metadata of an NFT\n   *\n   * @example\n   * ```javascript\n   * // The token ID of the NFT whose metadata you want to update\n   * const tokenId = 0;\n   * // The new metadata\n   * const metadata = { name: \"My NFT\", description: \"My NFT description\"\"}\n   *\n   * await contract.erc721.update(tokenId, metadata);\n   * ```\n   * @twfeature ERC721UpdatableMetadata\n   */\n  update = /* @__PURE__ */buildTransactionFunction(async (tokenId, metadata) => {\n    return assertEnabled(this.updatableMetadata, FEATURE_NFT_UPDATABLE_METADATA).update.prepare(tokenId, metadata);\n  });\n\n  ////// ERC721 Claimable Extension //////\n\n  /**\n   * Claim NFTs\n   *\n   * @remarks Let the specified wallet claim NFTs.\n   *\n   * @example\n   * ```javascript\n   * const quantity = 1; // how many unique NFTs you want to claim\n   *\n   * const tx = await contract.erc721.claim(quantity);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const claimedTokenId = tx.id; // the id of the NFT claimed\n   * const claimedNFT = await tx.data(); // (optional) get the claimed NFT metadata\n   * ```\n   *\n   * @param quantity - Quantity of the tokens you want to claim\n   *\n   * @returns - an array of results containing the id of the token claimed, the transaction receipt and a promise to optionally fetch the nft metadata\n   * @twfeature ERC721ClaimCustom | ERC721ClaimPhasesV2 | ERC721ClaimPhasesV1 | ERC721ClaimConditionsV2 | ERC721ClaimConditionsV1 | ERC721ClaimZora\n   */\n  claim = /* @__PURE__ */buildTransactionFunction(async (quantity, options) => {\n    return this.claimTo.prepare(await this.contractWrapper.getSignerAddress(), quantity, options);\n  });\n\n  /**\n   * Claim NFTs to a specific wallet\n   *\n   * @remarks Let the specified wallet claim NFTs.\n   *\n   * @example\n   * ```javascript\n   * const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\n   * const quantity = 1; // how many unique NFTs you want to claim\n   *\n   * const tx = await contract.erc721.claimTo(address, quantity);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const claimedTokenId = tx.id; // the id of the NFT claimed\n   * const claimedNFT = await tx.data(); // (optional) get the claimed NFT metadata\n   * ```\n   *\n   * @param destinationAddress - Address you want to send the token to\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param options\n   * @returns - an array of results containing the id of the token claimed, the transaction receipt and a promise to optionally fetch the nft metadata\n   * @twfeature ERC721ClaimCustom | ERC721ClaimPhasesV2 | ERC721ClaimPhasesV1 | ERC721ClaimConditionsV2 | ERC721ClaimConditionsV1 | ERC721ClaimZora\n   */\n  claimTo = /* @__PURE__ */buildTransactionFunction(async (destinationAddress, quantity, options) => {\n    const claimWithConditions = this.claimWithConditions;\n    const claim = this.claimCustom;\n    const claimZora = this.claimZora;\n    if (claimWithConditions) {\n      return claimWithConditions.to.prepare(destinationAddress, quantity, options);\n    }\n    if (claim) {\n      return claim.to.prepare(destinationAddress, quantity, options);\n    }\n    if (claimZora) {\n      return claimZora.to.prepare(destinationAddress, quantity, options);\n    }\n    throw new ExtensionNotImplementedError(FEATURE_NFT_CLAIM_CUSTOM);\n  });\n\n  /**\n   * Construct a claim transaction without executing it.\n   * This is useful for estimating the gas cost of a claim transaction, overriding transaction options and having fine grained control over the transaction execution.\n   * @param destinationAddress\n   * @param quantity\n   * @param options\n   *\n   * @deprecated Use `contract.erc721.claim.prepare(...args)` instead\n   * @twfeature ERC721ClaimCustom | ERC721ClaimPhasesV2 | ERC721ClaimPhasesV1 | ERC721ClaimConditionsV2 | ERC721ClaimConditionsV1\n   */\n  async getClaimTransaction(destinationAddress, quantity, options) {\n    const claimWithConditions = this.claimWithConditions;\n    const claim = this.claimCustom;\n    if (claimWithConditions) {\n      return claimWithConditions.conditions.getClaimTransaction(destinationAddress, quantity, options);\n    }\n    if (claim) {\n      return claim.getClaimTransaction(destinationAddress, quantity, options);\n    }\n    throw new ExtensionNotImplementedError(FEATURE_NFT_CLAIM_CUSTOM);\n  }\n\n  /**\n   * Get the claimed supply\n   *\n   * @remarks Get the number of claimed NFTs in this Drop.\n   *\n   * * @example\n   * ```javascript\n   * const claimedNFTCount = await contract.totalClaimedSupply();\n   * console.log(`NFTs claimed: ${claimedNFTCount}`);\n   * ```\n   * @returns the unclaimed supply\n   * @twfeature ERC721ClaimCustom | ERC721ClaimPhasesV2 | ERC721ClaimPhasesV1 | ERC721ClaimConditionsV2 | ERC721ClaimConditionsV1\n   */\n  async totalClaimedSupply() {\n    const contract = this.contractWrapper;\n    if (hasFunction(\"totalMinted\", contract)) {\n      return this.contractWrapper.read(\"totalMinted\", []);\n    }\n    if (hasFunction(\"nextTokenIdToClaim\", contract)) {\n      return this.contractWrapper.read(\"nextTokenIdToClaim\", []);\n    }\n    throw new Error(\"No function found on contract to get total claimed supply\");\n  }\n\n  /**\n   * Get the unclaimed supply\n   *\n   * @remarks Get the number of unclaimed NFTs in this Drop.\n   *\n   * * @example\n   * ```javascript\n   * const unclaimedNFTCount = await contract.totalUnclaimedSupply();\n   * console.log(`NFTs left to claim: ${unclaimedNFTCount}`);\n   * ```\n   * @returns the unclaimed supply\n   * @twfeature ERC721ClaimCustom | ERC721ClaimPhasesV2 | ERC721ClaimPhasesV1 | ERC721ClaimConditionsV2 | ERC721ClaimConditionsV1\n   */\n  async totalUnclaimedSupply() {\n    const [nextTokenIdToMint, totalClaimedSupply] = await Promise.all([this.nextTokenIdToMint(), this.totalClaimedSupply()]);\n    return nextTokenIdToMint.sub(totalClaimedSupply);\n  }\n\n  /**\n   * Configure claim conditions\n   * @remarks Define who can claim NFTs in the collection, when and how many.\n   * @example\n   * ```javascript\n   * const presaleStartTime = new Date();\n   * const publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const claimConditions = [\n   *   {\n   *     startTime: presaleStartTime, // start the presale now\n   *     maxClaimableSupply: 2, // limit how many mints for this presale\n   *     price: 0.01, // presale price\n   *     snapshot: ['0x...', '0x...'], // limit minting to only certain addresses\n   *   },\n   *   {\n   *     startTime: publicSaleStartTime, // 24h after presale, start public sale\n   *     price: 0.08, // public sale price\n   *   }\n   * ]);\n   * await contract.erc721.claimConditions.set(claimConditions);\n   * ```\n   * @twfeature ERC721ClaimPhasesV2 | ERC721ClaimPhasesV1 | ERC721ClaimConditionsV2 | ERC721ClaimConditionsV1\n   */\n  get claimConditions() {\n    return assertEnabled(this.claimWithConditions, FEATURE_NFT_CLAIM_CONDITIONS_V2).conditions;\n  }\n\n  ////// ERC721 Tiered Drop Extension //////\n\n  /**\n   * Tiered Drop\n   * @remarks Drop lazy minted NFTs using a tiered drop mechanism.\n   * @twfeature ERC721TieredDrop\n   */\n  get tieredDrop() {\n    return assertEnabled(this.tieredDropable, FEATURE_NFT_TIERED_DROP);\n  }\n\n  ////// ERC721 SignatureMint Extension //////\n\n  /**\n   * Mint with signature\n   * @remarks Generate dynamic NFTs with your own signature, and let others mint them using that signature.\n   * @example\n   * ```javascript\n   * // see how to craft a payload to sign in the `contract.erc721.signature.generate()` documentation\n   * const signedPayload = await contract.erc721.signature.generate(payload);\n   *\n   * // now anyone can mint the NFT\n   * const tx = await contract.erc721.signature.mint(signedPayload);\n   * const receipt = tx.receipt; // the mint transaction receipt\n   * const mintedId = tx.id; // the id of the NFT minted\n   * ```\n   * @twfeature ERC721SignatureMintV1 | ERC721SignatureMintV2\n   */\n  get signature() {\n    return assertEnabled(this.signatureMintable, FEATURE_NFT_SIGNATURE_MINTABLE_V2);\n  }\n\n  ////// ERC721 DelayedReveal Extension //////\n\n  /**\n   * Mint delayed reveal NFTs\n   * @remarks Create a batch of encrypted NFTs that can be revealed at a later time.\n   * @example\n   * ```javascript\n   * // the real NFTs, these will be encrypted until you reveal them\n   * const realNFTs = [{\n   *   name: \"Common NFT #1\",\n   *   description: \"Common NFT, one of many.\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }, {\n   *   name: \"Super Rare NFT #2\",\n   *   description: \"You got a Super Rare NFT!\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }];\n   * // A placeholder NFT that people will get immediately in their wallet, and will be converted to the real NFT at reveal time\n   * const placeholderNFT = {\n   *   name: \"Hidden NFT\",\n   *   description: \"Will be revealed next week!\"\n   * };\n   * // Create and encrypt the NFTs\n   * await contract.erc721.revealer.createDelayedRevealBatch(\n   *   placeholderNFT,\n   *   realNFTs,\n   *   \"my secret password\",\n   * );\n   * // Whenever you're ready, reveal your NFTs at any time\n   * const batchId = 0; // the batch to reveal\n   * await contract.erc721.revealer.reveal(batchId, \"my secret password\");\n   * ```\n   * @twfeature ERC721Revealable\n   */\n  get revealer() {\n    return assertEnabled(this.lazyMintable?.revealer, FEATURE_NFT_REVEALABLE);\n  }\n\n  ////// ERC721 Shared Metadata Extension (Open Edition) //////\n\n  /**\n   * Set shared metadata for all NFTs\n   * @remarks Set shared metadata for all NFTs in the collection. (Open Edition)\n   * @example\n   * ```javascript\n   * // defiine the metadata\n   * const metadata = {\n   *  name: \"Shared Metadata\",\n   *  description: \"Every NFT in this collection will share this metadata.\"\n   * };\n   *\n   *\n   * const tx = contract.erc721.sharedMetadata.set(metadata);\n   * ```\n   * @twfeature ERC721SharedMetadata\n   */\n  get sharedMetadata() {\n    return assertEnabled(this.erc721SharedMetadata, FEATURE_NFT_SHARED_METADATA);\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  /**\n   * @internal\n   */\n  async getTokenMetadata(tokenId) {\n    const tokenUri = await this.contractWrapper.read(\"tokenURI\", [tokenId]);\n    if (!tokenUri) {\n      throw new NotFoundError();\n    }\n    return fetchTokenMetadata(tokenId, tokenUri, this.storage);\n  }\n\n  /**\n   * Return the next available token ID to mint\n   * @internal\n   */\n  async nextTokenIdToMint() {\n    if (hasFunction(\"nextTokenIdToMint\", this.contractWrapper)) {\n      let nextTokenIdToMint = await this.contractWrapper.read(\"nextTokenIdToMint\", []);\n      // handle open editions and contracts with startTokenId\n      if (hasFunction(\"startTokenId\", this.contractWrapper)) {\n        nextTokenIdToMint = nextTokenIdToMint.sub(await this.contractWrapper.read(\"startTokenId\", []));\n      }\n      return nextTokenIdToMint;\n    } else if (hasFunction(\"totalSupply\", this.contractWrapper)) {\n      return await this.contractWrapper.read(\"totalSupply\", []);\n    } else {\n      throw new Error(\"Contract requires either `nextTokenIdToMint` or `totalSupply` function available to determine the next token ID to mint\");\n    }\n  }\n  detectErc721Enumerable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC721Supply\") || hasFunction(\"nextTokenIdToMint\", this.contractWrapper)) {\n      return new Erc721Supply(this, this.contractWrapper);\n    }\n    return undefined;\n  }\n  detectErc721Mintable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC721Mintable\")) {\n      return new Erc721Mintable(this, this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n  detectErc721Burnable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC721Burnable\")) {\n      return new Erc721Burnable(this.contractWrapper);\n    }\n    return undefined;\n  }\n  detectErc721LazyMintable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC721LazyMintable\")) {\n      return new Erc721LazyMintable(this, this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n  detectErc721TieredDrop() {\n    if (detectContractFeature(this.contractWrapper, \"ERC721TieredDrop\")) {\n      return new Erc721TieredDrop(this, this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n  detectErc721SignatureMintable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC721SignatureMintV1\") || detectContractFeature(this.contractWrapper, \"ERC721SignatureMintV2\")) {\n      return new Erc721WithQuantitySignatureMintable(this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n  detectErc721ClaimableWithConditions() {\n    if (detectContractFeature(this.contractWrapper, \"ERC721ClaimConditionsV1\") || detectContractFeature(this.contractWrapper, \"ERC721ClaimConditionsV2\") || detectContractFeature(this.contractWrapper, \"ERC721ClaimPhasesV1\") || detectContractFeature(this.contractWrapper, \"ERC721ClaimPhasesV2\")) {\n      return new Erc721ClaimableWithConditions(this, this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n  detectErc721Claimable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC721ClaimCustom\")) {\n      return new Erc721Claimable(this, this.contractWrapper);\n    }\n    return undefined;\n  }\n  detectErc721ClaimableZora() {\n    if (detectContractFeature(this.contractWrapper, \"ERC721ClaimZora\")) {\n      return new Erc721ClaimableZora(this, this.contractWrapper);\n    }\n    return undefined;\n  }\n  detectErc721SharedMetadata() {\n    if (detectContractFeature(this.contractWrapper, \"ERC721SharedMetadata\")) {\n      return new Erc721SharedMetadata(this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n  detectErc721LoyaltyCard() {\n    if (detectContractFeature(this.contractWrapper, \"ERC721LoyaltyCard\")) {\n      return new Erc721LoyaltyCard(this.contractWrapper);\n    }\n    return undefined;\n  }\n  detectErc721UpdatableMetadata() {\n    if (detectContractFeature(this.contractWrapper, \"ERC721UpdatableMetadata\")) {\n      return new Erc721UpdatableMetadata(this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n}\n\n/**\n * Mint Many ERC1155 NFTs at once\n * @remarks NFT batch minting functionality that handles IPFS storage for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.edition.mint.batch.to(walletAddress, [nftMetadataWithSupply1, nftMetadataWithSupply2, ...]);\n * ```\n * @public\n */\n\nclass Erc1155BatchMintable {\n  featureName = FEATURE_EDITION_BATCH_MINTABLE.name;\n  constructor(erc1155, contractWrapper, storage) {\n    this.erc1155 = erc1155;\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n  }\n\n  /**\n   * Mint Many NFTs with limited supplies\n   *\n   * @remarks Mint many different NFTs with limited supplies to a specified wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to mint the NFT to\n   * const toAddress = \"{{wallet_address}}\"\n   *\n   * // Custom metadata and supplies of your NFTs\n   * const metadataWithSupply = [{\n   *   supply: 50, // The number of this NFT you want to mint\n   *   metadata: {\n   *     name: \"Cool NFT #1\",\n   *     description: \"This is a cool NFT\",\n   *     image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   *   },\n   * }, {\n   *   supply: 100,\n   *   metadata: {\n   *     name: \"Cool NFT #2\",\n   *     description: \"This is a cool NFT\",\n   *     image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   *   },\n   * }];\n   *\n   * const tx = await contract.edition.mint.batch.to(toAddress, metadataWithSupply);\n   * const receipt = tx[0].receipt; // same transaction receipt for all minted NFTs\n   * const firstTokenId = tx[0].id; // token id of the first minted NFT\n   * const firstNFT = await tx[0].data(); // (optional) fetch details of the first minted NFT\n   * ```\n   */\n  to = /* @__PURE__ */buildTransactionFunction(async (to, metadataWithSupply) => {\n    const metadatas = metadataWithSupply.map(a => a.metadata);\n    const supplies = metadataWithSupply.map(a => a.supply);\n    const uris = await uploadOrExtractURIs(metadatas, this.storage);\n    const resolvedAddress = await resolveAddress(to);\n    const contractEncoder = new ContractEncoder(this.contractWrapper);\n    const encoded = await Promise.all(uris.map(async (uri, index) => contractEncoder.encode(\"mintTo\", [resolvedAddress, constants.MaxUint256, uri, supplies[index]])));\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"multicall\",\n      args: [encoded],\n      parse: receipt => {\n        const events = this.contractWrapper.parseLogs(\"TokensMinted\", receipt.logs);\n        if (events.length === 0 || events.length < metadatas.length) {\n          throw new Error(\"TokenMinted event not found, minting failed\");\n        }\n        return events.map(e => {\n          const id = e.args.tokenIdMinted;\n          return {\n            id,\n            receipt,\n            data: () => this.erc1155.get(id)\n          };\n        });\n      }\n    });\n  });\n}\n\nclass Erc1155Burnable {\n  featureName = FEATURE_EDITION_BURNABLE.name;\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Burn a specified amount of a NFTs\n   *\n   * @remarks Burn the specified NFTs from the connected wallet\n   *\n   * @param tokenId - the token Id to burn\n   * @param amount - amount to burn\n   *\n   * @example\n   * ```javascript\n   * // The token ID to burn NFTs of\n   * const tokenId = 0;\n   * // The amount of the NFT you want to burn\n   * const amount = 2;\n   *\n   * const result = await contract.edition.burn.tokens(tokenId, amount);\n   * ```\n   */\n  tokens = /* @__PURE__ */buildTransactionFunction(async (tokenId, amount) => {\n    const account = await this.contractWrapper.getSignerAddress();\n    return this.from.prepare(account, tokenId, amount);\n  });\n\n  /**\n   * Burn a specified amount of a NFTs\n   *\n   * @remarks Burn the specified NFTs from a specified wallet\n   *\n   * @param account - the address to burn NFTs from\n   * @param tokenId - the tokenId to burn\n   * @param amount - amount to burn\n   *\n   * @example\n   * ```javascript\n   * // The address of the wallet to burn NFTS from\n   * const account = \"0x...\";\n   * // The token ID to burn NFTs of\n   * const tokenId = 0;\n   * // The amount of this NFT you want to burn\n   * const amount = 2;\n   *\n   * const result = await contract.edition.burn.from(account, tokenId, amount);\n   * ```\n   */\n  from = /* @__PURE__ */buildTransactionFunction(async (account, tokenId, amount) => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"burn\",\n      args: [await resolveAddress(account), tokenId, amount]\n    });\n  });\n\n  /**\n   * Burn a batch of NFTs\n   *\n   * @remarks Burn the batch NFTs from the connected wallet\n   *\n   * @param tokenIds - the tokenIds to burn\n   * @param amounts - amount of each token to burn\n   *\n   * @example\n   * ```javascript\n   * // The token IDs to burn NFTs of\n   * const tokenIds = [0, 1];\n   * // The amounts of each NFT you want to burn\n   * const amounts = [2, 2];\n   *\n   * const result = await contract.edition.burn.batch(tokenIds, amounts);\n   * ```\n   */\n  batch = /* @__PURE__ */buildTransactionFunction(async (tokenIds, amounts) => {\n    const account = await this.contractWrapper.getSignerAddress();\n    return this.batchFrom.prepare(account, tokenIds, amounts);\n  });\n\n  /**\n   * Burn a batch of NFTs\n   *\n   * @remarks Burn the batch NFTs from the specified wallet\n   *\n   * @param account - the address to burn NFTs from\n   * @param tokenIds - the tokenIds to burn\n   * @param amounts - amount of each token to burn\n   *\n   * @example\n   * ```javascript\n   * // The address of the wallet to burn NFTS from\n   * const account = \"0x...\";\n   * // The token IDs to burn NFTs of\n   * const tokenIds = [0, 1];\n   * // The amounts of each NFT you want to burn\n   * const amounts = [2, 2];\n   *\n   * const result = await contract.edition.burn.batchFrom(account, tokenIds, amounts);\n   * ```\n   */\n  batchFrom = /* @__PURE__ */buildTransactionFunction(async (account, tokenIds, amounts) => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"burnBatch\",\n      args: [await resolveAddress(account), tokenIds, amounts]\n    });\n  });\n}\n\n/**\n * List ERC1155 NFTs\n * @remarks Easily list all the NFTs in a ERC1155 contract.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const nfts = await contract.edition.query.all();\n * ```\n * @public\n */\n\nclass Erc1155Enumerable {\n  featureName = FEATURE_EDITION_ENUMERABLE.name;\n  constructor(erc1155, contractWrapper) {\n    this.erc1155 = erc1155;\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Get All NFTs\n   *\n   * @remarks Get all the data associated with every NFT in this contract.\n   *\n   * By default, returns the first 100 NFTs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const nfts = await contract.edition.query.all();\n   * ```\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs queried.\n   */\n  async all(queryParams) {\n    const start = BigNumber.from(queryParams?.start || 0).toNumber();\n    const count = BigNumber.from(queryParams?.count || DEFAULT_QUERY_ALL_COUNT).toNumber();\n    const maxId = Math.min((await this.totalCount()).toNumber(), start + count);\n    return await Promise.all([...Array(maxId - start).keys()].map(i => this.erc1155.get((start + i).toString())));\n  }\n\n  /**\n   * Get the number of NFTs minted\n   * @remarks This returns the total number of NFTs minted in this contract, **not** the total supply of a given token.\n   *\n   * @returns the total number of NFTs minted in this contract\n   * @public\n   */\n  async totalCount() {\n    return await this.contractWrapper.read(\"nextTokenIdToMint\", []);\n  }\n\n  /**\n   * Get the supply of token for a given tokenId.\n   * @remarks This is **not** the sum of supply of all NFTs in the contract.\n   *\n   * @returns the total number of NFTs minted in this contract\n   * @public\n   */\n  async totalCirculatingSupply(tokenId) {\n    return await this.contractWrapper.read(\"totalSupply\", [tokenId]);\n  }\n\n  /**\n   * Get all NFTs owned by a specific wallet\n   *\n   * @remarks Get all the data associated with the NFTs owned by a specific wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to get the NFTs of\n   * const address = \"{{wallet_address}}\";\n   * const nfts = await contract.edition.query.owned(address);\n   * ```\n   *\n   * @returns The NFT metadata for all NFTs in the contract.\n   */\n  async owned(walletAddress) {\n    const [address, maxId] = await Promise.all([resolveAddress(walletAddress || (await this.contractWrapper.getSignerAddress())), this.contractWrapper.read(\"nextTokenIdToMint\", [])]);\n    const balances = await this.contractWrapper.read(\"balanceOfBatch\", [Array(maxId.toNumber()).fill(address), Array.from(Array(maxId.toNumber()).keys())]);\n    const ownedBalances = balances.map((b, i) => {\n      return {\n        tokenId: i,\n        balance: b\n      };\n    }).filter(b => b.balance.gt(0));\n    const nfts = (await Promise.all(ownedBalances.map(item => this.erc1155.get(item.tokenId.toString())))).map((editionMetadata, index) => ({\n      ...editionMetadata,\n      owner: address,\n      quantityOwned: ownedBalances[index].balance.toString()\n    }));\n    return nfts;\n  }\n}\n\nasync function getPrebuiltInfo(address, provider) {\n  try {\n    const contract = new Contract(address, IThirdwebContractABI, provider);\n    const [type, version] = await Promise.all([utils.toUtf8String(await contract.contractType()) // eslint-disable-next-line no-control-regex\n    .replace(/\\x00/g, \"\"), await contract.contractVersion()]);\n    return {\n      type,\n      version\n    };\n  } catch (e) {\n    return undefined;\n  }\n}\n\nclass Erc1155LazyMintable {\n  featureName = FEATURE_EDITION_LAZY_MINTABLE_V2.name;\n\n  /**\n   * Delayed reveal\n   * @remarks Create a batch of encrypted NFTs that can be revealed at a later time.\n   * @example\n   * ```javascript\n   * // the real NFTs, these will be encrypted until you reveal them\n   * const realNFTs = [{\n   *   name: \"Common NFT #1\",\n   *   description: \"Common NFT, one of many.\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }, {\n   *   name: \"Super Rare NFT #2\",\n   *   description: \"You got a Super Rare NFT!\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }];\n   * // A placeholder NFT that people will get immediately in their wallet, and will be converted to the real NFT at reveal time\n   * const placeholderNFT = {\n   *   name: \"Hidden NFT\",\n   *   description: \"Will be revealed next week!\"\n   * };\n   * // Create and encrypt the NFTs\n   * await contract.edition.drop.revealer.createDelayedRevealBatch(\n   *   placeholderNFT,\n   *   realNFTs,\n   *   \"my secret password\",\n   * );\n   * // Whenever you're ready, reveal your NFTs at any time\n   * const batchId = 0; // the batch to reveal\n   * await contract.edition.drop.revealer.reveal(batchId, \"my secret password\");\n   * ```\n   */\n\n  constructor(erc1155, contractWrapper, storage) {\n    this.erc1155 = erc1155;\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.revealer = this.detectErc1155Revealable();\n  }\n\n  /**\n   * Create a batch of NFTs to be claimed in the future\n   *\n   * @remarks Create batch allows you to create a batch of many NFTs in one transaction.\n   *\n   * @example\n   * ```javascript\n   * // Custom metadata of the NFTs to create\n   * const metadatas = [{\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }, {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }];\n   *\n   * const results = await contract.erc1155.lazyMint(metadatas); // uploads and creates the NFTs on chain\n   * const firstTokenId = results[0].id; // token id of the first created NFT\n   * const firstNFT = await results[0].data(); // (optional) fetch details of the first created NFT\n   * ```\n   *\n   * @param metadatas - The metadata to include in the batch.\n   * @param options - optional upload progress callback\n   */\n  lazyMint = /* @__PURE__ */buildTransactionFunction(async (metadatas, options) => {\n    const startFileNumber = await this.erc1155.nextTokenIdToMint();\n    const batch = await uploadOrExtractURIs(metadatas, this.storage, startFileNumber.toNumber(), options);\n    // ensure baseUri is the same for the entire batch\n    const baseUri = batch[0].substring(0, batch[0].lastIndexOf(\"/\"));\n    for (let i = 0; i < batch.length; i++) {\n      const uri = batch[i].substring(0, batch[i].lastIndexOf(\"/\"));\n      if (baseUri !== uri) {\n        throw new Error(`Can only create batches with the same base URI for every entry in the batch. Expected '${baseUri}' but got '${uri}'`);\n      }\n    }\n    const parse = receipt => {\n      const event = this.contractWrapper.parseLogs(\"TokensLazyMinted\", receipt?.logs);\n      const startingIndex = event[0].args.startTokenId;\n      const endingIndex = event[0].args.endTokenId;\n      const results = [];\n      for (let id = startingIndex; id.lte(endingIndex); id = id.add(1)) {\n        results.push({\n          id,\n          receipt,\n          data: () => this.erc1155.getTokenMetadata(id)\n        });\n      }\n      return results;\n    };\n    const prebuiltInfo = await getPrebuiltInfo(this.contractWrapper.address, this.contractWrapper.getProvider());\n    if (this.isLegacyEditionDropContract(this.contractWrapper, prebuiltInfo)) {\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"lazyMint\",\n        args: [batch.length, `${baseUri.endsWith(\"/\") ? baseUri : `${baseUri}/`}`],\n        parse\n      });\n    } else {\n      // new contracts/extensions have support for delayed reveal that adds an extra parameter to lazyMint\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"lazyMint\",\n        args: [batch.length, `${baseUri.endsWith(\"/\") ? baseUri : `${baseUri}/`}`, utils.toUtf8Bytes(\"\")],\n        parse\n      });\n    }\n  });\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n  detectErc1155Revealable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC1155Revealable\")) {\n      return new DelayedReveal(this.contractWrapper, this.storage, FEATURE_EDITION_REVEALABLE.name, () => this.erc1155.nextTokenIdToMint());\n    }\n    return undefined;\n  }\n  isLegacyEditionDropContract(contractWrapper, info) {\n    return info && info.type === \"DropERC1155\" && info.version < 3 || false;\n  }\n}\n\n/**\n * Mint ERC1155 NFTs\n * @remarks NFT minting functionality that handles IPFS storage for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.edition.mint.to(walletAddress, nftMetadata);\n * ```\n * @public\n */\n\nclass Erc1155Mintable {\n  featureName = FEATURE_EDITION_MINTABLE.name;\n\n  /**\n   * Batch mint Tokens to many addresses\n   */\n\n  constructor(erc1155, contractWrapper, storage) {\n    this.erc1155 = erc1155;\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.batch = this.detectErc1155BatchMintable();\n  }\n\n  /**\n   * Mint an NFT with a limited supply\n   *\n   * @remarks Mint an NFT with a limited supply to a specified wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to mint the NFT to\n   * const toAddress = \"{{wallet_address}}\"\n   *\n   * // Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\n   * const metadata = {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }\n   *\n   * const metadataWithSupply = {\n   *   metadata,\n   *   supply: 1000, // The number of this NFT you want to mint\n   * }\n   *\n   * const tx = await contract.edition.mint.to(toAddress, metadataWithSupply);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const tokenId = tx.id; // the id of the NFT minted\n   * const nft = await tx.data(); // (optional) fetch details of minted NFT\n   * ```\n   *\n   */\n  to = /* @__PURE__ */buildTransactionFunction(async (to, metadataWithSupply) => {\n    const tx = await this.getMintTransaction(to, metadataWithSupply);\n    tx.setParse(receipt => {\n      const event = this.contractWrapper.parseLogs(\"TransferSingle\", receipt?.logs);\n      if (event.length === 0) {\n        throw new Error(\"TransferSingleEvent event not found\");\n      }\n      const id = event[0].args.id;\n      return {\n        id,\n        receipt,\n        data: () => this.erc1155.get(id.toString())\n      };\n    });\n    return tx;\n  });\n\n  /**\n   * @deprecated Use `contract.erc1155.mint.prepare(...args)` instead\n   */\n  async getMintTransaction(to, metadataWithSupply) {\n    const uri = await uploadOrExtractURI(metadataWithSupply.metadata, this.storage);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"mintTo\",\n      args: [await resolveAddress(to), constants.MaxUint256, uri, metadataWithSupply.supply]\n    });\n  }\n\n  /**\n   * Increase the supply of an existing NFT and mint it to a given wallet address\n   *\n   * @param to - the address to mint to\n   * @param tokenId - the token id of the NFT to increase supply of\n   * @param additionalSupply - the additional amount to mint\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to mint the NFT to\n   * const toAddress = \"{{wallet_address}}\"\n   * const tokenId = 0;\n   * const additionalSupply = 1000;\n   *\n   * const tx = await contract.edition.mint.additionalSupplyTo(toAddress, tokenId, additionalSupply);\n   * ```\n   */\n  additionalSupplyTo = /* @__PURE__ */buildTransactionFunction(async (to, tokenId, additionalSupply) => {\n    const metadata = await this.erc1155.getTokenMetadata(tokenId);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"mintTo\",\n      args: [await resolveAddress(to), tokenId, metadata.uri, additionalSupply],\n      parse: receipt => {\n        return {\n          id: BigNumber.from(tokenId),\n          receipt,\n          data: () => this.erc1155.get(tokenId)\n        };\n      }\n    });\n  });\n  detectErc1155BatchMintable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC1155BatchMintable\")) {\n      return new Erc1155BatchMintable(this.erc1155, this.contractWrapper, this.storage);\n    }\n  }\n}\n\n/**\n * @internal\n */\nconst AirdropAddressInput = /* @__PURE__ */(() => z.object({\n  address: AddressOrEnsSchema,\n  quantity: AmountSchema.default(1)\n}))();\n\n/**\n * @internal\n */\nconst AirdropInputSchema = /* @__PURE__ */(() => z.union([z.array(z.string()).transform(async strings => await Promise.all(strings.map(address => AirdropAddressInput.parseAsync({\n  address\n})))), z.array(AirdropAddressInput)]))();\n\n/**\n * Configure and claim ERC1155 NFTs\n * @remarks Manage claim phases and claim ERC1155 NFTs that have been lazily minted.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.edition.drop.claim.to(\"0x...\", tokenId, quantity);\n * ```\n */\nclass ERC1155Claimable {\n  featureName = FEATURE_EDITION_CLAIM_CUSTOM.name;\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Construct a claim transaction without executing it.\n   * This is useful for estimating the gas cost of a claim transaction, overriding transaction options and having fine grained control over the transaction execution.\n   * @param destinationAddress - Address you want to send the token to\n   * @param tokenId - Id of the token you want to claim\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param options - Options for claiming the NFTs\n   *\n   * @deprecated Use `contract.erc1155.claim.prepare(...args)` instead\n   */\n  async getClaimTransaction(destinationAddress, tokenId, quantity, options) {\n    let overrides = {};\n    if (options && options.pricePerToken) {\n      overrides = await calculateClaimCost(this.contractWrapper, options.pricePerToken, quantity, options.currencyAddress, options.checkERC20Allowance);\n    }\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"claim\",\n      args: [await resolveAddress(destinationAddress), tokenId, quantity],\n      overrides\n    });\n  }\n\n  /**\n   * Claim NFTs to a specific Wallet\n   *\n   * @remarks Let the specified wallet claim NFTs.\n   *\n   * @example\n   * ```javascript\n   * const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\n   * const tokenId = 0; // the id of the NFT you want to claim\n   * const quantity = 1; // how many NFTs you want to claim\n   *\n   * const tx = await contract.erc1155.claimTo(address, tokenId, quantity);\n   * const receipt = tx.receipt; // the transaction receipt\n   * ```\n   *\n   * @param destinationAddress - Address you want to send the token to\n   * @param tokenId - Id of the token you want to claim\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param options - Options for claiming the NFTs\n   *\n   * @returns - Receipt for the transaction\n   */\n  to = /* @__PURE__ */buildTransactionFunction(async (destinationAddress, tokenId, quantity, options) => {\n    return await this.getClaimTransaction(destinationAddress, tokenId, quantity, options);\n  });\n}\n\n/**\n * Configure and claim ERC1155 NFTs\n * @remarks Manage claim phases and claim ERC1155 NFTs that have been lazily minted.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.erc1155.claim(tokenId, quantity);\n * await contract.erc1155.claimConditions.getActive(tokenId);\n * ```\n */\nclass Erc1155ClaimableWithConditions {\n  featureName = FEATURE_EDITION_CLAIM_CONDITIONS_V2.name;\n  constructor(contractWrapper, storage) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    const metadata = new ContractMetadata(this.contractWrapper, CustomContractSchema, this.storage);\n    this.conditions = new DropErc1155ClaimConditions(contractWrapper, metadata, this.storage);\n  }\n\n  /**\n   * Claim NFTs to a specific Wallet\n   *\n   * @remarks Let the specified wallet claim NFTs.\n   *\n   * @example\n   * ```javascript\n   * const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\n   * const tokenId = 0; // the id of the NFT you want to claim\n   * const quantity = 1; // how many NFTs you want to claim\n   *\n   * const tx = await contract.erc1155.claimTo(address, tokenId, quantity);\n   * const receipt = tx.receipt; // the transaction receipt\n   * ```\n   *\n   * @param destinationAddress - Address you want to send the token to\n   * @param tokenId - Id of the token you want to claim\n   * @param quantity - Quantity of the tokens you want to claim\n   *\n   * @returns - Receipt for the transaction\n   */\n  to = /* @__PURE__ */buildTransactionFunction(async (destinationAddress, tokenId, quantity, options) => {\n    return await this.conditions.getClaimTransaction(destinationAddress, tokenId, quantity, options);\n  });\n}\n\n/**\n * Enables generating dynamic ERC1155 NFTs with rules and an associated signature, which can then be minted by anyone securely\n * @public\n */\nclass Erc1155SignatureMintable {\n  featureName = FEATURE_EDITION_SIGNATURE_MINTABLE.name;\n  constructor(contractWrapper, storage, roles) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.roles = roles;\n  }\n\n  /**\n   * Mint a dynamically generated NFT\n   *\n   * @remarks Mint a dynamic NFT with a previously generated signature.\n   *\n   * @example\n   * ```javascript\n   * // see how to craft a payload to sign in the `generate()` documentation\n   * const signedPayload = contract.erc1155.signature.generate(payload);\n   *\n   * // now anyone can mint the NFT\n   * const tx = contract.erc1155.signature.mint(signedPayload);\n   * ```\n   * @param signedPayload - the previously generated payload and signature with {@link Erc1155SignatureMintable.generate}\n   * @twfeature ERC1155SignatureMintable\n   */\n  mint = /* @__PURE__ */buildTransactionFunction(async signedPayload => {\n    const mintRequest = signedPayload.payload;\n    const signature = signedPayload.signature;\n    const message = await this.mapPayloadToContractStruct(mintRequest);\n    const overrides = await this.contractWrapper.getCallOverrides();\n    // TODO: Transaction Sequence Pattern\n    await setErc20Allowance(this.contractWrapper, message.pricePerToken.mul(message.quantity), mintRequest.currencyAddress, overrides);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"mintWithSignature\",\n      args: [message, signature],\n      overrides,\n      parse: receipt => {\n        const t = this.contractWrapper.parseLogs(\"TokensMintedWithSignature\", receipt.logs);\n        if (t.length === 0) {\n          throw new Error(\"No MintWithSignature event found\");\n        }\n        const id = t[0].args.tokenIdMinted;\n        return {\n          id,\n          receipt\n        };\n      }\n    });\n  });\n\n  /**\n   * Mint any number of dynamically generated NFT at once\n   * @remarks Mint multiple dynamic NFTs in one transaction. Note that this is only possible for free mints (cannot batch mints with a price attached to it for security reasons)\n   *\n   * @example\n   * ```javascript\n   * // see how to craft a batch of payloads to sign in the `generateBatch()` documentation\n   * const signedPayloads = contract.erc1155.signature.generateBatch(payloads);\n   *\n   * // now anyone can mint the NFT\n   * const tx = contract.erc1155.signature.mintBatch(signedPayloads);\n   * ```\n   *\n   * @param signedPayloads - the array of signed payloads to mint\n   * @twfeature ERC1155SignatureMintable\n   */\n  mintBatch = /* @__PURE__ */buildTransactionFunction(async signedPayloads => {\n    const contractPayloads = await Promise.all(signedPayloads.map(async s => {\n      const message = await this.mapPayloadToContractStruct(s.payload);\n      const signature = s.signature;\n      const price = s.payload.price;\n      if (BigNumber.from(price).gt(0)) {\n        throw new Error(\"Can only batch free mints. For mints with a price, use regular mint()\");\n      }\n      return {\n        message,\n        signature\n      };\n    }));\n    const contractEncoder = new ContractEncoder(this.contractWrapper);\n    const encoded = contractPayloads.map(p => {\n      return contractEncoder.encode(\"mintWithSignature\", [p.message, p.signature]);\n    });\n    if (hasFunction(\"multicall\", this.contractWrapper)) {\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"multicall\",\n        args: [encoded],\n        parse: receipt => {\n          const events = this.contractWrapper.parseLogs(\"TokensMintedWithSignature\", receipt.logs);\n          if (events.length === 0) {\n            throw new Error(\"No MintWithSignature event found\");\n          }\n          return events.map(log => ({\n            id: log.args.tokenIdMinted,\n            receipt\n          }));\n        }\n      });\n    } else {\n      throw new Error(\"Multicall not supported on this contract!\");\n    }\n  });\n\n  /**\n   * Verify that a payload is correctly signed\n   * @param signedPayload - the payload to verify\n   * @twfeature ERC1155SignatureMintable\n   *\n   * @example\n   * ```javascript\n   * const nftMetadata = {\n   *   name: \"Cool NFT #1\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * };\n   *\n   * const startTime = new Date();\n   * const endTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const payload = {\n   *   metadata: nftMetadata, // The NFT to mint\n   *   to: {{wallet_address}}, // Who will receive the NFT\n   *   quantity: 2, // the quantity of NFTs to mint\n   *   price: 0.5, // the price per NFT\n   *   currencyAddress: NATIVE_TOKEN_ADDRESS, // the currency to pay with\n   *   mintStartTime: startTime, // can mint anytime from now\n   *   mintEndTime: endTime, // to 24h from now\n   *   royaltyRecipient: \"0x...\", // custom royalty recipient for this NFT\n   *   royaltyBps: 100, // custom royalty fees for this NFT (in bps)\n   *   primarySaleRecipient: \"0x...\", // custom sale recipient for this NFT\n   * };\n   *\n   * const signedPayload = contract.erc1155.signature.generate(payload);\n   * // Now you can verify that the payload is valid\n   * const isValid = await contract.erc1155.signature.verify(signedPayload);\n   * ```\n   */\n  async verify(signedPayload) {\n    const mintRequest = signedPayload.payload;\n    const signature = signedPayload.signature;\n    const message = await this.mapPayloadToContractStruct(mintRequest);\n    const verification = await this.contractWrapper.read(\"verify\", [message, signature]);\n    return verification[0];\n  }\n\n  /**\n   * Generate a signature that can be used to mint an NFT dynamically.\n   *\n   * @remarks Takes in an NFT and some information about how it can be minted, uploads the metadata and signs it with your private key. The generated signature can then be used to mint an NFT using the exact payload and signature generated.\n   *\n   * @example\n   * ```javascript\n   * const nftMetadata = {\n   *   name: \"Cool NFT #1\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * };\n   *\n   * const startTime = new Date();\n   * const endTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const payload = {\n   *   metadata: nftMetadata, // The NFT to mint\n   *   to: {{wallet_address}}, // Who will receive the NFT\n   *   quantity: 2, // the quantity of NFTs to mint\n   *   price: 0.5, // the price per NFT\n   *   currencyAddress: NATIVE_TOKEN_ADDRESS, // the currency to pay with\n   *   mintStartTime: startTime, // can mint anytime from now\n   *   mintEndTime: endTime, // to 24h from now\n   *   royaltyRecipient: \"0x...\", // custom royalty recipient for this NFT\n   *   royaltyBps: 100, // custom royalty fees for this NFT (in bps)\n   *   primarySaleRecipient: \"0x...\", // custom sale recipient for this NFT\n   * };\n   *\n   * const signedPayload = await contract.erc1155.signature.generate(payload);\n   * // now anyone can use these to mint the NFT using `contract.erc1155.signature.mint(signedPayload)`\n   * ```\n   * @param payloadToSign - the payload to sign\n   * @returns the signed payload and the corresponding signature\n   * @twfeature ERC1155SignatureMintable\n   */\n  async generate(payloadToSign) {\n    const payload = {\n      ...payloadToSign,\n      tokenId: constants.MaxUint256\n    };\n    return this.generateFromTokenId(payload);\n  }\n\n  /**\n   * Generate a signature that can be used to mint additionaly supply to an existing NFT.\n   *\n   * @remarks Takes in a payload with the token ID of an existing NFT, and signs it with your private key. The generated signature can then be used to mint additional supply to the NFT using the exact payload and signature generated.\n   *\n   * @example\n   * ```javascript\n   * const nftMetadata = {\n   *   name: \"Cool NFT #1\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * };\n   *\n   * const startTime = new Date();\n   * const endTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const payload = {\n   *   tokenId: 0, // Instead of metadata, we specificy the token ID of the NFT to mint supply to\n   *   to: {{wallet_address}}, // Who will receive the NFT (or AddressZero for anyone)\n   *   quantity: 2, // the quantity of NFTs to mint\n   *   price: 0.5, // the price per NFT\n   *   currencyAddress: NATIVE_TOKEN_ADDRESS, // the currency to pay with\n   *   mintStartTime: startTime, // can mint anytime from now\n   *   mintEndTime: endTime, // to 24h from now\n   *   royaltyRecipient: \"0x...\", // custom royalty recipient for this NFT\n   *   royaltyBps: 100, // custom royalty fees for this NFT (in bps)\n   *   primarySaleRecipient: \"0x...\", // custom sale recipient for this NFT\n   * };\n   *\n   * const signedPayload = await contract.erc1155.signature.generateFromTokenId(payload);\n   * // now anyone can use these to mint the NFT using `contract.erc1155.signature.mint(signedPayload)`\n   * ```\n   * @param payloadToSign - the payload to sign\n   * @returns the signed payload and the corresponding signature\n   * @twfeature ERC1155SignatureMintable\n   */\n  async generateFromTokenId(payloadToSign) {\n    const payloads = await this.generateBatchFromTokenIds([payloadToSign]);\n    return payloads[0];\n  }\n\n  /**\n   * Generate a batch of signatures that can be used to mint many new NFTs dynamically.\n   *\n   * @remarks See {@link Erc1155SignatureMintable.generate}\n   *\n   * @param payloadsToSign - the payloads to sign\n   * @returns an array of payloads and signatures\n   * @twfeature ERC1155SignatureMintable\n   */\n  async generateBatch(payloadsToSign) {\n    const payloads = payloadsToSign.map(payload => ({\n      ...payload,\n      tokenId: constants.MaxUint256\n    }));\n    return this.generateBatchFromTokenIds(payloads);\n  }\n\n  /**\n   * Genrate a batch of signatures that can be used to mint new NFTs or additionaly supply to existing NFTs dynamically.\n   *\n   * @remarks See {@link Erc1155SignatureMintable.generateFromTokenId}\n   *\n   * @param payloadsToSign - the payloads to sign with tokenIds specified\n   * @returns an array of payloads and signatures\n   * @twfeature ERC1155SignatureMintable\n   */\n  async generateBatchFromTokenIds(payloadsToSign) {\n    await this.roles?.verify([\"minter\"], await this.contractWrapper.getSignerAddress());\n    const parsedRequests = await Promise.all(payloadsToSign.map(m => Signature1155PayloadInputWithTokenId.parseAsync(m)));\n    const metadatas = parsedRequests.map(r => r.metadata);\n    const uris = await uploadOrExtractURIs(metadatas, this.storage);\n    const chainId = await this.contractWrapper.getChainID();\n    const signer = this.contractWrapper.getSigner();\n    invariant(signer, \"No signer available\");\n    const contractInfo = await getPrebuiltInfo(this.contractWrapper.address, this.contractWrapper.getProvider());\n    const isLegacyContract = contractInfo?.type === \"TokenERC1155\";\n    return await Promise.all(parsedRequests.map(async (m, i) => {\n      const uri = uris[i];\n      const finalPayload = await Signature1155PayloadOutput.parseAsync({\n        ...m,\n        uri\n      });\n      const signature = await this.contractWrapper.signTypedData(signer, {\n        name: isLegacyContract ? \"TokenERC1155\" : \"SignatureMintERC1155\",\n        version: \"1\",\n        chainId,\n        verifyingContract: this.contractWrapper.address\n      }, {\n        MintRequest: MintRequest1155\n      },\n      // TYPEHASH\n      await this.mapPayloadToContractStruct(finalPayload));\n      return {\n        payload: finalPayload,\n        signature: signature.toString()\n      };\n    }));\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  /**\n   * Maps a payload to the format expected by the contract\n   *\n   * @internal\n   *\n   * @param mintRequest - The payload to map.\n   * @returns - The mapped payload.\n   */\n  async mapPayloadToContractStruct(mintRequest) {\n    const normalizedPricePerToken = await normalizePriceValue(this.contractWrapper.getProvider(), mintRequest.price, mintRequest.currencyAddress);\n    return {\n      to: mintRequest.to,\n      tokenId: mintRequest.tokenId,\n      uri: mintRequest.uri,\n      quantity: mintRequest.quantity,\n      pricePerToken: normalizedPricePerToken,\n      currency: mintRequest.currencyAddress,\n      validityStartTimestamp: mintRequest.mintStartTime,\n      validityEndTimestamp: mintRequest.mintEndTime,\n      uid: mintRequest.uid,\n      royaltyRecipient: mintRequest.royaltyRecipient,\n      royaltyBps: mintRequest.royaltyBps,\n      primarySaleRecipient: mintRequest.primarySaleRecipient\n    };\n  }\n}\n\n/**\n * Standard ERC1155 NFT functions\n * @remarks Basic functionality for a ERC1155 contract that handles IPFS storage for you.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * await contract.erc1155.transfer(walletAddress, tokenId, quantity);\n * ```\n * @public\n */\nclass Erc1155 {\n  featureName = FEATURE_EDITION.name;\n  get chainId() {\n    return this._chainId;\n  }\n  constructor(contractWrapper, storage, chainId) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.query = this.detectErc1155Enumerable();\n    this.mintable = this.detectErc1155Mintable();\n    this.burnable = this.detectErc1155Burnable();\n    this.lazyMintable = this.detectErc1155LazyMintable();\n    this.signatureMintable = this.detectErc1155SignatureMintable();\n    this.claimCustom = this.detectErc1155Claimable();\n    this.claimWithConditions = this.detectErc1155ClaimableWithConditions();\n    this._chainId = chainId;\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  ////// Standard ERC1155 functions //////\n\n  /**\n   * Get a single NFT\n   *\n   * @example\n   * ```javascript\n   * const tokenId = 0;\n   * const nft = await contract.erc1155.get(tokenId);\n   * ```\n   * @param tokenId - the tokenId of the NFT to retrieve\n   * @returns The NFT metadata\n   * @twfeature ERC1155\n   */\n  async get(tokenId) {\n    const [supply, metadata] = await Promise.all([this.contractWrapper.read(\"totalSupply\", [tokenId]).catch(() => BigNumber.from(0)), this.getTokenMetadata(tokenId).catch(() => ({\n      id: tokenId.toString(),\n      uri: \"\",\n      ...FALLBACK_METADATA\n    }))]);\n    return {\n      owner: constants.AddressZero,\n      metadata,\n      type: \"ERC1155\",\n      supply: supply.toString()\n    };\n  }\n\n  /**\n   * Get the total supply of a specific token\n   * @example\n   * ```javascript\n   * const tokenId = 0;\n   * const nft = await contract.erc1155.totalSupply(tokenId);\n   * ```\n   * @param tokenId - The token ID to get the total supply of\n   * @returns the total supply\n   * @twfeature ERC1155\n   */\n  async totalSupply(tokenId) {\n    if (detectContractFeature(this.contractWrapper, \"ERC1155Supply\")) {\n      return await this.contractWrapper.read(\"totalSupply\", [tokenId]);\n    } else {\n      throw new ExtensionNotImplementedError(FEATURE_EDITION_SUPPLY);\n    }\n  }\n\n  /**\n   * Get NFT balance of a specific wallet\n   *\n   * @remarks Get a wallets NFT balance (number of NFTs in this contract owned by the wallet).\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to check NFT balance\n   * const walletAddress = \"{{wallet_address}}\";\n   * const tokenId = 0; // Id of the NFT to check\n   * const balance = await contract.erc1155.balanceOf(walletAddress, tokenId);\n   * ```\n   * @twfeature ERC1155\n   */\n  async balanceOf(address, tokenId) {\n    return await this.contractWrapper.read(\"balanceOf\", [await resolveAddress(address), tokenId]);\n  }\n\n  /**\n   * Get NFT balance for the currently connected wallet\n   */\n  async balance(tokenId) {\n    return await this.balanceOf(await this.contractWrapper.getSignerAddress(), tokenId);\n  }\n\n  /**\n   * Get whether this wallet has approved transfers from the given operator\n   * @param address - the wallet address\n   * @param operator - the operator address\n   */\n  async isApproved(address, operator) {\n    return await this.contractWrapper.read(\"isApprovedForAll\", [await resolveAddress(address), await resolveAddress(operator)]);\n  }\n\n  /**\n   * Transfer an NFT\n   *\n   * @remarks Transfer an NFT from the connected wallet to another wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to send the NFT to\n   * const toAddress = \"{{wallet_address}}\";\n   * const tokenId = \"0\"; // The token ID of the NFT you want to send\n   * const amount = 3; // How many copies of the NFTs to transfer\n   * await contract.erc1155.transfer(toAddress, tokenId, amount);\n   * ```\n   * @twfeature ERC1155\n   */\n  transfer = /* @__PURE__ */buildTransactionFunction((() => {\n    var _this = this;\n    return async function (to, tokenId, amount) {\n      let data = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [0];\n      const from = await _this.contractWrapper.getSignerAddress();\n      return Transaction.fromContractWrapper({\n        contractWrapper: _this.contractWrapper,\n        method: \"safeTransferFrom\",\n        args: [from, await resolveAddress(to), tokenId, amount, data]\n      });\n    };\n  })());\n\n  /**\n   * Transfer an NFT from a specific wallet\n   *\n   * @remarks Transfer an NFT from a specific wallet to another wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to send the NFT to\n   * const toAddress = \"{{wallet_address}}\";\n   * const tokenId = \"0\"; // The token ID of the NFT you want to send\n   * const amount = 3; // How many copies of the NFTs to transfer\n   * await contract.erc1155.transfer(toAddress, tokenId, amount);\n   * ```\n   * @twfeature ERC1155\n   */\n  transferFrom = /* @__PURE__ */buildTransactionFunction((() => {\n    var _this2 = this;\n    return async function (from, to, tokenId, amount) {\n      let data = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [0];\n      return Transaction.fromContractWrapper({\n        contractWrapper: _this2.contractWrapper,\n        method: \"safeTransferFrom\",\n        args: [await resolveAddress(from), await resolveAddress(to), tokenId, amount, data]\n      });\n    };\n  })());\n\n  /**\n   * Set approval for all NFTs\n   * @remarks Approve or remove operator as an operator for the caller. Operators can call transferFrom or safeTransferFrom for any token owned by the caller.\n   * @example\n   * ```javascript\n   * const operator = \"{{wallet_address}}\";\n   * await contract.erc1155.setApprovalForAll(operator, true);\n   * ```\n   * @param operator - the operator's address\n   * @param approved - whether to approve or remove\n   * @twfeature ERC1155\n   */\n  setApprovalForAll = /* @__PURE__ */buildTransactionFunction(async (operator, approved) => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"setApprovalForAll\",\n      args: [operator, approved]\n    });\n  });\n\n  /**\n   * Airdrop multiple NFTs\n   *\n   * @remarks Airdrop one or multiple NFTs to the provided wallet addresses.\n   *\n   * @example\n   * ```javascript\n   * // The token ID of the NFT you want to airdrop\n   * const tokenId = \"0\";\n   * // Array of objects of addresses and quantities to airdrop NFTs to\n   * const addresses = [\n   *  {\n   *    address: \"0x...\",\n   *    quantity: 2,\n   *  },\n   *  {\n   *   address: \"0x...\",\n   *    quantity: 3,\n   *  },\n   * ];\n   * await contract.erc1155.airdrop(tokenId, addresses);\n   *\n   * // You can also pass an array of addresses, it will airdrop 1 NFT per address\n   * const tokenId = \"0\";\n   * const addresses = [\n   *  \"0x...\", \"0x...\", \"0x...\",\n   * ]\n   * await contract.erc1155.airdrop(tokenId, addresses);\n   * ```\n   * @twfeature ERC1155BatchTransferable\n   */\n  airdrop = /* @__PURE__ */buildTransactionFunction((() => {\n    var _this3 = this;\n    return async function (tokenId, addresses, fromAddress) {\n      let data = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [0];\n      const from = fromAddress ? await resolveAddress(fromAddress) : await _this3.contractWrapper.getSignerAddress();\n      const balanceOf = await _this3.balanceOf(from, tokenId);\n      const input = await AirdropInputSchema.parseAsync(addresses);\n      const totalToAirdrop = input.reduce((prev, curr) => {\n        return BigNumber.from(prev).add(BigNumber.from(curr?.quantity || 1));\n      }, BigNumber.from(0));\n      if (balanceOf.lt(BigNumber.from(totalToAirdrop))) {\n        throw new Error(`The caller owns ${balanceOf.toString()} NFTs, but wants to airdrop ${totalToAirdrop.toString()} NFTs.`);\n      }\n      const contractEncoder = new ContractEncoder(_this3.contractWrapper);\n      const encoded = input.map(_ref => {\n        let {\n          address: to,\n          quantity\n        } = _ref;\n        return contractEncoder.encode(\"safeTransferFrom\", [from, to, tokenId, quantity, data]);\n      });\n      return Transaction.fromContractWrapper({\n        contractWrapper: _this3.contractWrapper,\n        method: \"multicall\",\n        args: [encoded]\n      });\n    };\n  })());\n\n  /**\n   * Return the next available token ID to mint\n   * @internal\n   */\n  async nextTokenIdToMint() {\n    if (hasFunction(\"nextTokenIdToMint\", this.contractWrapper)) {\n      return await this.contractWrapper.read(\"nextTokenIdToMint\", []);\n    } else {\n      throw new Error(\"Contract requires the `nextTokenIdToMint` function available to determine the next token ID to mint\");\n    }\n  }\n\n  ////// ERC1155 Enumerable Extension //////\n\n  /**\n   * Get all NFTs\n   *\n   * @remarks Get all the data associated with every NFT in this contract.\n   *\n   * By default, returns the first 100 NFTs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const nfts = await contract.erc1155.getAll();\n   * ```\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs queried.\n   * @twfeature ERC1155Enumerable\n   */\n  async getAll(queryParams) {\n    return assertEnabled(this.query, FEATURE_EDITION_ENUMERABLE).all(queryParams);\n  }\n\n  /**\n   * Get the total number of NFTs minted\n   * @remarks This returns the total number of NFTs minted in this contract, **not** the total supply of a given token.\n   * @example\n   * ```javascript\n   * const count = await contract.erc1155.totalCount();\n   * console.log(count);\n   * ```\n   * @returns the total number of NFTs minted in this contract\n   * @public\n   * @twfeature ERC1155Enumerable\n   */\n  async totalCount() {\n    return assertEnabled(this.query, FEATURE_EDITION_ENUMERABLE).totalCount();\n  }\n\n  /**\n   * Get the total supply of a specific NFT\n   * @remarks This is **not** the sum of supply of all NFTs in the contract.\n   *\n   * @returns the total number of NFTs minted in this contract\n   * @public\n   * @twfeature ERC1155Enumerable\n   */\n  async totalCirculatingSupply(tokenId) {\n    return assertEnabled(this.query, FEATURE_EDITION_ENUMERABLE).totalCirculatingSupply(tokenId);\n  }\n\n  /**\n   * Get all NFTs owned by a specific wallet\n   *\n   * @remarks Get all the data associated with the NFTs owned by a specific wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to get the NFTs of\n   * const address = \"{{wallet_address}}\";\n   * const nfts = await contract.erc1155.getOwned(address);\n   * ```\n   *\n   * @returns The NFT metadata for all NFTs in the contract.\n   * @twfeature ERC1155Enumerable\n   */\n  async getOwned(walletAddress) {\n    if (walletAddress) {\n      walletAddress = await resolveAddress(walletAddress);\n    }\n    return assertEnabled(this.query, FEATURE_EDITION_ENUMERABLE).owned(walletAddress);\n  }\n\n  ////// ERC1155 Mintable Extension //////\n\n  /**\n   * Mint an NFT\n   *\n   * @remarks Mint an NFT with a limited supply to the connected wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to mint the NFT to\n   * const toAddress = \"{{wallet_address}}\"\n   *\n   * // Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\n   * const metadata = {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }\n   *\n   * const metadataWithSupply = {\n   *   metadata,\n   *   supply: 1000, // The number of this NFT you want to mint\n   * }\n   *\n   * const tx = await contract.erc1155.mint(toAddress, metadataWithSupply);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const tokenId = tx.id; // the id of the NFT minted\n   * const nft = await tx.data(); // (optional) fetch details of minted NFT\n   * ```\n   * @twfeature ERC1155Mintable\n   */\n  mint = /* @__PURE__ */buildTransactionFunction(async metadataWithSupply => {\n    return this.mintTo.prepare(await this.contractWrapper.getSignerAddress(), metadataWithSupply);\n  });\n\n  /**\n   * Mint an NFT to a specific wallet\n   *\n   * @remarks Mint an NFT with a limited supply to a specified wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to mint the NFT to\n   * const toAddress = \"{{wallet_address}}\"\n   *\n   * // Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\n   * const metadata = {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }\n   *\n   * const metadataWithSupply = {\n   *   metadata,\n   *   supply: 1000, // The number of this NFT you want to mint\n   * }\n   *\n   * const tx = await contract.erc1155.mintTo(toAddress, metadataWithSupply);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const tokenId = tx.id; // the id of the NFT minted\n   * const nft = await tx.data(); // (optional) fetch details of minted NFT\n   * ```\n   * @twfeature ERC1155Mintable\n   */\n  mintTo = /* @__PURE__ */buildTransactionFunction(async (receiver, metadataWithSupply) => {\n    return assertEnabled(this.mintable, FEATURE_EDITION_MINTABLE).to.prepare(receiver, metadataWithSupply);\n  });\n\n  /**\n   * Construct a mint transaction without executing it.\n   * This is useful for estimating the gas cost of a mint transaction, overriding transaction options and having fine grained control over the transaction execution.\n   * @param receiver - Address you want to send the token to\n   * @param metadataWithSupply - The metadata of the NFT you want to mint\n   *\n   * @deprecated Use `contract.erc1155.mint.prepare(...args)` instead\n   * @twfeature ERC1155Mintable\n   */\n  async getMintTransaction(receiver, metadataWithSupply) {\n    return assertEnabled(this.mintable, FEATURE_EDITION_MINTABLE).getMintTransaction(receiver, metadataWithSupply);\n  }\n\n  /**\n   * Increase the supply of an existing NFT\n   * @remarks Increase the supply of an existing NFT and mint it to the connected wallet address\n   * @example\n   * ```javascript\n   * const tokenId = 0;\n   * const additionalSupply = 1000;\n   * await contract.erc1155.mintAdditionalSupply(tokenId, additionalSupply);\n   * ```\n   *\n   * @param tokenId - the token id of the NFT to increase supply of\n   * @param additionalSupply - the additional amount to mint\n   * @twfeature ERC1155Mintable\n   */\n  mintAdditionalSupply = /* @__PURE__ */buildTransactionFunction(async (tokenId, additionalSupply) => {\n    return assertEnabled(this.mintable, FEATURE_EDITION_MINTABLE).additionalSupplyTo.prepare(await this.contractWrapper.getSignerAddress(), tokenId, additionalSupply);\n  });\n\n  /**\n   * Increase the supply of an existing NFT and mint it to a given wallet address\n   *\n   * @param to - the address to mint to\n   * @param tokenId - the token id of the NFT to increase supply of\n   * @param additionalSupply - the additional amount to mint\n   * @twfeature ERC1155Mintable\n   */\n  mintAdditionalSupplyTo = /* @__PURE__ */buildTransactionFunction(async (receiver, tokenId, additionalSupply) => {\n    return assertEnabled(this.mintable, FEATURE_EDITION_MINTABLE).additionalSupplyTo.prepare(receiver, tokenId, additionalSupply);\n  });\n\n  ////// ERC1155 BatchMintable Extension //////\n\n  /**\n   * Mint multiple NFTs at once\n   *\n   * @remarks Mint multiple different NFTs with limited supplies to the connected wallet.\n   *\n   * @example\n   * ```javascript\n   * // Custom metadata and supplies of your NFTs\n   * const metadataWithSupply = [{\n   *   supply: 50, // The number of this NFT you want to mint\n   *   metadata: {\n   *     name: \"Cool NFT #1\",\n   *     description: \"This is a cool NFT\",\n   *     image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   *   },\n   * }, {\n   *   supply: 100,\n   *   metadata: {\n   *     name: \"Cool NFT #2\",\n   *     description: \"This is a cool NFT\",\n   *     image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   *   },\n   * }];\n   *\n   * const tx = await contract.erc1155.mintBatch(metadataWithSupply);\n   * const receipt = tx[0].receipt; // same transaction receipt for all minted NFTs\n   * const firstTokenId = tx[0].id; // token id of the first minted NFT\n   * const firstNFT = await tx[0].data(); // (optional) fetch details of the first minted NFT\n   * ```\n   * @twfeature ERC1155BatchMintable\n   */\n  mintBatch = /* @__PURE__ */buildTransactionFunction(async metadataWithSupply => {\n    return this.mintBatchTo.prepare(await this.contractWrapper.getSignerAddress(), metadataWithSupply);\n  });\n\n  /**\n   * Mint multiple NFTs at once to a specific wallet\n   *\n   * @remarks Mint multiple different NFTs with limited supplies to a specified wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to mint the NFT to\n   * const toAddress = \"{{wallet_address}}\"\n   *\n   * // Custom metadata and supplies of your NFTs\n   * const metadataWithSupply = [{\n   *   supply: 50, // The number of this NFT you want to mint\n   *   metadata: {\n   *     name: \"Cool NFT #1\",\n   *     description: \"This is a cool NFT\",\n   *     image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   *   },\n   * }, {\n   *   supply: 100,\n   *   metadata: {\n   *     name: \"Cool NFT #2\",\n   *     description: \"This is a cool NFT\",\n   *     image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   *   },\n   * }];\n   *\n   * const tx = await contract.erc1155.mintBatchTo(toAddress, metadataWithSupply);\n   * const receipt = tx[0].receipt; // same transaction receipt for all minted NFTs\n   * const firstTokenId = tx[0].id; // token id of the first minted NFT\n   * const firstNFT = await tx[0].data(); // (optional) fetch details of the first minted NFT\n   * ```\n   * @twfeature ERC1155BatchMintable\n   */\n  mintBatchTo = /* @__PURE__ */buildTransactionFunction(async (receiver, metadataWithSupply) => {\n    return assertEnabled(this.mintable?.batch, FEATURE_EDITION_BATCH_MINTABLE).to.prepare(receiver, metadataWithSupply);\n  });\n\n  ////// ERC1155 Burnable Extension //////\n\n  /**\n   * Burn NFTs\n   *\n   * @remarks Burn the specified NFTs from the connected wallet\n   *\n   * @param tokenId - the token Id to burn\n   * @param amount - amount to burn\n   *\n   * @example\n   * ```javascript\n   * // The token ID to burn NFTs of\n   * const tokenId = 0;\n   * // The amount of the NFT you want to burn\n   * const amount = 2;\n   *\n   * const result = await contract.erc1155.burn(tokenId, amount);\n   * ```\n   * @twfeature ERC1155Burnable\n   */\n  burn = /* @__PURE__ */buildTransactionFunction(async (tokenId, amount) => {\n    return assertEnabled(this.burnable, FEATURE_EDITION_BURNABLE).tokens.prepare(tokenId, amount);\n  });\n\n  /**\n   * Burn NFTs from a specific wallet\n   *\n   * @remarks Burn the specified NFTs from a specified wallet\n   *\n   * @param account - the address to burn NFTs from\n   * @param tokenId - the tokenId to burn\n   * @param amount - amount to burn\n   *\n   * @example\n   * ```javascript\n   * // The address of the wallet to burn NFTS from\n   * const account = \"0x...\";\n   * // The token ID to burn NFTs of\n   * const tokenId = 0;\n   * // The amount of this NFT you want to burn\n   * const amount = 2;\n   *\n   * const result = await contract.erc1155.burnFrom(account, tokenId, amount);\n   * ```\n   * @twfeature ERC1155Burnable\n   */\n  burnFrom = /* @__PURE__ */buildTransactionFunction(async (account, tokenId, amount) => {\n    return assertEnabled(this.burnable, FEATURE_EDITION_BURNABLE).from.prepare(account, tokenId, amount);\n  });\n\n  /**\n   * Burn a batch of NFTs\n   *\n   * @remarks Burn the batch NFTs from the connected wallet\n   *\n   * @param tokenIds - the tokenIds to burn\n   * @param amounts - amount of each token to burn\n   *\n   * @example\n   * ```javascript\n   * // The token IDs to burn NFTs of\n   * const tokenIds = [0, 1];\n   * // The amounts of each NFT you want to burn\n   * const amounts = [2, 2];\n   *\n   * const result = await contract.erc1155.burnBatch(tokenIds, amounts);\n   * ```\n   * @twfeature ERC1155Burnable\n   */\n  burnBatch = /* @__PURE__ */buildTransactionFunction(async (tokenIds, amounts) => {\n    return assertEnabled(this.burnable, FEATURE_EDITION_BURNABLE).batch.prepare(tokenIds, amounts);\n  });\n\n  /**\n   * Burn a batch of NFTs from a specific wallet\n   *\n   * @remarks Burn the batch NFTs from the specified wallet\n   *\n   * @param account - the address to burn NFTs from\n   * @param tokenIds - the tokenIds to burn\n   * @param amounts - amount of each token to burn\n   *\n   * @example\n   * ```javascript\n   * // The address of the wallet to burn NFTS from\n   * const account = \"0x...\";\n   * // The token IDs to burn NFTs of\n   * const tokenIds = [0, 1];\n   * // The amounts of each NFT you want to burn\n   * const amounts = [2, 2];\n   *\n   * const result = await contract.erc1155.burnBatchFrom(account, tokenIds, amounts);\n   * ```\n   * @twfeature ERC1155Burnable\n   */\n  burnBatchFrom = /* @__PURE__ */buildTransactionFunction(async (account, tokenIds, amounts) => {\n    return assertEnabled(this.burnable, FEATURE_EDITION_BURNABLE).batchFrom.prepare(account, tokenIds, amounts);\n  });\n\n  ////// ERC721 LazyMint Extension //////\n\n  /**\n   * Lazy mint NFTs\n   *\n   * @remarks Create batch allows you to create a batch of many NFTs in one transaction.\n   *\n   * @example\n   * ```javascript\n   * // Custom metadata of the NFTs to create\n   * const metadatas = [{\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }, {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }];\n   *\n   * const results = await contract.erc1155.lazyMint(metadatas); // uploads and creates the NFTs on chain\n   * const firstTokenId = results[0].id; // token id of the first created NFT\n   * const firstNFT = await results[0].data(); // (optional) fetch details of the first created NFT\n   * ```\n   *\n   * @param metadatas - The metadata to include in the batch.\n   * @param options - optional upload progress callback\n   * @twfeature ERC1155LazyMintableV1 | ERC1155LazyMintableV2\n   */\n  lazyMint = /* @__PURE__ */buildTransactionFunction(async (metadatas, options) => {\n    return assertEnabled(this.lazyMintable, FEATURE_EDITION_LAZY_MINTABLE_V2).lazyMint.prepare(metadatas, options);\n  });\n\n  ////// ERC1155 Claimable Extension //////\n\n  /**\n   * Construct a claim transaction without executing it.\n   * This is useful for estimating the gas cost of a claim transaction, overriding transaction options and having fine grained control over the transaction execution.\n   * @param destinationAddress - Address you want to send the token to\n   * @param tokenId - Id of the token you want to claim\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param options - Optional claim verification data (e.g. price, currency, etc...)\n   *\n   * @deprecated Use `contract.erc1155.claim.prepare(...args)` instead\n   */\n  async getClaimTransaction(destinationAddress, tokenId, quantity, options) {\n    const claimWithConditions = this.claimWithConditions;\n    const claim = this.claimCustom;\n    if (claimWithConditions) {\n      return claimWithConditions.conditions.getClaimTransaction(destinationAddress, tokenId, quantity, options);\n    }\n    if (claim) {\n      return claim.getClaimTransaction(destinationAddress, tokenId, quantity, options);\n    }\n    throw new ExtensionNotImplementedError(FEATURE_EDITION_CLAIM_CUSTOM);\n  }\n\n  /**\n   * Claim NFTs\n   *\n   * @remarks Let the connected wallet claim NFTs.\n   *\n   * @example\n   * ```javascript\n   * const tokenId = 0; // the id of the NFT you want to claim\n   * const quantity = 1; // how many NFTs you want to claim\n   *\n   * const tx = await contract.erc1155.claim(tokenId, quantity);\n   * const receipt = tx.receipt; // the transaction receipt\n   * ```\n   *\n   * @param tokenId - Id of the token you want to claim\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param options - Optional claim verification data (e.g. price, currency, etc...)\n   *\n   * @returns - Receipt for the transaction\n   * @twfeature ERC1155ClaimCustom | ERC1155ClaimPhasesV2 | ERC1155ClaimPhasesV1 | ERC1155ClaimConditionsV2 | ERC1155ClaimConditionsV1\n   */\n  claim = /* @__PURE__ */buildTransactionFunction(async (tokenId, quantity, options) => {\n    return this.claimTo.prepare(await this.contractWrapper.getSignerAddress(), tokenId, quantity, options);\n  });\n\n  /**\n   * Claim NFTs to a specific Wallet\n   *\n   * @remarks Let the specified wallet claim NFTs.\n   *\n   * @example\n   * ```javascript\n   * const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\n   * const tokenId = 0; // the id of the NFT you want to claim\n   * const quantity = 1; // how many NFTs you want to claim\n   *\n   * const tx = await contract.erc1155.claimTo(address, tokenId, quantity);\n   * const receipt = tx.receipt; // the transaction receipt\n   * ```\n   *\n   * @param destinationAddress - Address you want to send the token to\n   * @param tokenId - Id of the token you want to claim\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param options - Optional claim verification data (e.g. price, currency, etc...)\n   *\n   * @returns - Receipt for the transaction\n   * @twfeature ERC1155ClaimCustom | ERC1155ClaimPhasesV2 | ERC1155ClaimPhasesV1 | ERC1155ClaimConditionsV2 | ERC1155ClaimConditionsV1\n   */\n  claimTo = /* @__PURE__ */buildTransactionFunction(async (destinationAddress, tokenId, quantity, options) => {\n    const claimWithConditions = this.claimWithConditions;\n    const claim = this.claimCustom;\n    if (claimWithConditions) {\n      return claimWithConditions.to.prepare(destinationAddress, tokenId, quantity, options);\n    }\n    if (claim) {\n      return claim.to.prepare(destinationAddress, tokenId, quantity, options);\n    }\n    throw new ExtensionNotImplementedError(FEATURE_EDITION_CLAIM_CUSTOM);\n  });\n\n  /**\n   * Configure claim conditions\n   * @remarks Define who can claim NFTs in the collection, when and how many.\n   * @example\n   * ```javascript\n   * const presaleStartTime = new Date();\n   * const publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const claimConditions = [\n   *   {\n   *     startTime: presaleStartTime, // start the presale now\n   *     maxClaimableSupply: 2, // limit how many mints for this presale\n   *     price: 0.01, // presale price\n   *     snapshot: ['0x...', '0x...'], // limit minting to only certain addresses\n   *   },\n   *   {\n   *     startTime: publicSaleStartTime, // 24h after presale, start public sale\n   *     price: 0.08, // public sale price\n   *   }\n   * ]);\n   * await contract.erc1155.claimConditions.set(tokenId, claimConditions);\n   * ```\n   * @twfeature ERC1155ClaimPhasesV2 | ERC1155ClaimPhasesV1 | ERC1155ClaimConditionsV2 | ERC1155ClaimConditionsV1\n   */\n  get claimConditions() {\n    return assertEnabled(this.claimWithConditions, FEATURE_EDITION_CLAIM_CONDITIONS_V2).conditions;\n  }\n\n  ////// ERC1155 SignatureMintable Extension //////\n\n  /**\n   * Mint with signature\n   * @remarks Generate dynamic NFTs with your own signature, and let others mint them using that signature.\n   * @example\n   * ```javascript\n   * // see how to craft a payload to sign in the `contract.erc1155.signature.generate()` documentation\n   * const signedPayload = contract.erc1155.signature().generate(payload);\n   *\n   * // now anyone can mint the NFT\n   * const tx = contract.erc1155.signature.mint(signedPayload);\n   * const receipt = tx.receipt; // the mint transaction receipt\n   * const mintedId = tx.id; // the id of the NFT minted\n   * ```\n   * @twfeature ERC1155SignatureMintable\n   */\n  get signature() {\n    return assertEnabled(this.signatureMintable, FEATURE_EDITION_SIGNATURE_MINTABLE);\n  }\n\n  ////// ERC1155 DelayedReveal Extension //////\n\n  /**\n   * Mint delayed reveal NFTs\n   * @remarks Create a batch of encrypted NFTs that can be revealed at a later time.\n   * @example\n   * ```javascript\n   * // the real NFTs, these will be encrypted until you reveal them\n   * const realNFTs = [{\n   *   name: \"Common NFT #1\",\n   *   description: \"Common NFT, one of many.\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }, {\n   *   name: \"Super Rare NFT #2\",\n   *   description: \"You got a Super Rare NFT!\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }];\n   * // A placeholder NFT that people will get immediately in their wallet, and will be converted to the real NFT at reveal time\n   * const placeholderNFT = {\n   *   name: \"Hidden NFT\",\n   *   description: \"Will be revealed next week!\"\n   * };\n   * // Create and encrypt the NFTs\n   * await contract.erc1155.drop.revealer.createDelayedRevealBatch(\n   *   placeholderNFT,\n   *   realNFTs,\n   *   \"my secret password\",\n   * );\n   * // Whenever you're ready, reveal your NFTs at any time\n   * const batchId = 0; // the batch to reveal\n   * await contract.erc1155.revealer.reveal(batchId, \"my secret password\");\n   * ```\n   * @twfeature ERC1155Revealable\n   */\n  get revealer() {\n    return assertEnabled(this.lazyMintable?.revealer, FEATURE_EDITION_REVEALABLE);\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  /**\n   * @internal\n   * @param tokenId - the token Id to fetch\n   */\n  async getTokenMetadata(tokenId) {\n    const tokenUri = await this.contractWrapper.read(\"uri\", [tokenId]);\n    if (!tokenUri) {\n      throw new NotFoundError();\n    }\n    return fetchTokenMetadata(tokenId, tokenUri, this.storage);\n  }\n  detectErc1155Enumerable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC1155Enumerable\")) {\n      return new Erc1155Enumerable(this, this.contractWrapper);\n    }\n  }\n  detectErc1155Mintable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC1155Mintable\")) {\n      return new Erc1155Mintable(this, this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n  detectErc1155Burnable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC1155Burnable\")) {\n      return new Erc1155Burnable(this.contractWrapper);\n    }\n    return undefined;\n  }\n  detectErc1155LazyMintable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC1155LazyMintableV1\") || detectContractFeature(this.contractWrapper, \"ERC1155LazyMintableV2\")) {\n      return new Erc1155LazyMintable(this, this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n  detectErc1155SignatureMintable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC1155SignatureMintable\")) {\n      return new Erc1155SignatureMintable(this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n  detectErc1155Claimable() {\n    if (detectContractFeature(this.contractWrapper, \"ERC1155ClaimCustom\")) {\n      return new ERC1155Claimable(this.contractWrapper);\n    }\n    return undefined;\n  }\n  detectErc1155ClaimableWithConditions() {\n    if (detectContractFeature(this.contractWrapper, \"ERC1155ClaimConditionsV1\") || detectContractFeature(this.contractWrapper, \"ERC1155ClaimConditionsV2\") || detectContractFeature(this.contractWrapper, \"ERC1155ClaimPhasesV1\") || detectContractFeature(this.contractWrapper, \"ERC1155ClaimPhasesV2\")) {\n      return new Erc1155ClaimableWithConditions(this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n}\n\nfunction cleanCurrencyAddress(currencyAddress) {\n  if (isNativeToken(currencyAddress)) {\n    return NATIVE_TOKEN_ADDRESS;\n  }\n  return currencyAddress;\n}\n\n/**\n * This method checks if the given token is approved for the transferrerContractAddress contract.\n * This is particularly useful for contracts that need to transfer NFTs on the users' behalf\n *\n * @internal\n * @param provider - The connected provider\n * @param transferrerContractAddress - The address of the marketplace contract\n * @param assetContract - The address of the asset contract.\n * @param tokenId - The token id of the token.\n * @param owner - The address of the account that owns the token.\n * @returns - True if the transferrerContractAddress is approved on the token, false otherwise.\n */\nasync function isTokenApprovedForTransfer(provider, transferrerContractAddress, assetContract, tokenId, owner) {\n  try {\n    const erc165 = new Contract(assetContract, ERC165Abi, provider);\n    const isERC721 = await erc165.supportsInterface(InterfaceId_IERC721);\n    const isERC1155 = await erc165.supportsInterface(InterfaceId_IERC1155);\n    if (isERC721) {\n      const asset = new Contract(assetContract, Erc721Abi, provider);\n      const approved = await asset.isApprovedForAll(owner, transferrerContractAddress);\n      if (approved) {\n        return true;\n      }\n\n      // Handle reverts in case of non-existent tokens\n      let approvedAddress;\n      try {\n        approvedAddress = await asset.getApproved(tokenId);\n      } catch (e) {}\n      return approvedAddress?.toLowerCase() === transferrerContractAddress.toLowerCase();\n    } else if (isERC1155) {\n      const asset = new Contract(assetContract, Erc1155Abi, provider);\n      return await asset.isApprovedForAll(owner, transferrerContractAddress);\n    } else {\n      console.error(\"Contract does not implement ERC 1155 or ERC 721.\");\n      return false;\n    }\n  } catch (err) {\n    console.error(\"Failed to check if token is approved\", err);\n    return false;\n  }\n}\n\n/**\n * Checks if the marketplace is approved to make transfers on the assetContract\n * If not, it tries to set the approval.\n * @param contractWrapper\n * @param marketplaceAddress\n * @param assetContract\n * @param tokenId\n * @param from\n */\nasync function handleTokenApproval(contractWrapper, marketplaceAddress, assetContract, tokenId, from) {\n  const erc165 = new ContractWrapper(contractWrapper.getSignerOrProvider(), assetContract, ERC165Abi, contractWrapper.options, contractWrapper.storage);\n  const isERC721 = await erc165.read(\"supportsInterface\", [InterfaceId_IERC721]);\n  const isERC1155 = await erc165.read(\"supportsInterface\", [InterfaceId_IERC1155]);\n  // check for token approval\n  if (isERC721) {\n    const asset = new ContractWrapper(contractWrapper.getSignerOrProvider(), assetContract, Erc721Abi, contractWrapper.options, contractWrapper.storage);\n    const approved = await asset.read(\"isApprovedForAll\", [from, marketplaceAddress]);\n    if (!approved) {\n      const isTokenApproved = (await asset.read(\"getApproved\", [tokenId])).toLowerCase() === marketplaceAddress.toLowerCase();\n      if (!isTokenApproved) {\n        await asset.sendTransaction(\"setApprovalForAll\", [marketplaceAddress, true]);\n      }\n    }\n  } else if (isERC1155) {\n    const asset = new ContractWrapper(contractWrapper.getSignerOrProvider(), assetContract, Erc1155Abi, contractWrapper.options, contractWrapper.storage);\n    const approved = await asset.read(\"isApprovedForAll\", [from, marketplaceAddress]);\n    if (!approved) {\n      await asset.sendTransaction(\"setApprovalForAll\", [marketplaceAddress, true]);\n    }\n  } else {\n    throw Error(\"Contract must implement ERC 1155 or ERC 721.\");\n  }\n}\n\n/**\n * Used to verify fields in new listing.\n * @internal\n */\n// TODO this should be done in zod\nfunction validateNewListingParam(param) {\n  invariant(param.assetContractAddress !== undefined && param.assetContractAddress !== null, \"Asset contract address is required\");\n  invariant(param.buyoutPricePerToken !== undefined && param.buyoutPricePerToken !== null, \"Buyout price is required\");\n  invariant(param.listingDurationInSeconds !== undefined && param.listingDurationInSeconds !== null, \"Listing duration is required\");\n  invariant(param.startTimestamp !== undefined && param.startTimestamp !== null, \"Start time is required\");\n  invariant(param.tokenId !== undefined && param.tokenId !== null, \"Token ID is required\");\n  invariant(param.quantity !== undefined && param.quantity !== null, \"Quantity is required\");\n  switch (param.type) {\n    case \"NewAuctionListing\":\n      {\n        invariant(param.reservePricePerToken !== undefined && param.reservePricePerToken !== null, \"Reserve price is required\");\n      }\n  }\n}\n\n/**\n * Maps a contract offer to the strict interface\n *\n * @internal\n * @param offer\n * @returns - An `Offer` object\n */\nasync function mapOffer(provider, listingId, offer) {\n  return {\n    quantity: offer.quantityDesired,\n    pricePerToken: offer.pricePerToken,\n    currencyContractAddress: offer.currency,\n    buyerAddress: offer.offeror,\n    quantityDesired: offer.quantityWanted,\n    currencyValue: await fetchCurrencyValue(provider, offer.currency, offer.quantityWanted.mul(offer.pricePerToken)),\n    listingId\n  };\n}\nfunction isWinningBid(winningPrice, newBidPrice, bidBuffer) {\n  bidBuffer = BigNumber.from(bidBuffer);\n  winningPrice = BigNumber.from(winningPrice);\n  newBidPrice = BigNumber.from(newBidPrice);\n  if (winningPrice.eq(BigNumber.from(0))) {\n    return false;\n  }\n  const buffer = newBidPrice.sub(winningPrice).mul(MAX_BPS).div(winningPrice);\n  return buffer.gte(bidBuffer);\n}\nasync function getAllInBatches(start, end, fn) {\n  const batches = [];\n  while (end - start > DEFAULT_QUERY_ALL_COUNT) {\n    batches.push(fn(start, start + DEFAULT_QUERY_ALL_COUNT - 1));\n    start += DEFAULT_QUERY_ALL_COUNT;\n  }\n  batches.push(fn(start, end - 1));\n  return await Promise.all(batches);\n}\n\n/**\n * Listen to Contract events in real time\n * @public\n */\nclass ContractEvents {\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Subscribe to transactions in this contract.\n   * @remarks Will emit an \"event\" object containing the transaction status ('submitted' and 'completed') and hash\n   * @example\n   * ```javascript\n   * contract.events.addTransactionListener((event) => {\n   *   console.log(event);\n   * }\n   * ```\n   * @param listener - the callback function that will be called on every transaction\n   * @public\n   */\n  addTransactionListener(listener) {\n    this.contractWrapper.addListener(EventType.Transaction, listener);\n  }\n\n  /**\n   * Remove a transaction listener\n   * @remarks Remove a listener that was added with addTransactionListener\n   * @example\n   * ```javascript\n   * contract.events.removeTransactionListener((event) => {\n   *  console.log(event);\n   * }\n   * ```\n   * @param listener - the callback function to remove\n   * @public\n   */\n  removeTransactionListener(listener) {\n    this.contractWrapper.off(EventType.Transaction, listener);\n  }\n\n  /**\n   * Subscribe to contract events\n   * @remarks You can add a listener for any contract event to run a function when\n   * the event is emitted. For example, if you wanted to listen for a \"TokensMinted\" event,\n   * you could do the following:\n   * @example\n   * ```javascript\n   * contract.events.addEventListener(\"TokensMinted\", (event) => {\n   *   console.log(event);\n   * });\n   * ```\n   * @public\n   * @param eventName - the event name as defined in the contract\n   * @param listener - the callback function that will be called on every new event\n   * @returns a function to un-subscribe from the event\n   */\n  addEventListener(\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  eventName, listener) {\n    // validates event, throws error if not found\n    const event = this.contractWrapper.readContract.interface.getEvent(eventName);\n    const address = this.contractWrapper.address;\n    const filter = {\n      address,\n      topics: [this.contractWrapper.readContract.interface.getEventTopic(event)]\n    };\n    const wrappedListener = log => {\n      const parsedLog = this.contractWrapper.readContract.interface.parseLog(log);\n      listener(this.toContractEvent(parsedLog.eventFragment, parsedLog.args, log));\n    };\n    this.contractWrapper.getProvider().on(filter, wrappedListener);\n    return () => {\n      this.contractWrapper.getProvider().off(filter, wrappedListener);\n    };\n  }\n\n  /**\n   * Listen to all events emitted from this contract\n   *\n   * @example\n   * ```javascript\n   * contract.events.listenToAllEvents((event) => {\n   *   console.log(event.eventName) // the name of the emitted event\n   *   console.log(event.data) // event payload\n   * }\n   * ```\n   * @public\n   * @param listener - the callback function that will be called on every new event\n   * @returns A function that can be called to stop listening to events\n   */\n  listenToAllEvents(listener) {\n    const address = this.contractWrapper.address;\n    const filter = {\n      address\n    };\n    const wrappedListener = log => {\n      try {\n        const parsedLog = this.contractWrapper.readContract.interface.parseLog(log);\n        listener(this.toContractEvent(parsedLog.eventFragment, parsedLog.args, log));\n      } catch (e) {\n        console.error(\"Could not parse event:\", log, e);\n      }\n    };\n    this.contractWrapper.getProvider().on(filter, wrappedListener);\n    return () => {\n      this.contractWrapper.getProvider().off(filter, wrappedListener);\n    };\n  }\n\n  /**\n   * Remove an event listener from this contract\n   * @remarks Remove a listener that was added with addEventListener\n   * @example\n   * ```javascript\n   * contract.events.removeEventListener(\"TokensMinted\", (event) => {\n   *   console.log(event);\n   * });\n   * ```\n   * @public\n   * @param eventName - the event name as defined in the contract\n   * @param listener - the listener to unregister\n   */\n  removeEventListener(\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  eventName, listener) {\n    // validates event, throws error if not found\n    const event = this.contractWrapper.readContract.interface.getEvent(eventName);\n    this.contractWrapper.readContract.off(event.name, listener);\n  }\n\n  /**\n   * Remove all listeners on this contract\n   * @remarks Remove all listeners from a contract\n   * @example\n   * ```javascript\n   * contract.events.removeAllListeners();\n   * ```\n   * @public\n   */\n  removeAllListeners() {\n    this.contractWrapper.readContract.removeAllListeners();\n    const address = this.contractWrapper.address;\n    const filter = {\n      address\n    };\n    this.contractWrapper.getProvider().removeAllListeners(filter);\n  }\n\n  /**\n   * Get All Events\n   * @remarks Get a list of all the events emitted from this contract during the specified time period\n   * @example\n   * ```javascript\n   * // Optionally pass in filters to limit the blocks from which events are retrieved\n   * const filters = {\n   *   fromBlock: 0,\n   *   toBlock: 1000000,\n   * }\n   * const events = await contract.events.getAllEvents(filters);\n   * console.log(events[0].eventName);\n   * console.log(events[0].data);\n   * ```\n   *\n   * @param filters - Specify the from and to block numbers to get events for, defaults to all blocks\n   * @returns The event objects of the events emitted with event names and data for each event\n   */\n  async getAllEvents() {\n    let filters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      fromBlock: 0,\n      toBlock: \"latest\",\n      order: \"desc\"\n    };\n    const events = await this.contractWrapper.readContract.queryFilter({}, filters.fromBlock, filters.toBlock);\n    const orderedEvents = events.sort((a, b) => {\n      return filters.order === \"desc\" ? b.blockNumber - a.blockNumber : a.blockNumber - b.blockNumber;\n    });\n    return this.parseEvents(orderedEvents);\n  }\n\n  /**\n   * Get Events\n   * @remarks Get a list of the events of a specific type emitted from this contract during the specified time period\n   * @example\n   * ```javascript\n   * // The name of the event to get logs for\n   * const eventName = \"Transfer\";\n   *\n   * // Optionally pass in options to limit the blocks from which events are retrieved\n   * const options = {\n   *   fromBlock: 0,\n   *   toBlock: 1000000, // can also pass \"latest\"\n   *   order: \"desc\",\n   *   // Configure event filters (filter on indexed event parameters)\n   *   filters: {\n   *     from: \"0x...\",\n   *     to: \"0x...\"\n   *   }\n   * };\n   *\n   * const events = await contract.events.getEvents(eventName, options);\n   * console.log(events[0].eventName);\n   * console.log(events[0].data);\n   * ```\n   *\n   * @param eventName - The name of the event to get logs for\n   * @param options - Specify the from and to block numbers to get events for, defaults to all blocks. @see EventQueryOptions\n   * @returns The requested event objects with event data\n   */\n  async getEvents(eventName) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      fromBlock: 0,\n      toBlock: \"latest\",\n      order: \"desc\"\n    };\n    const eventInterface = this.contractWrapper.readContract.interface.getEvent(eventName);\n    const args = options.filters ? eventInterface.inputs.map(e => options.filters[e.name]) : [];\n    const filter = this.contractWrapper.readContract.filters[eventInterface.name](...args);\n    const events = await this.contractWrapper.readContract.queryFilter(filter, options.fromBlock, options.toBlock);\n    const orderedEvents = events.sort((a, b) => {\n      return options.order === \"desc\" ? b.blockNumber - a.blockNumber : a.blockNumber - b.blockNumber;\n    });\n    return this.parseEvents(orderedEvents);\n  }\n  parseEvents(events) {\n    return events.map(e => {\n      const transaction = Object.fromEntries(Object.entries(e).filter(a => typeof a[1] !== \"function\" && a[0] !== \"args\"));\n      if (e.args) {\n        const entries = Object.entries(e.args);\n        const args = entries.slice(entries.length / 2, entries.length);\n        const data = {};\n        for (const [key, value] of args) {\n          data[key] = value;\n        }\n        return {\n          eventName: e.event || \"\",\n          data: data,\n          transaction\n        };\n      }\n      return {\n        eventName: e.event || \"\",\n        data: {},\n        transaction\n      };\n    });\n  }\n  toContractEvent(event, args, rawLog) {\n    const transaction = Object.fromEntries(Object.entries(rawLog).filter(a => typeof a[1] !== \"function\" && a[0] !== \"args\"));\n    const results = {};\n    event.inputs.forEach((param, index) => {\n      if (Array.isArray(args[index])) {\n        const components = param.components;\n        if (components) {\n          const arr = args[index];\n          if (param.type === \"tuple[]\") {\n            // tuple[]\n            const objArray = [];\n            for (let i = 0; i < arr.length; i++) {\n              const tuple = arr[i];\n              const obj = {};\n              for (let j = 0; j < components.length; j++) {\n                const name = components[j].name;\n                obj[name] = tuple[j];\n              }\n              objArray.push(obj);\n            }\n            results[param.name] = objArray;\n          } else {\n            // simple tuple\n            const obj = {};\n            for (let i = 0; i < components.length; i++) {\n              const name = components[i].name;\n              obj[name] = arr[i];\n            }\n            results[param.name] = obj;\n          }\n        }\n      } else {\n        results[param.name] = args[index];\n      }\n    });\n    return {\n      eventName: event.name,\n      data: results,\n      transaction\n    };\n  }\n}\n\n/**\n * @internal\n */\nconst DirectListingInputParamsSchema = /* @__PURE__ */(() => z.object({\n  /**\n   * The address of the asset being listed.\n   */\n  assetContractAddress: AddressOrEnsSchema,\n  /**\n   * The ID of the token to list.\n   */\n  tokenId: BigNumberishSchema,\n  /**\n   * The quantity of tokens to include in the listing.\n   *\n   * For ERC721s, this value should always be 1 (and will be forced internally regardless of what is passed here).\n   */\n  quantity: BigNumberishSchema.default(1),\n  /**\n   * The address of the currency to accept for the listing.\n   */\n  currencyContractAddress: AddressOrEnsSchema.default(NATIVE_TOKEN_ADDRESS),\n  /**\n   * The price to pay per unit of NFTs listed.\n   */\n  pricePerToken: AmountSchema,\n  /**\n   * The start time of the listing.\n   */\n  startTimestamp: RawDateSchema.default(new Date()),\n  /**\n   * The end time of the listing.\n   */\n  endTimestamp: EndDateSchema,\n  /**\n   * Whether the listing is reserved to be bought from a specific set of buyers.\n   */\n  isReservedListing: z.boolean().default(false)\n}))();\n\n/**\n * @public\n */\n\n/**\n * Allows overriding transaction behavior for this contract\n * @public\n */\nclass ContractInterceptor {\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * The next transaction executed will add/replace any overrides passed via the passed in hook.\n   * @remarks Overridden values will be applied to the next transaction executed.\n   * @example\n   * ```javascript\n   * contract.interceptor.overrideNextTransaction(() => ({\n   *   gasLimit: 3000000,\n   * }));\n   * ```\n   * @param hook - the hook to add or replace any CallOverrides (gas limit, gas price, nonce, from, value, etc...)\n   * @public\n   */\n  overrideNextTransaction(hook) {\n    this.contractWrapper.withTransactionOverride(hook);\n  }\n}\n\n/**\n * Estimates the gas cost of Contract calls\n * @public\n */\nclass GasCostEstimator {\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Estimates the cost of gas in native token of the current chain\n   * Pass in the same parameters as the contract's function.\n   * @remarks Estimate the cost of gas in native token of the current chain\n   * @example\n   * ```javascript\n   * const costOfClaim = await nftDrop?.estimator.gasCostOf(\"claim\", [\n   *   \"0x...\", // receiver\n   *   1, // quantity\n   *   \"0x...\", // currency\n   *   1, // price per token\n   *   [], // proofs\n   *   1, // proof max quantity per transaction\n   * ]);\n   * ```\n   * @returns the estimated price in native currency (ETH, MATIC, etc) of calling this function\n   * @public\n   */\n  async gasCostOf(\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  fn, args) {\n    const [price, gasUnits] = await Promise.all([this.contractWrapper.getProvider().getGasPrice(), this.contractWrapper.estimateGas(fn, args)]);\n    return utils.formatEther(gasUnits.mul(price));\n  }\n\n  /**\n   * Estimates the gas limit of a transaction\n   * Pass in the same parameters as the contract's function.\n   * @remarks Estimates the gas limit of a transaction\n   * @example\n   * ```javascript\n   * const gasLimitOfClaim = await nftDrop?.estimator.gasLimitOf(\"claim\", [\n   *   \"0x...\", // receiver\n   *   1, // quantity\n   *   \"0x...\", // currency\n   *   1, // price per token\n   *   [], // proofs\n   *   1, // proof max quantity per transaction\n   * ]);\n   * ```\n   * @returns the estimated gas limit of the transaction\n   * @public\n   */\n  async gasLimitOf(\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  fn, args) {\n    return this.contractWrapper.estimateGas(fn, args);\n  }\n\n  /**\n   * Returns the current gas price in gwei\n   * @remarks Get the current gas price in gwei\n   * @example\n   * ```javascript\n   * const gasCostInGwei = await contract.estimator.currentGasPriceInGwei();\n   * ```\n   * @returns the current gas price in gwei\n   * @public\n   */\n  async currentGasPriceInGwei() {\n    const price = await this.contractWrapper.getProvider().getGasPrice();\n    return utils.formatUnits(price, \"gwei\");\n  }\n}\n\n/**\n * Handles direct listings\n * @public\n */\nclass MarketplaceV3DirectListings {\n  featureName = FEATURE_DIRECT_LISTINGS.name;\n\n  // utilities\n\n  constructor(contractWrapper, storage) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.events = new ContractEvents(this.contractWrapper);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get the total number of direct listings\n   *\n   * @returns Returns the total number of direct listings created.\n   * @public\n   *\n   * @example\n   * ```javascript\n   * const totalListings = await contract.directListings.getTotalCount();\n   * ```\n   * @twfeature DirectListings\n   */\n  async getTotalCount() {\n    return await this.contractWrapper.read(\"totalListings\", []);\n  }\n\n  /**\n   * Get all direct listings\n   *\n   * @example\n   * ```javascript\n   * const listings = await contract.directListings.getAll();\n   * ```\n   *\n   * @param filter - optional filter parameters\n   * @returns the Direct listing object array\n   * @twfeature DirectListings\n   */\n  async getAll(filter) {\n    const totalListings = await this.getTotalCount();\n    const start = BigNumber.from(filter?.start || 0).toNumber();\n    const end = totalListings.toNumber();\n    if (end === 0) {\n      throw new Error(`No listings exist on the contract.`);\n    }\n    let rawListings = [];\n    const batches = await getAllInBatches(start, end, (startId, endId) => this.contractWrapper.read(\"getAllListings\", [startId, endId]));\n    rawListings = batches.flat();\n    const filteredListings = await this.applyFilter(rawListings, filter);\n    return await Promise.all(filteredListings.map(listing => this.mapListing(listing)));\n  }\n\n  /**\n   * Get all valid direct listings\n   *\n   * @remarks A valid listing is where the listing is active, and the creator still owns & has approved Marketplace to transfer the listed NFTs.\n   *\n   * @example\n   * ```javascript\n   * const listings = await contract.directListings.getAllValid();\n   * ```\n   *\n   * @param filter - optional filter parameters\n   * @returns the Direct listing object array\n   * @twfeature DirectListings\n   */\n  async getAllValid(filter) {\n    const totalListings = await this.getTotalCount();\n    const start = BigNumber.from(filter?.start || 0).toNumber();\n    const end = totalListings.toNumber();\n    if (end === 0) {\n      throw new Error(`No listings exist on the contract.`);\n    }\n    let rawListings = [];\n    const batches = await getAllInBatches(start, end, (startId, endId) => this.contractWrapper.read(\"getAllValidListings\", [startId, endId]));\n    rawListings = batches.flat();\n    const filteredListings = await this.applyFilter(rawListings, filter);\n    return await Promise.all(filteredListings.map(listing => this.mapListing(listing)));\n  }\n\n  /**\n   * Get a single direct listing\n   *\n   * @example\n   * ```javascript\n   * const listingId = 0;\n   * const listing = await contract.directListings.getListing(listingId);\n   * ```\n   *\n   * @param listingId - the listing id\n   * @returns the Direct listing object\n   *\n   * @example\n   * ```javascript\n   * const listingId = 0;\n   * const listing = await contract.directListings.getListing(listingId);\n   * ```\n   * @twfeature DirectListings\n   */\n  async getListing(listingId) {\n    const listing = await this.contractWrapper.read(\"getListing\", [listingId]);\n    return await this.mapListing(listing);\n  }\n\n  /**\n   * Check if a buyer is approved for a specific direct listing\n   *\n   * @example\n   * ```javascript\n   * const listingId = 0;\n   * const isBuyerApproved = await contract.directListings.isBuyerApprovedForListing(listingId, \"{{wallet_address}}\");\n   *\n   * @param listingId - the listing id\n   * @param buyer - buyer address\n   * @twfeature DirectListings\n   */\n  async isBuyerApprovedForListing(listingId, buyer) {\n    const listing = await this.validateListing(BigNumber.from(listingId));\n    if (!listing.isReservedListing) {\n      throw new Error(`Listing ${listingId} is not a reserved listing.`);\n    }\n    return await this.contractWrapper.read(\"isBuyerApprovedForListing\", [listingId, await resolveAddress(buyer)]);\n  }\n\n  /**\n   * Check if a currency is approved for a specific direct listing\n   *\n   * @example\n   * ```javascript\n   * const listingId = 0;\n   * const currencyContractAddress = '0x1234';\n   * const isApproved = await contract.directListings.isCurrencyApprovedForListing(listingId, currencyContractAddress);\n   * ```\n   *\n   * @param listingId - the listing id\n   * @param currency - currency address\n   * @twfeature DirectListings\n   */\n  async isCurrencyApprovedForListing(listingId, currency) {\n    await this.validateListing(BigNumber.from(listingId));\n    return await this.contractWrapper.read(\"isCurrencyApprovedForListing\", [listingId, await resolveAddress(currency)]);\n  }\n\n  /**\n   * Check price per token for an approved currency\n   *\n   * @example\n   * ```javascript\n   * const listingId = 0;\n   * const currencyContractAddress = '0x1234';\n   * const price = await contract.directListings.currencyPriceForListing(listingId, currencyContractAddress);\n   * ```\n   *\n   * @param listingId - the listing id\n   * @param currencyContractAddress - currency contract address\n   * @twfeature DirectListings\n   */\n  async currencyPriceForListing(listingId, currencyContractAddress) {\n    const listing = await this.validateListing(BigNumber.from(listingId));\n    const resolvedCurrencyAddress = await resolveAddress(currencyContractAddress);\n    if (resolvedCurrencyAddress === listing.currencyContractAddress) {\n      return listing.pricePerToken;\n    }\n    const isApprovedCurrency = await this.isCurrencyApprovedForListing(listingId, resolvedCurrencyAddress);\n    if (!isApprovedCurrency) {\n      throw new Error(`Currency ${resolvedCurrencyAddress} is not approved for Listing ${listingId}.`);\n    }\n    return await this.contractWrapper.read(\"currencyPriceForListing\", [listingId, resolvedCurrencyAddress]);\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Create new direct listing\n   *\n   * @remarks Create a new listing on the marketplace where people can buy an asset directly.\n   *\n   * @example\n   * ```javascript\n   * // Data of the listing you want to create\n   * const listing = {\n   *   // address of the contract the asset you want to list is on\n   *   assetContractAddress: \"0x...\",\n   *   // token ID of the asset you want to list\n   *   tokenId: \"0\",\n   *   // how many of the asset you want to list\n   *   quantity: 1,\n   *   // address of the currency contract that will be used to pay for the listing\n   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n   *   // The price to pay per unit of NFTs listed.\n   *   pricePerToken: 1.5,\n   *   // when should the listing open up for offers\n   *   startTimestamp: new Date(Date.now()),\n   *   // how long the listing will be open for\n   *   endTimestamp: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000),\n   *   // Whether the listing is reserved for a specific set of buyers.\n   *   isReservedListing: false\n   * }\n   *\n   * const tx = await contract.directListings.createListing(listing);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const id = tx.id; // the id of the newly created listing\n   * ```\n   * @twfeature DirectListings\n   */\n  createListing = /* @__PURE__ */buildTransactionFunction(async listing => {\n    const parsedListing = await DirectListingInputParamsSchema.parseAsync(listing);\n    await handleTokenApproval(this.contractWrapper, this.getAddress(), parsedListing.assetContractAddress, parsedListing.tokenId, await this.contractWrapper.getSignerAddress());\n    const normalizedPricePerToken = await normalizePriceValue(this.contractWrapper.getProvider(), parsedListing.pricePerToken, parsedListing.currencyContractAddress);\n    const block = await this.contractWrapper.getProvider().getBlock(\"latest\");\n    const blockTime = block.timestamp;\n    if (parsedListing.startTimestamp.lt(blockTime)) {\n      parsedListing.startTimestamp = BigNumber.from(blockTime);\n    }\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"createListing\",\n      args: [{\n        assetContract: parsedListing.assetContractAddress,\n        tokenId: parsedListing.tokenId,\n        quantity: parsedListing.quantity,\n        currency: cleanCurrencyAddress(parsedListing.currencyContractAddress),\n        pricePerToken: normalizedPricePerToken,\n        startTimestamp: parsedListing.startTimestamp,\n        endTimestamp: parsedListing.endTimestamp,\n        reserved: parsedListing.isReservedListing\n      }],\n      parse: receipt => {\n        const event = this.contractWrapper.parseLogs(\"NewListing\", receipt?.logs);\n        return {\n          id: event[0].args.listingId,\n          receipt\n        };\n      }\n    });\n  });\n\n  /**\n   * Create a batch of new listings\n   *\n   * @remarks Create a batch of new listings on the marketplace\n   *\n   * @example\n   * ```javascript\n   * const listings = [...];\n   * const tx = await contract.directListings.createListingsBatch(listings);\n   * ```\n   */\n  createListingsBatch = /* @__PURE__ */buildTransactionFunction(async listings => {\n    const data = await Promise.all(listings.map(async listing => {\n      const tx = await this.createListing.prepare(listing);\n      return tx.encode();\n    }));\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"multicall\",\n      args: [data],\n      parse: receipt => {\n        const events = this.contractWrapper.parseLogs(\"NewListing\", receipt?.logs);\n        return events.map(event => {\n          return {\n            id: event.args.listingId,\n            receipt\n          };\n        });\n      }\n    });\n  });\n\n  /**\n   * Update a direct listing\n   *\n   * @param listing - the new listing information\n   *\n   * @example\n   * ```javascript\n   * // Data of the listing you want to update\n   *\n   * const listingId = 0; // ID of the listing you want to update\n   *\n   * const listing = {\n   *   // address of the contract the asset you want to list is on\n   *   assetContractAddress: \"0x...\", // should be same as original listing\n   *   // token ID of the asset you want to list\n   *   tokenId: \"0\", // should be same as original listing\n   *   // how many of the asset you want to list\n   *   quantity: 1,\n   *   // address of the currency contract that will be used to pay for the listing\n   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n   *   // The price to pay per unit of NFTs listed.\n   *   pricePerToken: 1.5,\n   *   // when should the listing open up for offers\n   *   startTimestamp: new Date(Date.now()), // can't change this if listing already active\n   *   // how long the listing will be open for\n   *   endTimestamp: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000),\n   *   // Whether the listing is reserved for a specific set of buyers.\n   *   isReservedListing: false\n   * }\n   *\n   * const tx = await contract.directListings.updateListing(listingId, listing);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const id = tx.id; // the id of the newly created listing\n   * ```\n   * @twfeature DirectListings\n   */\n  updateListing = /* @__PURE__ */buildTransactionFunction(async (listingId, listing) => {\n    const parsedListing = await DirectListingInputParamsSchema.parseAsync(listing);\n    await handleTokenApproval(this.contractWrapper, this.getAddress(), parsedListing.assetContractAddress, parsedListing.tokenId, await this.contractWrapper.getSignerAddress());\n    const normalizedPricePerToken = await normalizePriceValue(this.contractWrapper.getProvider(), parsedListing.pricePerToken, parsedListing.currencyContractAddress);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"updateListing\",\n      args: [listingId, {\n        assetContract: parsedListing.assetContractAddress,\n        tokenId: parsedListing.tokenId,\n        quantity: parsedListing.quantity,\n        currency: cleanCurrencyAddress(parsedListing.currencyContractAddress),\n        pricePerToken: normalizedPricePerToken,\n        startTimestamp: parsedListing.startTimestamp,\n        endTimestamp: parsedListing.endTimestamp,\n        reserved: parsedListing.isReservedListing\n      }],\n      parse: receipt => {\n        const event = this.contractWrapper.parseLogs(\"UpdatedListing\", receipt?.logs);\n        return {\n          id: event[0].args.listingId,\n          receipt\n        };\n      }\n    });\n  });\n\n  /**\n   * Cancel Direct Listing\n   *\n   * @remarks Cancel a direct listing on the marketplace\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the direct listing you want to cancel\n   * const listingId = 0;\n   *\n   * await contract.directListings.cancelListing(listingId);\n   * ```\n   * @twfeature DirectListings\n   */\n  cancelListing = /* @__PURE__ */buildTransactionFunction(async listingId => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"cancelListing\",\n      args: [listingId]\n    });\n  });\n\n  /**\n   * Buy direct listing for a specific wallet\n   *\n   * @remarks Buy from a specific direct listing from the marketplace.\n   *\n   * @example\n   * ```javascript\n   * // The ID of the listing you want to buy from\n   * const listingId = 0;\n   * // Quantity of the asset you want to buy\n   * const quantityDesired = 1;\n   *\n   * await contract.directListings.buyFromListing(listingId, quantityDesired, \"{{wallet_address}}\");\n   * ```\n   *\n   * @param listingId - The listing id to buy\n   * @param quantityDesired - the quantity to buy\n   * @param receiver - optional receiver of the bought listing if different from the connected wallet\n   * @twfeature DirectListings\n   */\n  buyFromListing = /* @__PURE__ */buildTransactionFunction(async (listingId, quantityDesired, receiver) => {\n    if (receiver) {\n      receiver = await resolveAddress(receiver);\n    }\n    const listing = await this.validateListing(BigNumber.from(listingId));\n    const {\n      valid,\n      error\n    } = await this.isStillValidListing(listing, quantityDesired);\n    if (!valid) {\n      throw new Error(`Listing ${listingId} is no longer valid. ${error}`);\n    }\n    const buyFor = receiver ? receiver : await this.contractWrapper.getSignerAddress();\n    const quantity = BigNumber.from(quantityDesired);\n    const value = BigNumber.from(listing.pricePerToken).mul(quantity);\n    const overrides = (await this.contractWrapper.getCallOverrides()) || {};\n    await setErc20Allowance(this.contractWrapper, value, listing.currencyContractAddress, overrides);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"buyFromListing\",\n      args: [listingId, buyFor, quantity, listing.currencyContractAddress, value],\n      overrides\n    });\n  });\n\n  /**\n   * Approve buyer for a reserved direct listing\n   *\n   * @remarks Approve a buyer to buy from a reserved listing.\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the direct listing you want to approve buyer for\n   * const listingId = \"0\";\n   *\n   * await contract.directListings.approveBuyerForReservedListing(listingId, \"{{wallet_address}}\");\n   * ```\n   *\n   * @param listingId - The listing id to buy\n   * @param buyer - Address of buyer being approved\n   * @twfeature DirectListings\n   */\n  approveBuyerForReservedListing = /* @__PURE__ */buildTransactionFunction(async (listingId, buyer) => {\n    const isApproved = await this.isBuyerApprovedForListing(listingId, buyer);\n    if (!isApproved) {\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"approveBuyerForListing\",\n        args: [listingId, buyer, true]\n      });\n    } else {\n      throw new Error(`Buyer ${buyer} already approved for listing ${listingId}.`);\n    }\n  });\n\n  /**\n   * Revoke approval of a buyer for a reserved direct listing\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the direct listing you want to approve buyer for\n   * const listingId = \"0\";\n   *\n   * await contract.directListings.revokeBuyerApprovalForReservedListing(listingId, \"{{wallet_address}}\");\n   * ```\n   *\n   * @param listingId - The listing id to buy\n   * @param buyer - Address of buyer being approved\n   */\n  revokeBuyerApprovalForReservedListing = /* @__PURE__ */buildTransactionFunction(async (listingId, buyer) => {\n    const isApproved = await this.isBuyerApprovedForListing(listingId, buyer);\n    if (isApproved) {\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"approveBuyerForListing\",\n        args: [listingId, buyer, false]\n      });\n    } else {\n      throw new Error(`Buyer ${buyer} not approved for listing ${listingId}.`);\n    }\n  });\n\n  /**\n   * Approve a currency for a direct listing\n   *\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the direct listing you want to approve currency for\n   * const listingId = \"0\";\n   *\n   * await contract.directListings.approveCurrencyForListing(listingId, currencyContractAddress, pricePerTokenInCurrency);\n   * ```\n   *\n   * @param listingId - The listing id to buy\n   * @param currencyContractAddress - Address of currency being approved\n   * @param pricePerTokenInCurrency - Price per token in the currency\n   * @twfeature DirectListings\n   */\n  approveCurrencyForListing = /* @__PURE__ */buildTransactionFunction(async (listingId, currencyContractAddress, pricePerTokenInCurrency) => {\n    const listing = await this.validateListing(BigNumber.from(listingId));\n    const resolvedCurrencyAddress = await resolveAddress(currencyContractAddress);\n    if (resolvedCurrencyAddress === listing.currencyContractAddress) {\n      invariant(pricePerTokenInCurrency === listing.pricePerToken, \"Approving listing currency with a different price.\");\n    }\n    const currencyPrice = await this.contractWrapper.read(\"currencyPriceForListing\", [listingId, resolvedCurrencyAddress]);\n    invariant(pricePerTokenInCurrency === currencyPrice, \"Currency already approved with this price.\");\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"approveCurrencyForListing\",\n      args: [listingId, resolvedCurrencyAddress, pricePerTokenInCurrency]\n    });\n  });\n\n  /**\n   * Revoke approval of a currency for a direct listing\n   *\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the direct listing you want to revoke currency for\n   * const listingId = \"0\";\n   *\n   * await contract.directListings.revokeCurrencyApprovalForListing(listingId, currencyContractAddress);\n   * ```\n   *\n   * @param listingId - The listing id to buy\n   * @param currencyContractAddress - Address of currency\n   * @twfeature DirectListings\n   */\n  revokeCurrencyApprovalForListing = /* @__PURE__ */buildTransactionFunction(async (listingId, currencyContractAddress) => {\n    const listing = await this.validateListing(BigNumber.from(listingId));\n    const resolvedCurrencyAddress = await resolveAddress(currencyContractAddress);\n    if (resolvedCurrencyAddress === listing.currencyContractAddress) {\n      throw new Error(`Can't revoke approval for main listing currency.`);\n    }\n    const currencyPrice = await this.contractWrapper.read(\"currencyPriceForListing\", [listingId, resolvedCurrencyAddress]);\n    invariant(!currencyPrice.isZero(), \"Currency not approved.\");\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"approveCurrencyForListing\",\n      args: [listingId, resolvedCurrencyAddress, BigNumber.from(0)]\n    });\n  });\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  /**\n   * Throws error if listing could not be found\n   *\n   * @param listingId - Listing to check for\n   */\n  async validateListing(listingId) {\n    try {\n      return await this.getListing(listingId);\n    } catch (err) {\n      console.error(`Error getting the listing with id ${listingId}`);\n      throw err;\n    }\n  }\n\n  /**\n   * Helper method maps the auction listing to the direct listing interface.\n   *\n   * @internal\n   * @param listing - The listing to map, as returned from the contract.\n   * @returns - The mapped interface.\n   */\n  async mapListing(listing) {\n    let status = Status.UNSET;\n    const block = await this.contractWrapper.getProvider().getBlock(\"latest\");\n    const blockTime = block.timestamp;\n    switch (listing.status) {\n      case 1:\n        status = BigNumber.from(listing.startTimestamp).gt(blockTime) ? Status.Created : BigNumber.from(listing.endTimestamp).lt(blockTime) ? Status.Expired : Status.Active;\n        break;\n      case 2:\n        status = Status.Completed;\n        break;\n      case 3:\n        status = Status.Cancelled;\n        break;\n    }\n    return {\n      assetContractAddress: listing.assetContract,\n      currencyContractAddress: listing.currency,\n      pricePerToken: listing.pricePerToken.toString(),\n      currencyValuePerToken: await fetchCurrencyValue(this.contractWrapper.getProvider(), listing.currency, listing.pricePerToken),\n      id: listing.listingId.toString(),\n      tokenId: listing.tokenId.toString(),\n      quantity: listing.quantity.toString(),\n      startTimeInSeconds: BigNumber.from(listing.startTimestamp).toNumber(),\n      asset: await fetchTokenMetadataForContract(listing.assetContract, this.contractWrapper.getProvider(), listing.tokenId, this.storage),\n      endTimeInSeconds: BigNumber.from(listing.endTimestamp).toNumber(),\n      creatorAddress: listing.listingCreator,\n      isReservedListing: listing.reserved,\n      status: status\n    };\n  }\n\n  /**\n   * Use this method to check if a direct listing is still valid.\n   *\n   * Ways a direct listing can become invalid:\n   * 1. The asset holder transferred the asset to another wallet\n   * 2. The asset holder burned the asset\n   * 3. The asset holder removed the approval on the marketplace\n   *\n   * @internal\n   * @param listing - The listing to check.\n   * @returns - True if the listing is valid, false otherwise.\n   */\n  async isStillValidListing(listing, quantity) {\n    const approved = await isTokenApprovedForTransfer(this.contractWrapper.getProvider(), this.getAddress(), listing.assetContractAddress, listing.tokenId, listing.creatorAddress);\n    if (!approved) {\n      return {\n        valid: false,\n        error: `Token '${listing.tokenId}' from contract '${listing.assetContractAddress}' is not approved for transfer`\n      };\n    }\n    const provider = this.contractWrapper.getProvider();\n    const erc165 = new Contract(listing.assetContractAddress, ERC165Abi, provider);\n    const isERC721 = await erc165.supportsInterface(InterfaceId_IERC721);\n    const isERC1155 = await erc165.supportsInterface(InterfaceId_IERC1155);\n    if (isERC721) {\n      const asset = new Contract(listing.assetContractAddress, Erc721Abi, provider);\n\n      // Handle reverts in case of non-existent tokens\n      let owner;\n      try {\n        owner = await asset.ownerOf(listing.tokenId);\n      } catch (e) {}\n      const valid = owner?.toLowerCase() === listing.creatorAddress.toLowerCase();\n      return {\n        valid,\n        error: valid ? undefined : `Seller is not the owner of Token '${listing.tokenId}' from contract '${listing.assetContractAddress} anymore'`\n      };\n    } else if (isERC1155) {\n      const asset = new Contract(listing.assetContractAddress, Erc1155Abi, provider);\n      const balance = await asset.balanceOf(listing.creatorAddress, listing.tokenId);\n      const valid = balance.gte(quantity || listing.quantity);\n      return {\n        valid,\n        error: valid ? undefined : `Seller does not have enough balance of Token '${listing.tokenId}' from contract '${listing.assetContractAddress} to fulfill the listing`\n      };\n    } else {\n      return {\n        valid: false,\n        error: \"Contract does not implement ERC 1155 or ERC 721.\"\n      };\n    }\n  }\n  async applyFilter(listings, filter) {\n    let rawListings = [...listings];\n    if (filter) {\n      if (filter.seller) {\n        const resolvedSeller = await resolveAddress(filter.seller);\n        rawListings = rawListings.filter(seller => seller.listingCreator.toString().toLowerCase() === resolvedSeller?.toString().toLowerCase());\n      }\n      if (filter.tokenContract) {\n        const resolvedToken = await resolveAddress(filter.tokenContract);\n        rawListings = rawListings.filter(tokenContract => tokenContract.assetContract.toString().toLowerCase() === resolvedToken?.toString().toLowerCase());\n      }\n      if (filter.tokenId !== undefined) {\n        rawListings = rawListings.filter(tokenContract => tokenContract.tokenId.toString() === filter?.tokenId?.toString());\n      }\n    }\n    return filter?.count && filter.count < rawListings.length ? rawListings.slice(0, filter.count) : rawListings;\n  }\n}\n\n/**\n * @internal\n */\nconst EnglishAuctionInputParamsSchema = /* @__PURE__ */(() => z.object({\n  /**\n   * The address of the asset being auctioned.\n   */\n  assetContractAddress: AddressOrEnsSchema,\n  /**\n   * The ID of the token to auction.\n   */\n  tokenId: BigNumberishSchema,\n  /**\n   * The quantity of tokens to include in the listing.\n   *\n   * For ERC721s, this value should always be 1 (and will be forced internally regardless of what is passed here).\n   */\n  quantity: BigNumberishSchema.default(1),\n  /**\n   * The address of the currency to accept for the listing.\n   */\n  currencyContractAddress: AddressOrEnsSchema.default(NATIVE_TOKEN_ADDRESS),\n  /**\n   * The minimum price that a bid must be in order to be accepted.\n   */\n  minimumBidAmount: AmountSchema,\n  /**\n   * The buyout price of the auction.\n   */\n  buyoutBidAmount: AmountSchema,\n  /**\n   * This is a buffer e.g. x seconds.\n   *\n   * If a new winning bid is made less than x seconds before expirationTimestamp, the\n   * expirationTimestamp is increased by x seconds.\n   */\n  timeBufferInSeconds: BigNumberishSchema.default(900),\n  // 15 minutes by default\n\n  /**\n   * This is a buffer in basis points e.g. x%.\n   *\n   * To be considered as a new winning bid, a bid must be at least x% greater than\n   * the current winning bid.\n   */\n  bidBufferBps: BigNumberishSchema.default(500),\n  // 5% by default\n\n  /**\n   * The start time of the auction.\n   */\n  startTimestamp: RawDateSchema.default(new Date()),\n  /**\n   * The end time of the auction.\n   */\n  endTimestamp: EndDateSchema\n}))();\n\n/**\n * @public\n */\n\n/**\n * Handles auctions\n * @public\n */\nclass MarketplaceV3EnglishAuctions {\n  featureName = FEATURE_ENGLISH_AUCTIONS.name;\n\n  // utilities\n\n  constructor(contractWrapper, storage) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.events = new ContractEvents(this.contractWrapper);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get the total number of english auctions\n   *\n   * @returns Returns the total number of auctions created.\n   * @public\n   *\n   * @example\n   * ```javascript\n   * const totalAuctions = await contract.englishAuctions.getTotalCount();\n   * ```\n   * @twfeature EnglishAuctions\n   */\n  async getTotalCount() {\n    return await this.contractWrapper.read(\"totalAuctions\", []);\n  }\n\n  /**\n   * Get all english auctions\n   *\n   * @example\n   * ```javascript\n   * const auctions = await contract.englishAuctions.getAll();\n   * ```\n   *\n   * @param filter - optional filter parameters\n   * @returns the Auction object array\n   * @twfeature EnglishAuctions\n   */\n  async getAll(filter) {\n    const totalAuctions = await this.getTotalCount();\n    const start = BigNumber.from(filter?.start || 0).toNumber();\n    const end = totalAuctions.toNumber();\n    if (end === 0) {\n      throw new Error(`No auctions exist on the contract.`);\n    }\n    let rawAuctions = [];\n    const batches = await getAllInBatches(start, end, (startId, endId) => this.contractWrapper.read(\"getAllAuctions\", [startId, endId]));\n    rawAuctions = batches.flat();\n    const filteredAuctions = await this.applyFilter(rawAuctions, filter);\n    return await Promise.all(filteredAuctions.map(auction => this.mapAuction(auction)));\n  }\n\n  /**\n   * Get all valid english auctions\n   *\n   * @example\n   * ```javascript\n   * const auctions = await contract.englishAuctions.getAllValid();\n   * ```\n   *\n   * @param filter - optional filter parameters\n   * @returns the Auction object array\n   * @twfeature EnglishAuctions\n   */\n  async getAllValid(filter) {\n    const totalAuctions = await this.getTotalCount();\n    const start = BigNumber.from(filter?.start || 0).toNumber();\n    const end = totalAuctions.toNumber();\n    if (end === 0) {\n      throw new Error(`No auctions exist on the contract.`);\n    }\n    let rawAuctions = [];\n    const batches = await getAllInBatches(start, end, (startId, endId) => this.contractWrapper.read(\"getAllValidAuctions\", [startId, endId]));\n    rawAuctions = batches.flat();\n    const filteredAuctions = await this.applyFilter(rawAuctions, filter);\n    return await Promise.all(filteredAuctions.map(auction => this.mapAuction(auction)));\n  }\n\n  /**\n   * Get a single english auction\n   *\n   * @example\n   * ```javascript\n   * const auctionId = 0;\n   * const auction = await contract.englishAuctions.getAuction(auctionId);\n   * ```\n   *\n   * @param auctionId - the auction Id\n   * @returns the Auction object\n   * @twfeature EnglishAuctions\n   */\n  async getAuction(auctionId) {\n    const auction = await this.contractWrapper.read(\"getAuction\", [auctionId]);\n    return await this.mapAuction(auction);\n  }\n\n  /**\n   * Get winning bid of an english auction\n   *\n   * @remarks Get the current highest bid of an active auction.\n   *\n   * @example\n   * ```javascript\n   * // The ID of the auction\n   * const auctionId = 0;\n   * const winningBid = await contract.englishAuctions.getWinningBid(auctionId);\n   * ```\n   * @param auctionId - the auction Id\n   * @twfeature EnglishAuctions\n   */\n  async getWinningBid(auctionId) {\n    await this.validateAuction(BigNumber.from(auctionId));\n    const bid = await this.contractWrapper.read(\"getWinningBid\", [auctionId]);\n    if (bid._bidder === constants.AddressZero) {\n      return undefined;\n    }\n    return await this.mapBid(auctionId.toString(), bid._bidder, bid._currency, bid._bidAmount.toString());\n  }\n\n  /**\n   * Check if a bid is or will be a winning bid\n   *\n   * @example\n   * ```javascript\n   * const auctionId = 0;\n   * const bidAmount = 100;\n   * const isWinningBid = await contract.englishAuctions.isWinningBid(auctionId, bidAmount);\n   * ```\n   *\n   * @param auctionId - Auction Id\n   * @param bidAmount - Amount to bid\n   * @returns true if the bid is or will be a winning bid\n   * @twfeature EnglishAuctions\n   */\n  async isWinningBid(auctionId, bidAmount) {\n    return await this.contractWrapper.read(\"isNewWinningBid\", [auctionId, bidAmount]);\n  }\n\n  /**\n   * Get the winner for a specific english auction\n   *\n   * @remarks Get the winner of the auction after an auction ends.\n   *\n   * @example\n   * ```javascript\n   * // The auction ID of a closed english auction\n   * const auctionId = 0;\n   * const auctionWinner = await contract.englishAuctions.getWinner(auctionId);\n   * ```\n   * @param auctionId - the auction Id\n   * @returns the address of the auction winner\n   * @twfeature EnglishAuctions\n   */\n  async getWinner(auctionId) {\n    const auction = await this.validateAuction(BigNumber.from(auctionId));\n    const bid = await this.contractWrapper.read(\"getWinningBid\", [auctionId]);\n    const now = BigNumber.from(Math.floor(Date.now() / 1000));\n    const endTime = BigNumber.from(auction.endTimeInSeconds);\n\n    // if we have a winner in the map and the current time is past the endtime of the auction return the address of the winner\n    if (now.gt(endTime) && bid._bidder !== constants.AddressZero) {\n      return bid._bidder;\n    }\n    // otherwise fall back to query filter things\n\n    // TODO this should be via indexer or direct contract call\n    const contractEvent = new ContractEvents(this.contractWrapper);\n    const closedAuctions = await contractEvent.getEvents(\"AuctionClosed\");\n    const closed = closedAuctions.find(a => a.data.auctionId.eq(BigNumber.from(auctionId)));\n    if (!closed) {\n      throw new Error(`Could not find auction with ID ${auctionId} in closed auctions`);\n    }\n    return closed.data.winningBidder;\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Create an english auction\n   *\n   * @remarks Create a new auction where people can bid on an asset.\n   *\n   * @example\n   * ```javascript\n   * // Data of the auction you want to create\n   * const auction = {\n   *   // address of the contract of the asset you want to auction\n   *   assetContractAddress: \"0x...\",\n   *   // token ID of the asset you want to auction\n   *   tokenId: \"0\",\n   *   // how many of the asset you want to auction\n   *   quantity: 1,\n   *   // address of the currency contract that will be used to pay for the auctioned tokens\n   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n   *   // the minimum bid that will be accepted for the token\n   *   minimumBidAmount: \"1.5\",\n   *   // how much people would have to bid to instantly buy the asset\n   *   buyoutBidAmount: \"10\",\n   *   // If a bid is made less than these many seconds before expiration, the expiration time is increased by this.\n   *   timeBufferInSeconds: \"900\", // 15 minutes by default\n   *   // A bid must be at least this much bps greater than the current winning bid\n   *   bidBufferBps: \"500\", // 5% by default\n   *   // when should the auction open up for bidding\n   *   startTimestamp: new Date(Date.now()),\n   *   // end time of auction\n   *   endTimestamp: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000),\n   * }\n   *\n   * const tx = await contract.englishAuctions.createAuction(auction);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const id = tx.id; // the id of the newly created auction\n   * ```\n   * @param auction - the auction data\n   * @returns the transaction hash and the auction id\n   * @twfeature EnglishAuctions\n   */\n  createAuction = /* @__PURE__ */buildTransactionFunction(async auction => {\n    const parsedAuction = EnglishAuctionInputParamsSchema.parse(auction);\n    await handleTokenApproval(this.contractWrapper, this.getAddress(), parsedAuction.assetContractAddress, parsedAuction.tokenId, await this.contractWrapper.getSignerAddress());\n    const normalizedBuyoutAmount = await normalizePriceValue(this.contractWrapper.getProvider(), parsedAuction.buyoutBidAmount, parsedAuction.currencyContractAddress);\n    const normalizedMinBidAmount = await normalizePriceValue(this.contractWrapper.getProvider(), parsedAuction.minimumBidAmount, parsedAuction.currencyContractAddress);\n    const block = await this.contractWrapper.getProvider().getBlock(\"latest\");\n    const blockTime = block.timestamp;\n    if (parsedAuction.startTimestamp.lt(blockTime)) {\n      parsedAuction.startTimestamp = BigNumber.from(blockTime);\n    }\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"createAuction\",\n      args: [{\n        assetContract: parsedAuction.assetContractAddress,\n        tokenId: parsedAuction.tokenId,\n        quantity: parsedAuction.quantity,\n        currency: cleanCurrencyAddress(parsedAuction.currencyContractAddress),\n        minimumBidAmount: normalizedMinBidAmount,\n        buyoutBidAmount: normalizedBuyoutAmount,\n        timeBufferInSeconds: parsedAuction.timeBufferInSeconds,\n        bidBufferBps: parsedAuction.bidBufferBps,\n        startTimestamp: parsedAuction.startTimestamp,\n        endTimestamp: parsedAuction.endTimestamp\n      }],\n      parse: receipt => {\n        const event = this.contractWrapper.parseLogs(\"NewAuction\", receipt.logs)[0];\n        return {\n          id: event.args.auctionId,\n          receipt\n        };\n      }\n    });\n  });\n\n  /**\n   * Create a batch of new auctions\n   *\n   * @remarks Create a batch of new auctions on the marketplace\n   *\n   * @example\n   * ```javascript\n   * const auctions = [...];\n   * const tx = await contract.englishAuctions.createAuctionsBatch(auctions);\n   * ```\n   */\n  createAuctionsBatch = /* @__PURE__ */buildTransactionFunction(async listings => {\n    const data = await Promise.all(listings.map(async listing => {\n      const tx = await this.createAuction.prepare(listing);\n      return tx.encode();\n    }));\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"multicall\",\n      args: [data],\n      parse: receipt => {\n        const events = this.contractWrapper.parseLogs(\"NewAuction\", receipt?.logs);\n        return events.map(event => {\n          return {\n            id: event.args.auctionId,\n            receipt\n          };\n        });\n      }\n    });\n  });\n\n  /**\n   * Buyout an english auction\n   *\n   * @remarks Buy a specific auction from the marketplace.\n   *\n   * @example\n   * ```javascript\n   * // The auction ID you want to buy\n   * const auctionId = 0;\n   *\n   * await contract.englishAuctions.buyoutAuction(auctionId);\n   * ```\n   * @param auctionId - the auction id\n   * @returns the transaction result\n   * @twfeature EnglishAuctions\n   */\n  buyoutAuction = /* @__PURE__ */buildTransactionFunction(async auctionId => {\n    const auction = await this.validateAuction(BigNumber.from(auctionId));\n    const currencyMetadata = await fetchCurrencyMetadata(this.contractWrapper.getProvider(), auction.currencyContractAddress);\n    return this.makeBid.prepare(auctionId, utils.formatUnits(auction.buyoutBidAmount, currencyMetadata.decimals));\n  });\n\n  /**\n   * Bid on an english auction\n   *\n   * @remarks Make a bid on an auction\n   *\n   * @example\n   * ```javascript\n   * // The auction ID of the asset you want to bid on\n   * const auctionId = 0;\n   * // The total amount you are willing to bid for auctioned tokens\n   * const bidAmount = 1;\n   *\n   * await contract.englishAuctions.makeBid(auctionId, bidAmount);\n   * ```\n   * @param auctionId - the auction id\n   * @param bidAmount - the amount you are willing to bid\n   * @returns the transaction result\n   * @twfeature EnglishAuctions\n   */\n  makeBid = /* @__PURE__ */buildTransactionFunction(async (auctionId, bidAmount) => {\n    const auction = await this.validateAuction(BigNumber.from(auctionId));\n    const normalizedBidAmount = await normalizePriceValue(this.contractWrapper.getProvider(), bidAmount, auction.currencyContractAddress);\n    if (normalizedBidAmount.eq(BigNumber.from(0))) {\n      throw new Error(\"Cannot make a bid with 0 value\");\n    }\n    if (BigNumber.from(auction.buyoutBidAmount).gt(0) && normalizedBidAmount.gt(auction.buyoutBidAmount)) {\n      throw new Error(\"Bid amount must be less than or equal to buyoutBidAmount\");\n    }\n    const winningBid = await this.getWinningBid(auctionId);\n    if (winningBid) {\n      const isWinnner = await this.isWinningBid(auctionId, normalizedBidAmount);\n      invariant(isWinnner, \"Bid price is too low based on the current winning bid and the bid buffer\");\n    } else {\n      const tokenPrice = normalizedBidAmount;\n      const minimumBidAmount = BigNumber.from(auction.minimumBidAmount);\n      invariant(tokenPrice.gte(minimumBidAmount), \"Bid price is too low based on minimum bid amount\");\n    }\n    const overrides = (await this.contractWrapper.getCallOverrides()) || {};\n    await setErc20Allowance(this.contractWrapper, normalizedBidAmount, auction.currencyContractAddress, overrides);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"bidInAuction\",\n      args: [auctionId, normalizedBidAmount],\n      overrides\n    });\n  });\n\n  /**\n   * Cancel an english auction\n   *\n   * @remarks Cancel an auction on the marketplace\n   *\n   * @example\n   * ```javascript\n   * // The ID of the auction you want to cancel\n   * const auctionId = \"0\";\n   *\n   * await contract.englishAuctions.cancelAuction(auctionId);\n   * ```\n   * @param auctionId - the auction id\n   * @returns the transaction result\n   * @twfeature EnglishAuctions\n   */\n  cancelAuction = /* @__PURE__ */buildTransactionFunction(async auctionId => {\n    const winningBid = await this.getWinningBid(auctionId);\n    if (winningBid) {\n      throw new Error(`Bids already made.`);\n    }\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"cancelAuction\",\n      args: [auctionId]\n    });\n  });\n\n  /**\n   * Close the english auction for the bidder\n   *\n   * @remarks Closes the Auction and executes the sale for the buyer.\n   *\n   * @example\n   * ```javascript\n   * // The ID of the auction you want to close\n   * const auction = \"0\";\n   * await contract.englishAuctions.closeAuctionForBidder(auctionId);\n   * ```\n   *\n   * @param auctionId - the auction id to close\n   * @param closeFor - optionally pass the winning bid offeror address to close the auction on their behalf\n   * @returns the transaction result\n   * @twfeature EnglishAuctions\n   */\n  closeAuctionForBidder = /* @__PURE__ */buildTransactionFunction(async (auctionId, closeFor) => {\n    if (!closeFor) {\n      closeFor = await this.contractWrapper.getSignerAddress();\n    }\n    const auction = await this.validateAuction(BigNumber.from(auctionId));\n    try {\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"collectAuctionTokens\",\n        args: [BigNumber.from(auctionId)]\n      });\n    } catch (err) {\n      if (err.message.includes(\"Marketplace: auction still active.\")) {\n        throw new AuctionHasNotEndedError(auctionId.toString(), auction.endTimeInSeconds.toString());\n      } else {\n        throw err;\n      }\n    }\n  });\n\n  /**\n   * Close the english auction for the seller\n   *\n   * @remarks Closes the Auction and executes the sale for the seller.\n   *\n   * @example\n   * ```javascript\n   * // The ID of the auction you want to close\n   * const auctionId = \"0\";\n   * await contract.englishAuctions.closeAuctionForSeller(auctionId);\n   * ```\n   *\n   * @param auctionId - the auction id to close\n   * @returns the transaction result\n   * @twfeature EnglishAuctions\n   */\n  closeAuctionForSeller = /* @__PURE__ */buildTransactionFunction(async auctionId => {\n    const auction = await this.validateAuction(BigNumber.from(auctionId));\n    try {\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"collectAuctionPayout\",\n        args: [BigNumber.from(auctionId)]\n      });\n    } catch (err) {\n      if (err.message.includes(\"Marketplace: auction still active.\")) {\n        throw new AuctionHasNotEndedError(auctionId.toString(), auction.endTimeInSeconds.toString());\n      } else {\n        throw err;\n      }\n    }\n  });\n\n  /**\n   * Close the english auction for both the seller and the bidder\n   *\n   * @remarks Closes the Auction and executes the sale for both parties.\n   *\n   * @example\n   * ```javascript\n   * // The ID of the auction you want to close\n   * const auction = \"0\";\n   * await contract.englishAuctions.executeSale(auctionId);\n   * ```\n   *\n   * @param auctionId - the auction to close\n   * @returns the transaction result\n   * @twfeature EnglishAuctions\n   */\n  executeSale = /* @__PURE__ */buildTransactionFunction(async auctionId => {\n    const auction = await this.validateAuction(BigNumber.from(auctionId));\n    try {\n      const winningBid = await this.getWinningBid(auctionId);\n      invariant(winningBid, \"No winning bid found\");\n      const closeForSeller = this.encoder.encode(\"collectAuctionPayout\", [auctionId]);\n      const closeForBuyer = this.encoder.encode(\"collectAuctionTokens\", [auctionId]);\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"multicall\",\n        args: [[closeForSeller, closeForBuyer]]\n      });\n    } catch (err) {\n      if (err.message.includes(\"Marketplace: auction still active.\")) {\n        throw new AuctionHasNotEndedError(auctionId.toString(), auction.endTimeInSeconds.toString());\n      } else {\n        throw err;\n      }\n    }\n  });\n\n  /**\n   * Get the buffer for an english auction\n   *\n   * @example\n   * ```javascript\n   * // The ID of the auction you want to get the buffer for\n   * const auctionId = \"0\";\n   * const buffer = await contract.englishAuctions.getBidBufferBps(auctionId);\n   * ```\n   *\n   * @param auctionId - id of the auction\n   * @returns the buffer in basis points\n   * @twfeature EnglishAuctions\n   */\n  async getBidBufferBps(auctionId) {\n    return (await this.getAuction(auctionId)).bidBufferBps;\n  }\n\n  /**\n   * Get the minimum next bid for an english auction\n   *\n   * @example\n   * ```javascript\n   * // The ID of the auction you want to get the minimum next bid for\n   * const auctionId = \"0\";\n   * const minimumNextBid = await contract.englishAuctions.getMinimumNextBid(auctionId);\n   * ```\n   *\n   * @returns the minimum bid a user can place to outbid the previous highest bid\n   * @param auctionId - id of the auction\n   * @twfeature EnglishAuctions\n   */\n  async getMinimumNextBid(auctionId) {\n    // we can fetch all of these at the same time using promise.all\n    const [currentBidBufferBps, winningBid, auction] = await Promise.all([this.getBidBufferBps(auctionId), this.getWinningBid(auctionId), this.validateAuction(BigNumber.from(auctionId))]);\n    const currentBidOrReservePrice = winningBid ?\n    // if there is a winning bid use the value of it\n    BigNumber.from(winningBid.bidAmount) :\n    // if there is no winning bid use the reserve price\n    BigNumber.from(auction.minimumBidAmount);\n    const minimumNextBid = currentBidOrReservePrice.add(\n    // the addition of the current bid and the buffer\n    // (have to divide by 10000 to get the fraction of the buffer (since it's in basis points))\n    currentBidOrReservePrice.mul(currentBidBufferBps).div(10000));\n\n    // it's more useful to return a currency value here\n    return fetchCurrencyValue(this.contractWrapper.getProvider(), auction.currencyContractAddress, minimumNextBid);\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  /**\n   * Throws error if auction could not be found\n   *\n   * @param auctionId - Auction to check for\n   */\n  async validateAuction(auctionId) {\n    try {\n      return await this.getAuction(auctionId);\n    } catch (err) {\n      console.error(`Error getting the auction with id ${auctionId}`);\n      throw err;\n    }\n  }\n\n  /**\n   * Helper method maps the auction to the auction interface.\n   *\n   * @internal\n   * @param auction - The auction to map, as returned from the contract.\n   * @returns - The mapped interface.\n   */\n  async mapAuction(auction) {\n    let status = Status.UNSET;\n    const block = await this.contractWrapper.getProvider().getBlock(\"latest\");\n    const blockTime = block.timestamp;\n    switch (auction.status) {\n      case 1:\n        status = BigNumber.from(auction.startTimestamp).gt(blockTime) ? Status.Created : BigNumber.from(auction.endTimestamp).lt(blockTime) ? Status.Expired : Status.Active;\n        break;\n      case 2:\n        status = Status.Completed;\n        break;\n      case 3:\n        status = Status.Cancelled;\n        break;\n    }\n    return {\n      id: auction.auctionId.toString(),\n      creatorAddress: auction.auctionCreator,\n      assetContractAddress: auction.assetContract,\n      tokenId: auction.tokenId.toString(),\n      quantity: auction.quantity.toString(),\n      currencyContractAddress: auction.currency,\n      minimumBidAmount: auction.minimumBidAmount.toString(),\n      minimumBidCurrencyValue: await fetchCurrencyValue(this.contractWrapper.getProvider(), auction.currency, auction.minimumBidAmount),\n      buyoutBidAmount: auction.buyoutBidAmount.toString(),\n      buyoutCurrencyValue: await fetchCurrencyValue(this.contractWrapper.getProvider(), auction.currency, auction.buyoutBidAmount),\n      timeBufferInSeconds: BigNumber.from(auction.timeBufferInSeconds).toNumber(),\n      bidBufferBps: BigNumber.from(auction.bidBufferBps).toNumber(),\n      startTimeInSeconds: BigNumber.from(auction.startTimestamp).toNumber(),\n      endTimeInSeconds: BigNumber.from(auction.endTimestamp).toNumber(),\n      asset: await fetchTokenMetadataForContract(auction.assetContract, this.contractWrapper.getProvider(), auction.tokenId, this.storage),\n      status: status\n    };\n  }\n\n  /**\n   * Maps an auction-bid to the strict interface\n   *\n   * @internal\n   * @param bid\n   * @returns - A `Bid` object\n   */\n  async mapBid(auctionId, bidderAddress, currencyContractAddress, bidAmount) {\n    const resolvedBidderAddress = await resolveAddress(bidderAddress);\n    const resolvedCurrencyAddress = await resolveAddress(currencyContractAddress);\n    return {\n      auctionId,\n      bidderAddress: resolvedBidderAddress,\n      currencyContractAddress: resolvedCurrencyAddress,\n      bidAmount,\n      bidAmountCurrencyValue: await fetchCurrencyValue(this.contractWrapper.getProvider(), resolvedCurrencyAddress, bidAmount)\n    };\n  }\n  async applyFilter(auctions, filter) {\n    let rawAuctions = [...auctions];\n    if (filter) {\n      if (filter.seller) {\n        const resolvedSeller = await resolveAddress(filter.seller);\n        rawAuctions = rawAuctions.filter(seller => seller.auctionCreator.toString().toLowerCase() === resolvedSeller?.toString().toLowerCase());\n      }\n      if (filter.tokenContract) {\n        const resolvedToken = await resolveAddress(filter.tokenContract);\n        rawAuctions = rawAuctions.filter(tokenContract => tokenContract.assetContract.toString().toLowerCase() === resolvedToken?.toString().toLowerCase());\n      }\n      if (filter.tokenId !== undefined) {\n        rawAuctions = rawAuctions.filter(tokenContract => tokenContract.tokenId.toString() === filter?.tokenId?.toString());\n      }\n    }\n    return filter?.count && filter.count < rawAuctions.length ? rawAuctions.slice(0, filter.count) : rawAuctions;\n  }\n}\n\n/**\n * @internal\n */\nconst OfferInputParamsSchema = /* @__PURE__ */(() => z.object({\n  /**\n   * The address of the asset being sought.\n   */\n  assetContractAddress: AddressOrEnsSchema,\n  /**\n   * The ID of the token.\n   */\n  tokenId: BigNumberishSchema,\n  /**\n   * The quantity of tokens to buy.\n   *\n   * For ERC721s, this value should always be 1 (and will be forced internally regardless of what is passed here).\n   */\n  quantity: BigNumberishSchema.default(1),\n  /**\n   * The address of the currency offered for the NFTs.\n   */\n  currencyContractAddress: AddressOrEnsSchema.default(NATIVE_TOKEN_ADDRESS),\n  /**\n   * The total offer amount for the NFTs.\n   */\n  totalPrice: AmountSchema,\n  /**\n   * The end time of the offer.\n   */\n  endTimestamp: EndDateSchema\n}))();\n\n/**\n * @public\n */\n\n/**\n * Handles marketplace offers\n * @public\n */\nclass MarketplaceV3Offers {\n  featureName = FEATURE_OFFERS.name;\n\n  // utilities\n\n  constructor(contractWrapper, storage) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.events = new ContractEvents(this.contractWrapper);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get the total number of offers\n   *\n   * @returns Returns the total number of offers created.\n   * @public\n   *\n   * @example\n   * ```javascript\n   * const totalOffers = await contract.offers.getTotalCount();\n   * ```\n   * @twfeature Offers\n   */\n  async getTotalCount() {\n    return await this.contractWrapper.read(\"totalOffers\", []);\n  }\n\n  /**\n   * Get all offers\n   *\n   * @example\n   * ```javascript\n   * const offers = await contract.offers.getAll();\n   * ```\n   *\n   * @param filter - optional filter parameters\n   * @returns the Offer object array\n   * @twfeature Offers\n   */\n  async getAll(filter) {\n    const totalOffers = await this.getTotalCount();\n    const start = BigNumber.from(filter?.start || 0).toNumber();\n    const end = totalOffers.toNumber();\n    if (end === 0) {\n      throw new Error(`No offers exist on the contract.`);\n    }\n    let rawOffers = [];\n    const batches = await getAllInBatches(start, end, (startId, endId) => this.contractWrapper.read(\"getAllOffers\", [startId, endId]));\n    rawOffers = batches.flat();\n    const filteredOffers = await this.applyFilter(rawOffers, filter);\n    return await Promise.all(filteredOffers.map(offer => this.mapOffer(offer)));\n  }\n\n  /**\n   * Get all valid offers\n   *\n   * @example\n   * ```javascript\n   * const offers = await contract.offers.getAllValid();\n   * ```\n   *\n   * @param filter - optional filter parameters\n   * @returns the Offer object array\n   * @twfeature Offers\n   */\n  async getAllValid(filter) {\n    const totalOffers = await this.getTotalCount();\n    const start = BigNumber.from(filter?.start || 0).toNumber();\n    const end = totalOffers.toNumber();\n    if (end === 0) {\n      throw new Error(`No offers exist on the contract.`);\n    }\n    let rawOffers = [];\n    const batches = await getAllInBatches(start, end, (startId, endId) => this.contractWrapper.read(\"getAllValidOffers\", [startId, endId]));\n    rawOffers = batches.flat();\n    const filteredOffers = await this.applyFilter(rawOffers, filter);\n    return await Promise.all(filteredOffers.map(offer => this.mapOffer(offer)));\n  }\n\n  /**\n   * Get a single offer\n   *\n   * @example\n   * ```javascript\n   * const offerId = 0;\n   * const offer = await contract.offers.getOffer(offerId);\n   * ```\n   *\n   * @param offerId - the listing id\n   * @returns the Direct listing object\n   * @twfeature Offers\n   */\n  async getOffer(offerId) {\n    const offer = await this.contractWrapper.read(\"getOffer\", [offerId]);\n    return await this.mapOffer(offer);\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Make an offer\n   *\n   * @remarks Make an offer on the marketplace for an asset.\n   *\n   * @example\n   * ```javascript\n   * // Data of the offer you want to make\n   * const offer = {\n   *   // address of the contract the asset you want to make an offer for\n   *   assetContractAddress: \"0x...\",\n   *   // token ID of the asset you want to buy\n   *   tokenId: \"0\",\n   *   // how many of the asset you want to buy\n   *   quantity: 1,\n   *   // address of the currency contract that you offer to pay in\n   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n   *   // Total price you offer to pay for the mentioned token(s)\n   *   totalPrice: \"1.5\",\n   *   // Offer valid until\n   *   endTimestamp: new Date(),\n   * }\n   *\n   * const tx = await contract.offers.makeOffer(offer);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const id = tx.id; // the id of the newly created offer\n   * ```\n   * @param offer - the offer data\n   * @returns the transaction receipt and the id of the newly created offer\n   * @twfeature Offers\n   */\n  makeOffer = /* @__PURE__ */buildTransactionFunction(async offer => {\n    const parsedOffer = await OfferInputParamsSchema.parseAsync(offer);\n    const chainId = await this.contractWrapper.getChainID();\n    const currency = isNativeToken(parsedOffer.currencyContractAddress) ? NATIVE_TOKENS[chainId].wrapped.address : parsedOffer.currencyContractAddress;\n    const normalizedTotalPrice = await normalizePriceValue(this.contractWrapper.getProvider(), parsedOffer.totalPrice, currency);\n    const overrides = await this.contractWrapper.getCallOverrides();\n    await setErc20Allowance(this.contractWrapper, normalizedTotalPrice, currency, overrides);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"makeOffer\",\n      args: [{\n        assetContract: parsedOffer.assetContractAddress,\n        tokenId: parsedOffer.tokenId,\n        quantity: parsedOffer.quantity,\n        currency: currency,\n        totalPrice: normalizedTotalPrice,\n        expirationTimestamp: parsedOffer.endTimestamp\n      }],\n      parse: receipt => {\n        const event = this.contractWrapper.parseLogs(\"NewOffer\", receipt?.logs);\n        return {\n          id: event[0].args.offerId,\n          receipt\n        };\n      }\n    });\n  });\n\n  /**\n   * Cancel an offer\n   *\n   * @remarks Cancel an offer on the marketplace\n   *\n   * @example\n   * ```javascript\n   * // The ID of the offer you want to cancel\n   * const offerId = \"0\";\n   *\n   * await contract.offers.cancelOffer(offerId);\n   * ```\n   * @param offerId - the offer id\n   * @returns the transaction receipt\n   * @twfeature Offers\n   */\n  cancelOffer = /* @__PURE__ */buildTransactionFunction(async offerId => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"cancelOffer\",\n      args: [offerId]\n    });\n  });\n\n  /**\n   * Accept an offer\n   *\n   * @example\n   * ```javascript\n   * // The ID of the offer you want to accept\n   * const offerId = 0;\n   *\n   * await contract.offers.acceptOffer(offerId);\n   * ```\n   *\n   * @param offerId - The offer id\n   * @returns the transaction receipt\n   * @twfeature Offers\n   */\n  acceptOffer = /* @__PURE__ */buildTransactionFunction(async offerId => {\n    const offer = await this.validateOffer(BigNumber.from(offerId));\n    const {\n      valid,\n      error\n    } = await this.isStillValidOffer(offer);\n    if (!valid) {\n      throw new Error(`Offer ${offerId} is no longer valid. ${error}`);\n    }\n    const overrides = (await this.contractWrapper.getCallOverrides()) || {};\n    await handleTokenApproval(this.contractWrapper, this.getAddress(), offer.assetContractAddress, offer.tokenId, await this.contractWrapper.getSignerAddress());\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"acceptOffer\",\n      args: [offerId],\n      overrides\n    });\n  });\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  /**\n   * Throws error if offer could not be found\n   *\n   * @param offerId - offer to check for\n   */\n  async validateOffer(offerId) {\n    try {\n      return await this.getOffer(offerId);\n    } catch (err) {\n      console.error(`Error getting the offer with id ${offerId}`);\n      throw err;\n    }\n  }\n\n  /**\n   * Helper method maps the offer to the offer interface.\n   *\n   * @internal\n   * @param offer - The offer to map, as returned from the contract.\n   * @returns - The mapped interface.\n   */\n  async mapOffer(offer) {\n    let status = Status.UNSET;\n    const block = await this.contractWrapper.getProvider().getBlock(\"latest\");\n    const blockTime = block.timestamp;\n    switch (offer.status) {\n      case 1:\n        status = BigNumber.from(offer.expirationTimestamp).lt(blockTime) ? Status.Expired : Status.Active;\n        break;\n      case 2:\n        status = Status.Completed;\n        break;\n      case 3:\n        status = Status.Cancelled;\n        break;\n    }\n    return {\n      id: offer.offerId.toString(),\n      offerorAddress: offer.offeror,\n      assetContractAddress: offer.assetContract,\n      currencyContractAddress: offer.currency,\n      tokenId: offer.tokenId.toString(),\n      quantity: offer.quantity.toString(),\n      totalPrice: offer.totalPrice.toString(),\n      currencyValue: await fetchCurrencyValue(this.contractWrapper.getProvider(), offer.currency, offer.totalPrice),\n      asset: await fetchTokenMetadataForContract(offer.assetContract, this.contractWrapper.getProvider(), offer.tokenId, this.storage),\n      endTimeInSeconds: BigNumber.from(offer.expirationTimestamp).toNumber(),\n      status: status\n    };\n  }\n\n  /**\n   * Use this method to check if an offer is still valid.\n   *\n   * Ways an offer can become invalid:\n   * 1. The offer has expired\n   * 2. The offeror doesn't have enough balance of currency tokens\n   * 3. The offeror removed the approval of currency tokens on the marketplace\n   *\n   * @internal\n   * @param offer - The offer to check.\n   * @returns - True if the offer is valid, false otherwise.\n   */\n  async isStillValidOffer(offer) {\n    const now = BigNumber.from(Math.floor(Date.now() / 1000));\n    if (now.gt(offer.endTimeInSeconds)) {\n      return {\n        valid: false,\n        error: `Offer with ID ${offer.id} has expired`\n      };\n    }\n    const chainId = await this.contractWrapper.getChainID();\n    const currency = isNativeToken(offer.currencyContractAddress) ? NATIVE_TOKENS[chainId].wrapped.address : offer.currencyContractAddress;\n    const provider = this.contractWrapper.getProvider();\n    const erc20 = new ContractWrapper(provider, currency, ERC20Abi, {}, this.storage);\n    const offerorBalance = await erc20.read(\"balanceOf\", [offer.offerorAddress]);\n    if (offerorBalance.lt(offer.totalPrice)) {\n      return {\n        valid: false,\n        error: `Offeror ${offer.offerorAddress} doesn't have enough balance of token ${currency}`\n      };\n    }\n    const offerorAllowance = await erc20.read(\"allowance\", [offer.offerorAddress, this.getAddress()]);\n    if (offerorAllowance.lt(offer.totalPrice)) {\n      return {\n        valid: false,\n        error: `Offeror ${offer.offerorAddress} hasn't approved enough amount of token ${currency}`\n      };\n    }\n    return {\n      valid: true,\n      error: \"\"\n    };\n  }\n  async applyFilter(offers, filter) {\n    let rawOffers = [...offers];\n    if (filter) {\n      if (filter.offeror) {\n        const resolvedOfferor = await resolveAddress(filter.offeror);\n        rawOffers = rawOffers.filter(offeror => offeror.offeror.toString().toLowerCase() === resolvedOfferor?.toString().toLowerCase());\n      }\n      if (filter.tokenContract) {\n        const resolvedToken = await resolveAddress(filter.tokenContract);\n        rawOffers = rawOffers.filter(tokenContract => tokenContract.assetContract.toString().toLowerCase() === resolvedToken?.toString().toLowerCase());\n      }\n      if (filter.tokenId !== undefined) {\n        rawOffers = rawOffers.filter(tokenContract => tokenContract.tokenId.toString() === filter?.tokenId?.toString());\n      }\n    }\n    return filter?.count && filter.count < rawOffers.length ? rawOffers.slice(0, filter.count) : rawOffers;\n  }\n}\n\n/**\n * Handle platform fees and recipients\n * @remarks Configure platform fees for a contract, which can be applied on certain paid transactions\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const feeInfo = await contract.platformFees.get();\n * await contract.platformFees.set({\n *   platform_fee_basis_points: 100, // 1% fee\n *   platform_fee_recipient: \"0x...\" // the fee recipient\n * })\n * ```\n * @public\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars -- TO BE REMOVED IN V4\nclass ContractPlatformFee {\n  featureName = FEATURE_PLATFORM_FEE.name;\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Get the platform fee recipient and basis points\n   *\n   * @example\n   * ```javascript\n   * const feeInfo = await contract.platformFees.get();\n   * console.log(feeInfo.platform_fee_recipient);\n   * console.log(feeInfo.platform_fee_basis_points);\n   * ```\n   * @twfeature PlatformFee\n   */\n  async get() {\n    const [platformFeeRecipient, platformFeeBps] = await this.contractWrapper.read(\"getPlatformFeeInfo\", []);\n    return CommonPlatformFeeSchema.parseAsync({\n      platform_fee_recipient: platformFeeRecipient,\n      platform_fee_basis_points: platformFeeBps\n    });\n  }\n\n  /**\n   * Set the platform fee recipient and basis points\n   *\n   * @example\n   * ```javascript\n   * await contract.platformFees.set({\n   *   platform_fee_basis_points: 100, // 1% fee\n   *   platform_fee_recipient: \"0x...\" // the fee recipient\n   * })\n   * ```\n   *\n   * @param platformFeeInfo - the platform fee information\n   * @twfeature PlatformFee\n   */\n  set = /* @__PURE__ */buildTransactionFunction(async platformFeeInfo => {\n    const parsed = await CommonPlatformFeeSchema.parseAsync(platformFeeInfo);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"setPlatformFeeInfo\",\n      args: [parsed.platform_fee_recipient, parsed.platform_fee_basis_points]\n    });\n  });\n}\n\n/**\n * @internal\n * @param abi\n * @param metadata\n */\nfunction extractEventsFromAbi(abi, metadata) {\n  const parsedAbi = AbiSchema.parse(abi || []);\n  const events = parsedAbi.filter(el => el.type === \"event\");\n  const parsed = [];\n  for (const e of events) {\n    const doc = extractCommentFromMetadata(e.name, metadata, \"events\");\n    parsed.push({\n      inputs: e.inputs || [],\n      outputs: e.outputs || [],\n      name: e.name || \"unknown\",\n      comment: doc\n    });\n  }\n  return parsed;\n}\n\n/**\n * Handles publish metadata for a contract\n * @internal\n */ // eslint-disable-next-line @typescript-eslint/no-unused-vars -- TO BE REMOVED IN V4\nclass ContractPublishedMetadata {\n  constructor(contractWrapper, storage) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n  }\n\n  /**\n   * Get the published metadata for this contract\n   * @public\n   */\n  async get() {\n    if (this._cachedMetadata) {\n      return this._cachedMetadata;\n    }\n    this._cachedMetadata = await fetchContractMetadataFromAddress(this.contractWrapper.address, this.contractWrapper.getProvider(), this.storage, this.contractWrapper.options);\n    return this._cachedMetadata;\n  }\n\n  /**\n   * @public\n   */\n  async extractFunctions() {\n    let publishedMetadata;\n    try {\n      publishedMetadata = await this.get();\n    } catch (e) {\n      // ignore for built-in contracts\n    }\n    // to construct a contract we already **have** to have the abi on the contract wrapper, so there is no reason to look fetch it again (means this function can become synchronous as well!)\n    return extractFunctionsFromAbi(AbiSchema.parse(this.contractWrapper.abi), publishedMetadata?.metadata);\n  }\n\n  /**\n   * @public\n   */\n  async extractEvents() {\n    let publishedMetadata;\n    try {\n      publishedMetadata = await this.get();\n    } catch (e) {\n      // ignore for built-in contracts\n    }\n    // to construct a contract we already **have** to have the abi on the contract wrapper, so there is no reason to look fetch it again (means this function can become synchronous as well!)\n    return extractEventsFromAbi(AbiSchema.parse(this.contractWrapper.abi), publishedMetadata?.metadata);\n  }\n}\n\n/**\n * Encodes and decodes Contract functions\n * @public\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars -- TO BE REMOVED IN V4\nclass ContractOwner {\n  featureName = FEATURE_OWNER.name;\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Get the current owner of the contract\n   * @example\n   * ```javascript\n   * await contract.owner.get();\n   * console.log(\"Owner address: \", ownerAddress);\n   * ```\n   * @returns the owner address\n   * @twfeature Ownable\n   */\n  async get() {\n    return this.contractWrapper.read(\"owner\", []);\n  }\n\n  /**\n   * Set the new owner of the contract\n   * @remarks Can only be called by the current owner.\n   *\n   * @param address - the address of the new owner\n   *\n   * @example\n   * ```javascript\n   * const newOwnerAddress = \"{{wallet_address}}\";\n   * await contract.owner.set(newOwnerAddress);\n   * ```\n   * @twfeature Ownable\n   */\n  set = /* @__PURE__ */buildTransactionFunction(async address => {\n    const resolvedAddress = await resolveAddress(address);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"setOwner\",\n      args: [resolvedAddress]\n    });\n  });\n}\n\n/**\n * Have an official Application URI for this contract.\n * @remarks Configure an official Application URI for this contract.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const appURI = await contract.app.get();\n * appURI = \"ipfs://some_ipfs_hash\";\n *\n * await contract.app.set(appURI)\n * ```\n * @public\n */\nclass ContractAppURI {\n  featureName = FEATURE_APPURI.name;\n  constructor(contractWrapper, metadata, storage) {\n    this.contractWrapper = contractWrapper;\n    this.metadata = metadata;\n    this.storage = storage;\n  }\n\n  /**\n   * Get App URI\n   * @returns the appURI (typically an IPFS hash)\n   * @example\n   * ```javascript\n   * const appURI = await contract.app.get();\n   * console.log(appURI) // \"ipfs://some_ipfs_hash\";\n   * ```\n   * @twfeature AppURI\n   */\n  async get() {\n    if (detectContractFeature(this.contractWrapper, \"AppURI\")) {\n      return await this.contractWrapper.read(\"appURI\", []);\n    }\n    return replaceGatewayUrlWithScheme((await this.metadata.get()).app_uri || \"\", this.storage.getGatewayUrls());\n  }\n\n  /**\n   * Set App URI\n   * @param appURI - the uri to set (typically an IPFS hash)\n   * @example\n   * ```javascript\n   * const appURI = \"ipfs://some_ipfs_hash\";\n   * await contract.app.set(appURI);\n   * ```\n   * @twfeature AppURI\n   */\n  set = /* @__PURE__ */buildTransactionFunction(async appURI => {\n    if (detectContractFeature(this.contractWrapper, \"AppURI\")) {\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"setAppURI\",\n        args: [appURI]\n      });\n    }\n    return await this.metadata.update.prepare({\n      app_uri: appURI\n    });\n  });\n}\n\n/**\n * @internal\n */\nasync function extractConstructorParams(predeployMetadataUri, storage) {\n  const meta = await fetchPreDeployMetadata(predeployMetadataUri, storage);\n  return extractConstructorParamsFromAbi(meta.abi);\n}\n\n/**\n * @internal\n * @param predeployMetadataUri\n * @param storage\n */\nasync function extractFunctions(predeployMetadataUri, storage) {\n  const metadata = await fetchPreDeployMetadata(predeployMetadataUri, storage);\n  return extractFunctionsFromAbi(metadata.abi, metadata.metadata);\n}\n\nfunction getFunctionSignature(fnInputs) {\n  return \"(\" + fnInputs.map(i => {\n    return i.type === \"tuple\" ? getFunctionSignature(i.components) : i.type === \"tuple[]\" ? getFunctionSignature(i.components) + `[]` : i.type;\n  }).join(\",\") + \")\";\n}\nfunction generatePluginFunctions(pluginAddress, pluginAbi) {\n  const pluginInterface = new utils.Interface(pluginAbi);\n  const pluginFunctions = [];\n  // TODO - filter out common functions like _msgSender(), contractType(), etc.\n  for (const fnFragment of Object.values(pluginInterface.functions)) {\n    const fn = pluginInterface.getFunction(pluginInterface.getSighash(fnFragment));\n    if (fn.name.includes(\"_\")) {\n      continue;\n    }\n    pluginFunctions.push({\n      functionSelector: pluginInterface.getSighash(fn),\n      functionSignature: fn.name + getFunctionSignature(fn.inputs),\n      pluginAddress: pluginAddress\n    });\n  }\n  return pluginFunctions;\n}\nfunction generateExtensionFunctions(extensionAbi) {\n  const extensionInterface = new utils.Interface(extensionAbi);\n  const extensionFunctions = [];\n  // TODO - filter out common functions like _msgSender(), contractType(), etc.\n\n  for (const fnFragment of Object.values(extensionInterface.functions)) {\n    const fn = extensionInterface.getFunction(extensionInterface.getSighash(fnFragment));\n    if (fn.name.startsWith(\"_\")) {\n      continue;\n    }\n    extensionFunctions.push({\n      functionSelector: extensionInterface.getSighash(fn),\n      functionSignature: fn.name + getFunctionSignature(fn.inputs)\n    });\n  }\n  return extensionFunctions;\n}\n\n/**\n *\n * Returns txn data for keyless deploys as well as signer deploys.\n * Also provides a list of infra contracts to deploy.\n *\n * @internal\n *\n * @param metadataUri\n * @param storage\n * @param provider\n * @param create2Factory\n */\nasync function getDeploymentInfo(metadataUri, storage, provider, create2Factory, clientId, secretKey) {\n  caches.deploymentPresets = {};\n  const create2FactoryAddress = create2Factory ? create2Factory : await getCreate2FactoryAddress(provider);\n  const customParams = {};\n  const finalDeploymentInfo = [];\n  const {\n    compilerMetadata,\n    extendedMetadata\n  } = await fetchAndCacheDeployMetadata(metadataUri, storage);\n  const defaultExtensions = extendedMetadata?.defaultExtensions;\n  if (extendedMetadata?.routerType === \"plugin\" && defaultExtensions) {\n    invariant(clientId || secretKey, \"Require Client Id / Secret Key\");\n    const publishedExtensions = await Promise.all(defaultExtensions.map(e => {\n      return fetchPublishedContractFromPolygon(e.publisherAddress, e.extensionName, e.extensionVersion, storage, clientId, secretKey);\n    }));\n    const pluginMetadata = (await Promise.all(publishedExtensions.map(async c => {\n      return fetchAndCacheDeployMetadata(c.metadataUri, storage);\n    }))).map(fetchedMetadata => fetchedMetadata.compilerMetadata);\n\n    // get deployment info for all plugins\n    const pluginDeploymentInfo = await Promise.all(pluginMetadata.map(async metadata => {\n      const info = await computeDeploymentInfo(\"plugin\", provider, storage, create2FactoryAddress, {\n        metadata: metadata\n      }, clientId, secretKey);\n      return info;\n    }));\n\n    // create constructor param input for PluginMap\n    const mapInput = [];\n    pluginMetadata.forEach((metadata, index) => {\n      const input = generatePluginFunctions(pluginDeploymentInfo[index].transaction.predictedAddress, metadata.abi);\n      mapInput.push(...input);\n    });\n\n    // get PluginMap deployment transaction\n    const pluginMapTransaction = await computeDeploymentInfo(\"plugin\", provider, storage, create2FactoryAddress, {\n      contractName: \"PluginMap\",\n      constructorParams: {\n        _pluginsToAdd: {\n          value: mapInput\n        }\n      }\n    }, clientId, secretKey);\n\n    // address of PluginMap is input for MarketplaceV3's constructor\n    customParams[\"_pluginMap\"] = {\n      value: pluginMapTransaction.transaction.predictedAddress\n    };\n    finalDeploymentInfo.push(...pluginDeploymentInfo, pluginMapTransaction);\n  } else if (extendedMetadata?.routerType === \"dynamic\" && defaultExtensions) {\n    invariant(clientId || secretKey, \"Require Client Id / Secret Key\");\n    const publishedExtensions = await Promise.all(defaultExtensions.map(e => {\n      return fetchPublishedContractFromPolygon(e.publisherAddress, e.extensionName, e.extensionVersion, storage, clientId, secretKey);\n    }));\n    const extensionMetadata = (await Promise.all(publishedExtensions.map(async c => {\n      return fetchAndCacheDeployMetadata(c.metadataUri, storage);\n    }))).map(fetchedMetadata => fetchedMetadata.compilerMetadata);\n\n    // get deployment info for all extensions\n    const extensionDeploymentInfo = await Promise.all(extensionMetadata.map(async metadata => {\n      const info = await computeDeploymentInfo(\"extension\", provider, storage, create2FactoryAddress, {\n        metadata: metadata\n      }, clientId, secretKey);\n      return info;\n    }));\n\n    // create constructor param input for BaseRouter\n    const routerInput = [];\n    extensionMetadata.forEach((metadata, index) => {\n      const extensionFunctions = generateExtensionFunctions(metadata.abi);\n      routerInput.push({\n        metadata: {\n          name: metadata.name,\n          metadataURI: \"\",\n          implementation: extensionDeploymentInfo[index].transaction.predictedAddress\n        },\n        functions: extensionFunctions\n      });\n    });\n\n    // routerInput as constructor param for BaseRouter\n    customParams[\"_extensions\"] = {\n      value: routerInput\n    };\n    finalDeploymentInfo.push(...extensionDeploymentInfo);\n  }\n  const implementationDeployInfo = await computeDeploymentInfo(\"implementation\", provider, storage, create2FactoryAddress, {\n    metadata: compilerMetadata,\n    constructorParams: customParams\n  }, clientId, secretKey);\n\n  // get clone factory\n  const factoryInfo = await computeDeploymentInfo(\"infra\", provider, storage, create2FactoryAddress, {\n    contractName: \"TWCloneFactory\"\n  }, clientId, secretKey);\n  finalDeploymentInfo.push(factoryInfo);\n  finalDeploymentInfo.push(...Object.values(caches.deploymentPresets));\n  finalDeploymentInfo.push(implementationDeployInfo);\n  return finalDeploymentInfo;\n}\n\n/**\n * Deploy a contract at a deterministic address, using Create2 method\n * Address depends on the Create2 factory address.\n *\n * @public\n *\n * @param signer\n * @param bytecode\n * @param encodedArgs\n * @param create2FactoryAddress\n */\nasync function deployContractDeterministic(signer, transaction, options) {\n  let gasLimit = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 7000000;\n  // Check if the implementation contract is already deployed\n  invariant(signer.provider, \"Provider required\");\n  const contractDeployed = await isContractDeployed(transaction.predictedAddress, signer.provider);\n  if (!contractDeployed) {\n    console.debug(`deploying contract via create2 factory at: ${transaction.predictedAddress}`);\n    const tx = {\n      to: transaction.to,\n      data: transaction.data\n    };\n    try {\n      await signer.estimateGas(tx);\n    } catch (e) {\n      console.debug(\"error estimating gas while deploying prebuilt: \", e);\n      tx.gasLimit = BigNumber.from(gasLimit);\n    }\n    options?.notifier?.(\"deploying\", \"preset\");\n    await (await signer.sendTransaction(tx)).wait();\n    options?.notifier?.(\"deployed\", \"preset\");\n  }\n}\n\nfunction estimateGasForDeploy(initCode) {\n  let gasLimit = utils.arrayify(initCode).map(x => x === 0 ? 4 : 16).reduce((sum, x) => sum + x) + 200 * initCode.length / 2 + 6 * Math.ceil(initCode.length / 64) + 32000 + 21000;\n  gasLimit = Math.floor(gasLimit * 64 / 63);\n  return gasLimit;\n}\n\nfunction createTransactionBatches(transactions) {\n  let upperGasLimit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : GAS_LIMIT_FOR_DEPLOYER;\n  transactions = transactions.filter(tx => {\n    return tx.data.length > 0;\n  });\n  if (transactions.length === 0) {\n    return [];\n  }\n  const transactionBatches = [];\n  let sum = 0;\n  let batch = [];\n  transactions.forEach(tx => {\n    const gas = estimateGasForDeploy(tx.data);\n    if (sum + gas > upperGasLimit) {\n      if (batch.length === 0) {\n        transactionBatches.push([tx]);\n      } else {\n        transactionBatches.push(batch);\n        sum = gas;\n        batch = [tx];\n      }\n    } else {\n      sum += gas;\n      batch.push(tx);\n    }\n  });\n  if (batch.length > 0) {\n    transactionBatches.push(batch);\n  }\n  return transactionBatches;\n}\n\nasync function deployWithThrowawayDeployer(signer, transactions, options) {\n  const transactionBatches = createTransactionBatches(transactions);\n  if (transactionBatches.length === 0) {\n    return;\n  }\n  options?.notifier?.(\"deploying\", \"infra\");\n  const deployTxns = await Promise.all(transactionBatches.map(txBatch => {\n    // Using the deployer contract, send the deploy transactions to common factory with a signer\n    const deployer = new ContractFactory(DEPLOYER_ABI, DEPLOYER_BYTECODE).connect(signer).deploy(txBatch);\n    return deployer;\n  }));\n  await Promise.all(deployTxns.map(tx => {\n    return tx.deployed();\n  }));\n  options?.notifier?.(\"deployed\", \"infra\");\n}\n\nasync function getCompositeABIfromRelease(publishMetadataUri, storage) {\n  const {\n    extendedMetadata\n  } = await fetchAndCacheDeployMetadata(publishMetadataUri, storage);\n  const compositeAbi = extendedMetadata?.compositeAbi || [];\n  return compositeAbi;\n}\n\n/**\n * @internal\n */\nasync function getPluginABI(addresses, provider, storage) {\n  return (await Promise.all(addresses.map(address => fetchContractMetadataFromAddress(address, provider, storage).catch(err => {\n    console.error(`Failed to fetch plug-in for ${address}`, err);\n    return {\n      abi: []\n    };\n  })))).map(metadata => metadata.abi);\n}\n\n/**\n * @internal\n */\nasync function getCompositePluginABI(address, abi, provider, options, storage) {\n  let pluginABIs = [];\n  try {\n    // check if contract is plugin-pattern\n    const isPluginRouter = isFeatureEnabled(AbiSchema.parse(abi), \"PluginRouter\");\n    const isbaseRouter = isFeatureEnabled(AbiSchema.parse(abi), \"DynamicContract\");\n    if (isbaseRouter) {\n      const contract = new ContractWrapper(provider, address, getAllExtensionsAbi, options, storage);\n      const plugins = await contract.call(\"getAllExtensions\");\n\n      // get extension addresses\n      const pluginAddresses = plugins.map(item => item.metadata.implementation);\n\n      // get ABIs of extension contracts --\n      pluginABIs = await getPluginABI(pluginAddresses, provider, storage);\n    } else if (isPluginRouter) {\n      const contract = new ContractWrapper(provider, address, getAllPluginsAbi, options, storage);\n      const pluginMap = await contract.call(\"getAllPlugins\");\n\n      // get extension addresses\n      const allPlugins = pluginMap.map(item => item.pluginAddress);\n      const plugins = Array.from(new Set(allPlugins));\n\n      // get ABIs of extension contracts\n      pluginABIs = await getPluginABI(plugins, provider, storage);\n    }\n  } catch (err) {}\n  return pluginABIs.length > 0 ? joinABIs([abi, ...pluginABIs]) : abi;\n}\n\nconst DropErc20ContractInput = /* @__PURE__ */CommonContractSchema.merge(MerkleSchema).merge(CommonSymbolSchema);\nconst DropErc20ContractOutput = /* @__PURE__ */CommonContractOutputSchema.merge(MerkleSchema).merge(CommonSymbolSchema);\nconst DropErc20ContractDeploy = /* @__PURE__ */DropErc20ContractInput.merge(CommonPlatformFeeSchema).merge(CommonPrimarySaleSchema).merge(CommonTrustedForwarderSchema);\nconst DropErc20ContractSchema = {\n  deploy: DropErc20ContractDeploy,\n  output: DropErc20ContractOutput,\n  input: DropErc20ContractInput\n};\n\nconst MultiwrapContractInput = /* @__PURE__ */CommonContractSchema.merge(CommonRoyaltySchema).merge(CommonSymbolSchema);\nconst MultiwrapContractOutput = /* @__PURE__ */CommonContractOutputSchema.merge(CommonRoyaltySchema).merge(CommonSymbolSchema);\nconst MultiwrapContractDeploy = /* @__PURE__ */MultiwrapContractInput.merge(CommonTrustedForwarderSchema);\nconst MultiwrapContractSchema = {\n  deploy: MultiwrapContractDeploy,\n  output: MultiwrapContractOutput,\n  input: MultiwrapContractInput\n};\n\nconst ADMIN_ROLE = [\"admin\"];\nconst NFT_BASE_CONTRACT_ROLES = [\"admin\", \"minter\", \"transfer\"];\nconst MARKETPLACE_CONTRACT_ROLES = [\"admin\", \"lister\", \"asset\"];\nconst PACK_CONTRACT_ROLES = [\"admin\", \"minter\", \"asset\", \"transfer\"];\nconst TOKEN_DROP_CONTRACT_ROLES = [\"admin\", \"transfer\"];\nconst MULTIWRAP_CONTRACT_ROLES = [\"admin\", \"transfer\", \"minter\", \"unwrap\", \"asset\"];\n\nconst prebuiltContractTypes = {\n  vote: \"vote\",\n  token: \"token\",\n  \"edition-drop\": \"edition-drop\",\n  edition: \"edition\",\n  marketplace: \"marketplace\",\n  \"marketplace-v3\": \"marketplace-v3\",\n  multiwrap: \"multiwrap\",\n  \"nft-collection\": \"nft-collection\",\n  \"nft-drop\": \"nft-drop\",\n  pack: \"pack\",\n  \"signature-drop\": \"signature-drop\",\n  split: \"split\",\n  \"token-drop\": \"token-drop\"\n};\nconst EditionDropInitializer = {\n  name: \"DropERC1155\",\n  contractType: prebuiltContractTypes[\"edition-drop\"],\n  schema: DropErc1155ContractSchema,\n  roles: NFT_BASE_CONTRACT_ROLES,\n  initialize: async function () {\n    for (var _len = arguments.length, _ref = new Array(_len), _key = 0; _key < _len; _key++) {\n      _ref[_key] = arguments[_key];\n    }\n    let [network, address, storage, options] = _ref;\n    const [, provider] = getSignerAndProvider(network, options);\n    const [abi, contract, _network] = await Promise.all([EditionDropInitializer.getAbi(address, provider, storage), import('./edition-drop-24708d00.browser.esm.js'), provider.getNetwork()]);\n    return new contract.EditionDrop(network, address, storage, options, abi, _network.chainId);\n  },\n  getAbi: async (address, provider, storage) => {\n    const abi = await fetchAbiFromAddress(address, provider, storage);\n    if (abi) {\n      return abi;\n    }\n    // Deprecated - only needed for backwards compatibility with non-published contracts - should remove in v4\n    const contractInfo = await getContractInfo(address, provider);\n    return !contractInfo || contractInfo.version > 2 ? (await import('@thirdweb-dev/contracts-js/dist/abis/DropERC1155.json')).default : (await import('@thirdweb-dev/contracts-js/dist/abis/DropERC1155_V2.json')).default;\n  }\n};\nconst EditionInitializer = {\n  name: \"TokenERC1155\",\n  contractType: prebuiltContractTypes[\"edition\"],\n  schema: TokenErc1155ContractSchema,\n  roles: NFT_BASE_CONTRACT_ROLES,\n  initialize: async function () {\n    for (var _len2 = arguments.length, _ref2 = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      _ref2[_key2] = arguments[_key2];\n    }\n    let [network, address, storage, options] = _ref2;\n    const [, provider] = getSignerAndProvider(network, options);\n    const [abi, contract, _network] = await Promise.all([EditionInitializer.getAbi(address, provider, storage), import('./edition-b3122b64.browser.esm.js'), provider.getNetwork()]);\n    return new contract.Edition(network, address, storage, options, abi, _network.chainId);\n  },\n  getAbi: async (address, provider, storage) => {\n    const abi = await fetchAbiFromAddress(address, provider, storage);\n    if (abi) {\n      return abi;\n    }\n    // Deprecated - only needed for backwards compatibility with non-published contracts - should remove in v4\n    return (await import('@thirdweb-dev/contracts-js/dist/abis/TokenERC1155.json')).default;\n  }\n};\nconst MarketplaceInitializer = {\n  name: \"Marketplace\",\n  contractType: prebuiltContractTypes.marketplace,\n  schema: MarketplaceContractSchema,\n  roles: MARKETPLACE_CONTRACT_ROLES,\n  initialize: async function () {\n    for (var _len3 = arguments.length, _ref3 = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      _ref3[_key3] = arguments[_key3];\n    }\n    let [network, address, storage, options] = _ref3;\n    const [, provider] = getSignerAndProvider(network, options);\n    const [abi, contract, _network] = await Promise.all([MarketplaceInitializer.getAbi(address, provider, storage), import('./marketplace-5b738c1b.browser.esm.js'), provider.getNetwork()]);\n    return new contract.Marketplace(network, address, storage, options, abi, _network.chainId);\n  },\n  getAbi: async (address, provider, storage) => {\n    const abi = await fetchAbiFromAddress(address, provider, storage);\n    if (abi) {\n      return abi;\n    }\n\n    // Deprecated - only needed for backwards compatibility with non-published contracts - should remove in v4\n    return (await import('@thirdweb-dev/contracts-js/dist/abis/Marketplace.json')).default;\n  }\n};\nconst MarketplaceV3Initializer = {\n  name: \"MarketplaceV3\",\n  contractType: prebuiltContractTypes[\"marketplace-v3\"],\n  schema: MarketplaceContractSchema,\n  roles: MARKETPLACE_CONTRACT_ROLES,\n  initialize: async function () {\n    for (var _len4 = arguments.length, _ref4 = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      _ref4[_key4] = arguments[_key4];\n    }\n    let [network, address, storage, options] = _ref4;\n    const [, provider] = getSignerAndProvider(network, options);\n    const [abi, contract, _network] = await Promise.all([MarketplaceV3Initializer.getAbi(address, provider, storage, options), import('./marketplacev3-e02b24ac.browser.esm.js'), provider.getNetwork()]);\n    return new contract.MarketplaceV3(network, address, storage, options, abi, _network.chainId);\n  },\n  getAbi: async (address, provider, storage, options) => {\n    const chainId = (await provider.getNetwork()).chainId;\n    const isZkSync = chainId === 280 || chainId === 324;\n\n    // Can't resolve IPFS hash from plugin bytecode on ZkSync\n    // Thus, pull the composite ABI from the release page\n    if (isZkSync) {\n      const publishedContract = await fetchPublishedContractFromPolygon(THIRDWEB_DEPLOYER, \"MarketplaceV3\", \"latest\", storage, options?.clientId, options?.secretKey);\n      const uri = publishedContract.metadataUri;\n      const compositeAbi = await getCompositeABIfromRelease(uri, storage);\n      return compositeAbi;\n    }\n    const abi = await fetchAbiFromAddress(address, provider, storage);\n    if (abi) {\n      return await getCompositePluginABI(address, abi, provider, {}, storage);\n    }\n\n    // Deprecated - only needed for backwards compatibility with non-published contracts - should remove in v4\n    const localAbi = (await import('@thirdweb-dev/contracts-js/dist/abis/MarketplaceV3.json')).default;\n    return await getCompositePluginABI(address, AbiSchema.parse(localAbi || []), provider, {}, storage);\n  }\n};\nconst MultiwrapInitializer = {\n  name: \"Multiwrap\",\n  contractType: prebuiltContractTypes.multiwrap,\n  schema: MultiwrapContractSchema,\n  roles: MULTIWRAP_CONTRACT_ROLES,\n  initialize: async function () {\n    for (var _len5 = arguments.length, _ref5 = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n      _ref5[_key5] = arguments[_key5];\n    }\n    let [network, address, storage, options] = _ref5;\n    const [, provider] = getSignerAndProvider(network, options);\n    const [abi, contract, _network] = await Promise.all([MultiwrapInitializer.getAbi(address, provider, storage), import('./multiwrap-18fab528.browser.esm.js'), provider.getNetwork()]);\n    return new contract.Multiwrap(network, address, storage, options, abi, _network.chainId);\n  },\n  getAbi: async (address, provider, storage) => {\n    const abi = await fetchAbiFromAddress(address, provider, storage);\n    if (abi) {\n      return abi;\n    }\n    // Deprecated - only needed for backwards compatibility with non-published contracts - should remove in v4\n    return (await import('@thirdweb-dev/contracts-js/dist/abis/Multiwrap.json')).default;\n  }\n};\nconst NFTCollectionInitializer = {\n  name: \"TokenERC721\",\n  contractType: prebuiltContractTypes[\"nft-collection\"],\n  schema: TokenErc721ContractSchema,\n  roles: NFT_BASE_CONTRACT_ROLES,\n  initialize: async function () {\n    for (var _len6 = arguments.length, _ref6 = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n      _ref6[_key6] = arguments[_key6];\n    }\n    let [network, address, storage, options] = _ref6;\n    const [, provider] = getSignerAndProvider(network, options);\n    const [abi, contract, _network] = await Promise.all([NFTCollectionInitializer.getAbi(address, provider, storage), import('./nft-collection-0cf43f4d.browser.esm.js'), provider.getNetwork()]);\n    return new contract.NFTCollection(network, address, storage, options, abi, _network.chainId);\n  },\n  getAbi: async (address, provider, storage) => {\n    const abi = await fetchAbiFromAddress(address, provider, storage);\n    if (abi) {\n      return abi;\n    }\n    // Deprecated - only needed for backwards compatibility with non-published contracts - should remove in v4\n    return (await import('@thirdweb-dev/contracts-js/dist/abis/TokenERC721.json')).default;\n  }\n};\nconst NFTDropInitializer = {\n  name: \"DropERC721\",\n  contractType: prebuiltContractTypes[\"nft-drop\"],\n  schema: DropErc721ContractSchema,\n  roles: NFT_BASE_CONTRACT_ROLES,\n  initialize: async function () {\n    for (var _len7 = arguments.length, _ref7 = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n      _ref7[_key7] = arguments[_key7];\n    }\n    let [network, address, storage, options] = _ref7;\n    const [, provider] = getSignerAndProvider(network, options);\n    const [abi, contract, _network] = await Promise.all([NFTDropInitializer.getAbi(address, provider, storage), import('./nft-drop-399edfe0.browser.esm.js'), provider.getNetwork()]);\n    return new contract.NFTDrop(network, address, storage, options, abi, _network.chainId);\n  },\n  getAbi: async (address, provider, storage) => {\n    const abi = await fetchAbiFromAddress(address, provider, storage);\n    if (abi) {\n      return abi;\n    }\n    // Deprecated - only needed for backwards compatibility with non-published contracts - should remove in v4\n    const contractInfo = await getContractInfo(address, provider);\n    return !contractInfo || contractInfo.version > 3 ? (await import('@thirdweb-dev/contracts-js/dist/abis/DropERC721.json')).default : (await import('@thirdweb-dev/contracts-js/dist/abis/DropERC721_V3.json')).default;\n  }\n};\nconst PackInitializer = {\n  name: \"Pack\",\n  contractType: prebuiltContractTypes[\"pack\"],\n  schema: PackContractSchema,\n  roles: PACK_CONTRACT_ROLES,\n  initialize: async function () {\n    for (var _len8 = arguments.length, _ref8 = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n      _ref8[_key8] = arguments[_key8];\n    }\n    let [network, address, storage, options] = _ref8;\n    const [, provider] = getSignerAndProvider(network, options);\n    const [abi, contract, _network] = await Promise.all([PackInitializer.getAbi(address, provider, storage), import('./pack-bd61f578.browser.esm.js'), provider.getNetwork()]);\n    return new contract.Pack(network, address, storage, options, abi, _network.chainId);\n  },\n  getAbi: async (address, provider, storage) => {\n    const abi = await fetchAbiFromAddress(address, provider, storage);\n    if (abi) {\n      return abi;\n    }\n    // Deprecated - only needed for backwards compatibility with non-published contracts - should remove in v4\n    return AbiSchema.parse((await import('@thirdweb-dev/contracts-js/dist/abis/Pack.json')).default || []);\n  }\n};\nconst SignatureDropInitializer = {\n  name: \"SignatureDrop\",\n  contractType: prebuiltContractTypes[\"signature-drop\"],\n  schema: DropErc721ContractSchema,\n  roles: NFT_BASE_CONTRACT_ROLES,\n  initialize: async function () {\n    for (var _len9 = arguments.length, _ref9 = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n      _ref9[_key9] = arguments[_key9];\n    }\n    let [network, address, storage, options] = _ref9;\n    const [, provider] = getSignerAndProvider(network, options);\n    const [abi, contract, _network] = await Promise.all([SignatureDropInitializer.getAbi(address, provider, storage), import('./signature-drop-224b723c.browser.esm.js'), provider.getNetwork()]);\n    return new contract.SignatureDrop(network, address, storage, options, abi, _network.chainId);\n  },\n  getAbi: async (address, provider, storage) => {\n    const abi = await fetchAbiFromAddress(address, provider, storage);\n    if (abi) {\n      return abi;\n    }\n    // Deprecated - only needed for backwards compatibility with non-published contracts - should remove in v4\n    const contractInfo = await getContractInfo(address, provider);\n    return !contractInfo || contractInfo.version > 4 ? (await import('@thirdweb-dev/contracts-js/dist/abis/SignatureDrop.json')).default : (await import('@thirdweb-dev/contracts-js/dist/abis/SignatureDrop_V4.json')).default;\n  }\n};\nconst SplitInitializer = {\n  name: \"Split\",\n  contractType: prebuiltContractTypes[\"split\"],\n  schema: SplitsContractSchema,\n  roles: ADMIN_ROLE,\n  initialize: async function () {\n    for (var _len10 = arguments.length, _ref10 = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {\n      _ref10[_key10] = arguments[_key10];\n    }\n    let [network, address, storage, options] = _ref10;\n    const [, provider] = getSignerAndProvider(network, options);\n    const [abi, contract, _network] = await Promise.all([SplitInitializer.getAbi(address, provider, storage), import('./split-8c412664.browser.esm.js'), provider.getNetwork()]);\n    return new contract.Split(network, address, storage, options, abi, _network.chainId);\n  },\n  getAbi: async (address, provider, storage) => {\n    const abi = await fetchAbiFromAddress(address, provider, storage);\n    if (abi) {\n      return abi;\n    }\n    // Deprecated - only needed for backwards compatibility with non-published contracts - should remove in v4\n    return (await import('@thirdweb-dev/contracts-js/dist/abis/Split.json')).default;\n  }\n};\nconst TokenDropInitializer = {\n  name: \"DropERC20\",\n  contractType: prebuiltContractTypes[\"token-drop\"],\n  schema: DropErc20ContractSchema,\n  roles: TOKEN_DROP_CONTRACT_ROLES,\n  initialize: async function () {\n    for (var _len11 = arguments.length, _ref11 = new Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {\n      _ref11[_key11] = arguments[_key11];\n    }\n    let [network, address, storage, options] = _ref11;\n    const [, provider] = getSignerAndProvider(network, options);\n    const [abi, contract, _network] = await Promise.all([TokenDropInitializer.getAbi(address, provider, storage), import('./token-drop-90cb00e6.browser.esm.js'), provider.getNetwork()]);\n    return new contract.TokenDrop(network, address, storage, options, abi, _network.chainId);\n  },\n  getAbi: async (address, provider, storage) => {\n    const abi = await fetchAbiFromAddress(address, provider, storage);\n    if (abi) {\n      return abi;\n    }\n    // Deprecated - only needed for backwards compatibility with non-published contracts - should remove in v4\n    const contractInfo = await getContractInfo(address, provider);\n    return !contractInfo || contractInfo.version > 2 ? (await import('@thirdweb-dev/contracts-js/dist/abis/DropERC20.json')).default : (await import('@thirdweb-dev/contracts-js/dist/abis/DropERC20_V2.json')).default;\n  }\n};\nconst TokenInitializer = {\n  name: \"TokenERC20\",\n  contractType: prebuiltContractTypes.token,\n  schema: TokenErc20ContractSchema,\n  roles: NFT_BASE_CONTRACT_ROLES,\n  initialize: async function () {\n    for (var _len12 = arguments.length, _ref12 = new Array(_len12), _key12 = 0; _key12 < _len12; _key12++) {\n      _ref12[_key12] = arguments[_key12];\n    }\n    let [network, address, storage, options] = _ref12;\n    const [, provider] = getSignerAndProvider(network, options);\n    const [abi, contract, _network] = await Promise.all([TokenInitializer.getAbi(address, provider, storage), import('./token-1023bf9c.browser.esm.js'), provider.getNetwork()]);\n    return new contract.Token(network, address, storage, options, abi, _network.chainId);\n  },\n  getAbi: async (address, provider, storage) => {\n    const abi = await fetchAbiFromAddress(address, provider, storage);\n    if (abi) {\n      return abi;\n    }\n    // Deprecated - only needed for backwards compatibility with non-published contracts - should remove in v4\n    return (await import('@thirdweb-dev/contracts-js/dist/abis/TokenERC20.json')).default;\n  }\n};\nconst VoteInitializer = {\n  name: \"VoteERC20\",\n  contractType: prebuiltContractTypes.vote,\n  schema: VoteContractSchema,\n  roles: [],\n  initialize: async function () {\n    for (var _len13 = arguments.length, _ref13 = new Array(_len13), _key13 = 0; _key13 < _len13; _key13++) {\n      _ref13[_key13] = arguments[_key13];\n    }\n    let [network, address, storage, options] = _ref13;\n    const [, provider] = getSignerAndProvider(network, options);\n    const [abi, contract, _network] = await Promise.all([VoteInitializer.getAbi(address, provider, storage), import('./vote-8af4ac9b.browser.esm.js'), provider.getNetwork()]);\n    return new contract.Vote(network, address, storage, options, abi, _network.chainId);\n  },\n  getAbi: async (address, provider, storage) => {\n    const abi = await fetchAbiFromAddress(address, provider, storage);\n    if (abi) {\n      return abi;\n    }\n    // Deprecated - only needed for backwards compatibility with non-published contracts - should remove in v4\n    return (await import('@thirdweb-dev/contracts-js/dist/abis/VoteERC20.json')).default;\n  }\n};\nasync function getContractInfo(address, provider) {\n  try {\n    return await getPrebuiltInfo(address, provider);\n  } catch (e) {\n    return undefined;\n  }\n}\n\n/**\n * a map from contractType -> contract metadata\n * @internal\n */\nconst PREBUILT_CONTRACTS_MAP = {\n  [prebuiltContractTypes[\"edition-drop\"]]: EditionDropInitializer,\n  [prebuiltContractTypes.edition]: EditionInitializer,\n  [prebuiltContractTypes.marketplace]: MarketplaceInitializer,\n  [prebuiltContractTypes[\"marketplace-v3\"]]: MarketplaceV3Initializer,\n  [prebuiltContractTypes.multiwrap]: MultiwrapInitializer,\n  [prebuiltContractTypes[\"nft-collection\"]]: NFTCollectionInitializer,\n  [prebuiltContractTypes[\"nft-drop\"]]: NFTDropInitializer,\n  [prebuiltContractTypes.pack]: PackInitializer,\n  [prebuiltContractTypes[\"signature-drop\"]]: SignatureDropInitializer,\n  [prebuiltContractTypes.split]: SplitInitializer,\n  [prebuiltContractTypes[\"token-drop\"]]: TokenDropInitializer,\n  [prebuiltContractTypes.token]: TokenInitializer,\n  [prebuiltContractTypes.vote]: VoteInitializer\n};\nconst PREBUILT_CONTRACTS_APPURI_MAP = {\n  [prebuiltContractTypes[\"edition-drop\"]]: \"ipfs://QmNm3wRzpKYWo1SRtJfgfxtvudp5p2nXD6EttcsQJHwTmk\",\n  [prebuiltContractTypes.edition]: \"\",\n  [prebuiltContractTypes.marketplace]: \"ipfs://QmbAgC8YwY36n8H2kuvSWsRisxDZ15QZw3xGZyk9aDvcv7/marketplace.html\",\n  [prebuiltContractTypes[\"marketplace-v3\"]]: \"ipfs://QmbAgC8YwY36n8H2kuvSWsRisxDZ15QZw3xGZyk9aDvcv7/marketplace-v3.html\",\n  [prebuiltContractTypes.multiwrap]: \"\",\n  [prebuiltContractTypes[\"nft-collection\"]]: \"\",\n  [prebuiltContractTypes[\"nft-drop\"]]: \"ipfs://QmZptmVipc6SGFbKAyXcxGgohzTwYRXZ9LauRX5ite1xDK\",\n  [prebuiltContractTypes.pack]: \"\",\n  [prebuiltContractTypes[\"signature-drop\"]]: \"ipfs://QmZptmVipc6SGFbKAyXcxGgohzTwYRXZ9LauRX5ite1xDK\",\n  [prebuiltContractTypes.split]: \"\",\n  [prebuiltContractTypes[\"token-drop\"]]: \"ipfs://QmbAgC8YwY36n8H2kuvSWsRisxDZ15QZw3xGZyk9aDvcv7/erc20.html\",\n  [prebuiltContractTypes.token]: \"\",\n  [prebuiltContractTypes.vote]: \"\"\n};\nconst SmartContract$1 = {\n  name: \"SmartContract\",\n  contractType: \"custom\",\n  schema: {},\n  roles: ALL_ROLES\n};\nconst CONTRACTS_MAP = {\n  ...PREBUILT_CONTRACTS_MAP,\n  [SmartContract$1.contractType]: SmartContract$1\n};\n\n/**\n * @internal\n */\nfunction getContractTypeForRemoteName(name) {\n  return Object.values(CONTRACTS_MAP).find(contract => contract.name === name)?.contractType || \"custom\";\n}\nfunction getContractName(type) {\n  return Object.values(CONTRACTS_MAP).find(contract => contract.contractType === type)?.name;\n}\n\nconst SignerPermissionsSchema = /* @__PURE__ */z.object({\n  startDate: StartDateSchema,\n  expirationDate: EndDateSchema,\n  nativeTokenLimitPerTransaction: /* @__PURE__ */AmountSchema.default(0),\n  approvedCallTargets: /* @__PURE__ */z.array(AddressOrEnsSchema)\n});\nconst PermissionSnapshotSchema = /* @__PURE__ */z.array( /* @__PURE__ */z.object({\n  signer: AddressOrEnsSchema,\n  makeAdmin: /* @__PURE__ */z.boolean(),\n  permissions: SignerPermissionsSchema\n}));\nconst SignerPermissionRequest = [{\n  name: \"signer\",\n  type: \"address\"\n}, {\n  name: \"approvedTargets\",\n  type: \"address[]\"\n}, {\n  name: \"nativeTokenLimitPerTransaction\",\n  type: \"uint256\"\n}, {\n  name: \"permissionStartTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"permissionEndTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"reqValidityStartTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"reqValidityEndTimestamp\",\n  type: \"uint128\"\n}, {\n  name: \"uid\",\n  type: \"bytes32\"\n}];\n\nclass AccountPermissions {\n  featureName = FEATURE_ACCOUNT_PERMISSIONS.name;\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /*********************************\n   * HELPER FUNCTIONS\n   ********************************/\n\n  hasDuplicateSigners(snapshot) {\n    const checkedSigner = {};\n    const signers = snapshot.map(item => item.signer);\n    for (const signer of signers) {\n      if (!checkedSigner[signer]) {\n        checkedSigner[signer] = true;\n      } else {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Format the access restrictions for a given role\n   *\n   * @param restrictions - The access restrictions for a given role\n   * @returns formatted role restrictions\n   *\n   */\n  parseSignerPermissionsStruct(permissions) {\n    return {\n      startDate: new Date(parseInt(permissions.startTimestamp.toString()) * 1000),\n      expirationDate: new Date(parseInt(permissions.endTimestamp.toString()) * 1000),\n      nativeTokenLimitPerTransaction: BigNumber.from(permissions.nativeTokenLimitPerTransaction),\n      approvedCallTargets: permissions.approvedTargets\n    };\n  }\n  async sendSignerPermissionRequest(signerAddress, permissions) {\n    const {\n      payload,\n      signature\n    } = await this.generatePayload(signerAddress, permissions);\n    const [success] = await this.contractWrapper.read(\"verifySignerPermissionRequest\", [payload, signature]);\n    if (!success) {\n      throw new Error(`Invalid signature.`);\n    }\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"setPermissionsForSigner\",\n      args: [payload, signature]\n    });\n  }\n  async buildSignerPermissionRequest(signerAddress, permissions) {\n    const {\n      payload,\n      signature\n    } = await this.generatePayload(signerAddress, permissions);\n    const isValidSigner = await this.contractWrapper.read(\"verifySignerPermissionRequest\", [payload, signature]);\n    if (!isValidSigner) {\n      throw new Error(`Invalid signature.`);\n    }\n    return this.contractWrapper.writeContract.interface.encodeFunctionData(\"setPermissionsForSigner\", [payload, signature]);\n  }\n\n  /**\n   * Generate and sign a payload to grant or revoke a signer's access to the account.\n   *\n   * @param signer - The address of the signer\n   * @param roleAction - The address of the signer\n   * @returns The generated payload and signature produced on signing that payload.\n   *\n   */\n  async generatePayload(signerAddress, permissions) {\n    // Get payload struct.\n    const payload = {\n      signer: signerAddress,\n      approvedTargets: permissions.approvedCallTargets,\n      nativeTokenLimitPerTransaction: utils.parseEther(permissions.nativeTokenLimitPerTransaction),\n      permissionStartTimestamp: permissions.startDate,\n      permissionEndTimestamp: permissions.expirationDate,\n      reqValidityStartTimestamp: 0,\n      // Req validity ends 10 years from now.\n      reqValidityEndTimestamp: BigNumber.from(Math.floor(new Date(Date.now() + 1000 * 60 * 60 * 24 * 365 * 10).getTime() / 1000)),\n      uid: resolveOrGenerateId(undefined)\n    };\n\n    // Generate signature\n    const chainId = await this.contractWrapper.getChainID();\n    const connectedSigner = this.contractWrapper.getSigner();\n    invariant(connectedSigner, \"No signer available\");\n    const signature = await this.contractWrapper.signTypedData(connectedSigner, {\n      name: \"Account\",\n      version: \"1\",\n      chainId,\n      verifyingContract: this.getAddress()\n    }, {\n      SignerPermissionRequest\n    }, payload);\n    return {\n      payload,\n      signature\n    };\n  }\n\n  /*********************************\n   * READ FUNCTIONS\n   ********************************/\n\n  /**\n   * Get whether a signer is an admin on the account.\n   *\n   * @example\n   * ```javascript\n   * const isAdmin = await contract.account.isAdmin(signer);\n   * ```\n   * @param signer - The address of a signer of the account.\n   * @returns whether a signer is an admin on the account.\n   *\n   * @twfeature AccountPermissions\n   */\n  async isAdmin(signerAddress) {\n    const resolvedSignerAddress = await resolveAddress(signerAddress);\n    return await this.contractWrapper.read(\"isAdmin\", [resolvedSignerAddress]);\n  }\n\n  /**\n   * Get whether a signer has permissions to use the account.\n   *\n   * @example\n   * ```javascript\n   * const isAdmin = await contract.account.isSigner(signer);\n   * ```\n   * @param signer - The address of a signer of the account.\n   * @returns whether a signer has permissions to use the account.\n   *\n   * @twfeature AccountPermissions\n   */\n  async isSigner(signerAddress) {\n    const resolvedSignerAddress = await resolveAddress(signerAddress);\n    return await this.contractWrapper.read(\"isActiveSigner\", [resolvedSignerAddress]);\n  }\n\n  /**\n   * Get all admins of the account.\n   *\n   * @example\n   * ```javascript\n   * const allAdmins = await contract.account.getAllAdmins();\n   * ```\n   *\n   * @returns all admins of the account.\n   *\n   * @twfeature AccountPermissions\n   */\n  async getAllAdmins() {\n    return await this.contractWrapper.read(\"getAllAdmins\", []);\n  }\n\n  /**\n   * Get all (non-admin) signers with permissions to use the account.\n   *\n   * @example\n   * ```javascript\n   * const allSigners = await contract.account.getAllSigners();\n   * ```\n   *\n   * @returns all (non-admin) signers with permissions to use the account.\n   *\n   * @twfeature AccountPermissions\n   */\n  async getAllSigners() {\n    const activeSignersWithPerms = await this.contractWrapper.read(\"getAllActiveSigners\", []);\n    return await Promise.all(activeSignersWithPerms.map(async signerWithPermissions => {\n      const signer = signerWithPermissions.signer;\n      const permissions = this.parseSignerPermissionsStruct(signerWithPermissions);\n      return {\n        signer,\n        permissions\n      };\n    }));\n  }\n\n  /**\n   * Get all admins and non-admin signers with permissions to use the account.\n   *\n   * @example\n   * ```javascript\n   * const allAdminsAndSigners = await contract.account.getAllAdminsAndSigners();\n   * ```\n   *\n   * @returns all admins and non-admin signers with permissions to use the account.\n   *\n   * @twfeature AccountPermissions\n   */\n  async getAllAdminsAndSigners() {\n    const allAdmins = await this.getAllAdmins();\n    const transformedAdmins = allAdmins.map(admin => {\n      return {\n        isAdmin: true,\n        signer: admin,\n        permissions: {\n          startDate: new Date(0),\n          expirationDate: new Date(0),\n          nativeTokenLimitPerTransaction: BigNumber.from(0),\n          approvedCallTargets: []\n        }\n      };\n    });\n    const allSigners = await this.getAllSigners();\n    return [...transformedAdmins, ...allSigners];\n  }\n\n  /*********************************\n   * WRITE FUNCTIONS\n   ********************************/\n\n  /**\n   * Grant an address admin access to the account.\n   *\n   * @remarks Grants an address admin access to the account. The admin will have complete authority over the account.\n   *\n   * @param signer - The address to be granted admin access to the account.\n   *\n   * @example\n   * ```javascript\n   * const tx = await contract.account.grantAdminAccess(signer);\n   * const receipt = tx.receipt();\n   * ```\n   *\n   * @twfeature AccountPermissions\n   */\n  grantAdminPermissions = /* @__PURE__ */buildTransactionFunction(async signerAddress => {\n    const resolvedSignerAddress = await resolveAddress(signerAddress);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"setAdmin\",\n      args: [resolvedSignerAddress, true]\n    });\n  });\n\n  /**\n   * Revoke an address' admin access to the account.\n   *\n   * @remarks Revokes an address' admin access to the account.\n   *\n   * @param signer - The address of an admin of the account.\n   *\n   * @example\n   * ```javascript\n   * const tx = await contract.account.revokeAdminAccess(signer);\n   * const receipt = tx.receipt();\n   * ```\n   *\n   * @twfeature AccountPermissions\n   */\n  revokeAdminPermissions = /* @__PURE__ */buildTransactionFunction(async signerAddress => {\n    const resolvedSignerAddress = await resolveAddress(signerAddress);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"setAdmin\",\n      args: [resolvedSignerAddress, false]\n    });\n  });\n\n  /**\n   * Grant a signer permissions to use the account.\n   *\n   * @remarks Grants a signer permissions to use the account.\n   *\n   * @param signer - The signer to be granted permissions to use the account.\n   * @param permissions - The permissions to be applied to the signer's use of the account.\n   *\n   * @example\n   * ```javascript\n   * const tx = await contract.account.grantPermissions(signer, permissions);\n   * const receipt = tx.receipt();\n   * ```\n   *\n   * @twfeature AccountPermissions\n   */\n  grantPermissions = /* @__PURE__ */buildTransactionFunction(async (signerAddress, permissions) => {\n    const resolvedSignerAddress = await resolveAddress(signerAddress);\n    const resolvedPermissions = await SignerPermissionsSchema.parseAsync(permissions);\n    if (await this.isAdmin(resolvedSignerAddress)) {\n      throw new Error(\"Signer is already an admin. Cannot grant permissions to an existing admin.\");\n    }\n    if (await this.isSigner(resolvedSignerAddress)) {\n      throw new Error(\"Signer already has permissions. Cannot grant permissions to an existing signer. You can update permissions using `updatePermissions`.\");\n    }\n    return await this.sendSignerPermissionRequest(resolvedSignerAddress, resolvedPermissions);\n  });\n\n  /**\n   * Update the permissions of a signer for using the account.\n   *\n   * @remarks Updates the permissions of a signer for using the account.\n   *\n   * @param signer - The signer whose permissions to use the account are to be updated.\n   * @param permissions - The permissions to be applied to the signer's use of the account.\n   *\n   * @example\n   * ```javascript\n   * const tx = await contract.account.updatePermissions(signer, permissions);\n   * const receipt = tx.receipt();\n   * ```\n   *\n   * @twfeature AccountPermissions\n   */\n  updatePermissions = /* @__PURE__ */buildTransactionFunction(async (signerAddress, permissions) => {\n    const resolvedSignerAddress = await resolveAddress(signerAddress);\n    const resolvedPermissions = await SignerPermissionsSchema.parseAsync(permissions);\n    if (await this.isAdmin(resolvedSignerAddress)) {\n      throw new Error(\"Signer is already an admin. Cannot update permissions of an existing admin.\");\n    }\n    if (!(await this.isSigner(resolvedSignerAddress))) {\n      throw new Error(\"Signer does not already have permissions. You can grant permissions using `grantPermissions`.\");\n    }\n    return await this.sendSignerPermissionRequest(resolvedSignerAddress, resolvedPermissions);\n  });\n\n  /**\n   * Revoke a scoped access address to the account\n   *\n   * @remarks Revokes an address' access to the account.\n   *\n   * @param signer - The address whose access to the account is to be revoked.\n   *\n   * @example\n   * ```javascript\n   * const tx = await contract.account.revokeAccess(signer);\n   * const receipt = tx.receipt();\n   * ```\n   *\n   * @twfeature AccountPermissions\n   */\n  revokeAccess = /* @__PURE__ */buildTransactionFunction(async signerAddress => {\n    const resolvedSignerAddress = await resolveAddress(signerAddress);\n    if (await this.isAdmin(resolvedSignerAddress)) {\n      throw new Error(\"Signer is already an admin. Cannot revoke permissions of an admin.\");\n    }\n    if (!(await this.isSigner(resolvedSignerAddress))) {\n      throw new Error(\"Signer does not already have permissions. You can grant permissions using `grantPermissions`.\");\n    }\n    return await this.sendSignerPermissionRequest(resolvedSignerAddress, {\n      startDate: BigNumber.from(0),\n      expirationDate: BigNumber.from(0),\n      approvedCallTargets: [],\n      nativeTokenLimitPerTransaction: \"0\"\n    });\n  });\n\n  /**\n   * Approve an address as a call target for a given signer on the account\n   *\n   * @remarks Approves an address as a call target for a given signer on the account.\n   *\n   * @param signer - A signer with restricted access to the account.\n   * @param target - The address to approve as a call target for the signer.\n   *\n   * @example\n   * ```javascript\n   * const tx = await contract.account.approveTargetForSigner(signer, target);\n   * const receipt = tx.receipt();\n   * ```\n   *\n   * @twfeature AccountPermissions\n   */\n  approveTargetForSigner = /* @__PURE__ */buildTransactionFunction(async (signerAddress, target) => {\n    const resolvedSignerAddress = await resolveAddress(signerAddress);\n    const resolvedTarget = await resolveAddress(target);\n    if (await this.isAdmin(resolvedSignerAddress)) {\n      throw new Error(\"Signer is already an admin. Cannot approve targets for an admin.\");\n    }\n    if (!(await this.isSigner(resolvedSignerAddress))) {\n      throw new Error(\"Signer does not already have permissions. You can grant permissions using `grantPermissions`.\");\n    }\n    const permissions = await this.contractWrapper.read(\"getPermissionsForSigner\", [resolvedSignerAddress]);\n    if (permissions.approvedTargets.includes(target)) {\n      throw new Error(\"Target is already approved\");\n    }\n    const newTargets = [...permissions.approvedTargets, resolvedTarget];\n    return await this.sendSignerPermissionRequest(resolvedSignerAddress, {\n      startDate: BigNumber.from(permissions.startTimestamp),\n      expirationDate: BigNumber.from(permissions.endTimestamp),\n      approvedCallTargets: newTargets,\n      nativeTokenLimitPerTransaction: permissions.nativeTokenLimitPerTransaction.toString()\n    });\n  });\n\n  /**\n   * Disapprove an address as a call target for a given signer on the account\n   *\n   * @remarks Disapprove an address as a call target for a given signer on the account.\n   *\n   * @param signer - A signer with restricted access to the account.\n   * @param target - The address to disapprove as a call target for the signer.\n   *\n   * @example\n   * ```javascript\n   * const tx = await contract.account.disapproveTargetForSigner(signer, target);\n   * const receipt = tx.receipt();\n   * ```\n   *\n   * @twfeature AccountPermissions\n   */\n  disapproveTargetForSigner = /* @__PURE__ */buildTransactionFunction(async (signerAddress, target) => {\n    const resolvedSignerAddress = await resolveAddress(signerAddress);\n    const resolvedTarget = await resolveAddress(target);\n    if (await this.isAdmin(resolvedSignerAddress)) {\n      throw new Error(\"Signer is already an admin. Cannot approve targets for an admin.\");\n    }\n    if (!(await this.isSigner(resolvedSignerAddress))) {\n      throw new Error(\"Signer does not already have permissions. You can grant permissions using `grantPermissions`.\");\n    }\n    const permissions = await this.contractWrapper.read(\"getPermissionsForSigner\", [resolvedSignerAddress]);\n    if (!permissions.approvedTargets.includes(resolvedTarget)) {\n      throw new Error(\"Target is currently not approved\");\n    }\n    const newTargets = permissions.approvedTargets.filter(approvedTarget => utils.getAddress(approvedTarget) !== utils.getAddress(resolvedTarget));\n    return await this.sendSignerPermissionRequest(resolvedSignerAddress, {\n      startDate: BigNumber.from(permissions.startTimestamp),\n      expirationDate: BigNumber.from(permissions.endTimestamp),\n      approvedCallTargets: newTargets,\n      nativeTokenLimitPerTransaction: permissions.nativeTokenLimitPerTransaction.toString()\n    });\n  });\n\n  /**\n   * Set the account's entire snapshot of permissions.\n   *\n   * @remarks Sets the account's entire snapshot of permissions.\n   *\n   * @param permissionSnapshot - the snapshot to set as the account's entire permission snapshot.\n   *\n   * @example\n   * ```javascript\n   * const tx = await contract.account.setAccess(permissionSnapshot);\n   * const receipt = tx.receipt();\n   * ```\n   *\n   * @twfeature AccountPermissions\n   */\n  resetAllPermissions = /* @__PURE__ */buildTransactionFunction(async permissionSnapshot => {\n    const resolvedSnapshot = await PermissionSnapshotSchema.parseAsync(permissionSnapshot);\n\n    /**\n     * All cases\n     *\n     * - Add new admin :check:\n     * - Remove current admin :check:\n     * - Add new scoped :check:\n     * - Remove current scoped :check:\n     * - Update current scoped :check:\n     * - Current admin -> new scoped :check:\n     * - Current scoped -> new admin :check:\n     **/\n\n    // No duplicate signers in input!\n    if (this.hasDuplicateSigners(resolvedSnapshot)) {\n      throw new Error(\"Duplicate signers found in input.\");\n    }\n    const addAdminData = [];\n    const removeAdminData = [];\n    const addOrUpdateSignerData = [];\n    const removeSignerData = [];\n\n    // Remove all existing admins not included in the passed snapshot.\n    const allAdmins = await this.getAllAdmins();\n    const allToMakeAdmin = resolvedSnapshot.filter(item => item.makeAdmin).map(item => item.signer);\n    allAdmins.forEach(admin => {\n      if (!allToMakeAdmin.includes(admin)) {\n        removeAdminData.push(this.contractWrapper.writeContract.interface.encodeFunctionData(\"setAdmin\", [admin, false]));\n      }\n    });\n\n    // Remove all existing signers not included in the passed snapshot.\n    const allSigners = await this.getAllSigners();\n    const allToMakeSigners = resolvedSnapshot.filter(item => {\n      return !item.makeAdmin;\n    }).map(item => item.signer);\n    await Promise.all(allSigners.map(async item => {\n      if (!allToMakeSigners.includes(item.signer)) {\n        const data = await this.buildSignerPermissionRequest(item.signer, {\n          startDate: BigNumber.from(0),\n          expirationDate: BigNumber.from(0),\n          approvedCallTargets: [],\n          nativeTokenLimitPerTransaction: \"0\"\n        });\n        removeSignerData.push(data);\n      }\n    }));\n    for (const member of resolvedSnapshot) {\n      // Add new admin\n      if (member.makeAdmin) {\n        addAdminData.push(this.contractWrapper.writeContract.interface.encodeFunctionData(\"setAdmin\", [member.signer, true]));\n      } else {\n        // Add new scoped\n        const data = await this.buildSignerPermissionRequest(member.signer, member.permissions);\n        addOrUpdateSignerData.push(data);\n      }\n    }\n    const data = [];\n    removeAdminData.forEach(item => {\n      data.push(item);\n    });\n    removeSignerData.forEach(item => {\n      data.push(item);\n    });\n    addOrUpdateSignerData.forEach(item => {\n      data.push(item);\n    });\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"multicall\",\n      args: [data]\n    });\n  });\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars -- TO BE REMOVED IN V4\nclass Account {\n  featureName = FEATURE_ACCOUNT.name;\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n    this.accountPermissions = this.detectAccountPermissions();\n  }\n  detectAccountPermissions() {\n    if (detectContractFeature(this.contractWrapper, \"AccountPermissions\")) {\n      return new AccountPermissions(this.contractWrapper);\n    }\n    return undefined;\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /*********************************\n   * READ FUNCTIONS\n   ********************************/\n\n  /**\n   * Get whether a signer is an admin on the account.\n   *\n   * @example\n   * ```javascript\n   * const isAdmin = await contract.account.isAdmin(signer);\n   * ```\n   * @param signer - The address of a signer of the account.\n   * @returns whether a signer is an admin on the account.\n   *\n   * @twfeature AccountPermissions\n   */\n  async isAdmin(signerAddress) {\n    return assertEnabled(this.accountPermissions, FEATURE_ACCOUNT_PERMISSIONS).isAdmin(signerAddress);\n  }\n\n  /**\n   * Get whether a signer has permissions to use the account.\n   *\n   * @example\n   * ```javascript\n   * const isAdmin = await contract.account.isSigner(signer);\n   * ```\n   * @param signer - The address of a signer of the account.\n   * @returns whether a signer has permissions to use the account.\n   *\n   * @twfeature AccountPermissions\n   */\n  async isSigner(signerAddress) {\n    return assertEnabled(this.accountPermissions, FEATURE_ACCOUNT_PERMISSIONS).isSigner(signerAddress);\n  }\n\n  /**\n   * Get all admins of the account.\n   *\n   * @example\n   * ```javascript\n   * const allAdmins = await contract.account.getAllAdmins();\n   * ```\n   *\n   * @returns all admins of the account.\n   *\n   * @twfeature AccountPermissions\n   */\n  async getAllAdmins() {\n    return assertEnabled(this.accountPermissions, FEATURE_ACCOUNT_PERMISSIONS).getAllAdmins();\n  }\n\n  /**\n   * Get all (non-admin) signers with permissions to use the account.\n   *\n   * @example\n   * ```javascript\n   * const allSigners = await contract.account.getAllSigners();\n   * ```\n   *\n   * @returns all (non-admin) signers with permissions to use the account.\n   *\n   * @twfeature AccountPermissions\n   */\n  async getAllSigners() {\n    return assertEnabled(this.accountPermissions, FEATURE_ACCOUNT_PERMISSIONS).getAllSigners();\n  }\n\n  /**\n   * Get all admins and non-admin signers with permissions to use the account.\n   *\n   * @example\n   * ```javascript\n   * const allAdminsAndSigners = await contract.account.getAllAdminsAndSigners();\n   * ```\n   *\n   * @returns all admins and non-admin signers with permissions to use the account.\n   *\n   * @twfeature AccountPermissions\n   */\n  async getAllAdminsAndSigners() {\n    return assertEnabled(this.accountPermissions, FEATURE_ACCOUNT_PERMISSIONS).getAllAdminsAndSigners();\n  }\n\n  /*********************************\n   * WRITE FUNCTIONS\n   ********************************/\n\n  /**\n   * Grant an address admin access to the account.\n   *\n   * @remarks Grants an address admin access to the account. The admin will have complete authority over the account.\n   *\n   * @param signer - The address to be granted admin access to the account.\n   *\n   * @example\n   * ```javascript\n   * const tx = await contract.account.grantAdminAccess(signer);\n   * const receipt = tx.receipt();\n   * ```\n   *\n   * @twfeature AccountPermissions\n   */\n  grantAdminPermissions = /* @__PURE__ */buildTransactionFunction(async signerAddress => {\n    return assertEnabled(this.accountPermissions, FEATURE_ACCOUNT_PERMISSIONS).grantAdminPermissions.prepare(signerAddress);\n  });\n\n  /**\n   * Revoke an address' admin access to the account.\n   *\n   * @remarks Revokes an address' admin access to the account.\n   *\n   * @param signer - The address of an admin of the account.\n   *\n   * @example\n   * ```javascript\n   * const tx = await contract.account.revokeAdminAccess(signer);\n   * const receipt = tx.receipt();\n   * ```\n   *\n   * @twfeature AccountPermissions\n   */\n  revokeAdminPermissions = /* @__PURE__ */buildTransactionFunction(async signerAddress => {\n    return assertEnabled(this.accountPermissions, FEATURE_ACCOUNT_PERMISSIONS).revokeAdminPermissions.prepare(signerAddress);\n  });\n\n  /**\n   * Grant a signer permissions to use the account.\n   *\n   * @remarks Grants a signer permissions to use the account.\n   *\n   * @param signer - The signer to be granted permissions to use the account.\n   * @param permissions - The permissions to be applied to the signer's use of the account.\n   *\n   * @example\n   * ```javascript\n   * const tx = await contract.account.grantPermissions(signer, permissions);\n   * const receipt = tx.receipt();\n   * ```\n   *\n   * @twfeature AccountPermissions\n   */\n  grantPermissions = /* @__PURE__ */buildTransactionFunction(async (signerAddress, permissions) => {\n    return assertEnabled(this.accountPermissions, FEATURE_ACCOUNT_PERMISSIONS).grantPermissions.prepare(signerAddress, permissions);\n  });\n\n  /**\n   * Update the permissions of a signer for using the account.\n   *\n   * @remarks Updates the permissions of a signer for using the account.\n   *\n   * @param signer - The signer whose permissions to use the account are to be updated.\n   * @param permissions - The permissions to be applied to the signer's use of the account.\n   *\n   * @example\n   * ```javascript\n   * const tx = await contract.account.updateAccess(signer, restrictions);\n   * const receipt = tx.receipt();\n   * ```\n   *\n   * @twfeature AccountPermissions\n   */\n  updatePermissions = /* @__PURE__ */buildTransactionFunction(async (signerAddress, permissions) => {\n    return assertEnabled(this.accountPermissions, FEATURE_ACCOUNT_PERMISSIONS).updatePermissions.prepare(signerAddress, permissions);\n  });\n\n  /**\n   * Revoke a scoped access address to the account\n   *\n   * @remarks Revokes an address' access to the account.\n   *\n   * @param signer - The address whose access to the account is to be revoked.\n   *\n   * @example\n   * ```javascript\n   * const tx = await contract.account.revokeAccess(signer);\n   * const receipt = tx.receipt();\n   * ```\n   *\n   * @twfeature AccountPermissions\n   */\n  revokeAccess = /* @__PURE__ */buildTransactionFunction(async signerAddress => {\n    return assertEnabled(this.accountPermissions, FEATURE_ACCOUNT_PERMISSIONS).revokeAccess.prepare(signerAddress);\n  });\n\n  /**\n   * Approve an address as a call target for a given signer on the account\n   *\n   * @remarks Approves an address as a call target for a given signer on the account.\n   *\n   * @param signer - A signer with restricted access to the account.\n   * @param target - The address to approve as a call target for the signer.\n   *\n   * @example\n   * ```javascript\n   * const tx = await contract.account.approveTargetForSigner(signer, target);\n   * const receipt = tx.receipt();\n   * ```\n   *\n   * @twfeature AccountPermissions\n   */\n  approveTargetForSigner = /* @__PURE__ */buildTransactionFunction(async (signerAddress, target) => {\n    return assertEnabled(this.accountPermissions, FEATURE_ACCOUNT_PERMISSIONS).approveTargetForSigner.prepare(signerAddress, target);\n  });\n\n  /**\n   * Disapprove an address as a call target for a given signer on the account\n   *\n   * @remarks Disapprove an address as a call target for a given signer on the account.\n   *\n   * @param signer - A signer with restricted access to the account.\n   * @param target - The address to disapprove as a call target for the signer.\n   *\n   * @example\n   * ```javascript\n   * const tx = await contract.account.disapproveTargetForSigner(signer, target);\n   * const receipt = tx.receipt();\n   * ```\n   *\n   * @twfeature AccountPermissions\n   */\n  disapproveTargetForSigner = /* @__PURE__ */buildTransactionFunction(async (signerAddress, target) => {\n    return assertEnabled(this.accountPermissions, FEATURE_ACCOUNT_PERMISSIONS).disapproveTargetForSigner.prepare(signerAddress, target);\n  });\n\n  /**\n   * Set the account's entire snapshot of permissions.\n   *\n   * @remarks Sets the account's entire snapshot of permissions.\n   *\n   * @param permissionSnapshot - the snapshot to set as the account's entire permission snapshot.\n   *\n   * @example\n   * ```javascript\n   * const tx = await contract.account.setAccess(permissionSnapshot);\n   * const receipt = tx.receipt();\n   * ```\n   *\n   * @twfeature AccountPermissions\n   */\n  resetAllPermissions = /* @__PURE__ */buildTransactionFunction(async permissionSnapshot => {\n    return assertEnabled(this.accountPermissions, FEATURE_ACCOUNT_PERMISSIONS).resetAllPermissions.prepare(permissionSnapshot);\n  });\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars -- TO BE REMOVED IN V4\nclass AccountFactory {\n  featureName = FEATURE_ACCOUNT_FACTORY.name;\n\n  // utilities\n\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n    this.events = new ContractEvents(this.contractWrapper);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /*********************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get the deterministic address of the account that will be created\n   *\n   * @example\n   * ```javascript\n   * const accountAddress = await contract.accountFactory.predictAccountAddress(admin);\n   * ```\n   * @param admin - The admin of the account.\n   * @param extraData - (Optional) Extra data to be passed to the account on creation.\n   * @returns the deterministic address of the account that will be created for the given admin.\n   *\n   * @twfeature AccountFactory\n   */\n  async predictAccountAddress(admin, extraData) {\n    let data = utils.toUtf8Bytes(\"\");\n    if (extraData) {\n      data = extraData;\n    }\n    return this.contractWrapper.read(\"getAddress\", [admin, data]);\n  }\n\n  /**\n   * Get all accounts on which the given signer has authority\n   *\n   * @example\n   * ```javascript\n   * const allAccounts = await contract.accountFactory.getAssociatedAccounts(admin);\n   * ```\n   * @param signer - The account address.\n   * @returns all accounts on which the given signer has authority.\n   *\n   * @twfeature AccountFactory\n   */\n  async getAssociatedAccounts(signer) {\n    return this.contractWrapper.read(\"getAccountsOfSigner\", [signer]);\n  }\n\n  /**\n   * Get all accounts\n   *\n   * @example\n   * ```javascript\n   * const allAccounts = await contract.accountFactory.getAllAccounts();\n   * ```\n   *\n   * @returns all accounts created via the account factory.\n   *\n   * @twfeature AccountFactory\n   */\n  async getAllAccounts() {\n    return await this.contractWrapper.read(\"getAllAccounts\", []);\n  }\n\n  /**\n   * Check if a account has been deployed for the given admin\n   *\n   * @param admin - The admin of the account.\n   * @param extraData - (Optional) Extra data to be passed to the account on creation.\n   * @returns whether the account has been deployed for the given admin.\n   */\n  async isAccountDeployed(admin, extraData) {\n    const addr = await this.predictAccountAddress(admin, extraData);\n    return isContractDeployed(addr, this.contractWrapper.getProvider());\n  }\n\n  /*********************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Create a account\n   *\n   * @remarks Create a account for an admin. The admin will have complete authority over the account.\n   *\n   * @param admin - The admin of the account.\n   * @param extraData - (Optional) Extra data to be passed to the account on creation.\n   *\n   * @example\n   *  ```javascript\n   * const tx = await contract.accountFactory.createAccount(admin, extraData);\n   * const receipt = tx.receipt();\n   * const accountAddress = tx.address;\n   * ```\n   *\n   * @twfeature AccountFactory\n   */\n  createAccount = /* @__PURE__ */buildTransactionFunction(async (accountAdmin, extraData) => {\n    if (await this.isAccountDeployed(accountAdmin, extraData)) {\n      throw new Error(`Account already deployed for admin: ${accountAdmin}`);\n    }\n    let data = utils.toUtf8Bytes(\"\");\n    if (extraData) {\n      data = extraData;\n    }\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"createAccount\",\n      args: [accountAdmin, data],\n      parse: receipt => {\n        const event = this.contractWrapper.parseLogs(\"AccountCreated\", receipt?.logs);\n        return {\n          address: event[0].args.account,\n          receipt\n        };\n      }\n    });\n  });\n}\n\n/**\n * @public\n */\nclass Airdrop1155 {\n  featureName = FEATURE_AIRDROP_ERC1155.name;\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * @internal\n   */\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Perform airdrop of ERC1155 tokens\n   *\n   * @example\n   * ```javascript\n   * // Airdrop content array, with recipients and tokenIds\n   * const contents = [\n   *      {\n   *        recipient: \"0xabc...\", // first recipient address\n   *        tokenId: 0,\n   *        amount: \"10\" // number of tokens\n   *      },\n   *      {\n   *        recipient: \"0x123...\", // second recipient address\n   *        tokenId: 0\n   *        amount: \"20\" // number of tokens\n   *      }\n   *   ]\n   *\n   * const tokenAddress = \"0x...\" // Address of the ERC1155 token being airdropped\n   * const tokenOwner = \"0x...\" // Address of the owner of the tokens being airdropped\n   *\n   * const output = await contract.airdrop1155.drop(tokenAddress, tokenOwner, contents);\n   *\n   * // the `output` return value above contains:\n   * //     - count of successful and failed drops\n   * //     - array containing failed drops, if any\n   *\n   * ```\n   * @param tokenAddress\n   * @param tokenOwner\n   * @param contents\n   *\n   * @returns an array of recipients for who the airdrop failed (empty means all transfers were successful)\n   * @twfeature AirdropERC1155\n   */\n  drop = /* @__PURE__ */buildTransactionFunction(async (tokenAddress, tokenOwner, contents) => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"airdropERC1155\",\n      args: [tokenAddress, tokenOwner, contents],\n      parse: receipt => {\n        const events = this.contractWrapper.parseLogs(\"AirdropFailed\", receipt.logs);\n        const failedDrops = events.map(e => {\n          return {\n            recipient: e.args.recipient,\n            tokenId: e.args.tokenId.toNumber(),\n            amount: e.args.amount.toString()\n          };\n        });\n        return {\n          successfulDropCount: contents.length - failedDrops.length,\n          failedDropCount: failedDrops.length,\n          failedDrops\n        };\n      }\n    });\n  });\n}\n\n/**\n * @public\n */\nclass Airdrop20 {\n  featureName = FEATURE_AIRDROP_ERC20.name;\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * @internal\n   */\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Perform airdrop of ERC20 tokens\n   *\n   * @example\n   * ```javascript\n   * // Airdrop content array, with recipients and token amounts\n   * const contents = [\n   *      {\n   *        recipient: \"0xabc...\", // first recipient address\n   *        amount: \"10\" // number of tokens in wei units\n   *      },\n   *      {\n   *        recipient: \"0x123...\", // second recipient address\n   *        amount: \"20\" // number of tokens in wei units\n   *      }\n   *   ]\n   *\n   * const tokenAddress = \"0x...\" // Address of the ERC20 token being airdropped\n   * const tokenOwner = \"0x...\" // Address of the owner of the tokens being airdropped\n   *\n   * const output = await contract.airdrop20.drop(tokenAddress, tokenOwner, contents);\n   *\n   * // the `output` return value above contains:\n   * //     - count of successful and failed drops\n   * //     - array containing failed drops, if any\n   *\n   * ```\n   * @param tokenAddress\n   * @param tokenOwner\n   * @param contents\n   *\n   * @returns an array of recipients for who the airdrop failed (empty means all transfers were successful)\n   * @twfeature AirdropERC20\n   */\n  drop = /* @__PURE__ */buildTransactionFunction(async (tokenAddress, tokenOwner, contents) => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"airdropERC20\",\n      args: [tokenAddress, tokenOwner, contents],\n      parse: receipt => {\n        const events = this.contractWrapper.parseLogs(\"AirdropFailed\", receipt.logs);\n        const failedDrops = events.map(e => {\n          return {\n            recipient: e.args.recipient,\n            amount: e.args.amount.toString()\n          };\n        });\n        return {\n          successfulDropCount: contents.length - failedDrops.length,\n          failedDropCount: failedDrops.length,\n          failedDrops\n        };\n      }\n    });\n  });\n}\n\n/**\n * @public\n */\nclass Airdrop721 {\n  featureName = FEATURE_AIRDROP_ERC721.name;\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * @internal\n   */\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Perform airdrop of ERC721 tokens\n   *\n   * @example\n   * ```javascript\n   * // Airdrop content array, with recipients and tokenIds\n   * const contents = [\n   *      {\n   *        recipient: \"0xabc...\", // first recipient address\n   *        tokenId: 0\n   *      },\n   *      {\n   *        recipient: \"0x123...\", // second recipient address\n   *        tokenId: 2\n   *      }\n   *   ]\n   *\n   * const tokenAddress = \"0x...\" // Address of the ERC721 token being airdropped\n   * const tokenOwner = \"0x...\" // Address of the owner of the tokens being airdropped\n   *\n   * const output = await contract.airdrop721.drop(tokenAddress, tokenOwner, contents);\n   *\n   * // the `output` return value above contains:\n   * //     - count of successful and failed drops\n   * //     - array containing failed drops, if any\n   *\n   * ```\n   * @param tokenAddress\n   * @param tokenOwner\n   * @param contents\n   *\n   * @returns an array of recipients for who the airdrop failed (empty means all transfers were successful)\n   * @twfeature AirdropERC721\n   */\n  drop = /* @__PURE__ */buildTransactionFunction(async (tokenAddress, tokenOwner, contents) => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"airdropERC721\",\n      args: [tokenAddress, tokenOwner, contents],\n      parse: receipt => {\n        const events = this.contractWrapper.parseLogs(\"AirdropFailed\", receipt.logs);\n        const failedDrops = events.map(e => {\n          return {\n            recipient: e.args.recipient,\n            tokenId: e.args.tokenId.toNumber()\n          };\n        });\n        return {\n          successfulDropCount: contents.length - failedDrops.length,\n          failedDropCount: failedDrops.length,\n          failedDrops\n        };\n      }\n    });\n  });\n}\n\nclass ExtensionManager {\n  featureName = FEATURE_DYNAMIC_CONTRACT.name;\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n  getAddress() {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  async getAll() {\n    const extensions = await this.contractWrapper.readContract.getAllExtensions();\n    return extensions;\n  }\n  async get(extensionName) {\n    const extension = await this.contractWrapper.readContract.getExtension(extensionName);\n    return extension;\n  }\n  async getExtensionAddress(extensionName) {\n    const extension = await this.get(extensionName);\n    return extension.metadata.implementation;\n  }\n  async getAllFunctions(extensionName) {\n    const extension = await this.get(extensionName);\n    return extension.functions;\n  }\n  async getExtensionForFunction(functionInput) {\n    let selector = functionInput.functionSelector;\n    if (!selector) {\n      invariant(functionInput.functionSignature, \"Atleast one of function selector and signature must be provided\");\n      selector = utils.id(functionInput.functionSignature).substring(0, 10);\n    }\n    const extensionMetadata = await this.contractWrapper.readContract.getMetadataForFunction(selector);\n    return extensionMetadata;\n  }\n  async getExtensionAddressForFunction(functionInput) {\n    const extensionMetadata = await this.getExtensionForFunction(functionInput);\n    return extensionMetadata.implementation;\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Adds an extension to the contract\n   */\n  add = /* @__PURE__ */buildTransactionFunction(async inputArgs => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"addExtension\",\n      args: [inputArgs.extension],\n      parse: async receipt => {\n        const events = this.contractWrapper.parseLogs(\"ExtensionAdded\", receipt.logs);\n        if (events.length < 1) {\n          throw new Error(\"No ExtensionAdded event found\");\n        }\n        const extensionAbi = inputArgs.extensionAbi ? AbiSchema.parse(inputArgs.extensionAbi) : (await fetchContractMetadataFromAddress(inputArgs.extension.metadata.implementation, this.contractWrapper.getProvider(), this.contractWrapper.storage)).abi;\n        const abiToAdd = this.filterAbiForAdd(extensionAbi, inputArgs.extension);\n        const updatedAbi = joinABIs([AbiSchema.parse(this.contractWrapper.abi), abiToAdd]);\n        this.contractWrapper.updateAbi(updatedAbi);\n        return receipt;\n      }\n    });\n  });\n\n  /**\n   * Adds a deployed extension to the contract\n   */\n  addDeployed = /* @__PURE__ */buildTransactionFunction(async inputArgs => {\n    let extensionAbi = inputArgs.extensionAbi;\n    if (!extensionAbi) {\n      const metadata = await fetchContractMetadataFromAddress(inputArgs.extensionAddress, this.contractWrapper.getProvider(), this.contractWrapper.storage, this.contractWrapper.options);\n      extensionAbi = metadata.abi;\n    }\n    invariant(extensionAbi, \"Require extension ABI\");\n    let extensionMetadataUri = \"\";\n    if (inputArgs.extensionMetadata) {\n      if (typeof inputArgs.extensionMetadata === \"string\") {\n        extensionMetadataUri = inputArgs.extensionMetadata;\n      } else {\n        const parsedMetadata = await CommonContractSchema.parseAsync(inputArgs.extensionMetadata);\n        extensionMetadataUri = await this.contractWrapper.storage.upload(parsedMetadata);\n      }\n    }\n    const extensionFunctions = generateExtensionFunctions(AbiSchema.parse(extensionAbi));\n    const extension = {\n      metadata: {\n        name: inputArgs.extensionName,\n        metadataURI: extensionMetadataUri,\n        implementation: inputArgs.extensionAddress\n      },\n      functions: extensionFunctions\n    };\n    return this.add.prepare({\n      extension,\n      extensionAbi\n    });\n  });\n\n  /**\n   * Adds a published extension to the contract, and deploys it deterministically if necessary\n   */\n  addPublished = /* @__PURE__ */buildTransactionFunction(async inputArgs => {\n    const version = inputArgs.version || \"latest\";\n    const {\n      deployedExtensionAddress,\n      extensionMetadata\n    } = await this.deployExtension(inputArgs.extensionName, inputArgs.publisherAddress || THIRDWEB_DEPLOYER, version);\n    return this.addDeployed.prepare({\n      extensionName: inputArgs.extensionName,\n      extensionAddress: deployedExtensionAddress,\n      extensionMetadata: inputArgs.extensionMetadataOverride || extensionMetadata\n    });\n  });\n  replace = /* @__PURE__ */buildTransactionFunction(async inputArgs => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"replaceExtension\",\n      args: [inputArgs.extension],\n      parse: async receipt => {\n        const events = this.contractWrapper.parseLogs(\"ExtensionReplaced\", receipt.logs);\n        if (events.length < 1) {\n          throw new Error(\"No ExtensionReplaced event found\");\n        }\n        const extensionAbi = inputArgs.extensionAbi ? AbiSchema.parse(inputArgs.extensionAbi) : (await fetchContractMetadataFromAddress(inputArgs.extension.metadata.implementation, this.contractWrapper.getProvider(), this.contractWrapper.storage)).abi;\n        const contractAbi = this.filterAbiForRemove(AbiSchema.parse(this.contractWrapper.abi), extensionAbi);\n        const abiToAdd = this.filterAbiForAdd(extensionAbi, inputArgs.extension);\n        const updatedAbi = joinABIs([contractAbi, abiToAdd]);\n        this.contractWrapper.updateAbi(updatedAbi);\n        return receipt;\n      }\n    });\n  });\n  replaceDeployed = /* @__PURE__ */buildTransactionFunction(async inputArgs => {\n    let extensionAbi = inputArgs.extensionAbi;\n    if (!extensionAbi) {\n      const metadata = await fetchContractMetadataFromAddress(inputArgs.extensionAddress, this.contractWrapper.getProvider(), this.contractWrapper.storage, this.contractWrapper.options);\n      extensionAbi = metadata.abi;\n    }\n    invariant(extensionAbi, \"Require extension ABI\");\n    let extensionMetadataUri = \"\";\n    if (inputArgs.extensionMetadata) {\n      if (typeof inputArgs.extensionMetadata === \"string\") {\n        extensionMetadataUri = inputArgs.extensionMetadata;\n      } else {\n        const parsedMetadata = await CommonContractSchema.parseAsync(inputArgs.extensionMetadata);\n        extensionMetadataUri = await this.contractWrapper.storage.upload(parsedMetadata);\n      }\n    }\n    const extensionFunctions = generateExtensionFunctions(AbiSchema.parse(extensionAbi));\n    const extension = {\n      metadata: {\n        name: inputArgs.extensionName,\n        metadataURI: extensionMetadataUri,\n        implementation: inputArgs.extensionAddress\n      },\n      functions: extensionFunctions\n    };\n    return this.replace.prepare({\n      extension,\n      extensionAbi\n    });\n  });\n  replacePublished = /* @__PURE__ */buildTransactionFunction(async inputArgs => {\n    const version = inputArgs.version || \"latest\";\n    const {\n      deployedExtensionAddress,\n      extensionMetadata\n    } = await this.deployExtension(inputArgs.extensionName, inputArgs.publisherAddress || THIRDWEB_DEPLOYER, version);\n    return this.replaceDeployed.prepare({\n      extensionName: inputArgs.extensionName,\n      extensionAddress: deployedExtensionAddress,\n      extensionMetadata: inputArgs.extensionMetadataOverride || extensionMetadata\n    });\n  });\n  remove = /* @__PURE__ */buildTransactionFunction(async inputArgs => {\n    const extensionAddress = await this.getExtensionAddress(inputArgs.extensionName);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"removeExtension\",\n      args: [inputArgs.extensionName],\n      parse: async receipt => {\n        const events = this.contractWrapper.parseLogs(\"ExtensionRemoved\", receipt.logs);\n        if (events.length < 1) {\n          throw new Error(\"No ExtensionRemoved event found\");\n        }\n        const extensionAbi = (await fetchContractMetadataFromAddress(extensionAddress, this.contractWrapper.getProvider(), this.contractWrapper.storage)).abi;\n        const updatedAbi = this.filterAbiForRemove(AbiSchema.parse(this.contractWrapper.abi), extensionAbi);\n        this.contractWrapper.updateAbi(updatedAbi);\n        return receipt;\n      }\n    });\n  });\n\n  /** ******************************\n   * Internal / private\n   *******************************/\n\n  filterAbiForAdd(extensionAbi, extension) {\n    const extensionAbiInterface = new utils.Interface(extensionAbi);\n    const extensionFunctionSelectors = extension.functions.map(fn => fn.functionSelector);\n    const filtered = extensionAbi.filter(item => {\n      const fnFragment = Object.values(new utils.Interface([item]).functions);\n      if (fnFragment.length === 0) {\n        return false;\n      }\n      const fnSigHash = extensionAbiInterface.getSighash(fnFragment[0]);\n      return extensionFunctionSelectors.includes(fnSigHash);\n    });\n    return filtered;\n  }\n  filterAbiForRemove(fullAbi, abiToRemove) {\n    const fullAbiInterface = new utils.Interface(fullAbi);\n    const interfaceToRemove = new utils.Interface(abiToRemove);\n    const functionsToRemove = Object.values(interfaceToRemove.functions).map(fn => interfaceToRemove.getSighash(fn));\n    const filtered = fullAbi.filter(item => {\n      const fnFragment = Object.values(new utils.Interface([item]).functions);\n      if (fnFragment.length === 0) {\n        return false;\n      }\n      const fnSigHash = fullAbiInterface.getSighash(fnFragment[0]);\n      return !functionsToRemove.includes(fnSigHash);\n    });\n    return filtered;\n  }\n  async deployExtension(extensionName, publisherAddress) {\n    let version = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"latest\";\n    const published = await fetchPublishedContractFromPolygon(publisherAddress, extensionName, version, this.contractWrapper.storage, this.contractWrapper.options.clientId, this.contractWrapper.options.secretKey);\n    const deploymentInfo = await getDeploymentInfo(published.metadataUri, this.contractWrapper.storage, this.contractWrapper.getProvider(), \"\", this.contractWrapper.options.clientId, this.contractWrapper.options.secretKey);\n    const implementationAddress = deploymentInfo.find(i => i.type === \"implementation\")?.transaction.predictedAddress;\n\n    // deploy infra + plugins + implementation using a throwaway Deployer contract\n\n    // filter out already deployed contracts (data is empty)\n    const transactionsToSend = deploymentInfo.filter(i => i.transaction.data && i.transaction.data.length > 0);\n    const transactionsforDirectDeploy = transactionsToSend.filter(i => {\n      return i.type !== \"infra\";\n    }).map(i => i.transaction);\n    const transactionsForThrowawayDeployer = transactionsToSend.filter(i => {\n      return i.type === \"infra\";\n    }).map(i => i.transaction);\n    const signer = this.contractWrapper.getSigner();\n    invariant(signer, \"Signer is required\");\n\n    // deploy via throwaway deployer, multiple infra contracts in one transaction\n    await deployWithThrowawayDeployer(signer, transactionsForThrowawayDeployer, {});\n\n    // send each transaction directly to Create2 factory\n    // process txns one at a time\n    for (const tx of transactionsforDirectDeploy) {\n      try {\n        await deployContractDeterministic(signer, tx);\n      } catch (e) {\n        console.debug(`Error deploying contract at ${tx.predictedAddress}`, e?.message);\n      }\n    }\n    return {\n      deployedExtensionAddress: implementationAddress,\n      extensionMetadata: published.metadataUri\n    };\n  }\n}\n\n/**\n * Custom contract dynamic class with feature detection\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(provider);\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n *\n * // call any function in your contract\n * await contract.call(\"myCustomFunction\", [param1, param2]);\n *\n * // if your contract follows the ERC721 standard, contract.nft will be present\n * const allNFTs = await contract.erc721.query.all()\n *\n * // if your contract extends IMintableERC721, contract.nft.mint() will be available\n * const tx = await contract.erc721.mint({\n *     name: \"Cool NFT\",\n *     image: readFileSync(\"some_image.png\"),\n *   });\n * ```\n *\n * @beta\n */\nclass SmartContract {\n  // utilities\n\n  get abi() {\n    return AbiSchema.parse(this.contractWrapper.abi || []);\n  }\n\n  /**\n   * Handle royalties\n   */\n  get royalties() {\n    return assertEnabled(this.detectRoyalties(), FEATURE_ROYALTY);\n  }\n\n  /**\n   * Handle permissions\n   */\n  get roles() {\n    return assertEnabled(this.detectRoles(), FEATURE_PERMISSIONS);\n  }\n\n  /**\n   * Handle primary sales\n   */\n  get sales() {\n    return assertEnabled(this.detectPrimarySales(), FEATURE_PRIMARY_SALE);\n  }\n\n  /**\n   * Handle platform fees\n   */\n  get platformFees() {\n    return assertEnabled(this.detectPlatformFees(), FEATURE_PLATFORM_FEE);\n  }\n\n  /**\n   * Set and get the owner of the contract\n   */\n  get owner() {\n    return assertEnabled(this.detectOwnable(), FEATURE_OWNER);\n  }\n\n  /**\n   * Auto-detects ERC20 standard functions.\n   */\n  get erc20() {\n    return assertEnabled(this.detectErc20(), FEATURE_TOKEN);\n  }\n\n  /**\n   * Auto-detects ERC721 standard functions.\n   */\n  get erc721() {\n    return assertEnabled(this.detectErc721(), FEATURE_NFT);\n  }\n\n  /**\n   * Auto-detects ERC1155 standard functions.\n   */\n  get erc1155() {\n    return assertEnabled(this.detectErc1155(), FEATURE_EDITION);\n  }\n\n  /**\n   * Auto-detects AppURI standard functions.\n   */\n  get app() {\n    return assertEnabled(this.detectApp(), FEATURE_APPURI);\n  }\n\n  /**\n   * Direct listings\n   * @remarks Create and manage direct listings in your marketplace.\n   * ```javascript\n   * // Data of the listing you want to create\n   * const listing = {\n   *   // address of the contract the asset you want to list is on\n   *   assetContractAddress: \"0x...\",\n   *   // token ID of the asset you want to list\n   *   tokenId: \"0\",\n   *   // how many of the asset you want to list\n   *   quantity: 1,\n   *   // address of the currency contract that will be used to pay for the listing\n   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n   *   // The price to pay per unit of NFTs listed.\n   *   pricePerToken: 1.5,\n   *   // when should the listing open up for offers\n   *   startTimestamp: new Date(Date.now()),\n   *   // how long the listing will be open for\n   *   endTimestamp: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000),\n   *   // Whether the listing is reserved for a specific set of buyers.\n   *   isReservedListing: false\n   * }\n   *\n   * const tx = await contract.directListings.createListing(listing);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const id = tx.id; // the id of the newly created listing\n   *\n   * // And on the buyers side:\n   * // The ID of the listing you want to buy from\n   * const listingId = 0;\n   * // Quantity of the asset you want to buy\n   * const quantityDesired = 1;\n   *\n   * await contract.directListings.buyFromListing(listingId, quantityDesired);\n   * ```\n   */\n  get directListings() {\n    return assertEnabled(this.detectDirectListings(), FEATURE_DIRECT_LISTINGS);\n  }\n  /**\n   * Auctions\n   * @remarks Create and manage auctions in your marketplace.\n   * @example\n   * ```javascript\n   * // Data of the auction you want to create\n   * const auction = {\n   *   // address of the contract of the asset you want to auction\n   *   assetContractAddress: \"0x...\",\n   *   // token ID of the asset you want to auction\n   *   tokenId: \"0\",\n   *   // how many of the asset you want to auction\n   *   quantity: 1,\n   *   // address of the currency contract that will be used to pay for the auctioned tokens\n   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n   *   // the minimum bid that will be accepted for the token\n   *   minimumBidAmount: \"1.5\",\n   *   // how much people would have to bid to instantly buy the asset\n   *   buyoutBidAmount: \"10\",\n   *   // If a bid is made less than these many seconds before expiration, the expiration time is increased by this.\n   *   timeBufferInSeconds: \"1000\",\n   *   // A bid must be at least this much bps greater than the current winning bid\n   *   bidBufferBps: \"100\", // 100 bps stands for 1%\n   *   // when should the auction open up for bidding\n   *   startTimestamp: new Date(Date.now()),\n   *   // end time of auction\n   *   endTimestamp: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000),\n   * }\n   *\n   * const tx = await contract.englishAuctions.createAuction(auction);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const id = tx.id; // the id of the newly created auction\n   *\n   * // And on the buyers side:\n   * // The auction ID of the asset you want to bid on\n   * const auctionId = 0;\n   * // The total amount you are willing to bid for auctioned tokens\n   * const bidAmount = 1;\n   *\n   * await contract.englishAuctions.makeBid(auctionId, bidAmount);\n   * ```\n   */\n  get englishAuctions() {\n    return assertEnabled(this.detectEnglishAuctions(), FEATURE_ENGLISH_AUCTIONS);\n  }\n\n  /**\n   * Offers\n   * @remarks Make and manage offers.\n   * @example\n   * ```javascript\n   * // Data of the offer you want to make\n   * const offer = {\n   *   // address of the contract the asset you want to make an offer for\n   *   assetContractAddress: \"0x...\",\n   *   // token ID of the asset you want to buy\n   *   tokenId: \"0\",\n   *   // how many of the asset you want to buy\n   *   quantity: 1,\n   *   // address of the currency contract that you offer to pay in\n   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n   *   // Total price you offer to pay for the mentioned token(s)\n   *   totalPrice: \"1.5\",\n   *   // Offer valid until\n   *   endTimestamp: new Date(),\n   * }\n   *\n   * const tx = await contract.offers.makeOffer(offer);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const id = tx.id; // the id of the newly created offer\n   *\n   * // And on the seller's side:\n   * // The ID of the offer you want to accept\n   * const offerId = 0;\n   * await contract.offers.acceptOffer(offerId);\n   * ```\n   */\n  get offers() {\n    return assertEnabled(this.detectOffers(), FEATURE_OFFERS);\n  }\n  get airdrop20() {\n    return assertEnabled(this.detectAirdrop20(), FEATURE_AIRDROP_ERC20);\n  }\n  get airdrop721() {\n    return assertEnabled(this.detectAirdrop721(), FEATURE_AIRDROP_ERC721);\n  }\n  get airdrop1155() {\n    return assertEnabled(this.detectAirdrop1155(), FEATURE_AIRDROP_ERC1155);\n  }\n\n  /**\n   * Account Factory\n   *\n   * @remarks Create accounts and fetch data about them.\n   * @example\n   * ```javascript\n   *\n   * // Predict the address of the account that will be created for an admin.\n   * const deterministicAddress = await contract.accountFactory.predictAccountAddress(admin, extraData);\n   *\n   * // Create accounts\n   * const tx = await contract.accountFactory.createAccount(admin, extraData);\n   * // the same as `deterministicAddress`\n   * const accountAddress = tx.address;\n   *\n   * // Get all accounts created by the factory\n   * const allAccounts = await contract.accountFactory.getAllAccounts();\n   *\n   * // Get all accounts on which a signer has been given authority.\n   * const associatedAccounts = await contract.accountFactory.getAssociatedAccounts(signer);\n   *\n   * // Get all signers who have been given authority on a account.\n   * const associatedSigners = await contract.accountFactory.getAssociatedSigners(accountAddress);\n   *\n   * // Check whether a account has already been created for a given admin.\n   * const isAccountDeployed = await contract.accountFactory.isAccountDeployed(admin, extraData);\n   * ```\n   */\n  get accountFactory() {\n    return assertEnabled(this.detectAccountFactory(), FEATURE_ACCOUNT_FACTORY);\n  }\n\n  // TODO documentation\n  get account() {\n    return assertEnabled(this.detectAccount(), FEATURE_ACCOUNT);\n  }\n  get extensions() {\n    return assertEnabled(this.detectBaseRouter(), FEATURE_DYNAMIC_CONTRACT);\n  }\n  get chainId() {\n    return this._chainId;\n  }\n  constructor(network, address, abi, storage) {\n    let options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options, storage);\n    this._chainId = chainId;\n    this.storage = storage;\n    this.contractWrapper = contractWrapper;\n    this.events = new ContractEvents(this.contractWrapper);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.publishedMetadata = new ContractPublishedMetadata(this.contractWrapper, this.storage);\n    this.metadata = new ContractMetadata(this.contractWrapper, CustomContractSchema, this.storage);\n  }\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /**\n   * Prepare a transaction for sending\n   */\n  prepare(method, args, overrides) {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method,\n      args,\n      overrides\n    });\n  }\n\n  /**\n   * Call any function on this contract\n   * @example\n   * ```javascript\n   * // read functions will return the data from the contract\n   * const myValue = await contract.call(\"myReadFunction\");\n   * console.log(myValue);\n   *\n   * // write functions will return the transaction receipt\n   * const tx = await contract.call(\"myWriteFunction\", [arg1, arg2]);\n   * const receipt = tx.receipt;\n   *\n   * // Optionally override transaction options\n   * await contract.call(\"myWriteFunction\", [arg1, arg2], {\n   *  gasLimit: 1000000, // override default gas limit\n   *  value: ethers.utils.parseEther(\"0.1\"), // send 0.1 ether with the contract call\n   * };\n   * ```\n   * @param functionName - the name of the function to call\n   * @param args - the arguments of the function\n   */\n  async call(functionName, args, overrides) {\n    return this.contractWrapper.call(functionName, args, overrides);\n  }\n\n  /** ********************\n   * FEATURE DETECTION\n   * ********************/\n\n  detectRoyalties() {\n    if (detectContractFeature(this.contractWrapper, \"Royalty\")) {\n      // ContractMetadata is stateless, it's fine to create a new one here\n      // This also makes it not order dependent in the feature detection process\n      const metadata = new ContractMetadata(this.contractWrapper, CustomContractSchema, this.storage);\n      return new ContractRoyalty(this.contractWrapper, metadata);\n    }\n    return undefined;\n  }\n  detectRoles() {\n    if (detectContractFeature(this.contractWrapper, \"Permissions\")) {\n      return new ContractRoles(this.contractWrapper, ALL_ROLES);\n    }\n    return undefined;\n  }\n  detectPrimarySales() {\n    if (detectContractFeature(this.contractWrapper, \"PrimarySale\")) {\n      return new ContractPrimarySale(this.contractWrapper);\n    }\n    return undefined;\n  }\n  detectPlatformFees() {\n    if (detectContractFeature(this.contractWrapper, \"PlatformFee\")) {\n      return new ContractPlatformFee(this.contractWrapper);\n    }\n    return undefined;\n  }\n  detectErc20() {\n    if (detectContractFeature(this.contractWrapper, \"ERC20\")) {\n      return new Erc20(this.contractWrapper, this.storage, this.chainId);\n    }\n    return undefined;\n  }\n  detectErc721() {\n    if (detectContractFeature(this.contractWrapper, \"ERC721\")) {\n      return new Erc721(this.contractWrapper, this.storage, this.chainId);\n    }\n    return undefined;\n  }\n  detectErc1155() {\n    if (detectContractFeature(this.contractWrapper, \"ERC1155\")) {\n      return new Erc1155(this.contractWrapper, this.storage, this.chainId);\n    }\n    return undefined;\n  }\n  detectOwnable() {\n    if (detectContractFeature(this.contractWrapper, \"Ownable\")) {\n      return new ContractOwner(this.contractWrapper);\n    }\n    return undefined;\n  }\n  detectApp() {\n    const metadata = new ContractMetadata(this.contractWrapper, CustomContractSchema, this.storage);\n    if (detectContractFeature(this.contractWrapper, \"AppURI\")) {\n      return new ContractAppURI(this.contractWrapper, metadata, this.storage);\n    } else if (detectContractFeature(this.contractWrapper, \"ContractMetadata\")) {\n      return new ContractAppURI(this.contractWrapper, metadata, this.storage);\n    }\n    return undefined;\n  }\n  detectDirectListings() {\n    if (detectContractFeature(this.contractWrapper, \"DirectListings\")) {\n      return new MarketplaceV3DirectListings(this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n  detectEnglishAuctions() {\n    if (detectContractFeature(this.contractWrapper, \"EnglishAuctions\")) {\n      return new MarketplaceV3EnglishAuctions(this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n  detectOffers() {\n    if (detectContractFeature(this.contractWrapper, \"Offers\")) {\n      return new MarketplaceV3Offers(this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n  detectBaseRouter() {\n    if (detectContractFeature(this.contractWrapper, FEATURE_DYNAMIC_CONTRACT.name)) {\n      return new ExtensionManager(this.contractWrapper);\n    }\n    return undefined;\n  }\n  detectAirdrop20() {\n    if (detectContractFeature(this.contractWrapper, \"AirdropERC20\")) {\n      return new Airdrop20(this.contractWrapper);\n    }\n    return undefined;\n  }\n  detectAirdrop721() {\n    if (detectContractFeature(this.contractWrapper, \"AirdropERC721\")) {\n      return new Airdrop721(this.contractWrapper);\n    }\n    return undefined;\n  }\n  detectAirdrop1155() {\n    if (detectContractFeature(this.contractWrapper, \"AirdropERC1155\")) {\n      return new Airdrop1155(this.contractWrapper);\n    }\n    return undefined;\n  }\n\n  // ========== Account features ==========\n\n  detectAccountFactory() {\n    if (detectContractFeature(this.contractWrapper, FEATURE_ACCOUNT_FACTORY.name)) {\n      return new AccountFactory(this.contractWrapper);\n    }\n    return undefined;\n  }\n  detectAccount() {\n    if (detectContractFeature(this.contractWrapper, FEATURE_ACCOUNT.name)) {\n      return new Account(this.contractWrapper);\n    }\n    return undefined;\n  }\n}\n\n/**\n * Handles publishing contracts (EXPERIMENTAL)\n * @internal\n */\nclass ContractPublisher extends RPCConnectionHandler {\n  constructor(network, options, storage) {\n    super(network, options);\n    this.storage = storage;\n    this.publisher = new ContractWrapper(network, getContractPublisherAddress(), ContractPublisherAbi, options, storage);\n  }\n  updateSignerOrProvider(network) {\n    super.updateSignerOrProvider(network);\n    this.publisher.updateSignerOrProvider(network);\n  }\n\n  /**\n   * @internal\n   * @param metadataUri\n   */\n  async extractConstructorParams(metadataUri) {\n    return extractConstructorParams(metadataUri, this.storage);\n  }\n\n  /**\n   * @internal\n   * @param predeployMetadataUri\n   */\n  async extractFunctions(predeployMetadataUri) {\n    return extractFunctions(predeployMetadataUri, this.storage);\n  }\n\n  /**\n   * @internal\n   * @param predeployUri\n   */\n  async fetchCompilerMetadataFromPredeployURI(predeployUri) {\n    return fetchPreDeployMetadata(predeployUri, this.storage);\n  }\n\n  /**\n   * @internal\n   * @param prepublishUri\n   * @param publisherAddress\n   */\n  async fetchPrePublishMetadata(prepublishUri, publisherAddress) {\n    const preDeployMetadataFetched = await fetchPreDeployMetadata(prepublishUri, this.storage);\n    const latestPublishedContract = publisherAddress ? await this.getLatest(publisherAddress, preDeployMetadataFetched.name) : undefined;\n    const latestPublishedContractMetadata = latestPublishedContract ? await this.fetchPublishedContractInfo(latestPublishedContract) : undefined;\n    return {\n      preDeployMetadata: preDeployMetadataFetched,\n      latestPublishedContractMetadata\n    };\n  }\n\n  /**\n   * @internal\n   * @param address\n   */\n  async fetchCompilerMetadataFromAddress(address) {\n    const resolvedAddress = await resolveAddress(address);\n    return fetchContractMetadataFromAddress(resolvedAddress, this.getProvider(), this.storage, this.options);\n  }\n\n  /**\n   * @internal\n   * Get the full information about a published contract\n   * @param contract\n   */\n  async fetchPublishedContractInfo(contract) {\n    return {\n      name: contract.id,\n      publishedTimestamp: contract.timestamp,\n      publishedMetadata: await this.fetchFullPublishMetadata(contract.metadataUri)\n    };\n  }\n\n  /**\n   * @internal\n   * @param publishedMetadataUri\n   */\n  async fetchFullPublishMetadata(publishedMetadataUri) {\n    return fetchExtendedReleaseMetadata(publishedMetadataUri, this.storage);\n  }\n\n  /**\n   * @internal\n   * // TODO expose a resolvePublishMetadata(contractAddress, chainId) that handles the dual chain case\n   * // TODO will be easy to do with the multichain pattern of 3.0\n   * @param compilerMetadataUri\n   */\n  async resolvePublishMetadataFromCompilerMetadata(compilerMetadataUri) {\n    const publishedMetadataUri = await this.publisher.read(\"getPublishedUriFromCompilerUri\", [compilerMetadataUri]);\n    if (publishedMetadataUri.length === 0) {\n      throw Error(`Could not resolve published metadata URI from ${compilerMetadataUri}`);\n    }\n    return await Promise.all(publishedMetadataUri.filter(uri => uri.length > 0).map(uri => this.fetchFullPublishMetadata(uri)));\n  }\n\n  /**\n   * @internal\n   * TODO clean this up (see method above, too)\n   */\n  async resolveContractUriFromAddress(address) {\n    const resolvedAddress = await resolveAddress(address);\n    const contractUri = await resolveContractUriFromAddress(resolvedAddress, this.getProvider());\n    invariant(contractUri, \"Could not resolve contract URI from address\");\n    return contractUri;\n  }\n\n  /**\n   * @internal\n   * @param address\n   */\n  async fetchContractSourcesFromAddress(address) {\n    const resolvedAddress = await resolveAddress(address);\n    const metadata = await this.fetchCompilerMetadataFromAddress(resolvedAddress);\n    return await fetchSourceFilesFromMetadata(metadata, this.storage);\n  }\n\n  /**\n   * @internal\n   * @param profileMetadata\n   */\n  updatePublisherProfile = /* @__PURE__ */buildTransactionFunction(async profileMetadata => {\n    const signer = this.getSigner();\n    invariant(signer, \"A signer is required\");\n    const publisher = await signer.getAddress();\n    const profileUri = await this.storage.upload(profileMetadata);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.publisher,\n      method: \"setPublisherProfileUri\",\n      args: [publisher, profileUri]\n    });\n  });\n\n  /**\n   * @internal\n   * @param publisherAddress\n   */\n  async getPublisherProfile(publisherAddress) {\n    const resolvedPublisherAddress = await resolveAddress(publisherAddress);\n    const profileUri = await this.publisher.read(\"getPublisherProfileUri\", [resolvedPublisherAddress]);\n    if (!profileUri || profileUri.length === 0) {\n      return {};\n    }\n    return ProfileSchemaOutput.parse(await this.storage.downloadJSON(profileUri));\n  }\n\n  /**\n   * @internal\n   * @param publisherAddress\n   */\n  async getAll(publisherAddress) {\n    const resolvedPublisherAddress = await resolveAddress(publisherAddress);\n    const data = await this.publisher.read(\"getAllPublishedContracts\", [resolvedPublisherAddress]);\n    // since we can fetch from multiple publisher contracts, just keep the latest one in the list\n    const map = data.reduce((acc, curr) => {\n      // replaces the previous contract with the latest one\n      acc[curr.contractId] = curr;\n      return acc;\n    }, {});\n    return Object.entries(map).map(_ref => {\n      let [, struct] = _ref;\n      return this.toPublishedContract(struct);\n    });\n  }\n\n  /**\n   * @internal\n   * @param publisherAddress\n   * @param contractId\n   */\n  async getAllVersions(publisherAddress, contractId) {\n    const resolvedPublisherAddress = await resolveAddress(publisherAddress);\n    const contractStructs = await this.publisher.read(\"getPublishedContractVersions\", [resolvedPublisherAddress, contractId]);\n    if (contractStructs.length === 0) {\n      throw Error(\"Not found\");\n    }\n    return contractStructs.map(d => this.toPublishedContract(d));\n  }\n  async getVersion(publisherAddress, contractId) {\n    let version = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"latest\";\n    const resolvedPublisherAddress = await resolveAddress(publisherAddress);\n    if (version === \"latest\") {\n      return this.getLatest(resolvedPublisherAddress, contractId);\n    }\n    const allVersions = await this.getAllVersions(resolvedPublisherAddress, contractId);\n    // get the metadata for each version\n    const versionMetadata = await Promise.all(allVersions.map(contract => this.fetchPublishedContractInfo(contract)));\n    // find the version that matches the version string\n    const versionMatch = versionMetadata.find(metadata => metadata.publishedMetadata.version === version);\n    invariant(versionMatch, \"Contract version not found\");\n    // match the version back to the contract based on the published timestamp\n    return allVersions.find(contract => contract.timestamp === versionMatch.publishedTimestamp);\n  }\n  async getLatest(publisherAddress, contractId) {\n    const resolvedPublisherAddress = await resolveAddress(publisherAddress);\n    const model = await this.publisher.read(\"getPublishedContract\", [resolvedPublisherAddress, contractId]);\n    if (model && model.publishMetadataUri) {\n      return this.toPublishedContract(model);\n    }\n    return undefined;\n  }\n  publish = /* @__PURE__ */buildTransactionFunction(async (predeployUri, extraMetadata) => {\n    const signer = this.getSigner();\n    invariant(signer, \"A signer is required\");\n    const publisher = await signer.getAddress();\n    const predeployMetadata = await fetchRawPredeployMetadata(predeployUri, this.storage);\n    const compilerMetadata = await fetchContractMetadata(predeployMetadata.metadataUri, this.storage);\n    const isPlugin = isFeatureEnabled(AbiSchema.parse(compilerMetadata.abi), \"PluginRouter\");\n    const isDynamic = isFeatureEnabled(AbiSchema.parse(compilerMetadata.abi), \"DynamicContract\");\n    extraMetadata.routerType = isPlugin ? \"plugin\" : isDynamic ? \"dynamic\" : \"none\";\n\n    // For a dynamic contract Router, try to fetch plugin/extension metadata\n    if (isDynamic || isPlugin) {\n      const defaultExtensions = extraMetadata.defaultExtensions;\n      if (defaultExtensions && defaultExtensions.length > 0) {\n        try {\n          const publishedExtensions = await Promise.all(defaultExtensions.map(e => {\n            return fetchPublishedContractFromPolygon(e.publisherAddress, e.extensionName, e.extensionVersion, this.storage, this.options.clientId, this.options.secretKey);\n          }));\n          const publishedExtensionUris = publishedExtensions.map(ext => ext.metadataUri);\n          const extensionABIs = (await Promise.all(publishedExtensionUris.map(async uri => {\n            return fetchAndCacheDeployMetadata(uri, this.storage);\n          }))).map(fetchedMetadata => fetchedMetadata.compilerMetadata.abi);\n          const composite = joinABIs([compilerMetadata.abi, ...extensionABIs]);\n          extraMetadata.compositeAbi = AbiSchema.parse(composite);\n        } catch {}\n      }\n    }\n\n    // ensure version is incremental\n    const latestContract = await this.getLatest(publisher, predeployMetadata.name);\n    if (latestContract && latestContract.metadataUri) {\n      const latestMetadata = await this.fetchPublishedContractInfo(latestContract);\n      const latestVersion = latestMetadata.publishedMetadata.version;\n      if (!isIncrementalVersion(latestVersion, extraMetadata.version)) {\n        throw Error(`Version ${extraMetadata.version} is not greater than ${latestVersion}`);\n      }\n    }\n    const fetchedBytecode = await (await this.storage.download(predeployMetadata.bytecodeUri)).text();\n    const bytecode = fetchedBytecode.startsWith(\"0x\") ? fetchedBytecode : `0x${fetchedBytecode}`;\n    const bytecodeHash = utils.solidityKeccak256([\"bytes\"], [bytecode]);\n    const contractId = predeployMetadata.name;\n    const fullMetadata = await FullPublishMetadataSchemaInput.parseAsync({\n      ...extraMetadata,\n      metadataUri: predeployMetadata.metadataUri,\n      bytecodeUri: predeployMetadata.bytecodeUri,\n      name: predeployMetadata.name,\n      analytics: predeployMetadata.analytics,\n      publisher\n    });\n    const fullMetadataUri = await this.storage.upload(fullMetadata);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.publisher,\n      method: \"publishContract\",\n      args: [publisher, contractId, fullMetadataUri, predeployMetadata.metadataUri, bytecodeHash, constants.AddressZero],\n      parse: receipt => {\n        const events = this.publisher.parseLogs(\"ContractPublished\", receipt.logs);\n        if (events.length < 1) {\n          throw new Error(\"No ContractPublished event found\");\n        }\n        const contract = events[0].args.publishedContract;\n        return {\n          receipt,\n          data: async () => this.toPublishedContract(contract)\n        };\n      }\n    });\n  });\n  unpublish = /* @__PURE__ */buildTransactionFunction(async (publisher, contractId) => {\n    const resolvedPublisher = await resolveAddress(publisher);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.publisher,\n      method: \"unpublishContract\",\n      args: [resolvedPublisher, contractId]\n    });\n  });\n  toPublishedContract(contractModel) {\n    return PublishedContractSchema.parse({\n      id: contractModel.contractId,\n      timestamp: contractModel.publishTimestamp,\n      metadataUri: contractModel.publishMetadataUri\n    });\n  }\n}\n\nexport { MintRequest721withQuantity as $, AbiTypeSchema as A, BYOCContractMetadataSchema as B, CustomContractInput as C, DeployTypeInput as D, ExtraPublishMetadataSchemaInput as E, FactoryDeploymentSchema as F, CommonPlatformFeeSchema as G, CommonTrustedForwarderSchema as H, CommonSymbolSchema as I, CurrencySchema as J, CurrencyValueSchema as K, BaseSignaturePayloadInput as L, Signature20PayloadInput as M, Signature20PayloadOutput as N, Signature721PayloadInput as O, PreDeployMetadata as P, Signature721PayloadOutput as Q, RouterTypeInput as R, StaticJsonRpcBatchProvider as S, Signature1155PayloadInput as T, Signature1155PayloadInputWithTokenId as U, Signature1155PayloadOutput as V, Signature721WithQuantityInput as W, Signature721WithQuantityOutput as X, MintRequest20 as Y, MintRequest721 as Z, MintRequest1155 as _, CustomContractOutput as a, prepareGaslessRequest as a$, GenericRequest as a0, MerkleSchema as a1, SnapshotEntryInput as a2, SnapshotInputSchema as a3, SnapshotEntryWithProofSchema as a4, SnapshotSchema as a5, SnapshotInfoSchema as a6, BigNumberSchema as a7, BigNumberishSchema as a8, BigNumberTransformSchema as a9, Erc721Supply as aA, Erc721Enumerable as aB, Erc721TieredDrop as aC, Erc721 as aD, Erc721WithQuantitySignatureMintable as aE, Erc721Burnable as aF, Erc1155BatchMintable as aG, Erc1155Burnable as aH, Erc1155Enumerable as aI, Erc1155LazyMintable as aJ, Erc1155Mintable as aK, Erc1155 as aL, Erc1155SignatureMintable as aM, MarketplaceV3DirectListings as aN, MarketplaceV3EnglishAuctions as aO, MarketplaceV3Offers as aP, GasCostEstimator as aQ, ContractEvents as aR, ContractInterceptor as aS, ContractPlatformFee as aT, ContractPublishedMetadata as aU, ContractOwner as aV, Transaction as aW, DeployTransaction as aX, defaultGaslessSendFunction as aY, biconomySendFunction as aZ, defenderSendFunction as a_, AddressSchema as aa, AddressOrEnsSchema as ab, RawDateSchema as ac, StartDateSchema as ad, EndDateSchema as ae, CallOverrideSchema as af, ContractEncoder as ag, ContractMetadata as ah, ContractRoles as ai, ContractRoyalty as aj, ContractPrimarySale as ak, DelayedReveal as al, DropClaimConditions as am, DropErc1155ClaimConditions as an, Erc20BatchMintable as ao, Erc20Burnable as ap, Erc20ClaimableWithConditions as aq, Erc20Droppable as ar, Erc20Mintable as as, Erc20SignatureMintable as at, Erc20 as au, Erc721BatchMintable as av, Erc721ClaimableWithConditions as aw, Erc721Claimable as ax, Erc721LazyMintable as ay, Erc721Mintable as az, CustomContractDeploy as b, resolveImplementation as b$, ContractAppURI as b0, Account as b1, AccountFactory as b2, SignerPermissionsSchema as b3, PermissionSnapshotSchema as b4, SignerPermissionRequest as b5, Status as b6, ClaimEligibility as b7, isNativeToken as b8, cleanCurrencyAddress as b9, AdminRoleMissingError as bA, AuctionHasNotEndedError as bB, ExtensionNotImplementedError as bC, TransactionError as bD, parseRevertReason as bE, includesErrorMessage as bF, createSnapshot as bG, ALL_ROLES as bH, getRoleHash as bI, fetchContractMetadataFromAddress as bJ, fetchAbiFromAddress as bK, getDefaultGasOverrides as bL, getDynamicFeeData as bM, getGasPrice as bN, getPolygonGasPriorityFee as bO, fetchContractMetadata as bP, hasMatchingAbi as bQ, matchesAbiFromBytecode as bR, extractConstructorParams as bS, extractFunctions as bT, extractCommentFromMetadata as bU, extractConstructorParamsFromAbi as bV, extractFunctionsFromAbi as bW, extractEventsFromAbi as bX, extractMinimalProxyImplementationAddress as bY, resolveContractUriFromAddress as bZ, resolveContractUriAndBytecode as b_, normalizePriceValue as ba, fetchCurrencyMetadata as bb, fetchCurrencyValue as bc, setErc20Allowance as bd, approveErc20Allowance as be, normalizeAmount as bf, toWei as bg, convertToReadableQuantity as bh, fetchSnapshotEntryForAddress as bi, NotFoundError as bj, InvalidAddressError as bk, MissingRoleError as bl, AssetNotFoundError as bm, UploadError as bn, FileNameMissingError as bo, DuplicateFileNameError as bp, NotEnoughTokensError as bq, MissingOwnerRoleError as br, QuantityAboveLimitError as bs, FetchError as bt, DuplicateLeafsError as bu, AuctionAlreadyStartedError as bv, FunctionDeprecatedError as bw, ListingNotFoundError as bx, WrongListingTypeError as by, RestrictedTransferError as bz, CustomContractSchema as c, getChainProvider as c$, extractIPFSHashFromBytecode as c0, fetchRawPredeployMetadata as c1, fetchPreDeployMetadata as c2, fetchExtendedReleaseMetadata as c3, detectFeatures as c4, detectFeaturesFromBytecode as c5, getAllDetectedFeatures as c6, getAllDetectedExtensionsFromBytecode as c7, constructAbiFromBytecode as c8, getAllDetectedExtensions as c9, getDeploymentInfo as cA, deployWithThrowawayDeployer as cB, computeDeploymentInfo as cC, encodeConstructorParamsForImplementation as cD, getCreate2FactoryDeploymentInfo as cE, THIRDWEB_DEPLOYER as cF, fetchPublishedContractFromPolygon as cG, fetchAndCacheDeployMetadata as cH, estimateGasForDeploy as cI, createTransactionBatches as cJ, resolveEns as cK, resolveAddress as cL, OZ_DEFENDER_FORWARDER_ADDRESS as cM, CONTRACT_ADDRESSES as cN, getContractAddressByChainId as cO, getContractPublisherAddress as cP, getMultichainRegistryAddress as cQ, ChainId as cR, setSupportedChains as cS, getSupportedChains as cT, InterfaceId_IERC721 as cU, InterfaceId_IERC1155 as cV, NATIVE_TOKEN_ADDRESS as cW, NATIVE_TOKENS as cX, getNativeTokenByChainId as cY, LINK_TOKEN_ADDRESS as cZ, EventType as c_, isFeatureEnabled as ca, isExtensionEnabled as cb, assertEnabled as cc, detectContractFeature as cd, hasFunction as ce, joinABIs as cf, toSemver as cg, isIncrementalVersion as ch, isDowngradeVersion as ci, fetchSourceFilesFromMetadata as cj, CREATE2_FACTORY_BYTECODE as ck, SIGNATURE as cl, COMMON_FACTORY as cm, GAS_LIMIT_FOR_DEPLOYER as cn, DEPLOYER_BYTECODE as co, DEPLOYER_ABI as cp, isContractDeployed as cq, isEIP155Enforced as cr, getCreate2FactoryAddress as cs, getSaltHash as ct, getInitBytecodeWithSalt as cu, computeDeploymentAddress as cv, computeEOAForwarderAddress as cw, computeForwarderAddress as cx, getKeylessTxn as cy, deployContractDeterministic as cz, AbiObjectSchema as d, SplitsContractSchema as d$, getChainIdFromNetwork as d0, getChainIdOrName as d1, isChainConfig as d2, getProviderFromRpcUrl as d3, getSignerAndProvider as d4, SUPPORTED_FEATURES as d5, EditionDropInitializer as d6, EditionInitializer as d7, MarketplaceInitializer as d8, MarketplaceV3Initializer as d9, getCompositePluginABI as dA, buildDeployTransactionFunction as dB, getProcessEnv as dC, DropErc721ContractSchema as dD, mapOffer as dE, fetchTokenMetadataForContract as dF, isTokenApprovedForTransfer as dG, validateNewListingParam as dH, handleTokenApproval as dI, isWinningBid as dJ, NFT_BASE_CONTRACT_ROLES as dK, DropErc1155ContractSchema as dL, TokenErc1155ContractSchema as dM, MARKETPLACE_CONTRACT_ROLES as dN, MarketplaceContractSchema as dO, FEATURE_DIRECT_LISTINGS as dP, FEATURE_ENGLISH_AUCTIONS as dQ, FEATURE_OFFERS as dR, MULTIWRAP_CONTRACT_ROLES as dS, MultiwrapContractSchema as dT, uploadOrExtractURI as dU, TokenErc721ContractSchema as dV, FEATURE_NFT_REVEALABLE as dW, FEATURE_PACK_VRF as dX, PACK_CONTRACT_ROLES as dY, PackContractSchema as dZ, ADMIN_ROLE as d_, MultiwrapInitializer as da, NFTCollectionInitializer as db, NFTDropInitializer as dc, PackInitializer as dd, SignatureDropInitializer as de, SplitInitializer as df, TokenDropInitializer as dg, TokenInitializer as dh, VoteInitializer as di, PREBUILT_CONTRACTS_MAP as dj, PREBUILT_CONTRACTS_APPURI_MAP as dk, CONTRACTS_MAP as dl, getContractTypeForRemoteName as dm, getContractName as dn, isProvider as dp, isSigner as dq, AddressZero as dr, extractFeatures as ds, CUSTOM_GAS_FOR_CHAIN as dt, RPCConnectionHandler as du, signTypedDataInternal as dv, ContractWrapper as dw, buildTransactionFunction as dx, ContractPublisher as dy, SmartContract as dz, AbiSchema as e, TOKEN_DROP_CONTRACT_ROLES as e0, DropErc20ContractSchema as e1, TokenErc20ContractSchema as e2, VoteContractSchema as e3, ChainIdToAddressSchema as f, CustomFactoryInput as g, DeploymentNetworkInput as h, ExtraPublishMetadataSchemaOutput as i, FullPublishMetadataSchemaInput as j, FullPublishMetadataSchemaOutput as k, ProfileSchemaInput as l, ProfileSchemaOutput as m, PublishedContractSchema as n, ContractInfoSchema as o, CompilerMetadataFetchedSchema as p, PreDeployMetadataFetchedSchema as q, ClaimConditionMetadataSchema as r, ClaimConditionInputSchema as s, ClaimConditionInputArray as t, PartialClaimConditionInputSchema as u, ClaimConditionOutputSchema as v, CommonContractSchema as w, CommonContractOutputSchema as x, CommonRoyaltySchema as y, CommonPrimarySaleSchema as z };\n"],"mappings":";;;;AAAA,SAASA,CAAC,IAAIC,cAAc,EAAEC,CAAC,IAAIC,YAAY,EAAEC,CAAC,IAAIC,eAAe,EAAEC,CAAC,IAAIC,mBAAmB,EAAEC,CAAC,IAAIC,iBAAiB,EAAEC,CAAC,IAAIC,0BAA0B,EAAEC,CAAC,IAAIC,aAAa,EAAEC,CAAC,IAAIC,eAAe,EAAEC,CAAC,IAAIC,cAAc,EAAEC,CAAC,IAAIC,uBAAuB,EAAEC,CAAC,IAAIC,aAAa,EAAEC,CAAC,IAAIC,OAAO,QAAQ,uCAAuC;AACtU,SAASC,CAAC,QAAQ,KAAK;AACvB,SAASC,SAAS,EAAEC,SAAS,EAAEC,KAAK,EAAEC,SAAS,EAAEC,QAAQ,EAAEC,eAAe,QAAQ,QAAQ;AAC1F,OAAOC,SAAS,MAAM,gBAAgB;AACtC,SAASC,EAAE,QAAQ,MAAM;AACzB,SAASC,SAAS,IAAIC,WAAW,EAAEC,cAAc,EAAEC,2BAA2B,QAAQ,uBAAuB;AAC7G,OAAOC,SAAS,MAAM,mDAAmD;AACzE,OAAOC,kBAAkB,MAAM,2DAA2D;AAC1F,OAAOC,kBAAkB,MAAM,4DAA4D;AAC3F,OAAOC,QAAQ,MAAM,kDAAkD;AACvE,OAAOC,iBAAiB,MAAM,0DAA0D;AACxF,OAAOC,SAAS,MAAM,iBAAiB;AACvC,SAASC,UAAU,QAAQ,cAAc;AACzC,OAAOC,oBAAoB,MAAM,6DAA6D;AAC9F,OAAOC,aAAa,MAAM,oEAAoE;AAC9F,OAAOC,UAAU,MAAM,oDAAoD;AAC3E,OAAOC,SAAS,MAAM,mDAAmD;AACzE,OAAOC,oBAAoB,MAAM,6DAA6D;AAC9F,SAASC,aAAa,EAAEC,iBAAiB,EAAEC,OAAO,EAAEC,MAAM,QAAQ,sBAAsB;AACxF,OAAOC,IAAI,MAAM,MAAM;AACvB,OAAOC,aAAa,MAAM,qEAAqE;AAC/F,OAAOC,iBAAiB,MAAM,0DAA0D;AACxF,OAAOC,KAAK,MAAM,iDAAiD;AACnE,OAAOC,eAAe,MAAM,yDAAyD;AACrF,OAAOC,gBAAgB,MAAM,4DAA4D;AACzF,OAAOC,kBAAkB,MAAM,+DAA+D;AAC9F,OAAOC,eAAe,MAAM,wDAAwD;AACpF,OAAOC,iBAAiB,MAAM,0DAA0D;AACxF,OAAOC,YAAY,MAAM,sDAAsD;AAC/E,OAAOC,sBAAsB,MAAM,+DAA+D;AAClG,OAAOC,kBAAkB,MAAM,2DAA2D;AAC1F,OAAOC,gBAAgB,MAAM,4DAA4D;AACzF,OAAOC,gBAAgB,MAAM,0DAA0D;AACvF,OAAOC,gBAAgB,MAAM,0DAA0D;AACvF,OAAOC,mBAAmB,MAAM,6DAA6D;AAC7F,OAAOC,mBAAmB,MAAM,wEAAwE;AACxG,OAAOC,eAAe,MAAM,yDAAyD;AACrF,OAAOC,YAAY,MAAM,qDAAqD;AAC9E,OAAOC,kBAAkB,MAAM,2DAA2D;AAC1F,OAAOC,sBAAsB,MAAM,gEAAgE;AACnG,OAAOC,yBAAyB,MAAM,mEAAmE;AACzG,OAAOC,aAAa,MAAM,4DAA4D;AACtF,OAAOC,iBAAiB,MAAM,0DAA0D;AACxF,OAAOC,gBAAgB,MAAM,4DAA4D;AACzF,OAAOC,eAAe,MAAM,wDAAwD;AACpF,OAAOC,eAAe,MAAM,wDAAwD;AACpF,OAAOC,mBAAmB,MAAM,4DAA4D;AAC5F,OAAOC,iBAAiB,MAAM,6DAA6D;AAC3F,OAAOC,mBAAmB,MAAM,qDAAqD;AACrF,OAAOC,iBAAiB,MAAM,2DAA2D;AACzF,OAAOC,oBAAoB,MAAM,gEAAgE;AACjG,OAAOC,uBAAuB,MAAM,mEAAmE;AACvG,OAAOC,gBAAgB,MAAM,0DAA0D;AACvF,OAAOC,oBAAoB,MAAM,8DAA8D;AAC/F,OAAOC,mBAAmB,MAAM,4DAA4D;AAC5F,OAAOC,wBAAwB,MAAM,iEAAiE;AACtG,OAAOC,kBAAkB,MAAM,2DAA2D;AAC1F,OAAOC,OAAO,MAAM,mDAAmD;AACvE,OAAOC,oBAAoB,MAAM,6DAA6D;AAC9F,OAAOC,kBAAkB,MAAM,2DAA2D;AAC1F,OAAOC,mBAAmB,MAAM,4DAA4D;AAC5F,OAAOC,UAAU,MAAM,mDAAmD;AAC1E,OAAOC,WAAW,MAAM,0DAA0D;AAClF,OAAOC,eAAe,MAAM,wDAAwD;AACpF,OAAOC,yBAAyB,MAAM,kEAAkE;AACxG,OAAOC,uBAAuB,MAAM,wDAAwD;AAC5F,OAAOC,uBAAuB,MAAM,wDAAwD;AAC5F,OAAOC,mBAAmB,MAAM,oDAAoD;AACpF,OAAOC,WAAW,MAAM,mDAAmD;AAC3E,OAAOC,aAAa,MAAM,yDAAyD;AACnF,OAAOC,cAAc,MAAM,0DAA0D;AACrF,OAAOC,eAAe,MAAM,2DAA2D;AACvF,OAAOC,mBAAmB,MAAM,+DAA+D;AAC/F,OAAOC,mBAAmB,MAAM,+DAA+D;AAC/F,OAAOC,QAAQ,MAAM,oDAAoD;AACzE,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,OAAOC,YAAY,MAAM,qDAAqD;AAC9E,OAAOC,KAAK,MAAM,aAAa;AAC/B,OAAOC,YAAY,MAAM,eAAe;AAExC,MAAMC,UAAU,GAAG,GAAG;AACtB,MAAMC,kBAAkB,GAAG,aAAa;AACxC,MAAMC,uBAAuB,OAAAC,MAAA,CAAOF,kBAAkB,WAAAE,MAAA,CAAQF,kBAAkB,WAAAE,MAAA,CAAQF,kBAAkB,MAAG;AAC7G,MAAMG,kBAAkB,GAAG,IAAIC,MAAM,CAACH,uBAAuB,CAAC;;AAE9D;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAASI,QAAQA,CAACC,OAAO,EAAE;EACzB,IAAIA,OAAO,CAACC,MAAM,GAAGR,UAAU,EAAE;IAC/B,MAAM,IAAIS,KAAK,2BAAAN,MAAA,CAA2BH,UAAU,gBAAa,CAAC;EACpE;EACA,MAAMU,OAAO,GAAGH,OAAO,CAACI,IAAI,CAAC,CAAC,CAACC,KAAK,CAACR,kBAAkB,CAAC;EACxD,IAAI,CAACM,OAAO,IAAI,CAAAA,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEF,MAAM,MAAK,CAAC,EAAE;IACrC,MAAM,IAAIC,KAAK,IAAAN,MAAA,CAAII,OAAO,8FAA2F,CAAC;EACxH;EACA,MAAMM,KAAK,GAAGC,MAAM,CAACJ,OAAO,CAAC,CAAC,CAAC,CAAC;EAChC,MAAMK,KAAK,GAAGD,MAAM,CAACJ,OAAO,CAAC,CAAC,CAAC,CAAC;EAChC,MAAMM,KAAK,GAAGF,MAAM,CAACJ,OAAO,CAAC,CAAC,CAAC,CAAC;EAChC,MAAMO,aAAa,GAAG,CAACJ,KAAK,EAAEE,KAAK,EAAEC,KAAK,CAAC,CAACE,IAAI,CAAC,GAAG,CAAC;EACrD,OAAO;IACLL,KAAK;IACLE,KAAK;IACLC,KAAK;IACLC;EACF,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASE,oBAAoBA,CAACC,OAAO,EAAEC,IAAI,EAAE;EAC3C,MAAMC,aAAa,GAAGhB,QAAQ,CAACc,OAAO,CAAC;EACvC,MAAMG,UAAU,GAAGjB,QAAQ,CAACe,IAAI,CAAC;EACjC,IAAIE,UAAU,CAACV,KAAK,GAAGS,aAAa,CAACT,KAAK,EAAE;IAC1C,OAAO,IAAI;EACb;EACA,MAAMW,OAAO,GAAGD,UAAU,CAACV,KAAK,KAAKS,aAAa,CAACT,KAAK;EACxD,IAAIW,OAAO,IAAID,UAAU,CAACR,KAAK,GAAGO,aAAa,CAACP,KAAK,EAAE;IACrD,OAAO,IAAI;EACb;EACA,MAAMU,OAAO,GAAGF,UAAU,CAACR,KAAK,KAAKO,aAAa,CAACP,KAAK;EACxD,OAAOS,OAAO,IAAIC,OAAO,IAAIF,UAAU,CAACP,KAAK,GAAGM,aAAa,CAACN,KAAK;AACrE;AACA,SAASU,kBAAkBA,CAACN,OAAO,EAAEC,IAAI,EAAE;EACzC,MAAMC,aAAa,GAAGhB,QAAQ,CAACc,OAAO,CAAC;EACvC,MAAMG,UAAU,GAAGjB,QAAQ,CAACe,IAAI,CAAC;EACjC,IAAIE,UAAU,CAACV,KAAK,GAAGS,aAAa,CAACT,KAAK,EAAE;IAC1C,OAAO,IAAI;EACb;EACA,MAAMW,OAAO,GAAGD,UAAU,CAACV,KAAK,KAAKS,aAAa,CAACT,KAAK;EACxD,IAAIW,OAAO,IAAID,UAAU,CAACR,KAAK,GAAGO,aAAa,CAACP,KAAK,EAAE;IACrD,OAAO,IAAI;EACb;EACA,MAAMU,OAAO,GAAGF,UAAU,CAACR,KAAK,KAAKO,aAAa,CAACP,KAAK;EACxD,OAAOS,OAAO,IAAIC,OAAO,IAAIF,UAAU,CAACP,KAAK,GAAGM,aAAa,CAACN,KAAK;AACrE;AAEA,MAAMW,eAAe,GAAG,eAAe,CAAC,MAAMpH,CAAC,CAACqH,KAAK,CAAC,CAACrH,CAAC,CAACsH,MAAM,CAAC,CAAC,EAAEtH,CAAC,CAACuH,MAAM,CAAC,CAAC,EAAEvH,CAAC,CAACwH,MAAM,CAAC,CAAC,EAAExH,CAAC,CAACyH,MAAM,CAACC,IAAI,IAAI;EAC1G,OAAOzH,SAAS,CAAC0H,WAAW,CAACD,IAAI,CAAC;AACpC,CAAC,CAAC,CAAC,CAAC,CAACE,SAAS,CAACC,GAAG,IAAI5H,SAAS,CAAC6H,IAAI,CAACD,GAAG,CAAC,CAAC,EAAE,CAAC;AAC7C,MAAME,kBAAkB,GAAG,eAAeX,eAAe,CAACQ,SAAS,CAACC,GAAG,IAAIA,GAAG,CAACG,QAAQ,CAAC,CAAC,CAAC;AAC1F,MAAMC,wBAAwB,GAAG,eAAe,CAAC,MAAMjI,CAAC,CAACqH,KAAK,CAAC,CAACrH,CAAC,CAACwH,MAAM,CAAC,CAAC,EAAExH,CAAC,CAACyH,MAAM,CAACC,IAAI,IAAI;EAC3F,OAAOzH,SAAS,CAAC0H,WAAW,CAACD,IAAI,CAAC;AACpC,CAAC,CAAC,CAAC,CAAC,CAACE,SAAS,CAACC,GAAG,IAAI;EACpB,OAAO5H,SAAS,CAAC6H,IAAI,CAACD,GAAG,CAAC,CAACG,QAAQ,CAAC,CAAC;AACvC,CAAC,CAAC,EAAE,CAAC;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,QAAQA,CAACC,KAAK,EAAE;EACvB,OAAO,CAAC,EAAEA,KAAK,IAAIA,KAAK,CAACC,SAAS,CAAC;AACrC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,UAAUA,CAACF,KAAK,EAAE;EACzB,OAAO,CAAC,EAAEA,KAAK,IAAIA,KAAK,CAACG,WAAW,CAAC;AACvC;AAEA,MAAMC,2BAA2B,GAAG,EAAE;AACtC,MAAMC,wBAAwB,GAAG,GAAG;AACpC,MAAMC,qBAAqB,GAAG;EAC5BC,WAAW,EAAEH,2BAA2B;EACxCI,SAAS,EAAEH;AACb,CAAC;AACD;AACA,MAAMI,0BAA0B,SAAS1I,SAAS,CAAC2I,qBAAqB,CAAC;EACvEC,WAAWA,CAACC,GAAG,EAAEC,OAAO,EAAE;IACxB,IAAIC,YAAY,GAAGC,SAAS,CAACjD,MAAM,GAAG,CAAC,IAAIiD,SAAS,CAAC,CAAC,CAAC,KAAKC,SAAS,GAAGD,SAAS,CAAC,CAAC,CAAC,GAAGT,qBAAqB;IAC5G,KAAK,CAACM,GAAG,EAAEC,OAAO,CAAC;IACnB,IAAI,CAACI,YAAY,GAAGH,YAAY,CAACP,WAAW,IAAIF,wBAAwB;IACxE,IAAI,CAACa,UAAU,GAAGJ,YAAY,CAACN,SAAS,IAAIJ,2BAA2B;IACvE,IAAI,CAACe,uBAAuB,GAAG,IAAI;IACnC,IAAI,CAACC,aAAa,GAAG,IAAI;EAC3B;EACAC,gBAAgBA,CAACC,OAAO,EAAE;IACxB;IACA,IAAI,IAAI,CAACH,uBAAuB,EAAE;MAChCI,YAAY,CAAC,IAAI,CAACJ,uBAAuB,CAAC;IAC5C;IACA;IACA;IACA,MAAMK,KAAK,GAAG,IAAI,CAACJ,aAAa,IAAI,EAAE;IACtC,IAAI,CAACA,aAAa,GAAG,IAAI;IACzB,IAAI,CAACD,uBAAuB,GAAG,IAAI;;IAEnC;IACA,MAAMM,QAAQ,GAAGD,KAAK,CAACE,GAAG,CAACC,QAAQ,IAAIA,QAAQ,CAACL,OAAO,CAAC;IACxD,IAAI,CAACM,IAAI,CAAC,OAAO,EAAE;MACjBC,MAAM,EAAE,cAAc;MACtBP,OAAO,EAAEtJ,KAAK,CAAC8J,QAAQ,CAACR,OAAO,CAAC;MAChCS,QAAQ,EAAE;IACZ,CAAC,CAAC;IACF,OAAO/J,KAAK,CAACgK,SAAS,CAAC,IAAI,CAACC,UAAU,EAAEC,IAAI,CAACC,SAAS,CAACV,QAAQ,CAAC,CAAC,CAACW,IAAI,CAACC,MAAM,IAAI;MAC/E,IAAI,CAACT,IAAI,CAAC,OAAO,EAAE;QACjBC,MAAM,EAAE,UAAU;QAClBP,OAAO,EAAEG,QAAQ;QACjBa,QAAQ,EAAED,MAAM;QAChBN,QAAQ,EAAE;MACZ,CAAC,CAAC;;MAEF;MACA;MACAP,KAAK,CAACe,OAAO,CAAC,CAACC,gBAAgB,EAAEC,KAAK,KAAK;QACzC,MAAMC,OAAO,GAAGL,MAAM,CAACI,KAAK,CAAC;;QAE7B;QACA,IAAIC,OAAO,EAAE;UACX;UACA,IAAIA,OAAO,CAACC,KAAK,EAAE;YACjB,MAAMA,KAAK,GAAG,IAAI5E,KAAK,CAAC2E,OAAO,CAACC,KAAK,CAACC,OAAO,CAAC;YAC9CD,KAAK,CAACE,IAAI,GAAGH,OAAO,CAACC,KAAK,CAACE,IAAI;YAC/BF,KAAK,CAACpD,IAAI,GAAGmD,OAAO,CAACC,KAAK,CAACpD,IAAI;YAC/BiD,gBAAgB,CAACM,MAAM,CAACH,KAAK,CAAC;UAChC,CAAC,MAAM;YACL;YACAH,gBAAgB,CAACO,OAAO,CAACL,OAAO,CAACL,MAAM,CAAC;UAC1C;QACF,CAAC,MAAM;UACL;UACAG,gBAAgB,CAACM,MAAM,CAAC,IAAI/E,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC/D;MACF,CAAC,CAAC;IACJ,CAAC,EAAE4E,KAAK,IAAI;MACV,IAAI,CAACf,IAAI,CAAC,OAAO,EAAE;QACjBC,MAAM,EAAE,UAAU;QAClBc,KAAK,EAAEA,KAAK;QACZrB,OAAO,EAAEG,QAAQ;QACjBM,QAAQ,EAAE;MACZ,CAAC,CAAC;;MAEF;MACAP,KAAK,CAACe,OAAO,CAACC,gBAAgB,IAAI;QAChCA,gBAAgB,CAACM,MAAM,CAACH,KAAK,CAAC;MAChC,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;EACAK,IAAIA,CAACC,MAAM,EAAEC,MAAM,EAAE;IACnB,MAAM5B,OAAO,GAAG;MACd2B,MAAM,EAAEA,MAAM;MACdC,MAAM,EAAEA,MAAM;MACdC,EAAE,EAAE,IAAI,CAACC,OAAO,EAAE;MAClBC,OAAO,EAAE;IACX,CAAC;IACD,IAAI,IAAI,CAACjC,aAAa,KAAK,IAAI,EAAE;MAC/B,IAAI,CAACA,aAAa,GAAG,EAAE;IACzB;IACA,MAAMkC,eAAe,GAAG;MACtBhC,OAAO;MACPyB,OAAO,EAAE,IAAI;MACbD,MAAM,EAAE;IACV,CAAC;IACD,MAAMS,OAAO,GAAG,IAAIC,OAAO,CAAC,CAACT,OAAO,EAAED,MAAM,KAAK;MAC/CQ,eAAe,CAACP,OAAO,GAAGA,OAAO;MACjCO,eAAe,CAACR,MAAM,GAAGA,MAAM;IACjC,CAAC,CAAC;IACF,IAAI,CAAC1B,aAAa,CAACqC,IAAI,CAACH,eAAe,CAAC;;IAExC;IACA,IAAI,IAAI,CAAClC,aAAa,CAACtD,MAAM,KAAK,IAAI,CAACoD,UAAU,EAAE;MACjD,IAAI,CAACG,gBAAgB,CAACC,OAAO,CAAC;IAChC;IACA,IAAI,CAAC,IAAI,CAACH,uBAAuB,EAAE;MACjC;MACA,IAAI,CAACA,uBAAuB,GAAGuC,UAAU,CAAC,MAAM;QAC9C,IAAI,CAACrC,gBAAgB,CAACC,OAAO,CAAC;MAChC,CAAC,EAAE,IAAI,CAACL,YAAY,CAAC;IACvB;IACA,OAAOsC,OAAO;EAChB;AACF;AAEA,MAAMI,oBAAoB,GAAG,eAAe,CAAC,MAAM9L,CAAC,CAAC+L,MAAM,CAAC;EAC1DC,GAAG,EAAEhM,CAAC,CAACiM,KAAK,CAACjM,CAAC,CAACsH,MAAM,CAAC,CAAC,CAACyB,GAAG,CAAC,CAAC,CAAC;EAC9BmD,OAAO,EAAElM,CAAC,CAACuH,MAAM,CAAC,CAAC;EACnB4E,cAAc,EAAEnM,CAAC,CAAC+L,MAAM,CAAC;IACvBK,IAAI,EAAEpM,CAAC,CAACsH,MAAM,CAAC,CAAC;IAChB+E,MAAM,EAAErM,CAAC,CAACsH,MAAM,CAAC,CAAC;IAClBgF,QAAQ,EAAEtM,CAAC,CAACuH,MAAM,CAAC;EACrB,CAAC,CAAC;EACFgF,IAAI,EAAEvM,CAAC,CAACsH,MAAM,CAAC;AACjB,CAAC,CAAC,EAAE,CAAC;;AAEL;AACA;AACA;AACA,MAAMkF,gBAAgB,GAAG,eAAe,CAAC,MAAMxM,CAAC,CAAC+L,MAAM,CAAC;EACtD;EACAU,eAAe,EAAEzM,CAAC,CAACiM,KAAK,CAACH,oBAAoB,CAAC,CAACY,OAAO,CAACjL,aAAa,CAAC;EACrEkL,QAAQ,EAAE3M,CAAC,CAACsH,MAAM,CAAC,CAAC,CAACsF,QAAQ,CAAC,CAAC;EAC/BC,SAAS,EAAE7M,CAAC,CAACsH,MAAM,CAAC,CAAC,CAACsF,QAAQ,CAAC,CAAC;EAChCE,gBAAgB,EAAE9M,CAAC,CAAC+L,MAAM,CAAC;IACzBgB,MAAM,EAAE/M,CAAC,CAACsH,MAAM,CAAC,CAAC,CAACyB,GAAG,CAAC,CAAC;IACxBmD,OAAO,EAAElM,CAAC,CAACuH,MAAM,CAAC,CAAC,CAACqF,QAAQ,CAAC;EAC/B,CAAC,CAAC,CAACA,QAAQ,CAAC,CAAC;EACbI,WAAW,EAAEhN,CAAC,CAAC+L,MAAM,CAAC;IACpBkB,cAAc,EAAEjN,CAAC,CAACuH,MAAM,CAAC,CAAC,CAAC2F,GAAG,CAAC,CAAC,EAAE,iCAAiC,CAAC,CAACR,OAAO,CAAC,GAAG,CAAC;IACjFS,KAAK,EAAEnN,CAAC,CAACoN,IAAI,CAAC,CAAC,UAAU,EAAE,MAAM,EAAE,SAAS,CAAC,CAAC,CAACV,OAAO,CAAC,SAAS;EAClE,CAAC,CAAC,CAACA,OAAO,CAAC;IACTO,cAAc,EAAE,GAAG;IACnBE,KAAK,EAAE;EACT,CAAC,CAAC;EACFE,OAAO,EAAErN,CAAC,CAACqH,KAAK,CAAC,CAACrH,CAAC,CAAC+L,MAAM,CAAC;IACzBuB,YAAY,EAAEtN,CAAC,CAAC+L,MAAM,CAAC;MACrBwB,UAAU,EAAEvN,CAAC,CAACsH,MAAM,CAAC,CAAC,CAACyB,GAAG,CAAC,CAAC;MAC5ByE,uBAAuB,EAAExN,CAAC,CAACsH,MAAM,CAAC,CAAC,CAACsF,QAAQ,CAAC,CAAC;MAC9Ca,eAAe,EAAEzN,CAAC,CAAC0N,OAAO,CAAC,CAAC,CAAChB,OAAO,CAAC,KAAK,CAAC;MAC3CiB,UAAU,EAAE3N,CAAC,CAACsH,MAAM,CAAC,CAAC,CAACoF,OAAO,CAAC,iBAAiB,CAAC;MACjDkB,aAAa,EAAE5N,CAAC,CAACsH,MAAM,CAAC,CAAC,CAACoF,OAAO,CAAC,OAAO;IAC3C,CAAC,CAAC;IACFmB,4BAA4B,EAAE7N,CAAC,CAAC0N,OAAO,CAAC,CAAC,CAAChB,OAAO,CAAC,KAAK;EACzD,CAAC,CAAC,EAAE1M,CAAC,CAAC+L,MAAM,CAAC;IACX+B,QAAQ,EAAE9N,CAAC,CAAC+L,MAAM,CAAC;MACjBgC,KAAK,EAAE/N,CAAC,CAACsH,MAAM,CAAC,CAAC;MACjB0G,MAAM,EAAEhO,CAAC,CAACsH,MAAM,CAAC,CAAC;MAClB2G,eAAe,EAAEjO,CAAC,CAACuH,MAAM,CAAC,CAAC,CAAC2F,GAAG,CAAC,CAAC,EAAE,sCAAsC,CAAC,CAACR,OAAO,CAAC,IAAI;IACzF,CAAC;EACH,CAAC,CAAC,CAAC,CAAC,CAACE,QAAQ,CAAC,CAAC;EACfsB,WAAW,EAAElO,CAAC,CAACiM,KAAK,CAACjM,CAAC,CAACsH,MAAM,CAAC,CAAC,CAAC,CAACsF,QAAQ,CAAC;AAC5C,CAAC,CAAC,CAACF,OAAO,CAAC;EACTM,WAAW,EAAE;IACXC,cAAc,EAAE,GAAG;IACnBE,KAAK,EAAE;EACT;AACF,CAAC,CAAC,EAAE,CAAC;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,IAAIgB,GAAG,GAAG;EACT/B,IAAI,EAAE,mBAAmB;EACzBpG,OAAO,EAAE,SAAS;EAClBoI,WAAW,EAAE,wBAAwB;EACrCC,UAAU,EAAE,2DAA2D;EACvEC,OAAO,EAAE,YAAY;EACrBC,IAAI,EAAE,8BAA8B;EACpCC,MAAM,EAAE,8BAA8B;EACtCC,OAAO,EAAE;IACR,gCAAgC,EAAE;EACnC,CAAC;EACDC,OAAO,EAAE;IACR,GAAG,EAAE;MACJF,MAAM,EAAE;QACPC,OAAO,EAAE,wCAAwC;QACjD,SAAS,EAAE;MACZ,CAAC;MACD,SAAS,EAAE;IACZ,CAAC;IACD,OAAO,EAAE;MACRD,MAAM,EAAE;QACPC,OAAO,EAAE,gDAAgD;QACzD,SAAS,EAAE;MACZ,CAAC;MACD,SAAS,EAAE;IACZ,CAAC;IACD,UAAU,EAAE;MACXD,MAAM,EAAE;QACPC,OAAO,EAAE,sDAAsD;QAC/D,SAAS,EAAE;MACZ,CAAC;MACD,SAAS,EAAE;IACZ,CAAC;IACD,cAAc,EAAE;MACfD,MAAM,EAAE;QACPC,OAAO,EAAE,8DAA8D;QACvE,SAAS,EAAE;MACZ,CAAC;MACD,SAAS,EAAE;IACZ,CAAC;IACD,iBAAiB,EAAE;MAClBD,MAAM,EAAE;QACPC,OAAO,EAAE,oEAAoE;QAC7E,SAAS,EAAE;MACZ,CAAC;MACD,SAAS,EAAE;IACZ,CAAC;IACD,iBAAiB,EAAE;MAClBD,MAAM,EAAE;QACPC,OAAO,EAAE,oEAAoE;QAC7E,SAAS,EAAE;MACZ,CAAC;MACD,SAAS,EAAE;IACZ,CAAC;IACD,gBAAgB,EAAE;EACnB,CAAC;EACDE,KAAK,EAAE,CACN,OAAO,EACP,MAAM,EACN,SAAS,EACT,SAAS,CACT;EACDC,YAAY,EAAE;IACbC,WAAW,EAAE,CACZ,UAAU,EACV,cAAc,EACd,wBAAwB,EACxB,qBAAqB,EACrB,iBAAiB,EACjB,wBAAwB,CACxB;IACDH,OAAO,EAAE;MACRI,aAAa,EAAE,CACd,SAAS;IAEX;EACD,CAAC;EACDC,WAAW,EAAE,KAAK;EAClBC,OAAO,EAAE;IACRC,MAAM,EAAE,6BAA6B;IACrCC,IAAI,EAAE,aAAa;IACnBC,GAAG,EAAE,mBAAmB;IACxBC,KAAK,EAAE,cAAc;IACrB,eAAe,EAAE,+EAA+E;IAChG,mBAAmB,EAAE,oKAAoK;IACzL,sBAAsB,EAAE,gLAAgL;IACxM,mBAAmB,EAAE,0FAA0F;IAC/GC,KAAK,EAAE,2BAA2B;IAClC,cAAc,EAAE,0LAA0L;IAC1M,UAAU,EAAE,eAAe;IAC3B,iBAAiB,EAAE,iGAAiG;IACpH,mBAAmB,EAAE,2DAA2D;IAChF,kBAAkB,EAAE,YAAY;IAChC,iBAAiB,EAAE,oMAAoM;IACvN,aAAa,EAAE,eAAe;IAC9B,oBAAoB,EAAE,oGAAoG;IAC1HzD,IAAI,EAAE;EACP,CAAC;EACD0D,eAAe,EAAE;IAChB,iCAAiC,EAAE,UAAU;IAC7C,kCAAkC,EAAE,QAAQ;IAC5C,4BAA4B,EAAE,SAAS;IACvC,mCAAmC,EAAE,QAAQ;IAC7C,yBAAyB,EAAE,SAAS;IACpC,yCAAyC,EAAE,SAAS;IACpD,2BAA2B,EAAE,UAAU;IACvC,0BAA0B,EAAE,SAAS;IACrC,kBAAkB,EAAE,SAAS;IAC7B,2BAA2B,EAAE,QAAQ;IACrC,mBAAmB,EAAE,OAAO;IAC5B,uBAAuB,EAAE,SAAS;IAClC,mBAAmB,EAAE,QAAQ;IAC7B,iBAAiB,EAAE,SAAS;IAC5B,oBAAoB,EAAE,QAAQ;IAC9B,WAAW,EAAE,SAAS;IACtB,wBAAwB,EAAE,aAAa;IACvC,cAAc,EAAE,QAAQ;IACxB,aAAa,EAAE,QAAQ;IACvB,gCAAgC,EAAE,QAAQ;IAC1C,cAAc,EAAE,SAAS;IACzB,aAAa,EAAE,UAAU;IACzB,aAAa,EAAE,QAAQ;IACvB,kCAAkC,EAAE,QAAQ;IAC5C,2BAA2B,EAAE,QAAQ;IACrCC,IAAI,EAAE,QAAQ;IACd,yBAAyB,EAAE,SAAS;IACpC,aAAa,EAAE,SAAS;IACxBC,MAAM,EAAE,SAAS;IACjB,wBAAwB,EAAE,QAAQ;IAClC,wBAAwB,EAAE,aAAa;IACvC,mCAAmC,EAAE,OAAO;IAC5C,sBAAsB,EAAE,SAAS;IACjC,kCAAkC,EAAE,QAAQ;IAC5C,wBAAwB,EAAE,QAAQ;IAClC,qBAAqB,EAAE,SAAS;IAChCC,MAAM,EAAE,QAAQ;IAChB,uBAAuB,EAAE,QAAQ;IACjCC,OAAO,EAAE,SAAS;IAClBC,KAAK,EAAE,SAAS;IAChBC,GAAG,EAAE,SAAS;IACdC,QAAQ,EAAE,QAAQ;IAClBC,UAAU,EAAE,QAAQ;IACpB,aAAa,EAAE;EAChB,CAAC;EACDC,gBAAgB,EAAE;IACjB,iCAAiC,EAAE,UAAU;IAC7C,yBAAyB,EAAE,SAAS;IACpC,yCAAyC,EAAE,QAAQ;IACnD,uBAAuB,EAAE,SAAS;IAClC,mBAAmB,EAAE,QAAQ;IAC7B,iBAAiB,EAAE,SAAS;IAC5BN,MAAM,EAAE,IAAI;IACZ,uBAAuB,EAAE,QAAQ;IACjC,aAAa,EAAE;EAChB,CAAC;EACDO,oBAAoB,EAAE;IACrB,iCAAiC,EAAE;MAClCpD,QAAQ,EAAE;IACX,CAAC;IACD,uBAAuB,EAAE;MACxBA,QAAQ,EAAE;IACX,CAAC;IACD,mBAAmB,EAAE;MACpBA,QAAQ,EAAE;IACX,CAAC;IACD,iBAAiB,EAAE;MAClBA,QAAQ,EAAE;IACX,CAAC;IACD,uBAAuB,EAAE;MACxBA,QAAQ,EAAE;IACX,CAAC;IACD,yCAAyC,EAAE;MAC1CA,QAAQ,EAAE;IACX,CAAC;IACD,yBAAyB,EAAE;MAC1BA,QAAQ,EAAE;IACX,CAAC;IACD,aAAa,EAAE;MACdA,QAAQ,EAAE;IACX;EACD,CAAC;EACDqD,YAAY,EAAE;IACb,sBAAsB,EAAE,aAAa;IACrC,4BAA4B,EAAE,aAAa;IAC3C,8BAA8B,EAAE,aAAa;IAC7C,uBAAuB,EAAE,aAAa;IACtCC,OAAO,EAAE,QAAQ;IACjB,OAAO,EAAE,QAAQ;IACjBrO,IAAI,EAAE,QAAQ;IACdsO,MAAM,EAAE,QAAQ;IAChB,aAAa,EAAE,QAAQ;IACvBC,aAAa,EAAE,QAAQ;IACvB,iBAAiB,EAAE,QAAQ;IAC3BC,YAAY,EAAE,SAAS;IACvB,gBAAgB,EAAE,QAAQ;IAC1BC,SAAS,EAAE,QAAQ;IACnBC,IAAI,EAAE,QAAQ;IACdC,IAAI,EAAE,QAAQ;IACdC,GAAG,EAAE;EACN,CAAC;EACDC,IAAI,EAAE;IACL3H,GAAG,EAAE;EACN,CAAC;EACD4H,MAAM,EAAE;AACT,CAAC;;AAED;AACA;AACA;AACA,SAASC,eAAeA,CAACC,OAAO,EAAE;EAChC,OAAOA,OAAO,CAACpE,eAAe,CAACqE,MAAM,CAAC,CAACC,aAAa,EAAEC,YAAY,KAAK;IACrED,aAAa,CAACC,YAAY,CAAC9E,OAAO,CAAC,GAAG8E,YAAY;IAClD,OAAOD,aAAa;EACtB,CAAC,EAAE,CAAC,CAAC,CAAC;AACR;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASE,gBAAgBA,CAACjI,OAAO,EAAEkI,UAAU,EAAE;EAC7C;EACA,IAAI,OAAOlI,OAAO,KAAK,QAAQ,IAAImI,QAAQ,CAACnI,OAAO,CAAC,EAAE;IACpD,OAAOoI,qBAAqB,CAACpI,OAAO,EAAEkI,UAAU,CAAC;EACnD;;EAEA;EACA,MAAML,OAAO,GAAGrE,gBAAgB,CAAC6E,KAAK,CAACH,UAAU,CAAC;EAClD,IAAII,aAAa,CAACtI,OAAO,CAAC,EAAE;IAC1B6H,OAAO,CAACpE,eAAe,GAAG;IAC1B;IACAzD,OAAO,EAAE,GAAG6H,OAAO,CAACpE,eAAe,CAAC8E,MAAM,CAAC3R,CAAC,IAAIA,CAAC,CAACsM,OAAO,KAAKlD,OAAO,CAACkD,OAAO,CAAC,CAAC;EACjF;;EAEA;EACA,MAAMsF,MAAM,GAAGZ,eAAe,CAACC,OAAO,CAAC;EACvC,IAAI9D,MAAM,GAAG,EAAE;EACf,IAAIb,OAAO;EACX,IAAI;IACF;IACAA,OAAO,GAAGuF,qBAAqB,CAACzI,OAAO,EAAE6H,OAAO,CAAC;IACjD;IACA9D,MAAM,GAAGrL,iBAAiB,CAAC8P,MAAM,CAACtF,OAAO,CAAC,EAAE2E,OAAO,CAAClE,QAAQ,CAAC,CAAC,CAAC,CAAC;EAClE,CAAC,CAAC,OAAO+E,CAAC,EAAE;IACV;EAAA;;EAGF;EACA,IAAI,CAAC3E,MAAM,EAAE;IACXA,MAAM,cAAAnH,MAAA,CAAcsG,OAAO,IAAIlD,OAAO,wBAAApD,MAAA,CAAqBiL,OAAO,CAAClE,QAAQ,IAAI,EAAE,CAAE;EACrF;EACA,IAAI,CAACI,MAAM,EAAE;IACX,MAAM,IAAI7G,KAAK,+BAAAN,MAAA,CAA+BoD,OAAO,4FAAyF,CAAC;EACjJ;EACA,OAAOoI,qBAAqB,CAACrE,MAAM,EAAEmE,UAAU,EAAEhF,OAAO,CAAC;AAC3D;AACA,SAASuF,qBAAqBA,CAACzI,OAAO,EAAE6H,OAAO,EAAE;EAC/C,IAAIS,aAAa,CAACtI,OAAO,CAAC,EAAE;IAC1B;IACA,OAAOA,OAAO,CAACkD,OAAO;EACxB,CAAC,MAAM,IAAI,OAAOlD,OAAO,KAAK,QAAQ,EAAE;IACtC;IACA,OAAOA,OAAO;EAChB,CAAC,MAAM;IACL;IACA,MAAM2I,aAAa,GAAGd,OAAO,CAACpE,eAAe,CAACqE,MAAM,CAAC,CAACc,GAAG,EAAEC,IAAI,KAAK;MAClED,GAAG,CAACC,IAAI,CAACtF,IAAI,CAAC,GAAGsF,IAAI,CAAC3F,OAAO;MAC7B,OAAO0F,GAAG;IACZ,CAAC,EAAE,CAAC,CAAC,CAAC;IACN,IAAI5I,OAAO,IAAI2I,aAAa,EAAE;MAC5B,OAAOA,aAAa,CAAC3I,OAAO,CAAC;IAC/B;EACF;EACA,MAAM,IAAI9C,KAAK,iCAAAN,MAAA,CAAiCoD,OAAO,4GAAyG,CAAC;AACnK;AACA,eAAe8I,gBAAgBA,CAAC9I,OAAO,EAAE;EACvC,IAAIsI,aAAa,CAACtI,OAAO,CAAC,EAAE;IAC1B;IACA,OAAOA,OAAO,CAACkD,OAAO;EACxB,CAAC,MAAM,IAAI,OAAOlD,OAAO,KAAK,QAAQ,EAAE;IACtC;IACA,OAAOA,OAAO;EAChB,CAAC,MAAM,IAAI,OAAOA,OAAO,KAAK,QAAQ,EAAE;IACtC;IACA,OAAOA,OAAO;EAChB,CAAC,MAAM,IAAIX,UAAU,CAACW,OAAO,CAAC,EAAE;IAC9B,OAAOA,OAAO,CAAC+I,UAAU,CAAC,CAAC,CAACxH,IAAI,CAACyH,CAAC,IAAIA,CAAC,CAAC9F,OAAO,CAAC;EAClD,CAAC,MAAM,IAAIhE,QAAQ,CAACc,OAAO,CAAC,EAAE;IAC5B,IAAI,CAACA,OAAO,CAACkB,QAAQ,EAAE;MACrB,MAAM,IAAIhE,KAAK,CAAC,iCAAiC,CAAC;IACpD;IACA,OAAO8C,OAAO,CAACkB,QAAQ,CAAC6H,UAAU,CAAC,CAAC,CAACxH,IAAI,CAACyH,CAAC,IAAIA,CAAC,CAAC9F,OAAO,CAAC;EAC3D;EACA,MAAM,IAAIhG,KAAK,iCAAAN,MAAA,CAAiCoD,OAAO,MAAG,CAAC;AAC7D;;AAEA;AACA;AACA;AACA,SAASsI,aAAaA,CAACtI,OAAO,EAAE;EAC9B,OAAO,OAAOA,OAAO,KAAK,QAAQ,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAI,CAACd,QAAQ,CAACc,OAAO,CAAC,IAAI,CAACX,UAAU,CAACW,OAAO,CAAC;AACjH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASmI,QAAQA,CAACpI,GAAG,EAAE;EACrB,MAAM1C,KAAK,GAAG0C,GAAG,CAAC1C,KAAK,CAAC,gBAAgB,CAAC;EACzC,IAAIA,KAAK,EAAE;IACT,QAAQA,KAAK,CAAC,CAAC,CAAC,CAAC4L,WAAW,CAAC,CAAC;MAC5B,KAAK,MAAM;MACX,KAAK,OAAO;MACZ,KAAK,IAAI;MACT,KAAK,KAAK;QACR,OAAO,IAAI;IACf;EACF;EACA,OAAO,KAAK;AACd;AACA,MAAMC,gBAAgB,GAAG,IAAIC,GAAG,CAAC,CAAC;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASf,qBAAqBA,CAACrE,MAAM,EAAEmE,UAAU,EAAEhF,OAAO,EAAE;EAC1D,IAAI;IACF,MAAMkG,OAAO,GAAG,CAAC,CAAC;IAClB;IACA,IAAIC,YAAY,GAAG,MAAM;IACzB,IAAIC,OAAO,CAACvF,MAAM,CAAC,EAAE;MACnB;MACA,IAAImE,UAAU,aAAVA,UAAU,eAAVA,UAAU,CAAErE,SAAS,EAAE;QACzB;QACA;QACA,IAAI,QAAQ,KAAK,WAAW,EAAE;UAC5B,MAAM,IAAI3G,KAAK,CAAC,yCAAyC,CAAC;QAC5D;QACA;QACA;QACA,MAAMqM,GAAG,GAAG,KAAK;QACjB;QACA,MAAMC,MAAM,GAAGC,OAAO,CAAC,KAAK,GAAGF,GAAG,CAAC;QACnC,MAAMG,eAAe,GAAGF,MAAM,CAACG,UAAU,CAAC,QAAQ,CAAC,CAACC,MAAM,CAAC1B,UAAU,CAACrE,SAAS,CAAC,CAACgG,MAAM,CAAC,KAAK,CAAC;QAC9F,MAAMC,eAAe,GAAGJ,eAAe,CAACK,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;QACpD,MAAMC,cAAc,GAAG,IAAIC,GAAG,CAAClG,MAAM,CAAC;QACtC;QACAiG,cAAc,CAACE,QAAQ,GAAGJ,eAAe;QACzC;QACAV,OAAO,CAAC,aAAa,CAAC,GAAGU,eAAe;QACxCV,OAAO,CAAC,cAAc,CAAC,GAAGlB,UAAU,CAACrE,SAAS;QAC9C;QACAE,MAAM,GAAGiG,cAAc,CAAChL,QAAQ,CAAC,CAAC;QAClCqK,YAAY,GAAG,WAAW;MAC5B;MACA;MAAA,KACK,IAAInB,UAAU,aAAVA,UAAU,eAAVA,UAAU,CAAEvE,QAAQ,EAAE;QAC7B,MAAMqG,cAAc,GAAG,IAAIC,GAAG,CAAClG,MAAM,CAAC;QACtC;QACAiG,cAAc,CAACE,QAAQ,GAAGhC,UAAU,CAACvE,QAAQ;QAC7C;QACAyF,OAAO,CAAC,aAAa,CAAC,GAAGlB,UAAU,CAACvE,QAAQ;QAC5C;QACAI,MAAM,GAAGiG,cAAc,CAAChL,QAAQ,CAAC,CAAC;QAClCqK,YAAY,GAAG,UAAU;MAC3B;;MAEA;MACA,IAAI,OAAOc,UAAU,KAAK,WAAW,IAAI,eAAe,IAAIA,UAAU,IAAI,OAAOA,UAAU,CAACC,aAAa,KAAK,QAAQ,EAAE;QACtHhB,OAAO,CAAC,eAAe,CAAC,aAAAxM,MAAA,CAAauN,UAAU,CAACC,aAAa,CAAE;QAC/Df,YAAY,GAAG,aAAa;MAC9B;MACA,IAAI,OAAOc,UAAU,KAAK,WAAW,IAAI,mBAAmB,IAAIA,UAAU,IAAI,OAAOA,UAAU,CAACE,iBAAiB,KAAK,QAAQ,EAAE;QAC9HjB,OAAO,CAAC,oBAAoB,CAAC,GAAG,MAAM;MACxC;MACA,MAAMkB,QAAQ,GAAG,OAAOH,UAAU,KAAK,WAAW,IAAI,eAAe,IAAIA,UAAU,GAAGA,UAAU,CAACI,aAAa,GAAGpK,SAAS;MAC1H,IAAI,CAAC4D,MAAM,CAACyG,QAAQ,CAAC,UAAU,CAAC,EAAE;QAChCzG,MAAM,GAAGA,MAAM,IAAIuG,QAAQ,gBAAA1N,MAAA,CAAgB0N,QAAQ,IAAK,EAAE,CAAC;MAC7D;MACAlB,OAAO,CAAC,eAAe,CAAC,GAAGjE,GAAG,CAACnI,OAAO;MACtCoM,OAAO,CAAC,YAAY,CAAC,GAAGjE,GAAG,CAAC/B,IAAI;MAChCgG,OAAO,CAAC,gBAAgB,CAAC,GAAGkB,QAAQ,GAAG,cAAc,GAAG5S,WAAW,CAAC,CAAC,GAAG+S,MAAM,CAACC,MAAM,KAAKvK,SAAS,GAAG,OAAO,GAAG,SAAS,GAAG,MAAM;IACpI;IACA,MAAM9C,KAAK,GAAG0G,MAAM,CAAC1G,KAAK,CAAC,gBAAgB,CAAC;IAC5C;IACA,IAAIA,KAAK,EAAE;MACT,QAAQA,KAAK,CAAC,CAAC,CAAC,CAAC4L,WAAW,CAAC,CAAC;QAC5B,KAAK,MAAM;QACX,KAAK,OAAO;UACV;UACA,MAAM0B,aAAa,MAAA/N,MAAA,CAAMmH,MAAM,OAAAnH,MAAA,CAAIsG,OAAO,IAAI,CAAC,CAAC,OAAAtG,MAAA,CAAIyM,YAAY,CAAE;;UAElE;UACA,MAAMuB,gBAAgB,GAAG1B,gBAAgB,CAAC2B,GAAG,CAACF,aAAa,CAAC;UAC5D,IAAIC,gBAAgB,EAAE;YACpB,OAAOA,gBAAgB;UACzB;;UAEA;UACA,MAAME,WAAW,GAAG5H,OAAO;UAC3B;UACA,IAAItD,0BAA0B,CAAC;YAC7BG,GAAG,EAAEgE,MAAM;YACXqF;UACF,CAAC,EAAElG,OAAO,CAAC;UACX;UACA,IAAIhM,SAAS,CAAC6T,oBAAoB,CAAC;YACjChL,GAAG,EAAEgE,MAAM;YACXqF;UACF,CAAC,CAAC;;UAEF;UACAF,gBAAgB,CAAC8B,GAAG,CAACL,aAAa,EAAEG,WAAW,CAAC;UAChD,OAAOA,WAAW;QACpB,KAAK,IAAI;QACT,KAAK,KAAK;UACR;UACA;UACA,OAAO,IAAI5T,SAAS,CAAC+T,iBAAiB,CAAClH,MAAM,EAAEb,OAAO,CAAC;MAC3D;IACF;EACF,CAAC,CAAC,OAAOwF,CAAC,EAAE;IACV;EAAA;;EAGF;EACA,OAAOxR,SAAS,CAACgU,kBAAkB,CAACnH,MAAM,CAAC;AAC7C;;AAEA;AACA,SAASuF,OAAOA,CAACvJ,GAAG,EAAE;EACpB,OAAO,IAAIkK,GAAG,CAAClK,GAAG,CAAC,CAACoL,QAAQ,CAACC,QAAQ,CAAC,eAAe,CAAC;AACxD;;AAEA;AACA;AACA;AACA,SAASC,oBAAoBA,CAACrL,OAAO,EAAE6H,OAAO,EAAE;EAC9C,IAAIyD,MAAM;EACV,IAAIpK,QAAQ;EACZ,IAAIhC,QAAQ,CAACc,OAAO,CAAC,EAAE;IACrB;IACAsL,MAAM,GAAGtL,OAAO;IAChB,IAAIA,OAAO,CAACkB,QAAQ,EAAE;MACpBA,QAAQ,GAAGlB,OAAO,CAACkB,QAAQ;IAC7B;EACF,CAAC,MAAM,IAAI7B,UAAU,CAACW,OAAO,CAAC,EAAE;IAC9B;IACAkB,QAAQ,GAAGlB,OAAO;EACpB,CAAC,MAAM;IACL;IACA;IACAkB,QAAQ,GAAG+G,gBAAgB,CAACjI,OAAO,EAAE6H,OAAO,CAAC;EAC/C;EACA,IAAIA,OAAO,aAAPA,OAAO,eAAPA,OAAO,CAAE/D,gBAAgB,EAAE;IAC7B;IACA5C,QAAQ,GAAGkH,qBAAqB,CAACP,OAAO,CAAC/D,gBAAgB,CAACC,MAAM,EAAE8D,OAAO,EAAEA,OAAO,CAAC/D,gBAAgB,CAACZ,OAAO,CAAC;EAC9G;;EAEA;EACA;EACA,IAAI,CAAChC,QAAQ,EAAE;IACb,IAAIoK,MAAM,EAAE;MACV,MAAM,IAAIpO,KAAK,CAAC,8FAA8F,CAAC;IACjH;IACA,MAAM,IAAIA,KAAK,CAAC,+GAA+G,CAAC;EAClI;EACA,OAAO,CAACoO,MAAM,EAAEpK,QAAQ,CAAC;AAC3B;;AAEA;AACA,IAAIA,QAAQ;AACZ,MAAMqK,SAAS,GAAG,IAAIpC,GAAG,CAAC,CAAC;AAC3B,eAAeqC,UAAUA,CAACC,GAAG,EAAE;EAC7B,IAAIC,KAAK,GAAGxL,SAAS,CAACjD,MAAM,GAAG,CAAC,IAAIiD,SAAS,CAAC,CAAC,CAAC,KAAKC,SAAS,GAAGD,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC;EACjF,IAAI,CAACgB,QAAQ,EAAE;IACb;IACAA,QAAQ,GAAGmK,oBAAoB,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;EAChD;EACA,IAAIM,UAAU;EACd,IAAIJ,SAAS,CAACK,GAAG,CAACH,GAAG,CAAC,EAAE;IACtBE,UAAU,GAAGJ,SAAS,CAACV,GAAG,CAACY,GAAG,CAAC;EACjC,CAAC,MAAM;IACLE,UAAU,GAAGzK,QAAQ,CAAC2K,WAAW,CAACJ,GAAG,CAAC,CAAClK,IAAI,CAACuK,OAAO,IAAI;MACrD;MACA,IAAI,CAACA,OAAO,EAAE;QACZ,OAAO;UACLA,OAAO,EAAE,IAAI;UACbC,cAAc,EAAE,IAAIC,IAAI,CAACA,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI,GAAG,EAAE;QACjD,CAAC;MACH;;MAEA;MACA,OAAO;QACLH,OAAO;QACPC,cAAc,EAAE,IAAIC,IAAI,CAACA,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI,GAAG,EAAE,GAAG,CAAC;MACrD,CAAC;IACH,CAAC,CAAC;EACJ;EACA,MAAMC,eAAe,GAAG,MAAMP,UAAU;EACxC,IAAIO,eAAe,CAACH,cAAc,GAAG,IAAIC,IAAI,CAAC,CAAC,EAAE;IAC/C;IACAT,SAAS,CAACY,MAAM,CAACV,GAAG,CAAC;IACrB;IACA,IAAIC,KAAK,KAAK,CAAC,EAAE;MACfF,UAAU,CAACC,GAAG,EAAEC,KAAK,GAAG,CAAC,CAAC;IAC5B;EACF;EACA,OAAOQ,eAAe,CAACJ,OAAO;AAChC;;AAEA;AACA,MAAMM,SAAS,GAAG,eAAe,CAAC,MAAMpV,CAAC,CAACyH,MAAM,CAACgN,GAAG,IAAI,OAAOA,GAAG,KAAK,QAAQ,KAAKA,GAAG,CAACL,QAAQ,CAAC,MAAM,CAAC,IAAIK,GAAG,CAACL,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAACxM,SAAS,CAAC,MAAM6M,GAAG,IAAID,UAAU,CAACC,GAAG,CAAC,CAAC,CAACY,MAAM,CAACP,OAAO,IAAI,CAAC,CAACA,OAAO,IAAI3U,KAAK,CAACmV,SAAS,CAACR,OAAO,CAAC,EAAE;EACpO/J,OAAO,EAAE;AACX,CAAC,CAAC,EAAE,CAAC;AAEL,MAAMwK,aAAa,GAAG,eAAevV,CAAC,CAACyH,MAAM,CAACqN,OAAO,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAI3U,KAAK,CAACmV,SAAS,CAACR,OAAO,CAAC,EAAEU,GAAG,IAAI;EACvH,OAAO;IACLzK,OAAO,KAAAnF,MAAA,CAAK4P,GAAG;EACjB,CAAC;AACH,CAAC,CAAC;;AAEF;AACA,MAAMC,kBAAkB,GAAG,eAAezV,CAAC,CAACqH,KAAK,CAAC,CAACkO,aAAa,EAAEH,SAAS,CAAC,EAAE;EAC5EM,kBAAkB,EAAE;AACtB,CAAC,CAAC;;AAEF;AACA;;AAEA;AACA;AACA;AACA,IAAIC,OAAO,GAAG,aAAa,UAAUA,OAAO,EAAE;EAC5CA,OAAO,CAACA,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,GAAG,SAAS;EAC3CA,OAAO,CAACA,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,GAAG,QAAQ;EACzCA,OAAO,CAACA,OAAO,CAAC,SAAS,CAAC,GAAG,GAAG,CAAC,GAAG,SAAS;EAC7CA,OAAO,CAACA,OAAO,CAAC,QAAQ,CAAC,GAAG,KAAK,CAAC,GAAG,QAAQ;EAC7CA,OAAO,CAACA,OAAO,CAAC,WAAW,CAAC,GAAG,IAAI,CAAC,GAAG,WAAW;EAClDA,OAAO,CAACA,OAAO,CAAC,SAAS,CAAC,GAAG,KAAK,CAAC,GAAG,SAAS;EAC/CA,OAAO,CAACA,OAAO,CAAC,QAAQ,CAAC,GAAG,GAAG,CAAC,GAAG,QAAQ;EAC3CA,OAAO,CAACA,OAAO,CAAC,eAAe,CAAC,GAAG,IAAI,CAAC,GAAG,eAAe;EAC1DA,OAAO,CAACA,OAAO,CAAC,WAAW,CAAC,GAAG,KAAK,CAAC,GAAG,WAAW;EACnDA,OAAO,CAACA,OAAO,CAAC,sBAAsB,CAAC,GAAG,KAAK,CAAC,GAAG,sBAAsB;EACzEA,OAAO,CAACA,OAAO,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC,GAAG,UAAU;EAC9CA,OAAO,CAACA,OAAO,CAAC,gBAAgB,CAAC,GAAG,GAAG,CAAC,GAAG,gBAAgB;EAC3DA,OAAO,CAACA,OAAO,CAAC,UAAU,CAAC,GAAG,KAAK,CAAC,GAAG,UAAU;EACjDA,OAAO,CAACA,OAAO,CAAC,gBAAgB,CAAC,GAAG,MAAM,CAAC,GAAG,gBAAgB;EAC9DA,OAAO,CAACA,OAAO,CAAC,0BAA0B,CAAC,GAAG,EAAE,CAAC,GAAG,0BAA0B;EAC9EA,OAAO,CAACA,OAAO,CAAC,0BAA0B,CAAC,GAAG,EAAE,CAAC,GAAG,0BAA0B;EAC9E,OAAOA,OAAO;AAChB,CAAC,CAAC,CAAC,CAAC,CAAC;;AAEL;AACA,IAAIlJ,eAAe,GAAGhL,aAAa;;AAEnC;AACA;AACA;AACA,SAASmU,kBAAkBA,CAACC,MAAM,EAAE;EAClC,IAAIA,MAAM,IAAIA,MAAM,CAAC5P,MAAM,GAAG,CAAC,EAAE;IAC/BwG,eAAe,GAAGoJ,MAAM;EAC1B,CAAC,MAAM;IACL;IACApJ,eAAe,GAAGhL,aAAa;EACjC;AACF;;AAEA;AACA;AACA;AACA,SAASqU,kBAAkBA,CAAA,EAAG;EAC5B,OAAOrJ,eAAe;AACxB;;AAEA;AACA;AACA;AACA,MAAMsJ,oBAAoB,GAAG,4CAA4C;;AAEzE;AACA;AACA;AACA,MAAMC,aAAa,GAAG;EACpB,CAACL,OAAO,CAACM,OAAO,GAAG;IACjB7J,IAAI,EAAE,OAAO;IACbC,MAAM,EAAE,KAAK;IACbC,QAAQ,EAAE,EAAE;IACZ4J,OAAO,EAAE;MACPpB,OAAO,EAAE,4CAA4C;MACrD1I,IAAI,EAAE,eAAe;MACrBC,MAAM,EAAE;IACV;EACF,CAAC;EACD,CAACsJ,OAAO,CAACQ,MAAM,GAAG;IAChB/J,IAAI,EAAE,aAAa;IACnBC,MAAM,EAAE,KAAK;IACbC,QAAQ,EAAE,EAAE;IACZ4J,OAAO,EAAE;MACPpB,OAAO,EAAE,4CAA4C;MACrD1I,IAAI,EAAE,eAAe;MACrBC,MAAM,EAAE;IACV;EACF,CAAC;EACD,QAAQ,EAAE;IACRD,IAAI,EAAE,eAAe;IACrBC,MAAM,EAAE,KAAK;IACbC,QAAQ,EAAE,EAAE;IACZ4J,OAAO,EAAE;MACPpB,OAAO,EAAE,4CAA4C;MACrD1I,IAAI,EAAE,eAAe;MACrBC,MAAM,EAAE;IACV;EACF,CAAC;EACD,CAACsJ,OAAO,CAAChU,OAAO,GAAG;IACjByK,IAAI,EAAE,OAAO;IACbC,MAAM,EAAE,OAAO;IACfC,QAAQ,EAAE,EAAE;IACZ4J,OAAO,EAAE;MACPpB,OAAO,EAAE,4CAA4C;MACrD1I,IAAI,EAAE,eAAe;MACrBC,MAAM,EAAE;IACV;EACF,CAAC;EACD,CAACsJ,OAAO,CAAC/T,MAAM,GAAG;IAChBwK,IAAI,EAAE,OAAO;IACbC,MAAM,EAAE,OAAO;IACfC,QAAQ,EAAE,EAAE;IACZ4J,OAAO,EAAE;MACPpB,OAAO,EAAE,4CAA4C;MACrD1I,IAAI,EAAE,eAAe;MACrBC,MAAM,EAAE;IACV;EACF,CAAC;EACD,CAACsJ,OAAO,CAACS,SAAS,GAAG;IACnBhK,IAAI,EAAE,WAAW;IACjBC,MAAM,EAAE,MAAM;IACdC,QAAQ,EAAE,EAAE;IACZ4J,OAAO,EAAE;MACPpB,OAAO,EAAE,4CAA4C;MACrD1I,IAAI,EAAE,cAAc;MACpBC,MAAM,EAAE;IACV;EACF,CAAC;EACD,CAACsJ,OAAO,CAACU,oBAAoB,GAAG;IAC9BjK,IAAI,EAAE,WAAW;IACjBC,MAAM,EAAE,MAAM;IACdC,QAAQ,EAAE,EAAE;IACZ4J,OAAO,EAAE;MACPpB,OAAO,EAAE,4CAA4C;MACrD1I,IAAI,EAAE,cAAc;MACpBC,MAAM,EAAE;IACV;EACF,CAAC;EACD,CAACsJ,OAAO,CAACW,MAAM,GAAG;IAChBlK,IAAI,EAAE,QAAQ;IACdC,MAAM,EAAE,KAAK;IACbC,QAAQ,EAAE,EAAE;IACZ4J,OAAO,EAAE;MACPpB,OAAO,EAAE,4CAA4C;MACrD1I,IAAI,EAAE,gBAAgB;MACtBC,MAAM,EAAE;IACV;EACF,CAAC;EACD,CAACsJ,OAAO,CAACY,aAAa,GAAG;IACvBnK,IAAI,EAAE,QAAQ;IACdC,MAAM,EAAE,KAAK;IACbC,QAAQ,EAAE,EAAE;IACZ4J,OAAO,EAAE;MACPpB,OAAO,EAAE,4CAA4C;MACrD1I,IAAI,EAAE,gBAAgB;MACtBC,MAAM,EAAE;IACV;EACF,CAAC;EACD,CAACsJ,OAAO,CAACa,QAAQ,GAAG;IAClBpK,IAAI,EAAE,OAAO;IACbC,MAAM,EAAE,KAAK;IACbC,QAAQ,EAAE,EAAE;IACZ4J,OAAO,EAAE;MACPpB,OAAO,EAAE,4CAA4C;MACrD1I,IAAI,EAAE,eAAe;MACrBC,MAAM,EAAE;IACV;EACF,CAAC;EACD,CAACsJ,OAAO,CAACc,cAAc,GAAG;IACxBrK,IAAI,EAAE,uBAAuB;IAC7BC,MAAM,EAAE,MAAM;IACdC,QAAQ,EAAE,EAAE;IACZ4J,OAAO,EAAE;MACPpB,OAAO,EAAE,4CAA4C;MACrD1I,IAAI,EAAE,eAAe;MACrBC,MAAM,EAAE;IACV;EACF,CAAC;EACD,CAACsJ,OAAO,CAACe,QAAQ,GAAG;IAClBtK,IAAI,EAAE,OAAO;IACbC,MAAM,EAAE,KAAK;IACbC,QAAQ,EAAE,EAAE;IACZ4J,OAAO,EAAE;MACPpB,OAAO,EAAE,4CAA4C;MACrD1I,IAAI,EAAE,eAAe;MACrBC,MAAM,EAAE;IACV;EACF,CAAC;EACD,CAACsJ,OAAO,CAACgB,cAAc,GAAG;IACxBvK,IAAI,EAAE,cAAc;IACpBC,MAAM,EAAE,KAAK;IACbC,QAAQ,EAAE,EAAE;IACZ4J,OAAO,EAAE;MACPpB,OAAO,EAAE,4CAA4C;MACrD1I,IAAI,EAAE,eAAe;MACrBC,MAAM,EAAE;IACV;EACF,CAAC;EACD,CAACsJ,OAAO,CAACiB,wBAAwB,GAAG;IAClCxK,IAAI,EAAE,4BAA4B;IAClCC,MAAM,EAAE,KAAK;IACbC,QAAQ,EAAE,EAAE;IACZ4J,OAAO,EAAE;MACPpB,OAAO,EAAE,4CAA4C;MACrD1I,IAAI,EAAE,6BAA6B;MACnCC,MAAM,EAAE;IACV;EACF,CAAC;EACD,CAACsJ,OAAO,CAACkB,wBAAwB,GAAG;IAClCzK,IAAI,EAAE,4BAA4B;IAClCC,MAAM,EAAE,MAAM;IACdC,QAAQ,EAAE,EAAE;IACZ4J,OAAO,EAAE;MACPpB,OAAO,EAAE,4CAA4C;MACrD1I,IAAI,EAAE,qCAAqC;MAC3CC,MAAM,EAAE;IACV;EACF,CAAC;EACD,CAACsJ,OAAO,CAACmB,OAAO,GAAG;IACjB1K,IAAI,EAAE,OAAO;IACbC,MAAM,EAAE,KAAK;IACbC,QAAQ,EAAE,EAAE;IACZ4J,OAAO,EAAE;MACPpB,OAAO,EAAE,4CAA4C;MACrD1I,IAAI,EAAE,eAAe;MACrBC,MAAM,EAAE;IACV;EACF,CAAC;EACD,CAACsJ,OAAO,CAACoB,SAAS,GAAG;IACnB3K,IAAI,EAAE,OAAO;IACbC,MAAM,EAAE,KAAK;IACbC,QAAQ,EAAE,EAAE;IACZ4J,OAAO,EAAE;MACPpB,OAAO,EAAE,4CAA4C;MACrD1I,IAAI,EAAE,eAAe;MACrBC,MAAM,EAAE;IACV;EACF,CAAC;EACD,KAAK,EAAE;IACLD,IAAI,EAAE,qBAAqB;IAC3BC,MAAM,EAAE,KAAK;IACbC,QAAQ,EAAE,EAAE;IACZ4J,OAAO,EAAE;MACPpB,OAAO,EAAE,4CAA4C;MACrD1I,IAAI,EAAE,eAAe;MACrBC,MAAM,EAAE;IACV;EACF,CAAC;EACD;EACA,CAAC,GAAG,GAAG;IACLD,IAAI,EAAE,oBAAoB;IAC1BC,MAAM,EAAE,KAAK;IACbC,QAAQ,EAAE,EAAE;IACZ4J,OAAO,EAAE;MACPpB,OAAO,EAAE,4CAA4C;MACrD1I,IAAI,EAAE,eAAe;MACrBC,MAAM,EAAE;IACV;EACF;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,SAAS2K,uBAAuBA,CAAC9K,OAAO,EAAE;EACxC,MAAM+K,KAAK,GAAGnB,kBAAkB,CAAC,CAAC,CAACoB,IAAI,CAACtX,CAAC,IAAIA,CAAC,CAACsM,OAAO,KAAKA,OAAO,CAAC;EACnE,IAAI+K,KAAK,IAAIA,KAAK,CAAC9K,cAAc,EAAE;IACjC,OAAO;MACLC,IAAI,EAAE6K,KAAK,CAAC9K,cAAc,CAACC,IAAI;MAC/BC,MAAM,EAAE4K,KAAK,CAAC9K,cAAc,CAACE,MAAM;MACnCC,QAAQ,EAAE,EAAE;MACZ4J,OAAO,EAAE;QACPpB,OAAO,EAAE1U,SAAS,CAAC+W,WAAW;QAC9B/K,IAAI,aAAAxG,MAAA,CAAaqR,KAAK,CAAC9K,cAAc,CAACC,IAAI,CAAE;QAC5CC,MAAM,MAAAzG,MAAA,CAAMqR,KAAK,CAAC9K,cAAc,CAACE,MAAM;MACzC;IACF,CAAC;EACH;EACA,OAAO2J,aAAa,CAAC9J,OAAO,CAAC,IAAI;IAC/BE,IAAI,EAAE,OAAO;IACbC,MAAM,EAAE,KAAK;IACbC,QAAQ,EAAE,EAAE;IACZ4J,OAAO,EAAE;MACPpB,OAAO,EAAE1U,SAAS,CAAC+W,WAAW;MAC9B/K,IAAI,EAAE,eAAe;MACrBC,MAAM,EAAE;IACV;EACF,CAAC;AACH;AACA,MAAM+K,kBAAkB,GAAG;EACzB,CAACzB,OAAO,CAACM,OAAO,GAAG,4CAA4C;EAC/D,CAACN,OAAO,CAACQ,MAAM,GAAG,4CAA4C;EAC9D,CAACR,OAAO,CAACiB,wBAAwB,GAAG,4CAA4C;EAChF,CAACjB,OAAO,CAAChU,OAAO,GAAG,4CAA4C;EAC/D,CAACgU,OAAO,CAAC/T,MAAM,GAAG,4CAA4C;EAC9D,CAAC+T,OAAO,CAACS,SAAS,GAAG,4CAA4C;EACjE,CAACT,OAAO,CAACU,oBAAoB,GAAG,4CAA4C;EAC5E,CAACV,OAAO,CAACW,MAAM,GAAG,4CAA4C;EAC9D,CAACX,OAAO,CAACY,aAAa,GAAG;AAC3B,CAAC;AAED,MAAMc,aAAa,GAAG,eAAe,CAAC,MAAMrX,CAAC,CAACqH,KAAK,CAAC,CAACrH,CAAC,CAACsX,IAAI,CAAC,CAAC,CAAC1P,SAAS,CAAC2P,CAAC,IAAI;EAC3E,OAAOtX,SAAS,CAAC6H,IAAI,CAAC0P,IAAI,CAACC,KAAK,CAACF,CAAC,CAACG,OAAO,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;AACvD,CAAC,CAAC,EAAE1X,CAAC,CAACuH,MAAM,CAAC,CAAC,CAACK,SAAS,CAAC2P,CAAC,IAAI;EAC5B,OAAOtX,SAAS,CAAC6H,IAAI,CAACyP,CAAC,CAAC;AAC1B,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;;AAEP;AACA;AACA;AACA,MAAMI,eAAe,GAAG,eAAe,CAAC,MAAMN,aAAa,CAAC3K,OAAO,CAAC,IAAIsI,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;;AAEnF;AACA;AACA;AACA,MAAM4C,aAAa,GAAG,eAAe,CAAC,MAAMP,aAAa,CAAC3K,OAAO,CAAC,IAAIsI,IAAI,CAACA,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC;;AAE3H;AACA;AACA;AACA,MAAM4C,cAAc,GAAG,eAAe,CAAC,MAAM7X,CAAC,CAAC+L,MAAM,CAAC;EACpDK,IAAI,EAAEpM,CAAC,CAACsH,MAAM,CAAC,CAAC;EAChB+E,MAAM,EAAErM,CAAC,CAACsH,MAAM,CAAC,CAAC;EAClBgF,QAAQ,EAAEtM,CAAC,CAACuH,MAAM,CAAC;AACrB,CAAC,CAAC,EAAE,CAAC;;AAEL;AACA;AACA;AACA,MAAMuQ,mBAAmB,GAAG,eAAe,CAAC,MAAMD,cAAc,CAACE,MAAM,CAAC;EACtE5P,KAAK,EAAEf,eAAe;EACtB4Q,YAAY,EAAEhY,CAAC,CAACsH,MAAM,CAAC;AACzB,CAAC,CAAC,EAAE,CAAC;;AAEL;AACA;AACA;AACA,MAAM2Q,YAAY,GAAG,eAAe,CAAC,MAAMjY,CAAC,CAAC+L,MAAM,CAAC;EAClDmM,MAAM,EAAElY,CAAC,CAACmY,MAAM,CAACnY,CAAC,CAACsH,MAAM,CAAC,CAAC,CAAC,CAACoF,OAAO,CAAC,CAAC,CAAC;AACzC,CAAC,CAAC,EAAE,CAAC;AACL,MAAM0L,kBAAkB,GAAG,eAAe,CAAC,MAAMpY,CAAC,CAAC+L,MAAM,CAAC;EACxD+I,OAAO,EAAEW,kBAAkB;EAC3B4C,YAAY,EAAE5Z,cAAc,CAACiO,OAAO,CAAC,CAAC,CAAC;EACvC;EACA4L,KAAK,EAAE7Z,cAAc,CAACmO,QAAQ,CAAC,CAAC;EAChC;EACA2L,eAAe,EAAE9C,kBAAkB,CAAC/I,OAAO,CAACtM,SAAS,CAAC+W,WAAW,CAAC,CAACvK,QAAQ,CAAC,CAAC,CAAC;AAChF,CAAC,CAAC,EAAE,CAAC;;AAEL;AACA;AACA;AACA,MAAM4L,mBAAmB,GAAG,eAAe,CAAC,MAAMxY,CAAC,CAACqH,KAAK,CAAC,CAACrH,CAAC,CAACiM,KAAK,CAACjM,CAAC,CAACsH,MAAM,CAAC,CAAC,CAAC,CAACM,SAAS,CAAC,MAAM6Q,OAAO,IAAI,MAAM9M,OAAO,CAAC+M,GAAG,CAACD,OAAO,CAAC5O,GAAG,CAACiL,OAAO,IAAIsD,kBAAkB,CAACO,UAAU,CAAC;EAC/K7D;AACF,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE9U,CAAC,CAACiM,KAAK,CAACmM,kBAAkB,CAAC,CAAC,CAAC,EAAE,CAAC;AACvC,MAAMQ,4BAA4B,GAAG,eAAe,CAAC,MAAMR,kBAAkB,CAACL,MAAM,CAAC;EACnFc,KAAK,EAAE7Y,CAAC,CAACiM,KAAK,CAACjM,CAAC,CAACsH,MAAM,CAAC,CAAC;AAC3B,CAAC,CAAC,EAAE,CAAC;;AAEL;AACA;AACA;AACA,MAAMwR,cAAc,GAAG,eAAe,CAAC,MAAM9Y,CAAC,CAAC+L,MAAM,CAAC;EACpD;AACF;AACA;EACEgN,UAAU,EAAE/Y,CAAC,CAACsH,MAAM,CAAC,CAAC;EACtB0R,MAAM,EAAEhZ,CAAC,CAACiM,KAAK,CAAC2M,4BAA4B;AAC9C,CAAC,CAAC,EAAE,CAAC;;AAEL;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAMK,kBAAkB,GAAG,eAAe,CAAC,MAAMjZ,CAAC,CAAC+L,MAAM,CAAC;EACxDgN,UAAU,EAAE/Y,CAAC,CAACsH,MAAM,CAAC,CAAC;EACtB4R,WAAW,EAAElZ,CAAC,CAACsH,MAAM,CAAC;AACxB,CAAC,CAAC,EAAE,CAAC;;AAEL;AACA;AACA;AACA,MAAM6R,4BAA4B,GAAG,eAAe,CAAC,MAAMnZ,CAAC,CAAC+L,MAAM,CAAC;EAClEK,IAAI,EAAEpM,CAAC,CAACsH,MAAM,CAAC,CAAC,CAACsF,QAAQ,CAAC;AAC5B,CAAC,CAAC,CAACwM,QAAQ,CAACpZ,CAAC,CAACqZ,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC;;AAE3B;AACA;AACA;AACA,MAAMC,yBAAyB,GAAG,eAAe,CAAC,MAAMtZ,CAAC,CAAC+L,MAAM,CAAC;EAC/DwN,SAAS,EAAE5B,eAAe;EAC1BY,eAAe,EAAEvY,CAAC,CAACsH,MAAM,CAAC,CAAC,CAACoF,OAAO,CAACqJ,oBAAoB,CAAC;EACzDuC,KAAK,EAAE3Z,YAAY,CAAC+N,OAAO,CAAC,CAAC,CAAC;EAC9B8M,kBAAkB,EAAE/a,cAAc;EAClCgb,qBAAqB,EAAEhb,cAAc;EACrCib,aAAa,EAAE3R,kBAAkB,CAAC2E,OAAO,CAAC,CAAC,CAAC;EAC5CiN,cAAc,EAAE9a,eAAe,CAAC6N,OAAO,CAACvM,KAAK,CAACyZ,UAAU,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;EAClEC,QAAQ,EAAE7Z,CAAC,CAAC4M,QAAQ,CAAC4L,mBAAmB,CAAC,CAACsB,QAAQ,CAAC,CAAC;EACpDC,QAAQ,EAAEZ,4BAA4B,CAACvM,QAAQ,CAAC;AAClD,CAAC,CAAC,EAAE,CAAC;;AAEL;AACA;AACA;AACA,MAAMoN,wBAAwB,GAAG,eAAeha,CAAC,CAACiM,KAAK,CAACqN,yBAAyB,CAAC;;AAElF;AACA;AACA;AACA,MAAMW,gCAAgC,GAAG,eAAeX,yBAAyB,CAACY,OAAO,CAAC,CAAC;;AAE3F;AACA;AACA;AACA,MAAMC,0BAA0B,GAAG,eAAe,CAAC,MAAMb,yBAAyB,CAACvB,MAAM,CAAC;EACxFqC,eAAe,EAAE3b,cAAc;EAC/B4b,iBAAiB,EAAE5b,cAAc;EACjC6b,gBAAgB,EAAExC,mBAAmB,CAACpL,OAAO,CAAC;IAC5CvE,KAAK,EAAElI,SAAS,CAAC6H,IAAI,CAAC,GAAG,CAAC;IAC1BkQ,YAAY,EAAE,GAAG;IACjB3L,MAAM,EAAE,EAAE;IACVC,QAAQ,EAAE,EAAE;IACZF,IAAI,EAAE;EACR,CAAC,CAAC;EACFkM,KAAK,EAAElR,eAAe;EACtBsS,aAAa,EAAEtS,eAAe;EAC9BmS,SAAS,EAAEnS,eAAe,CAACQ,SAAS,CAACoK,CAAC,IAAI,IAAIgD,IAAI,CAAChD,CAAC,CAACuI,QAAQ,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;EACxEV,QAAQ,EAAErB,mBAAmB,CAAC5L,QAAQ,CAAC,CAAC,CAACkN,QAAQ,CAAC;AACpD,CAAC,CAAC,EAAE,CAAC;AAEL,SAASU,mBAAmBA,CAACC,UAAU,EAAE;EACvC,IAAIA,UAAU,KAAKtR,SAAS,EAAE;IAC5B,MAAMgH,MAAM,GAAGuK,MAAM,CAACC,KAAK,CAAC,EAAE,CAAC;IAC/Bna,EAAE,CAAC,CAAC,CAAC,EAAE2P,MAAM,CAAC;IACd,OAAOhQ,KAAK,CAACya,OAAO,CAACza,KAAK,CAAC0a,WAAW,CAAC1K,MAAM,CAACnI,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EACjE,CAAC,MAAM;IACL,OAAO7H,KAAK,CAACya,OAAO,CAACH,UAAU,CAAC;EAClC;AACF;;AAEA;AACA;AACA;AACA,MAAMK,yBAAyB,GAAG,eAAe,CAAC,MAAM9a,CAAC,CAAC+L,MAAM,CAAC;EAC/DgP,EAAE,EAAEtF,kBAAkB,CAACJ,MAAM,CAACP,OAAO,IAAIA,OAAO,CAAC7C,WAAW,CAAC,CAAC,KAAK7R,SAAS,CAAC+W,WAAW,EAAE;IACxFpM,OAAO,EAAE;EACX,CAAC,CAAC;EACFuN,KAAK,EAAE3Z,YAAY,CAAC+N,OAAO,CAAC,CAAC,CAAC;EAC9B6L,eAAe,EAAEhD,aAAa,CAAC7I,OAAO,CAACqJ,oBAAoB,CAAC;EAC5DiF,aAAa,EAAErD,eAAe;EAC9BsD,WAAW,EAAErD,aAAa;EAC1BsD,GAAG,EAAElb,CAAC,CAACsH,MAAM,CAAC,CAAC,CAACsF,QAAQ,CAAC,CAAC,CAAChF,SAAS,CAACC,GAAG,IAAI2S,mBAAmB,CAAC3S,GAAG,CAAC,CAAC;EACrEsT,oBAAoB,EAAE1F,kBAAkB,CAAC/I,OAAO,CAACtM,SAAS,CAAC+W,WAAW;AACxE,CAAC,CAAC,EAAE,CAAC;;AAEL;AACA;AACA;AACA,MAAMiE,uBAAuB,GAAG,eAAeN,yBAAyB,CAAC/C,MAAM,CAAC;EAC9EsD,QAAQ,EAAE1c;AACZ,CAAC,CAAC;;AAEF;AACA;AACA;AACA,MAAM2c,wBAAwB,GAAG,eAAeF,uBAAuB,CAACrD,MAAM,CAAC;EAC7EiD,aAAa,EAAE5T,eAAe;EAC9B6T,WAAW,EAAE7T;AACf,CAAC,CAAC;;AAEF;AACA;AACA;AACA,MAAMmU,wBAAwB,GAAG,eAAe,CAAC,MAAMT,yBAAyB,CAAC/C,MAAM,CAAC;EACtFgC,QAAQ,EAAEhb,mBAAmB;EAC7Byc,gBAAgB,EAAExb,CAAC,CAACsH,MAAM,CAAC,CAAC,CAACoF,OAAO,CAACtM,SAAS,CAAC+W,WAAW,CAAC;EAC3DsE,UAAU,EAAExc,iBAAiB,CAACyN,OAAO,CAAC,CAAC;AACzC,CAAC,CAAC,EAAE,CAAC;;AAEL;AACA;AACA;AACA,MAAMgP,yBAAyB,GAAG,eAAe,CAAC,MAAMH,wBAAwB,CAACxD,MAAM,CAAC;EACtFgC,QAAQ,EAAEhb,mBAAmB,CAAC2N,OAAO,CAAC,EAAE,CAAC;EACzCiP,GAAG,EAAE3b,CAAC,CAACsH,MAAM,CAAC,CAAC;EACfmU,UAAU,EAAErU,eAAe;EAC3B4T,aAAa,EAAE5T,eAAe;EAC9B6T,WAAW,EAAE7T;AACf,CAAC,CAAC,EAAE,CAAC;;AAEL;AACA;AACA;AACA,MAAMwU,yBAAyB,GAAG,eAAe,CAAC,MAAML,wBAAwB,CAACxD,MAAM,CAAC;EACtFgC,QAAQ,EAAEhb,mBAAmB,CAAC2N,OAAO,CAAC,EAAE,CAAC;EACzC2O,QAAQ,EAAEtT;AACZ,CAAC,CAAC,EAAE,CAAC;;AAEL;AACA;AACA;AACA,MAAM8T,oCAAoC,GAAG,eAAeD,yBAAyB,CAAC7D,MAAM,CAAC;EAC3F+D,OAAO,EAAE/T;AACX,CAAC,CAAC;;AAEF;AACA;AACA;AACA,MAAMgU,0BAA0B,GAAG,eAAeL,yBAAyB,CAAC3D,MAAM,CAAC;EACjF+D,OAAO,EAAE1U,eAAe;EACxBiU,QAAQ,EAAEjU;AACZ,CAAC,CAAC;;AAEF;AACA;AACA;AACA,MAAM4U,6BAA6B,GAAG,eAAe,CAAC,MAAMT,wBAAwB,CAACxD,MAAM,CAAC;EAC1FgC,QAAQ,EAAEhb,mBAAmB,CAAC2N,OAAO,CAAC,EAAE,CAAC;EACzC2O,QAAQ,EAAEjU,eAAe,CAACsF,OAAO,CAAC,CAAC;AACrC,CAAC,CAAC,EAAE,CAAC;;AAEL;AACA;AACA;AACA,MAAMuP,8BAA8B,GAAG,eAAe,CAAC,MAAMP,yBAAyB,CAAC3D,MAAM,CAAC;EAC5FsD,QAAQ,EAAEjU,eAAe,CAACsF,OAAO,CAAC,CAAC;AACrC,CAAC,CAAC,EAAE,CAAC;;AAEL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,MAAMwP,aAAa,GAAG,CAAC;EACrB9P,IAAI,EAAE,IAAI;EACV+P,IAAI,EAAE;AACR,CAAC,EAAE;EACD/P,IAAI,EAAE,sBAAsB;EAC5B+P,IAAI,EAAE;AACR,CAAC,EAAE;EACD/P,IAAI,EAAE,UAAU;EAChB+P,IAAI,EAAE;AACR,CAAC,EAAE;EACD/P,IAAI,EAAE,OAAO;EACb+P,IAAI,EAAE;AACR,CAAC,EAAE;EACD/P,IAAI,EAAE,UAAU;EAChB+P,IAAI,EAAE;AACR,CAAC,EAAE;EACD/P,IAAI,EAAE,wBAAwB;EAC9B+P,IAAI,EAAE;AACR,CAAC,EAAE;EACD/P,IAAI,EAAE,sBAAsB;EAC5B+P,IAAI,EAAE;AACR,CAAC,EAAE;EACD/P,IAAI,EAAE,KAAK;EACX+P,IAAI,EAAE;AACR,CAAC,CAAC;AACF,MAAMC,cAAc,GAAG,CAAC;EACtBhQ,IAAI,EAAE,IAAI;EACV+P,IAAI,EAAE;AACR,CAAC,EAAE;EACD/P,IAAI,EAAE,kBAAkB;EACxB+P,IAAI,EAAE;AACR,CAAC,EAAE;EACD/P,IAAI,EAAE,YAAY;EAClB+P,IAAI,EAAE;AACR,CAAC,EAAE;EACD/P,IAAI,EAAE,sBAAsB;EAC5B+P,IAAI,EAAE;AACR,CAAC,EAAE;EACD/P,IAAI,EAAE,KAAK;EACX+P,IAAI,EAAE;AACR,CAAC,EAAE;EACD/P,IAAI,EAAE,OAAO;EACb+P,IAAI,EAAE;AACR,CAAC,EAAE;EACD/P,IAAI,EAAE,UAAU;EAChB+P,IAAI,EAAE;AACR,CAAC,EAAE;EACD/P,IAAI,EAAE,wBAAwB;EAC9B+P,IAAI,EAAE;AACR,CAAC,EAAE;EACD/P,IAAI,EAAE,sBAAsB;EAC5B+P,IAAI,EAAE;AACR,CAAC,EAAE;EACD/P,IAAI,EAAE,KAAK;EACX+P,IAAI,EAAE;AACR,CAAC,CAAC;AACF,MAAME,eAAe,GAAG,CAAC;EACvBjQ,IAAI,EAAE,IAAI;EACV+P,IAAI,EAAE;AACR,CAAC,EAAE;EACD/P,IAAI,EAAE,kBAAkB;EACxB+P,IAAI,EAAE;AACR,CAAC,EAAE;EACD/P,IAAI,EAAE,YAAY;EAClB+P,IAAI,EAAE;AACR,CAAC,EAAE;EACD/P,IAAI,EAAE,sBAAsB;EAC5B+P,IAAI,EAAE;AACR,CAAC,EAAE;EACD/P,IAAI,EAAE,SAAS;EACf+P,IAAI,EAAE;AACR,CAAC,EAAE;EACD/P,IAAI,EAAE,KAAK;EACX+P,IAAI,EAAE;AACR,CAAC,EAAE;EACD/P,IAAI,EAAE,UAAU;EAChB+P,IAAI,EAAE;AACR,CAAC,EAAE;EACD/P,IAAI,EAAE,eAAe;EACrB+P,IAAI,EAAE;AACR,CAAC,EAAE;EACD/P,IAAI,EAAE,UAAU;EAChB+P,IAAI,EAAE;AACR,CAAC,EAAE;EACD/P,IAAI,EAAE,wBAAwB;EAC9B+P,IAAI,EAAE;AACR,CAAC,EAAE;EACD/P,IAAI,EAAE,sBAAsB;EAC5B+P,IAAI,EAAE;AACR,CAAC,EAAE;EACD/P,IAAI,EAAE,KAAK;EACX+P,IAAI,EAAE;AACR,CAAC,CAAC;AACF,MAAMG,0BAA0B,GAAG,CAAC;EAClClQ,IAAI,EAAE,IAAI;EACV+P,IAAI,EAAE;AACR,CAAC,EAAE;EACD/P,IAAI,EAAE,kBAAkB;EACxB+P,IAAI,EAAE;AACR,CAAC,EAAE;EACD/P,IAAI,EAAE,YAAY;EAClB+P,IAAI,EAAE;AACR,CAAC,EAAE;EACD/P,IAAI,EAAE,sBAAsB;EAC5B+P,IAAI,EAAE;AACR,CAAC,EAAE;EACD/P,IAAI,EAAE,KAAK;EACX+P,IAAI,EAAE;AACR,CAAC,EAAE;EACD/P,IAAI,EAAE,UAAU;EAChB+P,IAAI,EAAE;AACR,CAAC,EAAE;EACD/P,IAAI,EAAE,eAAe;EACrB+P,IAAI,EAAE;AACR,CAAC,EAAE;EACD/P,IAAI,EAAE,UAAU;EAChB+P,IAAI,EAAE;AACR,CAAC,EAAE;EACD/P,IAAI,EAAE,wBAAwB;EAC9B+P,IAAI,EAAE;AACR,CAAC,EAAE;EACD/P,IAAI,EAAE,sBAAsB;EAC5B+P,IAAI,EAAE;AACR,CAAC,EAAE;EACD/P,IAAI,EAAE,KAAK;EACX+P,IAAI,EAAE;AACR,CAAC,CAAC;AACF,MAAMI,cAAc,GAAG,CAAC;EACtBnQ,IAAI,EAAE,wBAAwB;EAC9B+P,IAAI,EAAE;AACR,CAAC,EAAE;EACD/P,IAAI,EAAE,sBAAsB;EAC5B+P,IAAI,EAAE;AACR,CAAC,EAAE;EACD/P,IAAI,EAAE,KAAK;EACX+P,IAAI,EAAE;AACR,CAAC,EAAE;EACD/P,IAAI,EAAE,MAAM;EACZ+P,IAAI,EAAE;AACR,CAAC,CAAC;;AAEF;AACA;AACA;AACA,MAAMK,oBAAoB,GAAG,eAAe,CAAC,MAAMxc,CAAC,CAAC+L,MAAM,CAAC;EAC1DK,IAAI,EAAEpM,CAAC,CAACsH,MAAM,CAAC,CAAC;EAChB8G,WAAW,EAAEpO,CAAC,CAACsH,MAAM,CAAC,CAAC,CAACsF,QAAQ,CAAC,CAAC;EAClC6P,KAAK,EAAEtd,0BAA0B,CAACyN,QAAQ,CAAC,CAAC;EAC5C8P,aAAa,EAAE1c,CAAC,CAACsH,MAAM,CAAC,CAAC,CAACsF,QAAQ,CAAC,CAAC;EACpC+P,OAAO,EAAE3c,CAAC,CAACsH,MAAM,CAAC,CAAC,CAACsF,QAAQ,CAAC,CAAC;EAC9BgQ,WAAW,EAAE5c,CAAC,CAACmY,MAAM,CAACnY,CAAC,CAACsH,MAAM,CAAC,CAAC,CAAC,CAACsF,QAAQ,CAAC;AAC7C,CAAC,CAAC,CAACwM,QAAQ,CAACpZ,CAAC,CAACqZ,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC;AAC3B;AACA;AACA;AACA,MAAMwD,0BAA0B,GAAG,eAAe,CAAC,MAAML,oBAAoB,CAACzE,MAAM,CAAC;EACnF0E,KAAK,EAAEzc,CAAC,CAACsH,MAAM,CAAC,CAAC,CAACsF,QAAQ,CAAC;AAC7B,CAAC,CAAC,CAACwM,QAAQ,CAACpZ,CAAC,CAACqZ,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC;;AAE3B;AACA;AACA;AACA,MAAMyD,mBAAmB,GAAG,eAAe,CAAC,MAAM9c,CAAC,CAAC+L,MAAM,CAAC;EACzD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEgR,uBAAuB,EAAE9d,iBAAiB,CAACyN,OAAO,CAAC,CAAC,CAAC;EACrD;AACF;AACA;AACA;AACA;EACEsQ,aAAa,EAAEvH,kBAAkB,CAAC/I,OAAO,CAACtM,SAAS,CAAC+W,WAAW;AACjE,CAAC,CAAC,EAAE,CAAC;;AAEL;AACA;AACA;AACA,MAAM8F,uBAAuB,GAAG,eAAejd,CAAC,CAAC+L,MAAM,CAAC;EACtD;AACF;AACA;EACEmR,sBAAsB,EAAEzH;AAC1B,CAAC,CAAC;;AAEF;AACA;AACA;AACA,MAAM0H,uBAAuB,GAAG,eAAe,CAAC,MAAMnd,CAAC,CAAC+L,MAAM,CAAC;EAC7D;AACF;AACA;EACEqR,yBAAyB,EAAEne,iBAAiB,CAACyN,OAAO,CAAC,CAAC,CAAC;EACvD;AACF;AACA;EACE2Q,sBAAsB,EAAE5H,kBAAkB,CAAC/I,OAAO,CAACtM,SAAS,CAAC+W,WAAW;AAC1E,CAAC,CAAC,EAAE,CAAC;;AAEL;AACA;AACA;AACA,MAAMmG,4BAA4B,GAAG,eAAe,CAAC,MAAMtd,CAAC,CAAC+L,MAAM,CAAC;EAClEwR,kBAAkB,EAAEvd,CAAC,CAACiM,KAAK,CAACwJ,kBAAkB,CAAC,CAAC/I,OAAO,CAAC,EAAE;AAC5D,CAAC,CAAC,EAAE,CAAC;;AAEL;AACA;AACA;AACA,MAAM8Q,kBAAkB,GAAG,eAAe,CAAC,MAAMxd,CAAC,CAAC+L,MAAM,CAAC;EACxDM,MAAM,EAAErM,CAAC,CAACsH,MAAM,CAAC,CAAC,CAACoF,OAAO,CAAC,EAAE;AAC/B,CAAC,CAAC,EAAE,CAAC;;AAEL;AACA;AACA;AACA,MAAM+Q,0BAA0B,GAAG,eAAe,CAAC,MAAMjB,oBAAoB,CAACpD,QAAQ,CAACpZ,CAAC,CAACqH,KAAK,CAAC,CAACY,wBAAwB,EAAEjI,CAAC,CAACqZ,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;;AAE3I;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAMqE,mBAAmB,GAAG,eAAe,CAAC,MAAMD,0BAA0B,CAACE,KAAK,CAACb,mBAAmB,CAACa,KAAK,CAAC1F,YAAY,CAAC,CAAC0F,KAAK,CAACH,kBAAkB,CAAC,CAACtD,OAAO,CAAC,CAAC,CAAC,CAACd,QAAQ,CAACpZ,CAAC,CAAC4d,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC;;AAEpL;AACA;AACA;AACA,MAAMC,oBAAoB,GAAG,eAAe,CAAC,MAAMhB,0BAA0B,CAACc,KAAK,CAACb,mBAAmB,CAACa,KAAK,CAAC1F,YAAY,CAAC,CAAC0F,KAAK,CAACH,kBAAkB,CAAC,CAACtD,OAAO,CAAC,CAAC,CAAC,CAACd,QAAQ,CAACpZ,CAAC,CAAC4d,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC;;AAErL;AACA;AACA;AACA,MAAME,oBAAoB,GAAG,eAAe,CAAC,MAAMJ,mBAAmB,CAACC,KAAK,CAACR,uBAAuB,CAACQ,KAAK,CAACV,uBAAuB,CAAC,CAACU,KAAK,CAACL,4BAA4B,CAAC,CAACpD,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC;;AAErL;AACA;AACA;AACA,MAAM6D,oBAAoB,GAAG;EAC3BC,MAAM,EAAEF,oBAAoB;EAC5BG,MAAM,EAAEJ,oBAAoB;EAC5BK,KAAK,EAAER;AACT,CAAC;;AAED;AACA;AACA;AACA,MAAMS,iBAAiB,GAAG,eAAe,CAAC,MAAMne,CAAC,CAAC+L,MAAM,CAAC;EACvDoQ,IAAI,EAAEnc,CAAC,CAACsH,MAAM,CAAC,CAAC;EAChB8E,IAAI,EAAEpM,CAAC,CAACsH,MAAM,CAAC,CAAC,CAACoF,OAAO,CAAC,EAAE;AAC7B,CAAC,CAAC,CAAC0M,QAAQ,CAACpZ,CAAC,CAAC4d,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC;;AAEvB;AACA;AACA;AACA,MAAMQ,aAAa,GAAG,eAAe,CAAC,MAAMD,iBAAiB,CAACpG,MAAM,CAAC;EACnEsG,eAAe,EAAEre,CAAC,CAACsH,MAAM,CAAC,CAAC,CAACsF,QAAQ,CAAC,CAAC;EACtC0R,UAAU,EAAEte,CAAC,CAACiM,KAAK,CAACkS,iBAAiB,CAAC,CAACvR,QAAQ,CAAC;AAClD,CAAC,CAAC,CAACwM,QAAQ,CAACpZ,CAAC,CAAC4d,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC;;AAEvB;AACA;AACA;AACA,MAAMW,eAAe,GAAG,eAAe,CAAC,MAAMve,CAAC,CAAC+L,MAAM,CAAC;EACrDoQ,IAAI,EAAEnc,CAAC,CAACsH,MAAM,CAAC,CAAC;EAChB8E,IAAI,EAAEpM,CAAC,CAACsH,MAAM,CAAC,CAAC,CAACoF,OAAO,CAAC,EAAE,CAAC;EAC5B8R,MAAM,EAAExe,CAAC,CAACiM,KAAK,CAACmS,aAAa,CAAC,CAAC1R,OAAO,CAAC,EAAE,CAAC;EAC1C+R,OAAO,EAAEze,CAAC,CAACiM,KAAK,CAACmS,aAAa,CAAC,CAAC1R,OAAO,CAAC,EAAE;AAC5C,CAAC,CAAC,CAAC0M,QAAQ,CAACpZ,CAAC,CAAC4d,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC;;AAEvB;AACA;AACA;AACA,MAAMc,SAAS,GAAG,eAAe1e,CAAC,CAACiM,KAAK,CAACsS,eAAe,CAAC;AACzD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMI,iBAAiB,GAAG,eAAe,CAAC,MAAM3e,CAAC,CAAC+L,MAAM,CAAC;EACvDK,IAAI,EAAEpM,CAAC,CAACsH,MAAM,CAAC,CAAC;EAChBsX,WAAW,EAAE5e,CAAC,CAACsH,MAAM,CAAC,CAAC;EACvBuX,WAAW,EAAE7e,CAAC,CAACsH,MAAM,CAAC,CAAC;EACvBwX,SAAS,EAAE9e,CAAC,CAAC4d,GAAG,CAAC,CAAC,CAAChR,QAAQ,CAAC;AAC9B,CAAC,CAAC,CAACwM,QAAQ,CAACpZ,CAAC,CAAC4d,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC;;AAEvB;AACA;AACA;AACA,MAAMmB,sBAAsB,GAAG,eAAe,CAAC,MAAM/e,CAAC,CAACmY,MAAM,CAACnY,CAAC,CAACsH,MAAM,CAAC,CAAC,EAAEtH,CAAC,CAACsH,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC;;AAExF;AACA;AACA;AACA,MAAM0X,kBAAkB,GAAG,eAAe,CAAC,MAAMhf,CAAC,CAAC+L,MAAM,CAAC;EACxDkT,eAAe,EAAEjf,CAAC,CAACsH,MAAM,CAAC,CAAC;EAC3B+D,MAAM,EAAErL,CAAC,CAACiM,KAAK,CAACjM,CAAC,CAAC+L,MAAM,CAAC;IACvBK,IAAI,EAAEpM,CAAC,CAACsH,MAAM,CAAC,CAAC;IAChB6U,IAAI,EAAEnc,CAAC,CAACsH,MAAM,CAAC;EACjB,CAAC,CAAC,CAAC,CAACoF,OAAO,CAAC,EAAE,CAAC;EACfwS,sBAAsB,EAAEH;AAC1B,CAAC,CAAC,EAAE,CAAC;;AAEL;AACA;AACA;AACA,MAAMI,uBAAuB,GAAG,eAAe,CAAC,MAAMnf,CAAC,CAAC+L,MAAM,CAAC;EAC7DqT,uBAAuB,EAAEL,sBAAsB;EAC/CM,iCAAiC,EAAErf,CAAC,CAACsH,MAAM,CAAC,CAAC,CAACoF,OAAO,CAAC,YAAY,CAAC;EACnE4S,kBAAkB,EAAEN,kBAAkB,CAACpS,QAAQ,CAAC,CAAC;EACjD2S,gBAAgB,EAAER,sBAAsB,CAACnS,QAAQ,CAAC;AACpD,CAAC,CAAC,EAAE,CAAC;;AAEL;AACA;AACA;AACA,MAAM4S,eAAe,GAAG,eAAe,CAAC,MAAMxf,CAAC,CAACqH,KAAK,CAAC,CAACrH,CAAC,CAACyf,OAAO,CAAC,UAAU,CAAC,EAAEzf,CAAC,CAACyf,OAAO,CAAC,aAAa,CAAC,EAAEzf,CAAC,CAACyf,OAAO,CAAC,eAAe,CAAC,CAAC,CAAC,EAAE,CAAC;;AAEvI;AACA;AACA;AACA,MAAMC,eAAe,GAAG,eAAe,CAAC,MAAM1f,CAAC,CAACqH,KAAK,CAAC,CAACrH,CAAC,CAACyf,OAAO,CAAC,MAAM,CAAC,EAAEzf,CAAC,CAACyf,OAAO,CAAC,QAAQ,CAAC,EAAEzf,CAAC,CAACyf,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC;;AAExH;AACA;AACA;AACA,MAAME,sBAAsB,GAAG,eAAe,CAAC,MAAM3f,CAAC,CAAC+L,MAAM,CAAC;EAC5D6T,WAAW,EAAE5f,CAAC,CAAC0N,OAAO,CAAC,CAAC,CAACd,QAAQ,CAAC,CAAC;EACnCiT,eAAe,EAAE7f,CAAC,CAACiM,KAAK,CAACjM,CAAC,CAACuH,MAAM,CAAC,CAAC,CAAC,CAACmF,OAAO,CAAC,EAAE;AACjD,CAAC,CAAC,EAAE,CAAC;;AAEL;AACA;AACA;AACA,MAAMoT,+BAA+B,GAAG,eAAe,CAAC,MAAM9f,CAAC,CAAC+L,MAAM,CAAC;EACrE/F,OAAO,EAAEhG,CAAC,CAACsH,MAAM,CAAC,CAAC,CAAC+N,MAAM,CAAC0K,CAAC,IAAI;IAC9B,IAAI;MACFha,QAAQ,CAACga,CAAC,CAAC;MACX,OAAO,IAAI;IACb,CAAC,CAAC,OAAOrO,CAAC,EAAE;MACV,OAAO,KAAK;IACd;EACF,CAAC,EAAE8D,GAAG,IAAI;IACR,OAAO;MACLzK,OAAO,MAAAnF,MAAA,CAAM4P,GAAG;IAClB,CAAC;EACH,CAAC,CAAC;EACFwK,WAAW,EAAEhgB,CAAC,CAACsH,MAAM,CAAC,CAAC,CAACsF,QAAQ,CAAC,CAAC;EAClCwB,WAAW,EAAEpO,CAAC,CAACsH,MAAM,CAAC,CAAC,CAACsF,QAAQ,CAAC,CAAC;EAClCqT,MAAM,EAAEjgB,CAAC,CAACsH,MAAM,CAAC,CAAC,CAACsF,QAAQ,CAAC,CAAC;EAC7B0B,OAAO,EAAEtO,CAAC,CAACsH,MAAM,CAAC,CAAC,CAACsF,QAAQ,CAAC,CAAC;EAC9BsT,SAAS,EAAElgB,CAAC,CAACsH,MAAM,CAAC,CAAC,CAACsF,QAAQ,CAAC,CAAC;EAChCuT,IAAI,EAAEngB,CAAC,CAACiM,KAAK,CAACjM,CAAC,CAACsH,MAAM,CAAC,CAAC,CAAC,CAACsF,QAAQ,CAAC,CAAC;EACpCwT,KAAK,EAAEjhB,0BAA0B,CAAC2a,QAAQ,CAAC,CAAC,CAAClN,QAAQ,CAAC,CAAC;EACvDyT,IAAI,EAAElhB,0BAA0B,CAAC2a,QAAQ,CAAC,CAAC,CAAClN,QAAQ,CAAC,CAAC;EACtD0T,sBAAsB,EAAEtgB,CAAC,CAAC0N,OAAO,CAAC,CAAC,CAACd,QAAQ,CAAC,CAAC;EAC9C2T,oBAAoB,EAAEvgB,CAAC,CAAC0N,OAAO,CAAC,CAAC,CAACd,QAAQ,CAAC,CAAC;EAC5C4T,qBAAqB,EAAErB,uBAAuB,CAACvS,QAAQ,CAAC,CAAC;EACzD6T,UAAU,EAAEjB,eAAe,CAAC5S,QAAQ,CAAC,CAAC;EACtC8T,UAAU,EAAEhB,eAAe,CAAC9S,QAAQ,CAAC,CAAC;EACtC+T,iBAAiB,EAAE3gB,CAAC,CAACiM,KAAK,CAACjM,CAAC,CAAC+L,MAAM,CAAC;IAClC6U,aAAa,EAAE5gB,CAAC,CAACsH,MAAM,CAAC,CAAC;IACzBuZ,gBAAgB,EAAE7gB,CAAC,CAACsH,MAAM,CAAC,CAAC,CAACoF,OAAO,CAAC,QAAQ,CAAC;IAC9CoU,gBAAgB,EAAErL;EACpB,CAAC,CAAC,CAAC,CAAC7I,QAAQ,CAAC,CAAC;EACdmU,qBAAqB,EAAEpB,sBAAsB,CAAC/S,QAAQ,CAAC,CAAC;EACxDoU,iBAAiB,EAAEhhB,CAAC,CAACmY,MAAM,CAACnY,CAAC,CAACsH,MAAM,CAAC,CAAC,EAAEtH,CAAC,CAAC+L,MAAM,CAAC;IAC/CiU,WAAW,EAAEhgB,CAAC,CAACsH,MAAM,CAAC,CAAC,CAACsF,QAAQ,CAAC,CAAC;IAClCwB,WAAW,EAAEpO,CAAC,CAACsH,MAAM,CAAC,CAAC,CAACsF,QAAQ,CAAC,CAAC;IAClCqU,YAAY,EAAEjhB,CAAC,CAACsH,MAAM,CAAC,CAAC,CAACsF,QAAQ,CAAC,CAAC;IACnCsU,MAAM,EAAElhB,CAAC,CAAC0N,OAAO,CAAC,CAAC,CAACd,QAAQ,CAAC;EAC/B,CAAC,CAAC,CAACwM,QAAQ,CAACpZ,CAAC,CAAC4d,GAAG,CAAC,CAAC,CAAC,CAAC,CAAChR,QAAQ,CAAC,CAAC;EAChCuU,YAAY,EAAEzC,SAAS,CAAC9R,QAAQ,CAAC;AACnC,CAAC,CAAC,CAACwM,QAAQ,CAACpZ,CAAC,CAAC4d,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC;;AAEvB;AACA;AACA;AACA,MAAMwD,gCAAgC,GAAG,eAAe,CAAC,MAAMtB,+BAA+B,CAAC/H,MAAM,CAAC;EACpGqI,KAAK,EAAEpgB,CAAC,CAACsH,MAAM,CAAC,CAAC,CAACwS,QAAQ,CAAC,CAAC,CAAClN,QAAQ,CAAC,CAAC;EACvCyT,IAAI,EAAErgB,CAAC,CAACsH,MAAM,CAAC,CAAC,CAACwS,QAAQ,CAAC,CAAC,CAAClN,QAAQ,CAAC;AACvC,CAAC,CAAC,EAAE,CAAC;AACL;AACA;AACA;AACA,MAAMyU,8BAA8B,GAAG,eAAe,CAAC,MAAM1C,iBAAiB,CAAChB,KAAK,CAACmC,+BAA+B,CAAC,CAAC/H,MAAM,CAAC;EAC3HuJ,SAAS,EAAE7L,kBAAkB,CAAC7I,QAAQ,CAAC;AACzC,CAAC,CAAC,EAAE,CAAC;;AAEL;AACA;AACA;AACA,MAAM2U,+BAA+B,GAAG,eAAe,CAAC,MAAM5C,iBAAiB,CAAChB,KAAK,CAACyD,gCAAgC,CAAC,CAACrJ,MAAM,CAAC;EAC7HuJ,SAAS,EAAE7L,kBAAkB,CAAC7I,QAAQ,CAAC;AACzC,CAAC,CAAC,EAAE,CAAC;AACL;AACA;AACA;AACA,MAAM4U,kBAAkB,GAAG,eAAe,CAAC,MAAMxhB,CAAC,CAAC+L,MAAM,CAAC;EACxDK,IAAI,EAAEpM,CAAC,CAACsH,MAAM,CAAC,CAAC,CAACsF,QAAQ,CAAC,CAAC;EAC3B6U,GAAG,EAAEzhB,CAAC,CAACsH,MAAM,CAAC,CAAC,CAACsF,QAAQ,CAAC,CAAC;EAC1B8U,MAAM,EAAEviB,0BAA0B,CAAC2a,QAAQ,CAAC,CAAC,CAAClN,QAAQ,CAAC,CAAC;EACxD+U,OAAO,EAAE3hB,CAAC,CAACsH,MAAM,CAAC,CAAC,CAACsF,QAAQ,CAAC,CAAC;EAC9BgV,OAAO,EAAE5hB,CAAC,CAACsH,MAAM,CAAC,CAAC,CAACsF,QAAQ,CAAC,CAAC;EAC9BiV,QAAQ,EAAE7hB,CAAC,CAACsH,MAAM,CAAC,CAAC,CAACsF,QAAQ,CAAC,CAAC;EAC/BkV,QAAQ,EAAE9hB,CAAC,CAACsH,MAAM,CAAC,CAAC,CAACsF,QAAQ,CAAC,CAAC;EAC/BmV,MAAM,EAAE/hB,CAAC,CAACsH,MAAM,CAAC,CAAC,CAACsF,QAAQ,CAAC,CAAC;EAC7BoV,MAAM,EAAEhiB,CAAC,CAACsH,MAAM,CAAC,CAAC,CAACsF,QAAQ,CAAC,CAAC;EAC7BqV,QAAQ,EAAEjiB,CAAC,CAACsH,MAAM,CAAC,CAAC,CAACsF,QAAQ,CAAC,CAAC;EAC/BsV,MAAM,EAAEliB,CAAC,CAACsH,MAAM,CAAC,CAAC,CAACsF,QAAQ,CAAC,CAAC;EAC7BuV,OAAO,EAAEniB,CAAC,CAACsH,MAAM,CAAC,CAAC,CAACsF,QAAQ,CAAC;AAC/B,CAAC,CAAC,EAAE,CAAC;AACL,MAAMwV,mBAAmB,GAAG,eAAe,CAAC,MAAMZ,kBAAkB,CAACzJ,MAAM,CAAC;EAC1E2J,MAAM,EAAE1hB,CAAC,CAACsH,MAAM,CAAC,CAAC,CAACwS,QAAQ,CAAC,CAAC,CAAClN,QAAQ,CAAC;AACzC,CAAC,CAAC,EAAE,CAAC;AACL;AACA;AACA;AACA,MAAMyV,uBAAuB,GAAG,eAAe,CAAC,MAAMriB,CAAC,CAAC+L,MAAM,CAAC;EAC7DT,EAAE,EAAEtL,CAAC,CAACsH,MAAM,CAAC,CAAC;EACdgb,SAAS,EAAEva,kBAAkB;EAC7B6W,WAAW,EAAE5e,CAAC,CAACsH,MAAM,CAAC;AACxB,CAAC,CAAC,EAAE,CAAC;;AAEL;AACA;AACA;AACA;AACA,MAAMib,kBAAkB,GAAG,eAAe,CAAC,MAAMviB,CAAC,CAAC+L,MAAM,CAAC;EACxDyW,KAAK,EAAExiB,CAAC,CAACsH,MAAM,CAAC,CAAC,CAACsF,QAAQ,CAAC,CAAC;EAC5B+D,MAAM,EAAE3Q,CAAC,CAACsH,MAAM,CAAC,CAAC,CAACsF,QAAQ,CAAC,CAAC;EAC7B6V,OAAO,EAAEziB,CAAC,CAACsH,MAAM,CAAC,CAAC,CAACsF,QAAQ,CAAC,CAAC;EAC9B8V,MAAM,EAAE1iB,CAAC,CAACsH,MAAM,CAAC,CAAC,CAACsF,QAAQ,CAAC;AAC9B,CAAC,CAAC,EAAE,CAAC;;AAEL;AACA;AACA;AACA,MAAM+V,6BAA6B,GAAG,eAAe,CAAC,MAAM3iB,CAAC,CAAC+L,MAAM,CAAC;EACnEK,IAAI,EAAEpM,CAAC,CAACsH,MAAM,CAAC,CAAC;EAChBsb,GAAG,EAAElE,SAAS;EACd3E,QAAQ,EAAE/Z,CAAC,CAACmY,MAAM,CAACnY,CAAC,CAACsH,MAAM,CAAC,CAAC,EAAEtH,CAAC,CAAC4d,GAAG,CAAC,CAAC,CAAC;EACvCiF,IAAI,EAAEN,kBAAkB;EACxBO,QAAQ,EAAE9iB,CAAC,CAACiM,KAAK,CAACjM,CAAC,CAACsH,MAAM,CAAC,CAAC,CAACsF,QAAQ,CAAC,CAAC,CAAC,CAACF,OAAO,CAAC,EAAE,CAAC,CAAC9E,SAAS,CAACmY,CAAC,IAAI;IAClE,OAAOA,CAAC,CAACxO,MAAM,CAACjD,OAAO,IAAIA,OAAO,KAAKnF,SAAS,CAAC;EACnD,CAAC,CAAC;EACF4Z,YAAY,EAAE/iB,CAAC,CAAC0N,OAAO,CAAC,CAAC,CAACd,QAAQ,CAAC;AACrC,CAAC,CAAC,EAAE,CAAC;;AAEL;AACA;AACA;AACA,MAAMoW,8BAA8B,GAAG,eAAe,CAAC,MAAMrE,iBAAiB,CAAChB,KAAK,CAACgF,6BAA6B,CAAC,CAAC5K,MAAM,CAAC;EACzHkL,QAAQ,EAAEjjB,CAAC,CAACsH,MAAM,CAAC;AACrB,CAAC,CAAC,EAAE,CAAC;AAEL,MAAM4b,kBAAkB,GAAG,eAAe,CAAC,MAAMljB,CAAC,CAAC+L,MAAM,CAAC;EACxDoX,QAAQ,EAAEpb,kBAAkB,CAAC6E,QAAQ,CAAC,CAAC;EACvCwW,QAAQ,EAAErb,kBAAkB,CAAC6E,QAAQ,CAAC,CAAC;EACvCyW,YAAY,EAAEtb,kBAAkB,CAAC6E,QAAQ,CAAC,CAAC;EAC3C0W,oBAAoB,EAAEvb,kBAAkB,CAAC6E,QAAQ,CAAC,CAAC;EACnD2W,KAAK,EAAExb,kBAAkB,CAAC6E,QAAQ,CAAC,CAAC;EACpCzE,KAAK,EAAEJ,kBAAkB,CAAC6E,QAAQ,CAAC,CAAC;EACpC4W,QAAQ,EAAExjB,CAAC,CAACqH,KAAK,CAAC,CAACrH,CAAC,CAACsH,MAAM,CAAC,CAAC,EAAEtH,CAAC,CAACuH,MAAM,CAAC,CAAC,CAAC,CAAC,CAACqF,QAAQ,CAAC,CAAC;EACtD9E,IAAI,EAAE2N,kBAAkB,CAAC7I,QAAQ,CAAC,CAAC;EACnCuP,IAAI,EAAEnc,CAAC,CAACuH,MAAM,CAAC,CAAC,CAACqF,QAAQ,CAAC;AAC5B,CAAC,CAAC,CAAC6W,MAAM,CAAC,CAAC,EAAE,CAAC;;AAEd;AACA;AACA;AACA;AACA,MAAMC,eAAe,CAAC;EACpB5a,WAAWA,CAAC6a,eAAe,EAAE;IAC3B,IAAI,CAACA,eAAe,GAAGA,eAAe;EACxC;;EAEA;AACF;AACA;AACA;EACEC,MAAMA,CAACC,EAAE,EAAEC,IAAI,EAAE;IACf,OAAO,IAAI,CAACH,eAAe,CAACI,YAAY,CAACC,SAAS,CAACC,kBAAkB,CAACJ,EAAE,EAAEC,IAAI,CAAC;EACjF;;EAEA;AACF;AACA;AACA;AACA;EACEI,MAAMA,CAACL,EAAE,EAAEM,WAAW,EAAE;IACtB,OAAO,IAAI,CAACR,eAAe,CAACI,YAAY,CAACC,SAAS,CAACI,kBAAkB,CAACP,EAAE,EAAEM,WAAW,CAAC;EACxF;AACF;;AAEA;AACA;AACA;AACA;AACA,MAAME,aAAa,SAASne,KAAK,CAAC;EAChC;EACA4C,WAAWA,CAACwb,UAAU,EAAE;IACtB,KAAK,CAACA,UAAU,qBAAA1e,MAAA,CAAqB0e,UAAU,kBAAe,WAAW,CAAC;EAC5E;AACF;;AAEA;AACA;AACA;AACA;AACA,MAAMC,mBAAmB,SAASre,KAAK,CAAC;EACtC;EACA4C,WAAWA,CAACgM,OAAO,EAAE;IACnB,KAAK,CAACA,OAAO,OAAAlP,MAAA,CAAOkP,OAAO,+BAA4B,wBAAwB,CAAC;EAClF;AACF;;AAEA;AACA;AACA;AACA,MAAM0P,gBAAgB,SAASte,KAAK,CAAC;EACnC;EACA;EACA4C,WAAWA,CAACgM,OAAO,EAAE2P,IAAI,EAAE;IACzB,KAAK,kBAAA7e,MAAA,CAAkBkP,OAAO,0BAAAlP,MAAA,CAAuB6e,IAAI,WAAQ,CAAC;EACpE;AACF;;AAEA;AACA;AACA;AACA,MAAMC,kBAAkB,SAASxe,KAAK,CAAC;EACrC;EACA;EACA4C,WAAWA,CAAA,EAAG;IACZ,IAAIiC,OAAO,GAAG7B,SAAS,CAACjD,MAAM,GAAG,CAAC,IAAIiD,SAAS,CAAC,CAAC,CAAC,KAAKC,SAAS,GAAGD,SAAS,CAAC,CAAC,CAAC,GAAG,oDAAoD;IACtI,KAAK,aAAAtD,MAAA,CAAamF,OAAO,CAAE,CAAC;EAC9B;AACF;;AAEA;AACA;AACA;AACA,MAAM4Z,WAAW,SAASze,KAAK,CAAC;EAC9B;EACA4C,WAAWA,CAACiC,OAAO,EAAE;IACnB,KAAK,mBAAAnF,MAAA,CAAmBmF,OAAO,CAAE,CAAC;EACpC;AACF;;AAEA;AACA;AACA;AACA,MAAM6Z,oBAAoB,SAAS1e,KAAK,CAAC;EACvC;EACA4C,WAAWA,CAAA,EAAG;IACZ,KAAK,CAAC,gEAAgE,CAAC;EACzE;AACF;;AAEA;AACA;AACA;AACA,MAAM+b,sBAAsB,SAAS3e,KAAK,CAAC;EACzC;EACA4C,WAAWA,CAACgc,QAAQ,EAAE;IACpB,KAAK,yCAAAlf,MAAA,CAAyCkf,QAAQ,wCAAqC,CAAC;EAC9F;AACF;;AAEA;AACA;AACA;AACA,MAAMC,oBAAoB,SAAS7e,KAAK,CAAC;EACvC;EACA4C,WAAWA,CAACkc,eAAe,EAAE3J,QAAQ,EAAE4J,SAAS,EAAE;IAChD,KAAK,8DAAArf,MAAA,CAA8Dof,eAAe,cAAApf,MAAA,CAAWyV,QAAQ,wBAAAzV,MAAA,CAAqBqf,SAAS,uBAAoB,CAAC;EAC1J;AACF;;AAEA;AACA;AACA;AACA,MAAMC,qBAAqB,SAAShf,KAAK,CAAC;EACxC;EACA4C,WAAWA,CAAA,EAAG;IACZ,KAAK,+DAA+D,CAAC;EACvE;AACF;;AAEA;AACA;AACA;AACA,MAAMqc,uBAAuB,SAASjf,KAAK,CAAC;EAC1C;EACA4C,WAAWA,CAACuS,QAAQ,EAAE;IACpB,KAAK,wCAAAzV,MAAA,CAAwCyV,QAAQ,YAAS,CAAC;EACjE;AACF;;AAEA;AACA;AACA;AACA;AACA,MAAM+J,UAAU,SAASlf,KAAK,CAAC;EAC7B;EACA4C,WAAWA,CAACiC,OAAO,EAAEsa,UAAU,EAAE;IAC/B,KAAK,kBAAAzf,MAAA,CAAkBmF,OAAO,CAAE,CAAC;IACjC,IAAI,CAACsa,UAAU,GAAGA,UAAU;EAC9B;AACF;;AAEA;AACA;AACA;AACA;AACA,MAAMC,mBAAmB,SAASpf,KAAK,CAAC;EACtC4C,WAAWA,CAACiC,OAAO,EAAE;IACnB,KAAK,mBAAAnF,MAAA,CAAmBmF,OAAO,SAAAnF,MAAA,CAASmF,OAAO,IAAK,EAAE,CAAE,CAAC;EAC3D;AACF;;AAEA;AACA;AACA;AACA;AACA,MAAMwa,0BAA0B,SAASrf,KAAK,CAAC;EAC7C4C,WAAWA,CAACwC,EAAE,EAAE;IACd,KAAK,6CAAA1F,MAAA,CAA6C0F,EAAE,YAAA1F,MAAA,CAAY0F,EAAE,IAAK,EAAE,CAAE,CAAC;EAC9E;AACF;;AAEA;AACA;AACA;AACA,MAAMka,uBAAuB,SAAStf,KAAK,CAAC;EAC1C;EACA4C,WAAWA,CAACiC,OAAO,EAAE;IACnB,KAAK,yBAAAnF,MAAA,CAAyBmF,OAAO,UAAAnF,MAAA,CAAUmF,OAAO,gBAAa,EAAE,CAAE,CAAC;EAC1E;AACF;;AAEA;AACA;AACA;AACA;AACA,MAAM0a,oBAAoB,SAASvf,KAAK,CAAC;EACvC4C,WAAWA,CAAC4c,0BAA0B,EAAEC,SAAS,EAAE;IACjD,KAAK,2BAAA/f,MAAA,CAA2B8f,0BAA0B,4BAAA9f,MAAA,CAA4B8f,0BAA0B,IAAK,EAAE,EAAA9f,MAAA,CAAG+f,SAAS,mBAAA/f,MAAA,CAAmB+f,SAAS,IAAK,EAAE,CAAE,CAAC;EAC3K;AACF;;AAEA;AACA;AACA;AACA;AACA,MAAMC,qBAAqB,SAAS1f,KAAK,CAAC;EACxC4C,WAAWA,CAAC4c,0BAA0B,EAAEC,SAAS,EAAEE,UAAU,EAAEC,YAAY,EAAE;IAC3E,KAAK,wEAAAlgB,MAAA,CAAwE8f,0BAA0B,4BAAA9f,MAAA,CAA4B8f,0BAA0B,IAAK,EAAE,EAAA9f,MAAA,CAAG+f,SAAS,mBAAA/f,MAAA,CAAmB+f,SAAS,IAAK,EAAE,EAAA/f,MAAA,CAAGkgB,YAAY,sBAAAlgB,MAAA,CAAsBkgB,YAAY,IAAK,EAAE,EAAAlgB,MAAA,CAAGigB,UAAU,oBAAAjgB,MAAA,CAAoBigB,UAAU,IAAK,EAAE,CAAE,CAAC;EAClU;AACF;;AAEA;AACA;AACA;AACA;AACA,MAAME,uBAAuB,SAAS7f,KAAK,CAAC;EAC1C4C,WAAWA,CAACkd,YAAY,EAAE;IACxB,KAAK,qDAAApgB,MAAA,CAAqDogB,YAAY,iBAAApgB,MAAA,CAAiBogB,YAAY,IAAK,EAAE,CAAE,CAAC;EAC/G;AACF;;AAEA;AACA;AACA;AACA;AACA,MAAMC,qBAAqB,SAAS/f,KAAK,CAAC;EACxC4C,WAAWA,CAACgM,OAAO,EAAEkQ,eAAe,EAAE;IACpC,IAAIja,OAAO,GAAG7B,SAAS,CAACjD,MAAM,GAAG,CAAC,IAAIiD,SAAS,CAAC,CAAC,CAAC,KAAKC,SAAS,GAAGD,SAAS,CAAC,CAAC,CAAC,GAAG,+BAA+B;IACjH,KAAK,IAAAtD,MAAA,CAAImF,OAAO,6BAAAnF,MAAA,CAA0BkP,OAAO,mBAAAlP,MAAA,CAAmBkP,OAAO,IAAK,EAAE,EAAAlP,MAAA,CAAGof,eAAe,oBAAApf,MAAA,CAAoBof,eAAe,IAAK,EAAE,CAAE,CAAC;EACnJ;AACF;;AAEA;AACA;AACA;AACA;AACA,MAAMkB,uBAAuB,SAAShgB,KAAK,CAAC;EAC1C4C,WAAWA,CAACwC,EAAE,EAAE6a,OAAO,EAAE;IACvB,KAAK,6BAAAvgB,MAAA,CAA6B0F,EAAE,YAAA1F,MAAA,CAAY0F,EAAE,IAAK,EAAE,EAAA1F,MAAA,CAAGugB,OAAO,kBAAAvgB,MAAA,CAAkBugB,OAAO,CAACne,QAAQ,CAAC,CAAC,IAAK,EAAE,CAAE,CAAC;EACnH;AACF;;AAEA;AACA;AACA;AACA;AACA,MAAMoe,4BAA4B,SAASlgB,KAAK,CAAC;EAC/C4C,WAAWA,CAACud,OAAO,EAAE;IACnB,KAAK,qFAAAzgB,MAAA,CAAqFygB,OAAO,CAACja,IAAI,mGAAgG,CAAC;EACzM;AACF;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AAFA,IAAAka,OAAA,oBAAAC,OAAA;AAAA,IAAAC,KAAA,oBAAAD,OAAA;AAAA,IAAAE,IAAA,oBAAAF,OAAA;AAGA,MAAMG,gBAAgB,SAASxgB,KAAK,CAAC;EAInC4C,WAAWA,CAAC+Z,IAAI,EAAE8D,GAAG,EAAE;IACrB,IAAIC,YAAY,8SAAkF;IAClGA,YAAY,eAAAhhB,MAAA,CAAeid,IAAI,CAACgE,MAAM,CAAE;IACxCD,YAAY,2XAAmG;IAC/GA,YAAY,IAAIE,UAAU,CAAC,MAAM,EAAEjE,IAAI,CAAC/a,IAAI,CAAC;IAC7C,IAAI+a,IAAI,CAAC9H,EAAE,EAAE;MACX6L,YAAY,IAAIE,UAAU,CAAC,IAAI,EAAEjE,IAAI,CAACkE,YAAY,MAAAnhB,MAAA,CAAMid,IAAI,CAAC9H,EAAE,QAAAnV,MAAA,CAAKid,IAAI,CAACkE,YAAY,SAAMlE,IAAI,CAAC9H,EAAE,CAAC;IACrG;IACA6L,YAAY,IAAIE,UAAU,aAAAlhB,MAAA,CAAaid,IAAI,CAAC7Z,OAAO,CAACoD,IAAI,QAAAxG,MAAA,CAAKid,IAAI,CAAC7Z,OAAO,CAACkD,OAAO,MAAG,CAAC;IACrF,IAAI2W,IAAI,CAAC9V,MAAM,EAAE;MACf,IAAI;QACF,MAAMhE,GAAG,GAAG,IAAIkK,GAAG,CAAC4P,IAAI,CAAC9V,MAAM,CAAC;QAChC6Z,YAAY,IAAIE,UAAU,QAAQ/d,GAAG,CAACoL,QAAQ,CAAC;MACjD,CAAC,CAAC,OAAO6S,EAAE,EAAE;QACX;MAAA;IAEJ;IACA,IAAInE,IAAI,CAACoE,IAAI,EAAE;MACbL,YAAY,IAAIE,UAAU,YAAYjE,IAAI,CAACoE,IAAI,CAAC;IAClD;IACA,IAAIpE,IAAI,CAAC1a,KAAK,IAAI0a,IAAI,CAAC1a,KAAK,CAAC+e,EAAE,CAAC,CAAC,CAAC,EAAE;MAAA,IAAAC,qBAAA;MAClCP,YAAY,IAAIE,UAAU,CAAC,OAAO,KAAAlhB,MAAA,CAAKzF,KAAK,CAACinB,WAAW,CAACvE,IAAI,CAAC1a,KAAK,CAAC,OAAAvC,MAAA,CAAI,EAAAuhB,qBAAA,GAAAnR,aAAa,CAAC6M,IAAI,CAAC7Z,OAAO,CAACkD,OAAO,CAAC,cAAAib,qBAAA,uBAAnCA,qBAAA,CAAqC9a,MAAM,KAAI,EAAE,CAAE,CAAC;IAC9H;IACAua,YAAY,IAAIE,UAAU,YAAAlhB,MAAA,CAAYid,IAAI,CAACnb,IAAI,CAAE,CAAC;IAClD,IAAImb,IAAI,CAACzX,MAAM,EAAE;MACfwb,YAAY,IAAIE,UAAU,CAAC,QAAQ,EAAEjE,IAAI,CAACzX,MAAM,CAAC;IACnD;IACA,IAAIyX,IAAI,CAACwE,OAAO,EAAE;MAChB,MAAMC,UAAU,GAAGzE,IAAI,CAACwE,OAAO,CAACnQ,IAAI,CAACqQ,IAAI,IAAIA,IAAI,CAACC,MAAM,CAAChU,QAAQ,CAACqP,IAAI,CAACgE,MAAM,CAAC,CAAC;MAC/E,IAAIS,UAAU,EAAE;QACd,MAAMG,KAAK,GAAGH,UAAU,CAACE,MAAM,CAACE,KAAK,CAAC,IAAI,CAAC,CAAC7d,GAAG,CAAC,CAAC8d,IAAI,EAAE/c,KAAK,QAAAhF,MAAA,CAAQgF,KAAK,GAAG,CAAC,QAAAhF,MAAA,CAAK+hB,IAAI,CAAE,CAAC;QACzF,MAAMC,UAAU,GAAGH,KAAK,CAACI,SAAS,CAACF,IAAI,IAAIA,IAAI,CAACnU,QAAQ,CAACqP,IAAI,CAACgE,MAAM,CAAC,CAAC;QACtEY,KAAK,CAACG,UAAU,CAAC,IAAI,eAAe;QACpC,MAAME,UAAU,GAAGL,KAAK,CAAC1U,KAAK,CAAC6U,UAAU,GAAG,CAAC,EAAEA,UAAU,GAAG,CAAC,CAAC;QAC9DhB,YAAY,sVAA4F;QACxGA,YAAY,aAAAhhB,MAAA,CAAa0hB,UAAU,CAACS,QAAQ,CAACC,OAAO,CAAC,eAAe,EAAE,EAAE,CAAC,SAAM;QAC/EpB,YAAY,IAAIkB,UAAU,CAACnhB,IAAI,CAAC,IAAI,CAAC;MACvC;IACF;IACAigB,YAAY,yUAAyF;IACrGA,YAAY,2EAA2E;IACvFA,YAAY,UAAU;IACtB,KAAK,CAACA,YAAY,CAAC;IAACqB,0BAAA,OAAA3B,OAAA;MAAA4B,QAAA;MAAA/f,KAAA;IAAA;IAAA8f,0BAAA,OAAAzB,KAAA;MAAA0B,QAAA;MAAA/f,KAAA;IAAA;IAAA8f,0BAAA,OAAAxB,IAAA;MAAAyB,QAAA;MAAA/f,KAAA;IAAA;IACpBggB,qBAAA,KAAI,EAAA7B,OAAA,EAAWzD,IAAI,CAACgE,MAAM;IAC1BsB,qBAAA,KAAI,EAAA3B,KAAA,EAAS3D,IAAI;IACjBsF,qBAAA,KAAI,EAAA1B,IAAA,EAAQE,GAAG;EACjB;;EAEA;EACA,IAAIE,MAAMA,CAAA,EAAG;IACX,OAAAuB,qBAAA,CAAO,IAAI,EAAA9B,OAAA;EACb;EACA,IAAIK,GAAGA,CAAA,EAAG;IACR,OAAAyB,qBAAA,CAAO,IAAI,EAAA3B,IAAA;EACb;EACA,IAAI5D,IAAIA,CAAA,EAAG;IACT,OAAAuF,qBAAA,CAAO,IAAI,EAAA5B,KAAA;EACb;AACF;;AAEA;AACA;AACA;AACA,SAAS6B,iBAAiBA,CAACvd,KAAK,EAAE;EAChC,IAAIA,KAAK,CAAC+b,MAAM,IAAI,CAAC/b,KAAK,CAAC+b,MAAM,CAACrT,QAAQ,CAAC,qBAAqB,CAAC,EAAE;IACjE,OAAO1I,KAAK,CAAC+b,MAAM;EACrB;EACA,IAAI/b,KAAK,CAACA,KAAK,EAAE;IACf,OAAOA,KAAK,CAACA,KAAK;EACpB;;EAEA;;EAEA,IAAIwd,WAAW,GAAGxd,KAAK;EACvB,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;IAC7B;IACAwd,WAAW,GAAGje,IAAI,CAACC,SAAS,CAACQ,KAAK,CAAC;EACrC,CAAC,MAAM,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;IACpCwd,WAAW,GAAGxd,KAAK,CAAC9C,QAAQ,CAAC,CAAC;EAChC;EACA,OAAOugB,iBAAiB,CAAC,4BAA4B,EAAED,WAAW,CAAC,IAAIC,iBAAiB,CAAC,2BAA2B,EAAED,WAAW,CAAC,IAAIxd,KAAK,CAACC,OAAO,IAAI,EAAE;AAC3J;AACA,SAAS+b,UAAUA,CAAC0B,KAAK,EAAEC,OAAO,EAAE;EAClC,IAAIA,OAAO,KAAK,EAAE,EAAE;IAClB,OAAOA,OAAO;EAChB;EACA,MAAMC,MAAM,GAAGC,KAAK,CAAC,EAAE,GAAGH,KAAK,CAACviB,MAAM,CAAC,CAAC2iB,IAAI,CAAC,GAAG,CAAC,CAACjiB,IAAI,CAAC,EAAE,CAAC;EAC1D,IAAI8hB,OAAO,CAACjV,QAAQ,CAAC,IAAI,CAAC,EAAE;IAC1BiV,OAAO,GAAG,QAAQ,GAAGA,OAAO,CAACf,KAAK,CAAC,IAAI,CAAC,CAAC/gB,IAAI,OAAO,CAAC;EACvD,CAAC,MAAM;IACL8hB,OAAO,MAAA7iB,MAAA,CAAM8iB,MAAM,EAAA9iB,MAAA,CAAG6iB,OAAO,CAAE;EACjC;EACA,YAAA7iB,MAAA,CAAY4iB,KAAK,OAAA5iB,MAAA,CAAI6iB,OAAO;AAC9B;AACA,SAASF,iBAAiBA,CAACM,KAAK,EAAElC,GAAG,EAAE;EACrC,MAAMmC,UAAU,GAAGnC,GAAG,CAACtgB,KAAK,CAACwiB,KAAK,CAAC,IAAI,EAAE;EACzC,IAAIE,SAAS,GAAG,EAAE;EAClB,IAAI,CAAAD,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAE7iB,MAAM,IAAG,CAAC,EAAE;IAC1B8iB,SAAS,IAAID,UAAU,CAAC,CAAC,CAAC;EAC5B;EACA,OAAOC,SAAS;AAClB;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASC,oBAAoBA,CAACC,GAAG,EAAEle,OAAO,EAAE;EAC1C,IAAI,CAACke,GAAG,EAAE;IACR,OAAO,KAAK;EACd;EACA,OAAOA,GAAG,IAAIA,GAAG,CAACjhB,QAAQ,CAAC,CAAC,CAACwL,QAAQ,CAACzI,OAAO,CAAC,IAAIke,GAAG,IAAIA,GAAG,CAACle,OAAO,IAAIke,GAAG,CAACle,OAAO,CAAC/C,QAAQ,CAAC,CAAC,CAACwL,QAAQ,CAACzI,OAAO,CAAC,IAAIke,GAAG,IAAIA,GAAG,CAACne,KAAK,IAAIme,GAAG,CAACne,KAAK,CAAC9C,QAAQ,CAAC,CAAC,CAACwL,QAAQ,CAACzI,OAAO,CAAC;AAChL;AAEA,MAAMme,iCAAiC,GAAG;EACxC9c,IAAI,EAAE,wBAAwB;EAC9B+c,SAAS,EAAE,kBAAkB;EAC7BC,QAAQ,EAAE;IACRC,GAAG,EAAE,qBAAqB;IAC1BC,SAAS,EAAE;EACb,CAAC;EACDC,IAAI,EAAE,CAACvoB,QAAQ,EAAEmB,kBAAkB,CAAC;EACpCqnB,QAAQ,EAAE,CAAC;AACb,CAAC;AACD,MAAMC,iCAAiC,GAAG;EACxCrd,IAAI,EAAE,wBAAwB;EAC9B+c,SAAS,EAAE,kBAAkB;EAC7BC,QAAQ,EAAE;IACRC,GAAG,EAAE,qBAAqB;IAC1BC,SAAS,EAAE;EACb,CAAC;EACDC,IAAI,EAAE,CAACvoB,QAAQ,EAAEkB,gBAAgB,CAAC;EAClCsnB,QAAQ,EAAE,CAAC;AACb,CAAC;AACD,MAAME,6BAA6B,GAAG;EACpCtd,IAAI,EAAE,oBAAoB;EAC1B+c,SAAS,EAAE,kBAAkB;EAC7BC,QAAQ,EAAE;IACRC,GAAG,EAAE,qBAAqB;IAC1BC,SAAS,EAAE;EACb,CAAC;EACDC,IAAI,EAAE,CAACvoB,QAAQ,EAAEgB,KAAK,CAAC;EACvBwnB,QAAQ,EAAE,CAAC;AACb,CAAC;AACD,MAAMG,6BAA6B,GAAG;EACpCvd,IAAI,EAAE,oBAAoB;EAC1B+c,SAAS,EAAE,kBAAkB;EAC7BC,QAAQ,EAAE;IACRC,GAAG,EAAE,qBAAqB;IAC1BC,SAAS,EAAE;EACb,CAAC;EACDC,IAAI,EAAE,CAACtnB,eAAe,CAAC;EACvBunB,QAAQ,EAAE,CAAC;AACb,CAAC;AACD,MAAMI,sBAAsB,GAAG;EAC7Bxd,IAAI,EAAE,eAAe;EACrB+c,SAAS,EAAE,YAAY;EACvBC,QAAQ,EAAE;IACRC,GAAG,EAAE,mBAAmB;IACxBC,SAAS,EAAE;EACb,CAAC;EACDC,IAAI,EAAE,CAACvoB,QAAQ,EAAEe,iBAAiB,CAAC;EACnCynB,QAAQ,EAAE,CAAC;AACb,CAAC;AACD,MAAMK,gCAAgC,GAAG;EACvCzd,IAAI,EAAE,wBAAwB;EAC9B+c,SAAS,EAAE,iBAAiB;EAC5BC,QAAQ,EAAE;IACRC,GAAG,EAAE,4BAA4B;IACjCC,SAAS,EAAE;EACb,CAAC;EACDC,IAAI,EAAE,CAACvoB,QAAQ,EAAEuB,sBAAsB,CAAC;EACxCinB,QAAQ,EAAE,CAAC;AACb,CAAC;AACD,MAAMM,4BAA4B,GAAG;EACnC1d,IAAI,EAAE,oBAAoB;EAC1B+c,SAAS,EAAE,kBAAkB;EAC7BC,QAAQ,EAAE;IACRC,GAAG,EAAE,wBAAwB;IAC7BC,SAAS,EAAE;EACb,CAAC;EACDC,IAAI,EAAE,CAACvoB,QAAQ,EAAEqB,iBAAiB,EAAEC,YAAY,CAAC;EACjDknB,QAAQ,EAAE,CAAC;AACb,CAAC;AACD,MAAMO,sBAAsB,GAAG;EAC7B3d,IAAI,EAAE,eAAe;EACrB+c,SAAS,EAAE,YAAY;EACvBC,QAAQ,EAAE;IACRC,GAAG,EAAE,mBAAmB;IACxBC,SAAS,EAAE;EACb,CAAC;EACDC,IAAI,EAAE,CAACvoB,QAAQ,EAAEqB,iBAAiB,CAAC;EACnCmnB,QAAQ,EAAE;IACR,CAACM,4BAA4B,CAAC1d,IAAI,GAAG0d;EACvC;AACF,CAAC;AACD,MAAME,oBAAoB,GAAG;EAC3B5d,IAAI,EAAE,aAAa;EACnB+c,SAAS,EAAE,cAAc;EACzBC,QAAQ,EAAE;IACRC,GAAG,EAAE,iBAAiB;IACtBC,SAAS,EAAE;EACb,CAAC;EACDC,IAAI,EAAE,CAACvoB,QAAQ,EAAEoB,eAAe,CAAC;EACjConB,QAAQ,EAAE,CAAC;AACb,CAAC;AACD,MAAMS,aAAa,GAAG;EACpB7d,IAAI,EAAE,OAAO;EACb+c,SAAS,EAAE,OAAO;EAClBC,QAAQ,EAAE;IACRC,GAAG,EAAE,WAAW;IAChBC,SAAS,EAAE;EACb,CAAC;EACDC,IAAI,EAAE,CAACvoB,QAAQ,EAAEC,iBAAiB,CAAC;EACnCuoB,QAAQ,EAAE;IACR,CAACI,sBAAsB,CAACxd,IAAI,GAAGwd,sBAAsB;IACrD,CAACG,sBAAsB,CAAC3d,IAAI,GAAG2d,sBAAsB;IACrD,CAACb,iCAAiC,CAAC9c,IAAI,GAAG8c,iCAAiC;IAC3E,CAACO,iCAAiC,CAACrd,IAAI,GAAGqd,iCAAiC;IAC3E,CAACE,6BAA6B,CAACvd,IAAI,GAAGud,6BAA6B;IACnE,CAACD,6BAA6B,CAACtd,IAAI,GAAGsd,6BAA6B;IACnE,CAACG,gCAAgC,CAACzd,IAAI,GAAGyd,gCAAgC;IACzE,CAACG,oBAAoB,CAAC5d,IAAI,GAAG4d;EAC/B;AACF,CAAC;AAED,MAAME,oBAAoB,GAAG;EAC3B9d,IAAI,EAAE,gBAAgB;EACtB+c,SAAS,EAAE,UAAU;EACrBC,QAAQ,EAAE;IACRC,GAAG,EAAE,oBAAoB;IACzBC,SAAS,EAAE;EACb,CAAC;EACDC,IAAI,EAAE,CAAChoB,SAAS,EAAEiB,kBAAkB,CAAC;EACrCgnB,QAAQ,EAAE,CAAC;AACb,CAAC;AACD,MAAMW,sBAAsB,GAAG;EAC7B/d,IAAI,EAAE,kBAAkB;EACxB+c,SAAS,EAAE,mBAAmB;EAC9BC,QAAQ,EAAE;IACRC,GAAG,EAAE,mBAAmB;IACxBC,SAAS,EAAE;EACb,CAAC;EACDC,IAAI,EAAE,CAAChoB,SAAS,EAAEwB,YAAY,EAAEL,gBAAgB,CAAC;EACjD8mB,QAAQ,EAAE,CAAC;AACb,CAAC;AACD,MAAMY,uBAAuB,GAAG;EAC9Bhe,IAAI,EAAE,kBAAkB;EACxB+c,SAAS,EAAE,gBAAgB;EAC3BC,QAAQ,EAAE;IACRC,GAAG,EAAE,sBAAsB;IAC3B;IACAC,SAAS,EAAE;EACb,CAAC;EACDC,IAAI,EAAE,CAAChoB,SAAS,EAAE4B,aAAa,CAAC;EAChCqmB,QAAQ,EAAE,CAAC;AACb,CAAC;AACD,MAAMa,+BAA+B,GAAG;EACtCje,IAAI,EAAE,yBAAyB;EAC/B+c,SAAS,EAAE,gBAAgB;EAC3BC,QAAQ,EAAE;IACRC,GAAG,EAAE,qBAAqB;IAC1BC,SAAS,EAAE;EACb,CAAC;EACDC,IAAI,EAAE,CAAChoB,SAAS,EAAEY,kBAAkB,CAAC;EACrCqnB,QAAQ,EAAE,CAAC;AACb,CAAC;AACD,MAAMc,+BAA+B,GAAG;EACtCle,IAAI,EAAE,yBAAyB;EAC/B+c,SAAS,EAAE,gBAAgB;EAC3BC,QAAQ,EAAE;IACRC,GAAG,EAAE,qBAAqB;IAC1BC,SAAS,EAAE;EACb,CAAC;EACDC,IAAI,EAAE,CAAChoB,SAAS,EAAEW,gBAAgB,CAAC;EACnCsnB,QAAQ,EAAE,CAAC;AACb,CAAC;AACD,MAAMe,2BAA2B,GAAG;EAClCne,IAAI,EAAE,qBAAqB;EAC3B+c,SAAS,EAAE,gBAAgB;EAC3BC,QAAQ,EAAE;IACRC,GAAG,EAAE,qBAAqB;IAC1BC,SAAS,EAAE;EACb,CAAC;EACDC,IAAI,EAAE,CAAC5mB,gBAAgB,CAAC;EACxB6mB,QAAQ,EAAE,CAAC;AACb,CAAC;AACD,MAAMgB,2BAA2B,GAAG;EAClCpe,IAAI,EAAE,qBAAqB;EAC3B+c,SAAS,EAAE,gBAAgB;EAC3BC,QAAQ,EAAE;IACRC,GAAG,EAAE,qBAAqB;IAC1BC,SAAS,EAAE;EACb,CAAC;EACDC,IAAI,EAAE,CAAChoB,SAAS,EAAES,KAAK,CAAC;EACxBwnB,QAAQ,EAAE,CAAC;AACb,CAAC;AACD,MAAMiB,wBAAwB,GAAG;EAC/Bre,IAAI,EAAE,mBAAmB;EACzB+c,SAAS,EAAE,gBAAgB;EAC3BC,QAAQ,EAAE;IACRC,GAAG,EAAE,qBAAqB;IAC1BC,SAAS,EAAE;EACb,CAAC;EACDC,IAAI,EAAE,CAAChoB,SAAS,EAAEkB,gBAAgB,CAAC;EACnC+mB,QAAQ,EAAE,CAAC;AACb,CAAC;AACD,MAAMkB,sBAAsB,GAAG;EAC7Bte,IAAI,EAAE,iBAAiB;EACvB+c,SAAS,EAAE,gBAAgB;EAC3BC,QAAQ,EAAE;IACRC,GAAG,EAAE,qBAAqB;IAC1BC,SAAS,EAAE;EACb,CAAC;EACDC,IAAI,EAAE,CAAChoB,SAAS,EAAE8B,gBAAgB,CAAC;EACnCmmB,QAAQ,EAAE,CAAC;AACb,CAAC;AACD,MAAMmB,yBAAyB,GAAG;EAChCve,IAAI,EAAE,oBAAoB;EAC1B+c,SAAS,EAAE,UAAU;EACrBC,QAAQ,EAAE;IACRC,GAAG,EAAE,wBAAwB;IAC7BC,SAAS,EAAE;EACb,CAAC;EACDC,IAAI,EAAE,CAAChoB,SAAS,EAAEwB,YAAY,CAAC;EAC/BymB,QAAQ,EAAE;IACR,CAACW,sBAAsB,CAAC/d,IAAI,GAAG+d;EACjC;AACF,CAAC;AACD,MAAMS,0BAA0B,GAAG;EACjCxe,IAAI,EAAE,qBAAqB;EAC3B+c,SAAS,EAAE,gBAAgB;EAC3BC,QAAQ,EAAE;IACRC,GAAG,EAAE,yBAAyB;IAC9BC,SAAS,EAAE;EACb,CAAC;EACDC,IAAI,EAAE,CAAChoB,SAAS,EAAEyB,kBAAkB,EAAEV,YAAY,CAAC;EACnDknB,QAAQ,EAAE,CAAC;AACb,CAAC;AACD,MAAMqB,oBAAoB,GAAG;EAC3Bze,IAAI,EAAE,gBAAgB;EACtB+c,SAAS,EAAE,UAAU;EACrBC,QAAQ,EAAE;IACRC,GAAG,EAAE,oBAAoB;IACzBC,SAAS,EAAE;EACb,CAAC;EACDC,IAAI,EAAE,CAAChoB,SAAS,EAAEyB,kBAAkB,CAAC;EACrCwmB,QAAQ,EAAE;IACR,CAACoB,0BAA0B,CAACxe,IAAI,GAAGwe;EACrC;AACF,CAAC;AACD,MAAME,iCAAiC,GAAG;EACxC1e,IAAI,EAAE,uBAAuB;EAC7B+c,SAAS,EAAE,eAAe;EAC1BC,QAAQ,EAAE;IACRC,GAAG,EAAE,yBAAyB;IAC9BC,SAAS,EAAE;EACb,CAAC;EACDC,IAAI,EAAE,CAAChoB,SAAS,EAAE0B,sBAAsB,CAAC;EACzCumB,QAAQ,EAAE,CAAC;AACb,CAAC;AACD,MAAMuB,iCAAiC,GAAG;EACxC3e,IAAI,EAAE,uBAAuB;EAC7B+c,SAAS,EAAE,eAAe;EAC1BC,QAAQ,EAAE;IACRC,GAAG,EAAE,yBAAyB;IAC9BC,SAAS,EAAE;EACb,CAAC;EACDC,IAAI,EAAE,CAACrmB,yBAAyB,CAAC;EACjCsmB,QAAQ,EAAE,CAAC;AACb,CAAC;AACD,MAAMwB,sBAAsB,GAAG;EAC7B5e,IAAI,EAAE,kBAAkB;EACxB+c,SAAS,EAAE,iBAAiB;EAC5BC,QAAQ,EAAE;IACRC,GAAG,EAAE,sBAAsB;IAC3BC,SAAS,EAAE;EACb,CAAC;EACDC,IAAI,EAAE,CAAChoB,SAAS,EAAEqB,mBAAmB,CAAC;EACtC4mB,QAAQ,EAAE,CAAC;AACb,CAAC;AACD,MAAMyB,qBAAqB,GAAG;EAC5B7e,IAAI,EAAE,kBAAkB;EACxB+c,SAAS,EAAE,iBAAiB;EAC5BC,QAAQ,EAAE;IACRC,GAAG,EAAE,EAAE;IACPC,SAAS,EAAE;EACb,CAAC;EACDC,IAAI,EAAE,CAAC1mB,mBAAmB,CAAC;EAC3B2mB,QAAQ,EAAE,CAAC;AACb,CAAC;AACD,MAAM0B,kBAAkB,GAAG;EACzB9e,IAAI,EAAE,cAAc;EACpB+c,SAAS,EAAE,WAAW;EACtBC,QAAQ,EAAE;IACRC,GAAG,EAAE,kBAAkB;IACvBC,SAAS,EAAE;EACb,CAAC;EACDC,IAAI,EAAE,CAAChoB,SAAS,EAAEuB,eAAe,CAAC;EAClC0mB,QAAQ,EAAE;IACR,CAACwB,sBAAsB,CAAC5e,IAAI,GAAG4e,sBAAsB;IACrD,CAACC,qBAAqB,CAAC7e,IAAI,GAAG6e;EAChC;AACF,CAAC;AACD,MAAME,2BAA2B,GAAG;EAClC/e,IAAI,EAAE,sBAAsB;EAC5B+c,SAAS,EAAE,oBAAoB;EAC/BC,QAAQ,EAAE;IACRC,GAAG,EAAE,oBAAoB;IACzBC,SAAS,EAAE;EACb,CAAC;EACDC,IAAI,EAAE,CAAChoB,SAAS,EAAE6B,iBAAiB,CAAC;EACpComB,QAAQ,EAAE,CAAC;AACb,CAAC;AACD,MAAM4B,wBAAwB,GAAG;EAC/Bhf,IAAI,EAAE,mBAAmB;EACzB+c,SAAS,EAAE,iBAAiB;EAC5BC,QAAQ,EAAE;IACR;IACAC,GAAG,EAAE,EAAE;IACPC,SAAS,EAAE;EACb,CAAC;EACDC,IAAI,EAAE,CAACjmB,eAAe,CAAC;EACvBkmB,QAAQ,EAAE,CAAC;AACb,CAAC;AACD,MAAM6B,8BAA8B,GAAG;EACrCjf,IAAI,EAAE,yBAAyB;EAC/B+c,SAAS,EAAE,cAAc;EACzBC,QAAQ,EAAE;IACR;IACAC,GAAG,EAAE,EAAE;IACPC,SAAS,EAAE;EACb,CAAC;EACDC,IAAI,EAAE,CAAChoB,SAAS,EAAEgC,eAAe,CAAC;EAClCimB,QAAQ,EAAE,CAAC;AACb,CAAC;AACD,MAAM8B,WAAW,GAAG;EAClBlf,IAAI,EAAE,QAAQ;EACd+c,SAAS,EAAE,KAAK;EAChBC,QAAQ,EAAE;IACRC,GAAG,EAAE,YAAY;IACjBC,SAAS,EAAE;EACb,CAAC;EACDC,IAAI,EAAE,CAAChoB,SAAS,EAAET,kBAAkB,CAAC;EACrC0oB,QAAQ,EAAE;IACR,CAACU,oBAAoB,CAAC9d,IAAI,GAAG8d,oBAAoB;IACjD,CAACgB,kBAAkB,CAAC9e,IAAI,GAAG8e,kBAAkB;IAC7C,CAACL,oBAAoB,CAACze,IAAI,GAAGye,oBAAoB;IACjD,CAACF,yBAAyB,CAACve,IAAI,GAAGue,yBAAyB;IAC3D,CAACI,iCAAiC,CAAC3e,IAAI,GAAG2e,iCAAiC;IAC3E,CAACD,iCAAiC,CAAC1e,IAAI,GAAG0e,iCAAiC;IAC3E,CAACV,uBAAuB,CAAChe,IAAI,GAAGge,uBAAuB;IACvD,CAACK,wBAAwB,CAACre,IAAI,GAAGqe,wBAAwB;IACzD,CAACC,sBAAsB,CAACte,IAAI,GAAGse,sBAAsB;IACrD,CAACL,+BAA+B,CAACje,IAAI,GAAGie,+BAA+B;IACvE,CAACC,+BAA+B,CAACle,IAAI,GAAGke,+BAA+B;IACvE,CAACC,2BAA2B,CAACne,IAAI,GAAGme,2BAA2B;IAC/D,CAACC,2BAA2B,CAACpe,IAAI,GAAGoe,2BAA2B;IAC/D,CAACW,2BAA2B,CAAC/e,IAAI,GAAG+e,2BAA2B;IAC/D,CAACC,wBAAwB,CAAChf,IAAI,GAAGgf,wBAAwB;IACzD,CAACC,8BAA8B,CAACjf,IAAI,GAAGif;EACzC;AACF,CAAC;;AAED;AACA,MAAME,eAAe,GAAG,CAAC;EACvB/M,MAAM,EAAE,EAAE;EACVpS,IAAI,EAAE,MAAM;EACZqS,OAAO,EAAE,CAAC;IACR+M,YAAY,EAAE,QAAQ;IACtBpf,IAAI,EAAE,EAAE;IACR+P,IAAI,EAAE;EACR,CAAC,CAAC;EACFkC,eAAe,EAAE,MAAM;EACvBlC,IAAI,EAAE;AACR,CAAC,EAAE;EACDqC,MAAM,EAAE,EAAE;EACVpS,IAAI,EAAE,QAAQ;EACdqS,OAAO,EAAE,CAAC;IACR+M,YAAY,EAAE,QAAQ;IACtBpf,IAAI,EAAE,EAAE;IACR+P,IAAI,EAAE;EACR,CAAC,CAAC;EACFkC,eAAe,EAAE,MAAM;EACvBlC,IAAI,EAAE;AACR,CAAC,CAAC;AACF,MAAMsP,wBAAwB,GAAG;EAC/Brf,IAAI,EAAE,iBAAiB;EACvB+c,SAAS,EAAE,cAAc;EACzBC,QAAQ,EAAE;IACRC,GAAG,EAAE,qBAAqB;IAC1BC,SAAS,EAAE;EACb,CAAC;EACDC,IAAI,EAAE,CAACjoB,UAAU,EAAEkC,mBAAmB,CAAC;EACvCgmB,QAAQ,EAAE,CAAC;AACb,CAAC;AACD,MAAMkC,mCAAmC,GAAG;EAC1Ctf,IAAI,EAAE,0BAA0B;EAChC+c,SAAS,EAAE,oBAAoB;EAC/BC,QAAQ,EAAE;IACRC,GAAG,EAAE,sBAAsB;IAC3BC,SAAS,EAAE;EACb,CAAC;EACDC,IAAI,EAAE,CAACjoB,UAAU,EAAEuC,uBAAuB,CAAC;EAC3C2lB,QAAQ,EAAE,CAAC;AACb,CAAC;AACD,MAAMmC,mCAAmC,GAAG;EAC1Cvf,IAAI,EAAE,0BAA0B;EAChC+c,SAAS,EAAE,oBAAoB;EAC/BC,QAAQ,EAAE;IACRC,GAAG,EAAE,sBAAsB;IAC3BC,SAAS,EAAE;EACb,CAAC;EACDC,IAAI,EAAE,CAACjoB,UAAU,EAAEsC,oBAAoB,CAAC;EACxC4lB,QAAQ,EAAE,CAAC;AACb,CAAC;AACD,MAAMoC,+BAA+B,GAAG;EACtCxf,IAAI,EAAE,sBAAsB;EAC5B+c,SAAS,EAAE,oBAAoB;EAC/BC,QAAQ,EAAE;IACRC,GAAG,EAAE,sBAAsB;IAC3BC,SAAS,EAAE;EACb,CAAC;EACDC,IAAI,EAAE,CAACjoB,UAAU,EAAEoC,mBAAmB,CAAC;EACvC8lB,QAAQ,EAAE,CAAC;AACb,CAAC;AACD,MAAMqC,+BAA+B,GAAG;EACtCzf,IAAI,EAAE,sBAAsB;EAC5B+c,SAAS,EAAE,oBAAoB;EAC/BC,QAAQ,EAAE;IACRC,GAAG,EAAE,sBAAsB;IAC3BC,SAAS,EAAE;EACb,CAAC;EACDC,IAAI,EAAE,CAAC5lB,iBAAiB,CAAC;EACzB6lB,QAAQ,EAAE,CAAC;AACb,CAAC;AACD,MAAMsC,4BAA4B,GAAG;EACnC1f,IAAI,EAAE,oBAAoB;EAC1B+c,SAAS,EAAE,oBAAoB;EAC/BC,QAAQ,EAAE;IACRC,GAAG,EAAE,sBAAsB;IAC3BC,SAAS,EAAE;EACb,CAAC;EACDC,IAAI,EAAE,CAACjoB,UAAU,EAAEmC,iBAAiB,CAAC;EACrC+lB,QAAQ,EAAE,CAAC;AACb,CAAC;AACD,MAAMuC,0BAA0B,GAAG;EACjC3f,IAAI,EAAE,mBAAmB;EACzB+c,SAAS,EAAE,uBAAuB;EAClCC,QAAQ,EAAE;IACRC,GAAG,EAAE,wBAAwB;IAC7BC,SAAS,EAAE;EACb,CAAC;EACDC,IAAI,EAAE,CAACjoB,UAAU,EAAEyB,YAAY,EAAEL,gBAAgB,CAAC;EAClD8mB,QAAQ,EAAE,CAAC;AACb,CAAC;AACD,MAAMwC,gCAAgC,GAAG;EACvC5f,IAAI,EAAE,uBAAuB;EAC7B+c,SAAS,EAAE,cAAc;EACzBC,QAAQ,EAAE;IACRC,GAAG,EAAE,sBAAsB;IAC3BC,SAAS,EAAE;EACb,CAAC;EACDC,IAAI,EAAE,CAACjoB,UAAU,EAAEyB,YAAY,CAAC;EAChCymB,QAAQ,EAAE;IACR,CAACuC,0BAA0B,CAAC3f,IAAI,GAAG2f;EACrC;AACF,CAAC;AACD,MAAME,gCAAgC,GAAG;EACvC7f,IAAI,EAAE,uBAAuB;EAC7B+c,SAAS,EAAE,cAAc;EACzBC,QAAQ,EAAE;IACRC,GAAG,EAAE,sBAAsB;IAC3BC,SAAS,EAAE;EACb,CAAC;EACDC,IAAI,EAAE,CAAC5lB,iBAAiB,CAAC;EACzB6lB,QAAQ,EAAE;IACR,CAACqC,+BAA+B,CAACzf,IAAI,GAAGyf;EAC1C;AACF,CAAC;AACD,MAAMK,kCAAkC,GAAG;EACzC9f,IAAI,EAAE,0BAA0B;EAChC+c,SAAS,EAAE,mBAAmB;EAC9BC,QAAQ,EAAE;IACRC,GAAG,EAAE,8BAA8B;IACnCC,SAAS,EAAE;EACb,CAAC;EACDC,IAAI,EAAE,CAACjoB,UAAU,EAAE2C,wBAAwB,CAAC;EAC5CulB,QAAQ,EAAE,CAAC;AACb,CAAC;AACD,MAAM2C,8BAA8B,GAAG;EACrC/f,IAAI,EAAE,sBAAsB;EAC5B+c,SAAS,EAAE,oBAAoB;EAC/BC,QAAQ,EAAE;IACRC,GAAG,EAAE,0BAA0B;IAC/BC,SAAS,EAAE;EACb,CAAC;EACDC,IAAI,EAAE,CAACjoB,UAAU,EAAE0C,mBAAmB,EAAE1B,YAAY,CAAC;EACrDknB,QAAQ,EAAE,CAAC;AACb,CAAC;AACD,MAAM4C,wBAAwB,GAAG;EAC/BhgB,IAAI,EAAE,iBAAiB;EACvB+c,SAAS,EAAE,cAAc;EACzBC,QAAQ,EAAE;IACRC,GAAG,EAAE,qBAAqB;IAC1BC,SAAS,EAAE;EACb,CAAC;EACDC,IAAI,EAAE,CAACjoB,UAAU,EAAE0C,mBAAmB,CAAC;EACvCwlB,QAAQ,EAAE;IACR,CAAC2C,8BAA8B,CAAC/f,IAAI,GAAG+f;EACzC;AACF,CAAC;AACD,MAAME,0BAA0B,GAAG;EACjCjgB,IAAI,EAAE,mBAAmB;EACzB+c,SAAS,EAAE,eAAe;EAC1BC,QAAQ,EAAE;IACRC,GAAG,EAAE,aAAa;IAClBC,SAAS,EAAE;EACb,CAAC;EACDC,IAAI,EAAE,CAACjoB,UAAU,EAAEyC,oBAAoB,CAAC;EACxCylB,QAAQ,EAAE,CAAC;AACb,CAAC;AACD,MAAM8C,kCAAkC,GAAG;EACzClgB,IAAI,EAAE,0BAA0B;EAChC+c,SAAS,EAAE,kBAAkB;EAC7BC,QAAQ,EAAE;IACR;IACAC,GAAG,EAAE,EAAE;IACPC,SAAS,EAAE;EACb,CAAC;EACDC,IAAI,EAAE,CAACjoB,UAAU,EAAEiC,eAAe,CAAC;EACnCimB,QAAQ,EAAE,CAAC;AACb,CAAC;AACD,MAAM+C,sBAAsB,GAAG;EAC7BngB,IAAI,EAAE,eAAe;EACrB+c,SAAS,EAAE,gBAAgB;EAC3BC,QAAQ,EAAE;IACRC,GAAG,EAAE,EAAE;IACPC,SAAS,EAAE;EACb,CAAC;EACDC,IAAI,EAAE,CAACjoB,UAAU,EAAEwC,gBAAgB,CAAC;EACpC0lB,QAAQ,EAAE,CAAC;AACb,CAAC;AACD,MAAMgD,eAAe,GAAG;EACtBpgB,IAAI,EAAE,SAAS;EACf+c,SAAS,EAAE,SAAS;EACpBC,QAAQ,EAAE;IACRC,GAAG,EAAE,uBAAuB;IAC5BC,SAAS,EAAE;EACb,CAAC;EACDC,IAAI,EAAE,CAACjoB,UAAU,EAAEP,kBAAkB,EAAEwqB,eAAe,CAAC;EACvD/B,QAAQ,EAAE;IACR,CAAC+C,sBAAsB,CAACngB,IAAI,GAAGmgB,sBAAsB;IACrD,CAACd,wBAAwB,CAACrf,IAAI,GAAGqf,wBAAwB;IACzD,CAACY,0BAA0B,CAACjgB,IAAI,GAAGigB,0BAA0B;IAC7D,CAACD,wBAAwB,CAAChgB,IAAI,GAAGggB,wBAAwB;IACzD,CAACH,gCAAgC,CAAC7f,IAAI,GAAG6f,gCAAgC;IACzE,CAACD,gCAAgC,CAAC5f,IAAI,GAAG4f,gCAAgC;IACzE,CAACD,0BAA0B,CAAC3f,IAAI,GAAG2f,0BAA0B;IAC7D,CAACG,kCAAkC,CAAC9f,IAAI,GAAG8f,kCAAkC;IAC7E,CAACJ,4BAA4B,CAAC1f,IAAI,GAAG0f,4BAA4B;IACjE,CAACJ,mCAAmC,CAACtf,IAAI,GAAGsf,mCAAmC;IAC/E,CAACC,mCAAmC,CAACvf,IAAI,GAAGuf,mCAAmC;IAC/E,CAACC,+BAA+B,CAACxf,IAAI,GAAGwf,+BAA+B;IACvE,CAACU,kCAAkC,CAAClgB,IAAI,GAAGkgB;EAC7C;AACF,CAAC;AAED,MAAMG,gBAAgB,GAAG,CAAC;EACxBjO,MAAM,EAAE,EAAE;EACVpS,IAAI,EAAE,eAAe;EACrBqS,OAAO,EAAE,CAAC;IACRH,UAAU,EAAE,CAAC;MACXkN,YAAY,EAAE,QAAQ;MACtBpf,IAAI,EAAE,kBAAkB;MACxB+P,IAAI,EAAE;IACR,CAAC,EAAE;MACDqP,YAAY,EAAE,QAAQ;MACtBpf,IAAI,EAAE,mBAAmB;MACzB+P,IAAI,EAAE;IACR,CAAC,EAAE;MACDqP,YAAY,EAAE,SAAS;MACvBpf,IAAI,EAAE,eAAe;MACrB+P,IAAI,EAAE;IACR,CAAC,CAAC;IACFqP,YAAY,EAAE,4BAA4B;IAC1Cpf,IAAI,EAAE,YAAY;IAClB+P,IAAI,EAAE;EACR,CAAC,CAAC;EACFkC,eAAe,EAAE,MAAM;EACvBlC,IAAI,EAAE;AACR,CAAC,CAAC;AACF,MAAMuQ,mBAAmB,GAAG,CAAC;EAC3BlO,MAAM,EAAE,EAAE;EACVpS,IAAI,EAAE,kBAAkB;EACxBqS,OAAO,EAAE,CAAC;IACRH,UAAU,EAAE,CAAC;MACXA,UAAU,EAAE,CAAC;QACXkN,YAAY,EAAE,QAAQ;QACtBpf,IAAI,EAAE,MAAM;QACZ+P,IAAI,EAAE;MACR,CAAC,EAAE;QACDqP,YAAY,EAAE,QAAQ;QACtBpf,IAAI,EAAE,aAAa;QACnB+P,IAAI,EAAE;MACR,CAAC,EAAE;QACDqP,YAAY,EAAE,SAAS;QACvBpf,IAAI,EAAE,gBAAgB;QACtB+P,IAAI,EAAE;MACR,CAAC,CAAC;MACFqP,YAAY,EAAE,qCAAqC;MACnDpf,IAAI,EAAE,UAAU;MAChB+P,IAAI,EAAE;IACR,CAAC,EAAE;MACDmC,UAAU,EAAE,CAAC;QACXkN,YAAY,EAAE,QAAQ;QACtBpf,IAAI,EAAE,kBAAkB;QACxB+P,IAAI,EAAE;MACR,CAAC,EAAE;QACDqP,YAAY,EAAE,QAAQ;QACtBpf,IAAI,EAAE,mBAAmB;QACzB+P,IAAI,EAAE;MACR,CAAC,CAAC;MACFqP,YAAY,EAAE,uCAAuC;MACrDpf,IAAI,EAAE,WAAW;MACjB+P,IAAI,EAAE;IACR,CAAC,CAAC;IACFqP,YAAY,EAAE,+BAA+B;IAC7Cpf,IAAI,EAAE,eAAe;IACrB+P,IAAI,EAAE;EACR,CAAC,CAAC;EACFkC,eAAe,EAAE,MAAM;EACvBlC,IAAI,EAAE;AACR,CAAC,CAAC;AACF,MAAMwQ,eAAe,GAAG;EACtBvgB,IAAI,EAAE,SAAS;EACf+c,SAAS,EAAE,SAAS;EACpBC,QAAQ,EAAE;IACRC,GAAG,EAAE,qBAAqB;IAC1BC,SAAS,EAAE;EACb,CAAC;EACDC,IAAI,EAAE,CAAC1kB,mBAAmB,CAAC;EAC3B2kB,QAAQ,EAAE,CAAC;AACb,CAAC;AACD,MAAMoD,oBAAoB,GAAG;EAC3BxgB,IAAI,EAAE,aAAa;EACnB+c,SAAS,EAAE,OAAO;EAClBC,QAAQ,EAAE;IACRC,GAAG,EAAE,yBAAyB;IAC9BC,SAAS,EAAE;EACb,CAAC;EACDC,IAAI,EAAE,CAAC3kB,uBAAuB,CAAC;EAC/B4kB,QAAQ,EAAE,CAAC;AACb,CAAC;AACD,MAAMqD,oBAAoB,GAAG;EAC3BzgB,IAAI,EAAE,aAAa;EACnB+c,SAAS,EAAE,cAAc;EACzBC,QAAQ,EAAE;IACRC,GAAG,EAAE,iBAAiB;IACtBC,SAAS,EAAE;EACb,CAAC;EACDC,IAAI,EAAE,CAAC5kB,uBAAuB,CAAC;EAC/B6kB,QAAQ,EAAE,CAAC;AACb,CAAC;AACD,MAAMsD,8BAA8B,GAAG;EACrC1gB,IAAI,EAAE,uBAAuB;EAC7B+c,SAAS,EAAE,OAAO;EAClBC,QAAQ,EAAE;IACRC,GAAG,EAAE,mBAAmB;IACxBC,SAAS,EAAE;EACb,CAAC;EACDC,IAAI,EAAE,CAAC7kB,yBAAyB,CAAC;EACjC8kB,QAAQ,EAAE,CAAC;AACb,CAAC;AACD,MAAMuD,mBAAmB,GAAG;EAC1B3gB,IAAI,EAAE,aAAa;EACnB+c,SAAS,EAAE,OAAO;EAClBC,QAAQ,EAAE;IACRC,GAAG,EAAE,mBAAmB;IACxBC,SAAS,EAAE;EACb,CAAC;EACDC,IAAI,EAAE,CAAC9kB,eAAe,CAAC;EACvB+kB,QAAQ,EAAE;IACR,CAACsD,8BAA8B,CAAC1gB,IAAI,GAAG0gB;EACzC;AACF,CAAC;AACD,MAAME,gBAAgB,GAAG;EACvB5gB,IAAI,EAAE,kBAAkB;EACxB+c,SAAS,EAAE,UAAU;EACrBC,QAAQ,EAAE;IACRC,GAAG,EAAE,sBAAsB;IAC3BC,SAAS,EAAE;EACb,CAAC;EACDC,IAAI,EAAE,CAACnlB,oBAAoB,CAAC;EAC5BolB,QAAQ,EAAE,CAAC;AACb,CAAC;AACD,MAAMyD,cAAc,GAAG;EACrB7gB,IAAI,EAAE,QAAQ;EACd+c,SAAS,EAAE,QAAQ;EACnBC,QAAQ,EAAE;IACRC,GAAG,EAAE,YAAY;IACjB;IACAC,SAAS,EAAE;EACb,CAAC;EACDC,IAAI,EAAE,CAACplB,OAAO,CAAC;EACfqlB,QAAQ,EAAE,CAAC;AACb,CAAC;AACD,MAAM0D,aAAa,GAAG;EACpB9gB,IAAI,EAAE,SAAS;EACf+c,SAAS,EAAE,OAAO;EAClBC,QAAQ,EAAE;IACRC,GAAG,EAAE,WAAW;IAChBC,SAAS,EAAE;EACb,CAAC;EACDC,IAAI,EAAE,CAACzkB,WAAW,CAAC;EACnB0kB,QAAQ,EAAE,CAAC;AACb,CAAC;AACD,MAAM2D,eAAe,GAAG;EACtB/gB,IAAI,EAAE,SAAS;EACf+c,SAAS,EAAE,SAAS;EACpBC,QAAQ,EAAE;IACRC,GAAG,EAAE,wBAAwB;IAC7B;IACAC,SAAS,EAAE;EACb,CAAC;EACDC,IAAI,EAAE,CAACrlB,kBAAkB,CAAC;EAC1BslB,QAAQ,EAAE,CAAC;AACb,CAAC;AACD,MAAM4D,gBAAgB,GAAG;EACvBhhB,IAAI,EAAE,SAAS;EACf+c,SAAS,EAAE,UAAU;EACrBC,QAAQ,EAAE;IACRC,GAAG,EAAE,aAAa;IAClB;IACAC,SAAS,EAAE;EACb,CAAC;EACDC,IAAI,EAAE,CAAC/kB,WAAW,CAAC;EACnBglB,QAAQ,EAAE,CAAC;AACb,CAAC;AACD,MAAM6D,qBAAqB,GAAG;EAC5BjhB,IAAI,EAAE,cAAc;EACpB+c,SAAS,EAAE,eAAe;EAC1BC,QAAQ,EAAE;IACRC,GAAG,EAAE,kBAAkB;IACvB;IACAC,SAAS,EAAE;EACb,CAAC;EACDC,IAAI,EAAE,CAACkD,gBAAgB,CAAC;EACxBjD,QAAQ,EAAE,CAAC;AACb,CAAC;AACD,MAAM8D,wBAAwB,GAAG;EAC/BlhB,IAAI,EAAE,iBAAiB;EACvB+c,SAAS,EAAE,kBAAkB;EAC7BC,QAAQ,EAAE;IACRC,GAAG,EAAE,EAAE;IACP;IACAC,SAAS,EAAE;EACb,CAAC;EACDC,IAAI,EAAE,CAACmD,mBAAmB,CAAC;EAC3BlD,QAAQ,EAAE,CAAC;AACb,CAAC;AACD,MAAM+D,uBAAuB,GAAG;EAC9BnhB,IAAI,EAAE,gBAAgB;EACtB+c,SAAS,EAAE,iBAAiB;EAC5BC,QAAQ,EAAE;IACR;IACAC,GAAG,EAAE,EAAE;IACPC,SAAS,EAAE;EACb,CAAC;EACDC,IAAI,EAAE,CAACllB,kBAAkB,CAAC;EAC1BmlB,QAAQ,EAAE,CAAC;AACb,CAAC;AACD,MAAMgE,wBAAwB,GAAG;EAC/BphB,IAAI,EAAE,iBAAiB;EACvB+c,SAAS,EAAE,kBAAkB;EAC7BC,QAAQ,EAAE;IACR;IACAC,GAAG,EAAE,EAAE;IACPC,SAAS,EAAE;EACb,CAAC;EACDC,IAAI,EAAE,CAACjlB,mBAAmB,CAAC;EAC3BklB,QAAQ,EAAE,CAAC;AACb,CAAC;AACD,MAAMiE,cAAc,GAAG;EACrBrhB,IAAI,EAAE,QAAQ;EACd+c,SAAS,EAAE,QAAQ;EACnBC,QAAQ,EAAE;IACR;IACAC,GAAG,EAAE,EAAE;IACPC,SAAS,EAAE;EACb,CAAC;EACDC,IAAI,EAAE,CAAChlB,UAAU,CAAC;EAClBilB,QAAQ,EAAE,CAAC;AACb,CAAC;AACD,MAAMkE,uBAAuB,GAAG;EAC9BthB,IAAI,EAAE,gBAAgB;EACtB+c,SAAS,EAAE,gBAAgB;EAC3BC,QAAQ,EAAE;IACR;IACAC,GAAG,EAAE,oBAAoB;IACzBC,SAAS,EAAE;EACb,CAAC;EACDC,IAAI,EAAE,CAACrkB,mBAAmB,CAAC;EAC3BskB,QAAQ,EAAE,CAAC;AACb,CAAC;AACD,MAAMmE,2BAA2B,GAAG;EAClCvhB,IAAI,EAAE,oBAAoB;EAC1B+c,SAAS,EAAE,oBAAoB;EAC/BC,QAAQ,EAAE;IACR;IACAC,GAAG,EAAE,aAAa;IAClBC,SAAS,EAAE;EACb,CAAC;EACDC,IAAI,EAAE,CAACpkB,mBAAmB,CAAC;EAC3BqkB,QAAQ,EAAE,CAAC;AACb,CAAC;AACD,MAAMoE,eAAe,GAAG;EACtBxhB,IAAI,EAAE,SAAS;EACf+c,SAAS,EAAE,SAAS;EACpBC,QAAQ,EAAE;IACR;IACAC,GAAG,EAAE,aAAa;IAClBC,SAAS,EAAE;EACb,CAAC;EACDC,IAAI,EAAE,CAACnkB,QAAQ,CAAC;EAChBokB,QAAQ,EAAE;IACR,CAACmE,2BAA2B,CAACvhB,IAAI,GAAGuhB;EACtC;AACF,CAAC;AACD,MAAME,qBAAqB,GAAG;EAC5BzhB,IAAI,EAAE,cAAc;EACpB+c,SAAS,EAAE,WAAW;EACtBC,QAAQ,EAAE;IACR;IACAC,GAAG,EAAE,EAAE;IACPC,SAAS,EAAE;EACb,CAAC;EACDC,IAAI,EAAE,CAACxkB,aAAa,CAAC;EACrBykB,QAAQ,EAAE,CAAC;AACb,CAAC;AACD,MAAMsE,sBAAsB,GAAG;EAC7B1hB,IAAI,EAAE,eAAe;EACrB+c,SAAS,EAAE,YAAY;EACvBC,QAAQ,EAAE;IACR;IACAC,GAAG,EAAE,EAAE;IACPC,SAAS,EAAE;EACb,CAAC;EACDC,IAAI,EAAE,CAACvkB,cAAc,CAAC;EACtBwkB,QAAQ,EAAE,CAAC;AACb,CAAC;AACD,MAAMuE,uBAAuB,GAAG;EAC9B3hB,IAAI,EAAE,gBAAgB;EACtB+c,SAAS,EAAE,aAAa;EACxBC,QAAQ,EAAE;IACR;IACAC,GAAG,EAAE,EAAE;IACPC,SAAS,EAAE;EACb,CAAC;EACDC,IAAI,EAAE,CAACtkB,eAAe,CAAC;EACvBukB,QAAQ,EAAE,CAAC;AACb,CAAC;;AAED;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAMwE,kBAAkB,GAAG;EACzB,CAAC/D,aAAa,CAAC7d,IAAI,GAAG6d,aAAa;EACnC,CAACqB,WAAW,CAAClf,IAAI,GAAGkf,WAAW;EAC/B,CAACkB,eAAe,CAACpgB,IAAI,GAAGogB,eAAe;EACvC,CAACG,eAAe,CAACvgB,IAAI,GAAGugB,eAAe;EACvC,CAACE,oBAAoB,CAACzgB,IAAI,GAAGygB,oBAAoB;EACjD,CAACD,oBAAoB,CAACxgB,IAAI,GAAGwgB,oBAAoB;EACjD,CAACG,mBAAmB,CAAC3gB,IAAI,GAAG2gB,mBAAmB;EAC/C,CAACC,gBAAgB,CAAC5gB,IAAI,GAAG4gB,gBAAgB;EACzC,CAACC,cAAc,CAAC7gB,IAAI,GAAG6gB,cAAc;EACrC,CAACC,aAAa,CAAC9gB,IAAI,GAAG8gB,aAAa;EACnC,CAACC,eAAe,CAAC/gB,IAAI,GAAG+gB,eAAe;EACvC,CAACC,gBAAgB,CAAChhB,IAAI,GAAGghB,gBAAgB;EACzC,CAACC,qBAAqB,CAACjhB,IAAI,GAAGihB,qBAAqB;EACnD,CAACC,wBAAwB,CAAClhB,IAAI,GAAGkhB,wBAAwB;EACzD,CAACC,uBAAuB,CAACnhB,IAAI,GAAGmhB,uBAAuB;EACvD,CAACC,wBAAwB,CAACphB,IAAI,GAAGohB,wBAAwB;EACzD,CAACC,cAAc,CAACrhB,IAAI,GAAGqhB,cAAc;EACrC,CAACI,qBAAqB,CAACzhB,IAAI,GAAGyhB,qBAAqB;EACnD,CAACC,sBAAsB,CAAC1hB,IAAI,GAAG0hB,sBAAsB;EACrD,CAACC,uBAAuB,CAAC3hB,IAAI,GAAG2hB,uBAAuB;EACvD,CAACL,uBAAuB,CAACthB,IAAI,GAAGshB,uBAAuB;EACvD,CAACE,eAAe,CAACxhB,IAAI,GAAGwhB,eAAe;EACvC,CAACxC,wBAAwB,CAAChf,IAAI,GAAGgf,wBAAwB;EACzD,CAACC,8BAA8B,CAACjf,IAAI,GAAGif;AACzC,CAAC;AAED,SAAS4C,QAAQA,CAACC,YAAY,EAAE;EAC9B,IAAIC,YAAY,GAAGjlB,SAAS,CAACjD,MAAM,GAAG,CAAC,IAAIiD,SAAS,CAAC,CAAC,CAAC,KAAKC,SAAS,GAAGD,SAAS,CAAC,CAAC,CAAC,GAAG,KAAK;EAC5F,IAAIklB,QAAQ,GAAGllB,SAAS,CAACjD,MAAM,GAAG,CAAC,IAAIiD,SAAS,CAAC,CAAC,CAAC,KAAKC,SAAS,GAAGD,SAAS,CAAC,CAAC,CAAC,GAAG,KAAK;EACxF,IAAImlB,MAAM,GAAGH,YAAY,CAAC/R,IAAI;EAC9B,IAAImS,OAAO,GAAG,KAAK;EACnB,IAAID,MAAM,CAACja,QAAQ,CAAC,IAAI,CAAC,EAAE;IACzBka,OAAO,GAAG,IAAI;IACdD,MAAM,GAAGA,MAAM,CAACtb,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EAC9B;EACA,IAAIsb,MAAM,CAACE,UAAU,CAAC,OAAO,CAAC,EAAE;IAC9BF,MAAM,GAAG,WAAW;EACtB;EACA,IAAIA,MAAM,CAACE,UAAU,CAAC,MAAM,CAAC,IAAIF,MAAM,CAACE,UAAU,CAAC,KAAK,CAAC,EAAE;IACzDF,MAAM,GAAGF,YAAY,GAAG,WAAW,GAAG,cAAc;EACtD;EACA,IAAIE,MAAM,CAACE,UAAU,CAAC,MAAM,CAAC,EAAE;IAC7BF,MAAM,GAAG,SAAS;EACpB;EACA,IAAIA,MAAM,KAAK,SAAS,EAAE;IACxBA,MAAM,GAAG,QAAQ;EACnB;EACA,IAAIA,MAAM,KAAK,OAAO,EAAE;IACtB,IAAIH,YAAY,CAAC5P,UAAU,EAAE;MAC3B+P,MAAM,QAAAzoB,MAAA,CAAQsoB,YAAY,CAAC5P,UAAU,CAACzU,GAAG,CAAC7K,CAAC,IAAIivB,QAAQ,CAACjvB,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC2H,IAAI,CAAC,IAAI,CAAC,OAAI;IACzF;EACF;EACA,IAAI2nB,OAAO,EAAE;IACXD,MAAM,IAAI,IAAI;EAChB;EACA,IAAID,QAAQ,EAAE;IACZC,MAAM,MAAAzoB,MAAA,CAAMsoB,YAAY,CAAC9hB,IAAI,QAAAxG,MAAA,CAAKyoB,MAAM,CAAE;EAC5C;EACA,OAAOA,MAAM;AACf;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASG,0BAA0BA,CAACpiB,IAAI,EAAE2N,QAAQ,EAAEoC,IAAI,EAAE;EAAA,IAAAsS,gBAAA,EAAAC,iBAAA,EAAAC,iBAAA,EAAAC,iBAAA;EACxD,OAAO,CAAA7U,QAAQ,aAARA,QAAQ,gBAAA0U,gBAAA,GAAR1U,QAAQ,CAAEkE,MAAM,cAAAwQ,gBAAA,gBAAAA,gBAAA,GAAhBA,gBAAA,CAAkBI,OAAO,cAAAJ,gBAAA,gBAAAA,gBAAA,GAAzBA,gBAAA,CAA4BtS,IAAI,CAAC,cAAAsS,gBAAA,gBAAAA,gBAAA,GAAjCA,gBAAA,CAAoCK,MAAM,CAACC,IAAI,CAAC,CAAAhV,QAAQ,aAARA,QAAQ,gBAAA2U,iBAAA,GAAR3U,QAAQ,CAAEkE,MAAM,cAAAyQ,iBAAA,uBAAhBA,iBAAA,CAAkBG,OAAO,CAAC1S,IAAI,CAAC,KAAI,CAAC,CAAC,CAAC,CAACjF,IAAI,CAAC2M,EAAE,IAAIA,EAAE,CAACrQ,QAAQ,CAACpH,IAAI,IAAI,SAAS,CAAC,CAAC,IAAI,EAAE,CAAC,cAAAqiB,gBAAA,uBAAxIA,gBAAA,CAA0I/L,MAAM,MAAI3I,QAAQ,aAARA,QAAQ,gBAAA4U,iBAAA,GAAR5U,QAAQ,CAAEkE,MAAM,cAAA0Q,iBAAA,gBAAAA,iBAAA,GAAhBA,iBAAA,CAAkBK,MAAM,cAAAL,iBAAA,gBAAAA,iBAAA,GAAxBA,iBAAA,CAA2BxS,IAAI,CAAC,cAAAwS,iBAAA,gBAAAA,iBAAA,GAAhCA,iBAAA,CAAmCG,MAAM,CAACC,IAAI,CAAC,CAAAhV,QAAQ,aAARA,QAAQ,gBAAA6U,iBAAA,GAAR7U,QAAQ,CAAEkE,MAAM,cAAA2Q,iBAAA,uBAAhBA,iBAAA,CAAkBI,MAAM,CAAC7S,IAAI,CAAC,KAAI,CAAC,CAAC,CAAC,CAACjF,IAAI,CAAC2M,EAAE,IAAIA,EAAE,CAACrQ,QAAQ,CAACpH,IAAI,IAAI,SAAS,CAAC,CAAC,IAAI,EAAE,CAAC,cAAAuiB,iBAAA,uBAAtIA,iBAAA,CAAwIlM,OAAO;AAC5S;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASwM,uBAAuBA,CAACrM,GAAG,EAAE7I,QAAQ,EAAE;EAC9C,MAAMmV,SAAS,GAAG,CAACtM,GAAG,IAAI,EAAE,EAAErR,MAAM,CAAC4d,EAAE,IAAIA,EAAE,CAAChT,IAAI,KAAK,UAAU,CAAC;EAClE,MAAMiT,MAAM,GAAG,EAAE;EACjB,KAAK,MAAMC,CAAC,IAAIH,SAAS,EAAE;IAAA,IAAAI,SAAA,EAAAC,UAAA;IACzB,MAAMC,GAAG,GAAGhB,0BAA0B,CAACa,CAAC,CAACjjB,IAAI,EAAE2N,QAAQ,EAAE,SAAS,CAAC;IACnE,MAAM+J,IAAI,GAAG,EAAAwL,SAAA,GAAAD,CAAC,CAAC7Q,MAAM,cAAA8Q,SAAA,gBAAAA,SAAA,GAARA,SAAA,CAAUzlB,GAAG,CAAC0N,CAAC,OAAA3R,MAAA,CAAO2R,CAAC,CAACnL,IAAI,IAAI,KAAK,QAAAxG,MAAA,CAAKqoB,QAAQ,CAAC1W,CAAC,CAAC,CAAE,CAAC,cAAA+X,SAAA,uBAAxDA,SAAA,CAA0D3oB,IAAI,CAAC,IAAI,CAAC,KAAI,EAAE;IACvF,MAAM8oB,KAAK,GAAG3L,IAAI,SAAAle,MAAA,CAASke,IAAI,SAAM,EAAE;IACvC,MAAMtO,GAAG,IAAA+Z,UAAA,GAAGF,CAAC,CAAC5Q,OAAO,cAAA8Q,UAAA,gBAAAA,UAAA,GAATA,UAAA,CAAW1lB,GAAG,CAAC6lB,CAAC,IAAIzB,QAAQ,CAACyB,CAAC,EAAE,IAAI,CAAC,CAAC,cAAAH,UAAA,uBAAtCA,UAAA,CAAwC5oB,IAAI,CAAC,IAAI,CAAC;IAC9D,MAAM+E,OAAO,GAAG8J,GAAG,gBAAA5P,MAAA,CAAgB4P,GAAG,uCAAoC;IAC1E,MAAMma,SAAS,sBAAA/pB,MAAA,CAAqBypB,CAAC,CAACjjB,IAAI,QAAAxG,MAAA,CAAI6pB,KAAK,OAAA7pB,MAAA,CAAI8F,OAAO,CAAE;IAChE0jB,MAAM,CAACxjB,IAAI,CAAC;MACV;MACA;MACA4S,MAAM,EAAE6Q,CAAC,CAAC7Q,MAAM,IAAI,EAAE;MACtB;MACA;MACAC,OAAO,EAAE4Q,CAAC,CAAC5Q,OAAO,IAAI,EAAE;MACxBrS,IAAI,EAAEijB,CAAC,CAACjjB,IAAI,IAAI,SAAS;MACzBujB,SAAS;MACTtR,eAAe,EAAEgR,CAAC,CAAChR,eAAe,IAAI,EAAE;MACxCuR,OAAO,EAAEJ;IACX,CAAC,CAAC;EACJ;EACA,OAAOJ,MAAM;AACf;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASS,cAAcA,CAACC,WAAW,EAAEC,WAAW,EAAE;EAChD,MAAMC,UAAU,GAAGf,uBAAuB,CAACa,WAAW,CAAC;EACvD,MAAMG,WAAW,GAAGF,WAAW,CAACG,OAAO,CAAC3Y,CAAC,IAAI0X,uBAAuB,CAAC1X,CAAC,CAAC,CAAC;EACxE;EACA,MAAM4Y,YAAY,GAAGH,UAAU,CAACze,MAAM,CAACsS,EAAE,IAAI;IAC3C,MAAMxd,KAAK,GAAG4pB,WAAW,CAAC/Y,IAAI,CAACkZ,GAAG,IAAIA,GAAG,CAAChkB,IAAI,KAAKyX,EAAE,CAACzX,IAAI,IAAIgkB,GAAG,CAAC5R,MAAM,CAACvY,MAAM,KAAK4d,EAAE,CAACrF,MAAM,CAACvY,MAAM,IAAImqB,GAAG,CAAC5R,MAAM,CAAC6R,KAAK,CAAC,CAAC9Y,CAAC,EAAE3M,KAAK,KAAK;MACrI,IAAI2M,CAAC,CAAC4E,IAAI,KAAK,OAAO,IAAI5E,CAAC,CAAC4E,IAAI,KAAK,SAAS,EAAE;QAAA,IAAAmU,aAAA;QAC9C;QACA,OAAO/Y,CAAC,CAAC4E,IAAI,KAAK0H,EAAE,CAACrF,MAAM,CAAC5T,KAAK,CAAC,CAACuR,IAAI,MAAAmU,aAAA,GAAI/Y,CAAC,CAAC+G,UAAU,cAAAgS,aAAA,uBAAZA,aAAA,CAAcD,KAAK,CAAC,CAACzwB,CAAC,EAAE2wB,MAAM,KAAK;UAAA,IAAAC,qBAAA;UAC5E,OAAO5wB,CAAC,CAACuc,IAAI,OAAAqU,qBAAA,GAAK3M,EAAE,CAACrF,MAAM,CAAC5T,KAAK,CAAC,CAAC0T,UAAU,cAAAkS,qBAAA,gBAAAA,qBAAA,GAA3BA,qBAAA,CAA8BD,MAAM,CAAC,cAAAC,qBAAA,uBAArCA,qBAAA,CAAuCrU,IAAI;QAC/D,CAAC,CAAC;MACJ;MACA,OAAO5E,CAAC,CAAC4E,IAAI,KAAK0H,EAAE,CAACrF,MAAM,CAAC5T,KAAK,CAAC,CAACuR,IAAI;IACzC,CAAC,CAAC,CAAC;IACH,OAAO9V,KAAK,KAAK8C,SAAS;EAC5B,CAAC,CAAC;EACF,OAAOgnB,YAAY,CAAClqB,MAAM,KAAKgqB,WAAW,CAAChqB,MAAM;AACnD;AACA,SAASwqB,sBAAsBA,CAACC,gBAAgB,EAAEX,WAAW,EAAE;EAC7D,MAAMY,UAAU,GAAGZ,WAAW,CAAClmB,GAAG,CAAC+Y,GAAG,IAAI,IAAIvd,SAAS,CAACud,GAAG,CAAC,CAAC;EAC7D,MAAMgO,SAAS,GAAGD,UAAU,CAACT,OAAO,CAAC3Y,CAAC,IAAI;IACxC,OAAOuX,MAAM,CAAC+B,MAAM,CAACtZ,CAAC,CAAC2X,SAAS,CAAC,CAACrlB,GAAG,CAACga,EAAE,IAAItd,MAAM,CAACgR,CAAC,CAACuZ,UAAU,CAACjN,EAAE,CAAC,CAAC,CAAC7b,QAAQ,CAAC,EAAE,CAAC,CAAC;EACpF,CAAC,CAAC;EACF,MAAM+oB,eAAe,GAAG,CAAC,GAAG,IAAIC,GAAG,CAACJ,SAAS,CAAC,CAAC;EAC/C;EACA,OAAOG,eAAe,CAACV,KAAK,CAACY,QAAQ,IAAIP,gBAAgB,CAACld,QAAQ,CAACyd,QAAQ,CAAC,CAAC;AAC/E;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,cAAcA,CAACtO,GAAG,EAAE;EAC3B,IAAI4G,QAAQ,GAAGtgB,SAAS,CAACjD,MAAM,GAAG,CAAC,IAAIiD,SAAS,CAAC,CAAC,CAAC,KAAKC,SAAS,GAAGD,SAAS,CAAC,CAAC,CAAC,GAAG8kB,kBAAkB;EACrG,MAAMmD,OAAO,GAAG,CAAC,CAAC;EAClB,KAAK,MAAMC,UAAU,IAAI5H,QAAQ,EAAE;IACjC,MAAMnD,OAAO,GAAGmD,QAAQ,CAAC4H,UAAU,CAAC;IACpC,MAAMC,OAAO,GAAGC,mBAAmB,CAAC1O,GAAG,EAAEyD,OAAO,CAAC;IACjD,MAAMkL,YAAY,GAAGL,cAAc,CAACtO,GAAG,EAAEyD,OAAO,CAACmD,QAAQ,CAAC;IAC1D2H,OAAO,CAACC,UAAU,CAAC,GAAG;MACpB,GAAG/K,OAAO;MACVmD,QAAQ,EAAE+H,YAAY;MACtBF;IACF,CAAC;EACH;EACA,OAAOF,OAAO;AAChB;AACA,SAASK,0BAA0BA,CAACvO,QAAQ,EAAE;EAC5C,IAAIuG,QAAQ,GAAGtgB,SAAS,CAACjD,MAAM,GAAG,CAAC,IAAIiD,SAAS,CAAC,CAAC,CAAC,KAAKC,SAAS,GAAGD,SAAS,CAAC,CAAC,CAAC,GAAG8kB,kBAAkB;EACrG,MAAMmD,OAAO,GAAG,CAAC,CAAC;EAClB,KAAK,MAAMC,UAAU,IAAI5H,QAAQ,EAAE;IACjC,MAAMnD,OAAO,GAAGmD,QAAQ,CAAC4H,UAAU,CAAC;IACpC,MAAMC,OAAO,GAAGZ,sBAAsB,CAACxN,QAAQ,EAAEoD,OAAO,CAACkD,IAAI,CAAC;IAC9D,MAAMgI,YAAY,GAAGC,0BAA0B,CAACvO,QAAQ,EAAEoD,OAAO,CAACmD,QAAQ,CAAC;IAC3E2H,OAAO,CAACC,UAAU,CAAC,GAAG;MACpB,GAAG/K,OAAO;MACVmD,QAAQ,EAAE+H,YAAY;MACtBF;IACF,CAAC;EACH;EACA,OAAOF,OAAO;AAChB;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASG,mBAAmBA,CAAC1O,GAAG,EAAEyD,OAAO,EAAE;EACzC;EACA,OAAOwJ,cAAc,CAACjN,GAAG,EAAEyD,OAAO,CAACkD,IAAI,CAAC;AAC1C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASkI,gBAAgBA,CAAC7O,GAAG,EAAE8O,WAAW,EAAE;EAC1C,MAAMlI,QAAQ,GAAG0H,cAAc,CAACtO,GAAG,CAAC;EACpC,OAAO+O,eAAe,CAACnI,QAAQ,EAAEkI,WAAW,CAAC;AAC/C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,kBAAkBA,CAAChP,GAAG,EAAE8O,WAAW,EAAE;EAC5C,OAAOD,gBAAgB,CAAC7O,GAAG,EAAE8O,WAAW,CAAC;AAC3C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,eAAeA,CAACnI,QAAQ,EAAEkI,WAAW,EAAE;EAC9C,MAAM3C,IAAI,GAAGD,MAAM,CAACC,IAAI,CAACvF,QAAQ,CAAC;EAClC,IAAI,CAACuF,IAAI,CAACvb,QAAQ,CAACke,WAAW,CAAC,EAAE;IAC/B,IAAIG,KAAK,GAAG,KAAK;IACjB,KAAK,MAAMC,GAAG,IAAI/C,IAAI,EAAE;MACtB,MAAMM,CAAC,GAAG7F,QAAQ,CAACsI,GAAG,CAAC;MACvBD,KAAK,GAAGF,eAAe,CAACtC,CAAC,CAAC7F,QAAQ,EAAEkI,WAAW,CAAC;MAChD,IAAIG,KAAK,EAAE;QACT;MACF;IACF;IACA,OAAOA,KAAK;EACd;EACA,MAAMxL,OAAO,GAAGmD,QAAQ,CAACkI,WAAW,CAAC;EACrC,OAAOrL,OAAO,CAACgL,OAAO;AACxB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASU,qBAAqBA,CAACpO,eAAe,EAAE+N,WAAW,EAAE;EAC3D,OAAOE,kBAAkB,CAAClT,SAAS,CAACrN,KAAK,CAACsS,eAAe,CAACf,GAAG,CAAC,EAAE8O,WAAW,CAAC;AAC9E;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASM,WAAWA,CAACC,YAAY,EAAEtO,eAAe,EAAE;EAClD,OAAOsO,YAAY,IAAItO,eAAe,CAACI,YAAY,CAACmL,SAAS;AAC/D;;AAEA;AACA;AACA,IAAIgD,OAAO;AACX,IAAI;EACFA,OAAO,GAAG,IAAIC,WAAW,CAAC,CAAC;AAC7B,CAAC,CAAC,OAAOrnB,KAAK,EAAE,CAAC;AACjB,IAAIsnB,GAAG;AACP,IAAIC,MAAM;AACV,IAAIC,QAAQ,GAAG,CAAC;AAChB,MAAMC,uBAAuB,GAAG,GAAG;AACnC,MAAMC,qBAAqB,GAAG,MAAM;AACpC,MAAMC,gBAAgB,GAAG,MAAM,CAAC,CAAC;AACjC,MAAMC,kBAAkB,GAAG,MAAM;AACjC,MAAMC,uBAAuB,GAAG,CAAC;AACjC,MAAMC,SAAS,GAAG,CAAC,CAAC;AACpB,IAAIC,cAAc,GAAG,CAAC,CAAC;AACvB,IAAIC,iBAAiB;AACrB,IAAIC,SAAS;AACb,IAAIC,cAAc,GAAG,CAAC;AACtB,IAAIC,YAAY,GAAG,CAAC;AACpB,IAAIC,cAAc;AAClB,IAAIC,YAAY;AAChB,IAAIC,iBAAiB,GAAG,EAAE;AAC1B,IAAIC,sBAAsB,GAAG,EAAE;AAC/B,IAAIC,YAAY;AAChB,IAAIC,QAAQ;AACZ,IAAIC,mBAAmB;AACvB,IAAIC,cAAc,GAAG;EACnBC,UAAU,EAAE,KAAK;EACjBC,aAAa,EAAE;AACjB,CAAC;AACD,IAAIC,cAAc,GAAG,KAAK;AAC1B,MAAMC,OAAO,CAAC;EACZ/qB,WAAWA,CAAC+H,OAAO,EAAE;IACnB,IAAIA,OAAO,EAAE;MACX,IAAI,CAACA,OAAO,CAACijB,MAAM,IAAIjjB,OAAO,CAACkjB,OAAO,KAAK,CAACljB,OAAO,CAAC6iB,UAAU,EAAE;QAC9D7iB,OAAO,CAAC6iB,UAAU,GAAG,KAAK;QAC1B7iB,OAAO,CAAC8iB,aAAa,GAAG,IAAI;MAC9B;MACA,IAAI9iB,OAAO,CAAC6iB,UAAU,KAAK,KAAK,IAAI7iB,OAAO,CAAC8iB,aAAa,KAAKxqB,SAAS,EAAE;QACvE0H,OAAO,CAAC8iB,aAAa,GAAG,IAAI;MAC9B;MACA,IAAI9iB,OAAO,CAACmjB,aAAa,EAAE;QACzBnjB,OAAO,CAACojB,SAAS,GAAGpjB,OAAO,CAACmjB,aAAa;MAC3C;MACA,IAAInjB,OAAO,CAACojB,SAAS,IAAI,CAACpjB,OAAO,CAACqjB,UAAU,EAAE;QAC5C,CAACrjB,OAAO,CAACqjB,UAAU,GAAG,EAAE,EAAEC,aAAa,GAAG,IAAI;MAChD,CAAC,CAAC;MACF,IAAItjB,OAAO,CAACijB,MAAM,EAAE;QAClB,IAAI,CAACM,MAAM,GAAG,IAAIjiB,GAAG,CAAC,CAAC;QACvB,KAAK,IAAI,CAACkiB,CAAC,EAAEtU,CAAC,CAAC,IAAI+O,MAAM,CAACwF,OAAO,CAACzjB,OAAO,CAACijB,MAAM,CAAC,EAAE;UACjD,IAAI,CAACM,MAAM,CAACpgB,GAAG,CAAC+L,CAAC,EAAEsU,CAAC,CAAC;QACvB;MACF;IACF;IACAvF,MAAM,CAACyF,MAAM,CAAC,IAAI,EAAE1jB,OAAO,CAAC;EAC9B;EACA2jB,SAASA,CAAC1C,GAAG,EAAE;IACb,OAAO,IAAI,CAACgC,MAAM,GAAG,IAAI,CAACM,MAAM,CAACvgB,GAAG,CAACie,GAAG,CAAC,IAAIA,GAAG,GAAGA,GAAG;EACxD;EACA5N,MAAMA,CAACsD,MAAM,EAAEiN,GAAG,EAAE;IAClB,IAAIrC,GAAG,EAAE;MACP;MACA,OAAOsC,SAAS,CAAC,MAAM;QACrBC,WAAW,CAAC,CAAC;QACb,OAAO,IAAI,GAAG,IAAI,CAACzQ,MAAM,CAACsD,MAAM,EAAEiN,GAAG,CAAC,GAAGZ,OAAO,CAACe,SAAS,CAAC1Q,MAAM,CAAC2Q,IAAI,CAACpB,cAAc,EAAEjM,MAAM,EAAEiN,GAAG,CAAC;MACrG,CAAC,CAAC;IACJ;IACApC,MAAM,GAAGoC,GAAG,GAAG,CAAC,CAAC,GAAGA,GAAG,GAAGjN,MAAM,CAACvhB,MAAM;IACvCqsB,QAAQ,GAAG,CAAC;IACZW,YAAY,GAAG,CAAC;IAChBF,SAAS,GAAG,IAAI;IAChBG,cAAc,GAAG,IAAI;IACrBd,GAAG,GAAG5K,MAAM;IACZ;IACA;IACA;IACA,IAAI;MACF+L,QAAQ,GAAG/L,MAAM,CAAC+L,QAAQ,KAAK/L,MAAM,CAAC+L,QAAQ,GAAG,IAAIuB,QAAQ,CAACtN,MAAM,CAACrX,MAAM,EAAEqX,MAAM,CAACuN,UAAU,EAAEvN,MAAM,CAACwN,UAAU,CAAC,CAAC;IACrH,CAAC,CAAC,OAAOlqB,KAAK,EAAE;MACd;MACAsnB,GAAG,GAAG,IAAI;MACV,IAAI5K,MAAM,YAAYyN,UAAU,EAAE;QAChC,MAAMnqB,KAAK;MACb;MACA,MAAM,IAAI5E,KAAK,CAAC,kDAAkD,IAAIshB,MAAM,IAAI,OAAOA,MAAM,KAAK,QAAQ,GAAGA,MAAM,CAAC1e,WAAW,CAACsD,IAAI,GAAG,OAAOob,MAAM,CAAC,CAAC;IACxJ;IACA,IAAI,IAAI,YAAYqM,OAAO,EAAE;MAC3B;MACAhB,cAAc,GAAG,IAAI;MACrBS,YAAY,GAAG,IAAI,CAAC4B,YAAY,KAAK,IAAI,CAACC,IAAI,GAAG,IAAIxM,KAAK,CAAC,IAAI,CAACyM,sBAAsB,IAAI,EAAE,CAAC,CAACxvB,MAAM,CAAC,IAAI,CAACsvB,YAAY,CAAC,GAAG,IAAI,CAACA,YAAY,CAAC;MAC5I,IAAI,IAAI,CAAChB,UAAU,EAAE;QACnBpB,iBAAiB,GAAG,IAAI,CAACoB,UAAU;QACnC,OAAOmB,WAAW,CAAC,CAAC;MACtB,CAAC,MAAM,IAAI,CAACvC,iBAAiB,IAAIA,iBAAiB,CAAC7sB,MAAM,GAAG,CAAC,EAAE;QAC7D6sB,iBAAiB,GAAG,EAAE;MACxB;IACF,CAAC,MAAM;MACLD,cAAc,GAAGY,cAAc;MAC/B,IAAI,CAACX,iBAAiB,IAAIA,iBAAiB,CAAC7sB,MAAM,GAAG,CAAC,EAAE;QACtD6sB,iBAAiB,GAAG,EAAE;MACxB;MACAQ,YAAY,GAAG,IAAI;IACrB;IACA,OAAO+B,WAAW,CAAC,CAAC;EACtB;AACF;AACA,SAASA,WAAWA,CAAA,EAAG;EACrB,IAAI;IACF,IAAI7qB,MAAM,GAAG8qB,IAAI,CAAC,CAAC;IACnB,IAAIpC,cAAc,EAAE;MAClB,IAAIZ,QAAQ,IAAIY,cAAc,CAACqC,kBAAkB,EAAE;QACjD,IAAIzqB,KAAK,GAAG,IAAI5E,KAAK,CAAC,4BAA4B,CAAC;QACnD4E,KAAK,CAAC0qB,UAAU,GAAG,IAAI;QACvB,MAAM1qB,KAAK;MACb;MACA;MACAwnB,QAAQ,GAAGY,cAAc,CAACqC,kBAAkB;MAC5CrC,cAAc,GAAG,IAAI;IACvB;IACA,IAAIZ,QAAQ,IAAID,MAAM,EAAE;MACtB;MACAS,iBAAiB,GAAG,IAAI;MACxBV,GAAG,GAAG,IAAI;MACV,IAAIe,YAAY,EAAE;QAChBA,YAAY,GAAG,IAAI;MACrB;IACF,CAAC,MAAM,IAAIb,QAAQ,GAAGD,MAAM,EAAE;MAC5B;MACA,IAAIvnB,KAAK,GAAG,IAAI5E,KAAK,CAAC,6BAA6B,CAAC;MACpD4E,KAAK,CAAC0qB,UAAU,GAAG,IAAI;MACvB,MAAM1qB,KAAK;IACb,CAAC,MAAM,IAAI,CAAC8oB,cAAc,EAAE;MAC1B,MAAM,IAAI1tB,KAAK,CAAC,0CAA0C,CAAC;IAC7D;IACA;IACA,OAAOsE,MAAM;EACf,CAAC,CAAC,OAAOM,KAAK,EAAE;IACd6pB,WAAW,CAAC,CAAC;IACb,IAAI7pB,KAAK,YAAY2qB,UAAU,IAAI3qB,KAAK,CAACC,OAAO,CAACwjB,UAAU,CAAC,0BAA0B,CAAC,EAAE;MACvFzjB,KAAK,CAAC0qB,UAAU,GAAG,IAAI;IACzB;IACA,MAAM1qB,KAAK;EACb;AACF;AACA,SAASwqB,IAAIA,CAAA,EAAG;EACd,IAAII,KAAK,GAAGtD,GAAG,CAACE,QAAQ,EAAE,CAAC;EAC3B,IAAIqD,SAAS,GAAGD,KAAK,IAAI,CAAC;EAC1BA,KAAK,GAAGA,KAAK,GAAG,IAAI;EACpB,IAAIA,KAAK,GAAG,IAAI,EAAE;IAChB,QAAQA,KAAK;MACX,KAAK,IAAI;QACPA,KAAK,GAAGtD,GAAG,CAACE,QAAQ,EAAE,CAAC;QACvB;MACF,KAAK,IAAI;QACP,IAAIqD,SAAS,IAAI,CAAC,EAAE;UAClB,OAAOC,UAAU,CAAC,CAAC;QACrB;QACAF,KAAK,GAAGnC,QAAQ,CAACsC,SAAS,CAACvD,QAAQ,CAAC;QACpCA,QAAQ,IAAI,CAAC;QACb;MACF,KAAK,IAAI;QACP,IAAIqD,SAAS,IAAI,CAAC,EAAE;UAClB,IAAIxtB,KAAK,GAAGorB,QAAQ,CAACuC,UAAU,CAACxD,QAAQ,CAAC;UACzC,IAAIO,cAAc,CAACkD,UAAU,GAAG,CAAC,EAAE;YACjC;YACA,IAAIC,UAAU,GAAGC,MAAM,CAAC,CAAC7D,GAAG,CAACE,QAAQ,CAAC,GAAG,IAAI,KAAK,CAAC,GAAGF,GAAG,CAACE,QAAQ,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC;YAC7EA,QAAQ,IAAI,CAAC;YACb,OAAO,CAAC0D,UAAU,GAAG7tB,KAAK,IAAIA,KAAK,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI6tB,UAAU;UAC1E;UACA1D,QAAQ,IAAI,CAAC;UACb,OAAOnqB,KAAK;QACd;QACAutB,KAAK,GAAGnC,QAAQ,CAAC2C,SAAS,CAAC5D,QAAQ,CAAC;QACpCA,QAAQ,IAAI,CAAC;QACb;MACF,KAAK,IAAI;QACP,IAAIqD,SAAS,IAAI,CAAC,EAAE;UAClB,IAAIxtB,KAAK,GAAGorB,QAAQ,CAAC4C,UAAU,CAAC7D,QAAQ,CAAC;UACzCA,QAAQ,IAAI,CAAC;UACb,OAAOnqB,KAAK;QACd;QACA,IAAIwtB,SAAS,GAAG,CAAC,EAAE;UACjB,IAAIpC,QAAQ,CAAC2C,SAAS,CAAC5D,QAAQ,CAAC,GAAG,CAAC,EAAE;YACpC,MAAM,IAAIpsB,KAAK,CAAC,kFAAkF,CAAC;UACrG;UACAwvB,KAAK,GAAGnC,QAAQ,CAAC2C,SAAS,CAAC5D,QAAQ,GAAG,CAAC,CAAC;QAC1C,CAAC,MAAM,IAAIO,cAAc,CAACuD,aAAa,EAAE;UACvCV,KAAK,GAAGnC,QAAQ,CAAC2C,SAAS,CAAC5D,QAAQ,CAAC,GAAG,WAAW;UAClDoD,KAAK,IAAInC,QAAQ,CAAC2C,SAAS,CAAC5D,QAAQ,GAAG,CAAC,CAAC;QAC3C,CAAC,MAAM;UACLoD,KAAK,GAAGnC,QAAQ,CAAC8C,YAAY,CAAC/D,QAAQ,CAAC;QACzC;QACAA,QAAQ,IAAI,CAAC;QACb;MACF,KAAK,IAAI;QACP;QACA,QAAQqD,SAAS;UACf,KAAK,CAAC,CAAC,CAAC;UACR,KAAK,CAAC;YACJ;YACA,MAAM,IAAIzvB,KAAK,CAAC,0DAA0D,CAAC;UAC7E,KAAK,CAAC;YACJ;YACA,IAAI+F,KAAK,GAAG,EAAE;YACd,IAAI9D,KAAK;cACPoP,CAAC,GAAG,CAAC;YACP,OAAO,CAACpP,KAAK,GAAGmtB,IAAI,CAAC,CAAC,KAAK1C,SAAS,EAAE;cACpC3mB,KAAK,CAACsL,CAAC,EAAE,CAAC,GAAGpP,KAAK;YACpB;YACA,OAAOwtB,SAAS,IAAI,CAAC,GAAG1pB,KAAK,GAAG0pB,SAAS,IAAI,CAAC,GAAG1pB,KAAK,CAACtF,IAAI,CAAC,EAAE,CAAC,GAAG+T,MAAM,CAAC9U,MAAM,CAACqG,KAAK,CAAC;UACxF,KAAK,CAAC;YACJ;YACA,IAAI6lB,GAAG;YACP,IAAIe,cAAc,CAACc,aAAa,EAAE;cAChC,IAAI5nB,MAAM,GAAG,CAAC,CAAC;cACf,IAAI8mB,cAAc,CAACiB,MAAM,EAAE;gBACzB,OAAO,CAAChC,GAAG,GAAGwD,IAAI,CAAC,CAAC,KAAK1C,SAAS,EAAE;kBAClC7mB,MAAM,CAACuqB,OAAO,CAACzD,cAAc,CAAC2B,SAAS,CAAC1C,GAAG,CAAC,CAAC,CAAC,GAAGwD,IAAI,CAAC,CAAC;gBACzD;cACF,CAAC,MAAM;gBACL,OAAO,CAACxD,GAAG,GAAGwD,IAAI,CAAC,CAAC,KAAK1C,SAAS,EAAE;kBAClC7mB,MAAM,CAACuqB,OAAO,CAACxE,GAAG,CAAC,CAAC,GAAGwD,IAAI,CAAC,CAAC;gBAC/B;cACF;cACA,OAAOvpB,MAAM;YACf,CAAC,MAAM;cACL,IAAIynB,mBAAmB,EAAE;gBACvBX,cAAc,CAACc,aAAa,GAAG,IAAI;gBACnCH,mBAAmB,GAAG,KAAK;cAC7B;cACA,IAAI3pB,GAAG,GAAG,IAAIsI,GAAG,CAAC,CAAC;cACnB,IAAI0gB,cAAc,CAACiB,MAAM,EAAE;gBACzB,OAAO,CAAChC,GAAG,GAAGwD,IAAI,CAAC,CAAC,KAAK1C,SAAS,EAAE;kBAClC/oB,GAAG,CAACmK,GAAG,CAAC6e,cAAc,CAAC2B,SAAS,CAAC1C,GAAG,CAAC,EAAEwD,IAAI,CAAC,CAAC,CAAC;gBAChD;cACF,CAAC,MAAM;gBACL,OAAO,CAACxD,GAAG,GAAGwD,IAAI,CAAC,CAAC,KAAK1C,SAAS,EAAE;kBAClC/oB,GAAG,CAACmK,GAAG,CAAC8d,GAAG,EAAEwD,IAAI,CAAC,CAAC,CAAC;gBACtB;cACF;cACA,OAAOzrB,GAAG;YACZ;UACF,KAAK,CAAC;YACJ,OAAO+oB,SAAS;UAClB;YACE,MAAM,IAAI1sB,KAAK,CAAC,2CAA2C,GAAGyvB,SAAS,CAAC;QAC5E;MACF;QACE,MAAM,IAAIzvB,KAAK,CAAC,gBAAgB,GAAGwvB,KAAK,CAAC;IAC7C;EACF;EACA,QAAQC,SAAS;IACf,KAAK,CAAC;MACJ;MACA,OAAOD,KAAK;IACd,KAAK,CAAC;MACJ;MACA,OAAO,CAACA,KAAK;IACf,KAAK,CAAC;MACJ;MACA,OAAOa,OAAO,CAACb,KAAK,CAAC;IACvB,KAAK,CAAC;MACJ;MACA,IAAIzC,YAAY,IAAIX,QAAQ,EAAE;QAC5B,OAAOS,SAAS,CAAChgB,KAAK,CAACuf,QAAQ,GAAGU,cAAc,EAAE,CAACV,QAAQ,IAAIoD,KAAK,IAAI1C,cAAc,CAAC;MACzF;MACA,IAAIC,YAAY,IAAI,CAAC,IAAIZ,MAAM,GAAG,GAAG,IAAIqD,KAAK,GAAG,EAAE,EAAE;QACnD;QACA,IAAIpuB,MAAM,GAAGouB,KAAK,GAAG,EAAE,GAAGc,eAAe,CAACd,KAAK,CAAC,GAAGe,cAAc,CAACf,KAAK,CAAC;QACxE,IAAIpuB,MAAM,IAAI,IAAI,EAAE;UAClB,OAAOA,MAAM;QACf;MACF;MACA,OAAOovB,eAAe,CAAChB,KAAK,CAAC;IAC/B,KAAK,CAAC;MACJ;MACA,IAAIzpB,KAAK,GAAG,IAAI0c,KAAK,CAAC+M,KAAK,CAAC;MAC5B;MACA;MACA,KAAK,IAAIne,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGme,KAAK,EAAEne,CAAC,EAAE,EAAE;QAC9BtL,KAAK,CAACsL,CAAC,CAAC,GAAG+d,IAAI,CAAC,CAAC;MACnB;MACA,OAAOrpB,KAAK;IACd,KAAK,CAAC;MACJ;MACA,IAAI4mB,cAAc,CAACc,aAAa,EAAE;QAChC,IAAI5nB,MAAM,GAAG,CAAC,CAAC;QACf,IAAI8mB,cAAc,CAACiB,MAAM,EAAE;UACzB,KAAK,IAAIvc,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGme,KAAK,EAAEne,CAAC,EAAE,EAAE;YAC9BxL,MAAM,CAACuqB,OAAO,CAACzD,cAAc,CAAC2B,SAAS,CAACc,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGA,IAAI,CAAC,CAAC;UAC5D;QACF,CAAC,MAAM;UACL,KAAK,IAAI/d,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGme,KAAK,EAAEne,CAAC,EAAE,EAAE;YAC9BxL,MAAM,CAACuqB,OAAO,CAAChB,IAAI,CAAC,CAAC,CAAC,CAAC,GAAGA,IAAI,CAAC,CAAC;UAClC;QACF;QACA,OAAOvpB,MAAM;MACf,CAAC,MAAM;QACL,IAAIynB,mBAAmB,EAAE;UACvBX,cAAc,CAACc,aAAa,GAAG,IAAI;UACnCH,mBAAmB,GAAG,KAAK;QAC7B;QACA,IAAI3pB,GAAG,GAAG,IAAIsI,GAAG,CAAC,CAAC;QACnB,IAAI0gB,cAAc,CAACiB,MAAM,EAAE;UACzB,KAAK,IAAIvc,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGme,KAAK,EAAEne,CAAC,EAAE,EAAE;YAC9B1N,GAAG,CAACmK,GAAG,CAAC6e,cAAc,CAAC2B,SAAS,CAACc,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC;UACnD;QACF,CAAC,MAAM;UACL,KAAK,IAAI/d,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGme,KAAK,EAAEne,CAAC,EAAE,EAAE;YAC9B1N,GAAG,CAACmK,GAAG,CAACshB,IAAI,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC;UACzB;QACF;QACA,OAAOzrB,GAAG;MACZ;IACF,KAAK,CAAC;MACJ;MACA,IAAI6rB,KAAK,IAAIhD,kBAAkB,EAAE;QAC/B,IAAIiE,SAAS,GAAG7D,iBAAiB,CAAC4C,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC;QACnD;QACA,IAAIiB,SAAS,EAAE;UACb,IAAI,CAACA,SAAS,CAACrB,IAAI,EAAE;YACnBqB,SAAS,CAACrB,IAAI,GAAGsB,qBAAqB,CAACD,SAAS,CAAC;UACnD;UACA,OAAOA,SAAS,CAACrB,IAAI,CAAC,CAAC;QACzB;QACA,IAAII,KAAK,GAAG,OAAO,EAAE;UACnB,IAAIA,KAAK,IAAIjD,gBAAgB,EAAE;YAC7B;YACA,OAAOoE,gBAAgB,CAACvB,IAAI,CAAC,CAAC,CAAC;UACjC,CAAC,MAAM,IAAII,KAAK,IAAIlD,qBAAqB,EAAE;YACzC,IAAIvsB,MAAM,GAAG6wB,cAAc,CAAC,CAAC;YAC7B,IAAIxrB,EAAE,GAAGgqB,IAAI,CAAC,CAAC;YACf,KAAK,IAAI/d,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGtR,MAAM,EAAEsR,CAAC,EAAE,EAAE;cAC/Bsf,gBAAgB,CAAC,CAACvrB,EAAE,EAAE,EAAEgqB,IAAI,CAAC,CAAC,CAAC,CAAC;YAClC;YACA,OAAOA,IAAI,CAAC,CAAC;UACf,CAAC,MAAM,IAAII,KAAK,IAAIhD,kBAAkB,EAAE;YACtC,OAAOqE,aAAa,CAAC,CAAC;UACxB;UACA,IAAIlE,cAAc,CAACoB,SAAS,EAAE;YAC5B+C,UAAU,CAAC,CAAC;YACZL,SAAS,GAAG7D,iBAAiB,CAAC4C,KAAK,GAAG,MAAM,CAAC;YAC7C,IAAIiB,SAAS,EAAE;cACb,IAAI,CAACA,SAAS,CAACrB,IAAI,EAAE;gBACnBqB,SAAS,CAACrB,IAAI,GAAGsB,qBAAqB,CAACD,SAAS,CAAC;cACnD;cACA,OAAOA,SAAS,CAACrB,IAAI,CAAC,CAAC;YACzB;UACF;QACF;MACF;MACA,IAAI2B,SAAS,GAAG7D,iBAAiB,CAACsC,KAAK,CAAC;MACxC,IAAIuB,SAAS,EAAE;QACb,IAAIA,SAAS,CAACC,WAAW,EAAE;UACzB,OAAOD,SAAS,CAAC3B,IAAI,CAAC;QACxB,CAAC,MAAM;UACL,OAAO2B,SAAS,CAAC3B,IAAI,CAAC,CAAC,CAAC;QAC1B;MACF,CAAC,MAAM;QACL,IAAIpX,KAAK,GAAGoX,IAAI,CAAC,CAAC;QAClB,KAAK,IAAI/d,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG8b,sBAAsB,CAACptB,MAAM,EAAEsR,CAAC,EAAE,EAAE;UACtD,IAAIpP,KAAK,GAAGkrB,sBAAsB,CAAC9b,CAAC,CAAC,CAACme,KAAK,EAAExX,KAAK,CAAC;UACnD,IAAI/V,KAAK,KAAKgB,SAAS,EAAE;YACvB,OAAOhB,KAAK;UACd;QACF;QACA,OAAO,IAAIgvB,GAAG,CAACjZ,KAAK,EAAEwX,KAAK,CAAC;MAC9B;IACF,KAAK,CAAC;MACJ;MACA,QAAQA,KAAK;QACX,KAAK,IAAI;UACP,OAAO,KAAK;QACd,KAAK,IAAI;UACP,OAAO,IAAI;QACb,KAAK,IAAI;UACP,OAAO,IAAI;QACb,KAAK,IAAI;UACP;QACF;QACA,KAAK,IAAI;QACT;UACE,IAAI0B,WAAW,GAAG,CAAC9D,YAAY,IAAI+D,eAAe,CAAC,CAAC,EAAE3B,KAAK,CAAC;UAC5D,IAAI0B,WAAW,KAAKjuB,SAAS,EAAE;YAC7B,OAAOiuB,WAAW;UACpB;UACA,MAAM,IAAIlxB,KAAK,CAAC,gBAAgB,GAAGwvB,KAAK,CAAC;MAC7C;IACF;MACE;MACA,IAAI4B,KAAK,CAAC5B,KAAK,CAAC,EAAE;QAChB,IAAI5qB,KAAK,GAAG,IAAI5E,KAAK,CAAC,6BAA6B,CAAC;QACpD4E,KAAK,CAAC0qB,UAAU,GAAG,IAAI;QACvB,MAAM1qB,KAAK;MACb;MACA,MAAM,IAAI5E,KAAK,CAAC,qBAAqB,GAAGwvB,KAAK,CAAC;EAClD;AACF;AACA,MAAM6B,SAAS,GAAG,2BAA2B;AAC7C,SAASX,qBAAqBA,CAACD,SAAS,EAAE;EACxC,SAASa,UAAUA,CAAA,EAAG;IACpB;IACA,IAAIvxB,MAAM,GAAGmsB,GAAG,CAACE,QAAQ,EAAE,CAAC;IAC5B;IACArsB,MAAM,GAAGA,MAAM,GAAG,IAAI;IACtB,IAAIA,MAAM,GAAG,IAAI,EAAE;MACjB,QAAQA,MAAM;QACZ,KAAK,IAAI;UACPA,MAAM,GAAGmsB,GAAG,CAACE,QAAQ,EAAE,CAAC;UACxB;QACF,KAAK,IAAI;UACPrsB,MAAM,GAAGstB,QAAQ,CAACsC,SAAS,CAACvD,QAAQ,CAAC;UACrCA,QAAQ,IAAI,CAAC;UACb;QACF,KAAK,IAAI;UACPrsB,MAAM,GAAGstB,QAAQ,CAAC2C,SAAS,CAAC5D,QAAQ,CAAC;UACrCA,QAAQ,IAAI,CAAC;UACb;QACF;UACE,MAAM,IAAIpsB,KAAK,CAAC,iCAAiC,GAAGksB,GAAG,CAACE,QAAQ,GAAG,CAAC,CAAC,CAAC;MAC1E;IACF;IACA;IACA,IAAImF,cAAc,GAAG,IAAI,CAACA,cAAc,CAAC,CAAC;IAC1C,OAAOA,cAAc,EAAE;MACrB;MACA,IAAIA,cAAc,CAACC,aAAa,KAAKzxB,MAAM,EAAE;QAC3C,OAAOwxB,cAAc,CAACnC,IAAI,CAAC;MAC7B,CAAC,CAAC;MACFmC,cAAc,GAAGA,cAAc,CAAC3wB,IAAI,CAAC,CAAC;IACxC;;IAEA,IAAI,IAAI,CAAC6wB,SAAS,EAAE,IAAI,CAAC,EAAE;MACzB;MACA,IAAI1rB,KAAK,GAAG,IAAI,CAAChG,MAAM,IAAIA,MAAM,GAAG,IAAI,GAAG,IAAI,CAAC8M,KAAK,CAAC,CAAC,EAAE9M,MAAM,CAAC;MAChEwxB,cAAc,GAAG5E,cAAc,CAACiB,MAAM,GAAG,IAAI8D,QAAQ,CAAC,GAAG,EAAE,UAAU,GAAG3rB,KAAK,CAACpC,GAAG,CAACwqB,CAAC,IAAIxB,cAAc,CAAC2B,SAAS,CAACH,CAAC,CAAC,CAAC,CAACxqB,GAAG,CAACwqB,CAAC,IAAIkD,SAAS,CAACM,IAAI,CAACxD,CAAC,CAAC,GAAGiC,OAAO,CAACjC,CAAC,CAAC,GAAG,MAAM,GAAG,GAAG,GAAGhqB,IAAI,CAACC,SAAS,CAAC+pB,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC1tB,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,IAAIixB,QAAQ,CAAC,GAAG,EAAE,UAAU,GAAG3rB,KAAK,CAACpC,GAAG,CAACioB,GAAG,IAAIyF,SAAS,CAACM,IAAI,CAAC/F,GAAG,CAAC,GAAGwE,OAAO,CAACxE,GAAG,CAAC,GAAG,MAAM,GAAG,GAAG,GAAGznB,IAAI,CAACC,SAAS,CAACwnB,GAAG,CAAC,GAAG,OAAO,CAAC,CAACnrB,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;MAChX,IAAI,IAAI,CAAC8wB,cAAc,EAAE;QACvBA,cAAc,CAAC3wB,IAAI,GAAG,IAAI,CAAC2wB,cAAc;MAC3C,CAAC,CAAC;MACFA,cAAc,CAACC,aAAa,GAAGzxB,MAAM;MACrC,IAAI,CAACwxB,cAAc,GAAGA,cAAc;MACpC,OAAOA,cAAc,CAACnC,IAAI,CAAC;IAC7B;IACA,IAAIvpB,MAAM,GAAG,CAAC,CAAC;IACf,IAAI8mB,cAAc,CAACiB,MAAM,EAAE;MACzB,KAAK,IAAIvc,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGtR,MAAM,EAAEsR,CAAC,EAAE,EAAE;QAC/BxL,MAAM,CAACuqB,OAAO,CAACzD,cAAc,CAAC2B,SAAS,CAAC,IAAI,CAACjd,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG+d,IAAI,CAAC,CAAC;MAC7D;IACF,CAAC,MAAM;MACL,KAAK,IAAI/d,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGtR,MAAM,EAAEsR,CAAC,EAAE,EAAE;QAC/BxL,MAAM,CAACuqB,OAAO,CAAC,IAAI,CAAC/e,CAAC,CAAC,CAAC,CAAC,GAAG+d,IAAI,CAAC,CAAC;MACnC;IACF;IACA,OAAOvpB,MAAM;EACf;EACA4qB,SAAS,CAACgB,SAAS,GAAG,CAAC;EACvB,OAAOH,UAAU;AACnB;AACA,SAASlB,OAAOA,CAACxE,GAAG,EAAE;EACpB,OAAOA,GAAG,KAAK,WAAW,GAAG,UAAU,GAAGA,GAAG;AAC/C;AACA,IAAI4E,eAAe,GAAGoB,YAAY;AAClC,SAASA,YAAYA,CAAC7xB,MAAM,EAAE;EAC5B,IAAIuE,MAAM;EACV,IAAIvE,MAAM,GAAG,EAAE,EAAE;IACf,IAAIuE,MAAM,GAAGgsB,eAAe,CAACvwB,MAAM,CAAC,EAAE;MACpC,OAAOuE,MAAM;IACf;EACF;EACA,IAAIvE,MAAM,GAAG,EAAE,IAAIisB,OAAO,EAAE;IAC1B,OAAOA,OAAO,CAAChO,MAAM,CAACkO,GAAG,CAAC2F,QAAQ,CAACzF,QAAQ,EAAEA,QAAQ,IAAIrsB,MAAM,CAAC,CAAC;EACnE;EACA,MAAMwuB,GAAG,GAAGnC,QAAQ,GAAGrsB,MAAM;EAC7B,MAAM+xB,KAAK,GAAG,EAAE;EAChBxtB,MAAM,GAAG,EAAE;EACX,OAAO8nB,QAAQ,GAAGmC,GAAG,EAAE;IACrB,MAAMwD,KAAK,GAAG7F,GAAG,CAACE,QAAQ,EAAE,CAAC;IAC7B,IAAI,CAAC2F,KAAK,GAAG,IAAI,MAAM,CAAC,EAAE;MACxB;MACAD,KAAK,CAACpsB,IAAI,CAACqsB,KAAK,CAAC;IACnB,CAAC,MAAM,IAAI,CAACA,KAAK,GAAG,IAAI,MAAM,IAAI,EAAE;MAClC;MACA,MAAMC,KAAK,GAAG9F,GAAG,CAACE,QAAQ,EAAE,CAAC,GAAG,IAAI;MACpC0F,KAAK,CAACpsB,IAAI,CAAC,CAACqsB,KAAK,GAAG,IAAI,KAAK,CAAC,GAAGC,KAAK,CAAC;IACzC,CAAC,MAAM,IAAI,CAACD,KAAK,GAAG,IAAI,MAAM,IAAI,EAAE;MAClC;MACA,MAAMC,KAAK,GAAG9F,GAAG,CAACE,QAAQ,EAAE,CAAC,GAAG,IAAI;MACpC,MAAM6F,KAAK,GAAG/F,GAAG,CAACE,QAAQ,EAAE,CAAC,GAAG,IAAI;MACpC0F,KAAK,CAACpsB,IAAI,CAAC,CAACqsB,KAAK,GAAG,IAAI,KAAK,EAAE,GAAGC,KAAK,IAAI,CAAC,GAAGC,KAAK,CAAC;IACvD,CAAC,MAAM,IAAI,CAACF,KAAK,GAAG,IAAI,MAAM,IAAI,EAAE;MAClC;MACA,MAAMC,KAAK,GAAG9F,GAAG,CAACE,QAAQ,EAAE,CAAC,GAAG,IAAI;MACpC,MAAM6F,KAAK,GAAG/F,GAAG,CAACE,QAAQ,EAAE,CAAC,GAAG,IAAI;MACpC,MAAM8F,KAAK,GAAGhG,GAAG,CAACE,QAAQ,EAAE,CAAC,GAAG,IAAI;MACpC,IAAI+F,IAAI,GAAG,CAACJ,KAAK,GAAG,IAAI,KAAK,IAAI,GAAGC,KAAK,IAAI,IAAI,GAAGC,KAAK,IAAI,IAAI,GAAGC,KAAK;MACzE,IAAIC,IAAI,GAAG,MAAM,EAAE;QACjBA,IAAI,IAAI,OAAO;QACfL,KAAK,CAACpsB,IAAI,CAACysB,IAAI,KAAK,EAAE,GAAG,KAAK,GAAG,MAAM,CAAC;QACxCA,IAAI,GAAG,MAAM,GAAGA,IAAI,GAAG,KAAK;MAC9B;MACAL,KAAK,CAACpsB,IAAI,CAACysB,IAAI,CAAC;IAClB,CAAC,MAAM;MACLL,KAAK,CAACpsB,IAAI,CAACqsB,KAAK,CAAC;IACnB;IACA,IAAID,KAAK,CAAC/xB,MAAM,IAAI,MAAM,EAAE;MAC1BuE,MAAM,IAAI8tB,YAAY,CAACC,KAAK,CAACC,MAAM,EAAER,KAAK,CAAC;MAC3CA,KAAK,CAAC/xB,MAAM,GAAG,CAAC;IAClB;EACF;EACA,IAAI+xB,KAAK,CAAC/xB,MAAM,GAAG,CAAC,EAAE;IACpBuE,MAAM,IAAI8tB,YAAY,CAACC,KAAK,CAACC,MAAM,EAAER,KAAK,CAAC;EAC7C;EACA,OAAOxtB,MAAM;AACf;AACA,IAAI8tB,YAAY,GAAGE,MAAM,CAACF,YAAY;AACtC,SAAS7B,cAAcA,CAACxwB,MAAM,EAAE;EAC9B,IAAIwyB,KAAK,GAAGnG,QAAQ;EACpB,IAAIoG,KAAK,GAAG,IAAI/P,KAAK,CAAC1iB,MAAM,CAAC;EAC7B,KAAK,IAAIsR,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGtR,MAAM,EAAEsR,CAAC,EAAE,EAAE;IAC/B,MAAMohB,IAAI,GAAGvG,GAAG,CAACE,QAAQ,EAAE,CAAC;IAC5B,IAAI,CAACqG,IAAI,GAAG,IAAI,IAAI,CAAC,EAAE;MACrBrG,QAAQ,GAAGmG,KAAK;MAChB;IACF;IACAC,KAAK,CAACnhB,CAAC,CAAC,GAAGohB,IAAI;EACjB;EACA,OAAOL,YAAY,CAACC,KAAK,CAACC,MAAM,EAAEE,KAAK,CAAC;AAC1C;AACA,SAASlC,eAAeA,CAACvwB,MAAM,EAAE;EAC/B,IAAIA,MAAM,GAAG,CAAC,EAAE;IACd,IAAIA,MAAM,GAAG,CAAC,EAAE;MACd,IAAIA,MAAM,KAAK,CAAC,EAAE;QAChB,OAAO,EAAE;MACX,CAAC,MAAM;QACL,IAAIjH,CAAC,GAAGozB,GAAG,CAACE,QAAQ,EAAE,CAAC;QACvB,IAAI,CAACtzB,CAAC,GAAG,IAAI,IAAI,CAAC,EAAE;UAClBszB,QAAQ,IAAI,CAAC;UACb;QACF;QACA,OAAOgG,YAAY,CAACt5B,CAAC,CAAC;MACxB;IACF,CAAC,MAAM;MACL,IAAIA,CAAC,GAAGozB,GAAG,CAACE,QAAQ,EAAE,CAAC;MACvB,IAAI9yB,CAAC,GAAG4yB,GAAG,CAACE,QAAQ,EAAE,CAAC;MACvB,IAAI,CAACtzB,CAAC,GAAG,IAAI,IAAI,CAAC,IAAI,CAACQ,CAAC,GAAG,IAAI,IAAI,CAAC,EAAE;QACpC8yB,QAAQ,IAAI,CAAC;QACb;MACF;MACA,IAAIrsB,MAAM,GAAG,CAAC,EAAE;QACd,OAAOqyB,YAAY,CAACt5B,CAAC,EAAEQ,CAAC,CAAC;MAC3B;MACA,IAAII,CAAC,GAAGwyB,GAAG,CAACE,QAAQ,EAAE,CAAC;MACvB,IAAI,CAAC1yB,CAAC,GAAG,IAAI,IAAI,CAAC,EAAE;QAClB0yB,QAAQ,IAAI,CAAC;QACb;MACF;MACA,OAAOgG,YAAY,CAACt5B,CAAC,EAAEQ,CAAC,EAAEI,CAAC,CAAC;IAC9B;EACF,CAAC,MAAM;IACL,IAAIZ,CAAC,GAAGozB,GAAG,CAACE,QAAQ,EAAE,CAAC;IACvB,IAAI9yB,CAAC,GAAG4yB,GAAG,CAACE,QAAQ,EAAE,CAAC;IACvB,IAAI1yB,CAAC,GAAGwyB,GAAG,CAACE,QAAQ,EAAE,CAAC;IACvB,IAAIsG,CAAC,GAAGxG,GAAG,CAACE,QAAQ,EAAE,CAAC;IACvB,IAAI,CAACtzB,CAAC,GAAG,IAAI,IAAI,CAAC,IAAI,CAACQ,CAAC,GAAG,IAAI,IAAI,CAAC,IAAI,CAACI,CAAC,GAAG,IAAI,IAAI,CAAC,IAAI,CAACg5B,CAAC,GAAG,IAAI,IAAI,CAAC,EAAE;MACxEtG,QAAQ,IAAI,CAAC;MACb;IACF;IACA,IAAIrsB,MAAM,GAAG,CAAC,EAAE;MACd,IAAIA,MAAM,KAAK,CAAC,EAAE;QAChB,OAAOqyB,YAAY,CAACt5B,CAAC,EAAEQ,CAAC,EAAEI,CAAC,EAAEg5B,CAAC,CAAC;MACjC,CAAC,MAAM;QACL,IAAIlnB,CAAC,GAAG0gB,GAAG,CAACE,QAAQ,EAAE,CAAC;QACvB,IAAI,CAAC5gB,CAAC,GAAG,IAAI,IAAI,CAAC,EAAE;UAClB4gB,QAAQ,IAAI,CAAC;UACb;QACF;QACA,OAAOgG,YAAY,CAACt5B,CAAC,EAAEQ,CAAC,EAAEI,CAAC,EAAEg5B,CAAC,EAAElnB,CAAC,CAAC;MACpC;IACF,CAAC,MAAM,IAAIzL,MAAM,GAAG,CAAC,EAAE;MACrB,IAAIyL,CAAC,GAAG0gB,GAAG,CAACE,QAAQ,EAAE,CAAC;MACvB,IAAIjD,CAAC,GAAG+C,GAAG,CAACE,QAAQ,EAAE,CAAC;MACvB,IAAI,CAAC5gB,CAAC,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC2d,CAAC,GAAG,IAAI,IAAI,CAAC,EAAE;QACpCiD,QAAQ,IAAI,CAAC;QACb;MACF;MACA,IAAIrsB,MAAM,GAAG,CAAC,EAAE;QACd,OAAOqyB,YAAY,CAACt5B,CAAC,EAAEQ,CAAC,EAAEI,CAAC,EAAEg5B,CAAC,EAAElnB,CAAC,EAAE2d,CAAC,CAAC;MACvC;MACA,IAAIwJ,CAAC,GAAGzG,GAAG,CAACE,QAAQ,EAAE,CAAC;MACvB,IAAI,CAACuG,CAAC,GAAG,IAAI,IAAI,CAAC,EAAE;QAClBvG,QAAQ,IAAI,CAAC;QACb;MACF;MACA,OAAOgG,YAAY,CAACt5B,CAAC,EAAEQ,CAAC,EAAEI,CAAC,EAAEg5B,CAAC,EAAElnB,CAAC,EAAE2d,CAAC,EAAEwJ,CAAC,CAAC;IAC1C,CAAC,MAAM;MACL,IAAInnB,CAAC,GAAG0gB,GAAG,CAACE,QAAQ,EAAE,CAAC;MACvB,IAAIjD,CAAC,GAAG+C,GAAG,CAACE,QAAQ,EAAE,CAAC;MACvB,IAAIuG,CAAC,GAAGzG,GAAG,CAACE,QAAQ,EAAE,CAAC;MACvB,IAAIwG,CAAC,GAAG1G,GAAG,CAACE,QAAQ,EAAE,CAAC;MACvB,IAAI,CAAC5gB,CAAC,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC2d,CAAC,GAAG,IAAI,IAAI,CAAC,IAAI,CAACwJ,CAAC,GAAG,IAAI,IAAI,CAAC,IAAI,CAACC,CAAC,GAAG,IAAI,IAAI,CAAC,EAAE;QACxExG,QAAQ,IAAI,CAAC;QACb;MACF;MACA,IAAIrsB,MAAM,GAAG,EAAE,EAAE;QACf,IAAIA,MAAM,KAAK,CAAC,EAAE;UAChB,OAAOqyB,YAAY,CAACt5B,CAAC,EAAEQ,CAAC,EAAEI,CAAC,EAAEg5B,CAAC,EAAElnB,CAAC,EAAE2d,CAAC,EAAEwJ,CAAC,EAAEC,CAAC,CAAC;QAC7C,CAAC,MAAM;UACL,IAAIvhB,CAAC,GAAG6a,GAAG,CAACE,QAAQ,EAAE,CAAC;UACvB,IAAI,CAAC/a,CAAC,GAAG,IAAI,IAAI,CAAC,EAAE;YAClB+a,QAAQ,IAAI,CAAC;YACb;UACF;UACA,OAAOgG,YAAY,CAACt5B,CAAC,EAAEQ,CAAC,EAAEI,CAAC,EAAEg5B,CAAC,EAAElnB,CAAC,EAAE2d,CAAC,EAAEwJ,CAAC,EAAEC,CAAC,EAAEvhB,CAAC,CAAC;QAChD;MACF,CAAC,MAAM,IAAItR,MAAM,GAAG,EAAE,EAAE;QACtB,IAAIsR,CAAC,GAAG6a,GAAG,CAACE,QAAQ,EAAE,CAAC;QACvB,IAAIyG,CAAC,GAAG3G,GAAG,CAACE,QAAQ,EAAE,CAAC;QACvB,IAAI,CAAC/a,CAAC,GAAG,IAAI,IAAI,CAAC,IAAI,CAACwhB,CAAC,GAAG,IAAI,IAAI,CAAC,EAAE;UACpCzG,QAAQ,IAAI,EAAE;UACd;QACF;QACA,IAAIrsB,MAAM,GAAG,EAAE,EAAE;UACf,OAAOqyB,YAAY,CAACt5B,CAAC,EAAEQ,CAAC,EAAEI,CAAC,EAAEg5B,CAAC,EAAElnB,CAAC,EAAE2d,CAAC,EAAEwJ,CAAC,EAAEC,CAAC,EAAEvhB,CAAC,EAAEwhB,CAAC,CAAC;QACnD;QACA,IAAI1E,CAAC,GAAGjC,GAAG,CAACE,QAAQ,EAAE,CAAC;QACvB,IAAI,CAAC+B,CAAC,GAAG,IAAI,IAAI,CAAC,EAAE;UAClB/B,QAAQ,IAAI,EAAE;UACd;QACF;QACA,OAAOgG,YAAY,CAACt5B,CAAC,EAAEQ,CAAC,EAAEI,CAAC,EAAEg5B,CAAC,EAAElnB,CAAC,EAAE2d,CAAC,EAAEwJ,CAAC,EAAEC,CAAC,EAAEvhB,CAAC,EAAEwhB,CAAC,EAAE1E,CAAC,CAAC;MACtD,CAAC,MAAM;QACL,IAAI9c,CAAC,GAAG6a,GAAG,CAACE,QAAQ,EAAE,CAAC;QACvB,IAAIyG,CAAC,GAAG3G,GAAG,CAACE,QAAQ,EAAE,CAAC;QACvB,IAAI+B,CAAC,GAAGjC,GAAG,CAACE,QAAQ,EAAE,CAAC;QACvB,IAAI0G,CAAC,GAAG5G,GAAG,CAACE,QAAQ,EAAE,CAAC;QACvB,IAAI,CAAC/a,CAAC,GAAG,IAAI,IAAI,CAAC,IAAI,CAACwhB,CAAC,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC1E,CAAC,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC2E,CAAC,GAAG,IAAI,IAAI,CAAC,EAAE;UACxE1G,QAAQ,IAAI,EAAE;UACd;QACF;QACA,IAAIrsB,MAAM,GAAG,EAAE,EAAE;UACf,IAAIA,MAAM,KAAK,EAAE,EAAE;YACjB,OAAOqyB,YAAY,CAACt5B,CAAC,EAAEQ,CAAC,EAAEI,CAAC,EAAEg5B,CAAC,EAAElnB,CAAC,EAAE2d,CAAC,EAAEwJ,CAAC,EAAEC,CAAC,EAAEvhB,CAAC,EAAEwhB,CAAC,EAAE1E,CAAC,EAAE2E,CAAC,CAAC;UACzD,CAAC,MAAM;YACL,IAAIC,CAAC,GAAG7G,GAAG,CAACE,QAAQ,EAAE,CAAC;YACvB,IAAI,CAAC2G,CAAC,GAAG,IAAI,IAAI,CAAC,EAAE;cAClB3G,QAAQ,IAAI,EAAE;cACd;YACF;YACA,OAAOgG,YAAY,CAACt5B,CAAC,EAAEQ,CAAC,EAAEI,CAAC,EAAEg5B,CAAC,EAAElnB,CAAC,EAAE2d,CAAC,EAAEwJ,CAAC,EAAEC,CAAC,EAAEvhB,CAAC,EAAEwhB,CAAC,EAAE1E,CAAC,EAAE2E,CAAC,EAAEC,CAAC,CAAC;UAC5D;QACF,CAAC,MAAM;UACL,IAAIA,CAAC,GAAG7G,GAAG,CAACE,QAAQ,EAAE,CAAC;UACvB,IAAItgB,CAAC,GAAGogB,GAAG,CAACE,QAAQ,EAAE,CAAC;UACvB,IAAI,CAAC2G,CAAC,GAAG,IAAI,IAAI,CAAC,IAAI,CAACjnB,CAAC,GAAG,IAAI,IAAI,CAAC,EAAE;YACpCsgB,QAAQ,IAAI,EAAE;YACd;UACF;UACA,IAAIrsB,MAAM,GAAG,EAAE,EAAE;YACf,OAAOqyB,YAAY,CAACt5B,CAAC,EAAEQ,CAAC,EAAEI,CAAC,EAAEg5B,CAAC,EAAElnB,CAAC,EAAE2d,CAAC,EAAEwJ,CAAC,EAAEC,CAAC,EAAEvhB,CAAC,EAAEwhB,CAAC,EAAE1E,CAAC,EAAE2E,CAAC,EAAEC,CAAC,EAAEjnB,CAAC,CAAC;UAC/D;UACA,IAAI0d,CAAC,GAAG0C,GAAG,CAACE,QAAQ,EAAE,CAAC;UACvB,IAAI,CAAC5C,CAAC,GAAG,IAAI,IAAI,CAAC,EAAE;YAClB4C,QAAQ,IAAI,EAAE;YACd;UACF;UACA,OAAOgG,YAAY,CAACt5B,CAAC,EAAEQ,CAAC,EAAEI,CAAC,EAAEg5B,CAAC,EAAElnB,CAAC,EAAE2d,CAAC,EAAEwJ,CAAC,EAAEC,CAAC,EAAEvhB,CAAC,EAAEwhB,CAAC,EAAE1E,CAAC,EAAE2E,CAAC,EAAEC,CAAC,EAAEjnB,CAAC,EAAE0d,CAAC,CAAC;QAClE;MACF;IACF;EACF;AACF;AACA,SAAS6G,OAAOA,CAACtwB,MAAM,EAAE;EACvB,OAAO4sB,cAAc,CAACqG,WAAW;EACjC;EACAjE,UAAU,CAACL,SAAS,CAAC7hB,KAAK,CAAC8hB,IAAI,CAACzC,GAAG,EAAEE,QAAQ,EAAEA,QAAQ,IAAIrsB,MAAM,CAAC,GAAGmsB,GAAG,CAAC2F,QAAQ,CAACzF,QAAQ,EAAEA,QAAQ,IAAIrsB,MAAM,CAAC;AACjH;AACA,IAAIkzB,QAAQ,GAAG,IAAIC,YAAY,CAAC,CAAC,CAAC;AAClC,IAAIC,OAAO,GAAG,IAAIpE,UAAU,CAACkE,QAAQ,CAAChpB,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC;AACnD,SAASylB,UAAUA,CAAA,EAAG;EACpB,IAAI0D,KAAK,GAAGlH,GAAG,CAACE,QAAQ,EAAE,CAAC;EAC3B,IAAI2F,KAAK,GAAG7F,GAAG,CAACE,QAAQ,EAAE,CAAC;EAC3B,IAAIiH,QAAQ,GAAG,CAACD,KAAK,GAAG,IAAI,KAAK,CAAC;EAClC,IAAIC,QAAQ,KAAK,IAAI,EAAE;IACrB;IACA,IAAItB,KAAK,IAAIqB,KAAK,GAAG,CAAC,EAAE;MACtB,OAAOE,GAAG;IACZ;IACA,OAAOF,KAAK,GAAG,IAAI,GAAG,CAACG,QAAQ,GAAGA,QAAQ;EAC5C;EACA,IAAIF,QAAQ,KAAK,CAAC,EAAE;IAClB;IACA;IACA,IAAIG,GAAG,GAAG,CAAC,CAACJ,KAAK,GAAG,CAAC,KAAK,CAAC,GAAGrB,KAAK,KAAK,CAAC,IAAI,EAAE,CAAC;IAChD,OAAOqB,KAAK,GAAG,IAAI,GAAG,CAACI,GAAG,GAAGA,GAAG;EAClC;EACAL,OAAO,CAAC,CAAC,CAAC,GAAGC,KAAK,GAAG,IAAI;EACzB;EACA,CAACC,QAAQ,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;EACtBF,OAAO,CAAC,CAAC,CAAC,GAAG,CAACC,KAAK,GAAG,CAAC,KAAK,CAAC;EAC7B;EACArB,KAAK,IAAI,CAAC,CAAC,CAAC;EACZoB,OAAO,CAAC,CAAC,CAAC,GAAGpB,KAAK,IAAI,CAAC,CAAC,CAAC;EACzBoB,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC;EACd,OAAOF,QAAQ,CAAC,CAAC,CAAC;AACpB;AACA,MAAMhC,GAAG,CAAC;EACRruB,WAAWA,CAACX,KAAK,EAAEwxB,GAAG,EAAE;IACtB,IAAI,CAACxxB,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACwxB,GAAG,GAAGA,GAAG;EAChB;AACF;AACAvG,iBAAiB,CAAC,CAAC,CAAC,GAAGwG,UAAU,IAAI;EACnC;EACA,OAAO,IAAI5kB,IAAI,CAAC4kB,UAAU,CAAC;AAC7B,CAAC;AACDxG,iBAAiB,CAAC,CAAC,CAAC,GAAGyG,QAAQ,IAAI;EACjC;EACA,OAAO,IAAI7kB,IAAI,CAACwC,IAAI,CAACsiB,KAAK,CAACD,QAAQ,GAAG,IAAI,CAAC,CAAC;AAC9C,CAAC;AACDzG,iBAAiB,CAAC,CAAC,CAAC,GAAGjjB,MAAM,IAAI;EAC/B;EACA,IAAIhI,KAAK,GAAG4xB,MAAM,CAAC,CAAC,CAAC;EACrB,KAAK,IAAIxiB,CAAC,GAAG,CAAC,EAAEyhB,CAAC,GAAG7oB,MAAM,CAAC6kB,UAAU,EAAEzd,CAAC,GAAGyhB,CAAC,EAAEzhB,CAAC,EAAE,EAAE;IACjDpP,KAAK,GAAG4xB,MAAM,CAAC5pB,MAAM,CAACoH,CAAC,CAAC,CAAC,GAAGpP,KAAK,IAAI4xB,MAAM,CAAC,CAAC,CAAC;EAChD;EACA,OAAO5xB,KAAK;AACd,CAAC;AACDirB,iBAAiB,CAAC,CAAC,CAAC,GAAGjjB,MAAM,IAAI;EAC/B;EACA,OAAO4pB,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG3G,iBAAiB,CAAC,CAAC,CAAC,CAACjjB,MAAM,CAAC;AAClD,CAAC;AACDijB,iBAAiB,CAAC,CAAC,CAAC,GAAG4G,QAAQ,IAAI;EACjC;EACA,OAAOzzB,MAAM,CAACyzB,QAAQ,CAAC,CAAC,CAAC,GAAG,GAAG,GAAGA,QAAQ,CAAC,CAAC,CAAC,CAAC;AAChD,CAAC;AACD5G,iBAAiB,CAAC,CAAC,CAAC,GAAG4G,QAAQ,IAAI;EACjC;EACA,OAAOA,QAAQ,CAAC,CAAC,CAAC,GAAGxiB,IAAI,CAACyiB,GAAG,CAACD,QAAQ,CAAC,CAAC,CAAC,GAAGxiB,IAAI,CAAC0iB,GAAG,CAAC,CAAC,CAAC,CAAC;AAC1D,CAAC;;AAED;AACA,MAAMrD,gBAAgB,GAAGsD,UAAU,IAAI;EACrC,IAAI7uB,EAAE,GAAG6uB,UAAU,CAAC,CAAC,CAAC,GAAG,MAAM;EAC/B,IAAIxD,SAAS,GAAGwD,UAAU,CAAC,CAAC,CAAC;EAC7B,IAAIC,iBAAiB,GAAGtH,iBAAiB,CAACxnB,EAAE,CAAC;EAC7C,IAAI8uB,iBAAiB,IAAIA,iBAAiB,CAACC,QAAQ,EAAE;IACnD,CAACvH,iBAAiB,CAACwH,iBAAiB,KAAKxH,iBAAiB,CAACwH,iBAAiB,GAAG,EAAE,CAAC,EAAEhvB,EAAE,CAAC,GAAG8uB,iBAAiB;EAC7G;EACAtH,iBAAiB,CAACxnB,EAAE,CAAC,GAAGqrB,SAAS;EACjCA,SAAS,CAACrB,IAAI,GAAGsB,qBAAqB,CAACD,SAAS,CAAC;EACjD,IAAI5qB,MAAM,GAAG,CAAC,CAAC;EACf,IAAI8mB,cAAc,CAACiB,MAAM,EAAE;IACzB,KAAK,IAAIvc,CAAC,GAAG,CAAC,EAAEyhB,CAAC,GAAGmB,UAAU,CAACl0B,MAAM,EAAEsR,CAAC,GAAGyhB,CAAC,EAAEzhB,CAAC,EAAE,EAAE;MACjD,IAAIua,GAAG,GAAGe,cAAc,CAAC2B,SAAS,CAACmC,SAAS,CAACpf,CAAC,GAAG,CAAC,CAAC,CAAC;MACpDxL,MAAM,CAACuqB,OAAO,CAACxE,GAAG,CAAC,CAAC,GAAGqI,UAAU,CAAC5iB,CAAC,CAAC;IACtC;EACF,CAAC,MAAM;IACL,KAAK,IAAIA,CAAC,GAAG,CAAC,EAAEyhB,CAAC,GAAGmB,UAAU,CAACl0B,MAAM,EAAEsR,CAAC,GAAGyhB,CAAC,EAAEzhB,CAAC,EAAE,EAAE;MACjD,IAAIua,GAAG,GAAG6E,SAAS,CAACpf,CAAC,GAAG,CAAC,CAAC;MAC1BxL,MAAM,CAACuqB,OAAO,CAACxE,GAAG,CAAC,CAAC,GAAGqI,UAAU,CAAC5iB,CAAC,CAAC;IACtC;EACF;EACA,OAAOxL,MAAM;AACf,CAAC;AACDqnB,iBAAiB,CAACb,uBAAuB,CAAC,GAAGsE,gBAAgB;AAC7DzD,iBAAiB,CAAC,EAAE,CAAC,GAAGjrB,KAAK,IAAI;EAC/B,IAAI+qB,cAAc,EAAE;IAClB,OAAOA,cAAc,CAAC,CAAC,CAAC,CAACngB,KAAK,CAACmgB,cAAc,CAACqH,SAAS,EAAErH,cAAc,CAACqH,SAAS,IAAIpyB,KAAK,CAAC;EAC7F;EACA,OAAO,IAAIgvB,GAAG,CAAChvB,KAAK,EAAE,EAAE,CAAC;AAC3B,CAAC;AACDirB,iBAAiB,CAAC,EAAE,CAAC,GAAGjrB,KAAK,IAAI;EAC/B,IAAI+qB,cAAc,EAAE;IAClB,OAAOA,cAAc,CAAC,CAAC,CAAC,CAACngB,KAAK,CAACmgB,cAAc,CAACsH,SAAS,EAAEtH,cAAc,CAACsH,SAAS,IAAIryB,KAAK,CAAC;EAC7F;EACA,OAAO,IAAIgvB,GAAG,CAAChvB,KAAK,EAAE,EAAE,CAAC;AAC3B,CAAC;AACD,IAAIsyB,IAAI,GAAG;EACTv0B,KAAK;EACLJ;AACF,CAAC;AACDstB,iBAAiB,CAAC,EAAE,CAAC,GAAG1rB,IAAI,IAAI;EAC9B;EACA,OAAO,CAAC+yB,IAAI,CAAC/yB,IAAI,CAAC,CAAC,CAAC,CAAC,IAAIxB,KAAK,EAAEwB,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,CAAC;AACnD,CAAC;AACD,MAAMgzB,WAAW,GAAGC,KAAK,IAAI;EAC3B,IAAIvI,GAAG,CAACE,QAAQ,EAAE,CAAC,IAAI,IAAI,EAAE;IAC3B,MAAM,IAAIpsB,KAAK,CAAC,+DAA+D,CAAC;EAClF;EACA,IAAI00B,eAAe,GAAGD,KAAK,CAAC,CAAC,CAAC,CAAC;EAC/BrH,YAAY,GAAGA,YAAY,GAAGsH,eAAe,CAACh1B,MAAM,CAAC0tB,YAAY,CAACvgB,KAAK,CAAC6nB,eAAe,CAAC30B,MAAM,CAAC,CAAC,GAAG20B,eAAe;EAClHtH,YAAY,CAACuH,QAAQ,GAAGF,KAAK,CAAC,CAAC;EAC/BrH,YAAY,CAACwH,QAAQ,GAAGH,KAAK,CAAC,CAAC;EAC/B,OAAOA,KAAK,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC;;AAEDD,WAAW,CAACxD,WAAW,GAAG,IAAI;AAC9B9D,iBAAiB,CAAC,EAAE,CAAC,GAAGsH,WAAW;AACnCtH,iBAAiB,CAACT,uBAAuB,CAAC,GAAGjrB,IAAI,IAAI;EACnD;EACA,IAAI,CAAC4rB,YAAY,EAAE;IACjB,IAAIT,cAAc,CAACoB,SAAS,EAAE;MAC5B+C,UAAU,CAAC,CAAC;IACd,CAAC,MAAM;MACL,OAAO,IAAIG,GAAG,CAACzvB,IAAI,EAAEirB,uBAAuB,CAAC;IAC/C;EACF;EACA,IAAI,OAAOjrB,IAAI,KAAK,QAAQ,EAAE;IAC5B,OAAO4rB,YAAY,CAAC,EAAE,IAAI5rB,IAAI,IAAI,CAAC,GAAG,CAAC,GAAGA,IAAI,GAAG,CAAC,CAAC,GAAGA,IAAI,GAAG,CAAC,CAAC,CAAC;EAClE;EACA,MAAM,IAAIxB,KAAK,CAAC,kDAAkD,CAAC;AACrE,CAAC;AACDktB,iBAAiB,CAAC,EAAE,CAAC,GAAG9nB,EAAE,IAAI;EAC5B,OAAOyvB,UAAU,CAACzvB,EAAE,CAAC;AACvB,CAAC;AACD8nB,iBAAiB,CAAC,GAAG,CAAC,GAAGuH,KAAK,IAAI;EAChCI,UAAU,GAAG,EAAE;EACf,IAAI;IACF,OAAOJ,KAAK,CAAC,CAAC;EAChB,CAAC,SAAS;IACRI,UAAU,GAAG,IAAI;EACnB;AACF,CAAC;AACD3H,iBAAiB,CAAC,GAAG,CAAC,CAAC8D,WAAW,GAAG,IAAI;AACzC9D,iBAAiB,CAAC,EAAE,CAAC,GAAGuH,KAAK,IAAI;EAC/B;EACA,IAAI,CAACxH,YAAY,EAAE;IACjBA,YAAY,GAAG,IAAIhhB,GAAG,CAAC,CAAC;IACxBghB,YAAY,CAAC7nB,EAAE,GAAG,CAAC;EACrB;EACA,IAAIA,EAAE,GAAG6nB,YAAY,CAAC7nB,EAAE,EAAE;EAC1B,IAAIoqB,KAAK,GAAGtD,GAAG,CAACE,QAAQ,CAAC;EACzB,IAAI0I,MAAM;EACV;EACA;EACA,IAAItF,KAAK,IAAI,CAAC,IAAI,CAAC,EAAE;IACnBsF,MAAM,GAAG,EAAE;EACb,CAAC,MAAM;IACLA,MAAM,GAAG,CAAC,CAAC;EACb;EACA,IAAIC,QAAQ,GAAG;IACbD;EACF,CAAC,CAAC,CAAC;EACH7H,YAAY,CAACnf,GAAG,CAAC1I,EAAE,EAAE2vB,QAAQ,CAAC;EAC9B,IAAIC,gBAAgB,GAAGP,KAAK,CAAC,CAAC,CAAC,CAAC;EAChC,IAAIM,QAAQ,CAACE,IAAI,EAAE;IACjB;IACA,OAAOrM,MAAM,CAACyF,MAAM,CAACyG,MAAM,EAAEE,gBAAgB,CAAC;EAChD;EACAD,QAAQ,CAACD,MAAM,GAAGE,gBAAgB,CAAC,CAAC;EACpC,OAAOA,gBAAgB,CAAC,CAAC;AAC3B,CAAC;;AAED9H,iBAAiB,CAAC,EAAE,CAAC,CAAC8D,WAAW,GAAG,IAAI;AACxC9D,iBAAiB,CAAC,EAAE,CAAC,GAAG9nB,EAAE,IAAI;EAC5B;EACA,IAAI2vB,QAAQ,GAAG9H,YAAY,CAACtf,GAAG,CAACvI,EAAE,CAAC;EACnC2vB,QAAQ,CAACE,IAAI,GAAG,IAAI;EACpB,OAAOF,QAAQ,CAACD,MAAM;AACxB,CAAC;AACD5H,iBAAiB,CAAC,GAAG,CAAC,GAAGnnB,KAAK,IAAI,IAAI+kB,GAAG,CAAC/kB,KAAK,CAAC,CAAC,CAAC;AAClD,CAACmnB,iBAAiB,CAAC,GAAG,CAAC,GAAGuH,KAAK,IAAI;EACjC;EACA;EACA,IAAI9H,cAAc,CAACc,aAAa,EAAE;IAChCd,cAAc,CAACc,aAAa,GAAG,KAAK;IACpCH,mBAAmB,GAAG,IAAI;EAC5B;EACA,OAAOmH,KAAK,CAAC,CAAC;AAChB,CAAC,EAAEzD,WAAW,GAAG,IAAI;AACrB,SAASkE,OAAOA,CAACp8B,CAAC,EAAEQ,CAAC,EAAE;EACrB,IAAI,OAAOR,CAAC,KAAK,QAAQ,EAAE;IACzB,OAAOA,CAAC,GAAGQ,CAAC;EACd;EACA,IAAIR,CAAC,YAAY2pB,KAAK,EAAE;IACtB,OAAO3pB,CAAC,CAAC4G,MAAM,CAACpG,CAAC,CAAC;EACpB;EACA,OAAOsvB,MAAM,CAACyF,MAAM,CAAC,CAAC,CAAC,EAAEv1B,CAAC,EAAEQ,CAAC,CAAC;AAChC;AACA,SAAS63B,eAAeA,CAAA,EAAG;EACzB,IAAI,CAAC/D,YAAY,EAAE;IACjB,IAAIT,cAAc,CAACoB,SAAS,EAAE;MAC5B+C,UAAU,CAAC,CAAC;IACd,CAAC,MAAM;MACL,MAAM,IAAI9wB,KAAK,CAAC,4BAA4B,CAAC;IAC/C;EACF;EACA,OAAOotB,YAAY;AACrB;AACA,MAAM+H,kBAAkB,GAAG,UAAU,CAAC,CAAC;AACvChI,sBAAsB,CAACznB,IAAI,CAAC,CAAC+tB,GAAG,EAAEzb,KAAK,KAAK;EAC1C,IAAIyb,GAAG,IAAI,GAAG,IAAIA,GAAG,IAAI,GAAG,EAAE;IAC5B,OAAOyB,OAAO,CAAC/D,eAAe,CAAC,CAAC,CAACwD,QAAQ,CAAClB,GAAG,GAAG,GAAG,CAAC,EAAEzb,KAAK,CAAC;EAC9D;EACA,IAAIyb,GAAG,IAAI,KAAK,IAAIA,GAAG,IAAI,KAAK,EAAE;IAChC,OAAOyB,OAAO,CAAC/D,eAAe,CAAC,CAAC,CAACwD,QAAQ,CAAClB,GAAG,GAAG,KAAK,CAAC,EAAEzb,KAAK,CAAC;EAChE;EACA,IAAIyb,GAAG,IAAI,UAAU,IAAIA,GAAG,IAAI,UAAU,EAAE;IAC1C,OAAOyB,OAAO,CAAC/D,eAAe,CAAC,CAAC,CAACwD,QAAQ,CAAClB,GAAG,GAAG,UAAU,CAAC,EAAEzb,KAAK,CAAC;EACrE;EACA,IAAIyb,GAAG,IAAI,GAAG,IAAIA,GAAG,IAAI,GAAG,EAAE;IAC5B,OAAOyB,OAAO,CAACld,KAAK,EAAEmZ,eAAe,CAAC,CAAC,CAACyD,QAAQ,CAACnB,GAAG,GAAG,GAAG,CAAC,CAAC;EAC9D;EACA,IAAIA,GAAG,IAAI,KAAK,IAAIA,GAAG,IAAI,KAAK,EAAE;IAChC,OAAOyB,OAAO,CAACld,KAAK,EAAEmZ,eAAe,CAAC,CAAC,CAACyD,QAAQ,CAACnB,GAAG,GAAG,KAAK,CAAC,CAAC;EAChE;EACA,IAAIA,GAAG,IAAI,UAAU,IAAIA,GAAG,IAAI,UAAU,EAAE;IAC1C,OAAOyB,OAAO,CAACld,KAAK,EAAEmZ,eAAe,CAAC,CAAC,CAACyD,QAAQ,CAACnB,GAAG,GAAG,UAAU,CAAC,CAAC;EACrE;EACA,IAAIA,GAAG,IAAI0B,kBAAkB,EAAE;IAC7B;IACA,OAAO;MACL/H,YAAY,EAAEA,YAAY;MAC1BY,UAAU,EAAEpB,iBAAiB,CAAC/f,KAAK,CAAC,CAAC,CAAC;MACtC/M,OAAO,EAAEkY;IACX,CAAC;EACH;EACA,IAAIyb,GAAG,IAAI,KAAK,EAAE;IAChB;IACA,OAAOzb,KAAK;EACd;AACF,CAAC,CAAC;AACF,MAAMod,qBAAqB,GAAG,IAAIrG,UAAU,CAAC,IAAIsG,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAACprB,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;AACjF,MAAMqrB,WAAW,GAAG,CAACvG,UAAU,CAAC;AAChC,MAAMwG,cAAc,GAAG,CAAC,EAAE,CAAC;AAC3B,KAAK,IAAIlkB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGikB,WAAW,CAACv1B,MAAM,EAAEsR,CAAC,EAAE,EAAE;EAC3CmkB,kBAAkB,CAACF,WAAW,CAACjkB,CAAC,CAAC,EAAEkkB,cAAc,CAAClkB,CAAC,CAAC,CAAC;AACvD;AACA,SAASmkB,kBAAkBA,CAACC,UAAU,EAAEhC,GAAG,EAAE;EAC3C,IAAIiC,QAAQ,GAAG,KAAK,GAAGD,UAAU,CAACvvB,IAAI,CAAC2G,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EACnD,IAAI,OAAO4oB,UAAU,KAAK,UAAU,EAAE;IACpCA,UAAU,GAAG,IAAI;EACnB;EACA,IAAIE,eAAe,GAAGF,UAAU,CAACG,iBAAiB;EAClD,KAAK,IAAIC,YAAY,GAAG,CAAC,EAAEA,YAAY,GAAG,CAAC,EAAEA,YAAY,EAAE,EAAE;IAC3D,IAAI,CAACA,YAAY,IAAIF,eAAe,IAAI,CAAC,EAAE;MACzC;IACF;IACA,IAAIG,SAAS,GAAGH,eAAe,IAAI,CAAC,GAAG,CAAC,GAAGA,eAAe,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC;IACvEzI,iBAAiB,CAAC2I,YAAY,GAAGpC,GAAG,GAAGA,GAAG,GAAG,CAAC,CAAC,GAAGkC,eAAe,IAAI,CAAC,IAAIE,YAAY,IAAIT,qBAAqB,GAAGnrB,MAAM,IAAI;MAC1H,IAAI,CAACwrB,UAAU,EAAE;QACf,MAAM,IAAIz1B,KAAK,CAAC,sCAAsC,GAAGyzB,GAAG,CAAC;MAC/D;MACA;MACA,OAAO,IAAIgC,UAAU,CAAC1G,UAAU,CAACL,SAAS,CAAC7hB,KAAK,CAAC8hB,IAAI,CAAC1kB,MAAM,EAAE,CAAC,CAAC,CAACA,MAAM,CAAC;IAC1E,CAAC,GAAGA,MAAM,IAAI;MACZ,IAAI,CAACwrB,UAAU,EAAE;QACf,MAAM,IAAIz1B,KAAK,CAAC,sCAAsC,GAAGyzB,GAAG,CAAC;MAC/D;MACA,IAAIsC,EAAE,GAAG,IAAInH,QAAQ,CAAC3kB,MAAM,CAACA,MAAM,EAAEA,MAAM,CAAC4kB,UAAU,EAAE5kB,MAAM,CAAC6kB,UAAU,CAAC;MAC1E,IAAIkH,QAAQ,GAAG/rB,MAAM,CAAClK,MAAM,IAAI+1B,SAAS;MACzC,IAAIG,EAAE,GAAG,IAAIR,UAAU,CAACO,QAAQ,CAAC;MACjC,IAAI9wB,MAAM,GAAG6wB,EAAE,CAACL,QAAQ,CAAC;MACzB,KAAK,IAAIrkB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG2kB,QAAQ,EAAE3kB,CAAC,EAAE,EAAE;QACjC4kB,EAAE,CAAC5kB,CAAC,CAAC,GAAGnM,MAAM,CAACypB,IAAI,CAACoH,EAAE,EAAE1kB,CAAC,IAAIykB,SAAS,EAAED,YAAY,CAAC;MACvD;MACA,OAAOI,EAAE;IACX,CAAC;EACH;AACF;AACA,SAASpF,aAAaA,CAAA,EAAG;EACvB,IAAI9wB,MAAM,GAAG6wB,cAAc,CAAC,CAAC;EAC7B,IAAIsF,cAAc,GAAG9J,QAAQ,GAAGgD,IAAI,CAAC,CAAC;EACtC,KAAK,IAAI/d,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGtR,MAAM,EAAEsR,CAAC,EAAE,EAAE;IAC/B;IACA,IAAI8kB,YAAY,GAAGvF,cAAc,CAAC,CAAC,CAAC,CAAC;IACrCxE,QAAQ,IAAI+J,YAAY;EAC1B;EACA,IAAIC,YAAY,GAAGhK,QAAQ;EAC3BA,QAAQ,GAAG8J,cAAc;EACzBlJ,cAAc,GAAG,CAAC4E,YAAY,CAAChB,cAAc,CAAC,CAAC,CAAC,EAAEgB,YAAY,CAAChB,cAAc,CAAC,CAAC,CAAC,CAAC;EACjF5D,cAAc,CAACqH,SAAS,GAAG,CAAC;EAC5BrH,cAAc,CAACsH,SAAS,GAAG,CAAC;EAC5BtH,cAAc,CAACqC,kBAAkB,GAAGjD,QAAQ;EAC5CA,QAAQ,GAAGgK,YAAY;EACvB,OAAOhH,IAAI,CAAC,CAAC;AACf;AACA,SAASwB,cAAcA,CAAA,EAAG;EACxB,IAAIpB,KAAK,GAAGtD,GAAG,CAACE,QAAQ,EAAE,CAAC,GAAG,IAAI;EAClC,IAAIoD,KAAK,GAAG,IAAI,EAAE;IAChB,QAAQA,KAAK;MACX,KAAK,IAAI;QACPA,KAAK,GAAGtD,GAAG,CAACE,QAAQ,EAAE,CAAC;QACvB;MACF,KAAK,IAAI;QACPoD,KAAK,GAAGnC,QAAQ,CAACsC,SAAS,CAACvD,QAAQ,CAAC;QACpCA,QAAQ,IAAI,CAAC;QACb;MACF,KAAK,IAAI;QACPoD,KAAK,GAAGnC,QAAQ,CAAC2C,SAAS,CAAC5D,QAAQ,CAAC;QACpCA,QAAQ,IAAI,CAAC;QACb;IACJ;EACF;EACA,OAAOoD,KAAK;AACd;AACA,SAASsB,UAAUA,CAAA,EAAG;EACpB,IAAInE,cAAc,CAACoB,SAAS,EAAE;IAC5B,IAAIsI,UAAU,GAAG7H,SAAS,CAAC,MAAM;MAC/B;MACAtC,GAAG,GAAG,IAAI;MACV,OAAOS,cAAc,CAACoB,SAAS,CAAC,CAAC;IACnC,CAAC,CAAC,IAAI,CAAC,CAAC;IACR,IAAIuI,iBAAiB,GAAGD,UAAU,CAACrI,UAAU,IAAI,EAAE;IACnDrB,cAAc,CAAC4J,aAAa,GAAGF,UAAU,CAACv2B,OAAO;IACjDstB,YAAY,GAAGT,cAAc,CAACqC,YAAY,GAAGqH,UAAU,CAACjJ,YAAY;IACpE,IAAIR,iBAAiB,KAAK,IAAI,EAAE;MAC9BD,cAAc,CAACqB,UAAU,GAAGpB,iBAAiB,GAAG0J,iBAAiB;IACnE,CAAC,MAAM;MACL1J,iBAAiB,CAAC4J,MAAM,CAACnE,KAAK,CAACzF,iBAAiB,EAAE,CAAC,CAAC,EAAE0J,iBAAiB,CAACv2B,MAAM,CAAC,CAACL,MAAM,CAAC42B,iBAAiB,CAAC,CAAC;IAC5G;EACF;AACF;AACA,SAAS9H,SAASA,CAACiI,QAAQ,EAAE;EAC3B,IAAIC,WAAW,GAAGvK,MAAM;EACxB,IAAIwK,aAAa,GAAGvK,QAAQ;EAC5B,IAAIwK,mBAAmB,GAAG9J,cAAc;EACxC,IAAI+J,iBAAiB,GAAG9J,YAAY;EACpC,IAAI+J,cAAc,GAAGjK,SAAS;EAC9B,IAAIkK,iBAAiB,GAAG9J,YAAY;EACpC,IAAI+J,mBAAmB,GAAGhK,cAAc;;EAExC;EACA,IAAIiK,QAAQ,GAAG,IAAIlI,UAAU,CAAC7C,GAAG,CAACrf,KAAK,CAAC,CAAC,EAAEsf,MAAM,CAAC,CAAC,CAAC,CAAC;EACrD,IAAI+K,eAAe,GAAGtK,iBAAiB;EACvC,IAAIuK,YAAY,GAAGxK,cAAc;EACjC,IAAIyK,mBAAmB,GAAG1J,cAAc;EACxC,IAAIzrB,KAAK,GAAGw0B,QAAQ,CAAC,CAAC;EACtBtK,MAAM,GAAGuK,WAAW;EACpBtK,QAAQ,GAAGuK,aAAa;EACxB7J,cAAc,GAAG8J,mBAAmB;EACpC7J,YAAY,GAAG8J,iBAAiB;EAChChK,SAAS,GAAGiK,cAAc;EAC1B7J,YAAY,GAAG8J,iBAAiB;EAChC/J,cAAc,GAAGgK,mBAAmB;EACpC9K,GAAG,GAAG+K,QAAQ;EACdvJ,cAAc,GAAG0J,mBAAmB;EACpCxK,iBAAiB,GAAGsK,eAAe;EACnCvK,cAAc,GAAGwK,YAAY;EAC7B9J,QAAQ,GAAG,IAAIuB,QAAQ,CAAC1C,GAAG,CAACjiB,MAAM,EAAEiiB,GAAG,CAAC2C,UAAU,EAAE3C,GAAG,CAAC4C,UAAU,CAAC;EACnE,OAAO7sB,KAAK;AACd;AACA,SAASwsB,WAAWA,CAAA,EAAG;EACrBvC,GAAG,GAAG,IAAI;EACVe,YAAY,GAAG,IAAI;EACnBL,iBAAiB,GAAG,IAAI;AAC1B;AACA,MAAMmD,MAAM,GAAG,IAAItN,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;AAC/B,KAAK,IAAIpR,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,GAAG,EAAEA,CAAC,EAAE,EAAE;EAC5B0e,MAAM,CAAC1e,CAAC,CAAC,GAAGhR,MAAM,CAAC,IAAI,GAAGiR,IAAI,CAACC,KAAK,CAAC,KAAK,GAAGF,CAAC,GAAG,OAAO,CAAC,CAAC;AAC5D;AACA,MAAMgmB,cAAc,GAAG,IAAI1J,OAAO,CAAC;EACjCH,UAAU,EAAE;AACd,CAAC,CAAC;AACF,MAAMxP,MAAM,GAAGqZ,cAAc,CAACrZ,MAAM;;AAEpC;AACA;AACA;AACA;AACA,SAASsZ,UAAUA,CAACC,GAAG,EAAE;EACvBA,GAAG,GAAGA,GAAG,CAACz1B,QAAQ,CAAC,EAAE,CAAC;EACtB,IAAI,CAACy1B,GAAG,CAAClP,UAAU,CAAC,IAAI,CAAC,EAAE;IACzBkP,GAAG,QAAA73B,MAAA,CAAQ63B,GAAG,CAAE;EAClB;EACA,IAAI,CAACC,WAAW,CAACD,GAAG,CAAC,EAAE;IACrB,MAAM,IAAIv3B,KAAK,kBAAAN,MAAA,CAAiB63B,GAAG,kCAA8B,CAAC;EACpE;EACAA,GAAG,GAAGA,GAAG,CAACzV,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC;EAC7B,MAAM0Q,KAAK,GAAG,EAAE;EAChB,KAAK,IAAI94B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG69B,GAAG,CAACx3B,MAAM,EAAErG,CAAC,IAAI,CAAC,EAAE;IACtC84B,KAAK,CAAC9sB,IAAI,CAAC+xB,QAAQ,CAACF,GAAG,CAAC1qB,KAAK,CAACnT,CAAC,EAAEA,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;EAC/C;EACA,OAAO84B,KAAK;AACd;;AAEA;AACA;AACA;AACA;AACA,SAASgF,WAAWA,CAACD,GAAG,EAAE;EACxB,OAAO,CAAC,OAAOA,GAAG,KAAK,QAAQ,IAAI,OAAOA,GAAG,KAAK,QAAQ,KAAK,oBAAoB,CAAC5F,IAAI,CAAC4F,GAAG,CAACz1B,QAAQ,CAAC,CAAC,CAAC;AAC1G;;AAEA;AACA;AACA;AACA;AACA,SAAS41B,2BAA2BA,CAAC3a,QAAQ,EAAE;EAC7C,MAAM4a,eAAe,GAAGL,UAAU,CAACva,QAAQ,CAAC;EAC5C,MAAM6a,UAAU,GAAGD,eAAe,CAACA,eAAe,CAAC53B,MAAM,GAAG,CAAC,CAAC,GAAG,KAAK,GAAG43B,eAAe,CAACA,eAAe,CAAC53B,MAAM,GAAG,CAAC,CAAC;EACpH,MAAM83B,cAAc,GAAG9I,UAAU,CAACntB,IAAI,CAAC+1B,eAAe,CAAC9qB,KAAK,CAAC8qB,eAAe,CAAC53B,MAAM,GAAG,CAAC,GAAG63B,UAAU,EAAE,CAAC,CAAC,CAAC,CAAC;EAC1G,MAAME,QAAQ,GAAG9Z,MAAM,CAAC6Z,cAAc,CAAC;EACvC,IAAI,MAAM,IAAIC,QAAQ,IAAIA,QAAQ,CAAC,MAAM,CAAC,EAAE;IAC1C,IAAI;MACF,iBAAAp4B,MAAA,CAAiB/D,IAAI,CAAC+hB,MAAM,CAACoa,QAAQ,CAAC,MAAM,CAAC,CAAC;IAChD,CAAC,CAAC,OAAOtsB,CAAC,EAAE;MACVusB,OAAO,CAACC,IAAI,CAAC,oCAAoC,EAAExsB,CAAC,CAAC;IACvD;EACF;EACA,OAAOvI,SAAS;AAClB;;AAEA;AACA;AACA;AACA;AACA,SAASg1B,wCAAwCA,CAAClb,QAAQ,EAAE;EAC1D;EACA,IAAIA,QAAQ,CAACsL,UAAU,CAAC,wBAAwB,CAAC,EAAE;IACjD,MAAM6P,qBAAqB,GAAGnb,QAAQ,CAAClQ,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC;IACpD,YAAAnN,MAAA,CAAYw4B,qBAAqB;EACnC;;EAEA;EACA,IAAInb,QAAQ,CAACsL,UAAU,CAAC,oBAAoB,CAAC,EAAE;IAC7C;IACA,MAAM6P,qBAAqB,GAAGnb,QAAQ,CAAClQ,KAAK,CAAC,GAAG,EAAE,GAAG,GAAG,EAAE,CAAC;IAC3D,YAAAnN,MAAA,CAAYw4B,qBAAqB;EACnC;;EAEA;EACA,IAAInb,QAAQ,CAACsL,UAAU,CAAC,0BAA0B,CAAC,EAAE;IACnD;IACA,MAAM6P,qBAAqB,GAAGnb,QAAQ,CAAClQ,KAAK,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC;IACzD,YAAAnN,MAAA,CAAYw4B,qBAAqB;EACnC;;EAEA;EACA,IAAInb,QAAQ,CAACsL,UAAU,CAAC,kCAAkC,CAAC,EAAE;IAC3D,MAAM6P,qBAAqB,GAAGnb,QAAQ,CAAClQ,KAAK,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC;IACzD,YAAAnN,MAAA,CAAYw4B,qBAAqB;EACnC;EACA,OAAOj1B,SAAS;AAClB;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAek1B,6BAA6BA,CAACvpB,OAAO,EAAE5K,QAAQ,EAAE;EAC9D,MAAM;IACJ+Y;EACF,CAAC,GAAG,MAAMqb,qBAAqB,CAACxpB,OAAO,EAAE5K,QAAQ,CAAC;EAClD,OAAO0zB,2BAA2B,CAAC3a,QAAQ,CAAC;AAC9C;AACA,eAAesb,6BAA6BA,CAACzpB,OAAO,EAAE5K,QAAQ,EAAE;EAC9D,MAAM;IACJ+Y;EACF,CAAC,GAAG,MAAMqb,qBAAqB,CAACxpB,OAAO,EAAE5K,QAAQ,CAAC;EAClD,OAAO;IACLyR,GAAG,EAAEiiB,2BAA2B,CAAC3a,QAAQ,CAAC;IAC1CA;EACF,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeqb,qBAAqBA,CAACxpB,OAAO,EAAE5K,QAAQ,EAAE;EACtD,IAAI+Y,QAAQ;EACZ,IAAI;IACFA,QAAQ,GAAG,MAAM/Y,QAAQ,CAACs0B,OAAO,CAAC1pB,OAAO,CAAC;EAC5C,CAAC,CAAC,OAAOpD,CAAC,EAAE;IACV,MAAM,IAAIxL,KAAK,uCAAAN,MAAA,CAAuCkP,OAAO,QAAAlP,MAAA,CAAK8L,CAAC,CAAE,CAAC;EACxE;EACA,IAAIuR,QAAQ,KAAK,IAAI,EAAE;IACrB,MAAMhM,KAAK,GAAG,MAAM/M,QAAQ,CAAC6H,UAAU,CAAC,CAAC;IACzC,MAAM,IAAI7L,KAAK,gBAAAN,MAAA,CAAgBkP,OAAO,gCAAAlP,MAAA,CAA6BqR,KAAK,CAAC7K,IAAI,kBAAAxG,MAAA,CAAeqR,KAAK,CAAC/K,OAAO,MAAG,CAAC;EAC/G;EACA,IAAI;IACF;IACA,MAAMkyB,qBAAqB,GAAGD,wCAAwC,CAAClb,QAAQ,CAAC;IAChF,IAAImb,qBAAqB,EAAE;MACzB,OAAO,MAAME,qBAAqB,CAACF,qBAAqB,EAAEl0B,QAAQ,CAAC;IACrE;EACF,CAAC,CAAC,OAAOwH,CAAC,EAAE;IACV;EAAA;;EAGF;EACA,IAAI;IACF,MAAM+sB,YAAY,GAAG,MAAMv0B,QAAQ,CAACw0B,YAAY,CAAC5pB,OAAO,EAAE7U,SAAS,CAAC6H,IAAI,CAAC,oEAAoE,CAAC,CAAC;IAC/I,MAAMs2B,qBAAqB,QAAAx4B,MAAA,CAAQ64B,YAAY,CAAC1rB,KAAK,CAAC,CAAC,EAAE,CAAC,CAAE;IAC5D,IAAI5S,KAAK,CAACmV,SAAS,CAAC8oB,qBAAqB,CAAC,IAAIA,qBAAqB,KAAKh+B,SAAS,CAAC+W,WAAW,EAAE;MAC7F,OAAO,MAAMmnB,qBAAqB,CAACF,qBAAqB,EAAEl0B,QAAQ,CAAC;IACrE;EACF,CAAC,CAAC,OAAOwH,CAAC,EAAE;IACV;EAAA;EAEF,IAAI,CAACuR,QAAQ,EAAE;IACb,MAAM,IAAI/c,KAAK,gCAAAN,MAAA,CAAgCkP,OAAO,CAAE,CAAC;EAC3D;EACA,OAAO;IACLA,OAAO;IACPmO;EACF,CAAC;AACH;AAEA,MAAM0b,6BAA6B,GAAG,CAAC;;AAEvC;AACA;AACA;AACA;AACA;AACA,eAAeC,qBAAqBA,CAACC,mBAAmB,EAAEC,OAAO,EAAE;EACjE;EACA,MAAM/kB,QAAQ,GAAG,MAAM+kB,OAAO,CAACC,YAAY,CAACF,mBAAmB,EAAE;IAC/DG,gBAAgB,EAAEL;EACpB,CAAC,CAAC;EACF,IAAI,CAAC5kB,QAAQ,IAAI,CAACA,QAAQ,CAACkE,MAAM,EAAE;IACjC,MAAM,IAAI/X,KAAK,+CAAAN,MAAA,CAA+Ci5B,mBAAmB,CAAE,CAAC;EACtF;EACA,MAAMjc,GAAG,GAAGlE,SAAS,CAACrN,KAAK,CAAC0I,QAAQ,CAACkE,MAAM,CAAC2E,GAAG,CAAC;EAChD,MAAMqc,iBAAiB,GAAGllB,QAAQ,CAACmlB,QAAQ,CAACD,iBAAiB;EAC7D,MAAME,OAAO,GAAGrQ,MAAM,CAACC,IAAI,CAACkQ,iBAAiB,CAAC;EAC9C,MAAM7yB,IAAI,GAAG6yB,iBAAiB,CAACE,OAAO,CAAC,CAAC,CAAC,CAAC;EAC1C,MAAMtc,IAAI,GAAGN,kBAAkB,CAAClR,KAAK,CAAC;IACpCmR,KAAK,EAAEzI,QAAQ,CAACkE,MAAM,CAAC+Q,MAAM,CAACxM,KAAK;IACnC7R,MAAM,EAAEoJ,QAAQ,CAACkE,MAAM,CAAC+Q,MAAM,CAACre,MAAM;IACrC8R,OAAO,EAAE1I,QAAQ,CAACkE,MAAM,CAAC+Q,MAAM,CAACoQ,MAAM;IACtC1c,MAAM,EAAE3I,QAAQ,CAACkE,MAAM,CAAC4Q,OAAO,CAACnM;EAClC,CAAC,CAAC;EACF,MAAMI,QAAQ,GAAG,CAAC,GAAG,IAAIkO,GAAG,CAAClC,MAAM,CAACwF,OAAO,CAACva,QAAQ,CAACsN,OAAO,CAAC,CAACxd,GAAG,CAACw1B,IAAI,IAAI;IACxE,IAAI,GAAGjN,GAAG,CAAC,GAAGiN,IAAI;IAClB,OAAOjN,GAAG,CAAC9jB,OAAO;EACpB,CAAC,CAAC,CAAC,CAAC;EACJ,OAAO;IACLlC,IAAI;IACJwW,GAAG;IACH7I,QAAQ;IACR8I,IAAI;IACJC;EACF,CAAC;AACH;AAEA,SAASwc,aAAaA,CAACxN,GAAG,EAAE;EAC1B,IAAI7Q,YAAY,GAAG/X,SAAS,CAACjD,MAAM,GAAG,CAAC,IAAIiD,SAAS,CAAC,CAAC,CAAC,KAAKC,SAAS,GAAGD,SAAS,CAAC,CAAC,CAAC,GAAG,EAAE;EACzF,IAAI,OAAOq2B,OAAO,KAAK,WAAW,EAAE;IAClC,IAAIA,OAAO,CAACC,GAAG,CAAC1N,GAAG,CAAC,EAAE;MACpB,OAAOyN,OAAO,CAACC,GAAG,CAAC1N,GAAG,CAAC;IACzB;EACF;EACA,OAAO7Q,YAAY;AACrB;AAEA,MAAMwe,0BAA0B,GAAG,4CAA4C,CAAC,CAAC;;AAEjF;AACA;AACA;AACA,SAASC,4BAA4BA,CAAA,EAAG;EACtC,OAAOJ,aAAa,CAAC,2BAA2B,EAAEG,0BAA0B,CAAC;AAC/E;;AAEA;AACA;AACA;AACA,MAAMh/B,SAAS,GAAGA,CAAA,KAAM,QAAQ,KAAK,WAAW;;AAEhD;AACA;AACA;AACA,MAAMk/B,MAAM,GAAGA,CAAA,KAAM,CAACl/B,SAAS,CAAC,CAAC;;AAEjC;AACA;AACA;AACA,SAASm/B,MAAMA,CAAC5gC,CAAC,EAAE6kB,EAAE,EAAE;EACrB,IAAI7kB,CAAC,CAACiH,MAAM,KAAK,CAAC,IAAIjH,CAAC,CAACiH,MAAM,KAAK,CAAC,EAAE;IACpC,OAAOjH,CAAC;EACV;EACA,IAAI,CAAC6kB,EAAE,EAAE;IACP,OAAO7kB,CAAC;EACV;EACA,KAAK,IAAIuY,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGvY,CAAC,CAACiH,MAAM,EAAEsR,CAAC,EAAE,EAAE;IACjC,KAAK,IAAIwhB,CAAC,GAAGxhB,CAAC,GAAG,CAAC,EAAEwhB,CAAC,GAAG/5B,CAAC,CAACiH,MAAM,EAAE8yB,CAAC,EAAE,EAAE;MACrC,IAAIlV,EAAE,CAAC7kB,CAAC,CAACuY,CAAC,CAAC,EAAEvY,CAAC,CAAC+5B,CAAC,CAAC,CAAC,EAAE;QAClB/5B,CAAC,CAAC09B,MAAM,CAAC3D,CAAC,EAAE,CAAC,CAAC;MAChB;IACF;EACF;EACA,OAAO/5B,CAAC;AACV;;AAEA;AACA;AACA;AACA,SAAS6gC,QAAQA,CAACtW,IAAI,EAAE;EACtB,MAAMuW,UAAU,GAAGvW,IAAI,CAAC1f,GAAG,CAAC+Y,GAAG,IAAIlE,SAAS,CAACrN,KAAK,CAACuR,GAAG,CAAC,CAAC,CAACmd,IAAI,CAAC,CAAC;EAC/D,MAAMC,YAAY,GAAGJ,MAAM,CAACE,UAAU,EAAE,CAAC9gC,CAAC,EAAEQ,CAAC,KAAK;IAChD,OAAOR,CAAC,CAACoN,IAAI,KAAK5M,CAAC,CAAC4M,IAAI,IAAIpN,CAAC,CAACmd,IAAI,KAAK3c,CAAC,CAAC2c,IAAI,IAAInd,CAAC,CAACwf,MAAM,CAACvY,MAAM,KAAKzG,CAAC,CAACgf,MAAM,CAACvY,MAAM;EACtF,CAAC,CAAC;EACF,MAAMg6B,SAAS,GAAGD,YAAY,CAACzuB,MAAM,CAAC2uB,IAAI,IAAIA,IAAI,CAAC/jB,IAAI,KAAK,aAAa,CAAC;EAC1E,OAAOuC,SAAS,CAACrN,KAAK,CAAC4uB,SAAS,CAAC;AACnC;AAEA,SAASE,eAAeA,CAACjiB,KAAK,EAAEkiB,iBAAiB,EAAE;EACjD,IAAI,CAACliB,KAAK,EAAE;IACV;EACF;EACA,KAAK,MAAMmiB,YAAY,IAAIniB,KAAK,EAAE;IAChC,MAAM+Y,SAAS,GAAG/Y,KAAK,CAACmiB,YAAY,CAAC;IACrC;IACA,IAAIpJ,SAAS,CAAC5F,OAAO,EAAE;MACrB+O,iBAAiB,CAACx0B,IAAI,CAACqrB,SAAS,CAAC;IACnC;IACA;IACAkJ,eAAe,CAAClJ,SAAS,CAACzN,QAAQ,EAAE4W,iBAAiB,CAAC;EACxD;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,sBAAsBA,CAAC1d,GAAG,EAAE;EACnC,MAAM4G,QAAQ,GAAG,EAAE;EACnB2W,eAAe,CAACjP,cAAc,CAACtO,GAAG,CAAC,EAAE4G,QAAQ,CAAC;EAC9C,OAAOA,QAAQ;AACjB;AACA,SAAS+W,oCAAoCA,CAACtd,QAAQ,EAAE;EACtD,MAAMuG,QAAQ,GAAG,EAAE;EACnB2W,eAAe,CAAC3O,0BAA0B,CAACvO,QAAQ,CAAC,EAAEuG,QAAQ,CAAC;EAC/D,OAAOA,QAAQ;AACjB;AACA,SAASgX,wBAAwBA,CAACvd,QAAQ,EAAE;EAC1C,IAAIwd,UAAU,GAAGF,oCAAoC,CAACtd,QAAQ,CAAC;EAC/D;EACA,IAAIwd,UAAU,CAACvpB,IAAI,CAACmY,CAAC,IAAIA,CAAC,CAACjjB,IAAI,KAAK,QAAQ,CAAC,EAAE;IAC7Cq0B,UAAU,GAAGA,UAAU,CAAClvB,MAAM,CAAC8d,CAAC,IAAIA,CAAC,CAACjjB,IAAI,KAAK,OAAO,CAAC;EACzD;EACA,MAAMwW,GAAG,GAAGid,QAAQ,CAACY,UAAU,CAAC52B,GAAG,CAACwlB,CAAC,IAAIwQ,QAAQ,CAACxQ,CAAC,CAAC9F,IAAI,CAAC,CAAC,CAAC;EAC3D,OAAO3G,GAAG;AACZ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS8d,wBAAwBA,CAAC9d,GAAG,EAAE;EACrC,OAAO0d,sBAAsB,CAAC1d,GAAG,CAAC,CAAC/Y,GAAG,CAACwlB,CAAC,KAAK;IAC3C,GAAGA,CAAC;IACJoR,UAAU,EAAEpR,CAAC,CAAC7F;EAChB,CAAC,CAAC,CAAC;AACL;;AAEA;AACA,MAAMmX,aAAa,GAAG,CAAC,CAAC;AACxB,IAAIC,kBAAkB,GAAGz3B,SAAS;AAClC,SAAS03B,WAAWA,CAAC/rB,OAAO,EAAE5I,OAAO,EAAE;EACrC,UAAAtG,MAAA,CAAUkP,OAAO,OAAAlP,MAAA,CAAIsG,OAAO;AAC9B;AACA,SAAS40B,UAAUA,CAAChsB,OAAO,EAAE5I,OAAO,EAAE6N,QAAQ,EAAE;EAC9C4mB,aAAa,CAACE,WAAW,CAAC/rB,OAAO,EAAE5I,OAAO,CAAC,CAAC,GAAG6N,QAAQ;AACzD;AACA,SAASgnB,YAAYA,CAACjsB,OAAO,EAAE5I,OAAO,EAAE;EACtC,OAAOy0B,aAAa,CAACE,WAAW,CAAC/rB,OAAO,EAAE5I,OAAO,CAAC,CAAC;AACrD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe80B,gCAAgCA,CAAClsB,OAAO,EAAE5K,QAAQ,EAAE40B,OAAO,EAAE;EAC1E,IAAI5tB,UAAU,GAAGhI,SAAS,CAACjD,MAAM,GAAG,CAAC,IAAIiD,SAAS,CAAC,CAAC,CAAC,KAAKC,SAAS,GAAGD,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACvF,MAAMgD,OAAO,GAAG,CAAC,MAAMhC,QAAQ,CAAC6H,UAAU,CAAC,CAAC,EAAE7F,OAAO,CAAC,CAAC;EACvD,MAAM+0B,MAAM,GAAGF,YAAY,CAACjsB,OAAO,EAAE5I,OAAO,CAAC;EAC7C,IAAI+0B,MAAM,EAAE;IACV,OAAOA,MAAM;EACf;EACA,IAAIlnB,QAAQ;;EAEZ;EACA,MAAM,CAACmnB,QAAQ,EAAEC,YAAY,CAAC,GAAG,MAAMx1B,OAAO,CAAC+M,GAAG,CAAC,CAAC6lB,6BAA6B,CAACzpB,OAAO,EAAE5K,QAAQ,CAAC,CAACk3B,KAAK,CAAC,MAAMj4B,SAAS,CAAC,EAAEk4B,oCAAoC,CAACvsB,OAAO,EAAE5I,OAAO,EAAEgF,UAAU,CAAC,CAAC3G,IAAI,CAACoR,GAAG,IAAI;IAC1M,IAAI,CAACA,GAAG,EAAE;MACR,OAAOxS,SAAS;IAClB;IACA,OAAO;MACLwS,GAAG;MACHsH,QAAQ,EAAE;IACZ,CAAC;EACH,CAAC,CAAC,CAACme,KAAK,CAAC,MAAMj4B,SAAS,CAAC,CAAC,CAAC;EAC3B,MAAM8Z,QAAQ,GAAGie,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEje,QAAQ;EACnC,MAAMrE,WAAW,GAAG,CAAAuiB,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAExlB,GAAG,MAAIulB,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEvlB,GAAG;EACtD,IAAI,CAACiD,WAAW,IAAI,CAACqE,QAAQ,EAAE;IAC7B,MAAM,IAAI/c,KAAK,6CAAAN,MAAA,CAA6CkP,OAAO,gBAAAlP,MAAA,CAAasG,OAAO,6DAA0D,CAAC;EACpJ;EACA,IAAI;IACF6N,QAAQ,GAAG,MAAM6kB,qBAAqB,CAAChgB,WAAW,EAAEkgB,OAAO,CAAC;EAC9D,CAAC,CAAC,OAAOptB,CAAC,EAAE;IACV;EAAA;EAEF,IAAI,CAACqI,QAAQ,IAAIkJ,QAAQ,EAAE;IACzB,MAAML,GAAG,GAAG4d,wBAAwB,CAACvd,QAAQ,CAAC;IAC9C,IAAIL,GAAG,IAAIA,GAAG,CAAC3c,MAAM,GAAG,CAAC,EAAE;MACzBg4B,OAAO,CAACC,IAAI,mKAAAt4B,MAAA,CAAmKsG,OAAO,OAAAtG,MAAA,CAAIkP,OAAO,CAAE,CAAC;MACpM;MACAiF,QAAQ,GAAG;QACT3N,IAAI,EAAE,qBAAqB;QAC3BwW,GAAG,EAAEA,GAAG;QACR7I,QAAQ,EAAE,CAAC,CAAC;QACZ8I,IAAI,EAAE,CAAC,CAAC;QACRC,QAAQ,EAAE,EAAE;QACZC,YAAY,EAAE;MAChB,CAAC;MACD;MACA,OAAOhJ,QAAQ;IACjB;EACF;EACA,IAAI,CAACA,QAAQ,EAAE;IACb,MAAM,IAAI7T,KAAK,mFAAAN,MAAA,CAAmFsG,OAAO,OAAAtG,MAAA,CAAIkP,OAAO,CAAE,CAAC;EACzH;EACAgsB,UAAU,CAAChsB,OAAO,EAAE5I,OAAO,EAAE6N,QAAQ,CAAC;EACtC,OAAOA,QAAQ;AACjB;AACA,eAAesnB,oCAAoCA,CAACvsB,OAAO,EAAE5I,OAAO,EAAEgF,UAAU,EAAE;EAChF,IAAI,CAAC0vB,kBAAkB,EAAE;IAAA,IAAAU,qBAAA;IACvB,MAAMC,YAAY,GAAGrwB,UAAU,aAAVA,UAAU,gBAAAowB,qBAAA,GAAVpwB,UAAU,CAAEzE,eAAe,cAAA60B,qBAAA,uBAA3BA,qBAAA,CAA6BpqB,IAAI,CAACtX,CAAC,IAAIA,CAAC,CAACsM,OAAO,KAAK,GAAG,CAAC;IAC9E,MAAM+K,KAAK,GAAGsqB,YAAY,IAAI5/B,OAAO;IACrCi/B,kBAAkB,GAAG,IAAIvgC,QAAQ,CAACq/B,4BAA4B,CAAC,CAAC,EAAE59B,aAAa,EAAEmP,gBAAgB,CAACgG,KAAK,EAAE/F,UAAU,CAAC,CAAC;EACvH;EACA,MAAMswB,WAAW,GAAG,MAAMZ,kBAAkB,CAACa,cAAc,CAACv1B,OAAO,EAAE4I,OAAO,CAAC;EAC7E,OAAO0sB,WAAW;AACpB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeE,mBAAmBA,CAAC5sB,OAAO,EAAE5K,QAAQ,EAAE40B,OAAO,EAAE;EAC7D,IAAI;IACF,MAAM/kB,QAAQ,GAAG,MAAMinB,gCAAgC,CAAClsB,OAAO,EAAE5K,QAAQ,EAAE40B,OAAO,CAAC;IACnF,IAAI/kB,QAAQ,IAAIA,QAAQ,CAAC6I,GAAG,EAAE;MAC5B,OAAO7I,QAAQ,CAAC6I,GAAG;IACrB;EACF,CAAC,CAAC,OAAOlR,CAAC,EAAE;IACV;IACA;EAAA;EAEF,OAAOvI,SAAS;AAClB;AAEA,SAASw4B,8BAA8BA,CAAC9d,EAAE,EAAE;EAC1C,eAAe+d,SAASA,CAAA,EAAG;IACzB,MAAMC,EAAE,GAAG,MAAMhe,EAAE,CAAC,GAAG3a,SAAS,CAAC;IACjC,OAAO24B,EAAE,CAACC,OAAO,CAAC,CAAC;EACrB;EACAF,SAAS,CAACG,OAAO,GAAGle,EAAE;EACtB,OAAO+d,SAAS;AAClB;AACA,SAASI,wBAAwBA,CAACne,EAAE,EAAE;EACpC,eAAe+d,SAASA,CAAA,EAAG;IACzB,MAAMC,EAAE,GAAG,MAAMhe,EAAE,CAAC,GAAG3a,SAAS,CAAC;IACjC,OAAO24B,EAAE,CAACC,OAAO,CAAC,CAAC;EACrB;EACAF,SAAS,CAACG,OAAO,GAAGle,EAAE;EACtB,OAAO+d,SAAS;AAClB;AAEA,eAAeK,sBAAsBA,CAAC/3B,QAAQ,EAAE;EAC9C;EACA,IAAIzJ,SAAS,CAAC,CAAC,EAAE;IACf,OAAO,CAAC,CAAC;EACX;;EAEA;EACA,IAAIyJ,QAAQ,CAACg4B,gBAAgB,EAAE;IAC7Bh4B,QAAQ,GAAGA,QAAQ,CAACg4B,gBAAgB;EACtC;EACA,MAAMC,OAAO,GAAG,MAAMC,iBAAiB,CAACl4B,QAAQ,CAAC;EACjD,IAAIi4B,OAAO,CAAC9e,YAAY,IAAI8e,OAAO,CAAC7e,oBAAoB,EAAE;IACxD,OAAO;MACLD,YAAY,EAAE8e,OAAO,CAAC9e,YAAY;MAClCC,oBAAoB,EAAE6e,OAAO,CAAC7e;IAChC,CAAC;EACH,CAAC,MAAM;IACL,OAAO;MACLF,QAAQ,EAAE,MAAMif,WAAW,CAACn4B,QAAQ;IACtC,CAAC;EACH;AACF;AACA,eAAek4B,iBAAiBA,CAACl4B,QAAQ,EAAE;EACzC,IAAImZ,YAAY,GAAG,IAAI;EACvB,IAAIC,oBAAoB,GAAG,IAAI;EAC/B,MAAM,CAAC;IACLpX;EACF,CAAC,EAAEo2B,KAAK,EAAEC,wBAAwB,CAAC,GAAG,MAAM52B,OAAO,CAAC+M,GAAG,CAAC,CAACxO,QAAQ,CAAC6H,UAAU,CAAC,CAAC,EAAE7H,QAAQ,CAACs4B,QAAQ,CAAC,QAAQ,CAAC,EAAEt4B,QAAQ,CAACiB,IAAI,CAAC,0BAA0B,EAAE,EAAE,CAAC,CAACi2B,KAAK,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC;EAC9K,MAAMqB,YAAY,GAAGH,KAAK,IAAIA,KAAK,CAACI,aAAa,GAAGJ,KAAK,CAACI,aAAa,GAAGviC,KAAK,CAACwiC,UAAU,CAAC,KAAK,EAAE,KAAK,CAAC;EACxG,IAAIz2B,OAAO,KAAKtK,MAAM,CAACsK,OAAO,IAAIA,OAAO,KAAKvK,OAAO,CAACuK,OAAO,EAAE;IAC7D;IACAoX,oBAAoB,GAAG,MAAMsf,wBAAwB,CAAC12B,OAAO,CAAC;EAChE,CAAC,MAAM,IAAIq2B,wBAAwB,EAAE;IACnC;IACAjf,oBAAoB,GAAGrjB,SAAS,CAAC6H,IAAI,CAACy6B,wBAAwB,CAAC;EACjE,CAAC,MAAM;IACL;IACA,MAAMJ,OAAO,GAAG,MAAMj4B,QAAQ,CAAC24B,UAAU,CAAC,CAAC;IAC3Cvf,oBAAoB,GAAG6e,OAAO,CAAC7e,oBAAoB;IACnD,IAAI,CAACA,oBAAoB,EAAE;MACzB;MACA,OAAO;QACLD,YAAY,EAAE,IAAI;QAClBC,oBAAoB,EAAE;MACxB,CAAC;IACH;EACF;;EAEA;EACAD,YAAY,GAAGof,YAAY,CAACK,GAAG,CAAC,CAAC,CAAC,CAACC,GAAG,CAACC,uBAAuB,CAAC1f,oBAAoB,CAAC,CAAC;EACrF,OAAO;IACLD,YAAY;IACZC;EACF,CAAC;AACH;AACA,SAAS0f,uBAAuBA,CAACC,wBAAwB,EAAE;EACzD,IAAIC,iBAAiB,GAAGh6B,SAAS,CAACjD,MAAM,GAAG,CAAC,IAAIiD,SAAS,CAAC,CAAC,CAAC,KAAKC,SAAS,GAAGD,SAAS,CAAC,CAAC,CAAC,GAAG,EAAE;EAC9F,MAAMi6B,QAAQ,GAAGF,wBAAwB,CAACG,GAAG,CAAC,GAAG,CAAC,CAACN,GAAG,CAACI,iBAAiB,CAAC,CAAC,CAAC;EAC3E,MAAMG,UAAU,GAAGJ,wBAAwB,CAACF,GAAG,CAACI,QAAQ,CAAC;EACzD,OAAOE,UAAU;AACnB;AACA,eAAehB,WAAWA,CAACn4B,QAAQ,EAAE;EACnC,MAAMkZ,QAAQ,GAAG,MAAMlZ,QAAQ,CAACm4B,WAAW,CAAC,CAAC;EAC7C,MAAMiB,WAAW,GAAGnjC,KAAK,CAACwiC,UAAU,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC,CAAC;EACrD,MAAMQ,QAAQ,GAAG/f,QAAQ,CAACggB,GAAG,CAAC,GAAG,CAAC,CAACN,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;EAC5C,MAAMO,UAAU,GAAGjgB,QAAQ,CAAC2f,GAAG,CAACI,QAAQ,CAAC;EACzC,IAAIE,UAAU,CAACnc,EAAE,CAACoc,WAAW,CAAC,EAAE;IAC9B,OAAOA,WAAW;EACpB;EACA,OAAOD,UAAU;AACnB;;AAEA;AACA;AACA;AACA,SAASE,gBAAgBA,CAACr3B,OAAO,EAAE;EACjC,QAAQA,OAAO;IACb,KAAKyJ,OAAO,CAAChU,OAAO;MAClB,OAAO,0CAA0C;IACnD,KAAKgU,OAAO,CAAC/T,MAAM;MACjB,OAAO,kDAAkD;EAC7D;AACF;AACA,MAAM4hC,qBAAqB,GAAG,eAAerjC,KAAK,CAACwiC,UAAU,CAAC,IAAI,EAAE,MAAM,CAAC;AAC3E,MAAMc,oBAAoB,GAAG,eAAetjC,KAAK,CAACwiC,UAAU,CAAC,GAAG,EAAE,MAAM,CAAC;;AAEzE;AACA;AACA;AACA,SAASe,gBAAgBA,CAACx3B,OAAO,EAAE;EACjC,QAAQA,OAAO;IACb,KAAKyJ,OAAO,CAAChU,OAAO;MAClB,OAAO6hC,qBAAqB;IAC9B,KAAK7tB,OAAO,CAAC/T,MAAM;MACjB,OAAO6hC,oBAAoB;EAC/B;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAeb,wBAAwBA,CAAC12B,OAAO,EAAE;EAC/C,MAAMy3B,aAAa,GAAGJ,gBAAgB,CAACr3B,OAAO,CAAC;EAC/C,IAAI;IACF,MAAMxE,IAAI,GAAG,MAAM,CAAC,MAAMnC,KAAK,CAACo+B,aAAa,CAAC,EAAEC,IAAI,CAAC,CAAC;IACtD;IACA,MAAMC,WAAW,GAAGn8B,IAAI,CAAC,MAAM,CAAC,CAAC,gBAAgB,CAAC;IAClD,IAAIm8B,WAAW,GAAG,CAAC,EAAE;MACnB,MAAMC,QAAQ,GAAGC,UAAU,CAACF,WAAW,CAAC,CAACG,OAAO,CAAC,CAAC,CAAC;MACnD,OAAO7jC,KAAK,CAACwiC,UAAU,CAACmB,QAAQ,EAAE,MAAM,CAAC;IAC3C;EACF,CAAC,CAAC,OAAOpyB,CAAC,EAAE;IACVusB,OAAO,CAACnzB,KAAK,CAAC,qBAAqB,EAAE4G,CAAC,CAAC;EACzC;EACA,OAAOgyB,gBAAgB,CAACx3B,OAAO,CAAC;AAClC;;AAEA;AACA;AACA;AACA;AACA;;AAEA,eAAe+3B,4BAA4BA,CAACC,iBAAiB,EAAEpF,OAAO,EAAE;EACtE,OAAO,MAAMnzB,OAAO,CAAC+M,GAAG,CAACoW,MAAM,CAACwF,OAAO,CAAC4P,iBAAiB,CAACnqB,QAAQ,CAACsN,OAAO,CAAC,CAACxd,GAAG,CAAC,MAAMw1B,IAAI,IAAI;IAC5F,IAAI,CAAC8E,IAAI,EAAEthB,IAAI,CAAC,GAAGwc,IAAI;IACvB,MAAM+E,IAAI,GAAGvhB,IAAI,CAACuhB,IAAI;IACtB,MAAMC,QAAQ,GAAGD,IAAI,GAAGA,IAAI,CAACltB,IAAI,CAACnO,GAAG,IAAIA,GAAG,CAACyK,QAAQ,CAAC,MAAM,CAAC,CAAC,GAAGrK,SAAS;IAC1E,IAAIk7B,QAAQ,EAAE;MACZ,MAAMC,QAAQ,GAAGD,QAAQ,CAAC3c,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;MAC3C;MACA,MAAM6c,OAAO,GAAG,IAAI54B,OAAO,CAAC,CAAC64B,EAAE,EAAEC,GAAG,KAAK54B,UAAU,CAAC,MAAM44B,GAAG,CAAC,SAAS,CAAC,EAAE,IAAI,CAAC,CAAC;MAChF,MAAMjd,MAAM,GAAG,MAAM7b,OAAO,CAAC+4B,IAAI,CAAC,CAAC,CAAC,MAAM5F,OAAO,CAAC6F,QAAQ,WAAA/+B,MAAA,CAAW0+B,QAAQ,CAAE,CAAC,EAAEM,IAAI,CAAC,CAAC,EAAEL,OAAO,CAAC,CAAC;MACnG,OAAO;QACLxc,QAAQ,EAAEoc,IAAI;QACd3c;MACF,CAAC;IACH,CAAC,MAAM;MACL,OAAO;QACLO,QAAQ,EAAEoc,IAAI;QACd3c,MAAM,EAAE3E,IAAI,CAAC4F,OAAO,IAAI;MAC1B,CAAC;IACH;EACF,CAAC,CAAC,CAAC;AACL;AAEA,SAASoc,gBAAgBA,CAACjiB,GAAG,EAAE;EAC7B,MAAMkiB,cAAc,GAAGrT,gBAAgB,CAAC/S,SAAS,CAACrN,KAAK,CAACuR,GAAG,CAAC,EAAE,cAAc,CAAC;EAC7E,MAAMmiB,YAAY,GAAGtT,gBAAgB,CAAC/S,SAAS,CAACrN,KAAK,CAACuR,GAAG,CAAC,EAAE,iBAAiB,CAAC;EAC9E,OAAOmiB,YAAY,IAAID,cAAc;AACvC;AAEA,MAAME,gBAAgB,GAAG,CAAC,SAAS,EAAE,QAAQ,EAAE,WAAW,EAAE,6BAA6B,EAAE,eAAe,EAAE,mBAAmB,EAAE,2BAA2B,EAAE,2BAA2B,EAAE,oBAAoB,EAAE,aAAa,EAAE,YAAY,CAAC;AAC7O,MAAMC,0BAA0B,GAAG,CAAC,CAAC,SAAS,EAAE,WAAW,CAAC,EAAE,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;;AAEnF;AACA,MAAMC,oBAAoB,GAAG;EAC3B,CAAC,IAAI,GAAG;IACN94B,IAAI,EAAE,gBAAgB;IACtBgX,QAAQ,EAAE;EACZ,CAAC;EACD,CAAC,KAAK,GAAG;IACPhX,IAAI,EAAE,kBAAkB;IACxBgX,QAAQ,EAAE,KAAM,GAAG,EAAE,IAAI;EAC3B,CAAC;EACD,CAAC,UAAU,GAAG;IACZhX,IAAI,EAAE,uBAAuB;IAC7BgX,QAAQ,EAAE;EACZ,CAAC;EACD,CAAC,GAAG,GAAG;IACLhX,IAAI,EAAE,eAAe;IACrBgX,QAAQ,EAAE,IAAI,GAAG,EAAE,IAAI;EACzB,CAAC;EACD,CAAC,GAAG,GAAG;IACLhX,IAAI,EAAE,eAAe;IACrBgX,QAAQ,EAAE,IAAI,GAAG,EAAE,IAAI;EACzB,CAAC;EACD,CAAC,IAAI,GAAG;IACNhX,IAAI,EAAE,OAAO;IACbgX,QAAQ,EAAE,IAAI,GAAG,EAAE,IAAI;EACzB,CAAC;EACD,CAAC,IAAI,GAAG;IACNhX,IAAI,EAAE,eAAe;IACrBgX,QAAQ,EAAE,IAAI,GAAG,EAAE,IAAI;EACzB,CAAC;EACD,CAAC,GAAG,GAAG;IACLhX,IAAI,EAAE,gBAAgB;IACtBgX,QAAQ,EAAE,IAAI,GAAG,EAAE,IAAI;EACzB,CAAC;EACD,CAAC,GAAG,GAAG;IACLhX,IAAI,EAAE,kBAAkB;IACxBgX,QAAQ,EAAE,MAAO,GAAG,EAAE,IAAI;EAC5B;AACF,CAAC;AACD;;AAEA,SAAS+hB,UAAUA,CAACr6B,KAAK,EAAE;EACzB,MAAMs6B,UAAU,GAAGJ,gBAAgB,CAACnd,SAAS,CAACwd,SAAS,IAAIv6B,KAAK,CAAC0I,QAAQ,CAAC6xB,SAAS,CAAC,CAAC;EACrF,MAAMC,mBAAmB,GAAGL,0BAA0B,CAACpd,SAAS,CAAC0d,GAAG,IAAI;IACtE,IAAIC,UAAU,GAAG,IAAI;IACrBD,GAAG,CAAC76B,OAAO,CAAC26B,SAAS,IAAI;MACvBG,UAAU,KAAVA,UAAU,GAAK16B,KAAK,CAAC0I,QAAQ,CAAC6xB,SAAS,CAAC;IAC1C,CAAC,CAAC;IACF,OAAOG,UAAU;EACnB,CAAC,CAAC;EACF,OAAOJ,UAAU,KAAK,CAAC,CAAC,IAAIE,mBAAmB,KAAK,CAAC,CAAC;AACxD;AAEA,MAAMG,wBAAwB,GAAG,0KAA0K;AAC3M,MAAMC,SAAS,GAAG;EAChB3lB,CAAC,EAAE,EAAE;EACL4lB,CAAC,EAAE,oEAAoE;EACvEC,CAAC,EAAE;AACL,CAAC;AACD,MAAMC,cAAc,GAAG,4CAA4C,CAAC,CAAC;;AAErE,MAAMC,sBAAsB,GAAG,OAAS;AACxC,MAAMC,iBAAiB,GAAG,0+HAA0+H;AACpgI,MAAMC,YAAY,GAAG,CAAC;EACpBxnB,MAAM,EAAE,CAAC;IACPF,UAAU,EAAE,CAAC;MACXkN,YAAY,EAAE,SAAS;MACvBpf,IAAI,EAAE,kBAAkB;MACxB+P,IAAI,EAAE;IACR,CAAC,EAAE;MACDqP,YAAY,EAAE,SAAS;MACvBpf,IAAI,EAAE,IAAI;MACV+P,IAAI,EAAE;IACR,CAAC,EAAE;MACDqP,YAAY,EAAE,OAAO;MACrBpf,IAAI,EAAE,MAAM;MACZ+P,IAAI,EAAE;IACR,CAAC,CAAC;IACFqP,YAAY,EAAE,gCAAgC;IAC9Cpf,IAAI,EAAE,cAAc;IACpB+P,IAAI,EAAE;EACR,CAAC,CAAC;EACFkC,eAAe,EAAE,SAAS;EAC1BlC,IAAI,EAAE;AACR,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe8pB,kBAAkBA,CAACnxB,OAAO,EAAE5K,QAAQ,EAAE;EACnD,MAAMc,IAAI,GAAG,MAAMd,QAAQ,CAACs0B,OAAO,CAAC1pB,OAAO,CAAC;EAC5C,OAAO9J,IAAI,KAAK,IAAI,IAAIA,IAAI,KAAK,KAAK;AACxC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAek7B,gBAAgBA,CAACh8B,QAAQ,EAAE;EACxC,IAAI;IACF;;IAEA;IACA;IACA,MAAMA,QAAQ,CAACi8B,eAAe,CAAC,kVAAkV,CAAC;EACpX,CAAC,CAAC,OAAOz0B,CAAC,EAAE;IACV,MAAM00B,QAAQ,GAAG10B,CAAC,CAAC1J,QAAQ,CAAC,CAAC,CAACiK,WAAW,CAAC,CAAC;IAC3C,MAAMo0B,SAAS,GAAGh8B,IAAI,CAACC,SAAS,CAACoH,CAAC,CAAC,CAACO,WAAW,CAAC,CAAC;IACjD,IAAIkzB,UAAU,CAACiB,QAAQ,CAAC,IAAIjB,UAAU,CAACkB,SAAS,CAAC,EAAE;MACjD,OAAO,IAAI;IACb;IACA,OAAO,KAAK;EACd;EACA,OAAO,KAAK;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,aAAaA,CAACC,WAAW,EAAE5W,SAAS,EAAE;EAC7C;EACA,MAAM9c,MAAM,GAAG1S,KAAK,CAACqmC,QAAQ,CAACrmC,KAAK,CAACsmC,SAAS,CAACtmC,KAAK,CAACumC,oBAAoB,CAACH,WAAW,CAAC,CAAC,CAAC;;EAEvF;EACA,MAAMjyB,MAAM,GAAGnU,KAAK,CAACwmC,cAAc,CAAC9zB,MAAM,EAAE8c,SAAS,CAAC;;EAEtD;EACA;EACA,MAAMiX,kBAAkB,GAAGzmC,KAAK,CAACumC,oBAAoB,CAACH,WAAW,EAAE5W,SAAS,CAAC;EAC7E,OAAO;IACLrb,MAAM,EAAEA,MAAM;IACdiyB,WAAW,EAAEK;EACf,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,+BAA+BA,CAAC36B,OAAO,EAAEkX,QAAQ,EAAE;EAC1D,MAAMuM,SAAS,GAAGxvB,KAAK,CAAC2mC,aAAa,CAACpB,SAAS,CAAC;EAChD,MAAMqB,qBAAqB,GAAGT,aAAa,CAAC;IAC1CljB,QAAQ,EAAEA,QAAQ,GAAGA,QAAQ,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC;IAC7CD,QAAQ,EAAE,MAAM;IAChBI,KAAK,EAAE,CAAC;IACR7b,IAAI,EAAE+9B,wBAAwB;IAC9Bv5B,OAAO,EAAEA;EACX,CAAC,EAAEyjB,SAAS,CAAC;EACb,MAAMqX,qBAAqB,GAAG7mC,KAAK,CAAC8mC,kBAAkB,CAAC;IACrDn/B,IAAI,EAAEi/B,qBAAqB,CAACzyB,MAAM;IAClCiP,KAAK,EAAE;EACT,CAAC,CAAC;EACF,OAAO;IACL,GAAGwjB,qBAAqB;IACxBG,UAAU,EAAEF;EACd,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeG,wBAAwBA,CAACj9B,QAAQ,EAAE;EAChD,MAAMk9B,mBAAmB,GAAG,MAAMnB,kBAAkB,CAACJ,cAAc,EAAE37B,QAAQ,CAAC;EAC9E,IAAIk9B,mBAAmB,EAAE;IACvB,OAAOvB,cAAc;EACvB;EACA,MAAMwB,aAAa,GAAG,MAAMnB,gBAAgB,CAACh8B,QAAQ,CAAC;EACtD,MAAMo9B,SAAS,GAAG,CAAC,MAAMp9B,QAAQ,CAAC6H,UAAU,CAAC,CAAC,EAAE7F,OAAO;EACvD,MAAMA,OAAO,GAAGm7B,aAAa,GAAGC,SAAS,GAAG,CAAC;EAC7C,MAAMC,cAAc,GAAGrC,oBAAoB,CAACoC,SAAS,CAAC,GAAGT,+BAA+B,CAAC36B,OAAO,EAAEg5B,oBAAoB,CAACoC,SAAS,CAAC,CAAClkB,QAAQ,CAAC,GAAGyjB,+BAA+B,CAAC36B,OAAO,CAAC;EACtL,OAAOq7B,cAAc,CAACL,UAAU;AAClC;AAEA,MAAMjkB,QAAQ,GAAG,o2NAAo2N;AAEr3N,MAAMukB,yBAAyB,GAAG,4CAA4C,CAAC,CAAC;;AAEhF;AACA;AACA;AACA,SAASC,2BAA2BA,CAAA,EAAG;EACrC,OAAOnI,aAAa,CAAC,0BAA0B,EAAEkI,yBAAyB,CAAC;AAC7E;AAEA,MAAME,uBAAuB,GAAG,eAAelrB,oBAAoB,CAACmB,KAAK,CAACb,mBAAmB,CAAC,CAACa,KAAK,CAAC1F,YAAY,CAAC,CAAC0F,KAAK,CAACH,kBAAkB,CAAC;AAC5I,MAAMmqB,wBAAwB,GAAG,eAAe9qB,0BAA0B,CAACc,KAAK,CAACb,mBAAmB,CAAC,CAACa,KAAK,CAAC1F,YAAY,CAAC,CAAC0F,KAAK,CAACH,kBAAkB,CAAC;AACnJ,MAAMoqB,wBAAwB,GAAG,eAAeF,uBAAuB,CAAC/pB,KAAK,CAACR,uBAAuB,CAAC,CAACQ,KAAK,CAACV,uBAAuB,CAAC,CAACU,KAAK,CAACL,4BAA4B,CAAC;AACzK,MAAMuqB,wBAAwB,GAAG;EAC/B7pB,MAAM,EAAE4pB,wBAAwB;EAChC3pB,MAAM,EAAE0pB,wBAAwB;EAChCzpB,KAAK,EAAEwpB;AACT,CAAC;AAED,MAAMI,wBAAwB,GAAG,eAAetrB,oBAAoB,CAACmB,KAAK,CAACb,mBAAmB,CAAC,CAACa,KAAK,CAAC1F,YAAY,CAAC,CAAC0F,KAAK,CAACH,kBAAkB,CAAC;AAC7I,MAAMuqB,yBAAyB,GAAG,eAAelrB,0BAA0B,CAACc,KAAK,CAACb,mBAAmB,CAAC,CAACa,KAAK,CAAC1F,YAAY,CAAC,CAAC0F,KAAK,CAACH,kBAAkB,CAAC;AACpJ,MAAMwqB,yBAAyB,GAAG,eAAeF,wBAAwB,CAACnqB,KAAK,CAACR,uBAAuB,CAAC,CAACQ,KAAK,CAACV,uBAAuB,CAAC,CAACU,KAAK,CAACL,4BAA4B,CAAC;AAC3K,MAAM2qB,yBAAyB,GAAG;EAChCjqB,MAAM,EAAEgqB,yBAAyB;EACjC/pB,MAAM,EAAE8pB,yBAAyB;EACjC7pB,KAAK,EAAE4pB;AACT,CAAC;AAED,MAAMI,wBAAwB,GAAG1rB,oBAAoB;AACrD,MAAM2rB,yBAAyB,GAAGtrB,0BAA0B;AAC5D,MAAMurB,yBAAyB,GAAG,eAAeF,wBAAwB,CAACvqB,KAAK,CAACR,uBAAuB,CAAC,CAACQ,KAAK,CAACL,4BAA4B,CAAC;AAC5I,MAAM+qB,yBAAyB,GAAG;EAChCrqB,MAAM,EAAEoqB,yBAAyB;EACjCnqB,MAAM,EAAEkqB,yBAAyB;EACjCjqB,KAAK,EAAEgqB;AACT,CAAC;AAED,MAAMI,iBAAiB,GAAG,eAAe9rB,oBAAoB,CAACmB,KAAK,CAACb,mBAAmB,CAAC,CAACa,KAAK,CAACH,kBAAkB,CAAC;AAClH,MAAM+qB,kBAAkB,GAAG,eAAe1rB,0BAA0B,CAACc,KAAK,CAACb,mBAAmB,CAAC,CAACa,KAAK,CAACH,kBAAkB,CAAC;AACzH,MAAMgrB,kBAAkB,GAAG,eAAeF,iBAAiB,CAAC3qB,KAAK,CAACR,uBAAuB,CAAC,CAACQ,KAAK,CAACL,4BAA4B,CAAC;AAC9H,MAAMmrB,kBAAkB,GAAG;EACzBzqB,MAAM,EAAEwqB,kBAAkB;EAC1BvqB,MAAM,EAAEsqB,kBAAkB;EAC1BrqB,KAAK,EAAEoqB;AACT,CAAC;AAED,MAAMI,yBAAyB,GAAG,eAAe,CAAC,MAAM1oC,CAAC,CAAC+L,MAAM,CAAC;EAC/D+I,OAAO,EAAEW,kBAAkB;EAC3BkzB,SAAS,EAAE1pC,iBAAiB,CAACioB,EAAE,CAAC,CAAC,EAAE,+BAA+B;AACpE,CAAC,CAAC,EAAE,CAAC;AACL,MAAM0hB,yBAAyB,GAAG,eAAeF,yBAAyB,CAAC3wB,MAAM,CAAC;EAChFjD,OAAO,EAAEW,kBAAkB;EAC3BkzB,SAAS,EAAE1pC;AACb,CAAC,CAAC;AACF,MAAM4pC,mBAAmB,GAAG,eAAe,CAAC,MAAMrsB,oBAAoB,CAACzE,MAAM,CAAC;EAC5E+wB,UAAU,EAAE9oC,CAAC,CAACiM,KAAK,CAACy8B,yBAAyB,CAAC,CAACh8B,OAAO,CAAC,EAAE,CAAC,CAACq8B,WAAW,CAAC,CAACC,GAAG,EAAEC,OAAO,KAAK;IACvF,MAAMC,UAAU,GAAG,CAAC,CAAC;IACrB,IAAIC,WAAW,GAAG,CAAC;IACnB,KAAK,IAAIv+B,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGo+B,GAAG,CAAC/iC,MAAM,EAAE2E,KAAK,EAAE,EAAE;MAC/C,MAAMw+B,KAAK,GAAGJ,GAAG,CAACp+B,KAAK,CAAC;MACxB,IAAIs+B,UAAU,CAACE,KAAK,CAACt0B,OAAO,CAAC,EAAE;QAC7Bm0B,OAAO,CAACI,QAAQ,CAAC;UACfr+B,IAAI,EAAEhL,CAAC,CAACspC,YAAY,CAAC7hC,MAAM;UAC3BsD,OAAO,sBAAsB;UAC7Bo5B,IAAI,EAAE,CAACv5B,KAAK;QACd,CAAC,CAAC;MACJ;MACAs+B,UAAU,CAACE,KAAK,CAACt0B,OAAO,CAAC,GAAG,IAAI;MAChCq0B,WAAW,IAAIC,KAAK,CAACT,SAAS;MAC9B,IAAIQ,WAAW,GAAG,KAAK,EAAE;QACvBF,OAAO,CAACI,QAAQ,CAAC;UACfr+B,IAAI,EAAEhL,CAAC,CAACspC,YAAY,CAAC7hC,MAAM;UAC3BsD,OAAO,qCAAqC;UAC5Co5B,IAAI,EAAE,CAACv5B,KAAK;QACd,CAAC,CAAC;MACJ;IACF;IACA,IAAIu+B,WAAW,KAAK,KAAK,EAAE;MACzBF,OAAO,CAACI,QAAQ,CAAC;QACfr+B,IAAI,EAAEhL,CAAC,CAACspC,YAAY,CAAC7hC,MAAM;QAC3BsD,OAAO,qEAAAnF,MAAA,CAAqEujC,WAAW,GAAG,GAAG,MAAG;QAChGhF,IAAI,EAAE;MACR,CAAC,CAAC;IACJ;EACF,CAAC;AACH,CAAC,CAAC,EAAE,CAAC;AACL,MAAMoF,oBAAoB,GAAG,eAAe,CAAC,MAAM1sB,0BAA0B,CAAC9E,MAAM,CAAC;EACnF+wB,UAAU,EAAE9oC,CAAC,CAACiM,KAAK,CAAC28B,yBAAyB;AAC/C,CAAC,CAAC,EAAE,CAAC;AACL,MAAMY,oBAAoB,GAAG,eAAeX,mBAAmB,CAAClrB,KAAK,CAACkrB,mBAAmB,CAAC,CAAClrB,KAAK,CAACL,4BAA4B,CAAC;AAC9H,MAAMmsB,oBAAoB,GAAG;EAC3BzrB,MAAM,EAAEwrB,oBAAoB;EAC5BvrB,MAAM,EAAEsrB,oBAAoB;EAC5BrrB,KAAK,EAAE2qB;AACT,CAAC;AAED,MAAMa,uBAAuB,GAAG,eAAeltB,oBAAoB,CAACmB,KAAK,CAACH,kBAAkB,CAAC;AAC7F,MAAMmsB,wBAAwB,GAAG,eAAe9sB,0BAA0B,CAACc,KAAK,CAACH,kBAAkB,CAAC;AACpG,MAAMosB,wBAAwB,GAAG,eAAeF,uBAAuB,CAAC/rB,KAAK,CAACR,uBAAuB,CAAC,CAACQ,KAAK,CAACV,uBAAuB,CAAC,CAACU,KAAK,CAACL,4BAA4B,CAAC;AACzK,MAAMusB,wBAAwB,GAAG;EAC/B7rB,MAAM,EAAE4rB,wBAAwB;EAChC3rB,MAAM,EAAE0rB,wBAAwB;EAChCzrB,KAAK,EAAEwrB;AACT,CAAC;AAED,MAAMI,wBAAwB,GAAG,eAAettB,oBAAoB,CAACmB,KAAK,CAACb,mBAAmB,CAAC,CAACa,KAAK,CAACH,kBAAkB,CAAC;AACzH,MAAMusB,yBAAyB,GAAG,eAAeltB,0BAA0B,CAACc,KAAK,CAACb,mBAAmB,CAAC,CAACa,KAAK,CAACH,kBAAkB,CAAC;AAChI,MAAMwsB,yBAAyB,GAAG,eAAeF,wBAAwB,CAACnsB,KAAK,CAACR,uBAAuB,CAAC,CAACQ,KAAK,CAACV,uBAAuB,CAAC,CAACU,KAAK,CAACL,4BAA4B,CAAC;AAC3K,MAAM2sB,yBAAyB,GAAG;EAChCjsB,MAAM,EAAEgsB,yBAAyB;EACjC/rB,MAAM,EAAE8rB,yBAAyB;EACjC7rB,KAAK,EAAE4rB;AACT,CAAC;AAED,MAAMI,yBAAyB,GAAG,eAAe1tB,oBAAoB,CAACmB,KAAK,CAACb,mBAAmB,CAAC,CAACa,KAAK,CAACH,kBAAkB,CAAC;AAC1H,MAAM2sB,0BAA0B,GAAG,eAAettB,0BAA0B,CAACc,KAAK,CAACb,mBAAmB,CAAC,CAACa,KAAK,CAACH,kBAAkB,CAAC;AACjI,MAAM4sB,0BAA0B,GAAG,eAAeF,yBAAyB,CAACvsB,KAAK,CAACR,uBAAuB,CAAC,CAACQ,KAAK,CAACV,uBAAuB,CAAC,CAACU,KAAK,CAACL,4BAA4B,CAAC;AAC7K,MAAM+sB,0BAA0B,GAAG;EACjCrsB,MAAM,EAAEosB,0BAA0B;EAClCnsB,MAAM,EAAEksB,0BAA0B;EAClCjsB,KAAK,EAAEgsB;AACT,CAAC;AAED,MAAMI,uBAAuB,GAAG,eAAe,CAAC,MAAMtqC,CAAC,CAAC+L,MAAM,CAAC;EAC7Dw+B,sBAAsB,EAAEvqC,CAAC,CAACuH,MAAM,CAAC,CAAC,CAAC2F,GAAG,CAAC,CAAC,CAAC,CAACR,OAAO,CAAC,CAAC,CAAC;EACpD89B,uBAAuB,EAAExqC,CAAC,CAACuH,MAAM,CAAC,CAAC,CAAC2F,GAAG,CAAC,CAAC,CAAC,CAACR,OAAO,CAAC,CAAC,CAAC;EACrD+9B,oBAAoB,EAAEh1B,kBAAkB;EACxCi1B,sBAAsB,EAAErrC,aAAa,CAACqN,OAAO,CAAC,CAAC,CAAC;EAChDi+B,wBAAwB,EAAE5iC,kBAAkB,CAAC2E,OAAO,CAAC,CAAC;AACxD,CAAC,CAAC,EAAE,CAAC;AACL,MAAMk+B,uBAAuB,GAAG,eAAeN,uBAAuB,CAACvyB,MAAM,CAAC;EAC5E4yB,wBAAwB,EAAEvjC;AAC5B,CAAC,CAAC;AACF,MAAMyjC,iBAAiB,GAAG,eAAeruB,oBAAoB,CAACmB,KAAK,CAAC2sB,uBAAuB,CAAC;AAC5F,MAAMQ,kBAAkB,GAAG,eAAejuB,0BAA0B,CAACc,KAAK,CAACitB,uBAAuB,CAAC;AACnG,MAAMG,kBAAkB,GAAG,eAAeF,iBAAiB,CAACltB,KAAK,CAACL,4BAA4B,CAAC;AAC/F,MAAM0tB,kBAAkB,GAAG;EACzBhtB,MAAM,EAAE+sB,kBAAkB;EAC1B9sB,MAAM,EAAE6sB,kBAAkB;EAC1B5sB,KAAK,EAAE2sB;AACT,CAAC;AAED,eAAeI,cAAcA,CAACC,YAAY,EAAE;EAC1C,OAAOz1B,kBAAkB,CAACkD,UAAU,CAACuyB,YAAY,CAAC;AACpD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeC,4BAA4BA,CAACC,kBAAkB,EAAEtM,OAAO,EAAE;EACvE,MAAMuM,IAAI,GAAG,MAAM,CAAC,MAAMvM,OAAO,CAAC6F,QAAQ,CAACyG,kBAAkB,CAAC,EAAExG,IAAI,CAAC,CAAC;EACtE,OAAOrjB,+BAA+B,CAAClQ,KAAK,CAAChH,IAAI,CAACgH,KAAK,CAACg6B,IAAI,CAAC,CAAC;AAChE;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAeC,yBAAyBA,CAACF,kBAAkB,EAAEtM,OAAO,EAAE;EACpE,OAAOngB,iBAAiB,CAACtN,KAAK,CAAChH,IAAI,CAACgH,KAAK,CAAC,MAAM,CAAC,MAAMytB,OAAO,CAAC6F,QAAQ,CAACyG,kBAAkB,CAAC,EAAExG,IAAI,CAAC,CAAC,CAAC,CAAC;AACvG;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe2G,sBAAsBA,CAACH,kBAAkB,EAAEtM,OAAO,EAAE;EACjE,MAAM0M,OAAO,GAAG,MAAMF,yBAAyB,CAACF,kBAAkB,EAAEtM,OAAO,CAAC;EAC5E,MAAM2M,cAAc,GAAG,MAAM,CAAC,MAAM3M,OAAO,CAAC6F,QAAQ,CAAC6G,OAAO,CAAC3sB,WAAW,CAAC,EAAE+lB,IAAI,CAAC,CAAC;EACjF,MAAM8G,UAAU,GAAG,MAAM9M,qBAAqB,CAAC4M,OAAO,CAAC5sB,WAAW,EAAEkgB,OAAO,CAAC;EAC5E,OAAO9b,8BAA8B,CAAC3R,KAAK,CAAC;IAC1C,GAAGm6B,OAAO;IACV,GAAGE,UAAU;IACbzoB,QAAQ,EAAEwoB;EACZ,CAAC,CAAC;AACJ;AAEA,MAAME,mBAAmB,GAAG,CAAC,CAAC;AAC9B,eAAeC,2BAA2BA,CAACR,kBAAkB,EAAEtM,OAAO,EAAE;EACtE,IAAI6M,mBAAmB,CAACP,kBAAkB,CAAC,EAAE;IAC3C,OAAOO,mBAAmB,CAACP,kBAAkB,CAAC;EAChD;EACA,MAAMS,gBAAgB,GAAG,MAAMN,sBAAsB,CAACH,kBAAkB,EAAEtM,OAAO,CAAC;EAClF,IAAIgN,gBAAgB;EACpB,IAAI;IACFA,gBAAgB,GAAG,MAAMX,4BAA4B,CAACC,kBAAkB,EAAEtM,OAAO,CAAC;EACpF,CAAC,CAAC,OAAOptB,CAAC,EAAE;IACV;EAAA;EAEF,MAAMhK,IAAI,GAAG;IACXmkC,gBAAgB;IAChBC;EACF,CAAC;EACDH,mBAAmB,CAACP,kBAAkB,CAAC,GAAG1jC,IAAI;EAC9C,OAAOA,IAAI;AACb;AAEA,MAAMyP,WAAW,GAAG,4CAA4C;AAEhE,MAAM40B,kBAAkB,GAAG,4CAA4C;AACvE,MAAMC,iBAAiB,GAAG,4CAA4C;;AAEtE;AACA;AACA;AACA,MAAMC,6BAA6B,GAAG,4CAA4C;;AAElF;AACA;AACA;AACA,MAAMC,kBAAkB,GAAG;EACzB,CAACv2B,OAAO,CAACM,OAAO,GAAG;IACjBk2B,qBAAqB,EAAEF,6BAA6B;IACpDG,wBAAwB,EAAE,4CAA4C;IACtEC,iBAAiB,EAAE,4CAA4C;IAC/DC,SAAS,EAAEN,iBAAiB;IAC5BO,UAAU,EAAER,kBAAkB;IAC9BS,cAAc,EAAEr1B;EAClB,CAAC;EACD,CAACxB,OAAO,CAACQ,MAAM,GAAG;IAChBg2B,qBAAqB,EAAE,4CAA4C;IACnEC,wBAAwB,EAAE,4CAA4C;IACtEC,iBAAiB,EAAE,4CAA4C;IAC/DC,SAAS,EAAEN,iBAAiB;IAC5BO,UAAU,EAAER,kBAAkB;IAC9BS,cAAc,EAAE;EAClB,CAAC;EACD,CAAC72B,OAAO,CAAChU,OAAO,GAAG;IACjBwqC,qBAAqB,EAAEF,6BAA6B;IACpDG,wBAAwB,EAAE,4CAA4C;IACtEC,iBAAiB,EAAE,4CAA4C;IAC/DC,SAAS,EAAEN,iBAAiB;IAC5BO,UAAU,EAAER,kBAAkB;IAC9BS,cAAc,EAAE;EAClB,CAAC;EACD,CAAC72B,OAAO,CAAC/T,MAAM,GAAG;IAChBuqC,qBAAqB,EAAEF,6BAA6B;IACpDG,wBAAwB,EAAE,4CAA4C;IACtEC,iBAAiB,EAAE,4CAA4C;IAC/DC,SAAS,EAAEN,iBAAiB;IAC5BO,UAAU,EAAER,kBAAkB;IAC9BS,cAAc,EAAE;EAClB,CAAC;EACD,CAAC72B,OAAO,CAACS,SAAS,GAAG;IACnB+1B,qBAAqB,EAAEF,6BAA6B;IACpDG,wBAAwB,EAAE,4CAA4C;IACtEC,iBAAiB,EAAE,4CAA4C;IAC/DC,SAAS,EAAEN,iBAAiB;IAC5BO,UAAU,EAAER,kBAAkB;IAC9BS,cAAc,EAAEr1B;EAClB,CAAC;EACD,CAACxB,OAAO,CAACU,oBAAoB,GAAG;IAC9B81B,qBAAqB,EAAEF,6BAA6B;IACpDG,wBAAwB,EAAE,4CAA4C;IACtEC,iBAAiB,EAAE,4CAA4C;IAC/DC,SAAS,EAAEN,iBAAiB;IAC5BO,UAAU,EAAER,kBAAkB;IAC9BS,cAAc,EAAE;EAClB,CAAC;EACD,CAAC72B,OAAO,CAACW,MAAM,GAAG;IAChB61B,qBAAqB,EAAEF,6BAA6B;IACpDG,wBAAwB,EAAE,4CAA4C;IACtEC,iBAAiB,EAAE,4CAA4C;IAC/DC,SAAS,EAAE,4CAA4C;IACvDC,UAAU,EAAER,kBAAkB;IAC9BS,cAAc,EAAEr1B;EAClB,CAAC;EACD,CAACxB,OAAO,CAACY,aAAa,GAAG;IACvB41B,qBAAqB,EAAEF,6BAA6B;IACpDG,wBAAwB,EAAE,4CAA4C;IACtEC,iBAAiB,EAAE,4CAA4C;IAC/DC,SAAS,EAAEN,iBAAiB;IAC5BO,UAAU,EAAER,kBAAkB;IAC9BS,cAAc,EAAE;EAClB,CAAC;EACD,CAAC72B,OAAO,CAACa,QAAQ,GAAG;IAClB21B,qBAAqB,EAAE,4CAA4C;IACnEC,wBAAwB,EAAE,4CAA4C;IACtEC,iBAAiB,EAAE,4CAA4C;IAC/DC,SAAS,EAAE,4CAA4C;IACvDC,UAAU,EAAER,kBAAkB;IAC9BS,cAAc,EAAEr1B;EAClB,CAAC;EACD,CAACxB,OAAO,CAACc,cAAc,GAAG;IACxB01B,qBAAqB,EAAE,4CAA4C;IACnEC,wBAAwB,EAAE,4CAA4C;IACtEC,iBAAiB,EAAEl1B,WAAW;IAC9Bm1B,SAAS,EAAE,4CAA4C;IACvDC,UAAU,EAAER,kBAAkB;IAC9BS,cAAc,EAAEr1B;EAClB,CAAC;EACD,CAACxB,OAAO,CAACe,QAAQ,GAAG;IAClBy1B,qBAAqB,EAAE,4CAA4C;IACnEC,wBAAwB,EAAE,4CAA4C;IACtEC,iBAAiB,EAAE,4CAA4C;IAC/DC,SAAS,EAAE,4CAA4C;IACvDC,UAAU,EAAER,kBAAkB;IAC9BS,cAAc,EAAEr1B;EAClB,CAAC;EACD,CAACxB,OAAO,CAACgB,cAAc,GAAG;IACxBw1B,qBAAqB,EAAE,4CAA4C;IACnEC,wBAAwB,EAAE,4CAA4C;IACtEC,iBAAiB,EAAEl1B,WAAW;IAC9Bm1B,SAAS,EAAE,4CAA4C;IACvDC,UAAU,EAAER,kBAAkB;IAC9BS,cAAc,EAAEr1B;EAClB,CAAC;EACD,CAACxB,OAAO,CAACiB,wBAAwB,GAAG;IAClCu1B,qBAAqB,EAAE,4CAA4C;IACnEC,wBAAwB,EAAE,4CAA4C;IACtEC,iBAAiB,EAAE,4CAA4C;IAC/DG,cAAc,EAAEr1B,WAAW;IAC3Bm1B,SAAS,EAAE,4CAA4C;IACvDC,UAAU,EAAER;EACd,CAAC;EACD,CAACp2B,OAAO,CAACkB,wBAAwB,GAAG;IAClCs1B,qBAAqB,EAAE,4CAA4C;IACnEC,wBAAwB,EAAE,4CAA4C;IACtEC,iBAAiB,EAAE,4CAA4C;IAC/DG,cAAc,EAAEr1B,WAAW;IAC3Bm1B,SAAS,EAAE,4CAA4C;IACvDC,UAAU,EAAER;EACd,CAAC;EACD,CAACp2B,OAAO,CAACmB,OAAO,GAAG;IACjBq1B,qBAAqB,EAAEh1B,WAAW;IAClCi1B,wBAAwB,EAAEj1B,WAAW;IACrCk1B,iBAAiB,EAAEl1B,WAAW;IAC9Bm1B,SAAS,EAAEn1B,WAAW;IACtBo1B,UAAU,EAAEp1B,WAAW;IACvBq1B,cAAc,EAAEr1B;EAClB,CAAC;EACD,CAACxB,OAAO,CAACoB,SAAS,GAAG;IACnBo1B,qBAAqB,EAAEh1B,WAAW;IAClCi1B,wBAAwB,EAAEj1B,WAAW;IACrCk1B,iBAAiB,EAAEl1B,WAAW;IAC9Bm1B,SAAS,EAAEn1B,WAAW;IACtBo1B,UAAU,EAAEp1B,WAAW;IACvBq1B,cAAc,EAAEr1B;EAClB;AACF,CAAC;;AAED;AACA;AACA;AACA,SAASs1B,2BAA2BA,CAACvgC,OAAO,EAAE6a,YAAY,EAAE;EAAA,IAAA2lB,qBAAA;EAC1D;EACA,IAAIxgC,OAAO,KAAKyJ,OAAO,CAACmB,OAAO,IAAI5K,OAAO,KAAKyJ,OAAO,CAACoB,SAAS,EAAE;IAChE,IAAIgQ,YAAY,KAAK,WAAW,EAAE;MAChC,OAAOuY,aAAa,CAAC,gBAAgB,CAAC;IACxC,CAAC,MAAM,IAAIvY,YAAY,KAAK,YAAY,EAAE;MACxC,OAAOuY,aAAa,CAAC,iBAAiB,CAAC;IACzC,CAAC,MAAM;MACL,OAAOnoB,WAAW;IACpB;EACF;EACA;EACA,QAAAu1B,qBAAA,GAAOR,kBAAkB,CAAChgC,OAAO,CAAC,cAAAwgC,qBAAA,uBAA3BA,qBAAA,CAA8B3lB,YAAY,CAAC;AACpD;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM4lB,mBAAmB,GAAG,eAAexsC,KAAK,CAACqmC,QAAQ,CAAC,YAAY,CAAC;;AAEvE;AACA;AACA;AACA,MAAMoG,oBAAoB,GAAG,eAAezsC,KAAK,CAACqmC,QAAQ,CAAC,YAAY,CAAC;;AAExE;AACA;AACA;AACA,IAAIqG,SAAS,GAAG,aAAa,UAAUA,SAAS,EAAE;EAChDA,SAAS,CAAC,aAAa,CAAC,GAAG,aAAa;EACxCA,SAAS,CAAC,WAAW,CAAC,GAAG,WAAW;EACpC,OAAOA,SAAS;AAClB,CAAC,CAAC,CAAC,CAAC,CAAC;AAEL,MAAMC,iBAAiB,GAAG,4CAA4C;AACtE,eAAeC,iCAAiCA,CAACjsB,gBAAgB,EAAEiG,YAAY,EAAE;EAC/E,IAAI/gB,OAAO,GAAGkD,SAAS,CAACjD,MAAM,GAAG,CAAC,IAAIiD,SAAS,CAAC,CAAC,CAAC,KAAKC,SAAS,GAAGD,SAAS,CAAC,CAAC,CAAC,GAAG,QAAQ;EAC1F,IAAI41B,OAAO,GAAG51B,SAAS,CAACjD,MAAM,GAAG,CAAC,GAAGiD,SAAS,CAAC,CAAC,CAAC,GAAGC,SAAS;EAC7D,IAAIwD,QAAQ,GAAGzD,SAAS,CAACjD,MAAM,GAAG,CAAC,GAAGiD,SAAS,CAAC,CAAC,CAAC,GAAGC,SAAS;EAC9D,IAAI0D,SAAS,GAAG3D,SAAS,CAACjD,MAAM,GAAG,CAAC,GAAGiD,SAAS,CAAC,CAAC,CAAC,GAAGC,SAAS;EAC/D,MAAMo4B,YAAY,GAAGzrB,kBAAkB,CAAC,CAAC,CAACoB,IAAI,CAACtX,CAAC,IAAIA,CAAC,CAACsM,OAAO,KAAK,GAAG,CAAC;EACtE,MAAM+K,KAAK,GAAGsqB,YAAY,IAAI5/B,OAAO;EACrC,MAAM2f,SAAS,GAAG,MAAM2pB,cAAc,CAACnqB,gBAAgB,CAAC;EACxD,MAAMksB,QAAQ,GAAG,IAAI3sC,QAAQ,CAAConC,2BAA2B,CAAC,CAAC,EAAEjmC,oBAAoB,EAAEyP,gBAAgB,CAACgG,KAAK,EAAE;IACzGtK,QAAQ;IACRE;EACF,CAAC,CAAC,CAAC;EACH,IAAIogC,iBAAiB;EACrB,IAAI,CAACjnC,OAAO,IAAIA,OAAO,KAAK,QAAQ,EAAE;IACpC,MAAMknC,KAAK,GAAG,MAAMF,QAAQ,CAACG,oBAAoB,CAAC7rB,SAAS,EAAEyF,YAAY,CAAC;IAC1EkmB,iBAAiB,GAAG5qB,uBAAuB,CAAChR,KAAK,CAAC;MAChD/F,EAAE,EAAE4hC,KAAK,CAACE,UAAU;MACpB9qB,SAAS,EAAE4qB,KAAK,CAACG,gBAAgB;MACjCzuB,WAAW,EAAEsuB,KAAK,CAAC9B;IACrB,CAAC,CAAC;EACJ,CAAC,MAAM;IACL,MAAMkC,WAAW,GAAG,CAAC,MAAMN,QAAQ,CAACO,4BAA4B,CAACjsB,SAAS,EAAEyF,YAAY,CAAC,EAAEld,GAAG,CAACjK,CAAC,IAAI;MAClG,OAAOyiB,uBAAuB,CAAChR,KAAK,CAAC;QACnC/F,EAAE,EAAE1L,CAAC,CAACwtC,UAAU;QAChB9qB,SAAS,EAAE1iB,CAAC,CAACytC,gBAAgB;QAC7BzuB,WAAW,EAAEhf,CAAC,CAACwrC;MACjB,CAAC,CAAC;IACJ,CAAC,CAAC;;IAEF;IACA,MAAMoC,eAAe,GAAG,MAAM7hC,OAAO,CAAC+M,GAAG,CAAC40B,WAAW,CAACzjC,GAAG,CAAC,MAAMjK,CAAC,IAAI;MACnE,OAAO;QACLwM,IAAI,EAAExM,CAAC,CAAC0L,EAAE;QACVmiC,kBAAkB,EAAE7tC,CAAC,CAAC0iB,SAAS;QAC/B4hB,iBAAiB,EAAE,MAAM0H,2BAA2B,CAAChsC,CAAC,CAACgf,WAAW,EAAEkgB,OAAO;MAC7E,CAAC;IACH,CAAC,CAAC,CAAC;IACH;IACA,MAAM4O,YAAY,GAAGF,eAAe,CAACt2B,IAAI,CAAC6C,QAAQ;MAAA,IAAA4zB,qBAAA;MAAA,OAAI,EAAAA,qBAAA,GAAA5zB,QAAQ,CAACmqB,iBAAiB,CAAC4H,gBAAgB,cAAA6B,qBAAA,uBAA3CA,qBAAA,CAA6C3nC,OAAO,MAAKA,OAAO;IAAA,EAAC;IACvHzF,SAAS,CAACmtC,YAAY,EAAE,4BAA4B,CAAC;IACrD;IACAT,iBAAiB,GAAGK,WAAW,CAACp2B,IAAI,CAACtX,CAAC,IAAIA,CAAC,CAAC0iB,SAAS,KAAKorB,YAAY,CAACD,kBAAkB,CAAC;EAC5F;EACA,IAAI,CAACR,iBAAiB,EAAE;IACtB,MAAM,IAAI/mC,KAAK,oCAAAN,MAAA,CAAoCmhB,YAAY,sBAAAnhB,MAAA,CAAmBknC,iBAAiB,MAAG,CAAC;EACzG;EACA,OAAOG,iBAAiB;AAC1B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASW,WAAWA,CAAC3qB,QAAQ,EAAE;EAC7B,MAAM4qB,gBAAgB,GAAG5qB,QAAQ,CAACsL,UAAU,CAAC,IAAI,CAAC,GAAGtL,QAAQ,QAAArd,MAAA,CAAQqd,QAAQ,CAAE;EAC/E,MAAM6qB,YAAY,GAAG3tC,KAAK,CAACmL,EAAE,CAACuiC,gBAAgB,CAAC;EAC/C,MAAME,IAAI,SAAAnoC,MAAA,CAASkoC,YAAY,CAAE;EACjC,MAAME,QAAQ,GAAG7tC,KAAK,CAACmL,EAAE,CAACyiC,IAAI,CAAC;EAC/B,OAAOC,QAAQ;AACjB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,uBAAuBA,CAAChrB,QAAQ,EAAEkB,WAAW,EAAE4pB,IAAI,EAAE;EAC5D,MAAMF,gBAAgB,GAAG5qB,QAAQ,CAACsL,UAAU,CAAC,IAAI,CAAC,GAAGtL,QAAQ,QAAArd,MAAA,CAAQqd,QAAQ,CAAE;EAC/E,MAAM+qB,QAAQ,GAAGD,IAAI,GAAG5tC,KAAK,CAACmL,EAAE,CAACyiC,IAAI,CAAC,GAAGH,WAAW,CAACC,gBAAgB,CAAC;EACtE,MAAMK,oBAAoB,GAAG/tC,KAAK,CAACguC,YAAY,CAAC,CAAC,SAAS,EAAE,OAAO,EAAE,OAAO,CAAC,EAAE,CAACH,QAAQ,EAAEH,gBAAgB,EAAE1pB,WAAW,CAAC,CAAC;EACzH,OAAO+pB,oBAAoB;AAC7B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,wBAAwBA,CAACnrB,QAAQ,EAAEkB,WAAW,EAAE6iB,qBAAqB,EAAE+G,IAAI,EAAE;EACpF,MAAMF,gBAAgB,GAAG5qB,QAAQ,CAACsL,UAAU,CAAC,IAAI,CAAC,GAAGtL,QAAQ,QAAArd,MAAA,CAAQqd,QAAQ,CAAE;EAC/E,MAAM+qB,QAAQ,GAAGD,IAAI,GAAG5tC,KAAK,CAACmL,EAAE,CAACyiC,IAAI,CAAC,GAAGH,WAAW,CAACC,gBAAgB,CAAC;;EAEtE;EACA,MAAMQ,YAAY,GAAGluC,KAAK,CAACguC,YAAY,CAAC,CAAC,OAAO,EAAE,OAAO,CAAC,EAAE,CAACN,gBAAgB,EAAE1pB,WAAW,CAAC,CAAC;;EAE5F;EACA,MAAMmqB,gBAAgB,GAAGnuC,KAAK,CAACguC,YAAY,CAAC,CAAC,QAAQ,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,EAAE,CAAC,MAAM,EAAEnH,qBAAqB,EAAEgH,QAAQ,EAAE7tC,KAAK,CAACouC,iBAAiB,CAAC,CAAC,OAAO,CAAC,EAAE,CAACF,YAAY,CAAC,CAAC,CAAC,CAAC;;EAEvL;EACA,MAAMG,gBAAgB,GAAGruC,KAAK,CAACouC,iBAAiB,CAAC,CAAC,OAAO,CAAC,EAAE,CAACD,gBAAgB,CAAC,CAAC;;EAE/E;EACA,YAAA1oC,MAAA,CAAY4oC,gBAAgB,CAACz7B,KAAK,CAAC,EAAE,CAAC;AACxC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS07B,+BAA+BA,CAAC7rB,GAAG,EAAE;EAC5C,MAAM8rB,SAAS,GAAGhwB,SAAS,CAACrN,KAAK,CAACuR,GAAG,IAAI,EAAE,CAAC;EAC5C,KAAK,MAAM1E,KAAK,IAAIwwB,SAAS,EAAE;IAC7B,IAAIxwB,KAAK,CAAC/B,IAAI,KAAK,aAAa,EAAE;MAChC,OAAO+B,KAAK,CAACM,MAAM,IAAI,EAAE;IAC3B;EACF;EACA,OAAO,EAAE;AACX;AAEA,MAAMmwB,MAAM,GAAG;EACbC,iBAAiB,EAAE,CAAC;AACtB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,SAASC,2BAA2BA,CAAC3iC,OAAO,EAAE;EAC5C,OAAO4iC,yBAAyB,CAAC5iC,OAAO,CAAC,IAAI9L,SAAS,CAAC+W,WAAW;AACpE;AACA,MAAM23B,yBAAyB,GAAG;EAChC,CAACn5B,OAAO,CAACM,OAAO,GAAG,4CAA4C;EAC/D,CAACN,OAAO,CAACQ,MAAM,GAAG,4CAA4C;EAC9D,CAACR,OAAO,CAACiB,wBAAwB,GAAG,4CAA4C;EAChF,CAACjB,OAAO,CAAChU,OAAO,GAAG,4CAA4C;EAC/D,CAACgU,OAAO,CAAC/T,MAAM,GAAG,4CAA4C;EAC9D,CAAC+T,OAAO,CAACS,SAAS,GAAG,4CAA4C;EACjE,CAACT,OAAO,CAACe,QAAQ,GAAG,4CAA4C;EAChE,CAACf,OAAO,CAACa,QAAQ,GAAG;AACtB,CAAC;AAED,eAAeu4B,qBAAqBA,CAAC7gB,YAAY,EAAEhkB,QAAQ,EAAE40B,OAAO,EAAEkQ,cAAc,EAAEC,eAAe,EAAEtiC,QAAQ,EAAEE,SAAS,EAAE;EAC1H,MAAMka,YAAY,GAAGkoB,eAAe,IAAIA,eAAe,CAACloB,YAAY;EACpE,MAAM/gB,OAAO,GAAGipC,eAAe,IAAIA,eAAe,CAACjpC,OAAO;EAC1D,IAAI8a,gBAAgB,GAAGmuB,eAAe,IAAIA,eAAe,CAACnuB,gBAAgB;EAC1E,IAAI/G,QAAQ,GAAGk1B,eAAe,IAAIA,eAAe,CAACl1B,QAAQ;EAC1DxZ,SAAS,CAACwmB,YAAY,IAAIhN,QAAQ,EAAE,mCAAmC,CAAC;EACxE,IAAIgN,YAAY,IAAI4nB,MAAM,CAACC,iBAAiB,CAAC7nB,YAAY,CAAC,EAAE;IAC1D,OAAO4nB,MAAM,CAACC,iBAAiB,CAAC7nB,YAAY,CAAC;EAC/C;;EAEA;EACA,IAAIA,YAAY,KAAK,OAAO,EAAE;IAC5B,MAAMjS,OAAO,GAAGs5B,wBAAwB,CAACnrB,QAAQ,EAAE,EAAE,EAAE+rB,cAAc,CAAC;IACtE,MAAME,gBAAgB,GAAG,MAAMjJ,kBAAkB,CAACnxB,OAAO,EAAE5K,QAAQ,CAAC;IACpE,IAAIgkC,oBAAoB,GAAG,EAAE;IAC7B,IAAI,CAACgB,gBAAgB,EAAE;MACrBhB,oBAAoB,GAAGD,uBAAuB,CAAChrB,QAAQ,EAAE,EAAE,CAAC;IAC9D;IACA,OAAO;MACL7W,IAAI,EAAE2a,YAAY;MAClB5K,IAAI,EAAE+R,YAAY;MAClBqY,WAAW,EAAE;QACX4I,gBAAgB,EAAEr6B,OAAO;QACzBiG,EAAE,EAAEi0B,cAAc;QAClBtnC,IAAI,EAAEwmC;MACR;IACF,CAAC;EACH;EACA,IAAI,CAACn0B,QAAQ,EAAE;IACbxZ,SAAS,CAACwmB,YAAY,EAAE,uBAAuB,CAAC;IAChD,IAAI,CAACjG,gBAAgB,EAAE;MACrBA,gBAAgB,GAAGgsB,iBAAiB;IACtC;IACA,MAAMG,iBAAiB,GAAG,MAAMF,iCAAiC,CAACjsB,gBAAgB,EAAEiG,YAAY,EAAE/gB,OAAO,EAAE84B,OAAO,EAAEnyB,QAAQ,EAAEE,SAAS,CAAC;IACxIkN,QAAQ,GAAG,CAAC,MAAM6xB,2BAA2B,CAACqB,iBAAiB,CAACruB,WAAW,EAAEkgB,OAAO,CAAC,EAAE+M,gBAAgB;EACzG;EACA,MAAM1nB,WAAW,GAAG,MAAMirB,wCAAwC,CAACr1B,QAAQ,EAAE7P,QAAQ,EAAE40B,OAAO,EAAEkQ,cAAc,EAAEC,eAAe,aAAfA,eAAe,uBAAfA,eAAe,CAAEjuB,iBAAiB,EAAErU,QAAQ,EAAEE,SAAS,CAAC;EACxK,MAAMiI,OAAO,GAAGs5B,wBAAwB,CAACr0B,QAAQ,CAACkJ,QAAQ,EAAEkB,WAAW,EAAE6qB,cAAc,CAAC;EACxF,MAAME,gBAAgB,GAAG,MAAMjJ,kBAAkB,CAACnxB,OAAO,EAAE5K,QAAQ,CAAC;EACpE,IAAIgkC,oBAAoB,GAAG,EAAE;EAC7B,IAAI,CAACgB,gBAAgB,EAAE;IACrBhB,oBAAoB,GAAGD,uBAAuB,CAACl0B,QAAQ,CAACkJ,QAAQ,EAAEkB,WAAW,CAAC;EAChF;EACA,OAAO;IACL/X,IAAI,EAAE2a,YAAY;IAClB5K,IAAI,EAAE+R,YAAY;IAClBqY,WAAW,EAAE;MACX4I,gBAAgB,EAAEr6B,OAAO;MACzBiG,EAAE,EAAEi0B,cAAc;MAClBtnC,IAAI,EAAEwmC;IACR,CAAC;IACD/pB;EACF,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeirB,wCAAwCA,CAACvD,gBAAgB,EAAE3hC,QAAQ,EAAE40B,OAAO,EAAEkQ,cAAc,EAAEK,mBAAmB,EAAE1iC,QAAQ,EAAEE,SAAS,EAAE;EACrJ,MAAMmU,iBAAiB,GAAGytB,+BAA+B,CAAC5C,gBAAgB,CAACjpB,GAAG,CAAC;EAC/E,MAAM0sB,qBAAqB,GAAGtuB,iBAAiB,CAACnX,GAAG,CAAC0lC,CAAC,IAAI;IACvD,IAAIA,CAAC,CAACpzB,IAAI,KAAK,SAAS,EAAE;MACxB,OAAOhc,KAAK,CAACqvC,SAAS,CAAC1nC,IAAI,CAACynC,CAAC,CAAC;IAChC,CAAC,MAAM;MACL,OAAOA,CAAC,CAACpzB,IAAI;IACf;EACF,CAAC,CAAC;EACF,MAAMszB,sBAAsB,GAAG,MAAM9jC,OAAO,CAAC+M,GAAG,CAACsI,iBAAiB,CAACnX,GAAG,CAAC,MAAM0lC,CAAC,IAAI;IAChF,IAAIF,mBAAmB,IAAIA,mBAAmB,CAACE,CAAC,CAACnjC,IAAI,CAAC,EAAE;MACtD,IAAIijC,mBAAmB,CAACE,CAAC,CAACnjC,IAAI,CAAC,CAAC+P,IAAI,EAAE;QACpC5b,SAAS,CAAC8uC,mBAAmB,CAACE,CAAC,CAACnjC,IAAI,CAAC,CAAC+P,IAAI,KAAKozB,CAAC,CAACpzB,IAAI,mBAAAvW,MAAA,CAAmBypC,mBAAmB,CAACE,CAAC,CAACnjC,IAAI,CAAC,CAAC+P,IAAI,qCAAAvW,MAAA,CAAkC2pC,CAAC,CAACpzB,IAAI,cAAW,CAAC;MAC9J;MACA,OAAOkzB,mBAAmB,CAACE,CAAC,CAACnjC,IAAI,CAAC,CAACjE,KAAK;IAC1C;IACA,IAAIonC,CAAC,CAACnjC,IAAI,IAAImjC,CAAC,CAACnjC,IAAI,CAACoH,QAAQ,CAAC,oBAAoB,CAAC,EAAE;MACnD,MAAMtH,OAAO,GAAG,CAAC,MAAMhC,QAAQ,CAAC6H,UAAU,CAAC,CAAC,EAAE7F,OAAO;MACrD,IAAIwjC,yBAAyB,GAAG14B,uBAAuB,CAAC9K,OAAO,CAAC,CAACgK,OAAO,CAACpB,OAAO;MAChF,IAAI46B,yBAAyB,KAAKtvC,SAAS,CAAC+W,WAAW,EAAE;QACvD,MAAMowB,cAAc,GAAG,MAAMwH,qBAAqB,CAAC,OAAO,EAAE7kC,QAAQ,EAAE40B,OAAO,EAAEkQ,cAAc,EAAE;UAC7FjoB,YAAY,EAAE;QAChB,CAAC,EAAEpa,QAAQ,EAAEE,SAAS,CAAC;QACvB,IAAI,CAAC8hC,MAAM,CAACC,iBAAiB,CAAC,OAAO,CAAC,EAAE;UACtCD,MAAM,CAACC,iBAAiB,CAAC,OAAO,CAAC,GAAGrH,cAAc;QACpD;QACAmI,yBAAyB,GAAGnI,cAAc,CAAChB,WAAW,CAAC4I,gBAAgB;MACzE;MACA,OAAOO,yBAAyB;IAClC,CAAC,MAAM,IAAIH,CAAC,CAACnjC,IAAI,IAAImjC,CAAC,CAACnjC,IAAI,CAACoH,QAAQ,CAAC,kBAAkB,CAAC,EAAE;MACxD,IAAIq4B,gBAAgB,CAACz/B,IAAI,KAAK,MAAM,EAAE;QACpC;QACA,MAAMm7B,cAAc,GAAG,MAAMwH,qBAAqB,CAAC,OAAO,EAAE7kC,QAAQ,EAAE40B,OAAO,EAAEkQ,cAAc,EAAE;UAC7FjoB,YAAY,EAAE;QAChB,CAAC,EAAEpa,QAAQ,EAAEE,SAAS,CAAC;QACvB,IAAI,CAAC8hC,MAAM,CAACC,iBAAiB,CAAC,kBAAkB,CAAC,EAAE;UACjDD,MAAM,CAACC,iBAAiB,CAAC,kBAAkB,CAAC,GAAGrH,cAAc;QAC/D;QACA,OAAOA,cAAc,CAAChB,WAAW,CAAC4I,gBAAgB;MACpD;MACA,MAAM5H,cAAc,GAAG,MAAMwH,qBAAqB,CAAC,OAAO,EAAE7kC,QAAQ,EAAE40B,OAAO,EAAEkQ,cAAc,EAAE;QAC7FjoB,YAAY,EAAE;MAChB,CAAC,EAAEpa,QAAQ,EAAEE,SAAS,CAAC;MACvB,IAAI,CAAC8hC,MAAM,CAACC,iBAAiB,CAAC,WAAW,CAAC,EAAE;QAC1CD,MAAM,CAACC,iBAAiB,CAAC,WAAW,CAAC,GAAGrH,cAAc;MACxD;MACA,OAAOA,cAAc,CAAChB,WAAW,CAAC4I,gBAAgB;IACpD,CAAC,MAAM,IAAII,CAAC,CAACnjC,IAAI,IAAImjC,CAAC,CAACnjC,IAAI,CAACoH,QAAQ,CAAC,sBAAsB,CAAC,EAAE;MAC5D,MAAMtH,OAAO,GAAG,CAAC,MAAMhC,QAAQ,CAAC6H,UAAU,CAAC,CAAC,EAAE7F,OAAO;MACrD,OAAO2iC,2BAA2B,CAAC3iC,OAAO,CAAC;IAC7C,CAAC,MAAM;MACL,MAAM,IAAIhG,KAAK,CAAC,qCAAqC,CAAC;IACxD;EACF,CAAC,CAAC,CAAC;EACH,MAAMie,WAAW,GAAGhkB,KAAK,CAACwvC,eAAe,CAAC/rB,MAAM,CAAC0rB,qBAAqB,EAAEG,sBAAsB,CAAC;EAC/F,OAAOtrB,WAAW;AACpB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeyrB,0BAA0BA,CAAC1lC,QAAQ,EAAE40B,OAAO,EAAEkQ,cAAc,EAAEriC,QAAQ,EAAEE,SAAS,EAAE;EAChG,IAAI,CAACmiC,cAAc,IAAIA,cAAc,KAAK,EAAE,EAAE;IAC5CA,cAAc,GAAG,MAAM7H,wBAAwB,CAACj9B,QAAQ,CAAC;EAC3D;EACA,OAAO,CAAC,MAAM6kC,qBAAqB,CAAC,OAAO,EAAE7kC,QAAQ,EAAE40B,OAAO,EAAEkQ,cAAc,EAAE;IAC9EjoB,YAAY,EAAE;EAChB,CAAC,EAAEpa,QAAQ,EAAEE,SAAS,CAAC,EAAE05B,WAAW,CAAC4I,gBAAgB;AACvD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeU,uBAAuBA,CAAC3lC,QAAQ,EAAE40B,OAAO,EAAEkQ,cAAc,EAAEriC,QAAQ,EAAEE,SAAS,EAAE;EAC7F,IAAI,CAACmiC,cAAc,IAAIA,cAAc,KAAK,EAAE,EAAE;IAC5CA,cAAc,GAAG,MAAM7H,wBAAwB,CAACj9B,QAAQ,CAAC;EAC3D;EACA,OAAO,CAAC,MAAM6kC,qBAAqB,CAAC,OAAO,EAAE7kC,QAAQ,EAAE40B,OAAO,EAAEkQ,cAAc,EAAE;IAC9EjoB,YAAY,EAAE;EAChB,CAAC,EAAEpa,QAAQ,EAAEE,SAAS,CAAC,EAAE05B,WAAW,CAAC4I,gBAAgB;AACvD;;AAEA;AACA;AACA;AACA,MAAMW,cAAc,GAAG,CAAC;EACtB1jC,IAAI,EAAE,MAAM;EACZ+P,IAAI,EAAE;AACR,CAAC,EAAE;EACD/P,IAAI,EAAE,IAAI;EACV+P,IAAI,EAAE;AACR,CAAC,EAAE;EACD/P,IAAI,EAAE,OAAO;EACb+P,IAAI,EAAE;AACR,CAAC,EAAE;EACD/P,IAAI,EAAE,KAAK;EACX+P,IAAI,EAAE;AACR,CAAC,EAAE;EACD/P,IAAI,EAAE,OAAO;EACb+P,IAAI,EAAE;AACR,CAAC,EAAE;EACD/P,IAAI,EAAE,MAAM;EACZ+P,IAAI,EAAE;AACR,CAAC,CAAC;AACF,MAAM4zB,wBAAwB,GAAG,CAAC;EAChC3jC,IAAI,EAAE,MAAM;EACZ+P,IAAI,EAAE;AACR,CAAC,EAAE;EACD/P,IAAI,EAAE,IAAI;EACV+P,IAAI,EAAE;AACR,CAAC,EAAE;EACD/P,IAAI,EAAE,OAAO;EACb+P,IAAI,EAAE;AACR,CAAC,EAAE;EACD/P,IAAI,EAAE,KAAK;EACX+P,IAAI,EAAE;AACR,CAAC,EAAE;EACD/P,IAAI,EAAE,OAAO;EACb+P,IAAI,EAAE;AACR,CAAC,EAAE;EACD/P,IAAI,EAAE,MAAM;EACZ+P,IAAI,EAAE;AACR,CAAC,EAAE;EACD/P,IAAI,EAAE,SAAS;EACf+P,IAAI,EAAE;AACR,CAAC,CAAC;;AAEF;AACA;AACA;AACA,MAAM6zB,oBAAoB,GAAG,CAAC;EAC5BxxB,MAAM,EAAE,CAAC;IACPgN,YAAY,EAAE,SAAS;IACvBpf,IAAI,EAAE,MAAM;IACZ+P,IAAI,EAAE;EACR,CAAC,EAAE;IACDqP,YAAY,EAAE,SAAS;IACvBpf,IAAI,EAAE,SAAS;IACf+P,IAAI,EAAE;EACR,CAAC,CAAC;EACF/P,IAAI,EAAE,UAAU;EAChBqS,OAAO,EAAE,CAAC;IACR+M,YAAY,EAAE,SAAS;IACvBpf,IAAI,EAAE,EAAE;IACR+P,IAAI,EAAE;EACR,CAAC,CAAC;EACFkC,eAAe,EAAE,MAAM;EACvBlC,IAAI,EAAE;AACR,CAAC,CAAC;AACF,MAAM8zB,OAAO,GAAG,CAAC,CAAC;AAClB,MAAMC,oBAAoB,GAAG,CAAC,CAAC;;AAE/B;AACA;AACA;AACA,eAAeC,oBAAoBA,CAACC,SAAS,EAAEC,iBAAiB,EAAEC,aAAa,EAAE;EAC/E;EACA,MAAMx7B,OAAO,GAAGw7B,aAAa,CAAC3pC,IAAI,CAAC,GAAG,CAAC;EACvC,MAAM2b,SAAS,GAAG4tB,oBAAoB,CAACp7B,OAAO,CAAC;EAC/C;EACA;EACA,MAAMy7B,UAAU,GAAGv7B,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGqN,SAAS,IAAI,IAAI;EACjD,IAAI,EAAExN,OAAO,IAAIm7B,OAAO,CAAC,IAAIM,UAAU,EAAE;IACvC,MAAMC,WAAW,GAAG,MAAMJ,SAAS,CAAClhB,SAAS,CAACmhB,iBAAiB,CAAC,CAAC,GAAGC,aAAa,CAAC;IAClF,IAAI3nB,KAAK,CAAC2F,OAAO,CAACkiB,WAAW,CAAC,IAAIA,WAAW,CAACvqC,MAAM,GAAG,CAAC,EAAE;MACxDgqC,OAAO,CAACn7B,OAAO,CAAC,GAAG7U,SAAS,CAAC6H,IAAI,CAAC0oC,WAAW,CAAC,CAAC,CAAC,CAAC;IACnD,CAAC,MAAM;MACLP,OAAO,CAACn7B,OAAO,CAAC,GAAG7U,SAAS,CAAC6H,IAAI,CAAC0oC,WAAW,CAAC;IAChD;IACAN,oBAAoB,CAACp7B,OAAO,CAAC,GAAGE,IAAI,CAACC,GAAG,CAAC,CAAC;EAC5C;EACA,MAAMsO,KAAK,GAAG0sB,OAAO,CAACn7B,OAAO,CAAC;EAC9Bm7B,OAAO,CAACn7B,OAAO,CAAC,GAAG7U,SAAS,CAAC6H,IAAI,CAACmoC,OAAO,CAACn7B,OAAO,CAAC,CAAC,CAACiuB,GAAG,CAAC,CAAC,CAAC;EAC1D,OAAOxf,KAAK;AACd;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAektB,qBAAqBA,CAACC,WAAW,EAAEC,MAAM,EAAEC,KAAK,EAAE7lC,OAAO,EAAE;EAAA,IAAA8lC,OAAA,EAAAC,kBAAA;EACxE;EACA,IAAIx8B,MAAM,GAAGo8B,WAAW;EACxB,IAAIA,WAAW,CAACK,cAAc,EAAE;IAC9Bz8B,MAAM,GAAGo8B,WAAW,CAACK,cAAc;EACrC;EACA,MAAM7mC,QAAQ,IAAA2mC,OAAA,GAAGv8B,MAAM,cAAAu8B,OAAA,uBAANA,OAAA,CAAQ3mC,QAAQ;EACjC,IAAI,CAACA,QAAQ,EAAE;IACb,MAAM,IAAIhE,KAAK,CAAC,kBAAkB,CAAC;EACrC;EACA,MAAM2E,OAAO,GAAG1K,KAAK,CAAC6wC,iBAAiB,CAACC,UAAU,CAACN,MAAM,EAAEC,KAAK,EAAE7lC,OAAO,CAAC;EAC1E,IAAI4kB,SAAS,GAAG,EAAE;EAClB,MAAMuhB,aAAa,GAAG,CAAC,MAAM58B,MAAM,CAAC68B,UAAU,CAAC,CAAC,EAAEl/B,WAAW,CAAC,CAAC;;EAE/D;EACA,IAAI/H,QAAQ,aAARA,QAAQ,gBAAA4mC,kBAAA,GAAR5mC,QAAQ,CAAEA,QAAQ,cAAA4mC,kBAAA,eAAlBA,kBAAA,CAAoBM,eAAe,EAAE;IACvCzhB,SAAS,GAAG,MAAMzlB,QAAQ,CAACiB,IAAI,CAAC,mBAAmB,EAAE,CAAC,CAAC,MAAMmJ,MAAM,CAAC68B,UAAU,CAAC,CAAC,EAAEl/B,WAAW,CAAC,CAAC,EAAE5H,IAAI,CAACC,SAAS,CAACO,OAAO,CAAC,CAAC,CAAC;EAC5H,CAAC,MAAM;IACL,IAAI;MACF8kB,SAAS,GAAG,MAAMrb,MAAM,CAAC+8B,cAAc,CAACV,MAAM,EAAEC,KAAK,EAAE7lC,OAAO,CAAC;IACjE,CAAC,CAAC,OAAOke,GAAG,EAAE;MAAA,IAAAqoB,YAAA;MACZ,IAAIroB,GAAG,aAAHA,GAAG,gBAAAqoB,YAAA,GAAHroB,GAAG,CAAEle,OAAO,cAAAumC,YAAA,eAAZA,YAAA,CAAc99B,QAAQ,CAAC,sBAAsB,CAAC,EAAE;QAClDmc,SAAS,GAAG,MAAMzlB,QAAQ,CAACiB,IAAI,CAAC,mBAAmB,EAAE,CAAC+lC,aAAa,EAAE7mC,IAAI,CAACC,SAAS,CAACO,OAAO,CAAC,CAAC,CAAC;MAChG,CAAC,MAAM;QACL;QACA,IAAI;UACF,MAAMX,QAAQ,CAACiB,IAAI,CAAC,sBAAsB,EAAE,CAAC+lC,aAAa,EAAE7mC,IAAI,CAACC,SAAS,CAACO,OAAO,CAAC,CAAC,CAAC;QACvF,CAAC,CAAC,OAAO0mC,QAAQ,EAAE;UACjB,MAAMA,QAAQ;QAChB;MACF;IACF;EACF;;EAEA;EACA,OAAO;IACL1mC,OAAO;IACP8kB,SAAS,EAAExvB,KAAK,CAAC2mC,aAAa,CAAC3mC,KAAK,CAACqxC,cAAc,CAAC7hB,SAAS,CAAC;EAChE,CAAC;AACH;AAEA,MAAM8hB,QAAQ,GAAG,CAAC;EAChBjzB,MAAM,EAAE,EAAE;EACVpS,IAAI,EAAE,MAAM;EACZqS,OAAO,EAAE,CAAC;IACR+M,YAAY,EAAE,QAAQ;IACtBpf,IAAI,EAAE,EAAE;IACR+P,IAAI,EAAE;EACR,CAAC,CAAC;EACFkC,eAAe,EAAE,MAAM;EACvBlC,IAAI,EAAE;AACR,CAAC,CAAC;AACF,MAAMu1B,oBAAoB,GAAG,CAAC;EAC5BC,QAAQ,EAAE,IAAI;EACdnzB,MAAM,EAAE,EAAE;EACVpS,IAAI,EAAE,kBAAkB;EACxBqS,OAAO,EAAE,CAAC;IACR+M,YAAY,EAAE,SAAS;IACvBpf,IAAI,EAAE,EAAE;IACR+P,IAAI,EAAE;EACR,CAAC,CAAC;EACFy1B,OAAO,EAAE,KAAK;EACdvzB,eAAe,EAAE,MAAM;EACvBlC,IAAI,EAAE;AACR,CAAC,EAAE;EACDqC,MAAM,EAAE,EAAE;EACVpS,IAAI,EAAE,oBAAoB;EAC1BqS,OAAO,EAAE,CAAC;IACR+M,YAAY,EAAE,SAAS;IACvBpf,IAAI,EAAE,EAAE;IACR+P,IAAI,EAAE;EACR,CAAC,CAAC;EACFkC,eAAe,EAAE,MAAM;EACvBlC,IAAI,EAAE;AACR,CAAC,CAAC;AACF,MAAM01B,UAAU,GAAG,CAAC;EAClBrzB,MAAM,EAAE,CAAC;IACPgN,YAAY,EAAE,SAAS;IACvBpf,IAAI,EAAE,OAAO;IACb+P,IAAI,EAAE;EACR,CAAC,CAAC;EACF/P,IAAI,EAAE,QAAQ;EACdqS,OAAO,EAAE,CAAC;IACR+M,YAAY,EAAE,SAAS;IACvBpf,IAAI,EAAE,EAAE;IACR+P,IAAI,EAAE;EACR,CAAC,CAAC;EACFkC,eAAe,EAAE,MAAM;EACvBlC,IAAI,EAAE;AACR,CAAC,EAAE;EACDqC,MAAM,EAAE,CAAC;IACPgN,YAAY,EAAE,SAAS;IACvBpf,IAAI,EAAE,MAAM;IACZ+P,IAAI,EAAE;EACR,CAAC,CAAC;EACF/P,IAAI,EAAE,UAAU;EAChBqS,OAAO,EAAE,CAAC;IACR+M,YAAY,EAAE,SAAS;IACvBpf,IAAI,EAAE,OAAO;IACb+P,IAAI,EAAE;EACR,CAAC,CAAC;EACFkC,eAAe,EAAE,MAAM;EACvBlC,IAAI,EAAE;AACR,CAAC,CAAC;AACF,eAAe21B,cAAcA,CAACx9B,MAAM,EAAE0Q,eAAe,EAAE;EACrD,MAAMgoB,QAAQ,GAAG,IAAI3sC,QAAQ,CAAC2kB,eAAe,EAAE6sB,UAAU,EAAEv9B,MAAM,CAAC;EAClE,IAAI;IACF,OAAO,MAAM04B,QAAQ,CAAC+E,MAAM,CAAC,MAAMz9B,MAAM,CAAC68B,UAAU,CAAC,CAAC,CAAC;EACzD,CAAC,CAAC,OAAOloB,GAAG,EAAE;IACZ,OAAO,MAAM+jB,QAAQ,CAACgF,QAAQ,CAAC,MAAM19B,MAAM,CAAC68B,UAAU,CAAC,CAAC,CAAC;EAC3D;AACF;AACA,eAAec,kBAAkBA,CAAC39B,MAAM,EAAE0Q,eAAe,EAAE;EACzD,MAAMgoB,QAAQ,GAAG,IAAI3sC,QAAQ,CAAC2kB,eAAe,EAAE0sB,oBAAoB,EAAEp9B,MAAM,CAAC;EAC5E,IAAI;IACF,OAAO,MAAM04B,QAAQ,CAACkF,gBAAgB,CAAC,CAAC;EAC1C,CAAC,CAAC,OAAOjpB,GAAG,EAAE;IACZ,IAAI;MACF,OAAO,MAAM+jB,QAAQ,CAACiF,kBAAkB,CAAC,CAAC;IAC5C,CAAC,CAAC,OAAOE,IAAI,EAAE;MACblU,OAAO,CAACnzB,KAAK,CAAC,gCAAgC,EAAEqnC,IAAI,CAAC;IACvD;EACF;AACF;AACA,eAAeC,YAAYA,CAAC99B,MAAM,EAAE0Q,eAAe,EAAE;EACnD,OAAO,IAAI3kB,QAAQ,CAAC2kB,eAAe,EAAEysB,QAAQ,EAAEn9B,MAAM,CAAC,CAAClI,IAAI,CAAC,CAAC;AAC/D;;AAEA;AACA;AACA;AACA,eAAeimC,uBAAuBA,CAAC/9B,MAAM,EAAEq8B,MAAM,EAAE;EACrD,MAAM2B,uBAAuB,GAAG,MAAML,kBAAkB,CAAC39B,MAAM,EAAEq8B,MAAM,CAAC4B,iBAAiB,CAAC;EAC1F,MAAMC,aAAa,GAAG;IACpBpmC,IAAI,EAAEukC,MAAM,CAACvkC,IAAI;IACjBpG,OAAO,EAAE2qC,MAAM,CAAC3qC,OAAO;IACvBusC,iBAAiB,EAAE5B,MAAM,CAAC4B,iBAAiB;IAC3CxE,IAAI,EAAE5tC,KAAK,CAACyZ,UAAU,CAAC3Z,SAAS,CAAC6H,IAAI,CAAC6oC,MAAM,CAACzkC,OAAO,CAAC,CAACumC,WAAW,CAAC,CAAC,EAAE,EAAE;EACzE,CAAC;EACD,IAAItyC,KAAK,CAAC6wC,iBAAiB,CAAC0B,UAAU,CAACF,aAAa,CAAC,KAAKF,uBAAuB,EAAE;IACjF,OAAOE,aAAa;EACtB;EACA,OAAO7B,MAAM;AACf;;AAEA;AACA;AACA;AACA,eAAegC,iBAAiBA,CAACr+B,MAAM,EAAEiE,eAAe,EAAEq6B,KAAK,EAAEC,OAAO,EAAE1qC,KAAK,EAAE2qC,QAAQ,EAAEvvB,KAAK,EAAE;EAChG,MAAMotB,MAAM,GAAG,MAAM0B,uBAAuB,CAAC/9B,MAAM,EAAE;IACnDlI,IAAI,EAAE,MAAMgmC,YAAY,CAAC99B,MAAM,EAAEiE,eAAe,CAAC;IACjDvS,OAAO,EAAE,GAAG;IACZkG,OAAO,EAAE,MAAMoI,MAAM,CAACy+B,UAAU,CAAC,CAAC;IAClCR,iBAAiB,EAAEh6B;EACrB,CAAC,CAAC;EACFgL,KAAK,GAAGA,KAAK,IAAI,CAAC,MAAMuuB,cAAc,CAACx9B,MAAM,EAAEiE,eAAe,CAAC,EAAEvQ,QAAQ,CAAC,CAAC;EAC3E8qC,QAAQ,GAAGA,QAAQ,IAAI1yC,SAAS,CAAC4yC,UAAU;EAC3C,MAAMjoC,OAAO,GAAG;IACd6nC,KAAK;IACLC,OAAO;IACP1qC,KAAK;IACLob,KAAK;IACLuvB;EACF,CAAC;EACD,MAAMlC,KAAK,GAAG;IACZqC,MAAM,EAAE,CAAC;MACP7mC,IAAI,EAAE,OAAO;MACb+P,IAAI,EAAE;IACR,CAAC,EAAE;MACD/P,IAAI,EAAE,SAAS;MACf+P,IAAI,EAAE;IACR,CAAC,EAAE;MACD/P,IAAI,EAAE,OAAO;MACb+P,IAAI,EAAE;IACR,CAAC,EAAE;MACD/P,IAAI,EAAE,OAAO;MACb+P,IAAI,EAAE;IACR,CAAC,EAAE;MACD/P,IAAI,EAAE,UAAU;MAChB+P,IAAI,EAAE;IACR,CAAC;EACH,CAAC;EACD,MAAM;IACJwT;EACF,CAAC,GAAG,MAAM8gB,qBAAqB,CAACn8B,MAAM,EAAEq8B,MAAM,EAAEC,KAAK,EAAE7lC,OAAO,CAAC;EAC/D,OAAO;IACLA,OAAO;IACP4kB;EACF,CAAC;AACH;AAEA,MAAMujB,kBAAkB,CAAC;EACvBpqC,WAAWA,CAAC+H,OAAO,EAAE;IACnB,IAAI,CAACiT,IAAI,GAAGjT,OAAO,CAACiT,IAAI;IACxB,IAAI,CAACqvB,SAAS,GAAGtiC,OAAO,CAACsiC,SAAS,IAAI,CAAC,CAAC;IACxC,IAAI,CAACjpC,QAAQ,GAAG2G,OAAO,CAAC3G,QAAQ;IAChC,IAAI,CAACoK,MAAM,GAAGzD,OAAO,CAACyD,MAAM;IAC5B,IAAI,CAACwqB,OAAO,GAAGjuB,OAAO,CAACiuB,OAAO;;IAE9B;IACA,IAAI,CAAC,IAAI,CAACxqB,MAAM,CAACpK,QAAQ,EAAE;MACzB,IAAI,CAACoK,MAAM,GAAG,IAAI,CAACA,MAAM,CAAC8+B,OAAO,CAAC,IAAI,CAAClpC,QAAQ,CAAC;IAClD;EACF;EACA,IAAImpC,SAASA,CAAA,EAAG;IACd,OAAO,IAAI,CAAC/+B,MAAM;EACpB;EACA,IAAIg/B,WAAWA,CAAA,EAAG;IAChB,OAAO,IAAI,CAACppC,QAAQ;EACtB;EACA,IAAIqpC,UAAUA,CAAA,EAAG;IACf,OAAO,IAAI,CAACzU,OAAO;EACrB;EACA0U,OAAOA,CAAA,EAAG;IACR,OAAO,IAAI,CAAC1vB,IAAI;EAClB;EACA2vB,YAAYA,CAAA,EAAG;IACb,OAAO,IAAI,CAACN,SAAS;EACvB;EACAO,QAAQA,CAAA,EAAG;IACT,OAAO,IAAI,CAACP,SAAS,CAAChrC,KAAK,IAAI,CAAC;EAClC;EACAwrC,OAAOA,CAAC7vB,IAAI,EAAE;IACZ,IAAI,CAACA,IAAI,GAAGA,IAAI;IAChB,OAAO,IAAI;EACb;EACA8vB,YAAYA,CAACT,SAAS,EAAE;IACtB,IAAI,CAACA,SAAS,GAAGA,SAAS;IAC1B,OAAO,IAAI;EACb;EACAU,eAAeA,CAACV,SAAS,EAAE;IACzB,IAAI,CAACA,SAAS,GAAG;MACf,GAAG,IAAI,CAACA,SAAS;MACjB,GAAGA;IACL,CAAC;IACD,OAAO,IAAI;EACb;EACAW,QAAQA,CAAC3rC,KAAK,EAAE;IACd,IAAI,CAAC0rC,eAAe,CAAC;MACnB1rC;IACF,CAAC,CAAC;IACF,OAAO,IAAI;EACb;EACA4rC,WAAWA,CAAC5wB,QAAQ,EAAE;IACpB,IAAI,CAAC0wB,eAAe,CAAC;MACnB1wB;IACF,CAAC,CAAC;IACF,OAAO,IAAI;EACb;EACA6wB,WAAWA,CAAC5wB,QAAQ,EAAE;IACpB,IAAI,CAACywB,eAAe,CAAC;MACnBzwB;IACF,CAAC,CAAC;IACF,OAAO,IAAI;EACb;EACA6wB,QAAQA,CAAC1wB,KAAK,EAAE;IACd,IAAI,CAACswB,eAAe,CAAC;MACnBtwB;IACF,CAAC,CAAC;IACF,OAAO,IAAI;EACb;EACA2wB,eAAeA,CAAC7wB,YAAY,EAAE;IAC5B,IAAI,CAACwwB,eAAe,CAAC;MACnBxwB;IACF,CAAC,CAAC;IACF,OAAO,IAAI;EACb;EACA8wB,uBAAuBA,CAAC7wB,oBAAoB,EAAE;IAC5C,IAAI,CAACuwB,eAAe,CAAC;MACnBvwB;IACF,CAAC,CAAC;IACF,OAAO,IAAI;EACb;EACA8wB,OAAOA,CAACj4B,IAAI,EAAE;IACZ,IAAI,CAAC03B,eAAe,CAAC;MACnB13B;IACF,CAAC,CAAC;IACF,OAAO,IAAI;EACb;EACAk4B,aAAaA,CAACC,UAAU,EAAE;IACxB,IAAI,CAACT,eAAe,CAAC;MACnBS;IACF,CAAC,CAAC;IACF,OAAO,IAAI;EACb;EACAC,aAAaA,CAACC,UAAU,EAAE;IACxB,IAAI,CAACX,eAAe,CAAC;MACnBW;IACF,CAAC,CAAC;IACF,OAAO,IAAI;EACb;EACAC,kBAAkBA,CAACC,eAAe,EAAE;IAClC,IAAI,CAACb,eAAe,CAAC;MACnBa;IACF,CAAC,CAAC;IACF,OAAO,IAAI;EACb;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,mBAAmBA,CAACC,MAAM,EAAE;IAC1B;IACA,IAAI30C,SAAS,CAAC0H,WAAW,CAAC,IAAI,CAACwrC,SAAS,CAAChwB,QAAQ,CAAC,EAAE;MAClD,IAAI,CAACgwB,SAAS,CAAChwB,QAAQ,GAAGljB,SAAS,CAAC6H,IAAI,CAAC0P,IAAI,CAACC,KAAK,CAACxX,SAAS,CAAC6H,IAAI,CAAC,IAAI,CAACqrC,SAAS,CAAChwB,QAAQ,CAAC,CAAC5I,QAAQ,CAAC,CAAC,GAAGq6B,MAAM,CAAC,CAAC;IACnH,CAAC,MAAM;MACL;MACA,IAAI,CAACC,WAAW,GAAGD,MAAM;IAC3B;EACF;;EAEA;AACF;AACA;EACE,MAAME,eAAeA,CAAA,EAAG;IACtB,MAAM,CAAC3xB,QAAQ,EAAEC,QAAQ,CAAC,GAAG,MAAMzX,OAAO,CAAC+M,GAAG,CAAC,CAAC,IAAI,CAACq8B,gBAAgB,CAAC,CAAC,EAAE,IAAI,CAAC1S,WAAW,CAAC,CAAC,CAAC,CAAC;IAC7F,MAAM2S,OAAO,GAAG7xB,QAAQ,CAAC2f,GAAG,CAAC1f,QAAQ,CAAC;IACtC,OAAO;MACL6xB,KAAK,EAAE90C,KAAK,CAACinB,WAAW,CAAC4tB,OAAO,CAAC;MACjCE,GAAG,EAAEF;IACP,CAAC;EACH;;EAEA;AACF;AACA;EACE,MAAM3S,WAAWA,CAAA,EAAG;IAClB,OAAOA,WAAW,CAAC,IAAI,CAACn4B,QAAQ,CAAC;EACnC;;EAEA;AACF;AACA;EACE,MAAMirC,gBAAgBA,CAAA,EAAG;IACvB,OAAO,IAAI,CAAC7gC,MAAM,CAAC68B,UAAU,CAAC,CAAC;EACjC;;EAEA;AACF;AACA;EACE,MAAMiE,eAAeA,CAAA,EAAG;IACtB,OAAOnT,sBAAsB,CAAC,IAAI,CAAC/3B,QAAQ,CAAC;EAC9C;;EAEA;AACF;AACA;EACE84B,uBAAuBA,CAACC,wBAAwB,EAAE;IAChD,MAAME,QAAQ,GAAGF,wBAAwB,CAACG,GAAG,CAAC,GAAG,CAAC,CAACN,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;IAC5D,MAAMO,UAAU,GAAGJ,wBAAwB,CAACF,GAAG,CAACI,QAAQ,CAAC;IACzD,OAAOE,UAAU;EACnB;AACF;AACA,MAAMgS,WAAW,SAASnC,kBAAkB,CAAC;EAC3C,OAAOoC,mBAAmBA,CAACzkC,OAAO,EAAE;IAClC,MAAMyD,MAAM,GAAGzD,OAAO,CAAC8S,eAAe,CAAC0vB,SAAS,CAAC,CAAC;IAClD,IAAI,CAAC/+B,MAAM,EAAE;MACX,MAAM,IAAIpO,KAAK,CAAC,+FAA+F,CAAC;IAClH;IACA,MAAMqvC,mBAAmB,GAAG;MAC1B,GAAG1kC,OAAO;MACVm8B,QAAQ,EAAEn8B,OAAO,CAAC8S,eAAe,CAAC6xB,aAAa;MAC/CtrC,QAAQ,EAAE2G,OAAO,CAAC8S,eAAe,CAAC2vB,WAAW,CAAC,CAAC;MAC/Ch/B,MAAM;MACNjH,OAAO,EAAEwD,OAAO,CAAC8S,eAAe,CAAC9S,OAAO,CAACxD,OAAO;MAChDyxB,OAAO,EAAEjuB,OAAO,CAAC8S,eAAe,CAACmb;IACnC,CAAC;IACD,OAAO,IAAIuW,WAAW,CAACE,mBAAmB,CAAC;EAC7C;EACA,aAAaE,gBAAgBA,CAAC5kC,OAAO,EAAE;IACrC,MAAMiuB,OAAO,GAAGjuB,OAAO,CAACiuB,OAAO;IAC/B,IAAIhP,WAAW,GAAGjf,OAAO,CAACif,WAAW;IACrC,IAAI,CAACA,WAAW,EAAE;MAChB,IAAI;QACF,MAAM/V,QAAQ,GAAG,MAAMinB,gCAAgC,CAACnwB,OAAO,CAACmU,eAAe,EAAEnU,OAAO,CAAC3G,QAAQ,EAAE40B,OAAO,CAAC;QAC3GhP,WAAW,GAAG/V,QAAQ,CAAC6I,GAAG;MAC5B,CAAC,CAAC,MAAM;QACN,MAAM,IAAI1c,KAAK,gDAAAN,MAAA,CAAgDiL,OAAO,CAACmU,eAAe,2EAAwE,CAAC;MACjK;IACF;IACA,MAAMgoB,QAAQ,GAAG,IAAI3sC,QAAQ,CAACwQ,OAAO,CAACmU,eAAe,EAAE8K,WAAW,EAAEjf,OAAO,CAAC3G,QAAQ,CAAC;IACrF,MAAMqrC,mBAAmB,GAAG;MAC1B,GAAG1kC,OAAO;MACViuB,OAAO;MACPkO;IACF,CAAC;IACD,OAAO,IAAIqI,WAAW,CAACE,mBAAmB,CAAC;EAC7C;EACAzsC,WAAWA,CAAC+H,OAAO,EAAE;IACnB,KAAK,CAAC;MACJiT,IAAI,EAAEjT,OAAO,CAACiT,IAAI;MAClBqvB,SAAS,EAAEtiC,OAAO,CAACsiC,SAAS;MAC5BjpC,QAAQ,EAAE2G,OAAO,CAAC3G,QAAQ;MAC1BoK,MAAM,EAAEzD,OAAO,CAACyD,MAAM;MACtBwqB,OAAO,EAAEjuB,OAAO,CAACiuB;IACnB,CAAC,CAAC;IACF,IAAI,CAAC1zB,MAAM,GAAGyF,OAAO,CAACzF,MAAM;IAC5B,IAAI,CAACsqC,cAAc,GAAG7kC,OAAO,CAACxD,OAAO;IACrC,IAAI,CAACgE,KAAK,GAAGR,OAAO,CAACQ,KAAK;;IAE1B;IACA,IAAI,CAAC27B,QAAQ,GAAGn8B,OAAO,CAACm8B,QAAQ,CAACoG,OAAO,CAAC,IAAI,CAAC9+B,MAAM,CAAC;;IAErD;IACA,IAAI,CAACwqB,OAAO,GAAGjuB,OAAO,CAACiuB,OAAO;EAChC;EACA6W,SAASA,CAAA,EAAG;IACV,OAAO,IAAI,CAAC3I,QAAQ,CAACl4B,OAAO;EAC9B;EACA8gC,SAASA,CAAA,EAAG;IACV,OAAO,IAAI,CAACxqC,MAAM;EACpB;EACAyqC,iBAAiBA,CAAA,EAAG;IAClB,OAAO,IAAI,CAACH,cAAc;EAC5B;EACAI,iBAAiBA,CAACjlC,OAAO,EAAE;IACzB,IAAI,CAAC6kC,cAAc,GAAG7kC,OAAO;IAC7B,OAAO,IAAI;EACb;EACAklC,QAAQA,CAAC1kC,KAAK,EAAE;IACd,IAAI,CAACA,KAAK,GAAGA,KAAK;IAClB,OAAO,IAAI;EACb;;EAEA;AACF;AACA;EACEuS,MAAMA,CAAA,EAAG;IACP,OAAO,IAAI,CAACopB,QAAQ,CAAChpB,SAAS,CAACC,kBAAkB,CAAC,IAAI,CAAC7Y,MAAM,EAAE,IAAI,CAAC0Y,IAAI,CAAC;EAC3E;;EAEA;AACF;AACA;EACE,MAAMkyB,IAAIA,CAAA,EAAG;IACX,MAAMC,WAAW,GAAG,MAAM,IAAI,CAACC,mBAAmB,CAAC,CAAC;IACpD,MAAMC,QAAQ,GAAG,MAAM,IAAI,CAACnJ,QAAQ,CAAC14B,MAAM,CAAC8hC,eAAe,CAACH,WAAW,CAAC;IACxE,OAAOE,QAAQ;EACjB;EACA,MAAMD,mBAAmBA,CAAA,EAAG;IAC1B,MAAMG,YAAY,GAAG,MAAM,IAAI,CAACjB,eAAe,CAAC,CAAC;IACjD,MAAMjC,SAAS,GAAG;MAChB,GAAGkD,YAAY;MACf,GAAG,IAAI,CAAClD;IACV,CAAC;;IAED;IACA,IAAI,CAACA,SAAS,CAAChwB,QAAQ,EAAE;MACvBgwB,SAAS,CAAChwB,QAAQ,GAAG,MAAM,IAAI,CAAC4xB,gBAAgB,CAAC,CAAC;IACpD;IACA,MAAMlT,EAAE,GAAG,MAAM,IAAI,CAACmL,QAAQ,CAACkJ,mBAAmB,CAAC,IAAI,CAAC9qC,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC0Y,IAAI,EAAEqvB,SAAS,CAAC;IACxF,MAAM8C,WAAW,GAAG,MAAM,IAAI,CAACjJ,QAAQ,CAAC14B,MAAM,CAAC4hC,mBAAmB,CAACrU,EAAE,CAAC;IACtE,OAAOoU,WAAW;EACpB;;EAEA;AACF;AACA;EACE,MAAMK,QAAQA,CAAA,EAAG;IACf,IAAI,CAAC,IAAI,CAACtJ,QAAQ,CAACuJ,UAAU,CAAC,IAAI,CAACnrC,MAAM,CAAC,EAAE;MAC1C,MAAM,IAAI,CAACorC,aAAa,CAAC,CAAC;IAC5B;IACA,IAAI;MACF,OAAO,MAAM,IAAI,CAACxJ,QAAQ,CAACuJ,UAAU,CAAC,IAAI,CAACnrC,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC0Y,IAAI,EAAE,IAAI,IAAI,CAACqvB,SAAS,CAAChrC,KAAK,GAAG,CAAC;QAC3FA,KAAK,EAAE,IAAI,CAACgrC,SAAS,CAAChrC;MACxB,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;IACX,CAAC,CAAC,OAAO8gB,GAAG,EAAE;MACZ,MAAM,MAAM,IAAI,CAACwtB,gBAAgB,CAACxtB,GAAG,CAAC;IACxC;EACF;;EAEA;AACF;AACA;EACE,MAAM8rB,gBAAgBA,CAAA,EAAG;IACvB,IAAI,CAAC,IAAI,CAAC/H,QAAQ,CAAC0J,WAAW,CAAC,IAAI,CAACtrC,MAAM,CAAC,EAAE;MAC3C,MAAM,IAAI,CAACorC,aAAa,CAAC,CAAC;IAC5B;IACA,IAAI;MACF,MAAMG,WAAW,GAAG,MAAM,IAAI,CAAC3J,QAAQ,CAAC0J,WAAW,CAAC,IAAI,CAACtrC,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC0Y,IAAI,EAAE,IAAI,CAACqvB,SAAS,CAAC;MAC9F,IAAI,IAAI,CAAC0B,WAAW,EAAE;QACpB,OAAO50C,SAAS,CAAC6H,IAAI,CAAC0P,IAAI,CAACC,KAAK,CAACxX,SAAS,CAAC6H,IAAI,CAAC6uC,WAAW,CAAC,CAACp8B,QAAQ,CAAC,CAAC,GAAG,IAAI,CAACs6B,WAAW,CAAC,CAAC;MAC9F;MACA,OAAO8B,WAAW;IACpB,CAAC,CAAC,OAAO1tB,GAAG,EAAE;MACZ;MACA,MAAM,IAAI,CAACqtB,QAAQ,CAAC,CAAC;;MAErB;MACA,MAAM,MAAM,IAAI,CAACG,gBAAgB,CAACxtB,GAAG,CAAC;IACxC;EACF;;EAEA;AACF;AACA;EACE,MAAM9d,IAAIA,CAAA,EAAG;IACX,IAAI,CAAC,IAAI,CAAC6hC,QAAQ,CAAC9d,SAAS,CAAC,IAAI,CAAC9jB,MAAM,CAAC,EAAE;MACzC,MAAM,IAAI,CAACorC,aAAa,CAAC,CAAC;IAC5B;IACA,IAAI,IAAI,CAACd,cAAc,KAAK,cAAc,IAAI,IAAI,CAACA,cAAc,IAAI,UAAU,IAAI,IAAI,CAACA,cAAc,CAAC,EAAE;MACvG,OAAO,IAAI,CAACkB,WAAW,CAAC,CAAC;IAC3B;IACA,MAAMP,YAAY,GAAG,MAAM,IAAI,CAACjB,eAAe,CAAC,CAAC;IACjD,MAAMjC,SAAS,GAAG;MAChB,GAAGkD,YAAY;MACf,GAAG,IAAI,CAAClD;IACV,CAAC;;IAED;IACA,IAAI,CAACA,SAAS,CAAChwB,QAAQ,EAAE;MACvBgwB,SAAS,CAAChwB,QAAQ,GAAG,MAAM,IAAI,CAAC4xB,gBAAgB,CAAC,CAAC;MAClD,IAAI;QACF;QACA,MAAMnyB,GAAG,GAAGvY,IAAI,CAACgH,KAAK,CAAC,IAAI,CAAC27B,QAAQ,CAAChpB,SAAS,CAAC/U,MAAM,CAAC,MAAM,CAAC,CAAC;QAC9D,IAAI41B,gBAAgB,CAACjiB,GAAG,CAAC,EAAE;UACzBuwB,SAAS,CAAChwB,QAAQ,GAAGgwB,SAAS,CAAChwB,QAAQ,CAAC2f,GAAG,CAAC,GAAG,CAAC,CAACM,GAAG,CAAC,GAAG,CAAC;QAC3D;MACF,CAAC,CAAC,OAAOna,GAAG,EAAE;QACZgV,OAAO,CAACC,IAAI,CAAC,yBAAyB,EAAEjV,GAAG,CAAC;MAC9C;IACF;;IAEA;IACA,IAAI;MACF,OAAO,MAAM,IAAI,CAAC+jB,QAAQ,CAAC9d,SAAS,CAAC,IAAI,CAAC9jB,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC0Y,IAAI,EAAEqvB,SAAS,CAAC;IAC5E,CAAC,CAAC,OAAOlqB,GAAG,EAAE;MACZ,MAAM,MAAM,IAAI,CAACwtB,gBAAgB,CAACxtB,GAAG,CAAC;IACxC;EACF;;EAEA;AACF;AACA;EACE,MAAM6Y,OAAOA,CAAA,EAAG;IACd,MAAMD,EAAE,GAAG,MAAM,IAAI,CAAC12B,IAAI,CAAC,CAAC;IAC5B,IAAI0rC,OAAO;IACX,IAAI;MACFA,OAAO,GAAG,MAAMhV,EAAE,CAACiV,IAAI,CAAC,CAAC;IAC3B,CAAC,CAAC,OAAO7tB,GAAG,EAAE;MACZ;MACA;MACA,MAAM,IAAI,CAACqtB,QAAQ,CAAC,CAAC;;MAErB;MACA,MAAM,MAAM,IAAI,CAACG,gBAAgB,CAACxtB,GAAG,CAAC;IACxC;IACA,IAAI,IAAI,CAAC5X,KAAK,EAAE;MACd,OAAO,IAAI,CAACA,KAAK,CAACwlC,OAAO,CAAC;IAC5B;IACA,OAAO;MACLA;IACF,CAAC;EACH;;EAEA;AACF;AACA;EACE,MAAMD,WAAWA,CAAA,EAAG;IAClB,MAAM/U,EAAE,GAAG,MAAM,IAAI,CAACkV,cAAc,CAAC,CAAC;IACtC,MAAMC,MAAM,GAAG,MAAMC,0BAA0B,CAACpV,EAAE,EAAE,IAAI,CAACvtB,MAAM,EAAE,IAAI,CAACpK,QAAQ,EAAE,IAAI,CAAC40B,OAAO,EAAE,IAAI,CAAC4W,cAAc,CAAC;;IAElH;IACA;IACA,IAAIwB,MAAM;IACV,IAAIC,SAAS,GAAG,CAAC;IACjB,OAAO,CAACD,MAAM,EAAE;MACd,IAAI;QACFA,MAAM,GAAG,MAAM,IAAI,CAAChtC,QAAQ,CAACktC,cAAc,CAACJ,MAAM,CAAC;MACrD,CAAC,CAAC,OAAO/tB,GAAG,EAAE;QACZ;MAAA;MAEF;MACA,IAAI,CAACiuB,MAAM,EAAE;QACX,MAAM,IAAIvrC,OAAO,CAACT,OAAO,IAAIW,UAAU,CAACX,OAAO,EAAEsM,IAAI,CAACtK,GAAG,CAACiqC,SAAS,GAAG,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC;QACpFA,SAAS,EAAE;MACb;;MAEA;MACA,IAAIA,SAAS,GAAG,EAAE,EAAE;QAClB,MAAM,IAAIjxC,KAAK,6CAAAN,MAAA,CAA6CoxC,MAAM,CAAE,CAAC;MACvE;IACF;IACA,OAAOE,MAAM;EACf;;EAEA;AACF;AACA;AACA;EACE,MAAMH,cAAcA,CAAA,EAAG;IAAA,IAAAM,eAAA;IACrB92C,SAAS,CAAC,IAAI,CAACm1C,cAAc,KAAK,cAAc,IAAI,IAAI,CAACA,cAAc,IAAI,UAAU,IAAI,IAAI,CAACA,cAAc,CAAC,EAAE,6CAA6C,CAAC;IAC7J,MAAMxE,aAAa,GAAG,MAAM,IAAI,CAACiE,gBAAgB,CAAC,CAAC;IACnD,MAAMrxB,IAAI,GAAG,CAAC,GAAG,IAAI,CAACA,IAAI,CAAC;IAC3B,IAAI,IAAI,CAAC1Y,MAAM,KAAK,WAAW,IAAIud,KAAK,CAAC2F,OAAO,CAAC,IAAI,CAACxK,IAAI,CAAC,CAAC,CAAC,CAAC,IAAIA,IAAI,CAAC,CAAC,CAAC,CAAC7d,MAAM,GAAG,CAAC,EAAE;MACpF6d,IAAI,CAAC,CAAC,CAAC,GAAGA,IAAI,CAAC,CAAC,CAAC,CAACja,GAAG,CAACg4B,EAAE,IAAI1hC,KAAK,CAACguC,YAAY,CAAC,CAAC,OAAO,EAAE,SAAS,CAAC,EAAE,CAACtM,EAAE,EAAEqP,aAAa,CAAC,CAAC,CAAC;IAC5F;IACA3wC,SAAS,CAAC,IAAI,CAAC+T,MAAM,EAAE,yDAAyD,CAAC;IACjF,MAAM,CAAC;MACLpI;IACF,CAAC,EAAEpE,IAAI,CAAC,GAAG,MAAM6D,OAAO,CAAC+M,GAAG,CAAC,CAAC,IAAI,CAACxO,QAAQ,CAAC6H,UAAU,CAAC,CAAC,EAAE,IAAI,CAACohC,SAAS,CAACrrC,IAAI,IAAIopC,aAAa,CAAC,CAAC;IAChG,MAAMn2B,EAAE,GAAG,IAAI,CAACiyB,QAAQ,CAACl4B,OAAO;IAChC,MAAM3M,KAAK,GAAG,EAAAkvC,eAAA,OAAI,CAAClE,SAAS,cAAAkE,eAAA,uBAAdA,eAAA,CAAgBlvC,KAAK,KAAI,CAAC;IACxC,IAAIlI,SAAS,CAAC6H,IAAI,CAACK,KAAK,CAAC,CAAC+e,EAAE,CAAC,CAAC,CAAC,EAAE;MAC/B,MAAM,IAAIhhB,KAAK,CAAC,yDAAyD,CAAC;IAC5E;IACA,MAAMwB,IAAI,GAAG,IAAI,CAACslC,QAAQ,CAAChpB,SAAS,CAACC,kBAAkB,CAAC,IAAI,CAAC7Y,MAAM,EAAE0Y,IAAI,CAAC;IAC1E,IAAIwzB,GAAG,GAAGr3C,SAAS,CAAC6H,IAAI,CAAC,CAAC,CAAC;IAC3B,IAAI;MACF,MAAM6uC,WAAW,GAAG,MAAM,IAAI,CAAC3J,QAAQ,CAAC0J,WAAW,CAAC,IAAI,CAACtrC,MAAM,CAAC,CAAC,GAAG0Y,IAAI,CAAC;MACzEwzB,GAAG,GAAGX,WAAW,CAAC7T,GAAG,CAAC,CAAC,CAAC;IAC1B,CAAC,CAAC,OAAOpxB,CAAC,EAAE;MACV;IAAA;;IAGF;IACA;IACA,IAAI4lC,GAAG,CAACC,EAAE,CAAC,MAAM,CAAC,EAAE;MAClBD,GAAG,GAAGr3C,SAAS,CAAC6H,IAAI,CAAC,MAAM,CAAC;IAC9B;;IAEA;IACA,IAAI,IAAI,CAACqrC,SAAS,CAAChwB,QAAQ,IAAIljB,SAAS,CAAC6H,IAAI,CAAC,IAAI,CAACqrC,SAAS,CAAChwB,QAAQ,CAAC,CAAC+D,EAAE,CAACowB,GAAG,CAAC,EAAE;MAC9EA,GAAG,GAAGr3C,SAAS,CAAC6H,IAAI,CAAC,IAAI,CAACqrC,SAAS,CAAChwB,QAAQ,CAAC;IAC/C;IACA,OAAO;MACLrb,IAAI;MACJiT,EAAE;MACFrT,IAAI;MACJwE,OAAO;MACPiX,QAAQ,EAAEm0B,GAAG;MACbrlB,YAAY,EAAE,IAAI,CAAC7mB,MAAM;MACzBosC,YAAY,EAAE1zB,IAAI;MAClB2zB,aAAa,EAAE,IAAI,CAACtE;IACtB,CAAC;EACH;EACAqD,aAAaA,CAAA,EAAG;IACd,OAAO,IAAItwC,KAAK,eAAAN,MAAA,CAAc,IAAI,CAAConC,QAAQ,CAACl4B,OAAO,kCAAAlP,MAAA,CAA6B,IAAI,CAACwF,MAAM,OAAG,CAAC;EACjG;;EAEA;AACF;AACA;EACE,MAAMqrC,gBAAgBA,CAAC3rC,KAAK,EAAE;IAAA,IAAA4sC,oBAAA,EAAAC,kBAAA,EAAAC,cAAA;IAC5B,MAAM1tC,QAAQ,GAAG,IAAI,CAACA,QAAQ;;IAE9B;IACA,MAAM,CAAClB,OAAO,EAAElB,IAAI,CAAC,GAAG,MAAM6D,OAAO,CAAC+M,GAAG,CAAC,CAACxO,QAAQ,CAAC6H,UAAU,CAAC,CAAC,EAAE,IAAI,CAACohC,SAAS,CAACrrC,IAAI,IAAI,IAAI,CAACqtC,gBAAgB,CAAC,CAAC,CAAC,CAAC;IAClH,MAAMp6B,EAAE,GAAG,IAAI,CAACiyB,QAAQ,CAACl4B,OAAO;IAChC,MAAMpN,IAAI,GAAG,IAAI,CAACkc,MAAM,CAAC,CAAC;IAC1B,MAAMzb,KAAK,GAAGlI,SAAS,CAAC6H,IAAI,CAAC,IAAI,CAACqrC,SAAS,CAAChrC,KAAK,IAAI,CAAC,CAAC;IACvD,MAAM4E,MAAM,IAAA2qC,oBAAA,GAAGxtC,QAAQ,CAACE,UAAU,cAAAstC,oBAAA,uBAAnBA,oBAAA,CAAqB3uC,GAAG;;IAEvC;IACA,MAAM8uC,iBAAiB,GAAG,IAAI,CAAC7K,QAAQ,CAAChpB,SAAS,CAAC8zB,WAAW,CAAC,IAAI,CAAC1sC,MAAM,CAAC;IAC1E,MAAM2sC,UAAU,GAAG,IAAI,CAACj0B,IAAI,CAACja,GAAG,CAAChC,GAAG,IAAI;MACtC,IAAIwC,IAAI,CAACC,SAAS,CAACzC,GAAG,CAAC,CAAC5B,MAAM,IAAI,EAAE,EAAE;QACpC,OAAOoE,IAAI,CAACC,SAAS,CAACzC,GAAG,CAAC;MAC5B;MACA,OAAOwC,IAAI,CAACC,SAAS,CAACzC,GAAG,EAAEsB,SAAS,EAAE,CAAC,CAAC;IAC1C,CAAC,CAAC;IACF,MAAM6uC,UAAU,GAAGD,UAAU,CAACpxC,IAAI,CAAC,IAAI,CAAC,CAACV,MAAM,IAAI,EAAE,GAAG8xC,UAAU,CAACpxC,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,GAAGoxC,UAAU,CAACluC,GAAG,CAAChC,GAAG,IAAI,IAAI,GAAGA,GAAG,CAAC6f,KAAK,CAAC,IAAI,CAAC,CAAC/gB,IAAI,CAAC,MAAM,CAAC,CAAC,CAACA,IAAI,CAAC,KAAK,CAAC,GAAG,IAAI;IACpK,MAAMyE,MAAM,MAAAxF,MAAA,CAAMiyC,iBAAiB,CAACzrC,IAAI,OAAAxG,MAAA,CAAIoyC,UAAU,MAAG;IACzD,MAAM/wB,IAAI,GAAGnc,KAAK,CAACmtC,eAAe,MAAAN,kBAAA,GAAI7sC,KAAK,CAACy7B,WAAW,cAAAoR,kBAAA,uBAAjBA,kBAAA,CAAmB1wB,IAAI,OAAA2wB,cAAA,GAAI9sC,KAAK,CAAC+rC,OAAO,cAAAe,cAAA,uBAAbA,cAAA,CAAeK,eAAe;;IAE/F;IACA,MAAMpxB,MAAM,GAAGwB,iBAAiB,CAACvd,KAAK,CAAC;;IAEvC;IACA,IAAIuc,OAAO,GAAGle,SAAS;IACvB,IAAI4d,YAAY,GAAG5d,SAAS;IAC5B,IAAI;MACF,MAAM4Q,QAAQ,GAAG,MAAMinB,gCAAgC,CAAC,IAAI,CAACgM,QAAQ,CAACl4B,OAAO,EAAE,IAAI,CAAC5K,QAAQ,EAAE,IAAI,CAAC40B,OAAO,CAAC;MAC3G,IAAI/kB,QAAQ,CAAC3N,IAAI,EAAE;QACjB2a,YAAY,GAAGhN,QAAQ,CAAC3N,IAAI;MAC9B;MACA,IAAI2N,QAAQ,CAACA,QAAQ,CAACsN,OAAO,EAAE;QAC7BA,OAAO,GAAG,MAAM4c,4BAA4B,CAAClqB,QAAQ,EAAE,IAAI,CAAC+kB,OAAO,CAAC;MACtE;IACF,CAAC,CAAC,OAAO7V,GAAG,EAAE;MACZ;IAAA;IAEF,OAAO,IAAIvC,gBAAgB,CAAC;MAC1BG,MAAM;MACN/e,IAAI;MACJiT,EAAE;MACF3P,MAAM;MACN1D,IAAI;MACJsB,OAAO;MACP+D,MAAM;MACN5E,KAAK;MACL8e,IAAI;MACJF,YAAY;MACZM;IACF,CAAC,EAAEvc,KAAK,CAAC;EACX;AACF;AACA,MAAMotC,iBAAiB,SAAShF,kBAAkB,CAAC;EACjDpqC,WAAWA,CAAC+H,OAAO,EAAE;IACnB,KAAK,CAACA,OAAO,CAAC;IACd,IAAI,CAACsnC,OAAO,GAAGtnC,OAAO,CAACsnC,OAAO;IAC9B,IAAI,CAACC,MAAM,GAAGvnC,OAAO,CAACunC,MAAM;EAC9B;EACAx0B,MAAMA,CAAA,EAAG;IACP,OAAOzjB,KAAK,CAACya,OAAO,CAACza,KAAK,CAACyF,MAAM,CAAC,CAAC,IAAI,CAACuyC,OAAO,CAACl1B,QAAQ,EAAE,IAAI,CAACk1B,OAAO,CAACn0B,SAAS,CAACq0B,YAAY,CAAC,IAAI,CAACv0B,IAAI,CAAC,CAAC,CAAC,CAAC;EAC7G;EACA6xB,SAASA,CAAA,EAAG;IACV,OAAOv1C,SAAS,CAAC+W,WAAW;EAC9B;EACAy+B,SAASA,CAAA,EAAG;IACV,OAAO,QAAQ;EACjB;EACA,MAAMI,IAAIA,CAAA,EAAG;IACX,MAAMC,WAAW,GAAG,MAAM,IAAI,CAACC,mBAAmB,CAAC,CAAC;IACpD,OAAO,IAAI,CAAC5hC,MAAM,CAAC8hC,eAAe,CAACH,WAAW,CAAC;EACjD;EACA,MAAMK,QAAQA,CAAA,EAAG;IACf,MAAML,WAAW,GAAG,MAAM,IAAI,CAACC,mBAAmB,CAAC,CAAC;IACpD,OAAO,IAAI,CAAC5hC,MAAM,CAACugB,IAAI,CAACohB,WAAW,CAAC;EACtC;EACA,MAAMlB,gBAAgBA,CAAA,EAAG;IACvB,IAAI;MACF,MAAMsB,YAAY,GAAG,MAAM,IAAI,CAACjB,eAAe,CAAC,CAAC;MACjD,MAAMjC,SAAS,GAAG;QAChB,GAAGkD,YAAY;QACf,GAAG,IAAI,CAAClD;MACV,CAAC;MACD,MAAM8C,WAAW,GAAG,IAAI,CAACkC,OAAO,CAACG,oBAAoB,CAAC,GAAG,IAAI,CAACx0B,IAAI,EAAEqvB,SAAS,CAAC;MAC9E,OAAO,IAAI,CAAC7+B,MAAM,CAACoiC,WAAW,CAACT,WAAW,CAAC;IAC7C,CAAC,CAAC,OAAOhtB,GAAG,EAAE;MACZ;MACA,MAAM,MAAM,IAAI,CAACsvB,WAAW,CAACtvB,GAAG,CAAC;IACnC;EACF;EACA,MAAM9d,IAAIA,CAAA,EAAG;IACX,IAAI;MACF,MAAM8qC,WAAW,GAAG,MAAM,IAAI,CAACC,mBAAmB,CAAC,CAAC;MACpD,OAAO,MAAM,IAAI,CAAC5hC,MAAM,CAAC6xB,eAAe,CAAC8P,WAAW,CAAC;IACvD,CAAC,CAAC,OAAOhtB,GAAG,EAAE;MACZ,MAAM,MAAM,IAAI,CAACsvB,WAAW,CAACtvB,GAAG,CAAC;IACnC;EACF;EACA,MAAM6Y,OAAOA,CAAA,EAAG;IACd,MAAMD,EAAE,GAAG,MAAM,IAAI,CAAC12B,IAAI,CAAC,CAAC;IAC5B,IAAI;MACF,MAAM02B,EAAE,CAACiV,IAAI,CAAC,CAAC;IACjB,CAAC,CAAC,OAAO7tB,GAAG,EAAE;MACZ;MACA;MACA,MAAM,IAAI,CAACqtB,QAAQ,CAAC,CAAC;;MAErB;MACA,MAAM,MAAM,IAAI,CAACiC,WAAW,CAACtvB,GAAG,CAAC;IACnC;IACA,MAAMjE,eAAe,GAAG7kB,KAAK,CAAC8mC,kBAAkB,CAAC;MAC/Cn/B,IAAI,EAAE+5B,EAAE,CAAC/5B,IAAI;MACbyb,KAAK,EAAEse,EAAE,CAACte;IACZ,CAAC,CAAC;;IAEF;IACA,IAAI,IAAI,CAAC60B,MAAM,EAAE;MACf,IAAI,CAACA,MAAM,CAACruC,IAAI,CAAC,kBAAkB,EAAE;QACnCyuC,MAAM,EAAE,WAAW;QACnBxzB,eAAe;QACfizB,eAAe,EAAEpW,EAAE,CAAC5a;MACtB,CAAC,CAAC;IACJ;IACA,OAAOjC,eAAe;EACxB;EACA,MAAMkxB,mBAAmBA,CAAA,EAAG;IAC1B,MAAMG,YAAY,GAAG,MAAM,IAAI,CAACjB,eAAe,CAAC,CAAC;IACjD,MAAMjC,SAAS,GAAG;MAChB,GAAGkD,YAAY;MACf,GAAG,IAAI,CAAClD;IACV,CAAC;;IAED;IACA,IAAI,CAACA,SAAS,CAAChwB,QAAQ,EAAE;MACvBgwB,SAAS,CAAChwB,QAAQ,GAAG,MAAM,IAAI,CAAC4xB,gBAAgB,CAAC,CAAC;IACpD;IACA,OAAO,IAAI,CAACoD,OAAO,CAACG,oBAAoB,CAAC,GAAG,IAAI,CAACx0B,IAAI,EAAEqvB,SAAS,CAAC;EACnE;;EAEA;AACF;AACA;EACE,MAAMoF,WAAWA,CAACztC,KAAK,EAAE;IAAA,IAAA2tC,qBAAA,EAAAC,mBAAA,EAAAC,eAAA;IACvB,MAAMzuC,QAAQ,GAAG,IAAI,CAACA,QAAQ;;IAE9B;IACA,MAAM,CAAClB,OAAO,EAAElB,IAAI,CAAC,GAAG,MAAM6D,OAAO,CAAC+M,GAAG,CAAC,CAACxO,QAAQ,CAAC6H,UAAU,CAAC,CAAC,EAAE,IAAI,CAACohC,SAAS,CAACrrC,IAAI,IAAI,IAAI,CAACqtC,gBAAgB,CAAC,CAAC,CAAC,CAAC;IAClH,MAAMztC,IAAI,GAAG,IAAI,CAACkc,MAAM,CAAC,CAAC;IAC1B,MAAMzb,KAAK,GAAGlI,SAAS,CAAC6H,IAAI,CAAC,IAAI,CAACqrC,SAAS,CAAChrC,KAAK,IAAI,CAAC,CAAC;IACvD,MAAM4E,MAAM,IAAA0rC,qBAAA,GAAGvuC,QAAQ,CAACE,UAAU,cAAAquC,qBAAA,uBAAnBA,qBAAA,CAAqB1vC,GAAG;IACvC,MAAMgvC,UAAU,GAAG,IAAI,CAACj0B,IAAI,CAACja,GAAG,CAAChC,GAAG,IAAI;MACtC,IAAIwC,IAAI,CAACC,SAAS,CAACzC,GAAG,CAAC,CAAC5B,MAAM,IAAI,EAAE,EAAE;QACpC,OAAOoE,IAAI,CAACC,SAAS,CAACzC,GAAG,CAAC;MAC5B;MACA,OAAOwC,IAAI,CAACC,SAAS,CAACzC,GAAG,EAAEsB,SAAS,EAAE,CAAC,CAAC;IAC1C,CAAC,CAAC;IACF,MAAM6uC,UAAU,GAAGD,UAAU,CAACpxC,IAAI,CAAC,IAAI,CAAC,CAACV,MAAM,IAAI,EAAE,GAAG8xC,UAAU,CAACpxC,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,GAAGoxC,UAAU,CAACluC,GAAG,CAAChC,GAAG,IAAI,IAAI,GAAGA,GAAG,CAAC6f,KAAK,CAAC,IAAI,CAAC,CAAC/gB,IAAI,CAAC,MAAM,CAAC,CAAC,CAACA,IAAI,CAAC,KAAK,CAAC,GAAG,IAAI;IACpK,MAAMyE,MAAM,qBAAAxF,MAAA,CAAqBoyC,UAAU,MAAG;IAC9C,MAAM/wB,IAAI,GAAGnc,KAAK,CAACmtC,eAAe,MAAAS,mBAAA,GAAI5tC,KAAK,CAACy7B,WAAW,cAAAmS,mBAAA,uBAAjBA,mBAAA,CAAmBzxB,IAAI,OAAA0xB,eAAA,GAAI7tC,KAAK,CAAC+rC,OAAO,cAAA8B,eAAA,uBAAbA,eAAA,CAAeV,eAAe;;IAE/F;IACA,MAAMpxB,MAAM,GAAGwB,iBAAiB,CAACvd,KAAK,CAAC;IACvC,OAAO,IAAI4b,gBAAgB,CAAC;MAC1BG,MAAM;MACN/e,IAAI;MACJsD,MAAM;MACN1D,IAAI;MACJsB,OAAO;MACP+D,MAAM;MACN5E,KAAK;MACL8e;IACF,CAAC,EAAEnc,KAAK,CAAC;EACX;AACF;AACA,eAAemsC,0BAA0BA,CAAC1Q,WAAW,EAAEjyB,MAAM,EAAEpK,QAAQ,EAAE40B,OAAO,EAAE4W,cAAc,EAAE;EAChG,IAAIA,cAAc,IAAI,UAAU,IAAIA,cAAc,EAAE;IAClD,OAAOkD,oBAAoB,CAACrS,WAAW,EAAEjyB,MAAM,EAAEpK,QAAQ,EAAEwrC,cAAc,CAAC;EAC5E;EACA,OAAOmD,oBAAoB,CAACtS,WAAW,EAAEjyB,MAAM,EAAEpK,QAAQ,EAAE40B,OAAO,EAAE4W,cAAc,CAAC;AACrF;AACA,eAAekD,oBAAoBA,CAACrS,WAAW,EAAEjyB,MAAM,EAAEpK,QAAQ,EAAEwrC,cAAc,EAAE;EACjF,MAAMjsC,OAAO,GAAG,MAAMqvC,sBAAsB,CAACvS,WAAW,EAAEjyB,MAAM,EAAEpK,QAAQ,EAAEwrC,cAAc,CAAC;EAC3F,MAAMjrC,QAAQ,GAAG,MAAMlF,KAAK,CAAC,+CAA+C,EAAEkE,OAAO,CAAC;EACtF,IAAIgB,QAAQ,CAACsuC,EAAE,EAAE;IACf,MAAMC,IAAI,GAAG,MAAMvuC,QAAQ,CAACm5B,IAAI,CAAC,CAAC;IAClC,IAAI,CAACoV,IAAI,CAAChC,MAAM,EAAE;MAChB,MAAM,IAAI9wC,KAAK,8BAAAN,MAAA,CAA8BozC,IAAI,CAAC9e,GAAG,CAAE,CAAC;IAC1D;IACA,OAAO8e,IAAI,CAAChC,MAAM;EACpB;EACA,MAAM,IAAI9wC,KAAK,0CAAAN,MAAA,CAA0C6E,QAAQ,CAAC+tC,MAAM,QAAA5yC,MAAA,CAAK6E,QAAQ,CAACwuC,UAAU,MAAG,CAAC;AACtG;AACA,eAAeJ,oBAAoBA,CAACtS,WAAW,EAAEjyB,MAAM,EAAEpK,QAAQ,EAAE40B,OAAO,EAAE4W,cAAc,EAAE;EAC1Fn1C,SAAS,CAACm1C,cAAc,IAAI,cAAc,IAAIA,cAAc,EAAE,yFAAyF,CAAC;EACxJ,MAAMjsC,OAAO,GAAG,MAAMyvC,sBAAsB,CAAC3S,WAAW,EAAEjyB,MAAM,EAAEpK,QAAQ,EAAE40B,OAAO,EAAE4W,cAAc,CAAC;EACpG,MAAMjrC,QAAQ,GAAG,MAAMlF,KAAK,CAACmwC,cAAc,CAACpoC,YAAY,CAACC,UAAU,EAAE9D,OAAO,CAAC;EAC7E,IAAIgB,QAAQ,CAACsuC,EAAE,EAAE;IACf,MAAMC,IAAI,GAAG,MAAMvuC,QAAQ,CAACm5B,IAAI,CAAC,CAAC;IAClC,IAAI,CAACoV,IAAI,CAACxuC,MAAM,EAAE;MAChB,MAAM,IAAItE,KAAK,8BAAAN,MAAA,CAA8BozC,IAAI,CAACjuC,OAAO,CAAE,CAAC;IAC9D;IACA,MAAMP,MAAM,GAAGH,IAAI,CAACgH,KAAK,CAAC2nC,IAAI,CAACxuC,MAAM,CAAC;IACtC,OAAOA,MAAM,CAACwsC,MAAM;EACtB;EACA,MAAM,IAAI9wC,KAAK,0CAAAN,MAAA,CAA0C6E,QAAQ,CAAC+tC,MAAM,QAAA5yC,MAAA,CAAK6E,QAAQ,CAACwuC,UAAU,MAAG,CAAC;AACtG;AACA,eAAeC,sBAAsBA,CAAC3S,WAAW,EAAEjyB,MAAM,EAAEpK,QAAQ,EAAE40B,OAAO,EAAE4W,cAAc,EAAE;EAAA,IAAAyD,QAAA;EAC5F54C,SAAS,CAACm1C,cAAc,IAAI,cAAc,IAAIA,cAAc,EAAE,yFAAyF,CAAC;EACxJn1C,SAAS,CAAC+T,MAAM,EAAE,qBAAqB,CAAC;EACxC/T,SAAS,CAAC2J,QAAQ,EAAE,qBAAqB,CAAC;EAC1C,MAAMkvC,gBAAgB,GAAG1D,cAAc,CAACpoC,YAAY,CAACE,uBAAuB,KAAKkoC,cAAc,CAACpoC,YAAY,CAACG,eAAe,GAAGy+B,kBAAkB,CAAC3F,WAAW,CAACr6B,OAAO,CAAC,CAACkgC,wBAAwB,KAAK,MAAMwD,0BAA0B,CAAC1lC,QAAQ,EAAE40B,OAAO,CAAC,CAAC,GAAGoN,kBAAkB,CAAC3F,WAAW,CAACr6B,OAAO,CAAC,CAACigC,qBAAqB,KAAK,MAAM0D,uBAAuB,CAAC3lC,QAAQ,EAAE40B,OAAO,CAAC,CAAC,CAAC;EAC/W,MAAMsR,SAAS,GAAG,IAAI/vC,QAAQ,CAAC+4C,gBAAgB,EAAE9zC,YAAY,EAAE4E,QAAQ,CAAC;EACxE,MAAMqZ,KAAK,GAAG,MAAM4sB,oBAAoB,CAACC,SAAS,EAAE,UAAU,EAAE,CAAC7J,WAAW,CAACz+B,IAAI,CAAC,CAAC;EACnF,IAAI6oC,MAAM;EACV,IAAIC,KAAK;EACT,IAAI7lC,OAAO;EACX,IAAI2qC,cAAc,CAAC7nC,4BAA4B,EAAE;IAC/C8iC,MAAM,GAAG;MACPvkC,IAAI,EAAE,iBAAiB;MACvBpG,OAAO,EAAE,OAAO;MAChBusC,iBAAiB,EAAE6G;IACrB,CAAC;IACDxI,KAAK,GAAG;MACNd,cAAc,EAAEC;IAClB,CAAC;IACDhlC,OAAO,GAAG;MACRjD,IAAI,EAAEy+B,WAAW,CAACz+B,IAAI;MACtBiT,EAAE,EAAEwrB,WAAW,CAACxrB,EAAE;MAClB5S,KAAK,EAAElI,SAAS,CAAC6H,IAAI,CAAC,CAAC,CAAC,CAACE,QAAQ,CAAC,CAAC;MACnCsvC,GAAG,EAAEr3C,SAAS,CAAC6H,IAAI,CAACy+B,WAAW,CAACpjB,QAAQ,CAAC,CAACnb,QAAQ,CAAC,CAAC;MACpDub,KAAK,EAAEtjB,SAAS,CAAC6H,IAAI,CAACyb,KAAK,CAAC,CAACvb,QAAQ,CAAC,CAAC;MACvCN,IAAI,EAAE6+B,WAAW,CAAC7+B,IAAI;MACtB2xC,OAAO,EAAEp5C,SAAS,CAAC6H,IAAI,CAACy+B,WAAW,CAACr6B,OAAO,CAAC,CAAClE,QAAQ,CAAC;IACxD,CAAC;EACH,CAAC,MAAM;IACL2oC,MAAM,GAAG;MACPvkC,IAAI,EAAEspC,cAAc,CAACpoC,YAAY,CAACK,UAAU;MAC5C3H,OAAO,EAAE0vC,cAAc,CAACpoC,YAAY,CAACM,aAAa;MAClD1B,OAAO,EAAEq6B,WAAW,CAACr6B,OAAO;MAC5BqmC,iBAAiB,EAAE6G;IACrB,CAAC;IACDxI,KAAK,GAAG;MACNd;IACF,CAAC;IACD/kC,OAAO,GAAG;MACRjD,IAAI,EAAEy+B,WAAW,CAACz+B,IAAI;MACtBiT,EAAE,EAAEwrB,WAAW,CAACxrB,EAAE;MAClB5S,KAAK,EAAElI,SAAS,CAAC6H,IAAI,CAAC,CAAC,CAAC,CAACE,QAAQ,CAAC,CAAC;MACnCsvC,GAAG,EAAEr3C,SAAS,CAAC6H,IAAI,CAACy+B,WAAW,CAACpjB,QAAQ,CAAC,CAACnb,QAAQ,CAAC,CAAC;MACpDub,KAAK,EAAEtjB,SAAS,CAAC6H,IAAI,CAACyb,KAAK,CAAC,CAACvb,QAAQ,CAAC,CAAC;MACvCN,IAAI,EAAE6+B,WAAW,CAAC7+B;IACpB,CAAC;EACH;EACA,IAAIioB,SAAS;;EAEb;EACA;EACA,IAAI4W,WAAW,CAACtU,YAAY,KAAK,SAAS,IAAIsU,WAAW,CAACiR,YAAY,CAACvxC,MAAM,KAAK,CAAC,EAAE;IACnF,MAAM4sC,OAAO,GAAGtM,WAAW,CAACiR,YAAY,CAAC,CAAC,CAAC;IAC3C,MAAM8B,MAAM,GAAG/S,WAAW,CAACiR,YAAY,CAAC,CAAC,CAAC;IAC1C;IACA,MAAM;MACJzsC,OAAO,EAAEwuC,MAAM;MACf5pB,SAAS,EAAE6pB;IACb,CAAC,GAAG,MAAM7G,iBAAiB,CAACr+B,MAAM,EAAEiyB,WAAW,CAACxrB,EAAE,EAAEwrB,WAAW,CAACz+B,IAAI,EAAE+qC,OAAO,EAAEyG,MAAM,CAAC;IACtF,MAAM;MACJ3T,CAAC;MACDC,CAAC;MACD7lB;IACF,CAAC,GAAG5f,KAAK,CAACqxC,cAAc,CAACgI,GAAG,CAAC;IAC7BzuC,OAAO,GAAG;MACRgQ,EAAE,EAAEwrB,WAAW,CAACxrB,EAAE;MAClB63B,KAAK,EAAE2G,MAAM,CAAC3G,KAAK;MACnBC,OAAO,EAAE0G,MAAM,CAAC1G,OAAO;MACvB1qC,KAAK,EAAElI,SAAS,CAAC6H,IAAI,CAACyxC,MAAM,CAACpxC,KAAK,CAAC,CAACH,QAAQ,CAAC,CAAC;MAC9Cub,KAAK,EAAEtjB,SAAS,CAAC6H,IAAI,CAACyxC,MAAM,CAACh2B,KAAK,CAAC,CAACvb,QAAQ,CAAC,CAAC;MAC9C8qC,QAAQ,EAAE7yC,SAAS,CAAC6H,IAAI,CAACyxC,MAAM,CAACzG,QAAQ,CAAC,CAAC9qC,QAAQ,CAAC,CAAC;MACpD29B,CAAC;MACDC,CAAC;MACD7lB;IACF,CAAC;IACD4P,SAAS,GAAG6pB,GAAG;EACjB,CAAC,MAAM;IACL,MAAM;MACJ7pB,SAAS,EAAE6pB;IACb,CAAC,GAAG,MAAM/I,qBAAqB,CAACn8B,MAAM,EAAEq8B,MAAM,EAAEC,KAAK,EAAE7lC,OAAO,CAAC;IAC/D4kB,SAAS,GAAG6pB,GAAG;EACjB;EACA,IAAIC,WAAW,GAAG,SAAS;;EAE3B;EACA,KAAAN,QAAA,GAAIpuC,OAAO,cAAAouC,QAAA,eAAPA,QAAA,CAASvG,KAAK,EAAE;IAClB6G,WAAW,GAAG,QAAQ;EACxB;EACA,OAAO;IACLruC,MAAM,EAAE,MAAM;IACdsuC,IAAI,EAAErvC,IAAI,CAACC,SAAS,CAAC;MACnBb,OAAO,EAAEsB,OAAO;MAChB4kB,SAAS;MACTypB,gBAAgB;MAChBj9B,IAAI,EAAEs9B;IACR,CAAC;EACH,CAAC;AACH;AACA,eAAeE,qBAAqBA,CAAC9X,EAAE,EAAE;EACvC,MAAM+X,SAAS,GAAG,MAAM/X,EAAE,CAACkV,cAAc,CAAC,CAAC;EAC3C,MAAMrB,cAAc,GAAG7T,EAAE,CAACgU,iBAAiB,CAAC,CAAC;EAC7C,IAAIH,cAAc,IAAI,UAAU,IAAIA,cAAc,EAAE;IAClD,MAAMjsC,OAAO,GAAG,MAAMqvC,sBAAsB,CAACc,SAAS,EAAE/X,EAAE,CAACwR,SAAS,EAAExR,EAAE,CAACyR,WAAW,EAAEoC,cAAc,CAAC;IACrG,OAAO;MACL3sC,GAAG,EAAE,+CAA+C;MACpD,GAAGU;IACL,CAAC;EACH,CAAC,MAAM;IACLlJ,SAAS,CAACm1C,cAAc,IAAI,cAAc,IAAIA,cAAc,EAAE,yFAAyF,CAAC;IACxJ,MAAMjsC,OAAO,GAAG,MAAMyvC,sBAAsB,CAACU,SAAS,EAAE/X,EAAE,CAACwR,SAAS,EAAExR,EAAE,CAACyR,WAAW,EAAEzR,EAAE,CAAC0R,UAAU,EAAEmC,cAAc,CAAC;IACpH,OAAO;MACL3sC,GAAG,EAAE2sC,cAAc,CAACpoC,YAAY,CAACC,UAAU;MAC3C,GAAG9D;IACL,CAAC;EACH;AACF;AACA,eAAeqvC,sBAAsBA,CAACvS,WAAW,EAAEjyB,MAAM,EAAEpK,QAAQ,EAAEwrC,cAAc,EAAE;EAAA,IAAAmE,qBAAA;EACnFt5C,SAAS,CAACm1C,cAAc,IAAI,UAAU,IAAIA,cAAc,EAAE,+CAA+C,CAAC;EAC1Gn1C,SAAS,CAAC+T,MAAM,IAAIpK,QAAQ,EAAE,iCAAiC,CAAC;EAChE,MAAMkmC,SAAS,GAAG,IAAI/vC,QAAQ,CAACosC,2BAA2B,CAAClG,WAAW,CAACr6B,OAAO,EAAE,mBAAmB,CAAC,EAAE8jC,oBAAoB,EAAE9lC,QAAQ,CAAC;EACrI,MAAM4vC,OAAO,GAAG,CAAC;EACjB,MAAMC,UAAU,GAAG,MAAM5J,oBAAoB,CAACC,SAAS,EAAE,UAAU,EAAE,CAAC7J,WAAW,CAACz+B,IAAI,EAAEgyC,OAAO,CAAC,CAAC;EACjG,MAAMrwC,OAAO,GAAG;IACd3B,IAAI,EAAEy+B,WAAW,CAACz+B,IAAI;IACtBiT,EAAE,EAAEwrB,WAAW,CAACxrB,EAAE;IAClB2a,KAAK,EAAEt1B,SAAS,CAAC+W,WAAW;IAC5B6iC,KAAK,EAAEzT,WAAW,CAACpjB,QAAQ,CAAC5I,QAAQ,CAAC,CAAC;IACtC0/B,aAAa,EAAE,GAAG;IAClBH,OAAO;IACPC,UAAU,EAAEA,UAAU,CAACx/B,QAAQ,CAAC,CAAC;IACjCu4B,QAAQ,EAAEt7B,IAAI,CAACC,KAAK,CAACzC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI,IAAIygC,cAAc,IAAI,UAAU,IAAIA,cAAc,MAAAmE,qBAAA,GAAInE,cAAc,CAAC5nC,QAAQ,cAAA+rC,qBAAA,uBAAvBA,qBAAA,CAAyB5rC,eAAe,KAAI,IAAI,CAAC,CAAC;IAC9IvG,IAAI,EAAE6+B,WAAW,CAAC7+B;EACpB,CAAC;EACD,MAAMwyC,UAAU,GAAG/5C,KAAK,CAACqmC,QAAQ,CAACrmC,KAAK,CAACouC,iBAAiB,CAAC,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,EAAE,CAAC9kC,OAAO,CAAC3B,IAAI,EAAE2B,OAAO,CAACsR,EAAE,EAAEtR,OAAO,CAACisB,KAAK,EAAEjsB,OAAO,CAACuwC,KAAK,EAAEvwC,OAAO,CAACwwC,aAAa,EAAExwC,OAAO,CAACqwC,OAAO,EAAErwC,OAAO,CAACswC,UAAU,EAAEtwC,OAAO,CAACqpC,QAAQ,EAAE3yC,KAAK,CAACsmC,SAAS,CAACh9B,OAAO,CAAC/B,IAAI,CAAC,CAAC,CAAC,CAAC;EACtU,MAAMioB,SAAS,GAAG,MAAMrb,MAAM,CAAC6lC,WAAW,CAACD,UAAU,CAAC;EACtD,OAAO;IACL9uC,MAAM,EAAE,MAAM;IACdsuC,IAAI,EAAErvC,IAAI,CAACC,SAAS,CAAC;MACnBxC,IAAI,EAAEy+B,WAAW,CAACz+B,IAAI;MACtBiG,KAAK,EAAE2nC,cAAc,CAAC5nC,QAAQ,CAACC,KAAK;MACpC1C,MAAM,EAAE,CAAC5B,OAAO,EAAEkmB,SAAS,CAAC;MAC5B5U,EAAE,EAAEwrB,WAAW,CAACxrB,EAAE;MAClBoI,QAAQ,EAAEojB,WAAW,CAACpjB,QAAQ,CAACsvB,WAAW,CAAC;IAC7C,CAAC,CAAC;IACFrgC,OAAO,EAAE;MACP,WAAW,EAAEsjC,cAAc,CAAC5nC,QAAQ,CAACE,MAAM;MAC3C,cAAc,EAAE;IAClB;EACF,CAAC;AACH;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMosC,gBAAgB,CAAC;EAErBtxC,WAAWA,CAAC6a,eAAe,EAAE02B,MAAM,EAAEvb,OAAO,EAAE;IAAAwb,eAAA,sBADhCttB,gBAAgB,CAAC5gB,IAAI;IA0EnC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAbEkuC,eAAA,cAcM,eAAetY,wBAAwB,CAAC,MAAMjoB,QAAQ,IAAI;MAC9D,MAAM4B,GAAG,GAAG,MAAM,IAAI,CAAC4+B,uBAAuB,CAACxgC,QAAQ,CAAC;MACxD,MAAMygC,OAAO,GAAG,IAAI,CAAC72B,eAAe;MACpC,IAAI,IAAI,CAAC82B,wBAAwB,CAACD,OAAO,CAAC,EAAE;QAC1C,OAAOnF,WAAW,CAACC,mBAAmB,CAAC;UACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;UACrCvY,MAAM,EAAE,gBAAgB;UACxB0Y,IAAI,EAAE,CAACnI,GAAG,CAAC;UACXtK,KAAK,EAAEwlC,OAAO,IAAI;YAChB,OAAO;cACLA,OAAO;cACPnvC,IAAI,EAAE,IAAI,CAACmM;YACb,CAAC;UACH;QACF,CAAC,CAAC;MACJ,CAAC,MAAM;QACL,MAAM,IAAIuS,4BAA4B,CAAC4G,gBAAgB,CAAC;MAC1D;IACF,CAAC,CAAC;IAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAZEstB,eAAA,iBAaS,eAAetY,wBAAwB,CAAC,MAAMjoB,QAAQ,IAAI;MACjE,OAAO,MAAM,IAAI,CAAC/F,GAAG,CAAC+tB,OAAO,CAAC;QAC5B,IAAI,MAAM,IAAI,CAACluB,GAAG,CAAC,CAAC,CAAC;QACrB,GAAGkG;MACL,CAAC,CAAC;IACJ,CAAC,CAAC;IA5HA,IAAI,CAAC4J,eAAe,GAAGA,eAAe;IACtC,IAAI,CAAC02B,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACvb,OAAO,GAAGA,OAAO;EACxB;EACA;AACF;AACA;EACE4b,mBAAmBA,CAAC3gC,QAAQ,EAAE;IAC5B,OAAO,IAAI,CAACsgC,MAAM,CAACp8B,MAAM,CAACtF,UAAU,CAACoB,QAAQ,CAAC;EAChD;;EAEA;AACF;AACA;EACE4gC,kBAAkBA,CAAC5gC,QAAQ,EAAE;IAC3B,OAAO,IAAI,CAACsgC,MAAM,CAACn8B,KAAK,CAACvF,UAAU,CAACoB,QAAQ,CAAC;EAC/C;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMlG,GAAGA,CAAA,EAAG;IACV,IAAInM,IAAI;IACR,IAAI,IAAI,CAAC+yC,wBAAwB,CAAC,IAAI,CAAC92B,eAAe,CAAC,EAAE;MACvD,MAAMhI,GAAG,GAAG,MAAM,IAAI,CAACgI,eAAe,CAAC2R,IAAI,CAAC,aAAa,EAAE,EAAE,CAAC;MAC9D,IAAI3Z,GAAG,IAAIA,GAAG,CAACnI,QAAQ,CAAC,KAAK,CAAC,EAAE;QAC9B9L,IAAI,GAAG,MAAM,IAAI,CAACo3B,OAAO,CAACC,YAAY,CAACpjB,GAAG,CAAC;MAC7C;IACF;IACA,IAAI,CAACjU,IAAI,EAAE;MACT,IAAI;QAAA,IAAAkzC,kBAAA,EAAAC,mBAAA;QACF;QACA,IAAI9zB,YAAY;QAChB,IAAI;UACF,IAAIiL,WAAW,CAAC,MAAM,EAAE,IAAI,CAACrO,eAAe,CAAC,EAAE;YAC7CoD,YAAY,GAAG,MAAM,IAAI,CAACpD,eAAe,CAAC2R,IAAI,CAAC,MAAM,EAAE,EAAE,CAAC;UAC5D;QACF,CAAC,CAAC,OAAOrM,GAAG,EAAE;UACZ;QAAA;QAEF,IAAI6xB,cAAc;QAClB,IAAI;UACF,IAAI9oB,WAAW,CAAC,QAAQ,EAAE,IAAI,CAACrO,eAAe,CAAC,EAAE;YAC/Cm3B,cAAc,GAAG,MAAM,IAAI,CAACn3B,eAAe,CAAC2R,IAAI,CAAC,QAAQ,EAAE,EAAE,CAAC;UAChE;QACF,CAAC,CAAC,OAAOrM,GAAG,EAAE;UACZ;QAAA;QAEF,IAAIib,iBAAiB;QACrB,IAAI;UACFA,iBAAiB,GAAG,MAAMlD,gCAAgC,CAAC,IAAI,CAACrd,eAAe,CAAC7O,OAAO,EAAE,IAAI,CAAC6O,eAAe,CAAC2vB,WAAW,CAAC,CAAC,EAAE,IAAI,CAACxU,OAAO,EAAE,IAAI,CAACnb,eAAe,CAAC9S,OAAO,CAAC;QAC1K,CAAC,CAAC,OAAOoY,GAAG,EAAE,CAAC;QACfvhB,IAAI,GAAG;UACL0E,IAAI,EAAE2a,YAAY,MAAA6zB,kBAAA,GAAI1W,iBAAiB,cAAA0W,kBAAA,uBAAjBA,kBAAA,CAAmBxuC,IAAI;UAC7CC,MAAM,EAAEyuC,cAAc;UACtB1sC,WAAW,GAAAysC,mBAAA,GAAE3W,iBAAiB,cAAA2W,mBAAA,uBAAjBA,mBAAA,CAAmBh4B,IAAI,CAACL;QACvC,CAAC;MACH,CAAC,CAAC,OAAO9Q,CAAC,EAAE;QACV,MAAM,IAAIxL,KAAK,CAAC,mCAAmC,CAAC;MACtD;IACF;IACA,OAAO,IAAI,CAACw0C,mBAAmB,CAAChzC,IAAI,CAAC;EACvC;EAwDA;AACF;AACA;AACA;AACA;AACA;EACE,MAAM6yC,uBAAuBA,CAACxgC,QAAQ,EAAE;IACtC,MAAMghC,cAAc,GAAG,MAAM,IAAI,CAACJ,kBAAkB,CAAC5gC,QAAQ,CAAC;IAC9D,OAAO,IAAI,CAAC+kB,OAAO,CAACkc,MAAM,CAACD,cAAc,CAAC;EAC5C;EACAN,wBAAwBA,CAAC92B,eAAe,EAAE;IACxC,OAAOoO,qBAAqB,CAACpO,eAAe,EAAE,kBAAkB,CAAC;EACnE;AACF;;AAEA;AACA;AACA;AACA;AACA,MAAMs3B,OAAO,GAAG;EACdC,KAAK,EAAE,EAAE;EACTC,QAAQ,EAAE,eAAe;EACzBC,MAAM,EAAE,aAAa;EACrBC,MAAM,EAAE,aAAa;EACrBC,MAAM,EAAE,aAAa;EACrBC,KAAK,EAAE,YAAY;EACnBC,MAAM,EAAE,aAAa;EACrBrD,OAAO,EAAE,cAAc;EACvB7jC,MAAM,EAAE;AACV,CAAC;;AAED;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAMmnC,SAAS,GAAG,eAAe3sB,MAAM,CAACC,IAAI,CAACksB,OAAO,CAAC;;AAErD;AACA;AACA;AACA,SAASS,WAAWA,CAACj3B,IAAI,EAAE;EACzB,IAAIA,IAAI,KAAK,OAAO,EAAE;IACpB,OAAOtkB,KAAK,CAACyZ,UAAU,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;EAClC;EACA,OAAOzZ,KAAK,CAACmL,EAAE,CAAC2vC,OAAO,CAACx2B,IAAI,CAAC,CAAC;AAChC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMk3B,aAAa,CAAC;EAGlB;AACF;AACA;AACA;;EAEE7yC,WAAWA,CAAC6a,eAAe,EAAEi4B,MAAK,EAAE;IAAAtB,eAAA,sBAPtBvtB,mBAAmB,CAAC3gB,IAAI;IAgEtC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAlBEkuC,eAAA,iBAmBS,eAAetY,wBAAwB,CAAC,MAAM6Z,kBAAkB,IAAI;MAC3E,MAAMC,eAAe,GAAG,IAAIp4B,eAAe,CAAC,IAAI,CAACC,eAAe,CAAC;MACjE,MAAMi4B,KAAK,GAAG9sB,MAAM,CAACC,IAAI,CAAC8sB,kBAAkB,CAAC;MAC7Ct7C,SAAS,CAACq7C,KAAK,CAAC31C,MAAM,EAAE,2CAA2C,CAAC;MACpE1F,SAAS,CAACq7C,KAAK,CAACvrB,KAAK,CAAC5L,IAAI,IAAI,IAAI,CAACm3B,KAAK,CAACpoC,QAAQ,CAACiR,IAAI,CAAC,CAAC,EAAE,+CAA+C,CAAC;MAC1G,MAAMs3B,YAAY,GAAG,MAAM,IAAI,CAACC,MAAM,CAAC,CAAC;MACxC,MAAMC,OAAO,GAAG,EAAE;MAClB;MACA,MAAMC,WAAW,GAAGN,KAAK,CAACO,IAAI,CAAC13B,IAAI,IAAIA,IAAI,KAAK,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;MACjE,KAAK,IAAIlN,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG2kC,WAAW,CAACj2C,MAAM,EAAEsR,CAAC,EAAE,EAAE;QAAA,IAAA6kC,qBAAA,EAAAC,kBAAA;QAC3C,MAAM53B,IAAI,GAAGy3B,WAAW,CAAC3kC,CAAC,CAAC;QAC3B,MAAM+kC,SAAS,GAAG,MAAM3wC,OAAO,CAAC+M,GAAG,CAAC,EAAA0jC,qBAAA,GAAAP,kBAAkB,CAACp3B,IAAI,CAAC,cAAA23B,qBAAA,uBAAxBA,qBAAA,CAA0BvyC,GAAG,CAAC,MAAMqhC,YAAY,IAAI,MAAMD,cAAc,CAACC,YAAY,CAAC,CAAC,KAAI,EAAE,CAAC;QAClI,MAAMqR,gBAAgB,GAAG,MAAM5wC,OAAO,CAAC+M,GAAG,CAAC,EAAA2jC,kBAAA,GAAAN,YAAY,CAACt3B,IAAI,CAAC,cAAA43B,kBAAA,uBAAlBA,kBAAA,CAAoBxyC,GAAG,CAAC,MAAMqhC,YAAY,IAAI,MAAMD,cAAc,CAACC,YAAY,CAAC,CAAC,KAAI,EAAE,CAAC;QACnI,MAAMsR,KAAK,GAAGF,SAAS,CAAC/qC,MAAM,CAACuD,OAAO,IAAI,CAACynC,gBAAgB,CAAC/oC,QAAQ,CAACsB,OAAO,CAAC,CAAC;QAC9E,MAAM2nC,QAAQ,GAAGF,gBAAgB,CAAChrC,MAAM,CAACuD,OAAO,IAAI,CAACwnC,SAAS,CAAC9oC,QAAQ,CAACsB,OAAO,CAAC,CAAC;QACjF,IAAI0nC,KAAK,CAACv2C,MAAM,EAAE;UAChBu2C,KAAK,CAAC9xC,OAAO,CAACoK,OAAO,IAAI;YACvBmnC,OAAO,CAACrwC,IAAI,CAACkwC,eAAe,CAACl4B,MAAM,CAAC,WAAW,EAAE,CAAC83B,WAAW,CAACj3B,IAAI,CAAC,EAAE3P,OAAO,CAAC,CAAC,CAAC;UACjF,CAAC,CAAC;QACJ;QACA,IAAI2nC,QAAQ,CAACx2C,MAAM,EAAE;UACnB,KAAK,IAAI8yB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG0jB,QAAQ,CAACx2C,MAAM,EAAE8yB,CAAC,EAAE,EAAE;YACxC,MAAMjkB,OAAO,GAAG2nC,QAAQ,CAAC1jB,CAAC,CAAC;YAC3B,MAAM2jB,kBAAkB,GAAG,MAAM,IAAI,CAACC,yBAAyB,CAAC7nC,OAAO,CAAC;YACxEmnC,OAAO,CAACrwC,IAAI,CAACkwC,eAAe,CAACl4B,MAAM,CAAC84B,kBAAkB,EAAE,CAAChB,WAAW,CAACj3B,IAAI,CAAC,EAAE3P,OAAO,CAAC,CAAC,CAAC;UACxF;QACF;MACF;MACA,OAAOugC,WAAW,CAACC,mBAAmB,CAAC;QACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;QACrCvY,MAAM,EAAE,WAAW;QACnB0Y,IAAI,EAAE,CAACm4B,OAAO;MAChB,CAAC,CAAC;IACJ,CAAC,CAAC;IAoBF;AACF;AACA;IAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAjBE3B,eAAA,gBAkBQ,eAAetY,wBAAwB,CAAC,OAAOvd,IAAI,EAAE3P,OAAO,KAAK;MACvEvU,SAAS,CAAC,IAAI,CAACq7C,KAAK,CAACpoC,QAAQ,CAACiR,IAAI,CAAC,0CAAA7e,MAAA,CAAyC6e,IAAI,YAAQ,CAAC;MACzF,MAAMm4B,eAAe,GAAG,MAAM3R,cAAc,CAACn2B,OAAO,CAAC;MACrD,OAAOugC,WAAW,CAACC,mBAAmB,CAAC;QACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;QACrCvY,MAAM,EAAE,WAAW;QACnB0Y,IAAI,EAAE,CAAC43B,WAAW,CAACj3B,IAAI,CAAC,EAAEm4B,eAAe;MAC3C,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAvBEtC,eAAA,iBAwBS,eAAetY,wBAAwB,CAAC,OAAOvd,IAAI,EAAE3P,OAAO,KAAK;MACxEvU,SAAS,CAAC,IAAI,CAACq7C,KAAK,CAACpoC,QAAQ,CAACiR,IAAI,CAAC,0CAAA7e,MAAA,CAAyC6e,IAAI,YAAQ,CAAC;MACzF,MAAMm4B,eAAe,GAAG,MAAM3R,cAAc,CAACn2B,OAAO,CAAC;MACrD,MAAM4nC,kBAAkB,GAAG,MAAM,IAAI,CAACC,yBAAyB,CAACC,eAAe,CAAC;MAChF,OAAOvH,WAAW,CAACC,mBAAmB,CAAC;QACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;QACrCvY,MAAM,EAAEsxC,kBAAkB;QAC1B54B,IAAI,EAAE,CAAC43B,WAAW,CAACj3B,IAAI,CAAC,EAAEm4B,eAAe;MAC3C,CAAC,CAAC;IACJ,CAAC,CAAC;IAjMA,IAAI,CAACj5B,eAAe,GAAGA,eAAe;IACtC,IAAI,CAACi4B,KAAK,GAAGA,MAAK;EACpB;;EAEA;AACF;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMI,MAAMA,CAAA,EAAG;IACbz7C,SAAS,CAAC,IAAI,CAACq7C,KAAK,CAAC31C,MAAM,EAAE,wCAAwC,CAAC;IACtE,MAAM21C,KAAK,GAAG,CAAC,CAAC;IAChB,KAAK,MAAMn3B,IAAI,IAAI,IAAI,CAACm3B,KAAK,EAAE;MAC7BA,KAAK,CAACn3B,IAAI,CAAC,GAAG,MAAM,IAAI,CAAC5Q,GAAG,CAAC4Q,IAAI,CAAC;IACpC;IACA,OAAOm3B,KAAK;EACd;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAM/nC,GAAGA,CAAC4Q,IAAI,EAAE;IACdlkB,SAAS,CAAC,IAAI,CAACq7C,KAAK,CAACpoC,QAAQ,CAACiR,IAAI,CAAC,0CAAA7e,MAAA,CAAyC6e,IAAI,YAAQ,CAAC;IACzF,MAAM+1B,OAAO,GAAG,IAAI,CAAC72B,eAAe;IACpC,IAAIqO,WAAW,CAAC,oBAAoB,EAAEwoB,OAAO,CAAC,IAAIxoB,WAAW,CAAC,eAAe,EAAEwoB,OAAO,CAAC,EAAE;MACvF,MAAMqC,QAAQ,GAAGnB,WAAW,CAACj3B,IAAI,CAAC;MAClC,MAAMq4B,KAAK,GAAG,CAAC,MAAMtC,OAAO,CAACllB,IAAI,CAAC,oBAAoB,EAAE,CAACunB,QAAQ,CAAC,CAAC,EAAEtiC,QAAQ,CAAC,CAAC;MAC/E,OAAO,MAAM5O,OAAO,CAAC+M,GAAG,CAACiQ,KAAK,CAAC7gB,IAAI,CAAC6gB,KAAK,CAACm0B,KAAK,CAAC,CAAC/tB,IAAI,CAAC,CAAC,CAAC,CAACllB,GAAG,CAAC0N,CAAC,IAAIijC,OAAO,CAACllB,IAAI,CAAC,eAAe,EAAE,CAACunB,QAAQ,EAAEtlC,CAAC,CAAC,CAAC,CAAC,CAAC;IAClH;IACA,MAAM,IAAIrR,KAAK,CAAC,oHAAoH,CAAC;EACvI;EAwDA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAM62C,MAAMA,CAACnB,KAAK,EAAE9mC,OAAO,EAAE;IAC3B,MAAMnJ,OAAO,CAAC+M,GAAG,CAACkjC,KAAK,CAAC/xC,GAAG,CAAC,MAAM4a,IAAI,IAAI;MACxC,MAAMu4B,OAAO,GAAG,MAAM,IAAI,CAACnpC,GAAG,CAAC4Q,IAAI,CAAC;MACpC,MAAMm4B,eAAe,GAAG,MAAM3R,cAAc,CAACn2B,OAAO,CAAC;MACrD,IAAI,CAACkoC,OAAO,CAACnzC,GAAG,CAAC7K,CAAC,IAAIA,CAAC,CAACiT,WAAW,CAAC,CAAC,CAAC,CAACuB,QAAQ,CAACopC,eAAe,CAAC3qC,WAAW,CAAC,CAAC,CAAC,EAAE;QAC9E,MAAM,IAAIuS,gBAAgB,CAACo4B,eAAe,EAAEn4B,IAAI,CAAC;MACnD;IACF,CAAC,CAAC,CAAC;EACL;EAqEA;AACF;AACA;;EAEE,MAAMk4B,yBAAyBA,CAAC7nC,OAAO,EAAE;IACvC,MAAM8nC,eAAe,GAAG,MAAM3R,cAAc,CAACn2B,OAAO,CAAC;IACrD,MAAMo8B,aAAa,GAAG,MAAM,IAAI,CAACvtB,eAAe,CAACwxB,gBAAgB,CAAC,CAAC;IACnE,IAAIjE,aAAa,CAACj/B,WAAW,CAAC,CAAC,KAAK2qC,eAAe,CAAC3qC,WAAW,CAAC,CAAC,EAAE;MACjE,OAAO,cAAc;IACvB;IACA,OAAO,YAAY;EACrB;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMgrC,eAAe,CAAC;EAEpBn0C,WAAWA,CAAC6a,eAAe,EAAE5J,QAAQ,EAAE;IAAAugC,eAAA,sBADzB3tB,eAAe,CAACvgB,IAAI;IA+ClC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAZEkuC,eAAA,gCAawB,eAAetY,wBAAwB,CAAC,MAAMkb,WAAW,IAAI;MACnF;MACA,MAAMC,WAAW,GAAG,MAAM,IAAI,CAACpjC,QAAQ,CAAClG,GAAG,CAAC,CAAC;;MAE7C;MACA;MACA,MAAMupC,cAAc,GAAG,MAAM,IAAI,CAACrjC,QAAQ,CAAC4gC,kBAAkB,CAAC;QAC5D,GAAGwC,WAAW;QACd,GAAGD;MACL,CAAC,CAAC;;MAEF;MACA;MACA,MAAMG,WAAW,GAAG,MAAM,IAAI,CAACtjC,QAAQ,CAACwgC,uBAAuB,CAAC6C,cAAc,CAAC;MAC/E,IAAIprB,WAAW,CAAC,gBAAgB,EAAE,IAAI,CAACrO,eAAe,CAAC,EAAE;QACvD,MAAMm4B,eAAe,GAAG,IAAIp4B,eAAe,CAAC,IAAI,CAACC,eAAe,CAAC;QACjE;QACA,MAAMs4B,OAAO,GAAG,CAACH,eAAe,CAACl4B,MAAM,CAAC,uBAAuB,EAAE,CAACw5B,cAAc,CAACpgC,aAAa,EAAEogC,cAAc,CAACrgC,uBAAuB,CAAC,CAAC,EAAE++B,eAAe,CAACl4B,MAAM,CAAC,gBAAgB,EAAE,CAACy5B,WAAW,CAAC,CAAC,CAAC;QAClM;;QAEA,OAAOhI,WAAW,CAACC,mBAAmB,CAAC;UACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;UACrCvY,MAAM,EAAE,WAAW;UACnB0Y,IAAI,EAAE,CAACm4B,OAAO,CAAC;UACf5qC,KAAK,EAAEwlC,OAAO,KAAK;YACjBA,OAAO;YACPnvC,IAAI,EAAEA,CAAA,KAAM,IAAI,CAAC41C,qBAAqB,CAAC;UACzC,CAAC;QACH,CAAC,CAAC;MACJ,CAAC,MAAM;QACL,MAAM,IAAIp3C,KAAK,CAAC,kHAAkH,CAAC;MACrI;IACF,CAAC,CAAC;IAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAdEo0C,eAAA,8BAesB,eAAetY,wBAAwB,CAAC,OAAOlmB,OAAO,EAAEohC,WAAW,KAAK;MAC5F,MAAMK,iBAAiB,GAAGzgC,mBAAmB,CAACzL,KAAK,CAAC6rC,WAAW,CAAC;MAChE,OAAO7H,WAAW,CAACC,mBAAmB,CAAC;QACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;QACrCvY,MAAM,EAAE,wBAAwB;QAChC0Y,IAAI,EAAE,CAAChI,OAAO,EAAEyhC,iBAAiB,CAACvgC,aAAa,EAAEugC,iBAAiB,CAACxgC,uBAAuB,CAAC;QAC3F1L,KAAK,EAAEwlC,OAAO,KAAK;UACjBA,OAAO;UACPnvC,IAAI,EAAEA,CAAA,KAAM,IAAI,CAAC41C,qBAAqB,CAAC;QACzC,CAAC;MACH,CAAC,CAAC;IACJ,CAAC,CAAC;IAtHA,IAAI,CAAC35B,eAAe,GAAGA,eAAe;IACtC,IAAI,CAAC5J,QAAQ,GAAGA,QAAQ;EAC1B;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMujC,qBAAqBA,CAAA,EAAG;IAC5B,MAAM,CAAC9hC,gBAAgB,EAAEC,UAAU,CAAC,GAAG,MAAM,IAAI,CAACkI,eAAe,CAAC2R,IAAI,CAAC,uBAAuB,EAAE,EAAE,CAAC;IACnG;IACA,OAAOxY,mBAAmB,CAACnE,UAAU,CAAC;MACpCqE,aAAa,EAAExB,gBAAgB;MAC/BuB,uBAAuB,EAAEtB;IAC3B,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAM+hC,mBAAmBA,CAAC1hC,OAAO,EAAE;IACjC,MAAM,CAACN,gBAAgB,EAAEC,UAAU,CAAC,GAAG,MAAM,IAAI,CAACkI,eAAe,CAAC2R,IAAI,CAAC,wBAAwB,EAAE,CAACxZ,OAAO,CAAC,CAAC;IAC3G,OAAOgB,mBAAmB,CAACnE,UAAU,CAAC;MACpCqE,aAAa,EAAExB,gBAAgB;MAC/BuB,uBAAuB,EAAEtB;IAC3B,CAAC,CAAC;EACJ;AA4EF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMgiC,mBAAmB,CAAC;EAExB30C,WAAWA,CAAC6a,eAAe,EAAE;IAAA22B,eAAA,sBADf1tB,oBAAoB,CAACxgB,IAAI;IAoBvC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IATEkuC,eAAA,uBAUe,eAAetY,wBAAwB,CAAC,MAAM0b,SAAS,IAAI;MACxE,OAAOrI,WAAW,CAACC,mBAAmB,CAAC;QACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;QACrCvY,MAAM,EAAE,yBAAyB;QACjC0Y,IAAI,EAAE,CAAC45B,SAAS;MAClB,CAAC,CAAC;IACJ,CAAC,CAAC;IAlCA,IAAI,CAAC/5B,eAAe,GAAGA,eAAe;EACxC;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMg6B,YAAYA,CAAA,EAAG;IACnB,MAAMnzC,MAAM,GAAG,MAAM,IAAI,CAACmZ,eAAe,CAAC2R,IAAI,CAAC,sBAAsB,EAAE,EAAE,CAAC;IAC1E,OAAO9qB,MAAM;EACf;AAmBF;AAEA,MAAMozC,iBAAiB,GAAG;EACxBxxC,IAAI,EAAE;AACR,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeyxC,kBAAkBA,CAAC/hC,OAAO,EAAEgiC,QAAQ,EAAEhf,OAAO,EAAE;EAC5D;EACA,IAAIgf,QAAQ,CAACvvB,UAAU,CAAC,8BAA8B,CAAC,IAAI,OAAO7T,MAAM,KAAK,WAAW,EAAE;IACxF,MAAMqjC,MAAM,GAAGD,QAAQ,CAACp2B,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACrC,MAAMs2B,YAAY,GAAG3zC,IAAI,CAACgH,KAAK,CAACqJ,MAAM,CAAC5S,IAAI,CAACi2C,MAAM,EAAE,QAAQ,CAAC,CAAC/1C,QAAQ,CAAC,OAAO,CAAC,CAAC;IAChF,OAAOzI,eAAe,CAAC8R,KAAK,CAAC;MAC3B,GAAG2sC,YAAY;MACf1yC,EAAE,EAAErL,SAAS,CAAC6H,IAAI,CAACgU,OAAO,CAAC,CAAC9T,QAAQ,CAAC,CAAC;MACtC2T,GAAG,EAAEmiC;IACP,CAAC,CAAC;EACJ;EACA;EACA,MAAMG,SAAS,GAAGH,QAAQ,CAAC91B,OAAO,CAAC,MAAM,EAAE7nB,KAAK,CAACyZ,UAAU,CAAC3Z,SAAS,CAAC6H,IAAI,CAACgU,OAAO,CAAC,CAAC22B,WAAW,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC1/B,KAAK,CAAC,CAAC,CAAC,CAAC;EAChH,IAAIirC,YAAY;EAChB,IAAI;IACFA,YAAY,GAAG,MAAMlf,OAAO,CAACC,YAAY,CAACkf,SAAS,CAAC;EACtD,CAAC,CAAC,OAAOh1B,GAAG,EAAE;IACZ,MAAMi1B,kBAAkB,GAAGJ,QAAQ,CAAC91B,OAAO,CAAC,MAAM,EAAE/nB,SAAS,CAAC6H,IAAI,CAACgU,OAAO,CAAC,CAAC9T,QAAQ,CAAC,CAAC,CAAC;IACvF,IAAI;MACFg2C,YAAY,GAAG,MAAMlf,OAAO,CAACC,YAAY,CAACmf,kBAAkB,CAAC;IAC/D,CAAC,CAAC,OAAOxsC,CAAC,EAAE;MACVusB,OAAO,CAACC,IAAI,kCAAAt4B,MAAA,CAAkCyE,IAAI,CAACC,SAAS,CAAC;QAC3DwR,OAAO,EAAEA,OAAO,CAAC9T,QAAQ,CAAC,CAAC;QAC3B81C;MACF,CAAC,CAAC,yCAAsC,CAAC;MACzCE,YAAY,GAAGJ,iBAAiB;IAClC;EACF;EACA,OAAOr+C,eAAe,CAAC8R,KAAK,CAAC;IAC3B,GAAG2sC,YAAY;IACf1yC,EAAE,EAAErL,SAAS,CAAC6H,IAAI,CAACgU,OAAO,CAAC,CAAC9T,QAAQ,CAAC,CAAC;IACtC2T,GAAG,EAAEmiC;EACP,CAAC,CAAC;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeK,6BAA6BA,CAACn5B,eAAe,EAAE9a,QAAQ,EAAE4R,OAAO,EAAEgjB,OAAO,EAAE;EACxF,IAAInjB,GAAG;EACP,MAAMyiC,MAAM,GAAG,IAAI/9C,QAAQ,CAAC2kB,eAAe,EAAEnkB,SAAS,EAAEqJ,QAAQ,CAAC;EACjE,MAAM,CAACm0C,QAAQ,EAAEC,SAAS,CAAC,GAAG,MAAM3yC,OAAO,CAAC+M,GAAG,CAAC,CAAC0lC,MAAM,CAACG,iBAAiB,CAAC5R,mBAAmB,CAAC,EAAEyR,MAAM,CAACG,iBAAiB,CAAC3R,oBAAoB,CAAC,CAAC,CAAC;EAChJ,IAAIyR,QAAQ,EAAE;IACZ,MAAMG,MAAM,GAAG,IAAIn+C,QAAQ,CAAC2kB,eAAe,EAAElkB,kBAAkB,EAAEoJ,QAAQ,CAAC;IAC1EyR,GAAG,GAAG,MAAM6iC,MAAM,CAACC,QAAQ,CAAC3iC,OAAO,CAAC;EACtC,CAAC,MAAM,IAAIwiC,SAAS,EAAE;IACpB,MAAMI,OAAO,GAAG,IAAIr+C,QAAQ,CAAC2kB,eAAe,EAAEjkB,kBAAkB,EAAEmJ,QAAQ,CAAC;IAC3EyR,GAAG,GAAG,MAAM+iC,OAAO,CAAC/iC,GAAG,CAACG,OAAO,CAAC;EAClC,CAAC,MAAM;IACL,MAAM5V,KAAK,CAAC,8CAA8C,CAAC;EAC7D;EACA,IAAI,CAACyV,GAAG,EAAE;IACR;IACA,OAAOpc,eAAe,CAAC8R,KAAK,CAAC;MAC3B,GAAGusC,iBAAiB;MACpBtyC,EAAE,EAAErL,SAAS,CAAC6H,IAAI,CAACgU,OAAO,CAAC,CAAC9T,QAAQ,CAAC,CAAC;MACtC2T,GAAG,EAAE;IACP,CAAC,CAAC;EACJ;EACA,OAAOkiC,kBAAkB,CAAC/hC,OAAO,EAAEH,GAAG,EAAEmjB,OAAO,CAAC;AAClD;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe6f,kBAAkBA,CAAC5kC,QAAQ,EAAE+kB,OAAO,EAAE;EACnD,IAAI,OAAO/kB,QAAQ,KAAK,QAAQ,EAAE;IAChC,OAAOA,QAAQ;EACjB,CAAC,MAAM;IACL,OAAO,MAAM+kB,OAAO,CAACkc,MAAM,CAACv7C,cAAc,CAAC4R,KAAK,CAAC0I,QAAQ,CAAC,CAAC;EAC7D;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe6kC,mBAAmBA,CAACC,SAAS,EAAE/f,OAAO,EAAEggB,WAAW,EAAEjuC,OAAO,EAAE;EAC3E,IAAIkuC,SAAS,CAACF,SAAS,CAAC,EAAE;IACxB,OAAOA,SAAS;EAClB,CAAC,MAAM,IAAIG,cAAc,CAACH,SAAS,CAAC,EAAE;IACpC,MAAMI,IAAI,GAAG,MAAMngB,OAAO,CAACogB,WAAW,CAACL,SAAS,CAACh1C,GAAG,CAACovB,CAAC,IAAIx5B,cAAc,CAAC4R,KAAK,CAAC4nB,CAAC,CAAC,CAAC,EAAE;MAClFkmB,gBAAgB,EAAE;QAChBC,eAAe,EAAEN,WAAW,IAAI;MAClC,CAAC;MACDO,UAAU,EAAExuC,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEwuC;IACvB,CAAC,CAAC;IACF,OAAOJ,IAAI;EACb,CAAC,MAAM;IACL,MAAM,IAAI/4C,KAAK,CAAC,8EAA8E,CAAC;EACjG;AACF;AACA,SAASo5C,mBAAmBA,CAACL,IAAI,EAAE;EACjC,MAAMM,OAAO,GAAGN,IAAI,CAAC,CAAC,CAAC,CAAC5Z,SAAS,CAAC,CAAC,EAAE4Z,IAAI,CAAC,CAAC,CAAC,CAACO,WAAW,CAAC,GAAG,CAAC,CAAC;EAC9D,KAAK,IAAIjoC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG0nC,IAAI,CAACh5C,MAAM,EAAEsR,CAAC,EAAE,EAAE;IACpC,MAAMoE,GAAG,GAAGsjC,IAAI,CAAC1nC,CAAC,CAAC,CAAC8tB,SAAS,CAAC,CAAC,EAAE4Z,IAAI,CAAC1nC,CAAC,CAAC,CAACioC,WAAW,CAAC,GAAG,CAAC,CAAC;IAC1D,IAAID,OAAO,KAAK5jC,GAAG,EAAE;MACnB,MAAM,IAAIzV,KAAK,2FAAAN,MAAA,CAA2F25C,OAAO,iBAAA35C,MAAA,CAAc+V,GAAG,MAAG,CAAC;IACxI;EACF;;EAEA;EACA,OAAO4jC,OAAO,CAACv3B,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,GAAG,GAAG;AACzC;AACA,SAAS+2B,SAASA,CAACF,SAAS,EAAE;EAC5B,OAAOA,SAAS,CAAC3nC,IAAI,CAAC+hB,CAAC,IAAI,OAAOA,CAAC,KAAK,QAAQ,CAAC,KAAK9vB,SAAS;AACjE;AACA,SAAS61C,cAAcA,CAACH,SAAS,EAAE;EACjC,OAAOA,SAAS,CAAC3nC,IAAI,CAAC+hB,CAAC,IAAI,OAAOA,CAAC,KAAK,QAAQ,CAAC,KAAK9vB,SAAS;AACjE;;AAEA;AACA;AACA;AACA;AACA,MAAMs2C,aAAa,CAAC;EAClB32C,WAAWA,CAAC6a,eAAe,EAAEmb,OAAO,EAAEpN,WAAW,EAAEguB,mBAAmB,EAAE;IAOxE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAhCEpF,eAAA,mCAiC2B,eAAetY,wBAAwB,CAAC,OAAO2d,WAAW,EAAEd,SAAS,EAAEe,QAAQ,EAAE/uC,OAAO,KAAK;MACtH,IAAI,CAAC+uC,QAAQ,EAAE;QACb,MAAM,IAAI15C,KAAK,CAAC,sBAAsB,CAAC;MACzC;MACA,MAAM25C,eAAe,GAAG,MAAM,IAAI,CAAC/gB,OAAO,CAACogB,WAAW,CAAC,CAACz/C,cAAc,CAAC4R,KAAK,CAACsuC,WAAW,CAAC,CAAC,EAAE;QAC1FR,gBAAgB,EAAE;UAChBC,eAAe,EAAE;QACnB;MACF,CAAC,CAAC;MACF,MAAMU,cAAc,GAAGR,mBAAmB,CAACO,eAAe,CAAC;MAC3D,MAAME,eAAe,GAAG,MAAM,IAAI,CAACL,mBAAmB,CAAC,CAAC;MACxD,MAAMT,IAAI,GAAG,MAAM,IAAI,CAACngB,OAAO,CAACogB,WAAW,CAACL,SAAS,CAACh1C,GAAG,CAACovB,CAAC,IAAIx5B,cAAc,CAAC4R,KAAK,CAAC4nB,CAAC,CAAC,CAAC,EAAE;QACvFomB,UAAU,EAAExuC,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEwuC,UAAU;QAC/BF,gBAAgB,EAAE;UAChBC,eAAe,EAAEW,eAAe,CAACxlC,QAAQ,CAAC;QAC5C;MACF,CAAC,CAAC;MACF,MAAMglC,OAAO,GAAGD,mBAAmB,CAACL,IAAI,CAAC;MACzC,MAAMe,SAAS,GAAG,MAAM,IAAI,CAACr8B,eAAe,CAAC2R,IAAI,CAAC,iBAAiB,EAAE,EAAE,CAAC;MACxE,MAAM2qB,cAAc,GAAG,MAAM,IAAI,CAACC,uBAAuB,CAACF,SAAS,EAAEJ,QAAQ,CAAC;MAC9E,MAAMO,gBAAgB,GAAG,MAAM,IAAI,CAACx8B,eAAe,CAAC2R,IAAI,CAAC,gBAAgB,EAAE,CAACn1B,KAAK,CAAC0a,WAAW,CAAC0kC,OAAO,CAAC,EAAEU,cAAc,CAAC,CAAC;MACxH,IAAIv4C,IAAI;MACR,MAAM04C,cAAc,GAAG,MAAM,IAAI,CAACC,gBAAgB,CAAC,CAAC;MACpD,IAAID,cAAc,EAAE;QAClB14C,IAAI,GAAGy4C,gBAAgB;MACzB,CAAC,MAAM;QACL,MAAMj0C,OAAO,GAAG,MAAM,IAAI,CAACyX,eAAe,CAAC28B,UAAU,CAAC,CAAC;QACvD,MAAMC,cAAc,GAAGpgD,KAAK,CAACouC,iBAAiB,CAAC,CAAC,OAAO,EAAE,OAAO,EAAE,SAAS,CAAC,EAAE,CAACpuC,KAAK,CAAC0a,WAAW,CAAC0kC,OAAO,CAAC,EAAEU,cAAc,EAAE/zC,OAAO,CAAC,CAAC;QACpIxE,IAAI,GAAGvH,KAAK,CAACwvC,eAAe,CAAC/rB,MAAM,CAAC,CAAC,OAAO,EAAE,SAAS,CAAC,EAAE,CAACu8B,gBAAgB,EAAEI,cAAc,CAAC,CAAC;MAC/F;MACA,OAAOlL,WAAW,CAACC,mBAAmB,CAAC;QACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;QACrCvY,MAAM,EAAE,UAAU;QAClB0Y,IAAI,EAAE,CAACm7B,IAAI,CAACh5C,MAAM,EAAE65C,cAAc,CAAC1rC,QAAQ,CAAC,GAAG,CAAC,GAAG0rC,cAAc,MAAAl6C,MAAA,CAAMk6C,cAAc,MAAG,EAAEp4C,IAAI,CAAC;QAC/F2J,KAAK,EAAEwlC,OAAO,IAAI;UAChB,MAAMuB,MAAM,GAAG,IAAI,CAACz0B,eAAe,CAAC68B,SAAS,CAAC,kBAAkB,EAAE3J,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAE4J,IAAI,CAAC;UAChF,MAAMC,aAAa,GAAGtI,MAAM,CAAC,CAAC,CAAC,CAACt0B,IAAI,CAAC68B,YAAY;UACjD,MAAMC,WAAW,GAAGxI,MAAM,CAAC,CAAC,CAAC,CAACt0B,IAAI,CAAC+8B,UAAU;UAC7C,MAAM1vB,OAAO,GAAG,EAAE;UAClB,KAAK,IAAI7lB,EAAE,GAAGo1C,aAAa,EAAEp1C,EAAE,CAACw1C,GAAG,CAACF,WAAW,CAAC,EAAEt1C,EAAE,GAAGA,EAAE,CAACy3B,GAAG,CAAC,CAAC,CAAC,EAAE;YAChE5R,OAAO,CAACvlB,IAAI,CAAC;cACXN,EAAE;cACFurC;YACF,CAAC,CAAC;UACJ;UACA,OAAO1lB,OAAO;QAChB;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAbEmpB,eAAA,iBAcS,eAAetY,wBAAwB,CAAC,OAAO8X,OAAO,EAAE8F,QAAQ,KAAK;MAC5E,IAAI,CAACA,QAAQ,EAAE;QACb,MAAM,IAAI15C,KAAK,CAAC,sBAAsB,CAAC;MACzC;MACA,MAAM4rB,GAAG,GAAG,MAAM,IAAI,CAACouB,uBAAuB,CAACpG,OAAO,EAAE8F,QAAQ,CAAC;MACjE;MACA,IAAI;QACF,MAAMmB,YAAY,GAAG,MAAM,IAAI,CAACp9B,eAAe,CAAC4yB,UAAU,CAAC,CAAC,CAACyK,MAAM,CAAClH,OAAO,EAAEhoB,GAAG,CAAC;QACjF;QACA;QACA;QACA,IAAI,CAACivB,YAAY,CAACvtC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAACutC,YAAY,CAAC3sC,QAAQ,CAAC,GAAG,CAAC,EAAE;UAChE,MAAM,IAAIlO,KAAK,CAAC,kBAAkB,CAAC;QACrC;MACF,CAAC,CAAC,OAAOwL,CAAC,EAAE;QACV,MAAM,IAAIxL,KAAK,CAAC,kBAAkB,CAAC;MACrC;MACA,OAAOmvC,WAAW,CAACC,mBAAmB,CAAC;QACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;QACrCvY,MAAM,EAAE,QAAQ;QAChB0Y,IAAI,EAAE,CAACg2B,OAAO,EAAEhoB,GAAG;MACrB,CAAC,CAAC;IACJ,CAAC,CAAC;IA7HA,IAAI,CAACJ,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACguB,mBAAmB,GAAGA,mBAAmB;IAC9C,IAAI,CAAC/7B,eAAe,GAAGA,eAAe;IACtC,IAAI,CAACmb,OAAO,GAAGA,OAAO;EACxB;EA2HA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMmiB,kBAAkBA,CAAA,EAAG;IACzB,MAAMnE,KAAK,GAAG,MAAM,IAAI,CAACn5B,eAAe,CAAC2R,IAAI,CAAC,iBAAiB,EAAE,EAAE,CAAC;IACpE,IAAIwnB,KAAK,CAACoE,MAAM,CAAC,CAAC,EAAE;MAClB,OAAO,EAAE;IACX;IACA,MAAMC,eAAe,GAAGx4B,KAAK,CAAC7gB,IAAI,CAAC6gB,KAAK,CAACm0B,KAAK,CAACviC,QAAQ,CAAC,CAAC,CAAC,CAACwU,IAAI,CAAC,CAAC,CAAC;IAClE;IACA,MAAMqyB,UAAU,GAAG,MAAMz1C,OAAO,CAAC+M,GAAG,CAACyoC,eAAe,CAACt3C,GAAG,CAAC0N,CAAC,IAAI;MAC5D,IAAIya,WAAW,CAAC,mBAAmB,EAAE,IAAI,CAACrO,eAAe,CAAC,EAAE;QAC1D,OAAO,IAAI,CAACA,eAAe,CAAC2R,IAAI,CAAC,mBAAmB,EAAE,CAAC/d,CAAC,CAAC,CAAC;MAC5D;MACA,IAAIya,WAAW,CAAC,gBAAgB,EAAE,IAAI,CAACrO,eAAe,CAAC,EAAE;QACvD,OAAO,IAAI,CAACA,eAAe,CAAC2R,IAAI,CAAC,gBAAgB,EAAE,CAAC/d,CAAC,CAAC,CAAC;MACzD;MACA,MAAM,IAAIrR,KAAK,CAAC,6DAA6D,CAAC;IAChF,CAAC,CAAC,CAAC;;IAEH;IACA,MAAMm7C,uBAAuB,GAAGD,UAAU,CAACruC,KAAK,CAAC,CAAC,EAAEquC,UAAU,CAACn7C,MAAM,GAAG,CAAC,CAAC;;IAE1E;IACA,MAAMq7C,cAAc,GAAG,MAAM31C,OAAO,CAAC+M,GAAG,CAACiQ,KAAK,CAAC7gB,IAAI,CAAC,CAAC,CAAC,EAAE,GAAGu5C,uBAAuB,CAAC,CAAC,CAACx3C,GAAG,CAAC0N,CAAC,IAAI,IAAI,CAACgqC,cAAc,CAAChqC,CAAC,CAACvP,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;;IAEjI;IACA,MAAMo4C,cAAc,GAAG,MAAM,IAAI,CAACC,gBAAgB,CAAC,CAAC;IACpD,MAAMmB,gBAAgB,GAAG,MAAM71C,OAAO,CAAC+M,GAAG,CAACiQ,KAAK,CAAC7gB,IAAI,CAAC,CAAC,GAAGs5C,UAAU,CAAC,CAAC,CAACv3C,GAAG,CAAC0N,CAAC,IAAI6oC,cAAc,GAAG,IAAI,CAACqB,sBAAsB,CAAClqC,CAAC,CAAC,GAAG,IAAI,CAACoM,eAAe,CAAC2R,IAAI,CAAC,eAAe,EAAE,CAAC/d,CAAC,CAAC,CAAC,CAAC,CAAC;IACnL,MAAMmqC,iBAAiB,GAAGF,gBAAgB,CAAC33C,GAAG,CAACnC,IAAI,IAAI;MACrD,IAAIvH,KAAK,CAACwhD,aAAa,CAACj6C,IAAI,CAAC,GAAG,CAAC,EAAE;QACjC,IAAI04C,cAAc,EAAE;UAClB,OAAO14C,IAAI;QACb;QACA,MAAM8C,MAAM,GAAGrK,KAAK,CAACwvC,eAAe,CAACzrB,MAAM,CAAC,CAAC,OAAO,EAAE,SAAS,CAAC,EAAExc,IAAI,CAAC;QACvE,OAAO8C,MAAM,CAAC,CAAC,CAAC;MAClB,CAAC,MAAM;QACL,OAAO9C,IAAI;MACb;IACF,CAAC,CAAC;IACF,OAAO45C,cAAc,CAACz3C,GAAG,CAAC,CAACwhC,IAAI,EAAEzgC,KAAK,MAAM;MAC1CkvC,OAAO,EAAE75C,SAAS,CAAC6H,IAAI,CAAC8C,KAAK,CAAC;MAC9Bg3C,QAAQ,EAAEvW,IAAI,CAAC1vB,GAAG;MAClBkmC,mBAAmB,EAAExW;IACvB,CAAC,CAAC,CAAC,CAAC95B,MAAM,CAAC,CAACuwC,CAAC,EAAEl3C,KAAK,KAAKzK,KAAK,CAACwhD,aAAa,CAACD,iBAAiB,CAAC92C,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC;EAC7E;;EAEA;AACF;AACA;AACA;AACA;EACE,MAAMs1C,uBAAuBA,CAAC6B,eAAe,EAAEnC,QAAQ,EAAE;IACvD,MAAM1zC,OAAO,GAAG,MAAM,IAAI,CAACyX,eAAe,CAAC28B,UAAU,CAAC,CAAC;IACvD,MAAMt7B,eAAe,GAAG,IAAI,CAACrB,eAAe,CAAC7O,OAAO;IACpD,OAAO3U,KAAK,CAACouC,iBAAiB,CAAC,CAAC,QAAQ,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,EAAE,CAACqR,QAAQ,EAAE1zC,OAAO,EAAE61C,eAAe,EAAE/8B,eAAe,CAAC,CAAC;EACpI;EACA,MAAMu8B,cAAcA,CAACzlC,OAAO,EAAE;IAC5B,OAAOqiC,6BAA6B,CAAC,IAAI,CAACx6B,eAAe,CAAC7O,OAAO,EAAE,IAAI,CAAC6O,eAAe,CAAC2vB,WAAW,CAAC,CAAC,EAAEx3B,OAAO,EAAE,IAAI,CAACgjB,OAAO,CAAC;EAC/H;EACA,MAAMuhB,gBAAgBA,CAAA,EAAG;IACvB,IAAIruB,WAAW,CAAC,iBAAiB,EAAE,IAAI,CAACrO,eAAe,CAAC,EAAE;MACxD,IAAI;QACF,MAAM3d,OAAO,GAAG,MAAM,IAAI,CAAC2d,eAAe,CAAC2R,IAAI,CAAC,iBAAiB,EAAE,EAAE,CAAC;QACtE,OAAOtvB,OAAO,IAAI,CAAC;MACrB,CAAC,CAAC,OAAO0L,CAAC,EAAE;QACV,OAAO,KAAK;MACd;IACF;IACA,OAAO,KAAK;EACd;EACA,MAAM+vC,sBAAsBA,CAAC72C,KAAK,EAAE;IAClC,MAAMo3C,MAAM,GAAG,IAAI3hD,QAAQ,CAAC,IAAI,CAACsjB,eAAe,CAAC7O,OAAO,EAAEzT,aAAa,EAAE,IAAI,CAACsiB,eAAe,CAAC2vB,WAAW,CAAC,CAAC,CAAC;IAC5G,MAAM9oC,MAAM,GAAG,MAAMw3C,MAAM,CAAC9yB,SAAS,CAAC,kBAAkB,CAAC,CAACtkB,KAAK,CAAC;IAChE,IAAIJ,MAAM,CAACvE,MAAM,GAAG,CAAC,EAAE;MACrB,OAAOuE,MAAM,CAAC,CAAC,CAAC;IAClB,CAAC,MAAM;MACL,OAAO,IAAI;IACb;EACF;AACF;AAEA,SAASy3C,6BAA6BA,CAAC/U,KAAK,EAAE;EAC5C,OAAO;IACLgV,cAAc,EAAEhV,KAAK,CAACgV,cAAc;IACpC1oC,kBAAkB,EAAE0zB,KAAK,CAAC1zB,kBAAkB;IAC5C2oC,aAAa,EAAEjV,KAAK,CAACiV,aAAa;IAClCppC,UAAU,EAAEm0B,KAAK,CAACn0B,UAAU;IAC5BqpC,aAAa,EAAElV,KAAK,CAACkV,aAAa;IAClCC,QAAQ,EAAEnV,KAAK,CAACmV,QAAQ;IACxBC,2BAA2B,EAAEpV,KAAK,CAACzzB,qBAAqB;IACxD8oC,8BAA8B,EAAErV,KAAK,CAACqV,8BAA8B,IAAI;EAC1E,CAAC;AACH;AAEA,SAASC,0BAA0BA,CAACtV,KAAK,EAAE;EACzC,OAAO;IACLgV,cAAc,EAAEhV,KAAK,CAACgV,cAAc;IACpC1oC,kBAAkB,EAAE0zB,KAAK,CAAC1zB,kBAAkB;IAC5C2oC,aAAa,EAAEjV,KAAK,CAACiV,aAAa;IAClCppC,UAAU,EAAEm0B,KAAK,CAACn0B,UAAU;IAC5BqpC,aAAa,EAAElV,KAAK,CAACkV,aAAa;IAClCC,QAAQ,EAAEnV,KAAK,CAACmV,QAAQ;IACxBI,sBAAsB,EAAEvV,KAAK,CAACzzB,qBAAqB;IACnDM,QAAQ,EAAEmzB,KAAK,CAACnzB,QAAQ,IAAI;EAC9B,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS2oC,0BAA0BA,CAACrnC,QAAQ,EAAEsnC,aAAa,EAAE;EAC3D,IAAItnC,QAAQ,KAAK,WAAW,EAAE;IAC5B,OAAOjb,SAAS,CAAC4yC,UAAU;EAC7B,CAAC,MAAM;IACL,OAAO7yC,KAAK,CAACwiC,UAAU,CAACtnB,QAAQ,EAAEsnC,aAAa,CAAC;EAClD;AACF;AAEA,SAASC,aAAaA,CAACC,YAAY,EAAE;EACnC,OAAOA,YAAY,CAAC5wC,WAAW,CAAC,CAAC,KAAK8D,oBAAoB,IAAI8sC,YAAY,CAAC5wC,WAAW,CAAC,CAAC,KAAK7R,SAAS,CAAC+W,WAAW;AACpH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe2rC,qBAAqBA,CAAC54C,QAAQ,EAAEqxC,KAAK,EAAE;EACpD,IAAIqH,aAAa,CAACrH,KAAK,CAAC,EAAE;IACxB,MAAMvyC,OAAO,GAAG,MAAMkB,QAAQ,CAAC6H,UAAU,CAAC,CAAC;IAC3C,MAAMgxC,WAAW,GAAG/rC,uBAAuB,CAAChO,OAAO,CAACkD,OAAO,CAAC;IAC5D,OAAO;MACLE,IAAI,EAAE22C,WAAW,CAAC32C,IAAI;MACtBC,MAAM,EAAE02C,WAAW,CAAC12C,MAAM;MAC1BC,QAAQ,EAAEy2C,WAAW,CAACz2C;IACxB,CAAC;EACH,CAAC,MAAM;IACL,MAAM02C,KAAK,GAAG,IAAI3iD,QAAQ,CAACk7C,KAAK,EAAEt6C,iBAAiB,EAAEiJ,QAAQ,CAAC;IAC9D,MAAM,CAACkC,IAAI,EAAEC,MAAM,EAAEC,QAAQ,CAAC,GAAG,MAAMX,OAAO,CAAC+M,GAAG,CAAC,CAACsqC,KAAK,CAAC52C,IAAI,CAAC,CAAC,EAAE42C,KAAK,CAAC32C,MAAM,CAAC,CAAC,EAAE22C,KAAK,CAAC12C,QAAQ,CAAC,CAAC,CAAC,CAAC;IACpG,OAAO;MACLF,IAAI;MACJC,MAAM;MACNC;IACF,CAAC;EACH;AACF;AAEA,eAAe22C,mBAAmBA,CAACzkC,MAAM,EAAE;EACzC,MAAM0kC,SAAS,GAAG,KAAK;EACvB,MAAMC,MAAM,GAAGx6B,KAAK,CAAC7gB,IAAI,CAAC;IACxB7B,MAAM,EAAEuR,IAAI,CAAC4rC,IAAI,CAAC5kC,MAAM,CAACvY,MAAM,GAAGi9C,SAAS;EAC7C,CAAC,EAAE,CAACpB,CAAC,EAAEvqC,CAAC,KAAKiH,MAAM,CAACzL,KAAK,CAACwE,CAAC,GAAG2rC,SAAS,EAAE3rC,CAAC,GAAG2rC,SAAS,GAAGA,SAAS,CAAC,CAAC;EACpE,MAAM/xB,OAAO,GAAG,EAAE;EAClB,KAAK,MAAMkyB,KAAK,IAAIF,MAAM,EAAE;IAC1BhyB,OAAO,CAACvlB,IAAI,CAAC,IAAI,MAAM4M,mBAAmB,CAACG,UAAU,CAAC0qC,KAAK,CAAC,CAAC,CAAC;EAChE;EACA,OAAOlyB,OAAO;AAChB;;AAEA;AACA;AACA;AACA,MAAMmyB,aAAa,GAAG,CAAC;AACvB,IAAIC,qBAAqB,GAAG,aAAa,UAAUA,qBAAqB,EAAE;EACxEA,qBAAqB,CAACA,qBAAqB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI;EAC7DA,qBAAqB,CAACA,qBAAqB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI;EAC7D,OAAOA,qBAAqB;AAC9B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACP,MAAMC,iBAAiB,CAAC;EACtB16C,WAAWA,CAACg2B,OAAO,EAAEygB,OAAO,EAAEkE,kBAAkB,EAAEC,YAAY,EAAEf,aAAa,EAAE;IAC7E,IAAI,CAAC7jB,OAAO,GAAGA,OAAO;IACtB,IAAI,CAAC4kB,YAAY,GAAGA,YAAY;IAChC,IAAI,CAACnE,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACkE,kBAAkB,GAAGA,kBAAkB;IAC5C,IAAI,CAACd,aAAa,GAAGA,aAAa;IAClC,IAAI,CAACgB,MAAM,GAAG,CAAC,CAAC;IAChB,IAAI,CAACC,KAAK,GAAG,CAAC,CAAC;EACjB;EACA,aAAaC,OAAOA,CAACloC,GAAG,EAAEmjB,OAAO,EAAE;IACjC,IAAI;MACF,MAAMglB,qBAAqB,GAAG,MAAMhlB,OAAO,CAACC,YAAY,CAACpjB,GAAG,CAAC;MAC7D,IAAImoC,qBAAqB,CAACC,mBAAmB,EAAE;QAC7C,OAAOP,iBAAiB,CAACQ,yBAAyB,CAACF,qBAAqB,EAAEhlB,OAAO,CAAC;MACpF;IACF,CAAC,CAAC,OAAOptB,CAAC,EAAE;MACV,OAAOvI,SAAS;IAClB;EACF;EACA,aAAa66C,yBAAyBA,CAACnhC,IAAI,EAAEic,OAAO,EAAE;IACpD,OAAO,IAAI0kB,iBAAiB,CAAC1kB,OAAO,EAAEjc,IAAI,CAAC08B,OAAO,EAAE18B,IAAI,CAAC4gC,kBAAkB,EAAE5gC,IAAI,CAAC6gC,YAAY,EAAE7gC,IAAI,CAAC8/B,aAAa,CAAC;EACrH;EACA,OAAOsB,SAASA,CAAC7a,KAAK,EAAEuZ,aAAa,EAAEuB,gBAAgB,EAAEC,qBAAqB,EAAE;IAC9E,QAAQA,qBAAqB;MAC3B,KAAKZ,qBAAqB,CAACa,EAAE;QAC3B,OAAOjkD,KAAK,CAACouC,iBAAiB,CAAC,CAAC,SAAS,EAAE,SAAS,CAAC,EAAE,CAACnF,KAAK,CAACt0B,OAAO,EAAE4tC,0BAA0B,CAACtZ,KAAK,CAAC/wB,YAAY,EAAEsqC,aAAa,CAAC,CAAC,CAAC;MACxI,KAAKY,qBAAqB,CAACc,EAAE;QAC3B,OAAOlkD,KAAK,CAACouC,iBAAiB,CAAC,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,EAAE,CAACnF,KAAK,CAACt0B,OAAO,EAAE4tC,0BAA0B,CAACtZ,KAAK,CAAC/wB,YAAY,EAAEsqC,aAAa,CAAC,EAAED,0BAA0B,CAACtZ,KAAK,CAAC9wB,KAAK,IAAI,WAAW,EAAE4rC,gBAAgB,CAAC,EAAE9a,KAAK,CAAC7wB,eAAe,IAAInY,SAAS,CAAC+W,WAAW,CAAC,CAAC;IAC1R;EACF;EACA,aAAamtC,qBAAqBA,CAACC,KAAK,EAAEr6C,QAAQ,EAAEqO,eAAe,EAAE;IACnE,IAAI,CAACA,eAAe,EAAE;MACpB,OAAO,EAAE;IACX;IACA;IACA,IAAI2rC,gBAAgB,GAAGK,KAAK,CAAChsC,eAAe,CAAC;IAC7C,IAAI2rC,gBAAgB,KAAK/6C,SAAS,EAAE;MAClC,MAAMmR,gBAAgB,GAAG,MAAMwoC,qBAAqB,CAAC54C,QAAQ,EAAEqO,eAAe,CAAC;MAC/E2rC,gBAAgB,GAAG5pC,gBAAgB,CAAChO,QAAQ;MAC5Ci4C,KAAK,CAAChsC,eAAe,CAAC,GAAG2rC,gBAAgB;IAC3C;IACA,OAAOA,gBAAgB;EACzB;EACA,aAAaM,cAAcA,CAACC,aAAa,EAAE9B,aAAa,EAAEz4C,QAAQ,EAAE40B,OAAO,EAAEqlB,qBAAqB,EAAE;IAClG,IAAIT,YAAY,GAAGx6C,SAAS,CAACjD,MAAM,GAAG,CAAC,IAAIiD,SAAS,CAAC,CAAC,CAAC,KAAKC,SAAS,GAAGD,SAAS,CAAC,CAAC,CAAC,GAAGo6C,aAAa;IACpG,MAAM9kC,MAAM,GAAG,MAAMykC,mBAAmB,CAACwB,aAAa,CAAC;;IAEvD;IACA,MAAMd,MAAM,GAAG,CAAC,CAAC;IACjB,KAAK,MAAMe,aAAa,IAAIlmC,MAAM,EAAE;MAClC,MAAMmmC,KAAK,GAAGD,aAAa,CAAC5vC,OAAO,CAAC/B,KAAK,CAAC,CAAC,EAAE,CAAC,GAAG2wC,YAAY,CAAC,CAACzxC,WAAW,CAAC,CAAC;MAC5E,IAAI0xC,MAAM,CAACgB,KAAK,CAAC,KAAKx7C,SAAS,EAAE;QAC/Bw6C,MAAM,CAACgB,KAAK,CAAC,GAAG,EAAE;MACpB;MACAhB,MAAM,CAACgB,KAAK,CAAC,CAAC/4C,IAAI,CAAC84C,aAAa,CAAC;IACnC;IACA,MAAME,kBAAkB,GAAG,CAAC,CAAC;IAC7B;IACA,MAAMC,QAAQ,GAAG,MAAMl5C,OAAO,CAAC+M,GAAG,CAACoW,MAAM,CAACwF,OAAO,CAACqvB,MAAM,CAAC,CAAC95C,GAAG,CAAC,MAAMw1B,IAAI,IAAI;MAC1E,IAAI,CAACslB,KAAK,EAAErwB,OAAO,CAAC,GAAG+K,IAAI;MAC3B,OAAO,CAACslB,KAAK,EAAE,IAAIxjD,UAAU,CAAC,MAAMwK,OAAO,CAAC+M,GAAG,CAAC4b,OAAO,CAACzqB,GAAG,CAAC,MAAMu/B,KAAK,IAAI;QACzE;QACA,MAAM8a,gBAAgB,GAAG,MAAMV,iBAAiB,CAACc,qBAAqB,CAACM,kBAAkB,EAAE16C,QAAQ,EAAEk/B,KAAK,CAAC7wB,eAAe,CAAC;QAC3H,OAAOirC,iBAAiB,CAACS,SAAS,CAAC7a,KAAK,EAAEuZ,aAAa,EAAEuB,gBAAgB,EAAEC,qBAAqB,CAAC;MACnG,CAAC,CAAC,CAAC,EAAEhkD,KAAK,CAACsmC,SAAS,EAAE;QACpB0V,IAAI,EAAE;MACR,CAAC,CAAC,CAAC2I,UAAU,CAAC,CAAC,CAAC;IAClB,CAAC,CAAC,CAAC;IACH,MAAMC,KAAK,GAAGj2B,MAAM,CAACk2B,WAAW,CAACH,QAAQ,CAAC;IAC1C;IACA,MAAMI,IAAI,GAAG,IAAI9jD,UAAU,CAAC2tB,MAAM,CAAC+B,MAAM,CAACk0B,KAAK,CAAC,EAAE5kD,KAAK,CAACsmC,SAAS,EAAE;MACjE0V,IAAI,EAAE;IACR,CAAC,CAAC;IACF,MAAM+I,cAAc,GAAG,EAAE;IACzB,KAAK,MAAM,CAACC,OAAO,EAAE7wB,OAAO,CAAC,IAAIxF,MAAM,CAACwF,OAAO,CAACqvB,MAAM,CAAC,EAAE;MACvD,MAAMj8C,IAAI,GAAG;QACX09C,MAAM,EAAEH,IAAI,CAACI,QAAQ,CAACN,KAAK,CAACI,OAAO,CAAC,CAAC,CAACt7C,GAAG,CAAC1B,KAAK,IAAI,IAAI,GAAGA,KAAK,CAACT,IAAI,CAACM,QAAQ,CAAC,KAAK,CAAC,CAAC;QACrFssB;MACF,CAAC;MACD4wB,cAAc,CAACt5C,IAAI,CAAC;QAClBlE,IAAI,EAAE2C,IAAI,CAACC,SAAS,CAAC5C,IAAI,CAAC;QAC1B0E,IAAI,KAAAxG,MAAA,CAAKu/C,OAAO;MAClB,CAAC,CAAC;IACJ;IACA,MAAMlG,IAAI,GAAG,MAAMngB,OAAO,CAACogB,WAAW,CAACgG,cAAc,CAAC;IACtD,MAAM3F,OAAO,GAAGN,IAAI,CAAC,CAAC,CAAC,CAAClsC,KAAK,CAAC,CAAC,EAAEksC,IAAI,CAAC,CAAC,CAAC,CAACO,WAAW,CAAC,GAAG,CAAC,CAAC;IAC1D,MAAMiE,kBAAkB,GAAG,MAAM3kB,OAAO,CAACkc,MAAM,CAACx8B,MAAM,CAAC;IACvD,MAAM8mC,iBAAiB,GAAG;MACxBvsC,UAAU,EAAEksC,IAAI,CAACH,UAAU,CAAC,CAAC;MAC7BvF,OAAO;MACPkE,kBAAkB;MAClBC,YAAY;MACZf,aAAa;MACboB,mBAAmB,EAAE;IACvB,CAAC;IACD,MAAMwB,SAAS,GAAG,MAAMzmB,OAAO,CAACkc,MAAM,CAACsK,iBAAiB,CAAC;IACzD,OAAO;MACLA,iBAAiB;MACjB3pC,GAAG,EAAE4pC;IACP,CAAC;EACH;EACA,MAAMF,QAAQA,CAACvwC,OAAO,EAAE5K,QAAQ,EAAEi6C,qBAAqB,EAAE;IACvD,MAAMgB,OAAO,GAAGrwC,OAAO,CAAC/B,KAAK,CAAC,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC2wC,YAAY,CAAC,CAACzxC,WAAW,CAAC,CAAC;IACrE,IAAI0yC,KAAK,GAAG,IAAI,CAAChB,MAAM,CAACwB,OAAO,CAAC;IAChC,MAAMP,kBAAkB,GAAG,CAAC,CAAC;IAC7B,IAAID,KAAK,KAAKx7C,SAAS,EAAE;MACvB,IAAI;QACFw7C,KAAK,GAAG,IAAI,CAAChB,MAAM,CAACwB,OAAO,CAAC,GAAG,MAAM,IAAI,CAACrmB,OAAO,CAACC,YAAY,IAAAn5B,MAAA,CAAI,IAAI,CAAC25C,OAAO,OAAA35C,MAAA,CAAIu/C,OAAO,UAAO,CAAC;QACjG,MAAMK,aAAa,GAAG,MAAM75C,OAAO,CAAC+M,GAAG,CAACisC,KAAK,CAACrwB,OAAO,CAACzqB,GAAG,CAAC,MAAMu/B,KAAK,IAAI;UACvE;UACA,MAAM8a,gBAAgB,GAAG,MAAMV,iBAAiB,CAACc,qBAAqB,CAACM,kBAAkB,EAAE16C,QAAQ,EAAEk/B,KAAK,CAAC7wB,eAAe,CAAC;UAC3H,OAAOirC,iBAAiB,CAACS,SAAS,CAAC7a,KAAK,EAAE,IAAI,CAACuZ,aAAa,EAAEuB,gBAAgB,EAAEC,qBAAqB,CAAC;QACxG,CAAC,CAAC,CAAC;QACH,IAAI,CAACP,KAAK,CAACuB,OAAO,CAAC,GAAG,IAAIhkD,UAAU,CAACqkD,aAAa,EAAErlD,KAAK,CAACsmC,SAAS,EAAE;UACnE0V,IAAI,EAAE;QACR,CAAC,CAAC;MACJ,CAAC,CAAC,OAAOzqC,CAAC,EAAE;QACV,OAAO,IAAI;MACb;IACF;IACA,MAAM03B,KAAK,GAAGub,KAAK,CAACrwB,OAAO,CAACpd,IAAI,CAACK,CAAC,IAAIA,CAAC,CAACzC,OAAO,CAAC7C,WAAW,CAAC,CAAC,KAAK6C,OAAO,CAAC7C,WAAW,CAAC,CAAC,CAAC;IACxF,IAAI,CAACm3B,KAAK,EAAE;MACV,OAAO,IAAI;IACb;IACA,MAAM8a,gBAAgB,GAAG,MAAMV,iBAAiB,CAACc,qBAAqB,CAACM,kBAAkB,EAAE16C,QAAQ,EAAEk/B,KAAK,CAAC7wB,eAAe,CAAC;IAC3H,MAAMktC,IAAI,GAAGjC,iBAAiB,CAACS,SAAS,CAAC7a,KAAK,EAAE,IAAI,CAACuZ,aAAa,EAAEuB,gBAAgB,EAAEC,qBAAqB,CAAC;IAC5G,MAAMtrC,KAAK,GAAG,IAAI,CAAC+qC,KAAK,CAACuB,OAAO,CAAC,CAACE,QAAQ,CAACI,IAAI,CAAC,CAAC57C,GAAG,CAAC0N,CAAC,IAAI,IAAI,GAAGA,CAAC,CAAC7P,IAAI,CAACM,QAAQ,CAAC,KAAK,CAAC,CAAC;IACxF,OAAO4Q,4BAA4B,CAACD,UAAU,CAAC;MAC7C,GAAGywB,KAAK;MACRvwB,KAAK,EAAEA,KAAK,CAACjT,MAAM,CAAC++C,KAAK,CAACS,MAAM;IAClC,CAAC,CAAC;EACJ;EACA,MAAMM,aAAaA,CAAA,EAAG;IACpB,IAAI;MACF,OAAO,MAAM,IAAI,CAAC5mB,OAAO,CAACC,YAAY,CAAC,IAAI,CAAC0kB,kBAAkB,CAAC;IACjE,CAAC,CAAC,OAAO/xC,CAAC,EAAE;MACVusB,OAAO,CAACC,IAAI,CAAC,2CAA2C,EAAExsB,CAAC,CAAC;MAC5D,OAAO,EAAE;IACX;EACF;AACF;AAEA,eAAei0C,4BAA4BA,CAAC7wC,OAAO,EAAEiE,UAAU,EAAE6sC,cAAc,EAAE17C,QAAQ,EAAE40B,OAAO,EAAEqlB,qBAAqB,EAAE;EACzH,IAAI,CAACyB,cAAc,EAAE;IACnB,OAAO,IAAI;EACb;EACA,MAAM1sC,WAAW,GAAG0sC,cAAc,CAAC7sC,UAAU,CAAC;EAC9C,IAAIG,WAAW,EAAE;IACf,MAAMyN,GAAG,GAAG,MAAMmY,OAAO,CAACC,YAAY,CAAC7lB,WAAW,CAAC;IACnD,IAAIyN,GAAG,CAACo9B,mBAAmB,IAAIp9B,GAAG,CAAC5N,UAAU,KAAKA,UAAU,EAAE;MAC5D,MAAM8sC,UAAU,GAAG,MAAMrC,iBAAiB,CAACQ,yBAAyB,CAACr9B,GAAG,EAAEmY,OAAO,CAAC;MAClF,OAAO,MAAM+mB,UAAU,CAACR,QAAQ,CAACvwC,OAAO,EAAE5K,QAAQ,EAAEi6C,qBAAqB,CAAC;IAC5E;IACA;IACA,MAAM2B,YAAY,GAAG,MAAMhtC,cAAc,CAACH,UAAU,CAACgO,GAAG,CAAC;IACzD,IAAI5N,UAAU,KAAK+sC,YAAY,CAAC/sC,UAAU,EAAE;MAC1C,OAAO+sC,YAAY,CAAC9sC,MAAM,CAAC9B,IAAI,CAACtX,CAAC,IAAIA,CAAC,CAACkV,OAAO,CAAC7C,WAAW,CAAC,CAAC,KAAK6C,OAAO,CAAC7C,WAAW,CAAC,CAAC,CAAC,IAAI,IAAI;IACjG;EACF;EACA,OAAO,IAAI;AACb;AAEA,SAAS8zC,6BAA6BA,CAAC7Y,KAAK,EAAE;EAC5C,OAAO;IACLgV,cAAc,EAAEhV,KAAK,CAACgV,cAAc;IACpC1oC,kBAAkB,EAAE0zB,KAAK,CAAC1zB,kBAAkB;IAC5C2oC,aAAa,EAAEjV,KAAK,CAACiV,aAAa;IAClCppC,UAAU,EAAEm0B,KAAK,CAACn0B,UAAU,CAAC/Q,QAAQ,CAAC,CAAC;IACvCo6C,aAAa,EAAElV,KAAK,CAACkV,aAAa;IAClCC,QAAQ,EAAEnV,KAAK,CAACmV,QAAQ;IACxB5oC,qBAAqB,EAAEyzB,KAAK,CAACoV,2BAA2B;IACxDC,8BAA8B,EAAErV,KAAK,CAACqV;EACxC,CAAC;AACH;AAEA,SAASyD,0BAA0BA,CAAC9Y,KAAK,EAAE;EACzC,OAAO;IACLgV,cAAc,EAAEhV,KAAK,CAACgV,cAAc;IACpC1oC,kBAAkB,EAAE0zB,KAAK,CAAC1zB,kBAAkB;IAC5C2oC,aAAa,EAAEjV,KAAK,CAACiV,aAAa;IAClCppC,UAAU,EAAEm0B,KAAK,CAACn0B,UAAU,CAAC/Q,QAAQ,CAAC,CAAC;IACvCo6C,aAAa,EAAElV,KAAK,CAACkV,aAAa;IAClCC,QAAQ,EAAEnV,KAAK,CAACmV,QAAQ;IACxB5oC,qBAAqB,EAAEyzB,KAAK,CAACuV,sBAAsB;IACnDF,8BAA8B,EAAE,CAAC;IACjCxoC,QAAQ,EAAEmzB,KAAK,CAACnzB;EAClB,CAAC;AACH;;AAEA;AACA;AACA;AACA,MAAMksC,oBAAoB,SAASzgD,YAAY,CAAC;EAC9CsD,WAAWA,CAACE,OAAO,EAAE6H,OAAO,EAAE;IAC5B,KAAK,CAAC,CAAC;IACP,IAAI;MACF,IAAI,CAACA,OAAO,GAAGrE,gBAAgB,CAAC6E,KAAK,CAACR,OAAO,CAAC;IAChD,CAAC,CAAC,OAAOq1C,gBAAgB,EAAE;MACzBjoB,OAAO,CAACnzB,KAAK,CAAC,oEAAoE,EAAEo7C,gBAAgB,CAAC;MACrG,IAAI,CAACr1C,OAAO,GAAGrE,gBAAgB,CAAC6E,KAAK,CAAC,CAAC,CAAC,CAAC;IAC3C;IACA,MAAM,CAACiD,MAAM,EAAEpK,QAAQ,CAAC,GAAGmK,oBAAoB,CAACrL,OAAO,EAAE,IAAI,CAAC6H,OAAO,CAAC;IACtE,IAAI,CAAC7H,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACsL,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACpK,QAAQ,GAAGA,QAAQ;EAC1B;EACA;AACF;AACA;AACA;AACA;EACEi8C,sBAAsBA,CAACn9C,OAAO,EAAE;IAC9B,MAAM,CAACsL,MAAM,EAAEpK,QAAQ,CAAC,GAAGmK,oBAAoB,CAACrL,OAAO,EAAE,IAAI,CAAC6H,OAAO,CAAC;IACtE,IAAI,CAAC7H,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACsL,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACpK,QAAQ,GAAGA,QAAQ;EAC1B;EACA;AACF;AACA;AACA;EACEk8C,UAAUA,CAAA,EAAG;IACX,OAAO,CAACl+C,QAAQ,CAAC,IAAI,CAACoM,MAAM,CAAC;EAC/B;;EAEA;AACF;AACA;AACA;EACE++B,SAASA,CAAA,EAAG;IACV,OAAO,IAAI,CAAC/+B,MAAM;EACpB;;EAEA;AACF;AACA;AACA;EACEg/B,WAAWA,CAAA,EAAG;IACZ,OAAO,IAAI,CAACppC,QAAQ;EACtB;;EAEA;AACF;AACA;AACA;EACEm8C,mBAAmBA,CAAA,EAAG;IACpB,OAAO,IAAI,CAAChT,SAAS,CAAC,CAAC,IAAI,IAAI,CAACC,WAAW,CAAC,CAAC;EAC/C;AACF;;AAEA;AACA;AACA;AACA,MAAMgT,eAAe,SAASL,oBAAoB,CAAC;EAGjD;AACF;AACA;;EAEEn9C,WAAWA,CAACE,OAAO,EAAEgc,eAAe,EAAE8K,WAAW,EAAEjf,OAAO,EAAEiuB,OAAO,EAAE;IACnE,KAAK,CAAC91B,OAAO,EAAE6H,OAAO,CAAC;IAACypC,eAAA,0BAPR,KAAK;IAAAA,eAAA,0BACL,OAAO,CAAC,CAAC,CAAC;IAO1B,IAAI,CAAC13B,GAAG,GAAGkN,WAAW;IACtB,IAAI,CAAChb,OAAO,GAAGkQ,eAAe;IAC9B;IACA,IAAI,CAACwwB,aAAa,GAAG,IAAIn1C,QAAQ,CAAC2kB,eAAe,EAAE8K,WAAW,EAAE,IAAI,CAACu2B,mBAAmB,CAAC,CAAC,CAAC;IAC3F;IACA,IAAI,CAACtiC,YAAY,GAAG,IAAI,CAACyxB,aAAa,CAACpC,OAAO,CAAC,IAAI,CAACE,WAAW,CAAC,CAAC,CAAC;IAClE,IAAI,CAACxU,OAAO,GAAGA,OAAO;EACxB;EACAqnB,sBAAsBA,CAACn9C,OAAO,EAAE;IAC9B;IACA,KAAK,CAACm9C,sBAAsB,CAACn9C,OAAO,CAAC;IACrC;IACA,IAAI,CAACwsC,aAAa,GAAG,IAAI,CAACA,aAAa,CAACpC,OAAO,CAAC,IAAI,CAACiT,mBAAmB,CAAC,CAAC,CAAC;IAC3E;IACA,IAAI,CAACtiC,YAAY,GAAG,IAAI,CAACyxB,aAAa,CAACpC,OAAO,CAAC,IAAI,CAACE,WAAW,CAAC,CAAC,CAAC;EACpE;EACAiT,SAASA,CAACC,UAAU,EAAE;IACpB;IACA,IAAI,CAAChR,aAAa,GAAG,IAAIn1C,QAAQ,CAAC,IAAI,CAACyU,OAAO,EAAE0xC,UAAU,EAAE,IAAI,CAACH,mBAAmB,CAAC,CAAC,CAAC;;IAEvF;IACA,IAAI,CAACtiC,YAAY,GAAG,IAAI,CAACyxB,aAAa,CAACpC,OAAO,CAAC,IAAI,CAACE,WAAW,CAAC,CAAC,CAAC;IAClE,IAAI,CAAC1wB,GAAG,GAAGlE,SAAS,CAACrN,KAAK,CAACm1C,UAAU,CAAC;EACxC;;EAEA;AACF;AACA;EACE,MAAMlG,UAAUA,CAAA,EAAG;IACjB,MAAMp2C,QAAQ,GAAG,IAAI,CAACopC,WAAW,CAAC,CAAC;IACnC,MAAM;MACJpnC;IACF,CAAC,GAAG,MAAMhC,QAAQ,CAAC6H,UAAU,CAAC,CAAC;IAC/B,OAAO7F,OAAO;EAChB;EACA;AACF;AACA;EACE,MAAMipC,gBAAgBA,CAAA,EAAG;IACvB,MAAM7gC,MAAM,GAAG,IAAI,CAAC++B,SAAS,CAAC,CAAC;IAC/B,IAAI,CAAC/+B,MAAM,EAAE;MACX,MAAM,IAAIpO,KAAK,CAAC,yGAAyG,CAAC;IAC5H;IACA,OAAO,MAAMoO,MAAM,CAAC68B,UAAU,CAAC,CAAC;EAClC;;EAEA;AACF;AACA;EACEoF,UAAUA,CAAA,EAAG;IACX,OAAO,IAAI,CAACf,aAAa,CAACe,UAAU;EACtC;;EAEA;AACF;AACA;EACE,MAAMkQ,gBAAgBA,CAAA,EAAG;IACvB,OAAOxkB,sBAAsB,CAAC,IAAI,CAACqR,WAAW,CAAC,CAAC,CAAC;EACnD;;EAEA;AACF;AACA;EACEoT,oBAAoBA,CAAClO,MAAM,EAAEP,eAAe,EAAE;IAC5C,IAAI,CAACluC,IAAI,CAAC8iC,SAAS,CAACwI,WAAW,EAAE;MAC/BmD,MAAM;MACNP;IACF,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;EACE,MAAM0O,SAASA,CAAC1K,OAAO,EAAE;IACvB,OAAO,IAAI,CAAC9V,eAAe,CAAC,WAAW,EAAE,CAAC8V,OAAO,CAAC,CAAC;EACrD;;EAEA;AACF;AACA;EACE,MAAMvF,WAAWA,CAAC7yB,EAAE,EAAEC,IAAI,EAAE;IAC1B,OAAO,IAAI,CAAC0xB,aAAa,CAACkB,WAAW,CAAC7yB,EAAE,CAAC,CAAC,GAAGC,IAAI,CAAC;EACpD;;EAEA;AACF;AACA;EACE8iC,uBAAuBA,CAACC,IAAI,EAAE;IAC5B,IAAI,CAACC,eAAe,GAAGD,IAAI;EAC7B;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,MAAMvxB,IAAIA,CAACrD,YAAY,EAAEnO,IAAI,EAAE;IAC7B,MAAMoL,SAAS,GAAGD,uBAAuB,CAACvQ,SAAS,CAACrN,KAAK,CAAC,IAAI,CAACuR,GAAG,CAAC,CAAC,CAACrR,MAAM,CAAC8d,CAAC,IAAIA,CAAC,CAACjjB,IAAI,KAAK6lB,YAAY,CAAC;IACzG,IAAI,CAAC/C,SAAS,CAACjpB,MAAM,EAAE;MACrB,MAAM,IAAIC,KAAK,eAAAN,MAAA,CAAcqsB,YAAY,CAACjqB,QAAQ,CAAC,CAAC,uFAAmF,CAAC;IAC1I;IACA,MAAM6b,EAAE,GAAGqL,SAAS,CAAChY,IAAI,CAACmY,CAAC,IAAIA,CAAC,CAACjjB,IAAI,KAAK6lB,YAAY,IAAI5C,CAAC,CAAC7Q,MAAM,CAACvY,MAAM,KAAK6d,IAAI,CAAC7d,MAAM,CAAC;;IAE1F;IACA,IAAI,CAAC4d,EAAE,EAAE;MACP,MAAM,IAAI3d,KAAK,eAAAN,MAAA,CAAcqsB,YAAY,CAACjqB,QAAQ,CAAC,CAAC,kBAAApC,MAAA,CAAcspB,SAAS,CAAC,CAAC,CAAC,CAAC1Q,MAAM,CAACvY,MAAM,sBAAAL,MAAA,CAAmBke,IAAI,CAAC7d,MAAM,oDAAAL,MAAA,CAAiDspB,SAAS,CAAC,CAAC,CAAC,CAACS,SAAS,CAAE,CAAC;IACtM;IACA,MAAMo3B,YAAY,MAAAnhD,MAAA,CAAMqsB,YAAY,CAACjqB,QAAQ,CAAC,CAAC,OAAApC,MAAA,CAAIie,EAAE,CAACrF,MAAM,CAAC3U,GAAG,CAAC0N,CAAC,IAAIA,CAAC,CAAC4E,IAAI,CAAC,CAACxV,IAAI,CAAC,CAAC,MAAG;;IAEvF;IACA,MAAMqgD,MAAM,GAAGD,YAAY,IAAI,IAAI,CAAChjC,YAAY,CAACmL,SAAS,GAAG63B,YAAY,GAAG90B,YAAY;IACxF,IAAIpO,EAAE,CAACxF,eAAe,KAAK,MAAM,IAAIwF,EAAE,CAACxF,eAAe,KAAK,MAAM,EAAE;MAClE;MACA,MAAM7T,MAAM,GAAG,MAAM,IAAI,CAACuZ,YAAY,CAACijC,MAAM,CAACh/C,QAAQ,CAAC,CAAC,CAAC,CAAC,GAAG8b,IAAI,CAAC;MAClE,OAAOtZ,MAAM;IACf;IACA,MAAM,IAAItE,KAAK,CAAC,0CAA0C,CAAC;EAC7D;;EAEA;AACF;AACA;EACE,MAAM2uB,IAAIA,CAAC5C,YAAY,EAAE;IACvB,IAAInO,IAAI,GAAG5a,SAAS,CAACjD,MAAM,GAAG,CAAC,IAAIiD,SAAS,CAAC,CAAC,CAAC,KAAKC,SAAS,GAAGD,SAAS,CAAC,CAAC,CAAC,GAAG,EAAE;IACjF,IAAIiqC,SAAS,GAAGjqC,SAAS,CAACjD,MAAM,GAAG,CAAC,GAAGiD,SAAS,CAAC,CAAC,CAAC,GAAGC,SAAS;IAC/D;IACA,MAAM89C,SAAS,GAAG9T,SAAS,GAAG,MAAMjwB,kBAAkB,CAACvK,UAAU,CAACw6B,SAAS,CAAC,GAAGhqC,SAAS;IACxF,MAAM+lB,SAAS,GAAGD,uBAAuB,CAACvQ,SAAS,CAACrN,KAAK,CAAC,IAAI,CAACuR,GAAG,CAAC,CAAC,CAACrR,MAAM,CAAC8d,CAAC,IAAIA,CAAC,CAACjjB,IAAI,KAAK6lB,YAAY,CAAC;IACzG,IAAI,CAAC/C,SAAS,CAACjpB,MAAM,EAAE;MACrB,MAAM,IAAIC,KAAK,eAAAN,MAAA,CAAcqsB,YAAY,uFAAmF,CAAC;IAC/H;IACA,MAAMpO,EAAE,GAAGqL,SAAS,CAAChY,IAAI,CAACmY,CAAC,IAAIA,CAAC,CAACjjB,IAAI,KAAK6lB,YAAY,IAAI5C,CAAC,CAAC7Q,MAAM,CAACvY,MAAM,KAAK6d,IAAI,CAAC7d,MAAM,CAAC;;IAE1F;IACA,IAAI,CAAC4d,EAAE,EAAE;MACP,MAAM,IAAI3d,KAAK,eAAAN,MAAA,CAAcqsB,YAAY,kBAAArsB,MAAA,CAAcspB,SAAS,CAAC,CAAC,CAAC,CAAC1Q,MAAM,CAACvY,MAAM,sBAAAL,MAAA,CAAmBke,IAAI,CAAC7d,MAAM,oDAAAL,MAAA,CAAiDspB,SAAS,CAAC,CAAC,CAAC,CAACS,SAAS,CAAE,CAAC;IAC3L;IACA,MAAMo3B,YAAY,MAAAnhD,MAAA,CAAMqsB,YAAY,OAAArsB,MAAA,CAAIie,EAAE,CAACrF,MAAM,CAAC3U,GAAG,CAAC0N,CAAC,IAAIA,CAAC,CAAC4E,IAAI,CAAC,CAACxV,IAAI,CAAC,CAAC,MAAG;;IAE5E;IACA,MAAMqgD,MAAM,GAAGD,YAAY,IAAI,IAAI,CAAChjC,YAAY,CAACmL,SAAS,GAAG63B,YAAY,GAAG90B,YAAY;;IAExF;IACA,IAAIpO,EAAE,CAACxF,eAAe,KAAK,MAAM,IAAIwF,EAAE,CAACxF,eAAe,KAAK,MAAM,EAAE;MAClE;MACA,OAAO4oC,SAAS,GAAG,IAAI,CAACljC,YAAY,CAACijC,MAAM,CAAC,CAAC,GAAGljC,IAAI,EAAEmjC,SAAS,CAAC,GAAG,IAAI,CAACljC,YAAY,CAACijC,MAAM,CAAC,CAAC,GAAGljC,IAAI,CAAC;IACvG,CAAC,MAAM;MACL;MACA,MAAM+yB,OAAO,GAAG,MAAM,IAAI,CAAC1Q,eAAe,CAAC6gB,MAAM,EAAEljC,IAAI,EAAEmjC,SAAS,CAAC;MACnE,OAAO;QACLpQ;MACF,CAAC;IACH;EACF;;EAEA;AACF;AACA;EACE,MAAM1Q,eAAeA;EACrB;EACAtiB,EAAE,EAAEC,IAAI,EAAE2zB,aAAa,EAAE;IAAA,IAAAyP,aAAA;IACvB,IAAI,CAACzP,aAAa,EAAE;MAClBA,aAAa,GAAG,MAAM,IAAI,CAACgP,gBAAgB,CAAC,CAAC;IAC/C;IACA;IACAhP,aAAa,GAAG;MACd,GAAGA,aAAa;MAChB,GAAG,IAAI,CAACqP,eAAe,CAAC;IAC1B,CAAC;IACD;IACA,IAAI,CAACA,eAAe,GAAG,OAAO,CAAC,CAAC,CAAC;IACjC,IAAI,CAAAI,aAAA,OAAI,CAACr2C,OAAO,cAAAq2C,aAAA,eAAZA,aAAA,CAAc75C,OAAO,KAAK,cAAc,IAAI,IAAI,CAACwD,OAAO,CAACxD,OAAO,IAAI,UAAU,IAAI,IAAI,CAACwD,OAAO,CAACxD,OAAO,CAAC,EAAE;MAC3G,IAAIwW,EAAE,KAAK,WAAW,IAAI8E,KAAK,CAAC2F,OAAO,CAACxK,IAAI,CAAC,CAAC,CAAC,CAAC,IAAIA,IAAI,CAAC,CAAC,CAAC,CAAC7d,MAAM,GAAG,CAAC,EAAE;QACtE,MAAM6B,IAAI,GAAG,MAAM,IAAI,CAACqtC,gBAAgB,CAAC,CAAC;QAC1CrxB,IAAI,CAAC,CAAC,CAAC,GAAGA,IAAI,CAAC,CAAC,CAAC,CAACja,GAAG,CAACg4B,EAAE,IAAI1hC,KAAK,CAACguC,YAAY,CAAC,CAAC,OAAO,EAAE,SAAS,CAAC,EAAE,CAACtM,EAAE,EAAE/5B,IAAI,CAAC,CAAC,CAAC;MACnF;MACA,MAAMoC,QAAQ,GAAG,IAAI,CAACopC,WAAW,CAAC,CAAC;MACnC,MAAM0D,MAAM,GAAG,MAAM,IAAI,CAACmQ,sBAAsB,CAACtjC,EAAE,EAAEC,IAAI,EAAE2zB,aAAa,CAAC;MACzE,IAAI,CAACiP,oBAAoB,CAAC,WAAW,EAAE1P,MAAM,CAAC;MAC9C,MAAMH,OAAO,GAAG,MAAM3sC,QAAQ,CAACk9C,kBAAkB,CAACpQ,MAAM,CAAC;MACzD,IAAI,CAAC0P,oBAAoB,CAAC,WAAW,EAAE1P,MAAM,CAAC;MAC9C,OAAOH,OAAO;IAChB,CAAC,MAAM;MACL;MACA,IAAI,CAAC,IAAI,CAACwQ,eAAe,EAAE;QACzB,MAAMr8C,IAAI,GAAG,MAAM,IAAI,CAACsoC,WAAW,CAAC,CAAC,CAAC9U,OAAO,CAAC,IAAI,CAAC1pB,OAAO,CAAC;QAC3D,IAAI,CAACuyC,eAAe,GAAGr8C,IAAI,KAAK,IAAI;QACpC,IAAI,CAAC,IAAI,CAACq8C,eAAe,EAAE;UACzB,MAAM,IAAInhD,KAAK,CAAC,0JAA0J,CAAC;QAC7K;MACF;MACA,MAAM27B,EAAE,GAAG,MAAM,IAAI,CAACylB,yBAAyB,CAACzjC,EAAE,EAAEC,IAAI,EAAE2zB,aAAa,CAAC;MACxE,IAAI,CAACiP,oBAAoB,CAAC,WAAW,EAAE7kB,EAAE,CAAC5a,IAAI,CAAC;;MAE/C;MACA,IAAI4vB,OAAO;MACX,IAAI;QACFA,OAAO,GAAG,MAAMhV,EAAE,CAACiV,IAAI,CAAC,CAAC;MAC3B,CAAC,CAAC,OAAO7tB,GAAG,EAAE;QACZ,IAAI;UACF;UACA;UACA,MAAM,IAAI,CAACusB,aAAa,CAACe,UAAU,CAAC1yB,EAAE,CAAC,CAAC,GAAGC,IAAI,EAAE,IAAI2zB,aAAa,CAACtvC,KAAK,GAAG,CAAC;YAC1EA,KAAK,EAAEsvC,aAAa,CAACtvC;UACvB,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;QACX,CAAC,CAAC,OAAOo/C,SAAS,EAAE;UAClB,MAAM,MAAM,IAAI,CAACC,WAAW,CAACD,SAAS,EAAE1jC,EAAE,EAAEC,IAAI,EAAE2zB,aAAa,CAAC;QAClE;QACA,MAAM,MAAM,IAAI,CAAC+P,WAAW,CAACv+B,GAAG,EAAEpF,EAAE,EAAEC,IAAI,EAAE2zB,aAAa,CAAC;MAC5D;MACA,IAAI,CAACiP,oBAAoB,CAAC,WAAW,EAAE7kB,EAAE,CAAC5a,IAAI,CAAC;MAC/C,OAAO4vB,OAAO;IAChB;EACF;;EAEA;AACF;AACA;EACE,MAAMyQ,yBAAyBA,CAACzjC,EAAE,EAAEC,IAAI,EAAE2zB,aAAa,EAAE;IACvD,MAAMgQ,IAAI,GAAG,IAAI,CAACjS,aAAa,CAACtmB,SAAS,CAACrL,EAAE,CAAC;IAC7C,IAAI,CAAC4jC,IAAI,EAAE;MACT,MAAM,IAAIvhD,KAAK,wBAAAN,MAAA,CAAuBie,EAAE,CAAC7b,QAAQ,CAAC,CAAC,OAAG,CAAC;IACzD;;IAEA;IACA,IAAI,CAACyvC,aAAa,CAACt0B,QAAQ,EAAE;MAC3B,IAAI;QACFs0B,aAAa,CAACt0B,QAAQ,GAAG,MAAM,IAAI,CAACqyB,aAAa,CAACkB,WAAW,CAAC7yB,EAAE,CAAC,CAAC,GAAGC,IAAI,EAAE2zB,aAAa,CAAC;MAC3F,CAAC,CAAC,OAAO/lC,CAAC,EAAE;QACV;QACA,IAAI;UACF,MAAM,IAAI,CAAC8jC,aAAa,CAACe,UAAU,CAAC1yB,EAAE,CAAC,CAAC,GAAGC,IAAI,EAAE,IAAI2zB,aAAa,CAACtvC,KAAK,GAAG,CAAC;YAC1EA,KAAK,EAAEsvC,aAAa,CAACtvC;UACvB,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;QACX,CAAC,CAAC,OAAO8gB,GAAG,EAAE;UACZ,MAAM,MAAM,IAAI,CAACu+B,WAAW,CAACv+B,GAAG,EAAEpF,EAAE,EAAEC,IAAI,EAAE2zB,aAAa,CAAC;QAC5D;MACF;IACF;;IAEA;IACA,IAAI;MACF,OAAO,MAAMgQ,IAAI,CAAC,GAAG3jC,IAAI,EAAE2zB,aAAa,CAAC;IAC3C,CAAC,CAAC,OAAOxuB,GAAG,EAAE;MACZ,MAAM,MAAM,IAAI,CAACu+B,WAAW,CAACv+B,GAAG,EAAEpF,EAAE,EAAEC,IAAI,EAAE2zB,aAAa,CAAC;IAC5D;EACF;EACA,MAAM+P,WAAWA,CAAC18C,KAAK,EAAE+Y,EAAE,EAAEC,IAAI,EAAE2zB,aAAa,EAAE;IAAA,IAAAiQ,qBAAA,EAAAC,mBAAA,EAAAC,eAAA;IAChD,MAAM19C,QAAQ,GAAG,IAAI,CAACopC,WAAW,CAAC,CAAC;;IAEnC;IACA,MAAMtqC,OAAO,GAAG,MAAMkB,QAAQ,CAAC6H,UAAU,CAAC,CAAC;IAC3C,MAAMjK,IAAI,GAAG,OAAO2vC,aAAa,CAAC3vC,IAAI,IAAI,IAAI,CAACqtC,gBAAgB,CAAC,CAAC,CAAC;IAClE,MAAMp6B,EAAE,GAAG,IAAI,CAACjG,OAAO;IACvB,MAAMpN,IAAI,GAAG,IAAI,CAACqc,YAAY,CAACC,SAAS,CAACC,kBAAkB,CAACJ,EAAE,EAAEC,IAAI,CAAC;IACrE,MAAM3b,KAAK,GAAGlI,SAAS,CAAC6H,IAAI,CAAC2vC,aAAa,CAACtvC,KAAK,IAAI,CAAC,CAAC;IACtD,MAAM4E,MAAM,IAAA26C,qBAAA,GAAGx9C,QAAQ,CAACE,UAAU,cAAAs9C,qBAAA,uBAAnBA,qBAAA,CAAqB3+C,GAAG;;IAEvC;IACA,MAAM8uC,iBAAiB,GAAG,IAAI,CAAC9zB,YAAY,CAACC,SAAS,CAAC8zB,WAAW,CAACj0B,EAAE,CAAC;IACrE,MAAMk0B,UAAU,GAAGj0B,IAAI,CAACja,GAAG,CAAChC,GAAG,IAAI;MACjC,IAAIwC,IAAI,CAACC,SAAS,CAACzC,GAAG,CAAC,CAAC5B,MAAM,IAAI,EAAE,EAAE;QACpC,OAAOoE,IAAI,CAACC,SAAS,CAACzC,GAAG,CAAC;MAC5B;MACA,OAAOwC,IAAI,CAACC,SAAS,CAACzC,GAAG,EAAEsB,SAAS,EAAE,CAAC,CAAC;IAC1C,CAAC,CAAC;IACF,MAAM6uC,UAAU,GAAGD,UAAU,CAACpxC,IAAI,CAAC,IAAI,CAAC,CAACV,MAAM,IAAI,EAAE,GAAG8xC,UAAU,CAACpxC,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,GAAGoxC,UAAU,CAACluC,GAAG,CAAChC,GAAG,IAAI,IAAI,GAAGA,GAAG,CAAC6f,KAAK,CAAC,IAAI,CAAC,CAAC/gB,IAAI,CAAC,MAAM,CAAC,CAAC,CAACA,IAAI,CAAC,KAAK,CAAC,GAAG,IAAI;IACpK,MAAMyE,MAAM,MAAAxF,MAAA,CAAMiyC,iBAAiB,CAACzrC,IAAI,OAAAxG,MAAA,CAAIoyC,UAAU,MAAG;IACzD,MAAM/wB,IAAI,GAAGnc,KAAK,CAACmtC,eAAe,MAAA0P,mBAAA,GAAI78C,KAAK,CAACy7B,WAAW,cAAAohB,mBAAA,uBAAjBA,mBAAA,CAAmB1gC,IAAI,OAAA2gC,eAAA,GAAI98C,KAAK,CAAC+rC,OAAO,cAAA+Q,eAAA,uBAAbA,eAAA,CAAe3P,eAAe;;IAE/F;IACA,MAAMpxB,MAAM,GAAGwB,iBAAiB,CAACvd,KAAK,CAAC;;IAEvC;IACA,IAAIuc,OAAO,GAAGle,SAAS;IACvB,IAAI4d,YAAY,GAAG5d,SAAS;IAC5B,IAAI;MACF,MAAM4Q,QAAQ,GAAG,MAAMinB,gCAAgC,CAAC,IAAI,CAAClsB,OAAO,EAAE,IAAI,CAACw+B,WAAW,CAAC,CAAC,EAAE,IAAI,CAACxU,OAAO,EAAE,IAAI,CAACjuB,OAAO,CAAC;MACrH,IAAIkJ,QAAQ,CAAC3N,IAAI,EAAE;QACjB2a,YAAY,GAAGhN,QAAQ,CAAC3N,IAAI;MAC9B;MACA,IAAI2N,QAAQ,CAACA,QAAQ,CAACsN,OAAO,EAAE;QAC7BA,OAAO,GAAG,MAAM4c,4BAA4B,CAAClqB,QAAQ,EAAE,IAAI,CAAC+kB,OAAO,CAAC;MACtE;IACF,CAAC,CAAC,OAAO7V,GAAG,EAAE;MACZ;IAAA;IAEF,OAAO,IAAIvC,gBAAgB,CAAC;MAC1BG,MAAM;MACN/e,IAAI;MACJiT,EAAE;MACF3P,MAAM;MACN1D,IAAI;MACJsB,OAAO;MACP+D,MAAM;MACN5E,KAAK;MACL8e,IAAI;MACJF,YAAY;MACZM;IACF,CAAC,EAAEvc,KAAK,CAAC;EACX;;EAEA;AACF;AACA;EACE,MAAMq8C,sBAAsBA,CAACtjC,EAAE,EAAE;IAC/B,IAAIC,IAAI,GAAG5a,SAAS,CAACjD,MAAM,GAAG,CAAC,IAAIiD,SAAS,CAAC,CAAC,CAAC,KAAKC,SAAS,GAAGD,SAAS,CAAC,CAAC,CAAC,GAAG,EAAE;IACjF,IAAIuuC,aAAa,GAAGvuC,SAAS,CAACjD,MAAM,GAAG,CAAC,GAAGiD,SAAS,CAAC,CAAC,CAAC,GAAGC,SAAS;IACnE,MAAMmL,MAAM,GAAG,IAAI,CAAC++B,SAAS,CAAC,CAAC;IAC/B9yC,SAAS,CAAC+T,MAAM,EAAE,yDAAyD,CAAC;IAC5E,MAAMpI,OAAO,GAAG,MAAM,IAAI,CAACo0C,UAAU,CAAC,CAAC;IACvC,MAAMx4C,IAAI,GAAG,MAAM,IAAI,CAACqtC,gBAAgB,CAAC,CAAC;IAC1C,MAAMp6B,EAAE,GAAG,IAAI,CAACy6B,aAAa,CAAC1gC,OAAO;IACrC,MAAM3M,KAAK,GAAG,CAAAsvC,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEtvC,KAAK,KAAI,CAAC;IACvC,IAAIlI,SAAS,CAAC6H,IAAI,CAACK,KAAK,CAAC,CAAC+e,EAAE,CAAC,CAAC,CAAC,EAAE;MAC/B,MAAM,IAAIhhB,KAAK,CAAC,yDAAyD,CAAC;IAC5E;IACA,MAAMwB,IAAI,GAAG,IAAI,CAAC8tC,aAAa,CAACxxB,SAAS,CAACC,kBAAkB,CAACJ,EAAE,EAAEC,IAAI,CAAC;IACtE,IAAIwzB,GAAG,GAAGr3C,SAAS,CAAC6H,IAAI,CAAC,CAAC,CAAC;IAC3B,IAAI;MACF,MAAM6uC,WAAW,GAAG,MAAM,IAAI,CAAC5yB,YAAY,CAAC2yB,WAAW,CAAC7yB,EAAE,CAAC,CAAC,GAAGC,IAAI,CAAC;MACpEwzB,GAAG,GAAGX,WAAW,CAAC7T,GAAG,CAAC,CAAC,CAAC;IAC1B,CAAC,CAAC,OAAOpxB,CAAC,EAAE;MACV;IAAA;;IAGF;IACA;IACA,IAAI4lC,GAAG,CAACC,EAAE,CAAC,MAAM,CAAC,EAAE;MAClBD,GAAG,GAAGr3C,SAAS,CAAC6H,IAAI,CAAC,MAAM,CAAC;IAC9B;;IAEA;IACA,IAAI2vC,aAAa,CAACt0B,QAAQ,IAAIljB,SAAS,CAAC6H,IAAI,CAAC2vC,aAAa,CAACt0B,QAAQ,CAAC,CAAC+D,EAAE,CAACowB,GAAG,CAAC,EAAE;MAC5EA,GAAG,GAAGr3C,SAAS,CAAC6H,IAAI,CAAC2vC,aAAa,CAACt0B,QAAQ,CAAC;IAC9C;IACA,MAAM0e,EAAE,GAAG;MACT/5B,IAAI;MACJiT,EAAE;MACFrT,IAAI;MACJwE,OAAO;MACPiX,QAAQ,EAAEm0B,GAAG;MACbrlB,YAAY,EAAEpO,EAAE,CAAC7b,QAAQ,CAAC,CAAC;MAC3BwvC,YAAY,EAAE1zB,IAAI;MAClB2zB;IACF,CAAC;IACD,OAAO,MAAM,IAAI,CAACR,0BAA0B,CAACpV,EAAE,CAAC;EAClD;EACA,MAAMgmB,aAAaA,CAACvzC,MAAM,EAAEq8B,MAAM,EAAEC,KAAK,EAAE7lC,OAAO,EAAE;IAClD,IAAI,CAAChB,IAAI,CAAC8iC,SAAS,CAACib,SAAS,EAAE;MAC7BtP,MAAM,EAAE,WAAW;MACnBztC,OAAO;MACP4kB,SAAS,EAAE;IACb,CAAC,CAAC;IACF,MAAM;MACJA,SAAS,EAAE6pB;IACb,CAAC,GAAG,MAAM/I,qBAAqB,CAACn8B,MAAM,EAAEq8B,MAAM,EAAEC,KAAK,EAAE7lC,OAAO,CAAC;IAC/D,IAAI,CAAChB,IAAI,CAAC8iC,SAAS,CAACib,SAAS,EAAE;MAC7BtP,MAAM,EAAE,WAAW;MACnBztC,OAAO;MACP4kB,SAAS,EAAE6pB;IACb,CAAC,CAAC;IACF,OAAOA,GAAG;EACZ;EACAgH,SAASA,CAACuH,SAAS,EAAEtH,IAAI,EAAE;IACzB,IAAI,CAACA,IAAI,IAAIA,IAAI,CAACx6C,MAAM,KAAK,CAAC,EAAE;MAC9B,OAAO,EAAE;IACX;IACA,MAAM+hD,KAAK,GAAG,IAAI,CAACxS,aAAa,CAACxxB,SAAS,CAACikC,aAAa,CAACF,SAAS,CAAC;IACnE,MAAMG,UAAU,GAAGzH,IAAI,CAAClvC,MAAM,CAAC42C,CAAC,IAAIA,CAAC,CAACC,MAAM,CAACC,OAAO,CAACL,KAAK,CAAC,IAAI,CAAC,CAAC;IACjE,OAAOE,UAAU,CAACr+C,GAAG,CAACmvB,CAAC,IAAI,IAAI,CAACwc,aAAa,CAACxxB,SAAS,CAACskC,QAAQ,CAACtvB,CAAC,CAAC,CAAC;EACtE;EACA,MAAMie,0BAA0BA,CAAC1Q,WAAW,EAAE;IAC5C,IAAI,IAAI,CAAC11B,OAAO,CAACxD,OAAO,IAAI,UAAU,IAAI,IAAI,CAACwD,OAAO,CAACxD,OAAO,EAAE;MAC9D,OAAO,IAAI,CAACurC,oBAAoB,CAACrS,WAAW,CAAC;IAC/C;IACA,OAAO,IAAI,CAACsS,oBAAoB,CAACtS,WAAW,CAAC;EAC/C;EACA,MAAMqS,oBAAoBA,CAACrS,WAAW,EAAE;IAAA,IAAAgiB,cAAA,EAAAC,qBAAA;IACtCjoD,SAAS,CAAC,IAAI,CAACsQ,OAAO,CAACxD,OAAO,IAAI,UAAU,IAAI,IAAI,CAACwD,OAAO,CAACxD,OAAO,EAAE,+CAA+C,CAAC;IACtH,MAAMiH,MAAM,GAAG,IAAI,CAAC++B,SAAS,CAAC,CAAC;IAC/B,MAAMnpC,QAAQ,GAAG,IAAI,CAACopC,WAAW,CAAC,CAAC;IACnC/yC,SAAS,CAAC+T,MAAM,IAAIpK,QAAQ,EAAE,iCAAiC,CAAC;IAChE,MAAMkmC,SAAS,GAAG,IAAI/vC,QAAQ,CAACosC,2BAA2B,CAAClG,WAAW,CAACr6B,OAAO,EAAE,mBAAmB,CAAC,EAAE8jC,oBAAoB,EAAE9lC,QAAQ,CAAC;IACrI,MAAM4vC,OAAO,GAAG,CAAC;IACjB,MAAMC,UAAU,GAAG,MAAM5J,oBAAoB,CAACC,SAAS,EAAE,UAAU,EAAE,CAAC7J,WAAW,CAACz+B,IAAI,EAAEgyC,OAAO,CAAC,CAAC;IACjG,MAAMrwC,OAAO,GAAG;MACd3B,IAAI,EAAEy+B,WAAW,CAACz+B,IAAI;MACtBiT,EAAE,EAAEwrB,WAAW,CAACxrB,EAAE;MAClB2a,KAAK,EAAEt1B,SAAS,CAAC+W,WAAW;MAC5B6iC,KAAK,EAAEzT,WAAW,CAACpjB,QAAQ,CAAC5I,QAAQ,CAAC,CAAC;MACtC0/B,aAAa,EAAE,GAAG;MAClBH,OAAO;MACPC,UAAU,EAAEA,UAAU,CAACx/B,QAAQ,CAAC,CAAC;MACjCu4B,QAAQ,EAAEt7B,IAAI,CAACC,KAAK,CAACzC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI,IAAI,EAAAszC,cAAA,OAAI,CAAC13C,OAAO,cAAA03C,cAAA,uBAAZA,cAAA,CAAcl7C,OAAO,KAAI,UAAU,IAAI,IAAI,CAACwD,OAAO,CAACxD,OAAO,MAAAm7C,qBAAA,GAAI,IAAI,CAAC33C,OAAO,CAACxD,OAAO,CAACS,QAAQ,cAAA06C,qBAAA,uBAA7BA,qBAAA,CAA+Bv6C,eAAe,KAAI,IAAI,CAAC,CAAC;MACjKvG,IAAI,EAAE6+B,WAAW,CAAC7+B;IACpB,CAAC;IACD,MAAMwyC,UAAU,GAAG/5C,KAAK,CAACqmC,QAAQ,CAACrmC,KAAK,CAACouC,iBAAiB,CAAC,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,EAAE,CAAC9kC,OAAO,CAAC3B,IAAI,EAAE2B,OAAO,CAACsR,EAAE,EAAEtR,OAAO,CAACisB,KAAK,EAAEjsB,OAAO,CAACuwC,KAAK,EAAEvwC,OAAO,CAACwwC,aAAa,EAAExwC,OAAO,CAACqwC,OAAO,EAAErwC,OAAO,CAACswC,UAAU,EAAEtwC,OAAO,CAACqpC,QAAQ,EAAE3yC,KAAK,CAACsmC,SAAS,CAACh9B,OAAO,CAAC/B,IAAI,CAAC,CAAC,CAAC,CAAC;IACtU,IAAI,CAACqC,IAAI,CAAC8iC,SAAS,CAACib,SAAS,EAAE;MAC7BtP,MAAM,EAAE,WAAW;MACnBztC,OAAO,EAAEmvC,UAAU;MACnBvqB,SAAS,EAAE;IACb,CAAC,CAAC;IACF,MAAMA,SAAS,GAAG,MAAMrb,MAAM,CAAC6lC,WAAW,CAACD,UAAU,CAAC;IACtD,IAAI,CAACnwC,IAAI,CAAC8iC,SAAS,CAACib,SAAS,EAAE;MAC7BtP,MAAM,EAAE,WAAW;MACnBztC,OAAO,EAAEmvC,UAAU;MACnBvqB;IACF,CAAC,CAAC;IACF,MAAMllB,QAAQ,GAAG,MAAMlF,KAAK,CAAC,+CAA+C,EAAE;MAC5E6F,MAAM,EAAE,MAAM;MACdsuC,IAAI,EAAErvC,IAAI,CAACC,SAAS,CAAC;QACnBxC,IAAI,EAAEy+B,WAAW,CAACz+B,IAAI;QACtBiG,KAAK,EAAE,IAAI,CAAC8C,OAAO,CAACxD,OAAO,CAACS,QAAQ,CAACC,KAAK;QAC1C1C,MAAM,EAAE,CAAC5B,OAAO,EAAEkmB,SAAS,CAAC;QAC5B5U,EAAE,EAAEwrB,WAAW,CAACxrB,EAAE;QAClBoI,QAAQ,EAAEojB,WAAW,CAACpjB,QAAQ,CAACsvB,WAAW,CAAC;MAC7C,CAAC,CAAC;MACFrgC,OAAO,EAAE;QACP,WAAW,EAAE,IAAI,CAACvB,OAAO,CAACxD,OAAO,CAACS,QAAQ,CAACE,MAAM;QACjD,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IACF,IAAIvD,QAAQ,CAACsuC,EAAE,EAAE;MACf,MAAMC,IAAI,GAAG,MAAMvuC,QAAQ,CAACm5B,IAAI,CAAC,CAAC;MAClC,IAAI,CAACoV,IAAI,CAAChC,MAAM,EAAE;QAChB,MAAM,IAAI9wC,KAAK,8BAAAN,MAAA,CAA8BozC,IAAI,CAAC9e,GAAG,CAAE,CAAC;MAC1D;MACA,OAAO8e,IAAI,CAAChC,MAAM;IACpB;IACA,MAAM,IAAI9wC,KAAK,0CAAAN,MAAA,CAA0C6E,QAAQ,CAAC+tC,MAAM,QAAA5yC,MAAA,CAAK6E,QAAQ,CAACwuC,UAAU,MAAG,CAAC;EACtG;EACA,MAAMJ,oBAAoBA,CAACtS,WAAW,EAAE;IAAA,IAAAkiB,SAAA;IACtCloD,SAAS,CAAC,IAAI,CAACsQ,OAAO,CAACxD,OAAO,IAAI,cAAc,IAAI,IAAI,CAACwD,OAAO,CAACxD,OAAO,EAAE,yFAAyF,CAAC;IACpK,MAAMiH,MAAM,GAAG,IAAI,CAAC++B,SAAS,CAAC,CAAC;IAC/B,MAAMnpC,QAAQ,GAAG,IAAI,CAACopC,WAAW,CAAC,CAAC;IACnC/yC,SAAS,CAAC+T,MAAM,EAAE,qBAAqB,CAAC;IACxC/T,SAAS,CAAC2J,QAAQ,EAAE,qBAAqB,CAAC;IAC1C,MAAMkvC,gBAAgB,GAAG,IAAI,CAACvoC,OAAO,CAACxD,OAAO,CAACC,YAAY,CAACE,uBAAuB,KAAK,IAAI,CAACqD,OAAO,CAACxD,OAAO,CAACC,YAAY,CAACG,eAAe,GAAGy+B,kBAAkB,CAAC3F,WAAW,CAACr6B,OAAO,CAAC,CAACkgC,wBAAwB,KAAK,MAAMwD,0BAA0B,CAAC,IAAI,CAAC0D,WAAW,CAAC,CAAC,EAAE,IAAI,CAACxU,OAAO,EAAE,EAAE,EAAE,IAAI,CAACjuB,OAAO,CAAClE,QAAQ,EAAE,IAAI,CAACkE,OAAO,CAAChE,SAAS,CAAC,CAAC,GAAGq/B,kBAAkB,CAAC3F,WAAW,CAACr6B,OAAO,CAAC,CAACigC,qBAAqB,KAAK,MAAM0D,uBAAuB,CAAC,IAAI,CAACyD,WAAW,CAAC,CAAC,EAAE,IAAI,CAACxU,OAAO,EAAE,EAAE,EAAE,IAAI,CAACjuB,OAAO,CAAClE,QAAQ,EAAE,IAAI,CAACkE,OAAO,CAAChE,SAAS,CAAC,CAAC,CAAC;IAC/f,MAAMujC,SAAS,GAAG,IAAI/vC,QAAQ,CAAC+4C,gBAAgB,EAAE9zC,YAAY,EAAE4E,QAAQ,CAAC;IACxE,MAAMqZ,KAAK,GAAG,MAAM4sB,oBAAoB,CAACC,SAAS,EAAE,UAAU,EAAE,CAAC7J,WAAW,CAACz+B,IAAI,CAAC,CAAC;IACnF,IAAI6oC,MAAM;IACV,IAAIC,KAAK;IACT,IAAI7lC,OAAO;IACX,IAAI,IAAI,CAAC8F,OAAO,CAACxD,OAAO,CAACQ,4BAA4B,EAAE;MACrD8iC,MAAM,GAAG;QACPvkC,IAAI,EAAE,iBAAiB;QACvBpG,OAAO,EAAE,OAAO;QAChBusC,iBAAiB,EAAE6G;MACrB,CAAC;MACDxI,KAAK,GAAG;QACNd,cAAc,EAAEC;MAClB,CAAC;MACDhlC,OAAO,GAAG;QACRjD,IAAI,EAAEy+B,WAAW,CAACz+B,IAAI;QACtBiT,EAAE,EAAEwrB,WAAW,CAACxrB,EAAE;QAClB5S,KAAK,EAAElI,SAAS,CAAC6H,IAAI,CAAC,CAAC,CAAC,CAACE,QAAQ,CAAC,CAAC;QACnCsvC,GAAG,EAAEr3C,SAAS,CAAC6H,IAAI,CAACy+B,WAAW,CAACpjB,QAAQ,CAAC,CAACnb,QAAQ,CAAC,CAAC;QACpDub,KAAK,EAAEtjB,SAAS,CAAC6H,IAAI,CAACyb,KAAK,CAAC,CAACvb,QAAQ,CAAC,CAAC;QACvCN,IAAI,EAAE6+B,WAAW,CAAC7+B,IAAI;QACtB2xC,OAAO,EAAEp5C,SAAS,CAAC6H,IAAI,CAACy+B,WAAW,CAACr6B,OAAO,CAAC,CAAClE,QAAQ,CAAC;MACxD,CAAC;IACH,CAAC,MAAM;MACL2oC,MAAM,GAAG;QACPvkC,IAAI,EAAE,IAAI,CAACyE,OAAO,CAACxD,OAAO,CAACC,YAAY,CAACK,UAAU;QAClD3H,OAAO,EAAE,IAAI,CAAC6K,OAAO,CAACxD,OAAO,CAACC,YAAY,CAACM,aAAa;QACxD1B,OAAO,EAAEq6B,WAAW,CAACr6B,OAAO;QAC5BqmC,iBAAiB,EAAE6G;MACrB,CAAC;MACDxI,KAAK,GAAG;QACNd;MACF,CAAC;MACD/kC,OAAO,GAAG;QACRjD,IAAI,EAAEy+B,WAAW,CAACz+B,IAAI;QACtBiT,EAAE,EAAEwrB,WAAW,CAACxrB,EAAE;QAClB5S,KAAK,EAAElI,SAAS,CAAC6H,IAAI,CAAC,CAAC,CAAC,CAACE,QAAQ,CAAC,CAAC;QACnCsvC,GAAG,EAAEr3C,SAAS,CAAC6H,IAAI,CAACy+B,WAAW,CAACpjB,QAAQ,CAAC,CAACnb,QAAQ,CAAC,CAAC;QACpDub,KAAK,EAAEtjB,SAAS,CAAC6H,IAAI,CAACyb,KAAK,CAAC,CAACvb,QAAQ,CAAC,CAAC;QACvCN,IAAI,EAAE6+B,WAAW,CAAC7+B;MACpB,CAAC;IACH;IACA,IAAIioB,SAAS;IACb,IAAI,CAAC5lB,IAAI,CAAC8iC,SAAS,CAACib,SAAS,EAAE;MAC7BtP,MAAM,EAAE,WAAW;MACnBztC,OAAO;MACP4kB,SAAS,EAAE;IACb,CAAC,CAAC;;IAEF;IACA;IACA,IAAI4W,WAAW,CAACtU,YAAY,KAAK,SAAS,IAAIsU,WAAW,CAACiR,YAAY,CAACvxC,MAAM,KAAK,CAAC,EAAE;MACnF,MAAM4sC,OAAO,GAAGtM,WAAW,CAACiR,YAAY,CAAC,CAAC,CAAC;MAC3C,MAAM8B,MAAM,GAAG/S,WAAW,CAACiR,YAAY,CAAC,CAAC,CAAC;MAC1C;MACA,MAAM;QACJzsC,OAAO,EAAEwuC,MAAM;QACf5pB,SAAS,EAAE6pB;MACb,CAAC,GAAG,MAAM7G,iBAAiB,CAACr+B,MAAM,EAAE,IAAI,CAACkhC,aAAa,CAAC1gC,OAAO,EAAEyxB,WAAW,CAACz+B,IAAI,EAAE+qC,OAAO,EAAEyG,MAAM,CAAC;MAClG,MAAM;QACJ3T,CAAC;QACDC,CAAC;QACD7lB;MACF,CAAC,GAAG5f,KAAK,CAACqxC,cAAc,CAACgI,GAAG,CAAC;MAC7BzuC,OAAO,GAAG;QACRgQ,EAAE,EAAE,IAAI,CAACjG,OAAO;QAChB89B,KAAK,EAAE2G,MAAM,CAAC3G,KAAK;QACnBC,OAAO,EAAE0G,MAAM,CAAC1G,OAAO;QACvB1qC,KAAK,EAAElI,SAAS,CAAC6H,IAAI,CAACyxC,MAAM,CAACpxC,KAAK,CAAC,CAACH,QAAQ,CAAC,CAAC;QAC9Cub,KAAK,EAAEtjB,SAAS,CAAC6H,IAAI,CAACyxC,MAAM,CAACh2B,KAAK,CAAC,CAACvb,QAAQ,CAAC,CAAC;QAC9C8qC,QAAQ,EAAE7yC,SAAS,CAAC6H,IAAI,CAACyxC,MAAM,CAACzG,QAAQ,CAAC,CAAC9qC,QAAQ,CAAC,CAAC;QACpD29B,CAAC;QACDC,CAAC;QACD7lB;MACF,CAAC;MACD4P,SAAS,GAAG6pB,GAAG;IACjB,CAAC,MAAM;MACL,MAAM;QACJ7pB,SAAS,EAAE6pB;MACb,CAAC,GAAG,MAAM/I,qBAAqB,CAACn8B,MAAM,EAAEq8B,MAAM,EAAEC,KAAK,EAAE7lC,OAAO,CAAC;MAC/D4kB,SAAS,GAAG6pB,GAAG;IACjB;IACA,IAAIC,WAAW,GAAG,SAAS;;IAE3B;IACA,KAAAgP,SAAA,GAAI19C,OAAO,cAAA09C,SAAA,eAAPA,SAAA,CAAS7V,KAAK,EAAE;MAClB6G,WAAW,GAAG,QAAQ;IACxB;IACA,MAAMC,IAAI,GAAGrvC,IAAI,CAACC,SAAS,CAAC;MAC1Bb,OAAO,EAAEsB,OAAO;MAChB4kB,SAAS;MACTypB,gBAAgB;MAChBj9B,IAAI,EAAEs9B;IACR,CAAC,CAAC;IACF,IAAI,CAAC1vC,IAAI,CAAC8iC,SAAS,CAACib,SAAS,EAAE;MAC7BtP,MAAM,EAAE,WAAW;MACnBztC,OAAO;MACP4kB;IACF,CAAC,CAAC;IACF,MAAMllB,QAAQ,GAAG,MAAMlF,KAAK,CAAC,IAAI,CAACsL,OAAO,CAACxD,OAAO,CAACC,YAAY,CAACC,UAAU,EAAE;MACzEnC,MAAM,EAAE,MAAM;MACdsuC;IACF,CAAC,CAAC;IACF,IAAIjvC,QAAQ,CAACsuC,EAAE,EAAE;MACf,MAAMC,IAAI,GAAG,MAAMvuC,QAAQ,CAACm5B,IAAI,CAAC,CAAC;MAClC,IAAI,CAACoV,IAAI,CAACxuC,MAAM,EAAE;QAChB,MAAM,IAAItE,KAAK,8BAAAN,MAAA,CAA8BozC,IAAI,CAACjuC,OAAO,CAAE,CAAC;MAC9D;MACA,MAAMP,MAAM,GAAGH,IAAI,CAACgH,KAAK,CAAC2nC,IAAI,CAACxuC,MAAM,CAAC;MACtC,OAAOA,MAAM,CAACwsC,MAAM;IACtB;IACA,MAAM,IAAI9wC,KAAK,0CAAAN,MAAA,CAA0C6E,QAAQ,CAAC+tC,MAAM,QAAA5yC,MAAA,CAAK6E,QAAQ,CAACwuC,UAAU,MAAG,CAAC;EACtG;AACF;AAEA,eAAeyP,qBAAqBA,CAACC,iBAAiB,EAAEpwC,eAAe,EAAED,KAAK,EAAE+C,QAAQ,EAAEsnC,aAAa,EAAE;EACvG,MAAMruC,MAAM,GAAGq0C,iBAAiB,CAACtV,SAAS,CAAC,CAAC;EAC5C,MAAMnpC,QAAQ,GAAGy+C,iBAAiB,CAACrV,WAAW,CAAC,CAAC;EAChD,MAAM0P,KAAK,GAAG,IAAIsD,eAAe,CAAChyC,MAAM,IAAIpK,QAAQ,EAAEqO,eAAe,EAAEvX,QAAQ,EAAE2nD,iBAAiB,CAAC93C,OAAO,EAAE83C,iBAAiB,CAAC7pB,OAAO,CAAC;EACtI,MAAM8T,KAAK,GAAG,MAAM+V,iBAAiB,CAACxT,gBAAgB,CAAC,CAAC;EACxD,MAAMtC,OAAO,GAAG8V,iBAAiB,CAAC7zC,OAAO;EACzC,MAAM8zC,SAAS,GAAG,MAAM5F,KAAK,CAAC1tB,IAAI,CAAC,WAAW,EAAE,CAACsd,KAAK,EAAEC,OAAO,CAAC,CAAC;EACjE,MAAMgW,UAAU,GAAG5oD,SAAS,CAAC6H,IAAI,CAACwQ,KAAK,CAAC,CAACwqB,GAAG,CAAC7iC,SAAS,CAAC6H,IAAI,CAACuT,QAAQ,CAAC,CAAC,CAAC+nB,GAAG,CAACjjC,KAAK,CAACwiC,UAAU,CAAC,GAAG,EAAEggB,aAAa,CAAC,CAAC;EAChH,IAAIiG,SAAS,CAACrR,EAAE,CAACsR,UAAU,CAAC,EAAE;IAC5B,MAAM7F,KAAK,CAAC7c,eAAe,CAAC,SAAS,EAAE,CAAC0M,OAAO,EAAE+V,SAAS,CAAC7lB,GAAG,CAAC8lB,UAAU,CAAC,CAAC,CAAC;EAC9E;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeC,mBAAmBA,CAAC5+C,QAAQ,EAAE6+C,UAAU,EAAExwC,eAAe,EAAE;EACxE,MAAMwB,QAAQ,GAAG,MAAM+oC,qBAAqB,CAAC54C,QAAQ,EAAEqO,eAAe,CAAC;EACvE,OAAOpY,KAAK,CAACwiC,UAAU,CAAChkC,YAAY,CAAC0S,KAAK,CAAC03C,UAAU,CAAC,EAAEhvC,QAAQ,CAACzN,QAAQ,CAAC;AAC5E;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe08C,YAAYA,CAACC,cAAc,EAAE5tC,QAAQ,EAAE6tC,oBAAoB,EAAEC,qBAAqB,EAAExG,aAAa,EAAEh/B,eAAe,EAAEmb,OAAO,EAAEsqB,mBAAmB,EAAEjF,qBAAqB,EAAE;EACtL,IAAI9rC,YAAY,GAAGqqC,0BAA0B,CAACwG,oBAAoB,CAACzvC,qBAAqB,EAAEkpC,aAAa,CAAC;EACxG,IAAIyC,MAAM,GAAG,CAACjlD,KAAK,CAACyZ,UAAU,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;EACxC,IAAIyvC,YAAY,GAAGH,oBAAoB,CAAC5wC,KAAK,CAAC,CAAC;EAC/C,IAAIgxC,sBAAsB,GAAGJ,oBAAoB,CAAC3wC,eAAe;EACjE,IAAI;IACF,IAAI,CAAC2wC,oBAAoB,CAACvvC,cAAc,CAAC3R,QAAQ,CAAC,CAAC,CAACumB,UAAU,CAACnuB,SAAS,CAAC+W,WAAW,CAAC,EAAE;MACrF,MAAMutC,aAAa,GAAG,MAAMiB,4BAA4B,CAACsD,cAAc,EAAEC,oBAAoB,CAACvvC,cAAc,CAAC3R,QAAQ,CAAC,CAAC,EAAE,MAAMmhD,qBAAqB,CAAC,CAAC,EAAExlC,eAAe,CAAC2vB,WAAW,CAAC,CAAC,EAAExU,OAAO,EAAEqlB,qBAAqB,CAAC;MACtN,IAAIO,aAAa,EAAE;QACjBU,MAAM,GAAGV,aAAa,CAAC7rC,KAAK;QAC5B;QACAR,YAAY,GAAGqsC,aAAa,CAACrsC,YAAY,KAAK,WAAW,GAAGjY,SAAS,CAAC4yC,UAAU,GAAG7yC,KAAK,CAACwiC,UAAU,CAAC+hB,aAAa,CAACrsC,YAAY,EAAEsqC,aAAa,CAAC;QAC9I0G,YAAY,GAAG3E,aAAa,CAACpsC,KAAK,KAAKnP,SAAS,IAAIu7C,aAAa,CAACpsC,KAAK,KAAK,WAAW,GAAGlY,SAAS,CAAC4yC,UAAU,GAAG,MAAM8V,mBAAmB,CAACnlC,eAAe,CAAC2vB,WAAW,CAAC,CAAC,EAAEoR,aAAa,CAACpsC,KAAK,EAAEosC,aAAa,CAACnsC,eAAe,IAAInY,SAAS,CAAC+W,WAAW,CAAC;QACtPmyC,sBAAsB,GAAG5E,aAAa,CAACnsC,eAAe,IAAInY,SAAS,CAAC+W,WAAW;MACjF,CAAC,MAAM;QACL;QACA,IAAIgtC,qBAAqB,KAAKZ,qBAAqB,CAACa,EAAE,EAAE;UACtD,MAAM,IAAIl+C,KAAK,CAAC,iCAAiC,CAAC;QACpD;QACA;MACF;IACF;EACF,CAAC,CAAC,OAAOwL,CAAC,EAAE;IACV;IACA,IAAI,CAAAA,CAAC,aAADA,CAAC,uBAADA,CAAC,CAAE3G,OAAO,MAAK,iCAAiC,EAAE;MACpD,MAAM2G,CAAC;IACT;IACA;IACAusB,OAAO,CAACC,IAAI,CAAC,sEAAsE,EAAExsB,CAAC,CAAC;EACzF;EACA,MAAMyhC,SAAS,GAAG,CAAC,MAAMxvB,eAAe,CAAC8iC,gBAAgB,CAAC,CAAC,KAAK,CAAC,CAAC;EAClE;EACA;EACA;EACA,MAAMrE,aAAa,GAAGiH,YAAY,CAACrhD,QAAQ,CAAC,CAAC,KAAK5H,SAAS,CAAC4yC,UAAU,CAAChrC,QAAQ,CAAC,CAAC,GAAGqhD,YAAY,GAAGH,oBAAoB,CAAC5wC,KAAK;EAC7H;EACA,MAAMC,eAAe,GAAG+wC,sBAAsB,KAAKlpD,SAAS,CAAC+W,WAAW,GAAGmyC,sBAAsB,GAAGJ,oBAAoB,CAAC3wC,eAAe;EACxI,IAAI6pC,aAAa,CAACl7B,EAAE,CAAC,CAAC,CAAC,EAAE;IACvB,IAAI07B,aAAa,CAACrqC,eAAe,CAAC,EAAE;MAClC46B,SAAS,CAAC,OAAO,CAAC,GAAGlzC,SAAS,CAAC6H,IAAI,CAACs6C,aAAa,CAAC,CAACtf,GAAG,CAACznB,QAAQ,CAAC,CAAC+nB,GAAG,CAACjjC,KAAK,CAACwiC,UAAU,CAAC,GAAG,EAAEggB,aAAa,CAAC,CAAC;IAC5G,CAAC,MAAM,IAAIyG,mBAAmB,EAAE;MAC9B,MAAMV,qBAAqB,CAAC/kC,eAAe,EAAEpL,eAAe,EAAE6pC,aAAa,EAAE/mC,QAAQ,EAAEsnC,aAAa,CAAC;IACvG;EACF;EACA,OAAO;IACLxP,SAAS;IACTiS,MAAM;IACN/sC,YAAY;IACZC,KAAK,EAAE8pC,aAAa;IACpB7pC,eAAe,EAAEA,eAAe;IAChC8wC,YAAY;IACZC;EACF,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeC,cAAcA,CAAC9E,aAAa,EAAE9B,aAAa,EAAEz4C,QAAQ,EAAE40B,OAAO,EAAEqlB,qBAAqB,EAAE;EACpG,MAAMjmC,KAAK,GAAG,MAAM+kC,mBAAmB,CAACwB,aAAa,CAAC;EACtD,MAAMnI,SAAS,GAAGp+B,KAAK,CAACrU,GAAG,CAAC0N,CAAC,IAAIA,CAAC,CAACzC,OAAO,CAAC;EAC3C,MAAM00C,aAAa,GAAG,IAAIx4B,GAAG,CAACsrB,SAAS,CAAC,CAACmN,IAAI,GAAGnN,SAAS,CAACr2C,MAAM;EAChE,IAAIujD,aAAa,EAAE;IACjB,MAAM,IAAIlkC,mBAAmB,CAAC,CAAC;EACjC;EACA,MAAM2/B,IAAI,GAAG,MAAMzB,iBAAiB,CAACgB,cAAc,CAACtmC,KAAK,EAAEykC,aAAa,EAAEz4C,QAAQ,EAAE40B,OAAO,EAAEqlB,qBAAqB,CAAC;EACnH,OAAO;IACLprC,UAAU,EAAEksC,IAAI,CAACK,iBAAiB,CAACvsC,UAAU;IAC7CG,WAAW,EAAE+rC,IAAI,CAACtpC;EACpB,CAAC;AACH;AAEA,SAAS+tC,OAAOA,CAAC1qD,CAAC,EAAEQ,CAAC,EAAE;EACrB,MAAMmqD,IAAI,GAAG1pD,SAAS,CAAC6H,IAAI,CAAC9I,CAAC,CAAC;EAC9B,MAAM4qD,KAAK,GAAG3pD,SAAS,CAAC6H,IAAI,CAACtI,CAAC,CAAC;EAC/B,IAAImqD,IAAI,CAACE,EAAE,CAACD,KAAK,CAAC,EAAE;IAClB,OAAO,CAAC;EACV,CAAC,MAAM,IAAID,IAAI,CAACziC,EAAE,CAAC0iC,KAAK,CAAC,EAAE;IACzB,OAAO,CAAC;EACV,CAAC,MAAM;IACL,OAAO,CAAC,CAAC;EACX;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeE,mBAAmBA,CAACC,oBAAoB,EAAEpH,aAAa,EAAEz4C,QAAQ,EAAE40B,OAAO,EAAEqlB,qBAAqB,EAAE;EAChH,MAAM6F,aAAa,GAAG,EAAE;EACxB,MAAMC,mBAAmB,GAAG,MAAMt+C,OAAO,CAAC+M,GAAG,CAACqxC,oBAAoB,CAAClgD,GAAG,CAAC,MAAMqgD,cAAc,IAAI;IAC7F;IACA,IAAIA,cAAc,CAACrwC,QAAQ,IAAIqwC,cAAc,CAACrwC,QAAQ,CAAC5T,MAAM,GAAG,CAAC,EAAE;MACjE,MAAMkkD,YAAY,GAAG,MAAMZ,cAAc,CAACW,cAAc,CAACrwC,QAAQ,EAAE8oC,aAAa,EAAEz4C,QAAQ,EAAE40B,OAAO,EAAEqlB,qBAAqB,CAAC;MAC3H6F,aAAa,CAACp+C,IAAI,CAACu+C,YAAY,CAAC;MAChCD,cAAc,CAACvwC,cAAc,GAAGwwC,YAAY,CAACpxC,UAAU;IACzD,CAAC,MAAM;MACL;MACAmxC,cAAc,CAACvwC,cAAc,GAAGxZ,KAAK,CAACyZ,UAAU,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;IAC3D;IACA;IACA,OAAOswC,cAAc;EACvB,CAAC,CAAC,CAAC;EACH,OAAO;IACLD,mBAAmB;IACnBD;EACF,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeI,sBAAsBA,CAACxqD,CAAC,EAAE+iD,aAAa,EAAEz4C,QAAQ,EAAE40B,OAAO,EAAE;EACzE,MAAMujB,QAAQ,GAAGziD,CAAC,CAAC2Y,eAAe,KAAKnY,SAAS,CAAC+W,WAAW,GAAGpB,oBAAoB,GAAGnW,CAAC,CAAC2Y,eAAe;EACvG,MAAMiB,kBAAkB,GAAGkpC,0BAA0B,CAAC9iD,CAAC,CAAC4Z,kBAAkB,EAAEmpC,aAAa,CAAC;EAC1F,MAAMlpC,qBAAqB,GAAGipC,0BAA0B,CAAC9iD,CAAC,CAAC6Z,qBAAqB,EAAEkpC,aAAa,CAAC;EAChG,IAAI0H,aAAa;EACjB,IAAIzqD,CAAC,CAACma,QAAQ,EAAE;IACd,IAAI,OAAOna,CAAC,CAACma,QAAQ,KAAK,QAAQ,EAAE;MAClCswC,aAAa,GAAGzqD,CAAC,CAACma,QAAQ;IAC5B,CAAC,MAAM;MACLswC,aAAa,GAAG,MAAMvrB,OAAO,CAACkc,MAAM,CAACp7C,CAAC,CAACma,QAAQ,CAAC;IAClD;EACF;EACA,OAAO;IACLmoC,cAAc,EAAEtiD,CAAC,CAAC2Z,SAAS;IAC3BC,kBAAkB;IAClB2oC,aAAa,EAAE,CAAC;IAChB1oC,qBAAqB;IACrB2oC,aAAa,EAAE,MAAM0G,mBAAmB,CAAC5+C,QAAQ,EAAEtK,CAAC,CAAC0Y,KAAK,EAAE+pC,QAAQ,CAAC;IACrEA,QAAQ;IACRtpC,UAAU,EAAEnZ,CAAC,CAAC+Z,cAAc,CAAC3R,QAAQ,CAAC,CAAC;IACvCu6C,8BAA8B,EAAE3iD,CAAC,CAAC8Z,aAAa,IAAI,CAAC;IACpDK,QAAQ,EAAEswC;EACZ,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeC,2BAA2BA,CAACP,oBAAoB,EAAEpH,aAAa,EAAEz4C,QAAQ,EAAE40B,OAAO,EAAEqlB,qBAAqB,EAAE;EACxH,MAAM;IACJ8F,mBAAmB;IACnBD;EACF,CAAC,GAAG,MAAMF,mBAAmB,CAACC,oBAAoB,EAAEpH,aAAa,EAAEz4C,QAAQ,EAAE40B,OAAO,EAAEqlB,qBAAqB,CAAC;EAC5G,MAAMoG,YAAY,GAAG,MAAMvwC,wBAAwB,CAACrB,UAAU,CAACsxC,mBAAmB,CAAC;EACnF;EACA,MAAMO,gBAAgB,GAAG,CAAC,MAAM7+C,OAAO,CAAC+M,GAAG,CAAC6xC,YAAY,CAAC1gD,GAAG,CAACjK,CAAC,IAAIwqD,sBAAsB,CAACxqD,CAAC,EAAE+iD,aAAa,EAAEz4C,QAAQ,EAAE40B,OAAO,CAAC,CAAC,CAAC,EAAEqd,IAAI,CAAC,CAACn9C,CAAC,EAAEQ,CAAC,KAAK;IAC9I,OAAOkqD,OAAO,CAAC1qD,CAAC,CAACkjD,cAAc,EAAE1iD,CAAC,CAAC0iD,cAAc,CAAC;EACpD,CAAC,CAAC;EACF,OAAO;IACL8H,aAAa;IACbQ;EACF,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeC,kBAAkBA,CAACC,gBAAgB,EAAEnP,KAAK,EAAEjjC,KAAK,EAAE;EAChE,MAAMyB,QAAQ,GAAG,MAAM+oC,qBAAqB,CAAC4H,gBAAgB,EAAEnP,KAAK,CAAC;EACrE,OAAO;IACL,GAAGxhC,QAAQ;IACX5R,KAAK,EAAElI,SAAS,CAAC6H,IAAI,CAACwQ,KAAK,CAAC;IAC5BN,YAAY,EAAE7X,KAAK,CAACwqD,WAAW,CAACryC,KAAK,EAAEyB,QAAQ,CAACzN,QAAQ;EAC1D,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAes+C,aAAaA,CAAC7xC,UAAU,EAAE6sC,cAAc,EAAE9mB,OAAO,EAAE;EAChE,IAAI,CAAC8mB,cAAc,EAAE;IACnB,OAAO,IAAI;EACb;EACA,MAAM1sC,WAAW,GAAG0sC,cAAc,CAAC7sC,UAAU,CAAC;EAC9C,IAAIG,WAAW,EAAE;IACf,MAAMyN,GAAG,GAAG,MAAMmY,OAAO,CAACC,YAAY,CAAC7lB,WAAW,CAAC;IACnD,IAAIyN,GAAG,CAACo9B,mBAAmB,IAAIp9B,GAAG,CAAC5N,UAAU,KAAKA,UAAU,EAAE;MAC5D,MAAM8xC,GAAG,GAAG,MAAMrH,iBAAiB,CAACK,OAAO,CAAC3qC,WAAW,EAAE4lB,OAAO,CAAC;MACjE,OAAO,CAAA+rB,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAEnF,aAAa,CAAC,CAAC,KAAI,IAAI;IACrC,CAAC,MAAM;MACL,MAAMI,YAAY,GAAG,MAAMhtC,cAAc,CAACH,UAAU,CAACgO,GAAG,CAAC;MACzD,IAAI5N,UAAU,KAAK+sC,YAAY,CAAC/sC,UAAU,EAAE;QAC1C,OAAO+sC,YAAY,CAAC9sC,MAAM,CAACnP,GAAG,CAACihD,KAAK,KAAK;UACvCh2C,OAAO,EAAEg2C,KAAK,CAACh2C,OAAO;UACtBuD,YAAY,EAAEyyC,KAAK,CAACzyC,YAAY;UAChCC,KAAK,EAAEwyC,KAAK,CAACxyC,KAAK;UAClBC,eAAe,EAAEuyC,KAAK,CAACvyC;QACzB,CAAC,CAAC,CAAC;MACL;IACF;EACF;EACA,OAAO,IAAI;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASwyC,yBAAyBA,CAACC,EAAE,EAAErI,aAAa,EAAE;EACpD,IAAIqI,EAAE,CAAChjD,QAAQ,CAAC,CAAC,KAAK5H,SAAS,CAAC4yC,UAAU,CAAChrC,QAAQ,CAAC,CAAC,EAAE;IACrD,OAAO,WAAW;EACpB,CAAC,MAAM;IACL,OAAO7H,KAAK,CAACwqD,WAAW,CAACK,EAAE,EAAErI,aAAa,CAAC;EAC7C;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAesI,+BAA+BA,CAACC,EAAE,EAAEvI,aAAa,EAAEz4C,QAAQ,EAAE07C,cAAc,EAAE9mB,OAAO,EAAEqsB,sBAAsB,EAAE;EAAA,IAAAC,qBAAA;EAC3H,MAAMC,EAAE,GAAG,MAAMZ,kBAAkB,CAACvgD,QAAQ,EAAEghD,EAAE,CAAC7I,QAAQ,EAAE6I,EAAE,CAAC9I,aAAa,CAAC;EAC5E,MAAM5oC,kBAAkB,GAAGuxC,yBAAyB,CAACG,EAAE,CAAC1xC,kBAAkB,EAAEmpC,aAAa,CAAC;EAC1F,MAAMlpC,qBAAqB,GAAGsxC,yBAAyB,CAACG,EAAE,CAACzxC,qBAAqB,EAAEkpC,aAAa,CAAC;EAChG,MAAMvoC,eAAe,GAAG2wC,yBAAyB,CAAC9qD,SAAS,CAAC6H,IAAI,CAACojD,EAAE,CAAC1xC,kBAAkB,CAAC,CAAC8xC,GAAG,CAACJ,EAAE,CAAC/I,aAAa,CAAC,EAAEQ,aAAa,CAAC;EAC7H,MAAMtoC,iBAAiB,GAAG0wC,yBAAyB,CAACG,EAAE,CAAC/I,aAAa,EAAEQ,aAAa,CAAC;EACpF,IAAI4I,gBAAgB;EACpB,IAAIL,EAAE,CAACnxC,QAAQ,EAAE;IACfwxC,gBAAgB,GAAG,MAAMzsB,OAAO,CAACC,YAAY,CAACmsB,EAAE,CAACnxC,QAAQ,CAAC;EAC5D;EACA,OAAOI,0BAA0B,CAACxB,UAAU,CAAC;IAC3CY,SAAS,EAAE2xC,EAAE,CAAChJ,cAAc;IAC5B1oC,kBAAkB;IAClBC,qBAAqB;IACrBY,iBAAiB;IACjBD,eAAe;IACfV,aAAa,GAAA0xC,qBAAA,GAAEF,EAAE,CAAC3I,8BAA8B,cAAA6I,qBAAA,uBAAjCA,qBAAA,CAAmCpjD,QAAQ,CAAC,CAAC;IAC5DsQ,KAAK,EAAErY,SAAS,CAAC6H,IAAI,CAACojD,EAAE,CAAC9I,aAAa,CAAC;IACvCC,QAAQ,EAAE6I,EAAE,CAAC7I,QAAQ;IACrB9pC,eAAe,EAAE2yC,EAAE,CAAC7I,QAAQ;IAC5B/nC,gBAAgB,EAAE+wC,EAAE;IACpB1xC,cAAc,EAAEuxC,EAAE,CAACnyC,UAAU;IAC7Bc,QAAQ,EAAEsxC,sBAAsB,GAAG,MAAMP,aAAa,CAACM,EAAE,CAACnyC,UAAU,EAAE6sC,cAAc,EAAE9mB,OAAO,CAAC,GAAG31B,SAAS;IAC1G4Q,QAAQ,EAAEwxC;EACZ,CAAC,CAAC;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeC,6BAA6BA,CAAC5gD,KAAK,EAAE6gD,mBAAmB,EAAEC,kBAAkB,EAAE;EAC3F,IAAI9gD,KAAK,IAAI8gD,kBAAkB,CAACzlD,MAAM,EAAE;IACtC,MAAMC,KAAK,qCAAAN,MAAA,CAAqCgF,KAAK,YAAAhF,MAAA,CAAS8lD,kBAAkB,CAACzlD,MAAM,gBAAa,CAAC;EACvG;EACA;EACA,MAAM0lD,aAAa,GAAGD,kBAAkB,CAAC9gD,KAAK,CAAC,CAAC0P,gBAAgB,CAAChO,QAAQ;EACzE,MAAMs/C,UAAU,GAAGF,kBAAkB,CAAC9gD,KAAK,CAAC,CAAC0N,KAAK;EAClD,MAAMuzC,aAAa,GAAG1rD,KAAK,CAACwqD,WAAW,CAACiB,UAAU,EAAED,aAAa,CAAC;;EAElE;EACA,MAAMG,kBAAkB,GAAG,MAAMxyC,yBAAyB,CAACX,UAAU,CAAC;IACpE,GAAG+yC,kBAAkB,CAAC9gD,KAAK,CAAC;IAC5B0N,KAAK,EAAEuzC,aAAa;IACpB,GAAGJ;EACL,CAAC,CAAC;;EAEF;EACA,MAAMM,qBAAqB,GAAG,MAAM5xC,0BAA0B,CAACxB,UAAU,CAAC;IACxE,GAAGmzC,kBAAkB;IACrBxzC,KAAK,EAAEszC;EACT,CAAC,CAAC;EACF,OAAOF,kBAAkB,CAAC7hD,GAAG,CAAC,CAACmiD,cAAc,EAAEz0C,CAAC,KAAK;IACnD,IAAI00C,mBAAmB;IACvB,IAAI10C,CAAC,KAAK3M,KAAK,EAAE;MACfqhD,mBAAmB,GAAGF,qBAAqB;IAC7C,CAAC,MAAM;MACLE,mBAAmB,GAAGD,cAAc;IACtC;IACA,MAAME,cAAc,GAAG/rD,KAAK,CAACwqD,WAAW,CAACsB,mBAAmB,CAAC3zC,KAAK,EAAEqzC,aAAa,CAAC;IAClF,OAAO;MACL,GAAGM,mBAAmB;MACtB3zC,KAAK,EAAE4zC,cAAc,CAAC;IACxB,CAAC;EACH,CAAC,CAAC;AACJ;;AAEA,IAAIC,MAAM,GAAG,aAAa,UAAUA,MAAM,EAAE;EAC1CA,MAAM,CAACA,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,GAAG,OAAO;EACrCA,MAAM,CAACA,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,GAAG,SAAS;EACzCA,MAAM,CAACA,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,GAAG,WAAW;EAC7CA,MAAM,CAACA,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,GAAG,WAAW;EAC7CA,MAAM,CAACA,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,GAAG,QAAQ;EACvCA,MAAM,CAACA,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,GAAG,SAAS;EACzC,OAAOA,MAAM;AACf,CAAC,CAAC,CAAC,CAAC,CAAC;AAEL,IAAIC,gBAAgB,GAAG,aAAa,UAAUA,gBAAgB,EAAE;EAC9DA,gBAAgB,CAAC,iBAAiB,CAAC,GAAG,sCAAsC;EAC5EA,gBAAgB,CAAC,mBAAmB,CAAC,GAAG,uCAAuC;EAC/EA,gBAAgB,CAAC,gCAAgC,CAAC,GAAG,4DAA4D;EACjHA,gBAAgB,CAAC,sBAAsB,CAAC,GAAG,kCAAkC;EAC7EA,gBAAgB,CAAC,gBAAgB,CAAC,GAAG,qCAAqC;EAC1EA,gBAAgB,CAAC,sBAAsB,CAAC,GAAG,8BAA8B;EACzEA,gBAAgB,CAAC,2BAA2B,CAAC,GAAG,kDAAkD;EAClGA,gBAAgB,CAAC,iBAAiB,CAAC,GAAG,iEAAiE;EACvGA,gBAAgB,CAAC,oBAAoB,CAAC,GAAG,2EAA2E;EACpHA,gBAAgB,CAAC,qBAAqB,CAAC,GAAG,kCAAkC;EAC5EA,gBAAgB,CAAC,UAAU,CAAC,GAAG,sBAAsB;EACrDA,gBAAgB,CAAC,SAAS,CAAC,GAAG,4BAA4B;EAC1D,OAAOA,gBAAgB;AACzB,CAAC,CAAC,CAAC,CAAC,CAAC;;AAEL;AACA;AACA;AACA;AACA,MAAMC,mBAAmB,CAAC;EACxBvjD,WAAWA,CAAC6a,eAAe,EAAE5J,SAAQ,EAAE+kB,OAAO,EAAE;IAkThD;AACF;AACA;IAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAlCEwb,eAAA,cAmCM,eAAetY,wBAAwB,CAAC,CAAC,MAAM;MACnD,IAAIsqB,KAAK,GAAG,IAAI;MAChB,OAAO,gBAAgBvC,oBAAoB,EAAE;QAC3C,IAAIwC,2BAA2B,GAAGrjD,SAAS,CAACjD,MAAM,GAAG,CAAC,IAAIiD,SAAS,CAAC,CAAC,CAAC,KAAKC,SAAS,GAAGD,SAAS,CAAC,CAAC,CAAC,GAAG,KAAK;QAC3G,IAAIsjD,wBAAwB,GAAGzC,oBAAoB;QACnD,IAAIuC,KAAK,CAACG,uBAAuB,CAACH,KAAK,CAAC3oC,eAAe,CAAC,IAAI2oC,KAAK,CAACI,oBAAoB,CAACJ,KAAK,CAAC3oC,eAAe,CAAC,EAAE;UAC7G4oC,2BAA2B,GAAG,IAAI;UAClC,IAAIxC,oBAAoB,CAAC9jD,MAAM,KAAK,CAAC,EAAE;YACrCumD,wBAAwB,GAAG,CAAC;cAC1BjzC,SAAS,EAAE,IAAIvE,IAAI,CAAC,CAAC,CAAC;cACtBuD,eAAe,EAAEnY,SAAS,CAAC+W,WAAW;cACtCmB,KAAK,EAAE,CAAC;cACRkB,kBAAkB,EAAE,CAAC;cACrBC,qBAAqB,EAAE,CAAC;cACxBC,aAAa,EAAE,CAAC;cAChBC,cAAc,EAAExZ,KAAK,CAACyZ,UAAU,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;cACzCC,QAAQ,EAAE;YACZ,CAAC,CAAC;UACJ,CAAC,MAAM,IAAIkwC,oBAAoB,CAAC9jD,MAAM,GAAG,CAAC,EAAE;YAC1C,MAAM,IAAIC,KAAK,CAAC,uFAAuF,CAAC;UAC1G;QACF;;QAEA;QACA,IAAIomD,KAAK,CAACI,oBAAoB,CAACJ,KAAK,CAAC3oC,eAAe,CAAC,IAAI2oC,KAAK,CAACK,mBAAmB,CAACL,KAAK,CAAC3oC,eAAe,CAAC,EAAE;UACzG6oC,wBAAwB,CAAC9hD,OAAO,CAACkiD,EAAE,IAAI;YAAA,IAAAC,qBAAA;YACrC,IAAID,EAAE,CAAC/yC,QAAQ,IAAI+yC,EAAE,CAAC/yC,QAAQ,CAAC5T,MAAM,GAAG,CAAC,KAAK2mD,EAAE,CAACnzC,qBAAqB,KAAKtQ,SAAS,IAAIyjD,EAAE,CAACnzC,qBAAqB,KAAK,WAAW,CAAC,EAAE;cACjI,MAAM,IAAIvT,KAAK,CAAC,mFAAmF,GAAG,iHAAiH,GAAG,iHAAiH,CAAC;YAC9U;YACA,IAAI0mD,EAAE,CAAC/yC,QAAQ,IAAI+yC,EAAE,CAAC/yC,QAAQ,CAAC5T,MAAM,GAAG,CAAC,IAAI,EAAA4mD,qBAAA,GAAAD,EAAE,CAACnzC,qBAAqB,cAAAozC,qBAAA,uBAAxBA,qBAAA,CAA0B7kD,QAAQ,CAAC,CAAC,MAAK,GAAG,IAAI4kD,EAAE,CAAC/yC,QAAQ,CAAChQ,GAAG,CAAC+7B,CAAC,IAAI;cAChH,IAAI,OAAOA,CAAC,KAAK,QAAQ,EAAE;gBACzB,OAAO,CAAC;cACV,CAAC,MAAM;gBAAA,IAAAknB,eAAA;gBACL,OAAOvmD,MAAM,CAAC,EAAAumD,eAAA,GAAAlnB,CAAC,CAACvtB,YAAY,cAAAy0C,eAAA,uBAAdA,eAAA,CAAgB9kD,QAAQ,CAAC,CAAC,KAAI,CAAC,CAAC;cAChD;YACF,CAAC,CAAC,CAAC8I,MAAM,CAAC,CAACc,GAAG,EAAE/K,OAAO,KAAK;cAC1B,OAAO+K,GAAG,GAAG/K,OAAO;YACtB,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,EAAE;cACX,MAAM,IAAIX,KAAK,CAAC,+HAA+H,CAAC;YAClJ;UACF,CAAC,CAAC;QACJ;;QAEA;QACA,MAAM;UACJ8jD,aAAa;UACbQ;QACF,CAAC,GAAG,MAAMF,2BAA2B,CAACkC,wBAAwB,EAAE,MAAMF,KAAK,CAACS,gBAAgB,CAAC,CAAC,EAAET,KAAK,CAAC3oC,eAAe,CAAC2vB,WAAW,CAAC,CAAC,EAAEgZ,KAAK,CAACxtB,OAAO,EAAEwtB,KAAK,CAACU,wBAAwB,CAAC,CAAC,CAAC;QACrL,MAAMC,UAAU,GAAG,CAAC,CAAC;QACrBjD,aAAa,CAACt/C,OAAO,CAACk7B,CAAC,IAAI;UACzBqnB,UAAU,CAACrnB,CAAC,CAAC7sB,UAAU,CAAC,GAAG6sB,CAAC,CAAC1sB,WAAW;QAC1C,CAAC,CAAC;QACF,MAAMa,QAAQ,GAAG,MAAMuyC,KAAK,CAACvyC,QAAQ,CAAClG,GAAG,CAAC,CAAC;QAC3C,MAAMooC,OAAO,GAAG,EAAE;;QAElB;QACA,IAAI,CAAC/6C,SAAS,CAAC6Y,QAAQ,CAAC7B,MAAM,EAAE+0C,UAAU,CAAC,EAAE;UAC3C,MAAM7P,cAAc,GAAG,MAAMkP,KAAK,CAACvyC,QAAQ,CAAC4gC,kBAAkB,CAAC;YAC7D,GAAG5gC,QAAQ;YACX7B,MAAM,EAAE+0C;UACV,CAAC,CAAC;UACF;UACA,MAAM5P,WAAW,GAAG,MAAMiP,KAAK,CAACvyC,QAAQ,CAACwgC,uBAAuB,CAAC6C,cAAc,CAAC;;UAEhF;UACA;UACA,IAAIprB,WAAW,CAAC,gBAAgB,EAAEs6B,KAAK,CAAC3oC,eAAe,CAAC,EAAE;YACxD,MAAMm4B,eAAe,GAAG,IAAIp4B,eAAe,CAAC4oC,KAAK,CAAC3oC,eAAe,CAAC;YAClEs4B,OAAO,CAACrwC,IAAI,CAACkwC,eAAe,CAACl4B,MAAM,CAAC,gBAAgB,EAAE,CAACy5B,WAAW,CAAC,CAAC,CAAC;UACvE,CAAC,MAAM;YACL,MAAM,IAAIn3C,KAAK,CAAC,iHAAiH,CAAC;UACpI;QACF;QACA,MAAMgnD,EAAE,GAAGZ,KAAK,CAAC3oC,eAAe;QAChC,MAAMwpC,mBAAmB,GAAG,IAAIzpC,eAAe,CAACwpC,EAAE,CAAC;QACnD,IAAIZ,KAAK,CAACG,uBAAuB,CAACS,EAAE,CAAC,EAAE;UACrC,MAAME,qBAAqB,GAAG,IAAI1pC,eAAe,CAACwpC,EAAE,CAAC;UACrDjR,OAAO,CAACrwC,IAAI,CAACwhD,qBAAqB,CAACxpC,MAAM,CAAC,oBAAoB,EAAE,CAACq+B,6BAA6B,CAACuI,gBAAgB,CAAC,CAAC,CAAC,CAAC,EAAE+B,2BAA2B,CAAC,CAAC,CAAC;QACrJ,CAAC,MAAM,IAAID,KAAK,CAACe,sBAAsB,CAACH,EAAE,CAAC,EAAE;UAC3CjR,OAAO,CAACrwC,IAAI,CAACuhD,mBAAmB,CAACvpC,MAAM,CAAC,oBAAoB,EAAE,CAAC4mC,gBAAgB,CAAC3gD,GAAG,CAACo4C,6BAA6B,CAAC,EAAEsK,2BAA2B,CAAC,CAAC,CAAC;QACpJ,CAAC,MAAM,IAAID,KAAK,CAACI,oBAAoB,CAACQ,EAAE,CAAC,EAAE;UACzCjR,OAAO,CAACrwC,IAAI,CAACuhD,mBAAmB,CAACvpC,MAAM,CAAC,oBAAoB,EAAE,CAAC4+B,0BAA0B,CAACgI,gBAAgB,CAAC,CAAC,CAAC,CAAC,EAAE+B,2BAA2B,CAAC,CAAC,CAAC;QAChJ,CAAC,MAAM,IAAID,KAAK,CAACK,mBAAmB,CAACO,EAAE,CAAC,EAAE;UACxCjR,OAAO,CAACrwC,IAAI,CAACuhD,mBAAmB,CAACvpC,MAAM,CAAC,oBAAoB,EAAE,CAAC4mC,gBAAgB,CAAC3gD,GAAG,CAAC24C,0BAA0B,CAAC,EAAE+J,2BAA2B,CAAC,CAAC,CAAC;QACjJ,CAAC,MAAM;UACL,MAAM,IAAIrmD,KAAK,CAAC,4CAA4C,CAAC;QAC/D;QACA,IAAI8rB,WAAW,CAAC,WAAW,EAAEs6B,KAAK,CAAC3oC,eAAe,CAAC,EAAE;UACnD,OAAO0xB,WAAW,CAACC,mBAAmB,CAAC;YACrC3xB,eAAe,EAAE2oC,KAAK,CAAC3oC,eAAe;YACtCvY,MAAM,EAAE,WAAW;YACnB0Y,IAAI,EAAE,CAACm4B,OAAO;UAChB,CAAC,CAAC;QACJ;QACA,MAAM,IAAI/1C,KAAK,CAAC,qCAAqC,CAAC;MACxD,CAAC;IACH,CAAC,EAAE,CAAC,CAAC;IAEL;AACF;AACA;AACA;AACA;AACA;IALEo0C,eAAA,iBAMS,eAAetY,wBAAwB,CAAC,OAAOp3B,KAAK,EAAE6gD,mBAAmB,KAAK;MACrF,MAAMC,kBAAkB,GAAG,MAAM,IAAI,CAAC1P,MAAM,CAAC,CAAC;MAC9C,MAAMsR,kBAAkB,GAAG,MAAM9B,6BAA6B,CAAC5gD,KAAK,EAAE6gD,mBAAmB,EAAEC,kBAAkB,CAAC;MAC9G,OAAO,MAAM,IAAI,CAAC13C,GAAG,CAAC+tB,OAAO,CAACurB,kBAAkB,CAAC;IACnD,CAAC,CAAC;IApcA,IAAI,CAACxuB,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACnb,eAAe,GAAGA,eAAe;IACtC,IAAI,CAAC5J,QAAQ,GAAGA,SAAQ;EAC1B;;EAEA;AACF;AACA;;EAEE;AACF;AACA;AACA;AACA;EACE,MAAMwzC,SAASA,CAAC18C,OAAO,EAAE;IACvB,MAAM+7C,EAAE,GAAG,MAAM,IAAI,CAAC/4C,GAAG,CAAC,CAAC;IAC3B,MAAMkG,QAAQ,GAAG,MAAM,IAAI,CAACA,QAAQ,CAAClG,GAAG,CAAC,CAAC;IAC1C,OAAO,MAAMo3C,+BAA+B,CAAC2B,EAAE,EAAE,MAAM,IAAI,CAACG,gBAAgB,CAAC,CAAC,EAAE,IAAI,CAACppC,eAAe,CAAC2vB,WAAW,CAAC,CAAC,EAAEv5B,QAAQ,CAAC7B,MAAM,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC4mB,OAAO,EAAE,CAAAjuB,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAE28C,aAAa,KAAI,KAAK,CAAC;EAC3L;EACA,MAAM35C,GAAGA,CAAC45C,WAAW,EAAE;IACrB,IAAI,IAAI,CAAChB,uBAAuB,CAAC,IAAI,CAAC9oC,eAAe,CAAC,EAAE;MACtD,MAAM+pC,aAAa,GAAG,MAAM,IAAI,CAAC/pC,eAAe,CAAC2R,IAAI,CAAC,gBAAgB,EAAE,EAAE,CAAC;MAC3E,OAAOywB,6BAA6B,CAAC2H,aAAa,CAAC;IACrD,CAAC,MAAM,IAAI,IAAI,CAACL,sBAAsB,CAAC,IAAI,CAAC1pC,eAAe,CAAC,EAAE;MAC5D,MAAMrY,EAAE,GAAGmiD,WAAW,KAAKtkD,SAAS,GAAGskD,WAAW,GAAG,MAAM,IAAI,CAAC9pC,eAAe,CAAC2R,IAAI,CAAC,2BAA2B,EAAE,EAAE,CAAC;MACrH,MAAMo4B,aAAa,GAAG,MAAM,IAAI,CAAC/pC,eAAe,CAAC2R,IAAI,CAAC,uBAAuB,EAAE,CAAChqB,EAAE,CAAC,CAAC;MACpF,OAAOy6C,6BAA6B,CAAC2H,aAAa,CAAC;IACrD,CAAC,MAAM,IAAI,IAAI,CAAChB,oBAAoB,CAAC,IAAI,CAAC/oC,eAAe,CAAC,EAAE;MAC1D,MAAM+pC,aAAa,GAAG,MAAM,IAAI,CAAC/pC,eAAe,CAAC2R,IAAI,CAAC,gBAAgB,EAAE,EAAE,CAAC;MAC3E,OAAO0wB,0BAA0B,CAAC0H,aAAa,CAAC;IAClD,CAAC,MAAM,IAAI,IAAI,CAACf,mBAAmB,CAAC,IAAI,CAAChpC,eAAe,CAAC,EAAE;MACzD,MAAMrY,EAAE,GAAGmiD,WAAW,KAAKtkD,SAAS,GAAGskD,WAAW,GAAG,MAAM,IAAI,CAAC9pC,eAAe,CAAC2R,IAAI,CAAC,2BAA2B,EAAE,EAAE,CAAC;MACrH,MAAMo4B,aAAa,GAAG,MAAM,IAAI,CAAC/pC,eAAe,CAAC2R,IAAI,CAAC,uBAAuB,EAAE,CAAChqB,EAAE,CAAC,CAAC;MACpF,OAAO06C,0BAA0B,CAAC0H,aAAa,CAAC;IAClD,CAAC,MAAM;MACL,MAAM,IAAIxnD,KAAK,CAAC,4CAA4C,CAAC;IAC/D;EACF;;EAEA;AACF;AACA;AACA;AACA;EACE,MAAM81C,MAAMA,CAACnrC,OAAO,EAAE;IACpB,IAAI,IAAI,CAACw8C,sBAAsB,CAAC,IAAI,CAAC1pC,eAAe,CAAC,IAAI,IAAI,CAACgpC,mBAAmB,CAAC,IAAI,CAAChpC,eAAe,CAAC,EAAE;MACvG,MAAM,CAACgqC,cAAc,EAAEC,OAAO,CAAC,GAAG,MAAM,IAAI,CAACjqC,eAAe,CAAC2R,IAAI,CAAC,gBAAgB,EAAE,EAAE,CAAC;MACvF,MAAMu4B,OAAO,GAAGF,cAAc,CAACpzC,QAAQ,CAAC,CAAC;MACzC,MAAMuiC,KAAK,GAAG8Q,OAAO,CAACrzC,QAAQ,CAAC,CAAC;MAChC,MAAMuzC,UAAU,GAAG,EAAE;MACrB,KAAK,IAAIv2C,CAAC,GAAGs2C,OAAO,EAAEt2C,CAAC,GAAGs2C,OAAO,GAAG/Q,KAAK,EAAEvlC,CAAC,EAAE,EAAE;QAC9Cu2C,UAAU,CAACliD,IAAI,CAAC,IAAI,CAACiI,GAAG,CAAC0D,CAAC,CAAC,CAAC;MAC9B;MACA,MAAM,CAACwC,QAAQ,EAAEzN,QAAQ,EAAE,GAAGyhD,iBAAiB,CAAC,GAAG,MAAMpiD,OAAO,CAAC+M,GAAG,CAAC,CAAC,IAAI,CAACqB,QAAQ,CAAClG,GAAG,CAAC,CAAC,EAAE,IAAI,CAACk5C,gBAAgB,CAAC,CAAC,EAAE,GAAGe,UAAU,CAAC,CAAC;MACnI,OAAOniD,OAAO,CAAC+M,GAAG,CAACq1C,iBAAiB,CAAClkD,GAAG,CAACjK,CAAC,IAAIqrD,+BAA+B,CAACrrD,CAAC,EAAE0M,QAAQ,EAAE,IAAI,CAACqX,eAAe,CAAC2vB,WAAW,CAAC,CAAC,EAAEv5B,QAAQ,CAAC7B,MAAM,EAAE,IAAI,CAAC4mB,OAAO,EAAE,CAAAjuB,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAE28C,aAAa,KAAI,KAAK,CAAC,CAAC,CAAC;IAClM,CAAC,MAAM;MACL,OAAO,CAAC,MAAM,IAAI,CAACD,SAAS,CAAC18C,OAAO,CAAC,CAAC;IACxC;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMm9C,QAAQA,CAAC3yC,QAAQ,EAAE4yC,cAAc,EAAE;IACvC;IACA,IAAIA,cAAc,EAAE;MAClBA,cAAc,GAAG,MAAMhjB,cAAc,CAACgjB,cAAc,CAAC;IACvD;IACA,OAAO,CAAC,MAAM,IAAI,CAACC,4BAA4B,CAAC7yC,QAAQ,EAAE4yC,cAAc,CAAC,EAAEhoD,MAAM,KAAK,CAAC;EACzF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMioD,4BAA4BA,CAAC7yC,QAAQ,EAAE4yC,cAAc,EAAE;IAC3D,MAAME,OAAO,GAAG,EAAE;IAClB,IAAIC,oBAAoB;IACxB,IAAIC,cAAc;IAClB,MAAM/hD,QAAQ,GAAG,MAAM,IAAI,CAACygD,gBAAgB,CAAC,CAAC;IAC9C,MAAMuB,oBAAoB,GAAGnuD,KAAK,CAACwiC,UAAU,CAAChkC,YAAY,CAAC0S,KAAK,CAACgK,QAAQ,CAAC,EAAE/O,QAAQ,CAAC;IACrF,IAAI2hD,cAAc,KAAK9kD,SAAS,EAAE;MAChC,IAAI;QACF8kD,cAAc,GAAG,MAAM,IAAI,CAACtqC,eAAe,CAACwxB,gBAAgB,CAAC,CAAC;MAChE,CAAC,CAAC,OAAOlsB,GAAG,EAAE;QACZgV,OAAO,CAACC,IAAI,CAAC,8BAA8B,EAAEjV,GAAG,CAAC;MACnD;IACF;;IAEA;IACA,IAAI,CAACglC,cAAc,EAAE;MACnB,OAAO,CAAC7B,gBAAgB,CAACmC,QAAQ,CAAC;IACpC;IACA,MAAM3R,eAAe,GAAG,MAAM3R,cAAc,CAACgjB,cAAc,CAAC;IAC5D,IAAI;MACFI,cAAc,GAAG,MAAM,IAAI,CAACd,SAAS,CAAC,CAAC;IACzC,CAAC,CAAC,OAAOtkC,GAAG,EAAE;MACZ,IAAID,oBAAoB,CAACC,GAAG,EAAE,YAAY,CAAC,IAAID,oBAAoB,CAACC,GAAG,EAAE,0BAA0B,CAAC,EAAE;QACpGklC,OAAO,CAACviD,IAAI,CAACwgD,gBAAgB,CAACoC,mBAAmB,CAAC;QAClD,OAAOL,OAAO;MAChB;MACAlwB,OAAO,CAACC,IAAI,CAAC,sCAAsC,EAAEjV,GAAG,CAAC;MACzDklC,OAAO,CAACviD,IAAI,CAACwgD,gBAAgB,CAACqC,OAAO,CAAC;MACtC,OAAON,OAAO;IAChB;IACA,IAAIE,cAAc,CAACj0C,eAAe,KAAK,WAAW,EAAE;MAClD,MAAMs0C,kBAAkB,GAAGvuD,KAAK,CAACwiC,UAAU,CAAC0rB,cAAc,CAACj0C,eAAe,EAAE9N,QAAQ,CAAC;MACrF,IAAIoiD,kBAAkB,CAACnX,EAAE,CAAC+W,oBAAoB,CAAC,EAAE;QAC/CH,OAAO,CAACviD,IAAI,CAACwgD,gBAAgB,CAACuC,eAAe,CAAC;QAC9C,OAAOR,OAAO;MAChB;IACF;;IAEA;IACA,MAAMS,eAAe,GAAGzuD,KAAK,CAAC0uD,UAAU,CAACR,cAAc,CAAC10C,cAAc,CAAC;IACvE,MAAMm1C,YAAY,GAAGF,eAAe,CAAC3oD,MAAM,GAAG,CAAC;IAC/C,IAAI8oD,cAAc,GAAG,IAAI;IACzB,IAAID,YAAY,EAAE;MAChBC,cAAc,GAAG,MAAM,IAAI,CAACC,gBAAgB,CAACpS,eAAe,CAAC;MAC7D,IAAI,CAACmS,cAAc,KAAK,IAAI,CAACtC,uBAAuB,CAAC,IAAI,CAAC9oC,eAAe,CAAC,IAAI,IAAI,CAAC0pC,sBAAsB,CAAC,IAAI,CAAC1pC,eAAe,CAAC,CAAC,EAAE;QAChI;QACAwqC,OAAO,CAACviD,IAAI,CAACwgD,gBAAgB,CAAC6C,iBAAiB,CAAC;QAChD,OAAOd,OAAO;MAChB;MACA,IAAIY,cAAc,EAAE;QAClB,IAAI;UACF,MAAMG,iBAAiB,GAAG,MAAM,IAAI,CAAClG,YAAY,CAAC3tC,QAAQ,EAAE,KAAK,EAAE/O,QAAQ,EAAEswC,eAAe,CAAC;UAC7F,IAAIuS,gBAAgB;UACpB,IAAI,IAAI,CAAC9B,sBAAsB,CAAC,IAAI,CAAC1pC,eAAe,CAAC,EAAE;YACrDyqC,oBAAoB,GAAG,MAAM,IAAI,CAACzqC,eAAe,CAAC2R,IAAI,CAAC,2BAA2B,EAAE,EAAE,CAAC;YACvF;YACA,CAAC65B,gBAAgB,CAAC,GAAG,MAAM,IAAI,CAACxrC,eAAe,CAAC2R,IAAI,CAAC,wBAAwB,EAAE,CAAC84B,oBAAoB,EAAExR,eAAe,EAAEvhC,QAAQ,EAAE6zC,iBAAiB,CAAC9J,MAAM,EAAE8J,iBAAiB,CAAC72C,YAAY,CAAC,CAAC;YAC3L,IAAI,CAAC82C,gBAAgB,EAAE;cACrBhB,OAAO,CAACviD,IAAI,CAACwgD,gBAAgB,CAAC6C,iBAAiB,CAAC;cAChD,OAAOd,OAAO;YAChB;UACF,CAAC,MAAM,IAAI,IAAI,CAAC1B,uBAAuB,CAAC,IAAI,CAAC9oC,eAAe,CAAC,EAAE;YAC7D,CAACwrC,gBAAgB,CAAC,GAAG,MAAM,IAAI,CAACxrC,eAAe,CAAC2R,IAAI,CAAC,wBAAwB,EAAE,CAACsnB,eAAe,EAAEvhC,QAAQ,EAAE;cACzGxC,KAAK,EAAEq2C,iBAAiB,CAAC9J,MAAM;cAC/BgK,sBAAsB,EAAEF,iBAAiB,CAAC72C;YAC5C,CAAC,CAAC,CAAC;YACH,IAAI,CAAC82C,gBAAgB,EAAE;cACrBhB,OAAO,CAACviD,IAAI,CAACwgD,gBAAgB,CAAC6C,iBAAiB,CAAC;cAChD,OAAOd,OAAO;YAChB;UACF,CAAC,MAAM,IAAI,IAAI,CAACzB,oBAAoB,CAAC,IAAI,CAAC/oC,eAAe,CAAC,EAAE;YAC1D,MAAM,IAAI,CAACA,eAAe,CAAC2R,IAAI,CAAC,aAAa,EAAE,CAACsnB,eAAe,EAAEvhC,QAAQ,EAAE6zC,iBAAiB,CAAC32C,eAAe,EAAE22C,iBAAiB,CAAC52C,KAAK,EAAE;cACrIO,KAAK,EAAEq2C,iBAAiB,CAAC9J,MAAM;cAC/B3C,sBAAsB,EAAEyM,iBAAiB,CAAC72C,YAAY;cACtDgqC,QAAQ,EAAE6M,iBAAiB,CAAC5F,sBAAsB;cAClDlH,aAAa,EAAE8M,iBAAiB,CAAC7F;YACnC,CAAC,CAAC,CAAC;UACL,CAAC,MAAM,IAAI,IAAI,CAACsD,mBAAmB,CAAC,IAAI,CAAChpC,eAAe,CAAC,EAAE;YACzDyqC,oBAAoB,GAAG,MAAM,IAAI,CAACzqC,eAAe,CAAC2R,IAAI,CAAC,2BAA2B,EAAE,EAAE,CAAC;YACvF,MAAM,IAAI,CAAC3R,eAAe,CAAC2R,IAAI,CAAC,aAAa,EAAE,CAAC84B,oBAAoB,EAAExR,eAAe,EAAEvhC,QAAQ,EAAE6zC,iBAAiB,CAAC32C,eAAe,EAAE22C,iBAAiB,CAAC52C,KAAK,EAAE;cAC3JO,KAAK,EAAEq2C,iBAAiB,CAAC9J,MAAM;cAC/B3C,sBAAsB,EAAEyM,iBAAiB,CAAC72C,YAAY;cACtDgqC,QAAQ,EAAE6M,iBAAiB,CAAC5F,sBAAsB;cAClDlH,aAAa,EAAE8M,iBAAiB,CAAC7F;YACnC,CAAC,CAAC,CAAC;UACL;QACF,CAAC,CAAC,OAAO33C,CAAC,EAAE;UACVusB,OAAO,CAACC,IAAI,CAAC,mCAAmC,EAAE,QAAQ,IAAIxsB,CAAC,GAAGA,CAAC,CAACmV,MAAM,GAAGnV,CAAC,CAAC;UAC/E,MAAMmV,MAAM,GAAGnV,CAAC,CAACmV,MAAM;UACvB,QAAQA,MAAM;YACZ,KAAK,MAAM;cACTsnC,OAAO,CAACviD,IAAI,CAACwgD,gBAAgB,CAACiD,yBAAyB,CAAC;cACxD;YACF,KAAK,kBAAkB;cACrBlB,OAAO,CAACviD,IAAI,CAACwgD,gBAAgB,CAACkD,oBAAoB,CAAC;cACnD;YACF,KAAK,YAAY;cACfnB,OAAO,CAACviD,IAAI,CAACwgD,gBAAgB,CAACuC,eAAe,CAAC;cAC9C;YACF,KAAK,gBAAgB;cACnBR,OAAO,CAACviD,IAAI,CAACwgD,gBAAgB,CAACmD,oBAAoB,CAAC;cACnD;YACF;cACE;gBACEpB,OAAO,CAACviD,IAAI,CAACwgD,gBAAgB,CAAC6C,iBAAiB,CAAC;gBAChD;cACF;UACJ;UACA,OAAOd,OAAO;QAChB;MACF;IACF;IACA,IAAI,IAAI,CAACzB,oBAAoB,CAAC,IAAI,CAAC/oC,eAAe,CAAC,IAAI,IAAI,CAACgpC,mBAAmB,CAAC,IAAI,CAAChpC,eAAe,CAAC,EAAE;MACrG,IAAI6rC,aAAa,GAAGvvD,SAAS,CAAC6H,IAAI,CAAC,CAAC,CAAC;MACrC,IAAIuQ,YAAY,GAAGqqC,0BAA0B,CAAC2L,cAAc,CAAC50C,qBAAqB,EAAEnN,QAAQ,CAAC;MAC7F,IAAI;QACFkjD,aAAa,GAAG,MAAM,IAAI,CAACC,wBAAwB,CAAC7S,eAAe,CAAC;MACtE,CAAC,CAAC,OAAOlrC,CAAC,EAAE;QACV;MAAA;MAEF,IAAIq9C,cAAc,EAAE;QAClB12C,YAAY,GAAGqqC,0BAA0B,CAACqM,cAAc,CAAC12C,YAAY,EAAE/L,QAAQ,CAAC;MAClF;MACA,IAAI+L,YAAY,CAAC6O,EAAE,CAAC,CAAC,CAAC,IAAI7O,YAAY,CAACk/B,EAAE,CAACiY,aAAa,CAACzsB,GAAG,CAACurB,oBAAoB,CAAC,CAAC,EAAE;QAClFH,OAAO,CAACviD,IAAI,CAACwgD,gBAAgB,CAACiD,yBAAyB,CAAC;QACxD,OAAOlB,OAAO;MAChB;;MAEA;MACA;MACA,IAAI,CAACW,YAAY,IAAIA,YAAY,IAAI,CAACC,cAAc,EAAE;QACpD,IAAI12C,YAAY,CAACyoC,GAAG,CAAC0O,aAAa,CAAC,IAAIn3C,YAAY,CAACwxC,EAAE,CAAC,CAAC,CAAC,EAAE;UACzDsE,OAAO,CAACviD,IAAI,CAACwgD,gBAAgB,CAAC6C,iBAAiB,CAAC;UAChD,OAAOd,OAAO;QAChB;MACF;IACF;;IAEA;IACA,IAAI,IAAI,CAAC1B,uBAAuB,CAAC,IAAI,CAAC9oC,eAAe,CAAC,IAAI,IAAI,CAAC0pC,sBAAsB,CAAC,IAAI,CAAC1pC,eAAe,CAAC,EAAE;MAC3G,IAAI,CAAC+rC,oBAAoB,EAAEC,qBAAqB,CAAC,GAAG,CAAC1vD,SAAS,CAAC6H,IAAI,CAAC,CAAC,CAAC,EAAE7H,SAAS,CAAC6H,IAAI,CAAC,CAAC,CAAC,CAAC;MAC1F,IAAI,IAAI,CAACulD,sBAAsB,CAAC,IAAI,CAAC1pC,eAAe,CAAC,EAAE;QACrDyqC,oBAAoB,GAAG,MAAM,IAAI,CAACzqC,eAAe,CAAC2R,IAAI,CAAC,2BAA2B,EAAE,EAAE,CAAC;QACvF,CAACo6B,oBAAoB,EAAEC,qBAAqB,CAAC,GAAG,MAAM,IAAI,CAAChsC,eAAe,CAAC2R,IAAI,CAAC,mBAAmB,EAAE,CAAC84B,oBAAoB,EAAExR,eAAe,CAAC,CAAC;MAC/I,CAAC,MAAM,IAAI,IAAI,CAAC6P,uBAAuB,CAAC,IAAI,CAAC9oC,eAAe,CAAC,EAAE;QAC7D;QACA,CAAC+rC,oBAAoB,EAAEC,qBAAqB,CAAC,GAAG,MAAM,IAAI,CAAChsC,eAAe,CAAC2R,IAAI,CAAC,mBAAmB,EAAE,CAACsnB,eAAe,CAAC,CAAC;MACzH;MACA,MAAM3nC,GAAG,GAAGhV,SAAS,CAAC6H,IAAI,CAACkN,IAAI,CAACC,GAAG,CAAC,CAAC,CAAC,CAACmuB,GAAG,CAAC,IAAI,CAAC;MAChD,IAAIssB,oBAAoB,CAACxoC,EAAE,CAAC,CAAC,CAAC,IAAIjS,GAAG,CAACsiC,EAAE,CAACoY,qBAAqB,CAAC,EAAE;QAC/D;QACA,IAAIA,qBAAqB,CAAC9F,EAAE,CAACzpD,SAAS,CAAC4yC,UAAU,CAAC,EAAE;UAClDmb,OAAO,CAACviD,IAAI,CAACwgD,gBAAgB,CAACwD,cAAc,CAAC;QAC/C,CAAC,MAAM;UACLzB,OAAO,CAACviD,IAAI,CAACwgD,gBAAgB,CAACyD,8BAA8B,CAAC;QAC/D;QACA,OAAO1B,OAAO;MAChB;IACF;;IAEA;IACA;IACA,IAAIE,cAAc,CAAC/1C,KAAK,CAAC4O,EAAE,CAAC,CAAC,CAAC,IAAIyY,MAAM,CAAC,CAAC,EAAE;MAC1C,MAAMkpB,UAAU,GAAGwF,cAAc,CAAC/1C,KAAK,CAACwqB,GAAG,CAAC7iC,SAAS,CAAC6H,IAAI,CAACuT,QAAQ,CAAC,CAAC;MACrE,MAAMnR,QAAQ,GAAG,IAAI,CAACyZ,eAAe,CAAC2vB,WAAW,CAAC,CAAC;MACnD,IAAIsP,aAAa,CAACyL,cAAc,CAAC91C,eAAe,CAAC,EAAE;QACjD,MAAMu3C,OAAO,GAAG,MAAM5lD,QAAQ,CAAC6lD,UAAU,CAACnT,eAAe,CAAC;QAC1D,IAAIkT,OAAO,CAACvY,EAAE,CAACsR,UAAU,CAAC,EAAE;UAC1BsF,OAAO,CAACviD,IAAI,CAACwgD,gBAAgB,CAAC4D,eAAe,CAAC;QAChD;MACF,CAAC,MAAM;QACL,MAAMhN,KAAK,GAAG,IAAIsD,eAAe,CAACp8C,QAAQ,EAAEmkD,cAAc,CAAC91C,eAAe,EAAEvX,QAAQ,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC89B,OAAO,CAAC;QACvG,MAAMgxB,OAAO,GAAG,MAAM9M,KAAK,CAAC1tB,IAAI,CAAC,WAAW,EAAE,CAACsnB,eAAe,CAAC,CAAC;QAChE,IAAIkT,OAAO,CAACvY,EAAE,CAACsR,UAAU,CAAC,EAAE;UAC1BsF,OAAO,CAACviD,IAAI,CAACwgD,gBAAgB,CAAC4D,eAAe,CAAC;QAChD;MACF;IACF;IACA,OAAO7B,OAAO;EAChB;;EAEA;AACF;AACA;AACA;AACA;EACE,MAAMa,gBAAgBA,CAACiB,cAAc,EAAEC,gBAAgB,EAAE;IACvD,MAAM7B,cAAc,GAAG,MAAM,IAAI,CAACx6C,GAAG,CAACq8C,gBAAgB,CAAC;IACvD,MAAMn3C,UAAU,GAAGs1C,cAAc,CAACt1C,UAAU;IAC5C,MAAM61C,eAAe,GAAGzuD,KAAK,CAAC0uD,UAAU,CAAC91C,UAAU,CAAC;IACpD,IAAI61C,eAAe,CAAC3oD,MAAM,GAAG,CAAC,EAAE;MAC9B,MAAM8T,QAAQ,GAAG,MAAM,IAAI,CAACA,QAAQ,CAAClG,GAAG,CAAC,CAAC;MAC1C,MAAM+oC,eAAe,GAAG,MAAM3R,cAAc,CAACglB,cAAc,CAAC;MAC5D,OAAO,MAAMtK,4BAA4B,CAAC/I,eAAe,EAAE7jC,UAAU,CAAC/Q,QAAQ,CAAC,CAAC,EAAE+R,QAAQ,CAAC7B,MAAM,EAAE,IAAI,CAACyL,eAAe,CAAC2vB,WAAW,CAAC,CAAC,EAAE,IAAI,CAACxU,OAAO,EAAE,IAAI,CAACkuB,wBAAwB,CAAC,CAAC,CAAC;IACvL,CAAC,MAAM;MACL,OAAO,IAAI;IACb;EACF;;EAEA;AACF;AACA;AACA;AACA;EACE,MAAMyC,wBAAwBA,CAACU,aAAa,EAAE;IAC5C,MAAMvT,eAAe,GAAG,MAAM3R,cAAc,CAACklB,aAAa,CAAC;IAC3D,IAAI,IAAI,CAACzD,oBAAoB,CAAC,IAAI,CAAC/oC,eAAe,CAAC,EAAE;MACnD,OAAO,MAAM,IAAI,CAACA,eAAe,CAAC2R,IAAI,CAAC,0BAA0B,EAAE,CAACsnB,eAAe,CAAC,CAAC;IACvF;IACA,IAAI,IAAI,CAAC+P,mBAAmB,CAAC,IAAI,CAAChpC,eAAe,CAAC,EAAE;MAClD,MAAMysC,sBAAsB,GAAG,MAAM,IAAI,CAACzsC,eAAe,CAAC2R,IAAI,CAAC,2BAA2B,EAAE,EAAE,CAAC;MAC/F,OAAO,MAAM,IAAI,CAAC3R,eAAe,CAAC2R,IAAI,CAAC,0BAA0B,EAAE,CAAC86B,sBAAsB,EAAExT,eAAe,CAAC,CAAC;IAC/G;IACA,MAAM,IAAI12C,KAAK,CAAC,sEAAsE,CAAC;EACzF;EAuJA;AACF;AACA;;EAEE,MAAM6mD,gBAAgBA,CAAA,EAAG;IACvB,IAAIh7B,qBAAqB,CAAC,IAAI,CAACpO,eAAe,EAAE,OAAO,CAAC,EAAE;MACxD,OAAO,IAAI,CAACA,eAAe,CAAC2R,IAAI,CAAC,UAAU,EAAE,EAAE,CAAC;IAClD,CAAC,MAAM;MACL,OAAO3pB,OAAO,CAACT,OAAO,CAAC,CAAC,CAAC;IAC3B;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,MAAM89C,YAAYA,CAAC3tC,QAAQ,EAAE+tC,mBAAmB,EAAE;IAChD,IAAI98C,QAAQ,GAAGpD,SAAS,CAACjD,MAAM,GAAG,CAAC,IAAIiD,SAAS,CAAC,CAAC,CAAC,KAAKC,SAAS,GAAGD,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC;IACpF,IAAI4L,OAAO,GAAG5L,SAAS,CAACjD,MAAM,GAAG,CAAC,GAAGiD,SAAS,CAAC,CAAC,CAAC,GAAGC,SAAS;IAC7D,MAAM8/C,cAAc,GAAGn0C,OAAO,GAAGA,OAAO,GAAG,MAAM,IAAI,CAAC6O,eAAe,CAACwxB,gBAAgB,CAAC,CAAC;IACxF,OAAO6T,YAAY,CAACC,cAAc,EAAE5tC,QAAQ,EAAE,MAAM,IAAI,CAACkyC,SAAS,CAAC,CAAC,EAAE,YAAY,CAAC,MAAM,IAAI,CAACxzC,QAAQ,CAAClG,GAAG,CAAC,CAAC,EAAEqE,MAAM,EAAE5L,QAAQ,EAAE,IAAI,CAACqX,eAAe,EAAE,IAAI,CAACmb,OAAO,EAAEsqB,mBAAmB,EAAE,IAAI,CAAC4D,wBAAwB,CAAC,CAAC,CAAC;EAC3N;EACA,MAAMqD,iBAAiBA,CAACC,kBAAkB,EAAEj1C,QAAQ,EAAE6zC,iBAAiB,EAAE;IACvE,MAAMtS,eAAe,GAAG,MAAM3R,cAAc,CAACqlB,kBAAkB,CAAC;IAChE,IAAI,IAAI,CAACjD,sBAAsB,CAAC,IAAI,CAAC1pC,eAAe,CAAC,EAAE;MACrD,OAAO,CAACi5B,eAAe,EAAEvhC,QAAQ,EAAE6zC,iBAAiB,CAAC32C,eAAe,EAAE22C,iBAAiB,CAAC52C,KAAK,EAAE42C,iBAAiB,CAAC9J,MAAM,EAAE8J,iBAAiB,CAAC72C,YAAY,CAAC;IAC1J,CAAC,MAAM,IAAI,IAAI,CAACo0C,uBAAuB,CAAC,IAAI,CAAC9oC,eAAe,CAAC,EAAE;MAC7D,OAAO,CAACi5B,eAAe,EAAEvhC,QAAQ,EAAE6zC,iBAAiB,CAAC32C,eAAe,EAAE22C,iBAAiB,CAAC52C,KAAK,EAAE;QAC7FO,KAAK,EAAEq2C,iBAAiB,CAAC9J,MAAM;QAC/BgK,sBAAsB,EAAEF,iBAAiB,CAAC72C;MAC5C,CAAC,EAAElY,KAAK,CAAC0a,WAAW,CAAC,EAAE,CAAC,CAAC;IAC3B;IACA,OAAO,CAAC+hC,eAAe,EAAEvhC,QAAQ,EAAE6zC,iBAAiB,CAAC32C,eAAe,EAAE22C,iBAAiB,CAAC52C,KAAK,EAAE;MAC7FO,KAAK,EAAEq2C,iBAAiB,CAAC9J,MAAM;MAC/B3C,sBAAsB,EAAEyM,iBAAiB,CAAC72C,YAAY;MACtD+pC,aAAa,EAAE8M,iBAAiB,CAAC7F,YAAY;MAC7ChH,QAAQ,EAAE6M,iBAAiB,CAAC5F;IAC9B,CAAC,EAAEnpD,KAAK,CAAC0a,WAAW,CAAC,EAAE,CAAC,CAAC;EAC3B;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAM01C,mBAAmBA,CAACD,kBAAkB,EAAEj1C,QAAQ,EAAExK,OAAO,EAAE;IAC/D;IACA,IAAIA,OAAO,aAAPA,OAAO,eAAPA,OAAO,CAAEuxC,aAAa,EAAE;MAC1B,MAAM,IAAIl8C,KAAK,CAAC,mGAAmG,CAAC;IACtH;IACA,MAAMgpD,iBAAiB,GAAG,MAAM,IAAI,CAAClG,YAAY,CAAC3tC,QAAQ,EAAE,CAAAxK,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEu4C,mBAAmB,MAAKjgD,SAAS,GAAG,IAAI,GAAG0H,OAAO,CAACu4C,mBAAmB,EAAE,MAAM,IAAI,CAAC2D,gBAAgB,CAAC,CAAC,CAAC;IAC3K,OAAO1X,WAAW,CAACC,mBAAmB,CAAC;MACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;MACrCvY,MAAM,EAAE,OAAO;MACf0Y,IAAI,EAAE,MAAM,IAAI,CAACusC,iBAAiB,CAACC,kBAAkB,EAAEj1C,QAAQ,EAAE6zC,iBAAiB,CAAC;MACnF/b,SAAS,EAAE+b,iBAAiB,CAAC/b;IAC/B,CAAC,CAAC;EACJ;EACAuZ,oBAAoBA,CAAC/oC,eAAe,EAAE;IACpC,OAAOoO,qBAAqB,CAACpO,eAAe,EAAE,yBAAyB,CAAC,IAAIoO,qBAAqB,CAACpO,eAAe,EAAE,wBAAwB,CAAC;EAC9I;EACAgpC,mBAAmBA,CAAChpC,eAAe,EAAE;IACnC,OAAOoO,qBAAqB,CAACpO,eAAe,EAAE,qBAAqB,CAAC,IAAIoO,qBAAqB,CAACpO,eAAe,EAAE,oBAAoB,CAAC;EACtI;EACA8oC,uBAAuBA,CAAC9oC,eAAe,EAAE;IACvC,OAAOoO,qBAAqB,CAACpO,eAAe,EAAE,yBAAyB,CAAC,IAAIoO,qBAAqB,CAACpO,eAAe,EAAE,wBAAwB,CAAC;EAC9I;EACA0pC,sBAAsBA,CAAC1pC,eAAe,EAAE;IACtC,OAAOoO,qBAAqB,CAACpO,eAAe,EAAE,qBAAqB,CAAC,IAAIoO,qBAAqB,CAACpO,eAAe,EAAE,oBAAoB,CAAC;EACtI;EACAqpC,wBAAwBA,CAAA,EAAG;IACzB,OAAO,IAAI,CAACK,sBAAsB,CAAC,IAAI,CAAC1pC,eAAe,CAAC,IAAI,IAAI,CAAC8oC,uBAAuB,CAAC,IAAI,CAAC9oC,eAAe,CAAC,GAAG4/B,qBAAqB,CAACa,EAAE,GAAGb,qBAAqB,CAACc,EAAE;EACtK;AACF;;AAEA;AACA;AACA;AACA;AACA,MAAMmM,0BAA0B,CAAC;EAC/B1nD,WAAWA,CAAC6a,eAAe,EAAE5J,UAAQ,EAAE+kB,OAAO,EAAE;IA6ShD;AACF;AACA;IAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IApCEwb,eAAA,cAqCM,eAAetY,wBAAwB,CAAC,CAAC,MAAM;MACnD,IAAIsqB,KAAK,GAAG,IAAI;MAChB,OAAO,gBAAgBxwC,OAAO,EAAEiuC,oBAAoB,EAAE;QACpD,IAAIwC,2BAA2B,GAAGrjD,SAAS,CAACjD,MAAM,GAAG,CAAC,IAAIiD,SAAS,CAAC,CAAC,CAAC,KAAKC,SAAS,GAAGD,SAAS,CAAC,CAAC,CAAC,GAAG,KAAK;QAC3G,OAAOojD,KAAK,CAACmE,QAAQ,CAAC1uB,OAAO,CAAC,CAAC;UAC7BjmB,OAAO;UACP40C,eAAe,EAAE3G;QACnB,CAAC,CAAC,EAAEwC,2BAA2B,CAAC;MAClC,CAAC;IACH,CAAC,EAAE,CAAC,CAAC;IAEL;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IA/BEjS,eAAA,mBAgCW,eAAetY,wBAAwB,CAAC,CAAC,MAAM;MACxD,IAAI2uB,MAAM,GAAG,IAAI;MACjB,OAAO,gBAAgBC,uBAAuB,EAAE;QAC9C,IAAIrE,2BAA2B,GAAGrjD,SAAS,CAACjD,MAAM,GAAG,CAAC,IAAIiD,SAAS,CAAC,CAAC,CAAC,KAAKC,SAAS,GAAGD,SAAS,CAAC,CAAC,CAAC,GAAG,KAAK;QAC3G,MAAM+jD,UAAU,GAAG,CAAC,CAAC;QACrB,MAAM4D,wBAAwB,GAAG,MAAMllD,OAAO,CAAC+M,GAAG,CAACk4C,uBAAuB,CAAC/mD,GAAG,CAAC,MAAMw1B,IAAI,IAAI;UAC3F,IAAI;YACFvjB,OAAO;YACP40C;UACF,CAAC,GAAGrxB,IAAI;UACR;UACA,IAAImtB,wBAAwB,GAAGkE,eAAe;UAC9C,IAAIC,MAAM,CAAClE,uBAAuB,CAACkE,MAAM,CAAChtC,eAAe,CAAC,EAAE;YAC1D4oC,2BAA2B,GAAG,IAAI;YAClC,IAAImE,eAAe,CAACzqD,MAAM,KAAK,CAAC,EAAE;cAChCumD,wBAAwB,GAAG,CAAC;gBAC1BjzC,SAAS,EAAE,IAAIvE,IAAI,CAAC,CAAC,CAAC;gBACtBuD,eAAe,EAAEnY,SAAS,CAAC+W,WAAW;gBACtCmB,KAAK,EAAE,CAAC;gBACRkB,kBAAkB,EAAE,CAAC;gBACrBC,qBAAqB,EAAE,CAAC;gBACxBC,aAAa,EAAE,CAAC;gBAChBC,cAAc,EAAExZ,KAAK,CAACyZ,UAAU,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;gBACzCC,QAAQ,EAAE;cACZ,CAAC,CAAC;YACJ,CAAC,MAAM,IAAI62C,eAAe,CAACzqD,MAAM,GAAG,CAAC,EAAE;cACrC,MAAM,IAAIC,KAAK,CAAC,uFAAuF,CAAC;YAC1G;UACF;UACA;UACA,IAAIyqD,MAAM,CAACjE,oBAAoB,CAACiE,MAAM,CAAChtC,eAAe,CAAC,IAAIgtC,MAAM,CAAChE,mBAAmB,CAACgE,MAAM,CAAChtC,eAAe,CAAC,EAAE;YAC7G6oC,wBAAwB,CAAC9hD,OAAO,CAACkiD,EAAE,IAAI;cAAA,IAAAkE,sBAAA;cACrC,IAAIlE,EAAE,CAAC/yC,QAAQ,IAAI+yC,EAAE,CAAC/yC,QAAQ,CAAC5T,MAAM,GAAG,CAAC,KAAK2mD,EAAE,CAACnzC,qBAAqB,KAAKtQ,SAAS,IAAIyjD,EAAE,CAACnzC,qBAAqB,KAAK,WAAW,CAAC,EAAE;gBACjI,MAAM,IAAIvT,KAAK,CAAC,mFAAmF,GAAG,sGAAsG,GAAG,WAAW,GAAG,0HAA0H,CAAC;cAC1V;cACA,IAAI0mD,EAAE,CAAC/yC,QAAQ,IAAI+yC,EAAE,CAAC/yC,QAAQ,CAAC5T,MAAM,GAAG,CAAC,IAAI,EAAA6qD,sBAAA,GAAAlE,EAAE,CAACnzC,qBAAqB,cAAAq3C,sBAAA,uBAAxBA,sBAAA,CAA0B9oD,QAAQ,CAAC,CAAC,MAAK,GAAG,IAAI4kD,EAAE,CAAC/yC,QAAQ,CAAChQ,GAAG,CAAC+7B,CAAC,IAAI;gBAChH,IAAI,OAAOA,CAAC,KAAK,QAAQ,EAAE;kBACzB,OAAO,CAAC;gBACV,CAAC,MAAM;kBAAA,IAAAmrB,gBAAA;kBACL,OAAOxqD,MAAM,CAAC,EAAAwqD,gBAAA,GAAAnrB,CAAC,CAACvtB,YAAY,cAAA04C,gBAAA,uBAAdA,gBAAA,CAAgB/oD,QAAQ,CAAC,CAAC,KAAI,CAAC,CAAC;gBAChD;cACF,CAAC,CAAC,CAAC8I,MAAM,CAAC,CAACc,GAAG,EAAE/K,OAAO,KAAK;gBAC1B,OAAO+K,GAAG,GAAG/K,OAAO;cACtB,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,EAAE;gBACX,MAAM,IAAIX,KAAK,CAAC,+HAA+H,CAAC;cAClJ;YACF,CAAC,CAAC;UACJ;UACA;UACA,MAAM;YACJ8jD,aAAa;YACbQ;UACF,CAAC,GAAG,MAAMF,2BAA2B,CAACkC,wBAAwB,EAAE,CAAC,EAAEmE,MAAM,CAAChtC,eAAe,CAAC2vB,WAAW,CAAC,CAAC,EAAEqd,MAAM,CAAC7xB,OAAO,EAAE6xB,MAAM,CAAC3D,wBAAwB,CAAC,CAAC,CAAC;UAC3JhD,aAAa,CAACt/C,OAAO,CAACk7B,CAAC,IAAI;YACzBqnB,UAAU,CAACrnB,CAAC,CAAC7sB,UAAU,CAAC,GAAG6sB,CAAC,CAAC1sB,WAAW;UAC1C,CAAC,CAAC;UACF,OAAO;YACL4C,OAAO;YACP0uC;UACF,CAAC;QACH,CAAC,CAAC,CAAC;QACH,MAAMzwC,QAAQ,GAAG,MAAM42C,MAAM,CAAC52C,QAAQ,CAAClG,GAAG,CAAC,CAAC;QAC5C,MAAMooC,OAAO,GAAG,EAAE;;QAElB;QACA,KAAK,MAAMnqB,GAAG,IAAIhD,MAAM,CAACC,IAAI,CAAChV,QAAQ,CAAC7B,MAAM,IAAI,CAAC,CAAC,CAAC,EAAE;UACpD+0C,UAAU,CAACn7B,GAAG,CAAC,GAAG/X,QAAQ,CAAC7B,MAAM,CAAC4Z,GAAG,CAAC;QACxC;;QAEA;QACA,IAAI,CAAC5wB,SAAS,CAAC6Y,QAAQ,CAAC7B,MAAM,EAAE+0C,UAAU,CAAC,EAAE;UAC3C,MAAM7P,cAAc,GAAG,MAAMuT,MAAM,CAAC52C,QAAQ,CAAC4gC,kBAAkB,CAAC;YAC9D,GAAG5gC,QAAQ;YACX7B,MAAM,EAAE+0C;UACV,CAAC,CAAC;UACF;UACA,MAAM5P,WAAW,GAAG,MAAMsT,MAAM,CAAC52C,QAAQ,CAACwgC,uBAAuB,CAAC6C,cAAc,CAAC;UACjF,IAAIprB,WAAW,CAAC,gBAAgB,EAAE2+B,MAAM,CAAChtC,eAAe,CAAC,EAAE;YACzD,MAAMm4B,eAAe,GAAG,IAAIp4B,eAAe,CAACitC,MAAM,CAAChtC,eAAe,CAAC;YACnEs4B,OAAO,CAACrwC,IAAI,CAACkwC,eAAe,CAACl4B,MAAM,CAAC,gBAAgB,EAAE,CAACy5B,WAAW,CAAC,CAAC,CAAC;UACvE,CAAC,MAAM;YACL,MAAM,IAAIn3C,KAAK,CAAC,iHAAiH,CAAC;UACpI;QACF;QACA2qD,wBAAwB,CAACnmD,OAAO,CAACsmD,KAAK,IAAI;UACxC,IAAI;YACFl1C,OAAO;YACP0uC;UACF,CAAC,GAAGwG,KAAK;UACT,MAAM7D,mBAAmB,GAAG,IAAIzpC,eAAe,CAACitC,MAAM,CAAChtC,eAAe,CAAC;UACvE,IAAIgtC,MAAM,CAAClE,uBAAuB,CAACkE,MAAM,CAAChtC,eAAe,CAAC,EAAE;YAC1D,MAAMstC,qBAAqB,GAAG,IAAIvtC,eAAe,CAACitC,MAAM,CAAChtC,eAAe,CAAC;YACzEs4B,OAAO,CAACrwC,IAAI,CAACqlD,qBAAqB,CAACrtC,MAAM,CAAC,oBAAoB,EAAE,CAAC9H,OAAO,EAAEmmC,6BAA6B,CAACuI,gBAAgB,CAAC,CAAC,CAAC,CAAC,EAAE+B,2BAA2B,CAAC,CAAC,CAAC;UAC9J,CAAC,MAAM,IAAIoE,MAAM,CAACtD,sBAAsB,CAACsD,MAAM,CAAChtC,eAAe,CAAC,EAAE;YAChEs4B,OAAO,CAACrwC,IAAI,CAACuhD,mBAAmB,CAACvpC,MAAM,CAAC,oBAAoB,EAAE,CAAC9H,OAAO,EAAE0uC,gBAAgB,CAAC3gD,GAAG,CAACo4C,6BAA6B,CAAC,EAAEsK,2BAA2B,CAAC,CAAC,CAAC;UAC7J,CAAC,MAAM,IAAIoE,MAAM,CAACjE,oBAAoB,CAACiE,MAAM,CAAChtC,eAAe,CAAC,EAAE;YAC9Ds4B,OAAO,CAACrwC,IAAI,CAACuhD,mBAAmB,CAACvpC,MAAM,CAAC,oBAAoB,EAAE,CAAC9H,OAAO,EAAE0mC,0BAA0B,CAACgI,gBAAgB,CAAC,CAAC,CAAC,CAAC,EAAE+B,2BAA2B,CAAC,CAAC,CAAC;UACzJ,CAAC,MAAM,IAAIoE,MAAM,CAAChE,mBAAmB,CAACgE,MAAM,CAAChtC,eAAe,CAAC,EAAE;YAC7Ds4B,OAAO,CAACrwC,IAAI,CAACuhD,mBAAmB,CAACvpC,MAAM,CAAC,oBAAoB,EAAE,CAAC9H,OAAO,EAAE0uC,gBAAgB,CAAC3gD,GAAG,CAAC24C,0BAA0B,CAAC,EAAE+J,2BAA2B,CAAC,CAAC,CAAC;UAC1J,CAAC,MAAM;YACL,MAAM,IAAIrmD,KAAK,CAAC,4CAA4C,CAAC;UAC/D;QACF,CAAC,CAAC;QACF,IAAI8rB,WAAW,CAAC,WAAW,EAAE2+B,MAAM,CAAChtC,eAAe,CAAC,EAAE;UACpD,OAAO0xB,WAAW,CAACC,mBAAmB,CAAC;YACrC3xB,eAAe,EAAEgtC,MAAM,CAAChtC,eAAe;YACvCvY,MAAM,EAAE,WAAW;YACnB0Y,IAAI,EAAE,CAACm4B,OAAO;UAChB,CAAC,CAAC;QACJ;QACA,MAAM,IAAI/1C,KAAK,CAAC,qCAAqC,CAAC;MACxD,CAAC;IACH,CAAC,EAAE,CAAC,CAAC;IAEL;AACF;AACA;AACA;AACA;AACA;IALEo0C,eAAA,iBAMS,eAAetY,wBAAwB,CAAC,OAAOlmB,OAAO,EAAElR,KAAK,EAAE6gD,mBAAmB,KAAK;MAC9F,MAAMC,kBAAkB,GAAG,MAAM,IAAI,CAAC1P,MAAM,CAAClgC,OAAO,CAAC;MACrD,MAAMwxC,kBAAkB,GAAG,MAAM9B,6BAA6B,CAAC5gD,KAAK,EAAE6gD,mBAAmB,EAAEC,kBAAkB,CAAC;MAC9G,OAAO,MAAM,IAAI,CAAC13C,GAAG,CAAC+tB,OAAO,CAACjmB,OAAO,EAAEwxC,kBAAkB,CAAC;IAC5D,CAAC,CAAC;IA5fA,IAAI,CAACxuB,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACnb,eAAe,GAAGA,eAAe;IACtC,IAAI,CAAC5J,QAAQ,GAAGA,UAAQ;EAC1B;;EAEA;AACF;AACA;;EAEE;AACF;AACA;AACA;AACA;EACE,MAAMwzC,SAASA,CAACzxC,OAAO,EAAEjL,OAAO,EAAE;IAChC,MAAMqgD,EAAE,GAAG,MAAM,IAAI,CAACr9C,GAAG,CAACiI,OAAO,CAAC;IAClC,MAAM/B,QAAQ,GAAG,MAAM,IAAI,CAACA,QAAQ,CAAClG,GAAG,CAAC,CAAC;IAC1C,OAAO,MAAMo3C,+BAA+B,CAACiG,EAAE,EAAE,CAAC,EAAE,IAAI,CAACvtC,eAAe,CAAC2vB,WAAW,CAAC,CAAC,EAAEv5B,QAAQ,CAAC7B,MAAM,EAAE,IAAI,CAAC4mB,OAAO,EAAE,CAAAjuB,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAE28C,aAAa,KAAI,KAAK,CAAC;EACzJ;EACA,MAAM35C,GAAGA,CAACiI,OAAO,EAAE2xC,WAAW,EAAE;IAC9B,IAAI,IAAI,CAAChB,uBAAuB,CAAC,IAAI,CAAC9oC,eAAe,CAAC,EAAE;MACtD,MAAM+pC,aAAa,GAAG,MAAM,IAAI,CAAC/pC,eAAe,CAAC2R,IAAI,CAAC,gBAAgB,EAAE,CAACxZ,OAAO,CAAC,CAAC;MAClF,OAAOiqC,6BAA6B,CAAC2H,aAAa,CAAC;IACrD,CAAC,MAAM,IAAI,IAAI,CAACL,sBAAsB,CAAC,IAAI,CAAC1pC,eAAe,CAAC,EAAE;MAC5D,MAAMrY,EAAE,GAAGmiD,WAAW,KAAKtkD,SAAS,GAAGskD,WAAW,GAAG,MAAM,IAAI,CAAC9pC,eAAe,CAAC2R,IAAI,CAAC,2BAA2B,EAAE,CAACxZ,OAAO,CAAC,CAAC;MAC5H,MAAM4xC,aAAa,GAAG,MAAM,IAAI,CAAC/pC,eAAe,CAAC2R,IAAI,CAAC,uBAAuB,EAAE,CAACxZ,OAAO,EAAExQ,EAAE,CAAC,CAAC;MAC7F,OAAOy6C,6BAA6B,CAAC2H,aAAa,CAAC;IACrD,CAAC,MAAM,IAAI,IAAI,CAAChB,oBAAoB,CAAC,IAAI,CAAC/oC,eAAe,CAAC,EAAE;MAC1D,MAAM+pC,aAAa,GAAG,MAAM,IAAI,CAAC/pC,eAAe,CAAC2R,IAAI,CAAC,gBAAgB,EAAE,CAACxZ,OAAO,CAAC,CAAC;MAClF,OAAOkqC,0BAA0B,CAAC0H,aAAa,CAAC;IAClD,CAAC,MAAM,IAAI,IAAI,CAACf,mBAAmB,CAAC,IAAI,CAAChpC,eAAe,CAAC,EAAE;MACzD,MAAMrY,EAAE,GAAGmiD,WAAW,KAAKtkD,SAAS,GAAGskD,WAAW,GAAG,MAAM,IAAI,CAAC9pC,eAAe,CAAC2R,IAAI,CAAC,2BAA2B,EAAE,CAACxZ,OAAO,CAAC,CAAC;MAC5H,MAAM4xC,aAAa,GAAG,MAAM,IAAI,CAAC/pC,eAAe,CAAC2R,IAAI,CAAC,uBAAuB,EAAE,CAACxZ,OAAO,EAAExQ,EAAE,CAAC,CAAC;MAC7F,OAAO06C,0BAA0B,CAAC0H,aAAa,CAAC;IAClD,CAAC,MAAM;MACL,MAAM,IAAIxnD,KAAK,CAAC,4CAA4C,CAAC;IAC/D;EACF;;EAEA;AACF;AACA;AACA;AACA;EACE,MAAM81C,MAAMA,CAAClgC,OAAO,EAAEjL,OAAO,EAAE;IAC7B,IAAI,IAAI,CAACw8C,sBAAsB,CAAC,IAAI,CAAC1pC,eAAe,CAAC,IAAI,IAAI,CAACgpC,mBAAmB,CAAC,IAAI,CAAChpC,eAAe,CAAC,EAAE;MACvG,MAAM0qC,cAAc,GAAG,MAAM,IAAI,CAAC1qC,eAAe,CAAC2R,IAAI,CAAC,gBAAgB,EAAE,CAACxZ,OAAO,CAAC,CAAC;MACnF,MAAM+xC,OAAO,GAAGQ,cAAc,CAACV,cAAc,CAACpzC,QAAQ,CAAC,CAAC;MACxD,MAAMuiC,KAAK,GAAGuR,cAAc,CAACvR,KAAK,CAACviC,QAAQ,CAAC,CAAC;MAC7C,MAAMuzC,UAAU,GAAG,EAAE;MACrB,KAAK,IAAIv2C,CAAC,GAAGs2C,OAAO,EAAEt2C,CAAC,GAAGs2C,OAAO,GAAG/Q,KAAK,EAAEvlC,CAAC,EAAE,EAAE;QAC9Cu2C,UAAU,CAACliD,IAAI,CAAC,MAAM,IAAI,CAACiI,GAAG,CAACiI,OAAO,EAAEvE,CAAC,CAAC,CAAC;MAC7C;MACA,MAAMwC,QAAQ,GAAG,MAAM,IAAI,CAACA,QAAQ,CAAClG,GAAG,CAAC,CAAC;MAC1C,OAAOlI,OAAO,CAAC+M,GAAG,CAACo1C,UAAU,CAACjkD,GAAG,CAACjK,CAAC,IAAIqrD,+BAA+B,CAACrrD,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC+jB,eAAe,CAAC2vB,WAAW,CAAC,CAAC,EAAEv5B,QAAQ,CAAC7B,MAAM,EAAE,IAAI,CAAC4mB,OAAO,EAAE,CAAAjuB,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAE28C,aAAa,KAAI,KAAK,CAAC,CAAC,CAAC;IACpL,CAAC,MAAM;MACL,OAAO,CAAC,MAAM,IAAI,CAACD,SAAS,CAACzxC,OAAO,EAAEjL,OAAO,CAAC,CAAC;IACjD;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMm9C,QAAQA,CAAClyC,OAAO,EAAET,QAAQ,EAAE4yC,cAAc,EAAE;IAChD;IACA,IAAIA,cAAc,EAAE;MAClBA,cAAc,GAAG,MAAMhjB,cAAc,CAACgjB,cAAc,CAAC;IACvD;IACA,OAAO,CAAC,MAAM,IAAI,CAACC,4BAA4B,CAACpyC,OAAO,EAAET,QAAQ,EAAE4yC,cAAc,CAAC,EAAEhoD,MAAM,KAAK,CAAC;EAClG;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMioD,4BAA4BA,CAACpyC,OAAO,EAAET,QAAQ,EAAE4yC,cAAc,EAAE;IACpE,MAAME,OAAO,GAAG,EAAE;IAClB,IAAIC,oBAAoB;IACxB,IAAIC,cAAc;IAClB,IAAIJ,cAAc,KAAK9kD,SAAS,EAAE;MAChC,IAAI;QACF8kD,cAAc,GAAG,MAAM,IAAI,CAACtqC,eAAe,CAACwxB,gBAAgB,CAAC,CAAC;MAChE,CAAC,CAAC,OAAOlsB,GAAG,EAAE;QACZgV,OAAO,CAACC,IAAI,CAAC,8BAA8B,EAAEjV,GAAG,CAAC;MACnD;IACF;;IAEA;IACA,IAAI,CAACglC,cAAc,EAAE;MACnB,OAAO,CAAC7B,gBAAgB,CAACmC,QAAQ,CAAC;IACpC;IACA,MAAM3R,eAAe,GAAG,MAAM3R,cAAc,CAACgjB,cAAc,CAAC;IAC5D,IAAI;MACFI,cAAc,GAAG,MAAM,IAAI,CAACd,SAAS,CAACzxC,OAAO,CAAC;IAChD,CAAC,CAAC,OAAOmN,GAAG,EAAE;MACZ,IAAID,oBAAoB,CAACC,GAAG,EAAE,YAAY,CAAC,IAAID,oBAAoB,CAACC,GAAG,EAAE,0BAA0B,CAAC,EAAE;QACpGklC,OAAO,CAACviD,IAAI,CAACwgD,gBAAgB,CAACoC,mBAAmB,CAAC;QAClD,OAAOL,OAAO;MAChB;MACAA,OAAO,CAACviD,IAAI,CAACwgD,gBAAgB,CAACqC,OAAO,CAAC;MACtC,OAAON,OAAO;IAChB;IACA,IAAIE,cAAc,CAACj0C,eAAe,KAAK,WAAW,EAAE;MAClD,IAAIna,SAAS,CAAC6H,IAAI,CAACumD,cAAc,CAACj0C,eAAe,CAAC,CAACm9B,EAAE,CAACl8B,QAAQ,CAAC,EAAE;QAC/D8yC,OAAO,CAACviD,IAAI,CAACwgD,gBAAgB,CAACuC,eAAe,CAAC;QAC9C,OAAOR,OAAO;MAChB;IACF;;IAEA;IACA,MAAMS,eAAe,GAAGzuD,KAAK,CAAC0uD,UAAU,CAACR,cAAc,CAAC10C,cAAc,CAAC;IACvE,MAAMm1C,YAAY,GAAGF,eAAe,CAAC3oD,MAAM,GAAG,CAAC;IAC/C,IAAI8oD,cAAc,GAAG,IAAI;IACzB,IAAID,YAAY,EAAE;MAChBC,cAAc,GAAG,MAAM,IAAI,CAACC,gBAAgB,CAAClzC,OAAO,EAAE8gC,eAAe,CAAC;MACtE,IAAI,CAACmS,cAAc,KAAK,IAAI,CAACtC,uBAAuB,CAAC,IAAI,CAAC9oC,eAAe,CAAC,IAAI,IAAI,CAAC0pC,sBAAsB,CAAC,IAAI,CAAC1pC,eAAe,CAAC,CAAC,EAAE;QAChI;QACAwqC,OAAO,CAACviD,IAAI,CAACwgD,gBAAgB,CAAC6C,iBAAiB,CAAC;QAChD,OAAOd,OAAO;MAChB;MACA,IAAIY,cAAc,EAAE;QAClB,IAAI;UACF,MAAMG,iBAAiB,GAAG,MAAM,IAAI,CAAClG,YAAY,CAACltC,OAAO,EAAET,QAAQ,EAAE,KAAK,EAAEuhC,eAAe,CAAC;UAC5F,IAAIuS,gBAAgB;UACpB,IAAI,IAAI,CAAC9B,sBAAsB,CAAC,IAAI,CAAC1pC,eAAe,CAAC,EAAE;YACrDyqC,oBAAoB,GAAG,MAAM,IAAI,CAACzqC,eAAe,CAAC2R,IAAI,CAAC,2BAA2B,EAAE,CAACxZ,OAAO,CAAC,CAAC;YAC9F;YACA,CAACqzC,gBAAgB,CAAC,GAAG,MAAM,IAAI,CAACxrC,eAAe,CAAC2R,IAAI,CAAC,wBAAwB,EAAE,CAAC84B,oBAAoB,EAAExR,eAAe,EAAE9gC,OAAO,EAAET,QAAQ,EAAE6zC,iBAAiB,CAAC9J,MAAM,EAAE8J,iBAAiB,CAAC72C,YAAY,CAAC,CAAC;YACpM,IAAI,CAAC82C,gBAAgB,EAAE;cACrBhB,OAAO,CAACviD,IAAI,CAACwgD,gBAAgB,CAAC6C,iBAAiB,CAAC;cAChD,OAAOd,OAAO;YAChB;UACF,CAAC,MAAM,IAAI,IAAI,CAAC1B,uBAAuB,CAAC,IAAI,CAAC9oC,eAAe,CAAC,EAAE;YAC7D,CAACwrC,gBAAgB,CAAC,GAAG,MAAM,IAAI,CAACxrC,eAAe,CAAC2R,IAAI,CAAC,wBAAwB,EAAE,CAACxZ,OAAO,EAAE8gC,eAAe,EAAEvhC,QAAQ,EAAE;cAClHxC,KAAK,EAAEq2C,iBAAiB,CAAC9J,MAAM;cAC/BgK,sBAAsB,EAAEF,iBAAiB,CAAC72C;YAC5C,CAAC,CAAC,CAAC;YACH,IAAI,CAAC82C,gBAAgB,EAAE;cACrBhB,OAAO,CAACviD,IAAI,CAACwgD,gBAAgB,CAAC6C,iBAAiB,CAAC;cAChD,OAAOd,OAAO;YAChB;UACF,CAAC,MAAM,IAAI,IAAI,CAACzB,oBAAoB,CAAC,IAAI,CAAC/oC,eAAe,CAAC,EAAE;YAC1D,MAAM,IAAI,CAACA,eAAe,CAAC2R,IAAI,CAAC,aAAa,EAAE,CAACxZ,OAAO,EAAE8gC,eAAe,EAAEvhC,QAAQ,EAAE6zC,iBAAiB,CAAC32C,eAAe,EAAE22C,iBAAiB,CAAC52C,KAAK,EAAE;cAC9IO,KAAK,EAAEq2C,iBAAiB,CAAC9J,MAAM;cAC/B3C,sBAAsB,EAAEyM,iBAAiB,CAAC72C,YAAY;cACtDgqC,QAAQ,EAAE6M,iBAAiB,CAAC5F,sBAAsB;cAClDlH,aAAa,EAAE8M,iBAAiB,CAAC7F;YACnC,CAAC,CAAC,CAAC;UACL,CAAC,MAAM,IAAI,IAAI,CAACsD,mBAAmB,CAAC,IAAI,CAAChpC,eAAe,CAAC,EAAE;YACzDyqC,oBAAoB,GAAG,MAAM,IAAI,CAACzqC,eAAe,CAAC2R,IAAI,CAAC,2BAA2B,EAAE,CAACxZ,OAAO,CAAC,CAAC;YAC9F,MAAM,IAAI,CAAC6H,eAAe,CAAC2R,IAAI,CAAC,aAAa,EAAE,CAAC84B,oBAAoB,EAAExR,eAAe,EAAE9gC,OAAO,EAAET,QAAQ,EAAE6zC,iBAAiB,CAAC32C,eAAe,EAAE22C,iBAAiB,CAAC52C,KAAK,EAAE;cACpKO,KAAK,EAAEq2C,iBAAiB,CAAC9J,MAAM;cAC/B3C,sBAAsB,EAAEyM,iBAAiB,CAAC72C,YAAY;cACtDgqC,QAAQ,EAAE6M,iBAAiB,CAAC5F,sBAAsB;cAClDlH,aAAa,EAAE8M,iBAAiB,CAAC7F;YACnC,CAAC,CAAC,CAAC;UACL;QACF,CAAC,CAAC,OAAO33C,CAAC,EAAE;UACVusB,OAAO,CAACC,IAAI,CAAC,mCAAmC,EAAE,QAAQ,IAAIxsB,CAAC,GAAGA,CAAC,CAACmV,MAAM,GAAGnV,CAAC,CAAC;UAC/E,MAAMmV,MAAM,GAAGnV,CAAC,CAACmV,MAAM;UACvB,QAAQA,MAAM;YACZ,KAAK,MAAM;cACTsnC,OAAO,CAACviD,IAAI,CAACwgD,gBAAgB,CAACiD,yBAAyB,CAAC;cACxD;YACF,KAAK,kBAAkB;cACrBlB,OAAO,CAACviD,IAAI,CAACwgD,gBAAgB,CAACkD,oBAAoB,CAAC;cACnD;YACF,KAAK,YAAY;cACfnB,OAAO,CAACviD,IAAI,CAACwgD,gBAAgB,CAACuC,eAAe,CAAC;cAC9C;YACF,KAAK,gBAAgB;cACnBR,OAAO,CAACviD,IAAI,CAACwgD,gBAAgB,CAACmD,oBAAoB,CAAC;cACnD;YACF;cACE;gBACEpB,OAAO,CAACviD,IAAI,CAACwgD,gBAAgB,CAAC6C,iBAAiB,CAAC;gBAChD;cACF;UACJ;UACA,OAAOd,OAAO;QAChB;MACF;IACF;IACA,IAAI,IAAI,CAACzB,oBAAoB,CAAC,IAAI,CAAC/oC,eAAe,CAAC,IAAI,IAAI,CAACgpC,mBAAmB,CAAC,IAAI,CAAChpC,eAAe,CAAC,EAAE;MACrG,IAAI6rC,aAAa,GAAGvvD,SAAS,CAAC6H,IAAI,CAAC,CAAC,CAAC;MACrC,IAAIuQ,YAAY,GAAGqqC,0BAA0B,CAAC2L,cAAc,CAAC50C,qBAAqB,EAAE,CAAC,CAAC;MACtF,IAAI;QACF+1C,aAAa,GAAG,MAAM,IAAI,CAACC,wBAAwB,CAAC3zC,OAAO,EAAE8gC,eAAe,CAAC;MAC/E,CAAC,CAAC,OAAOlrC,CAAC,EAAE;QACV;MAAA;MAEF,IAAIq9C,cAAc,EAAE;QAClB12C,YAAY,GAAGqqC,0BAA0B,CAACqM,cAAc,CAAC12C,YAAY,EAAE,CAAC,CAAC;MAC3E;MACA,IAAIA,YAAY,CAAC6O,EAAE,CAAC,CAAC,CAAC,IAAI7O,YAAY,CAACk/B,EAAE,CAACiY,aAAa,CAACzsB,GAAG,CAAC1nB,QAAQ,CAAC,CAAC,EAAE;QACtE8yC,OAAO,CAACviD,IAAI,CAACwgD,gBAAgB,CAACiD,yBAAyB,CAAC;QACxD,OAAOlB,OAAO;MAChB;;MAEA;MACA;MACA,IAAI,CAACW,YAAY,IAAIA,YAAY,IAAI,CAACC,cAAc,EAAE;QACpD,IAAI12C,YAAY,CAACyoC,GAAG,CAAC0O,aAAa,CAAC,IAAIn3C,YAAY,CAACwxC,EAAE,CAAC,CAAC,CAAC,EAAE;UACzDsE,OAAO,CAACviD,IAAI,CAACwgD,gBAAgB,CAAC6C,iBAAiB,CAAC;UAChD,OAAOd,OAAO;QAChB;MACF;IACF;;IAEA;IACA,IAAI,CAACuB,oBAAoB,EAAEC,qBAAqB,CAAC,GAAG,CAAC1vD,SAAS,CAAC6H,IAAI,CAAC,CAAC,CAAC,EAAE7H,SAAS,CAAC6H,IAAI,CAAC,CAAC,CAAC,CAAC;IAC1F,IAAI,IAAI,CAACulD,sBAAsB,CAAC,IAAI,CAAC1pC,eAAe,CAAC,EAAE;MACrDyqC,oBAAoB,GAAG,MAAM,IAAI,CAACzqC,eAAe,CAAC2R,IAAI,CAAC,2BAA2B,EAAE,CAACxZ,OAAO,CAAC,CAAC;MAC9F,CAAC4zC,oBAAoB,EAAEC,qBAAqB,CAAC,GAAG,MAAM,IAAI,CAAChsC,eAAe,CAAC2R,IAAI,CAAC,mBAAmB,EAAE,CAACxZ,OAAO,EAAEsyC,oBAAoB,EAAExR,eAAe,CAAC,CAAC;IACxJ,CAAC,MAAM,IAAI,IAAI,CAAC6P,uBAAuB,CAAC,IAAI,CAAC9oC,eAAe,CAAC,EAAE;MAC7D,CAAC+rC,oBAAoB,EAAEC,qBAAqB,CAAC,GAAG,MAAM,IAAI,CAAChsC,eAAe,CAAC2R,IAAI,CAAC,mBAAmB,EAAE,CAACxZ,OAAO,EAAE8gC,eAAe,CAAC,CAAC;IAClI;IACA,MAAM3nC,GAAG,GAAGhV,SAAS,CAAC6H,IAAI,CAACkN,IAAI,CAACC,GAAG,CAAC,CAAC,CAAC,CAACmuB,GAAG,CAAC,IAAI,CAAC;IAChD,IAAIssB,oBAAoB,CAACxoC,EAAE,CAAC,CAAC,CAAC,IAAIjS,GAAG,CAACsiC,EAAE,CAACoY,qBAAqB,CAAC,EAAE;MAC/D;MACA,IAAIA,qBAAqB,CAAC9F,EAAE,CAACzpD,SAAS,CAAC4yC,UAAU,CAAC,EAAE;QAClDmb,OAAO,CAACviD,IAAI,CAACwgD,gBAAgB,CAACwD,cAAc,CAAC;MAC/C,CAAC,MAAM;QACLzB,OAAO,CAACviD,IAAI,CAACwgD,gBAAgB,CAACyD,8BAA8B,CAAC;MAC/D;MACA,OAAO1B,OAAO;IAChB;;IAEA;IACA;IACA,IAAIE,cAAc,CAAC/1C,KAAK,CAAC4O,EAAE,CAAC,CAAC,CAAC,IAAIyY,MAAM,CAAC,CAAC,EAAE;MAC1C,MAAMkpB,UAAU,GAAGwF,cAAc,CAAC/1C,KAAK,CAACwqB,GAAG,CAACznB,QAAQ,CAAC;MACrD,MAAMnR,QAAQ,GAAG,IAAI,CAACyZ,eAAe,CAAC2vB,WAAW,CAAC,CAAC;MACnD,IAAIsP,aAAa,CAACyL,cAAc,CAAC91C,eAAe,CAAC,EAAE;QACjD,MAAMu3C,OAAO,GAAG,MAAM5lD,QAAQ,CAAC6lD,UAAU,CAACnT,eAAe,CAAC;QAC1D,IAAIkT,OAAO,CAACvY,EAAE,CAACsR,UAAU,CAAC,EAAE;UAC1BsF,OAAO,CAACviD,IAAI,CAACwgD,gBAAgB,CAAC4D,eAAe,CAAC;QAChD;MACF,CAAC,MAAM;QACL,MAAMhN,KAAK,GAAG,IAAIsD,eAAe,CAACp8C,QAAQ,EAAEmkD,cAAc,CAAC91C,eAAe,EAAEvX,QAAQ,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC89B,OAAO,CAAC;QACvG,MAAMgxB,OAAO,GAAG,MAAM9M,KAAK,CAAC1tB,IAAI,CAAC,WAAW,EAAE,CAACsnB,eAAe,CAAC,CAAC;QAChE,IAAIkT,OAAO,CAACvY,EAAE,CAACsR,UAAU,CAAC,EAAE;UAC1BsF,OAAO,CAACviD,IAAI,CAACwgD,gBAAgB,CAAC4D,eAAe,CAAC;QAChD;MACF;IACF;IACA,OAAO7B,OAAO;EAChB;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,MAAMa,gBAAgBA,CAAClzC,OAAO,EAAEm0C,cAAc,EAAEC,gBAAgB,EAAE;IAChE,MAAM7B,cAAc,GAAG,MAAM,IAAI,CAACx6C,GAAG,CAACiI,OAAO,EAAEo0C,gBAAgB,CAAC;IAChE,MAAMn3C,UAAU,GAAGs1C,cAAc,CAACt1C,UAAU;IAC5C,MAAM61C,eAAe,GAAGzuD,KAAK,CAAC0uD,UAAU,CAAC91C,UAAU,CAAC;IACpD,IAAI61C,eAAe,CAAC3oD,MAAM,GAAG,CAAC,EAAE;MAC9B,MAAM8T,QAAQ,GAAG,MAAM,IAAI,CAACA,QAAQ,CAAClG,GAAG,CAAC,CAAC;MAC1C,MAAM+oC,eAAe,GAAG,MAAM3R,cAAc,CAACglB,cAAc,CAAC;MAC5D,OAAO,MAAMtK,4BAA4B,CAAC/I,eAAe,EAAE7jC,UAAU,CAAC/Q,QAAQ,CAAC,CAAC,EAAE+R,QAAQ,CAAC7B,MAAM,EAAE,IAAI,CAACyL,eAAe,CAAC2vB,WAAW,CAAC,CAAC,EAAE,IAAI,CAACxU,OAAO,EAAE,IAAI,CAACkuB,wBAAwB,CAAC,CAAC,CAAC;IACvL,CAAC,MAAM;MACL,OAAO,IAAI;IACb;EACF;;EAEA;AACF;AACA;AACA;AACA;EACE,MAAMyC,wBAAwBA,CAAC3zC,OAAO,EAAEq0C,aAAa,EAAE;IACrD,MAAMvT,eAAe,GAAG,MAAM3R,cAAc,CAACklB,aAAa,CAAC;IAC3D,IAAI,IAAI,CAACzD,oBAAoB,CAAC,IAAI,CAAC/oC,eAAe,CAAC,EAAE;MACnD,OAAO,MAAM,IAAI,CAACA,eAAe,CAAC2R,IAAI,CAAC,0BAA0B,EAAE,CAACxZ,OAAO,EAAE8gC,eAAe,CAAC,CAAC;IAChG;IACA,IAAI,IAAI,CAAC+P,mBAAmB,CAAC,IAAI,CAAChpC,eAAe,CAAC,EAAE;MAClD,MAAMysC,sBAAsB,GAAG,MAAM,IAAI,CAACzsC,eAAe,CAAC2R,IAAI,CAAC,2BAA2B,EAAE,CAACxZ,OAAO,CAAC,CAAC;MACtG,OAAO,MAAM,IAAI,CAAC6H,eAAe,CAAC2R,IAAI,CAAC,0BAA0B,EAAE,CAACxZ,OAAO,EAAEs0C,sBAAsB,EAAExT,eAAe,CAAC,CAAC;IACxH;IACA,MAAM,IAAI12C,KAAK,CAAC,sEAAsE,CAAC;EACzF;EAoNA;AACF;AACA;AACA;AACA;EACE,MAAM8iD,YAAYA,CAACltC,OAAO,EAAET,QAAQ,EAAE+tC,mBAAmB,EAAEt0C,OAAO,EAAE;IAClE,MAAMm0C,cAAc,GAAG,MAAMhe,cAAc,CAACn2B,OAAO,GAAGA,OAAO,GAAG,MAAM,IAAI,CAAC6O,eAAe,CAACwxB,gBAAgB,CAAC,CAAC,CAAC;IAC9G,OAAO6T,YAAY,CAACC,cAAc,EAAE5tC,QAAQ,EAAE,MAAM,IAAI,CAACkyC,SAAS,CAACzxC,OAAO,CAAC,EAAE,YAAY,CAAC,MAAM,IAAI,CAAC/B,QAAQ,CAAClG,GAAG,CAAC,CAAC,EAAEqE,MAAM,EAAE,CAAC,EAAE,IAAI,CAACyL,eAAe,EAAE,IAAI,CAACmb,OAAO,EAAEsqB,mBAAmB,EAAE,IAAI,CAAC4D,wBAAwB,CAAC,CAAC,CAAC;EAC3N;EACA,MAAMqD,iBAAiBA,CAACv0C,OAAO,EAAEw0C,kBAAkB,EAAEj1C,QAAQ,EAAE6zC,iBAAiB,EAAE;IAChF,MAAMtS,eAAe,GAAG,MAAM3R,cAAc,CAACqlB,kBAAkB,CAAC;IAChE,IAAI,IAAI,CAACjD,sBAAsB,CAAC,IAAI,CAAC1pC,eAAe,CAAC,EAAE;MACrD,OAAO,CAACi5B,eAAe,EAAE9gC,OAAO,EAAET,QAAQ,EAAE6zC,iBAAiB,CAAC32C,eAAe,EAAE22C,iBAAiB,CAAC52C,KAAK,EAAE42C,iBAAiB,CAAC9J,MAAM,EAAE8J,iBAAiB,CAAC72C,YAAY,CAAC;IACnK,CAAC,MAAM,IAAI,IAAI,CAACo0C,uBAAuB,CAAC,IAAI,CAAC9oC,eAAe,CAAC,EAAE;MAC7D,OAAO,CAACi5B,eAAe,EAAE9gC,OAAO,EAAET,QAAQ,EAAE6zC,iBAAiB,CAAC32C,eAAe,EAAE22C,iBAAiB,CAAC52C,KAAK,EAAE;QACtGO,KAAK,EAAEq2C,iBAAiB,CAAC9J,MAAM;QAC/BgK,sBAAsB,EAAEF,iBAAiB,CAAC72C;MAC5C,CAAC,EAAElY,KAAK,CAAC0a,WAAW,CAAC,EAAE,CAAC,CAAC;IAC3B;IACA,OAAO,CAAC+hC,eAAe,EAAE9gC,OAAO,EAAET,QAAQ,EAAE6zC,iBAAiB,CAAC32C,eAAe,EAAE22C,iBAAiB,CAAC52C,KAAK,EAAE;MACtGO,KAAK,EAAEq2C,iBAAiB,CAAC9J,MAAM;MAC/B3C,sBAAsB,EAAEyM,iBAAiB,CAAC72C,YAAY;MACtD+pC,aAAa,EAAE8M,iBAAiB,CAAC7F,YAAY;MAC7ChH,QAAQ,EAAE6M,iBAAiB,CAAC5F;IAC9B,CAAC,EAAEnpD,KAAK,CAAC0a,WAAW,CAAC,EAAE,CAAC,CAAC;EAC3B;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAM01C,mBAAmBA,CAACD,kBAAkB,EAAEx0C,OAAO,EAAET,QAAQ,EAAExK,OAAO,EAAE;IACxE,IAAIA,OAAO,aAAPA,OAAO,eAAPA,OAAO,CAAEuxC,aAAa,EAAE;MAC1B,MAAM,IAAIl8C,KAAK,CAAC,wGAAwG,CAAC;IAC3H;IACA,MAAMgpD,iBAAiB,GAAG,MAAM,IAAI,CAAClG,YAAY,CAACltC,OAAO,EAAET,QAAQ,EAAE,CAAAxK,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEu4C,mBAAmB,KAAI,IAAI,CAAC;IAC1G,OAAO/T,WAAW,CAACC,mBAAmB,CAAC;MACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;MACrCvY,MAAM,EAAE,OAAO;MACf0Y,IAAI,EAAE,MAAM,IAAI,CAACusC,iBAAiB,CAACv0C,OAAO,EAAEw0C,kBAAkB,EAAEj1C,QAAQ,EAAE6zC,iBAAiB,CAAC;MAC5F/b,SAAS,EAAE+b,iBAAiB,CAAC/b;IAC/B,CAAC,CAAC;EACJ;EACAuZ,oBAAoBA,CAAC/oC,eAAe,EAAE;IACpC,OAAOoO,qBAAqB,CAACpO,eAAe,EAAE,0BAA0B,CAAC;EAC3E;EACAgpC,mBAAmBA,CAAChpC,eAAe,EAAE;IACnC,OAAOoO,qBAAqB,CAACpO,eAAe,EAAE,sBAAsB,CAAC;EACvE;EACA8oC,uBAAuBA,CAAC9oC,eAAe,EAAE;IACvC,OAAOoO,qBAAqB,CAACpO,eAAe,EAAE,0BAA0B,CAAC;EAC3E;EACA0pC,sBAAsBA,CAAC1pC,eAAe,EAAE;IACtC,OAAOoO,qBAAqB,CAACpO,eAAe,EAAE,sBAAsB,CAAC;EACvE;EACAqpC,wBAAwBA,CAAA,EAAG;IACzB,OAAO,IAAI,CAACK,sBAAsB,CAAC,IAAI,CAAC1pC,eAAe,CAAC,IAAI,IAAI,CAAC8oC,uBAAuB,CAAC,IAAI,CAAC9oC,eAAe,CAAC,GAAG4/B,qBAAqB,CAACa,EAAE,GAAGb,qBAAqB,CAACc,EAAE;EACtK;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAM8M,kBAAkB,CAAC;EAEvBroD,WAAWA,CAACk6C,KAAK,EAAEr/B,eAAe,EAAE;IAAA22B,eAAA,sBADtBxwB,4BAA4B,CAAC1d,IAAI;IAM/C;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IArBEkuC,eAAA,aAsBK,eAAetY,wBAAwB,CAAC,MAAMle,IAAI,IAAI;MACzD,MAAMm4B,OAAO,GAAG,EAAE;MAClB,MAAMH,eAAe,GAAG,IAAIp4B,eAAe,CAAC,IAAI,CAACC,eAAe,CAAC;MACjE,KAAK,MAAM9b,GAAG,IAAIic,IAAI,EAAE;QACtBm4B,OAAO,CAACrwC,IAAI,CAACkwC,eAAe,CAACl4B,MAAM,CAAC,QAAQ,EAAE,CAAC,MAAMqnB,cAAc,CAACpjC,GAAG,CAACupD,SAAS,CAAC,EAAE,MAAM,IAAI,CAACpO,KAAK,CAACqO,eAAe,CAACxpD,GAAG,CAACyxC,MAAM,CAAC,CAAC,CAAC,CAAC;MACrI;MACA,OAAOjE,WAAW,CAACC,mBAAmB,CAAC;QACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;QACrCvY,MAAM,EAAE,WAAW;QACnB0Y,IAAI,EAAE,CAACm4B,OAAO;MAChB,CAAC,CAAC;IACJ,CAAC,CAAC;IArCA,IAAI,CAAC+G,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACr/B,eAAe,GAAGA,eAAe;EACxC;AAoCF;AAEA,MAAM2tC,aAAa,CAAC;EAElBxoD,WAAWA,CAACk6C,KAAK,EAAEr/B,eAAe,EAAE;IAAA22B,eAAA,sBADtB1wB,sBAAsB,CAACxd,IAAI;IAMzC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAZEkuC,eAAA,iBAaS,eAAetY,wBAAwB,CAAC,MAAMsX,MAAM,IAAI;MAC/D,OAAOjE,WAAW,CAACC,mBAAmB,CAAC;QACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;QACrCvY,MAAM,EAAE,MAAM;QACd0Y,IAAI,EAAE,CAAC,MAAM,IAAI,CAACk/B,KAAK,CAACqO,eAAe,CAAC/X,MAAM,CAAC;MACjD,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAfEgB,eAAA,eAgBO,eAAetY,wBAAwB,CAAC,OAAOuvB,MAAM,EAAEjY,MAAM,KAAK;MACvE,OAAOjE,WAAW,CAACC,mBAAmB,CAAC;QACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;QACrCvY,MAAM,EAAE,UAAU;QAClB0Y,IAAI,EAAE,CAAC,MAAMmnB,cAAc,CAACsmB,MAAM,CAAC,EAAE,MAAM,IAAI,CAACvO,KAAK,CAACqO,eAAe,CAAC/X,MAAM,CAAC;MAC/E,CAAC,CAAC;IACJ,CAAC,CAAC;IA/CA,IAAI,CAAC0J,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACr/B,eAAe,GAAGA,eAAe;EACxC;AA8CF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAM6tC,4BAA4B,CAAC;EAEjC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE1oD,WAAWA,CAACk6C,KAAK,EAAEr/B,eAAe,EAAEmb,OAAO,EAAE;IAAAwb,eAAA,sBAxB/B7wB,iCAAiC,CAACrd,IAAI;IAgCpD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAnBEkuC,eAAA,aAoBK,eAAetY,wBAAwB,CAAC,OAAOsuB,kBAAkB,EAAEhX,MAAM,EAAEzoC,OAAO,KAAK;MAC1F,MAAMwK,QAAQ,GAAG,MAAM,IAAI,CAAC2nC,KAAK,CAACqO,eAAe,CAAC/X,MAAM,CAAC;MACzD,OAAO,MAAM,IAAI,CAACwU,UAAU,CAACyC,mBAAmB,CAACD,kBAAkB,EAAEj1C,QAAQ,EAAExK,OAAO,CAAC;IACzF,CAAC,CAAC;IA9BA,IAAI,CAACmyC,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACr/B,eAAe,GAAGA,eAAe;IACtC,IAAI,CAACmb,OAAO,GAAGA,OAAO;IACtB,MAAM/kB,QAAQ,GAAG,IAAIqgC,gBAAgB,CAAC,IAAI,CAACz2B,eAAe,EAAE5F,oBAAoB,EAAE,IAAI,CAAC+gB,OAAO,CAAC;IAC/F,IAAI,CAACgvB,UAAU,GAAG,IAAIzB,mBAAmB,CAAC,IAAI,CAAC1oC,eAAe,EAAE5J,QAAQ,EAAE,IAAI,CAAC+kB,OAAO,CAAC;EACzF;AA0BF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAM2yB,cAAc,CAAC;EACnB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE3oD,WAAWA,CAACk6C,KAAK,EAAEr/B,eAAe,EAAEmb,OAAO,EAAE;IAC3C,IAAI,CAACkkB,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACr/B,eAAe,GAAGA,eAAe;IACtC,IAAI,CAACmb,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACgsB,KAAK,GAAG,IAAI0G,4BAA4B,CAAC,IAAI,CAACxO,KAAK,EAAE,IAAI,CAACr/B,eAAe,EAAE,IAAI,CAACmb,OAAO,CAAC;EAC/F;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAM4yB,aAAa,CAAC;EAGlB;AACF;AACA;;EAEE5oD,WAAWA,CAACk6C,KAAK,EAAEr/B,eAAe,EAAE;IAAA22B,eAAA,sBANtBvwB,sBAAsB,CAAC3d,IAAI;IAYzC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAXEkuC,eAAA,aAYK,eAAetY,wBAAwB,CAAC,OAAOjnB,EAAE,EAAEu+B,MAAM,KAAK;MACjE,OAAO,MAAM,IAAI,CAACqY,kBAAkB,CAAC52C,EAAE,EAAEu+B,MAAM,CAAC;IAClD,CAAC,CAAC;IAnBA,IAAI,CAAC0J,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACr/B,eAAe,GAAGA,eAAe;IACtC,IAAI,CAACha,KAAK,GAAG,IAAI,CAACioD,wBAAwB,CAAC,CAAC;EAC9C;EAkBA;AACF;AACA;EACE,MAAMD,kBAAkBA,CAAC52C,EAAE,EAAEu+B,MAAM,EAAE;IACnC,OAAOjE,WAAW,CAACC,mBAAmB,CAAC;MACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;MACrCvY,MAAM,EAAE,QAAQ;MAChB0Y,IAAI,EAAE,CAAC,MAAMmnB,cAAc,CAAClwB,EAAE,CAAC,EAAE,MAAM,IAAI,CAACioC,KAAK,CAACqO,eAAe,CAAC/X,MAAM,CAAC;IAC3E,CAAC,CAAC;EACJ;EACAsY,wBAAwBA,CAAA,EAAG;IACzB,IAAI7/B,qBAAqB,CAAC,IAAI,CAACpO,eAAe,EAAE,oBAAoB,CAAC,EAAE;MACrE,OAAO,IAAIwtC,kBAAkB,CAAC,IAAI,CAACnO,KAAK,EAAE,IAAI,CAACr/B,eAAe,CAAC;IACjE;IACA,OAAOxa,SAAS;EAClB;AACF;AAEA,eAAe0oD,iBAAiBA,CAAClJ,iBAAiB,EAAExgD,KAAK,EAAEoQ,eAAe,EAAE46B,SAAS,EAAE;EACrF,IAAIyP,aAAa,CAACrqC,eAAe,CAAC,EAAE;IAClC46B,SAAS,CAAC,OAAO,CAAC,GAAGhrC,KAAK;EAC5B,CAAC,MAAM;IACL,MAAMmM,MAAM,GAAGq0C,iBAAiB,CAACtV,SAAS,CAAC,CAAC;IAC5C,MAAMnpC,QAAQ,GAAGy+C,iBAAiB,CAACrV,WAAW,CAAC,CAAC;IAChD,MAAM0P,KAAK,GAAG,IAAIsD,eAAe,CAAChyC,MAAM,IAAIpK,QAAQ,EAAEqO,eAAe,EAAEvX,QAAQ,EAAE2nD,iBAAiB,CAAC93C,OAAO,EAAE83C,iBAAiB,CAAC7pB,OAAO,CAAC;IACtI,MAAM8T,KAAK,GAAG,MAAM+V,iBAAiB,CAACxT,gBAAgB,CAAC,CAAC;IACxD,MAAMtC,OAAO,GAAG8V,iBAAiB,CAAC7zC,OAAO;IACzC,MAAM8zC,SAAS,GAAG,MAAM5F,KAAK,CAAC1tB,IAAI,CAAC,WAAW,EAAE,CAACsd,KAAK,EAAEC,OAAO,CAAC,CAAC;IACjE,IAAI+V,SAAS,CAACrR,EAAE,CAACpvC,KAAK,CAAC,EAAE;MACvB;MACA,MAAM66C,KAAK,CAAC7c,eAAe,CAAC,SAAS,EAAE,CAAC0M,OAAO,EAAE1qC,KAAK,CAAC,CAAC;IAC1D;IACA,OAAOgrC,SAAS;EAClB;AACF;;AAEA;AACA;AACA;AACA;AACA;;AAEA,MAAM2e,sBAAsB,CAAC;EAE3BhpD,WAAWA,CAAC6a,eAAe,EAAEi4B,KAAK,EAAE;IAAAtB,eAAA,sBADtBzwB,gCAAgC,CAACzd,IAAI;IAMnD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAfEkuC,eAAA,eAgBO,eAAetY,wBAAwB,CAAC,MAAM+vB,aAAa,IAAI;MACpE,MAAMC,WAAW,GAAGD,aAAa,CAAClnD,OAAO;MACzC,MAAM8kB,SAAS,GAAGoiC,aAAa,CAACpiC,SAAS;MACzC,MAAM5kB,OAAO,GAAG,MAAM,IAAI,CAACknD,0BAA0B,CAACD,WAAW,CAAC;MAClE,MAAM7e,SAAS,GAAG,MAAM,IAAI,CAACxvB,eAAe,CAAC8iC,gBAAgB,CAAC,CAAC;MAC/D;MACA,MAAMoL,iBAAiB,CAAC,IAAI,CAACluC,eAAe,EAAE1jB,SAAS,CAAC6H,IAAI,CAACiD,OAAO,CAACuN,KAAK,CAAC,EAAE05C,WAAW,CAACz5C,eAAe,EAAE46B,SAAS,CAAC;MACpH,OAAOkC,WAAW,CAACC,mBAAmB,CAAC;QACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;QACrCvY,MAAM,EAAE,mBAAmB;QAC3B0Y,IAAI,EAAE,CAAC/Y,OAAO,EAAE4kB,SAAS,CAAC;QAC1BwjB;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF;AACF;AACA;AACA;AACA;AACA;IALEmH,eAAA,oBAMY,eAAetY,wBAAwB,CAAC,MAAMkwB,cAAc,IAAI;MAC1E,MAAMC,gBAAgB,GAAG,MAAMxmD,OAAO,CAAC+M,GAAG,CAACw5C,cAAc,CAACroD,GAAG,CAAC,MAAM+7B,CAAC,IAAI;QACvE,MAAM76B,OAAO,GAAG,MAAM,IAAI,CAACknD,0BAA0B,CAACrsB,CAAC,CAAC/6B,OAAO,CAAC;QAChE,MAAM8kB,SAAS,GAAGiW,CAAC,CAACjW,SAAS;QAC7B,MAAMrX,KAAK,GAAGstB,CAAC,CAAC/6B,OAAO,CAACyN,KAAK;QAC7B,IAAIrY,SAAS,CAAC6H,IAAI,CAACwQ,KAAK,CAAC,CAAC4O,EAAE,CAAC,CAAC,CAAC,EAAE;UAC/B,MAAM,IAAIhhB,KAAK,CAAC,uEAAuE,CAAC;QAC1F;QACA,OAAO;UACL6E,OAAO;UACP4kB;QACF,CAAC;MACH,CAAC,CAAC,CAAC;MACH,MAAMmsB,eAAe,GAAG,IAAIp4B,eAAe,CAAC,IAAI,CAACC,eAAe,CAAC;MACjE,MAAMs4B,OAAO,GAAGkW,gBAAgB,CAACtoD,GAAG,CAAC0lC,CAAC,IAAI;QACxC,OAAOuM,eAAe,CAACl4B,MAAM,CAAC,mBAAmB,EAAE,CAAC2rB,CAAC,CAACxkC,OAAO,EAAEwkC,CAAC,CAAC5f,SAAS,CAAC,CAAC;MAC9E,CAAC,CAAC;MACF,OAAO0lB,WAAW,CAACC,mBAAmB,CAAC;QACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;QACrCvY,MAAM,EAAE,WAAW;QACnB0Y,IAAI,EAAE,CAACm4B,OAAO;MAChB,CAAC,CAAC;IACJ,CAAC,CAAC;IA/DA,IAAI,CAACt4B,eAAe,GAAGA,eAAe;IACtC,IAAI,CAACi4B,KAAK,GAAGA,KAAK;EACpB;EA+DA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMmB,MAAMA,CAACgV,aAAa,EAAE;IAC1B,MAAMC,WAAW,GAAGD,aAAa,CAAClnD,OAAO;IACzC,MAAM8kB,SAAS,GAAGoiC,aAAa,CAACpiC,SAAS;IACzC,MAAM5kB,OAAO,GAAG,MAAM,IAAI,CAACknD,0BAA0B,CAACD,WAAW,CAAC;IAClE,MAAMI,YAAY,GAAG,MAAM,IAAI,CAACzuC,eAAe,CAAC2R,IAAI,CAAC,QAAQ,EAAE,CAACvqB,OAAO,EAAE4kB,SAAS,CAAC,CAAC;IACpF,OAAOyiC,YAAY,CAAC,CAAC,CAAC;EACxB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMC,QAAQA,CAACL,WAAW,EAAE;IAC1B,OAAO,CAAC,MAAM,IAAI,CAACM,aAAa,CAAC,CAACN,WAAW,CAAC,CAAC,EAAE,CAAC,CAAC;EACrD;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMM,aAAaA,CAACC,cAAc,EAAE;IAAA,IAAAC,WAAA;IAClC,QAAAA,WAAA,GAAM,IAAI,CAAC5W,KAAK,cAAA4W,WAAA,uBAAVA,WAAA,CAAYzV,MAAM,CAAC,CAAC,QAAQ,CAAC,EAAE,MAAM,IAAI,CAACp5B,eAAe,CAACwxB,gBAAgB,CAAC,CAAC,CAAC;IACnF,MAAMsd,cAAc,GAAG,MAAM9mD,OAAO,CAAC+M,GAAG,CAAC65C,cAAc,CAAC1oD,GAAG,CAACovB,CAAC,IAAI7d,uBAAuB,CAACzC,UAAU,CAACsgB,CAAC,CAAC,CAAC,CAAC;IACxG,MAAM/sB,OAAO,GAAG,MAAM,IAAI,CAACyX,eAAe,CAAC28B,UAAU,CAAC,CAAC;IACvD,MAAMhsC,MAAM,GAAG,IAAI,CAACqP,eAAe,CAAC0vB,SAAS,CAAC,CAAC;IAC/C9yC,SAAS,CAAC+T,MAAM,EAAE,qBAAqB,CAAC;;IAExC;IACA,MAAMlI,IAAI,GAAG,MAAM,IAAI,CAACuX,eAAe,CAAC2R,IAAI,CAAC,MAAM,EAAE,EAAE,CAAC;IACxD,OAAO,MAAM3pB,OAAO,CAAC+M,GAAG,CAAC+5C,cAAc,CAAC5oD,GAAG,CAAC,MAAMovB,CAAC,IAAI;MACrD,MAAMy5B,YAAY,GAAG,MAAMp3C,wBAAwB,CAAC3C,UAAU,CAACsgB,CAAC,CAAC;MACjE,MAAMtJ,SAAS,GAAG,MAAM,IAAI,CAAChM,eAAe,CAACkkC,aAAa,CAACvzC,MAAM,EAAE;QACjElI,IAAI;QACJpG,OAAO,EAAE,GAAG;QACZkG,OAAO;QACPqmC,iBAAiB,EAAE,IAAI,CAAC5uB,eAAe,CAAC7O;MAC1C,CAAC,EAAE;QACD69C,WAAW,EAAEz2C;MACf,CAAC,EAAE,MAAM,IAAI,CAAC+1C,0BAA0B,CAACS,YAAY,CAAC,CAAC;MACvD,OAAO;QACL7nD,OAAO,EAAE6nD,YAAY;QACrB/iC,SAAS,EAAEA,SAAS,CAAC3nB,QAAQ,CAAC;MAChC,CAAC;IACH,CAAC,CAAC,CAAC;EACL;;EAEA;AACF;AACA;EACE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMiqD,0BAA0BA,CAACD,WAAW,EAAE;IAC5C,MAAMY,eAAe,GAAG,MAAM9J,mBAAmB,CAAC,IAAI,CAACnlC,eAAe,CAAC2vB,WAAW,CAAC,CAAC,EAAE0e,WAAW,CAAC15C,KAAK,EAAE05C,WAAW,CAACz5C,eAAe,CAAC;IACrI,MAAMs6C,kBAAkB,GAAG1yD,KAAK,CAACwiC,UAAU,CAACqvB,WAAW,CAAC32C,QAAQ,EAAE,MAAM,IAAI,CAACsI,eAAe,CAAC2R,IAAI,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;IAClH,OAAO;MACLva,EAAE,EAAEi3C,WAAW,CAACj3C,EAAE;MAClBI,oBAAoB,EAAE62C,WAAW,CAAC72C,oBAAoB;MACtDE,QAAQ,EAAEw3C,kBAAkB;MAC5Bv6C,KAAK,EAAEs6C,eAAe;MACtBvQ,QAAQ,EAAE2P,WAAW,CAACz5C,eAAe;MACrCu6C,oBAAoB,EAAEd,WAAW,CAAC/2C,WAAW;MAC7C83C,sBAAsB,EAAEf,WAAW,CAACh3C,aAAa;MACjDE,GAAG,EAAE82C,WAAW,CAAC92C;IACnB,CAAC;EACH;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS83C,aAAaA,CAAC7pC,SAAS,EAAE9C,OAAO,EAAE;EACzC,IAAI,CAAC8C,SAAS,EAAE;IACd,MAAM,IAAI/C,4BAA4B,CAACC,OAAO,CAAC;EACjD;EACA,OAAO8C,SAAS;AAClB;AAEA,eAAekoC,eAAeA,CAAC1tC,eAAe,EAAE21B,MAAM,EAAE;EACtD,MAAMhtC,QAAQ,GAAG,MAAMqX,eAAe,CAAC2R,IAAI,CAAC,UAAU,EAAE,EAAE,CAAC;EAC3D,OAAOn1B,KAAK,CAACwiC,UAAU,CAAChkC,YAAY,CAAC0S,KAAK,CAACioC,MAAM,CAAC,EAAEhtC,QAAQ,CAAC;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM2mD,KAAK,CAAC;EAEV;AACF;AACA;;EAEE,IAAI/mD,OAAOA,CAAA,EAAG;IACZ,OAAO,IAAI,CAACgnD,QAAQ;EACtB;EACApqD,WAAWA,CAAC6a,eAAe,EAAEmb,OAAO,EAAE5yB,OAAO,EAAE;IAAAouC,eAAA,sBARjCrwB,aAAa,CAAC7d,IAAI;IA0IhC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAdEkuC,eAAA,mBAeW,eAAetY,wBAAwB,CAAC,OAAOjnB,EAAE,EAAEu+B,MAAM,KAAK;MACvE,OAAOjE,WAAW,CAACC,mBAAmB,CAAC;QACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;QACrCvY,MAAM,EAAE,UAAU;QAClB0Y,IAAI,EAAE,MAAMnY,OAAO,CAAC+M,GAAG,CAAC,CAACuyB,cAAc,CAAClwB,EAAE,CAAC,EAAE,IAAI,CAACs2C,eAAe,CAAC/X,MAAM,CAAC,CAAC;MAC5E,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAjBEgB,eAAA,uBAkBe,eAAetY,wBAAwB,CAAC,OAAOl6B,IAAI,EAAEiT,EAAE,EAAEu+B,MAAM,KAAK;MACjF,OAAOjE,WAAW,CAACC,mBAAmB,CAAC;QACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;QACrCvY,MAAM,EAAE,cAAc;QACtB0Y,IAAI,EAAE,MAAMnY,OAAO,CAAC+M,GAAG,CAAC,CAACuyB,cAAc,CAACnjC,IAAI,CAAC,EAAEmjC,cAAc,CAAClwB,EAAE,CAAC,EAAE,IAAI,CAACs2C,eAAe,CAAC/X,MAAM,CAAC,CAAC;MAClG,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAZEgB,eAAA,uBAae,eAAetY,wBAAwB,CAAC,OAAO6Q,OAAO,EAAEyG,MAAM,KAAK;MAChF,OAAOjE,WAAW,CAACC,mBAAmB,CAAC;QACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;QACrCvY,MAAM,EAAE,SAAS;QACjB0Y,IAAI,EAAE,MAAMnY,OAAO,CAAC+M,GAAG,CAAC,CAACuyB,cAAc,CAAC4H,OAAO,CAAC,EAAE,IAAI,CAACwe,eAAe,CAAC/X,MAAM,CAAC,CAAC;MACjF,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IArBEgB,eAAA,wBAsBgB,eAAetY,wBAAwB,CAAC,MAAMle,IAAI,IAAI;MACpE,MAAMg4B,eAAe,GAAG,IAAIp4B,eAAe,CAAC,IAAI,CAACC,eAAe,CAAC;MACjE,MAAMs4B,OAAO,GAAG,CAAC,MAAMtwC,OAAO,CAAC+M,GAAG,CAACoL,IAAI,CAACja,GAAG,CAAChC,GAAG,IAAI8D,OAAO,CAAC+M,GAAG,CAAC,CAAC,IAAI,CAAC24C,eAAe,CAACxpD,GAAG,CAACyxC,MAAM,CAAC,EAAErO,cAAc,CAACpjC,GAAG,CAACupD,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,EAAEvnD,GAAG,CAACw1B,IAAI,IAAI;QAC/I,IAAI,CAACwzB,kBAAkB,EAAE/9C,OAAO,CAAC,GAAGuqB,IAAI;QACxC,OAAOyc,eAAe,CAACl4B,MAAM,CAAC,UAAU,EAAE,CAAC9O,OAAO,EAAE+9C,kBAAkB,CAAC,CAAC;MAC1E,CAAC,CAAC;MACF,OAAOxd,WAAW,CAACC,mBAAmB,CAAC;QACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;QACrCvY,MAAM,EAAE,WAAW;QACnB0Y,IAAI,EAAE,CAACm4B,OAAO;MAChB,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF;IAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAXE3B,eAAA,eAYO,eAAetY,wBAAwB,CAAC,MAAMsX,MAAM,IAAI;MAC7D,OAAO,IAAI,CAAC6Z,MAAM,CAACpxB,OAAO,CAAC,MAAM,IAAI,CAACpe,eAAe,CAACwxB,gBAAgB,CAAC,CAAC,EAAEmE,MAAM,CAAC;IACnF,CAAC,CAAC;IAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAZEgB,eAAA,iBAaS,eAAetY,wBAAwB,CAAC,OAAOoxB,QAAQ,EAAE9Z,MAAM,KAAK;MAC3E,OAAO0Z,aAAa,CAAC,IAAI,CAACK,QAAQ,EAAEtpC,sBAAsB,CAAC,CAAChP,EAAE,CAACgnB,OAAO,CAACqxB,QAAQ,EAAE9Z,MAAM,CAAC;IAC1F,CAAC,CAAC;IAeF;IAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAtBEgB,eAAA,sBAuBc,eAAetY,wBAAwB,CAAC,MAAMle,IAAI,IAAI;MAAA,IAAAwvC,cAAA;MAClE,OAAON,aAAa,EAAAM,cAAA,GAAC,IAAI,CAACD,QAAQ,cAAAC,cAAA,uBAAbA,cAAA,CAAe3pD,KAAK,EAAEmgB,4BAA4B,CAAC,CAAC/O,EAAE,CAACgnB,OAAO,CAACje,IAAI,CAAC;IAC3F,CAAC,CAAC;IAEF;IAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAbEw2B,eAAA,eAcO,eAAetY,wBAAwB,CAAC,MAAMsX,MAAM,IAAI;MAC7D,OAAO0Z,aAAa,CAAC,IAAI,CAACO,QAAQ,EAAE3pC,sBAAsB,CAAC,CAAC4pC,MAAM,CAACzxB,OAAO,CAACuX,MAAM,CAAC;IACpF,CAAC,CAAC;IAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAhBEgB,eAAA,mBAiBW,eAAetY,wBAAwB,CAAC,OAAOuvB,MAAM,EAAEjY,MAAM,KAAK;MAC3E,OAAO0Z,aAAa,CAAC,IAAI,CAACO,QAAQ,EAAE3pC,sBAAsB,CAAC,CAAC9hB,IAAI,CAACi6B,OAAO,CAACwvB,MAAM,EAAEjY,MAAM,CAAC;IAC1F,CAAC,CAAC;IAEF;IAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IApBEgB,eAAA,gBAqBQ,eAAetY,wBAAwB,CAAC,OAAOsX,MAAM,EAAEzoC,OAAO,KAAK;MACzE,OAAO,IAAI,CAAC4iD,OAAO,CAAC1xB,OAAO,CAAC,MAAM,IAAI,CAACpe,eAAe,CAACwxB,gBAAgB,CAAC,CAAC,EAAEmE,MAAM,EAAEzoC,OAAO,CAAC;IAC7F,CAAC,CAAC;IAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IApBEypC,eAAA,kBAqBU,eAAetY,wBAAwB,CAAC,OAAOsuB,kBAAkB,EAAEhX,MAAM,EAAEzoC,OAAO,KAAK;MAAA,IAAA6iD,eAAA;MAC/F,OAAOV,aAAa,EAAAU,eAAA,GAAC,IAAI,CAACC,SAAS,cAAAD,eAAA,uBAAdA,eAAA,CAAgB5I,KAAK,EAAErhC,iCAAiC,CAAC,CAAC1O,EAAE,CAACgnB,OAAO,CAACuuB,kBAAkB,EAAEhX,MAAM,EAAEzoC,OAAO,CAAC;IAChI,CAAC,CAAC;IAlZA,IAAI,CAAC8S,eAAe,GAAGA,eAAe;IACtC,IAAI,CAACmb,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACu0B,QAAQ,GAAG,IAAI,CAACO,mBAAmB,CAAC,CAAC;IAC1C,IAAI,CAACL,QAAQ,GAAG,IAAI,CAACM,mBAAmB,CAAC,CAAC;IAC1C,IAAI,CAACF,SAAS,GAAG,IAAI,CAACG,oBAAoB,CAAC,CAAC;IAC5C,IAAI,CAACC,iBAAiB,GAAG,IAAI,CAACC,4BAA4B,CAAC,CAAC;IAC5D,IAAI,CAACd,QAAQ,GAAGhnD,OAAO;EACzB;;EAEA;AACF;AACA;EACE+nD,gBAAgBA,CAACjrD,OAAO,EAAE;IACxB,IAAI,CAAC2a,eAAe,CAACwiC,sBAAsB,CAACn9C,OAAO,CAAC;EACtD;;EAEA;AACF;AACA;EACEmoC,UAAUA,CAAA,EAAG;IACX,OAAO,IAAI,CAACxtB,eAAe,CAAC7O,OAAO;EACrC;;EAEA;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMjB,GAAGA,CAAA,EAAG;IACV,OAAO,MAAMivC,qBAAqB,CAAC,IAAI,CAACn/B,eAAe,CAAC2vB,WAAW,CAAC,CAAC,EAAE,IAAI,CAACnC,UAAU,CAAC,CAAC,CAAC;EAC3F;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAM2e,OAAOA,CAAA,EAAG;IACd,OAAO,MAAM,IAAI,CAACoE,SAAS,CAAC,MAAM,IAAI,CAACvwC,eAAe,CAACwxB,gBAAgB,CAAC,CAAC,CAAC;EAC5E;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAM+e,SAASA,CAACp/C,OAAO,EAAE;IACvB,OAAO,IAAI,CAAC4+B,QAAQ,CAAC,MAAM,IAAI,CAAC/vB,eAAe,CAAC2R,IAAI,CAAC,WAAW,EAAE,CAAC,MAAM2V,cAAc,CAACn2B,OAAO,CAAC,CAAC,CAAC,CAAC;EACrG;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMq/C,WAAWA,CAAA,EAAG;IAClB,OAAO,MAAM,IAAI,CAACzgB,QAAQ,CAAC,MAAM,IAAI,CAAC/vB,eAAe,CAAC2R,IAAI,CAAC,aAAa,EAAE,EAAE,CAAC,CAAC;EAChF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMszB,SAASA,CAAC/V,OAAO,EAAE;IACvB,MAAM,CAACD,KAAK,EAAEwhB,cAAc,CAAC,GAAG,MAAMzoD,OAAO,CAAC+M,GAAG,CAAC,CAAC,IAAI,CAACiL,eAAe,CAACwxB,gBAAgB,CAAC,CAAC,EAAElK,cAAc,CAAC4H,OAAO,CAAC,CAAC,CAAC;IACrH,OAAO,MAAM,IAAI,CAACwhB,WAAW,CAACzhB,KAAK,EAAEwhB,cAAc,CAAC;EACtD;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMC,WAAWA,CAACzhB,KAAK,EAAEC,OAAO,EAAE;IAChC,MAAM/uB,IAAI,GAAG,MAAMnY,OAAO,CAAC+M,GAAG,CAAC,CAACuyB,cAAc,CAAC2H,KAAK,CAAC,EAAE3H,cAAc,CAAC4H,OAAO,CAAC,CAAC,CAAC;IAChF,OAAO,MAAM,IAAI,CAACa,QAAQ,CAAC,MAAM,IAAI,CAAC/vB,eAAe,CAAC2R,IAAI,CAAC,WAAW,EAAExR,IAAI,CAAC,CAAC;EAChF;EA8IA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAM6tC,kBAAkBA,CAACyB,QAAQ,EAAE9Z,MAAM,EAAE;IACzC,OAAO0Z,aAAa,CAAC,IAAI,CAACK,QAAQ,EAAEtpC,sBAAsB,CAAC,CAAC4nC,kBAAkB,CAACyB,QAAQ,EAAE9Z,MAAM,CAAC;EAClG;EA4HA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAIoX,eAAeA,CAAA,EAAG;IAAA,IAAA4D,gBAAA;IACpB,OAAOtB,aAAa,EAAAsB,gBAAA,GAAC,IAAI,CAACX,SAAS,cAAAW,gBAAA,uBAAdA,gBAAA,CAAgBxJ,KAAK,EAAErhC,iCAAiC,CAAC,CAACqkC,UAAU;EAC3F;;EAEA;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAIn+B,SAASA,CAAA,EAAG;IACd,OAAOqjC,aAAa,CAAC,IAAI,CAACe,iBAAiB,EAAElqC,gCAAgC,CAAC;EAChF;;EAEA;AACF;AACA;;EAEE;AACF;AACA;AACA;AACA;EACE,MAAMwnC,eAAeA,CAAC/X,MAAM,EAAE;IAC5B,OAAO+X,eAAe,CAAC,IAAI,CAAC1tC,eAAe,EAAE21B,MAAM,CAAC;EACtD;;EAEA;AACF;AACA;EACE,MAAM5F,QAAQA,CAACvrC,KAAK,EAAE;IACpB,OAAO,MAAMsiD,kBAAkB,CAAC,IAAI,CAAC9mC,eAAe,CAAC2vB,WAAW,CAAC,CAAC,EAAE,IAAI,CAACnC,UAAU,CAAC,CAAC,EAAElxC,SAAS,CAAC6H,IAAI,CAACK,KAAK,CAAC,CAAC;EAC/G;EACAyrD,mBAAmBA,CAAA,EAAG;IACpB,IAAI7hC,qBAAqB,CAAC,IAAI,CAACpO,eAAe,EAAE,OAAO,CAAC,EAAE;MACxD,OAAO,IAAI+tC,aAAa,CAAC,IAAI,EAAE,IAAI,CAAC/tC,eAAe,CAAC;IACtD;IACA,OAAOxa,SAAS;EAClB;EACA0qD,mBAAmBA,CAAA,EAAG;IACpB,IAAI9hC,qBAAqB,CAAC,IAAI,CAACpO,eAAe,EAAE,eAAe,CAAC,EAAE;MAChE,OAAO,IAAI2tC,aAAa,CAAC,IAAI,EAAE,IAAI,CAAC3tC,eAAe,CAAC;IACtD;IACA,OAAOxa,SAAS;EAClB;EACA2qD,oBAAoBA,CAAA,EAAG;IACrB,IAAI/hC,qBAAqB,CAAC,IAAI,CAACpO,eAAe,EAAE,wBAAwB,CAAC,IAAIoO,qBAAqB,CAAC,IAAI,CAACpO,eAAe,EAAE,wBAAwB,CAAC,IAAIoO,qBAAqB,CAAC,IAAI,CAACpO,eAAe,EAAE,oBAAoB,CAAC,IAAIoO,qBAAqB,CAAC,IAAI,CAACpO,eAAe,EAAE,oBAAoB,CAAC,EAAE;MAC5R,OAAO,IAAI8tC,cAAc,CAAC,IAAI,EAAE,IAAI,CAAC9tC,eAAe,EAAE,IAAI,CAACmb,OAAO,CAAC;IACrE;IACA,OAAO31B,SAAS;EAClB;EACA6qD,4BAA4BA,CAAA,EAAG;IAC7B,IAAIjiC,qBAAqB,CAAC,IAAI,CAACpO,eAAe,EAAE,wBAAwB,CAAC,EAAE;MACzE,OAAO,IAAImuC,sBAAsB,CAAC,IAAI,CAACnuC,eAAe,CAAC;IACzD;IACA,OAAOxa,SAAS;EAClB;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMorD,mBAAmB,CAAC;EAExBzrD,WAAWA,CAAC01C,MAAM,EAAE76B,eAAe,EAAEmb,OAAO,EAAE;IAAAwb,eAAA,sBADhC1vB,0BAA0B,CAACxe,IAAI;IAO7C;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IA1BEkuC,eAAA,aA2BK,eAAetY,wBAAwB,CAAC,OAAOjnB,EAAE,EAAE8jC,SAAS,KAAK;MACpE,MAAM,CAACI,IAAI,EAAErC,eAAe,CAAC,GAAG,MAAMjxC,OAAO,CAAC+M,GAAG,CAAC,CAACkmC,mBAAmB,CAACC,SAAS,EAAE,IAAI,CAAC/f,OAAO,CAAC,EAAEmM,cAAc,CAAClwB,EAAE,CAAC,CAAC,CAAC;MACrH,MAAM+gC,eAAe,GAAG,IAAIp4B,eAAe,CAAC,IAAI,CAACC,eAAe,CAAC;MACjE,MAAMs4B,OAAO,GAAGgD,IAAI,CAACp1C,GAAG,CAAC8R,GAAG,IAAImgC,eAAe,CAACl4B,MAAM,CAAC,QAAQ,EAAE,CAACg5B,eAAe,EAAEjhC,GAAG,CAAC,CAAC,CAAC;MACzF,OAAO05B,WAAW,CAACC,mBAAmB,CAAC;QACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;QACrCvY,MAAM,EAAE,WAAW;QACnB0Y,IAAI,EAAE,CAACm4B,OAAO,CAAC;QACf5qC,KAAK,EAAEwlC,OAAO,IAAI;UAChB,MAAMuB,MAAM,GAAG,IAAI,CAACz0B,eAAe,CAAC68B,SAAS,CAAC,cAAc,EAAE3J,OAAO,CAAC4J,IAAI,CAAC;UAC3E,IAAIrI,MAAM,CAACnyC,MAAM,KAAK,CAAC,IAAImyC,MAAM,CAACnyC,MAAM,GAAG44C,SAAS,CAAC54C,MAAM,EAAE;YAC3D,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;UAChE;UACA,OAAOkyC,MAAM,CAACvuC,GAAG,CAAC6H,CAAC,IAAI;YACrB,MAAMpG,EAAE,GAAGoG,CAAC,CAACoS,IAAI,CAAC0wC,aAAa;YAC/B,OAAO;cACLlpD,EAAE;cACFurC,OAAO;cACPnvC,IAAI,EAAEA,CAAA,KAAM,IAAI,CAAC82C,MAAM,CAAC3qC,GAAG,CAACvI,EAAE;YAChC,CAAC;UACH,CAAC,CAAC;QACJ;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;IAvDA,IAAI,CAACkzC,MAAM,GAAGA,MAAM;IACpB,IAAI,CAAC76B,eAAe,GAAGA,eAAe;IACtC,IAAI,CAACmb,OAAO,GAAGA,OAAO;EACxB;AAqDF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAM21B,6BAA6B,CAAC;EAGlC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE3rD,WAAWA,CAAC01C,MAAM,EAAE76B,eAAe,EAAEmb,OAAO,EAAE;IAAAwb,eAAA,sBAzBhChwB,+BAA+B,CAACle,IAAI;IAiClD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IApBEkuC,eAAA,aAqBK,eAAetY,wBAAwB,CAAC,OAAOsuB,kBAAkB,EAAEj1C,QAAQ,EAAExK,OAAO,KAAK;MAC5F;MACA,MAAMgxB,EAAE,GAAG,MAAM,IAAI,CAACisB,UAAU,CAACyC,mBAAmB,CAACD,kBAAkB,EAAEj1C,QAAQ,EAAExK,OAAO,CAAC;MAC3FgxB,EAAE,CAACkU,QAAQ,CAACc,OAAO,IAAI;QACrB,MAAM6d,KAAK,GAAG,IAAI,CAAC/wC,eAAe,CAAC68B,SAAS,CAAC,eAAe,EAAE3J,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAE4J,IAAI,CAAC;QAC5E,MAAMC,aAAa,GAAGgU,KAAK,CAAC,CAAC,CAAC,CAAC5wC,IAAI,CAAC68B,YAAY;QAChD,MAAMC,WAAW,GAAGF,aAAa,CAAC3d,GAAG,CAAC1nB,QAAQ,CAAC;QAC/C,MAAM8V,OAAO,GAAG,EAAE;QAClB,KAAK,IAAI7lB,EAAE,GAAGo1C,aAAa,EAAEp1C,EAAE,CAACisC,EAAE,CAACqJ,WAAW,CAAC,EAAEt1C,EAAE,GAAGA,EAAE,CAACy3B,GAAG,CAAC,CAAC,CAAC,EAAE;UAC/D5R,OAAO,CAACvlB,IAAI,CAAC;YACXN,EAAE;YACFurC,OAAO;YACPnvC,IAAI,EAAEA,CAAA,KAAM,IAAI,CAAC82C,MAAM,CAAC3qC,GAAG,CAACvI,EAAE;UAChC,CAAC,CAAC;QACJ;QACA,OAAO6lB,OAAO;MAChB,CAAC,CAAC;MACF,OAAO0Q,EAAE;IACX,CAAC,CAAC;IA9CA,IAAI,CAAC2c,MAAM,GAAGA,MAAM;IACpB,IAAI,CAAC76B,eAAe,GAAGA,eAAe;IACtC,IAAI,CAACmb,OAAO,GAAGA,OAAO;IACtB,MAAM/kB,QAAQ,GAAG,IAAIqgC,gBAAgB,CAAC,IAAI,CAACz2B,eAAe,EAAE5F,oBAAoB,EAAE,IAAI,CAAC+gB,OAAO,CAAC;IAC/F,IAAI,CAACgvB,UAAU,GAAG,IAAIzB,mBAAmB,CAAC,IAAI,CAAC1oC,eAAe,EAAE5J,QAAQ,EAAE,IAAI,CAAC+kB,OAAO,CAAC;EACzF;AA0CF;AAEA,eAAe61B,kBAAkBA,CAAChxC,eAAe,EAAEy+B,aAAa,EAAE/mC,QAAQ,EAAE9C,eAAe,EAAE6wC,mBAAmB,EAAE;EAChH,IAAIjW,SAAS,GAAG,CAAC,CAAC;EAClB,MAAMkP,QAAQ,GAAG9pC,eAAe,IAAIxC,oBAAoB;EACxD,MAAM68C,eAAe,GAAG,MAAM9J,mBAAmB,CAACnlC,eAAe,CAAC2vB,WAAW,CAAC,CAAC,EAAE8O,aAAa,EAAEC,QAAQ,CAAC;EACzG,MAAMuS,SAAS,GAAGhC,eAAe,CAAC9vB,GAAG,CAACznB,QAAQ,CAAC;EAC/C,IAAIu5C,SAAS,CAAC1tC,EAAE,CAAC,CAAC,CAAC,EAAE;IACnB,IAAIm7B,QAAQ,KAAKtsC,oBAAoB,EAAE;MACrCo9B,SAAS,GAAG;QACVhrC,KAAK,EAAEysD;MACT,CAAC;IACH,CAAC,MAAM,IAAIvS,QAAQ,KAAKtsC,oBAAoB,IAAIqzC,mBAAmB,EAAE;MACnE,MAAMV,qBAAqB,CAAC/kC,eAAe,EAAE0+B,QAAQ,EAAEuS,SAAS,EAAEv5C,QAAQ,EAAE,CAAC,CAAC;IAChF;EACF;EACA,OAAO83B,SAAS;AAClB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAM0hB,eAAe,CAAC;EAEpB/rD,WAAWA,CAAC01C,MAAM,EAAE76B,eAAe,EAAE;IAAA22B,eAAA,sBADvB7vB,wBAAwB,CAACre,IAAI;IA8B3C;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAnBEkuC,eAAA,aAoBK,eAAetY,wBAAwB,CAAC,OAAOsuB,kBAAkB,EAAEj1C,QAAQ,EAAExK,OAAO,KAAK;MAC5F;MACA,MAAMgxB,EAAE,GAAG,MAAM,IAAI,CAAC0uB,mBAAmB,CAACD,kBAAkB,EAAEj1C,QAAQ,EAAExK,OAAO,CAAC;MAChFgxB,EAAE,CAACkU,QAAQ,CAACc,OAAO,IAAI;QACrB,MAAM6d,KAAK,GAAG,IAAI,CAAC/wC,eAAe,CAAC68B,SAAS,CAAC,eAAe,EAAE3J,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAE4J,IAAI,CAAC;QAC5E,MAAMC,aAAa,GAAGgU,KAAK,CAAC,CAAC,CAAC,CAAC5wC,IAAI,CAAC68B,YAAY;QAChD,MAAMC,WAAW,GAAGF,aAAa,CAAC3d,GAAG,CAAC1nB,QAAQ,CAAC;QAC/C,MAAM8V,OAAO,GAAG,EAAE;QAClB,KAAK,IAAI7lB,EAAE,GAAGo1C,aAAa,EAAEp1C,EAAE,CAACisC,EAAE,CAACqJ,WAAW,CAAC,EAAEt1C,EAAE,GAAGA,EAAE,CAACy3B,GAAG,CAAC,CAAC,CAAC,EAAE;UAC/D5R,OAAO,CAACvlB,IAAI,CAAC;YACXN,EAAE;YACFurC,OAAO;YACPnvC,IAAI,EAAEA,CAAA,KAAM,IAAI,CAAC82C,MAAM,CAAC3qC,GAAG,CAACvI,EAAE;UAChC,CAAC,CAAC;QACJ;QACA,OAAO6lB,OAAO;MAChB,CAAC,CAAC;MACF,OAAO0Q,EAAE;IACX,CAAC,CAAC;IAlEA,IAAI,CAAC2c,MAAM,GAAGA,MAAM;IACpB,IAAI,CAAC76B,eAAe,GAAGA,eAAe;EACxC;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAM4sC,mBAAmBA,CAACD,kBAAkB,EAAEj1C,QAAQ,EAAExK,OAAO,EAAE;IAC/D;IACA,IAAIsiC,SAAS,GAAG,CAAC,CAAC;IAClB,IAAItiC,OAAO,IAAIA,OAAO,CAACuxC,aAAa,EAAE;MACpCjP,SAAS,GAAG,MAAMwhB,kBAAkB,CAAC,IAAI,CAAChxC,eAAe,EAAE9S,OAAO,CAACuxC,aAAa,EAAE/mC,QAAQ,EAAExK,OAAO,CAAC0H,eAAe,EAAE1H,OAAO,CAACu4C,mBAAmB,CAAC;IACnJ;IACA,OAAO/T,WAAW,CAACC,mBAAmB,CAAC;MACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;MACrCvY,MAAM,EAAE,OAAO;MACf0Y,IAAI,EAAE,CAACwsC,kBAAkB,EAAEj1C,QAAQ,CAAC;MACpC83B;IACF,CAAC,CAAC;EACJ;AAyCF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAM2hB,kBAAkB,CAAC;EAGvB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEEhsD,WAAWA,CAAC01C,MAAM,EAAE76B,eAAe,EAAEmb,OAAO,EAAE;IAAAwb,eAAA,sBAlChC3vB,yBAAyB,CAACve,IAAI;IAyC5C;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAzBEkuC,eAAA,mBA0BW,eAAetY,wBAAwB,CAAC,OAAO6c,SAAS,EAAEhuC,OAAO,KAAK;MAC/E,MAAMkvC,eAAe,GAAG,MAAM,IAAI,CAACvB,MAAM,CAACuW,iBAAiB,CAAC,CAAC;MAC7D,MAAMprD,KAAK,GAAG,MAAMi1C,mBAAmB,CAACC,SAAS,EAAE,IAAI,CAAC/f,OAAO,EAAEihB,eAAe,CAACxlC,QAAQ,CAAC,CAAC,EAAE1J,OAAO,CAAC;MACrG;MACA,MAAM0uC,OAAO,GAAGD,mBAAmB,CAAC31C,KAAK,CAAC;MAC1C,OAAO0rC,WAAW,CAACC,mBAAmB,CAAC;QACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;QACrCvY,MAAM,EAAE,UAAU;QAClB0Y,IAAI,EAAE,CAACna,KAAK,CAAC1D,MAAM,EAAEs5C,OAAO,CAACnrC,QAAQ,CAAC,GAAG,CAAC,GAAGmrC,OAAO,MAAA35C,MAAA,CAAM25C,OAAO,MAAG,EAAEp/C,KAAK,CAAC0a,WAAW,CAAC,EAAE,CAAC,CAAC;QAC5FxJ,KAAK,EAAEwlC,OAAO,IAAI;UAChB,MAAM6d,KAAK,GAAG,IAAI,CAAC/wC,eAAe,CAAC68B,SAAS,CAAC,kBAAkB,EAAE3J,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAE4J,IAAI,CAAC;UAC/E,MAAMC,aAAa,GAAGgU,KAAK,CAAC,CAAC,CAAC,CAAC5wC,IAAI,CAAC68B,YAAY;UAChD,MAAMC,WAAW,GAAG8T,KAAK,CAAC,CAAC,CAAC,CAAC5wC,IAAI,CAAC+8B,UAAU;UAC5C,MAAM1vB,OAAO,GAAG,EAAE;UAClB,KAAK,IAAI7lB,EAAE,GAAGo1C,aAAa,EAAEp1C,EAAE,CAACw1C,GAAG,CAACF,WAAW,CAAC,EAAEt1C,EAAE,GAAGA,EAAE,CAACy3B,GAAG,CAAC,CAAC,CAAC,EAAE;YAChE5R,OAAO,CAACvlB,IAAI,CAAC;cACXN,EAAE;cACFurC,OAAO;cACPnvC,IAAI,EAAEA,CAAA,KAAM,IAAI,CAAC82C,MAAM,CAACwW,gBAAgB,CAAC1pD,EAAE;YAC7C,CAAC,CAAC;UACJ;UACA,OAAO6lB,OAAO;QAChB;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;IAxDA,IAAI,CAACqtB,MAAM,GAAGA,MAAM;IACpB,IAAI,CAAC76B,eAAe,GAAGA,eAAe;IACtC,IAAI,CAACmb,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACm2B,QAAQ,GAAG,IAAI,CAACC,sBAAsB,CAAC,CAAC;EAC/C;EAsDA;AACF;AACA;EACEA,sBAAsBA,CAAA,EAAG;IACvB,IAAInjC,qBAAqB,CAAC,IAAI,CAACpO,eAAe,EAAE,kBAAkB,CAAC,EAAE;MACnE,OAAO,IAAI87B,aAAa,CAAC,IAAI,CAAC97B,eAAe,EAAE,IAAI,CAACmb,OAAO,EAAE3U,sBAAsB,CAAC/d,IAAI,EAAE,MAAM,IAAI,CAACoyC,MAAM,CAACuW,iBAAiB,CAAC,CAAC,CAAC;IAClI;IACA,OAAO5rD,SAAS;EAClB;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMgsD,cAAc,CAAC;EAEnBrsD,WAAWA,CAAC01C,MAAM,EAAE76B,eAAe,EAAEmb,OAAO,EAAE;IAAAwb,eAAA,sBADhCzvB,oBAAoB,CAACze,IAAI;IAQvC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAtBEkuC,eAAA,aAuBK,eAAetY,wBAAwB,CAAC,OAAOjnB,EAAE,EAAEhB,QAAQ,KAAK;MACnE,MAAM,CAAC4B,GAAG,EAAEy1C,SAAS,CAAC,GAAG,MAAMzlD,OAAO,CAAC+M,GAAG,CAAC,CAACimC,kBAAkB,CAAC5kC,QAAQ,EAAE,IAAI,CAAC+kB,OAAO,CAAC,EAAEmM,cAAc,CAAClwB,EAAE,CAAC,CAAC,CAAC;MAC5G,OAAOs6B,WAAW,CAACC,mBAAmB,CAAC;QACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;QACrCvY,MAAM,EAAE,QAAQ;QAChB0Y,IAAI,EAAE,CAACstC,SAAS,EAAEz1C,GAAG,CAAC;QACtBtK,KAAK,EAAEwlC,OAAO,IAAI;UAChB,MAAM6d,KAAK,GAAG,IAAI,CAAC/wC,eAAe,CAAC68B,SAAS,CAAC,UAAU,EAAE3J,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAE4J,IAAI,CAAC;UACvE,IAAIiU,KAAK,CAACzuD,MAAM,KAAK,CAAC,EAAE;YACtB,MAAM,IAAIC,KAAK,CAAC,+BAA+B,CAAC;UAClD;UACA,MAAMoF,EAAE,GAAGopD,KAAK,CAAC,CAAC,CAAC,CAAC5wC,IAAI,CAAChI,OAAO;UAChC,OAAO;YACLxQ,EAAE;YACFurC,OAAO;YACPnvC,IAAI,EAAEA,CAAA,KAAM,IAAI,CAAC82C,MAAM,CAAC3qC,GAAG,CAACvI,EAAE;UAChC,CAAC;QACH;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;IAhDA,IAAI,CAACkzC,MAAM,GAAGA,MAAM;IACpB,IAAI,CAAC76B,eAAe,GAAGA,eAAe;IACtC,IAAI,CAACmb,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACn1B,KAAK,GAAG,IAAI,CAACyrD,yBAAyB,CAAC,CAAC;EAC/C;EA8CA;AACF;AACA;EACE,MAAMzD,kBAAkBA,CAAC52C,EAAE,EAAEhB,QAAQ,EAAE;IACrC,OAAO,IAAI,CAACgB,EAAE,CAACgnB,OAAO,CAAC,MAAMkJ,cAAc,CAAClwB,EAAE,CAAC,EAAEhB,QAAQ,CAAC;EAC5D;EACAq7C,yBAAyBA,CAAA,EAAG;IAC1B,IAAIrjC,qBAAqB,CAAC,IAAI,CAACpO,eAAe,EAAE,qBAAqB,CAAC,EAAE;MACtE,OAAO,IAAI4wC,mBAAmB,CAAC,IAAI,CAAC/V,MAAM,EAAE,IAAI,CAAC76B,eAAe,EAAE,IAAI,CAACmb,OAAO,CAAC;IACjF;IACA,OAAO31B,SAAS;EAClB;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMksD,gBAAgB,CAAC;EAErBvsD,WAAWA,CAAC01C,MAAM,EAAE76B,eAAe,EAAE;IAAA22B,eAAA,sBADvBtvB,sBAAsB,CAAC5e,IAAI;IAEvC,IAAI,CAACoyC,MAAM,GAAGA,MAAM;IACpB,IAAI,CAAC76B,eAAe,GAAGA,eAAe;EACxC;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMjL,GAAGA,CAACy3C,aAAa,EAAE;IACvB,MAAMmF,QAAQ,GAAG,MAAM,IAAI,CAACA,QAAQ,CAACnF,aAAa,CAAC;IACnD,OAAO,MAAMxkD,OAAO,CAAC+M,GAAG,CAAC48C,QAAQ,CAACzrD,GAAG,CAACiS,OAAO,IAAI,IAAI,CAAC0iC,MAAM,CAAC3qC,GAAG,CAACiI,OAAO,CAAC9T,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;EACxF;;EAEA;AACF;AACA;AACA;EACE,MAAMstD,QAAQA,CAACnF,aAAa,EAAE;IAC5B,MAAMr7C,OAAO,GAAG,MAAMm2B,cAAc,CAACklB,aAAa,KAAK,MAAM,IAAI,CAACxsC,eAAe,CAACwxB,gBAAgB,CAAC,CAAC,CAAC,CAAC;IACtG,MAAM2a,OAAO,GAAG,MAAM,IAAI,CAACnsC,eAAe,CAAC2R,IAAI,CAAC,WAAW,EAAE,CAACxgB,OAAO,CAAC,CAAC;IACvE,MAAMygD,OAAO,GAAG5sC,KAAK,CAAC7gB,IAAI,CAAC6gB,KAAK,CAACmnC,OAAO,CAACv1C,QAAQ,CAAC,CAAC,CAAC,CAACwU,IAAI,CAAC,CAAC,CAAC;IAC5D,OAAO,MAAMpjB,OAAO,CAAC+M,GAAG,CAAC68C,OAAO,CAAC1rD,GAAG,CAAC0N,CAAC,IAAI,IAAI,CAACoM,eAAe,CAAC2R,IAAI,CAAC,qBAAqB,EAAE,CAACxgB,OAAO,EAAEyC,CAAC,CAAC,CAAC,CAAC,CAAC;EAC5G;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMi+C,gBAAgB,CAAC;EAErB1sD,WAAWA,CAAC01C,MAAM,EAAE76B,eAAe,EAAE;IAAA22B,eAAA,sBADvBrvB,qBAAqB,CAAC7e,IAAI;IAEtC,IAAI,CAACoyC,MAAM,GAAGA,MAAM;IACpB,IAAI,CAAC76B,eAAe,GAAGA,eAAe;EACxC;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMjL,GAAGA,CAACy3C,aAAa,EAAE;IACvB,MAAMmF,QAAQ,GAAG,MAAM,IAAI,CAACA,QAAQ,CAACnF,aAAa,CAAC;IACnD,OAAO,MAAMxkD,OAAO,CAAC+M,GAAG,CAAC48C,QAAQ,CAACzrD,GAAG,CAACiS,OAAO,IAAI,IAAI,CAAC0iC,MAAM,CAAC3qC,GAAG,CAACiI,OAAO,CAAC9T,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;EACxF;;EAEA;AACF;AACA;AACA;EACE,MAAMstD,QAAQA,CAACnF,aAAa,EAAE;IAC5B,MAAMr7C,OAAO,GAAG,MAAMm2B,cAAc,CAACklB,aAAa,KAAK,MAAM,IAAI,CAACxsC,eAAe,CAACwxB,gBAAgB,CAAC,CAAC,CAAC,CAAC;IACtG,OAAO,MAAM,IAAI,CAACxxB,eAAe,CAAC2R,IAAI,CAAC,eAAe,EAAE,CAACxgB,OAAO,CAAC,CAAC;EACpE;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAM2gD,YAAY,CAAC;EAEjB3sD,WAAWA,CAAC01C,MAAM,EAAE76B,eAAe,EAAE;IAAA22B,eAAA,sBADvBpvB,kBAAkB,CAAC9e,IAAI;IAEnC,IAAI,CAACoyC,MAAM,GAAGA,MAAM;IACpB,IAAI,CAAC76B,eAAe,GAAGA,eAAe;IACtC,IAAI,CAAC+xC,KAAK,GAAG,IAAI,CAACC,iBAAiB,CAAC,CAAC;EACvC;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMj9C,GAAGA,CAACk9C,WAAW,EAAE;IACrB,IAAIjV,YAAY,GAAG1gD,SAAS,CAAC6H,IAAI,CAAC,CAAC,CAAC;IACpC,IAAIkqB,WAAW,CAAC,cAAc,EAAE,IAAI,CAACrO,eAAe,CAAC,EAAE;MACrDg9B,YAAY,GAAG,MAAM,IAAI,CAACh9B,eAAe,CAAC2R,IAAI,CAAC,cAAc,EAAE,EAAE,CAAC;IACpE;IACA,MAAMmD,KAAK,GAAGx4B,SAAS,CAAC6H,IAAI,CAAC,CAAA8tD,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEn9B,KAAK,KAAI,CAAC,CAAC,CAACsK,GAAG,CAAC4d,YAAY,CAAC,CAACpmC,QAAQ,CAAC,CAAC;IAClF,MAAMuiC,KAAK,GAAG78C,SAAS,CAAC6H,IAAI,CAAC,CAAA8tD,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAE9Y,KAAK,KAAIn9C,uBAAuB,CAAC,CAAC4a,QAAQ,CAAC,CAAC;IACtF,MAAMs7C,SAAS,GAAG,MAAM,IAAI,CAACrX,MAAM,CAACuW,iBAAiB,CAAC,CAAC;IACvD,MAAMe,KAAK,GAAGt+C,IAAI,CAACtK,GAAG,CAAC2oD,SAAS,CAAC9yB,GAAG,CAAC4d,YAAY,CAAC,CAACpmC,QAAQ,CAAC,CAAC,EAAEke,KAAK,GAAGqkB,KAAK,CAAC;IAC7E,OAAO,MAAMnxC,OAAO,CAAC+M,GAAG,CAAC,CAAC,GAAGiQ,KAAK,CAACmtC,KAAK,GAAGr9B,KAAK,CAAC,CAAC1J,IAAI,CAAC,CAAC,CAAC,CAACllB,GAAG,CAAC0N,CAAC,IAAI,IAAI,CAACinC,MAAM,CAAC3qC,GAAG,CAAC,CAAC4kB,KAAK,GAAGlhB,CAAC,EAAEvP,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;EAC9G;;EAEA;AACF;AACA;AACA;EACE,MAAM+tD,SAASA,CAAA,EAAG;IAChB,IAAIC,UAAU;IACd,IAAIrV,YAAY,GAAG1gD,SAAS,CAAC6H,IAAI,CAAC,CAAC,CAAC;IACpC,IAAIkqB,WAAW,CAAC,cAAc,EAAE,IAAI,CAACrO,eAAe,CAAC,EAAE;MACrDg9B,YAAY,GAAG,MAAM,IAAI,CAACh9B,eAAe,CAAC2R,IAAI,CAAC,cAAc,EAAE,EAAE,CAAC;IACpE;IACA,IAAI;MACF0gC,UAAU,GAAG,MAAM,IAAI,CAACxX,MAAM,CAACyX,kBAAkB,CAAC,CAAC;IACrD,CAAC,CAAC,OAAOvkD,CAAC,EAAE;MACVskD,UAAU,GAAG,MAAM,IAAI,CAACA,UAAU,CAAC,CAAC;IACtC;IACAA,UAAU,GAAGA,UAAU,CAACjzB,GAAG,CAAC4d,YAAY,CAAC;;IAEzC;IACA;IACA,MAAMpb,GAAG,GAAG,CAAC,GAAG,IAAI5c,KAAK,CAACqtC,UAAU,CAACz7C,QAAQ,CAAC,CAAC,CAAC,CAACwU,IAAI,CAAC,CAAC,CAAC;IACxD,MAAMmnC,MAAM,GAAG,MAAMvqD,OAAO,CAAC+M,GAAG,CAAC6sB,GAAG,CAAC17B,GAAG,CAAC0N,CAAC,IAAI,IAAI,CAACinC,MAAM,CAAC2X,OAAO,CAAC5+C,CAAC,CAAC,CAAC6pB,KAAK,CAAC,MAAMhhC,SAAS,CAAC+W,WAAW,CAAC,CAAC,CAAC;IACzG,OAAOouB,GAAG,CAAC17B,GAAG,CAAC0N,CAAC,KAAK;MACnBuE,OAAO,EAAEvE,CAAC;MACVq7B,KAAK,EAAEsjB,MAAM,CAAC3+C,CAAC;IACjB,CAAC,CAAC,CAAC,CAAChG,MAAM,CAACme,CAAC,IAAIA,CAAC,CAACkjB,KAAK,KAAKxyC,SAAS,CAAC+W,WAAW,CAAC;EACpD;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACE,MAAM6+C,UAAUA,CAAA,EAAG;IACjB,OAAO,MAAM,IAAI,CAACxX,MAAM,CAACuW,iBAAiB,CAAC,CAAC;EAC9C;;EAEA;AACF;AACA;AACA;AACA;EACE,MAAMqB,sBAAsBA,CAAA,EAAG;IAC7B,OAAO,MAAM,IAAI,CAACzyC,eAAe,CAAC2R,IAAI,CAAC,aAAa,EAAE,EAAE,CAAC;EAC3D;EACAqgC,iBAAiBA,CAAA,EAAG;IAClB,IAAI5jC,qBAAqB,CAAC,IAAI,CAACpO,eAAe,EAAE,kBAAkB,CAAC,EAAE;MACnE,OAAO,IAAI0xC,gBAAgB,CAAC,IAAI,CAAC7W,MAAM,EAAE,IAAI,CAAC76B,eAAe,CAAC;IAChE,CAAC,MAAM,IAAIoO,qBAAqB,CAAC,IAAI,CAACpO,eAAe,EAAE,kBAAkB,CAAC,EAAE;MAC1E,OAAO,IAAI6xC,gBAAgB,CAAC,IAAI,CAAChX,MAAM,EAAE,IAAI,CAAC76B,eAAe,CAAC;IAChE;IACA,OAAOxa,SAAS;EAClB;AACF;;AAEA;AACA;AACA;AACA,MAAMktD,uBAAuB,GAAG,eAAe,CAAC,MAAMv7C,yBAAyB,CAAC/C,MAAM,CAAC;EACrFu+C,YAAY,EAAEt2D,CAAC,CAACiM,KAAK,CAACjM,CAAC,CAACsH,MAAM,CAAC,CAAC,CAAC;EACjCkU,gBAAgB,EAAE/F,kBAAkB,CAAC/I,OAAO,CAACtM,SAAS,CAAC+W,WAAW,CAAC;EACnEsE,UAAU,EAAExc,iBAAiB,CAACyN,OAAO,CAAC,CAAC,CAAC;EACxC2O,QAAQ,EAAEjU,eAAe,CAACsF,OAAO,CAAC,CAAC;AACrC,CAAC,CAAC,EAAE,CAAC;AAEL,MAAM6pD,gBAAgB,CAAC;EAErBztD,WAAWA,CAAC01C,MAAM,EAAE76B,eAAe,EAAEmb,OAAO,EAAE;IAAAwb,eAAA,sBADhClwB,uBAAuB,CAAChe,IAAI;IAAAkuC,eAAA,8BAuCpB,eAAetY,wBAAwB,CAAC,OAAO6c,SAAS,EAAE2X,IAAI,EAAE3lD,OAAO,KAAK;MAChG;MACA,MAAMkvC,eAAe,GAAG,MAAM,IAAI,CAACvB,MAAM,CAACuW,iBAAiB,CAAC,CAAC;MAC7D,MAAMprD,KAAK,GAAG,MAAMi1C,mBAAmB,CAACC,SAAS,EAAE,IAAI,CAAC/f,OAAO,EAAEihB,eAAe,CAACxlC,QAAQ,CAAC,CAAC,EAAE1J,OAAO,CAAC;MACrG,MAAM0uC,OAAO,GAAGD,mBAAmB,CAAC31C,KAAK,CAAC;MAC1C,OAAO0rC,WAAW,CAACC,mBAAmB,CAAC;QACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;QACrCvY,MAAM,EAAE,UAAU;QAClB0Y,IAAI,EAAE,CAACna,KAAK,CAAC1D,MAAM,EAAEs5C,OAAO,CAACnrC,QAAQ,CAAC,GAAG,CAAC,GAAGmrC,OAAO,MAAA35C,MAAA,CAAM25C,OAAO,MAAG,EAAEiX,IAAI,EAAEr2D,KAAK,CAAC0a,WAAW,CAAC,EAAE,CAAC,CAAC;QAClGxJ,KAAK,EAAEwlC,OAAO,IAAI;UAChB,MAAM6d,KAAK,GAAG,IAAI,CAAC/wC,eAAe,CAAC68B,SAAS,CAAC,kBAAkB,EAAE3J,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAE4J,IAAI,CAAC;UAC/E,MAAMC,aAAa,GAAGgU,KAAK,CAAC,CAAC,CAAC,CAAC5wC,IAAI,CAAC,CAAC,CAAC;UACtC,MAAM88B,WAAW,GAAG8T,KAAK,CAAC,CAAC,CAAC,CAAC5wC,IAAI,CAAC,CAAC,CAAC;UACpC,MAAMqN,OAAO,GAAG,EAAE;UAClB,KAAK,IAAI7lB,EAAE,GAAGo1C,aAAa,EAAEp1C,EAAE,CAACw1C,GAAG,CAACF,WAAW,CAAC,EAAEt1C,EAAE,GAAGA,EAAE,CAACy3B,GAAG,CAAC,CAAC,CAAC,EAAE;YAChE5R,OAAO,CAACvlB,IAAI,CAAC;cACXN,EAAE;cACFurC,OAAO;cACPnvC,IAAI,EAAEA,CAAA,KAAM,IAAI,CAAC82C,MAAM,CAACwW,gBAAgB,CAAC1pD,EAAE;YAC7C,CAAC,CAAC;UACJ;UACA,OAAO6lB,OAAO;QAChB;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;IAAAmpB,eAAA,2CACiC,eAAetY,wBAAwB,CAAC,OAAO2d,WAAW,EAAEd,SAAS,EAAEe,QAAQ,EAAE4W,IAAI,EAAE3lD,OAAO,KAAK;MACpI,IAAI,CAAC+uC,QAAQ,EAAE;QACb,MAAM,IAAI15C,KAAK,CAAC,sBAAsB,CAAC;MACzC;MACA,MAAM25C,eAAe,GAAG,MAAM,IAAI,CAAC/gB,OAAO,CAACogB,WAAW,CAAC,CAACz/C,cAAc,CAAC4R,KAAK,CAACsuC,WAAW,CAAC,CAAC,EAAE;QAC1FR,gBAAgB,EAAE;UAChBC,eAAe,EAAE;QACnB;MACF,CAAC,CAAC;MACF,MAAMU,cAAc,GAAGR,mBAAmB,CAACO,eAAe,CAAC;MAC3D,MAAME,eAAe,GAAG,MAAM,IAAI,CAACvB,MAAM,CAACuW,iBAAiB,CAAC,CAAC;MAC7D,MAAM9V,IAAI,GAAG,MAAM,IAAI,CAACngB,OAAO,CAACogB,WAAW,CAACL,SAAS,CAACh1C,GAAG,CAACovB,CAAC,IAAIx5B,cAAc,CAAC4R,KAAK,CAAC4nB,CAAC,CAAC,CAAC,EAAE;QACvFomB,UAAU,EAAExuC,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEwuC,UAAU;QAC/BF,gBAAgB,EAAE;UAChBC,eAAe,EAAEW,eAAe,CAACxlC,QAAQ,CAAC;QAC5C;MACF,CAAC,CAAC;MACF,MAAMglC,OAAO,GAAGD,mBAAmB,CAACL,IAAI,CAAC;MACzC,MAAMe,SAAS,GAAG,MAAM,IAAI,CAACr8B,eAAe,CAAC2R,IAAI,CAAC,iBAAiB,EAAE,EAAE,CAAC;MACxE,MAAMppB,OAAO,GAAG,MAAM,IAAI,CAACyX,eAAe,CAAC28B,UAAU,CAAC,CAAC;MACvD,MAAML,cAAc,GAAG9/C,KAAK,CAACouC,iBAAiB,CAAC,CAAC,QAAQ,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,EAAE,CAACqR,QAAQ,EAAE1zC,OAAO,EAAE8zC,SAAS,EAAE,IAAI,CAACr8B,eAAe,CAAC7O,OAAO,CAAC,CAAC;MACzJ,MAAMqrC,gBAAgB,GAAG,MAAM,IAAI,CAACx8B,eAAe,CAAC2R,IAAI,CAAC,gBAAgB,EAAE,CAACn1B,KAAK,CAAC0a,WAAW,CAAC0kC,OAAO,CAAC,EAAEU,cAAc,CAAC,CAAC;MACxH,MAAMM,cAAc,GAAGpgD,KAAK,CAACouC,iBAAiB,CAAC,CAAC,OAAO,EAAE,OAAO,EAAE,SAAS,CAAC,EAAE,CAACpuC,KAAK,CAAC0a,WAAW,CAAC0kC,OAAO,CAAC,EAAEU,cAAc,EAAE/zC,OAAO,CAAC,CAAC;MACpI,MAAMxE,IAAI,GAAGvH,KAAK,CAACwvC,eAAe,CAAC/rB,MAAM,CAAC,CAAC,OAAO,EAAE,SAAS,CAAC,EAAE,CAACu8B,gBAAgB,EAAEI,cAAc,CAAC,CAAC;MACnG,OAAOlL,WAAW,CAACC,mBAAmB,CAAC;QACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;QACrCvY,MAAM,EAAE,UAAU;QAClB0Y,IAAI,EAAE,CAACm7B,IAAI,CAACh5C,MAAM,EAAE65C,cAAc,CAAC1rC,QAAQ,CAAC,GAAG,CAAC,GAAG0rC,cAAc,MAAAl6C,MAAA,CAAMk6C,cAAc,MAAG,EAAE0W,IAAI,EAAE9uD,IAAI,CAAC;QACrG2J,KAAK,EAAEwlC,OAAO,IAAI;UAChB,MAAM6d,KAAK,GAAG,IAAI,CAAC/wC,eAAe,CAAC68B,SAAS,CAAC,kBAAkB,EAAE3J,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAE4J,IAAI,CAAC;UAC/E,MAAMC,aAAa,GAAGgU,KAAK,CAAC,CAAC,CAAC,CAAC5wC,IAAI,CAAC,CAAC,CAAC;UACtC,MAAM88B,WAAW,GAAG8T,KAAK,CAAC,CAAC,CAAC,CAAC5wC,IAAI,CAAC,CAAC,CAAC;UACpC,MAAMqN,OAAO,GAAG,EAAE;UAClB,KAAK,IAAI7lB,EAAE,GAAGo1C,aAAa,EAAEp1C,EAAE,CAACw1C,GAAG,CAACF,WAAW,CAAC,EAAEt1C,EAAE,GAAGA,EAAE,CAACy3B,GAAG,CAAC,CAAC,CAAC,EAAE;YAChE5R,OAAO,CAACvlB,IAAI,CAAC;cACXN,EAAE;cACFurC,OAAO;cACPnvC,IAAI,EAAEA,CAAA,KAAM,IAAI,CAAC82C,MAAM,CAACwW,gBAAgB,CAAC1pD,EAAE;YAC7C,CAAC,CAAC;UACJ;UACA,OAAO6lB,OAAO;QAChB;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;IAAAmpB,eAAA,iBACO,eAAetY,wBAAwB,CAAC,OAAO8X,OAAO,EAAE8F,QAAQ,KAAK;MAC5E,IAAI,CAACA,QAAQ,EAAE;QACb,MAAM,IAAI15C,KAAK,CAAC,sBAAsB,CAAC;MACzC;MACA,MAAMgG,OAAO,GAAG,MAAM,IAAI,CAACyX,eAAe,CAAC28B,UAAU,CAAC,CAAC;MACvD,MAAMxuB,GAAG,GAAG3xB,KAAK,CAACouC,iBAAiB,CAAC,CAAC,QAAQ,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,EAAE,CAACqR,QAAQ,EAAE1zC,OAAO,EAAE4tC,OAAO,EAAE,IAAI,CAACn2B,eAAe,CAAC7O,OAAO,CAAC,CAAC;MAC5I;MACA,IAAI;QACF,MAAMisC,YAAY,GAAG,MAAM,IAAI,CAACp9B,eAAe,CAAC4yB,UAAU,CAAC,CAAC,CAACyK,MAAM,CAAClH,OAAO,EAAEhoB,GAAG,CAAC;QACjF;QACA;QACA;QACA,IAAI,CAACivB,YAAY,CAACvtC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAACutC,YAAY,CAAC3sC,QAAQ,CAAC,GAAG,CAAC,EAAE;UAChE,MAAM,IAAIlO,KAAK,CAAC,kBAAkB,CAAC;QACrC;MACF,CAAC,CAAC,OAAOwL,CAAC,EAAE;QACV,MAAM,IAAIxL,KAAK,CAAC,kBAAkB,CAAC;MACrC;MACA,OAAOmvC,WAAW,CAACC,mBAAmB,CAAC;QACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;QACrCvY,MAAM,EAAE,QAAQ;QAChB0Y,IAAI,EAAE,CAACg2B,OAAO,EAAEhoB,GAAG;MACrB,CAAC,CAAC;IACJ,CAAC,CAAC;IAjIA,IAAI,CAAC0sB,MAAM,GAAGA,MAAM;IACpB,IAAI,CAAC76B,eAAe,GAAGA,eAAe;IACtC,IAAI,CAACmb,OAAO,GAAGA,OAAO;EACxB;EACA,MAAM23B,iBAAiBA,CAACD,IAAI,EAAE;IAC5B,MAAME,KAAK,GAAG,MAAM,IAAI,CAAC/yC,eAAe,CAAC2R,IAAI,CAAC,wBAAwB,EAAE,EAAE,CAAC;IAC3E,MAAMqhC,OAAO,GAAGD,KAAK,CAACx/C,IAAI,CAAC0/C,CAAC,IAAIA,CAAC,CAACJ,IAAI,KAAKA,IAAI,CAAC;IAChD,IAAI,CAACG,OAAO,EAAE;MACZ,MAAM,IAAIzwD,KAAK,CAAC,6BAA6B,CAAC;IAChD;IACA,MAAM2wD,IAAI,GAAG,MAAMlrD,OAAO,CAAC+M,GAAG,CAACi+C,OAAO,CAACG,MAAM,CAACjtD,GAAG,CAAC,CAACktD,KAAK,EAAEx/C,CAAC,KAAK;MAC9D,MAAMy/C,WAAW,GAAG,EAAE;MACtB,MAAMzX,OAAO,GAAGoX,OAAO,CAACM,QAAQ,CAAC1/C,CAAC,CAAC;MACnC,KAAK,IAAIwhB,CAAC,GAAGg+B,KAAK,CAACG,gBAAgB,CAAC38C,QAAQ,CAAC,CAAC,EAAEwe,CAAC,GAAGg+B,KAAK,CAACI,iBAAiB,CAAC58C,QAAQ,CAAC,CAAC,EAAEwe,CAAC,EAAE,EAAE;QAC3F,MAAMpd,GAAG,GAAG4jC,OAAO,CAACnrC,QAAQ,CAAC,GAAG,CAAC,MAAAxO,MAAA,CAAM25C,OAAO,EAAA35C,MAAA,CAAGmzB,CAAC,OAAAnzB,MAAA,CAAQ25C,OAAO,OAAA35C,MAAA,CAAImzB,CAAC,CAAE;QACxE,MAAMhf,QAAQ,GAAG,IAAI,CAAC+kB,OAAO,CAACC,YAAY,CAACpjB,GAAG,CAAC;QAC/Cq7C,WAAW,CAACprD,IAAI,CAACmO,QAAQ,CAAC;MAC5B;MACA,OAAOi9C,WAAW;IACpB,CAAC,CAAC,CAACj3B,IAAI,CAAC,CAAC,CAAC;IACV,OAAO82B,IAAI;EACb;EACA,MAAMO,eAAeA,CAACZ,IAAI,EAAE;IAC1B,MAAMa,QAAQ,GAAG,MAAM,IAAI,CAAC1zC,eAAe,CAAC2R,IAAI,CAAC,oBAAoB,EAAE,EAAE,CAAC;IAC1E,IAAI+hC,QAAQ,CAACxN,EAAE,CAAC,CAAC,CAAC,EAAE;MAClB,OAAO,EAAE;IACX;IACA,MAAMiN,MAAM,GAAG,MAAM,IAAI,CAACnzC,eAAe,CAAC2R,IAAI,CAAC,iBAAiB,EAAE,CAACkhC,IAAI,EAAE,CAAC,EAAEa,QAAQ,CAAC,CAAC;IACtF,MAAMR,IAAI,GAAG,MAAMlrD,OAAO,CAAC+M,GAAG,CAACo+C,MAAM,CAACjtD,GAAG,CAACktD,KAAK,IAAI;MACjD,MAAMC,WAAW,GAAG,EAAE;MACtB,KAAK,IAAIz/C,CAAC,GAAGw/C,KAAK,CAACG,gBAAgB,CAAC38C,QAAQ,CAAC,CAAC,EAAEhD,CAAC,GAAGw/C,KAAK,CAACI,iBAAiB,CAAC58C,QAAQ,CAAC,CAAC,EAAEhD,CAAC,EAAE,EAAE;QAC3Fy/C,WAAW,CAACprD,IAAI,CAAC,IAAI,CAAC4yC,MAAM,CAAC3qC,GAAG,CAAC0D,CAAC,CAAC,CAAC;MACtC;MACA,OAAOy/C,WAAW;IACpB,CAAC,CAAC,CAACj3B,IAAI,CAAC,CAAC,CAAC;IACV,OAAO82B,IAAI;EACb;EA8FA,MAAMxE,QAAQA,CAACiF,aAAa,EAAE;IAC5B,MAAM,CAACzsD,OAAO,CAAC,GAAG,MAAM,IAAI,CAACynD,aAAa,CAAC,CAACgF,aAAa,CAAC,CAAC;IAC3D,OAAOzsD,OAAO;EAChB;EACA,MAAMynD,aAAaA,CAACC,cAAc,EAAE;IAClC,MAAMgF,cAAc,GAAG,MAAM5rD,OAAO,CAAC+M,GAAG,CAAC65C,cAAc,CAAC1oD,GAAG,CAACgB,OAAO,IAAIwrD,uBAAuB,CAAC19C,UAAU,CAAC9N,OAAO,CAAC,CAAC,CAAC;IACpH,MAAMqB,OAAO,GAAG,MAAM,IAAI,CAACyX,eAAe,CAAC28B,UAAU,CAAC,CAAC;IACvD,MAAMhsC,MAAM,GAAG,IAAI,CAACqP,eAAe,CAAC0vB,SAAS,CAAC,CAAC;IAC/C9yC,SAAS,CAAC+T,MAAM,EAAE,qBAAqB,CAAC;IACxC,OAAO,MAAM3I,OAAO,CAAC+M,GAAG,CAAC6+C,cAAc,CAAC1tD,GAAG,CAAC,MAAMgB,OAAO,IAAI;MAC3D,MAAM8kB,SAAS,GAAG,MAAM,IAAI,CAAChM,eAAe,CAACkkC,aAAa,CAACvzC,MAAM,EAAE;QACjElI,IAAI,EAAE,iBAAiB;QACvBpG,OAAO,EAAE,GAAG;QACZkG,OAAO;QACPqmC,iBAAiB,EAAE,IAAI,CAAC5uB,eAAe,CAAC7O;MAC1C,CAAC,EAAE;QACDyH,cAAc,EAAEA;MAClB,CAAC,EAAE,MAAM,IAAI,CAAC01C,0BAA0B,CAACpnD,OAAO,CAAC,CAAC;MAClD,OAAO;QACLA,OAAO;QACP8kB,SAAS,EAAEA,SAAS,CAAC3nB,QAAQ,CAAC;MAChC,CAAC;IACH,CAAC,CAAC,CAAC;EACL;EACA,MAAM+0C,MAAMA,CAACgV,aAAa,EAAE;IAC1B,MAAMhnD,OAAO,GAAG,MAAM,IAAI,CAACknD,0BAA0B,CAACF,aAAa,CAAClnD,OAAO,CAAC;IAC5E,MAAMunD,YAAY,GAAG,MAAM,IAAI,CAACzuC,eAAe,CAAC2R,IAAI,CAAC,QAAQ,EAAE,CAACvqB,OAAO,EAAEgnD,aAAa,CAACpiC,SAAS,CAAC,CAAC;IAClG,OAAOyiC,YAAY,CAAC,CAAC,CAAC;EACxB;EACA,MAAMoF,kBAAkBA,CAACzF,aAAa,EAAE;IACtC,MAAMhnD,OAAO,GAAG,MAAM,IAAI,CAACknD,0BAA0B,CAACF,aAAa,CAAClnD,OAAO,CAAC;IAC5E,MAAM4sD,oBAAoB,GAAG,MAAM3O,mBAAmB,CAAC,IAAI,CAACnlC,eAAe,CAAC2vB,WAAW,CAAC,CAAC,EAAEye,aAAa,CAAClnD,OAAO,CAACyN,KAAK,EAAEy5C,aAAa,CAAClnD,OAAO,CAAC0N,eAAe,CAAC;IAC9J,MAAM46B,SAAS,GAAG,MAAM,IAAI,CAACxvB,eAAe,CAAC8iC,gBAAgB,CAAC,CAAC;IAC/D,MAAMoL,iBAAiB,CAAC,IAAI,CAACluC,eAAe,EAAE8zC,oBAAoB,EAAE1F,aAAa,CAAClnD,OAAO,CAAC0N,eAAe,EAAE46B,SAAS,CAAC;IACrH,MAAM0D,OAAO,GAAG,MAAM,IAAI,CAAClzB,eAAe,CAACwiB,eAAe,CAAC,oBAAoB,EAAE,CAACp7B,OAAO,EAAEgnD,aAAa,CAACpiC,SAAS,CAAC,EAAEwjB,SAAS,CAAC;IAC/H,MAAMuhB,KAAK,GAAG,IAAI,CAAC/wC,eAAe,CAAC68B,SAAS,CAAC,eAAe,EAAE3J,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAE4J,IAAI,CAAC;IAC5E,MAAMC,aAAa,GAAGgU,KAAK,CAAC,CAAC,CAAC,CAAC5wC,IAAI,CAAC68B,YAAY;IAChD,MAAMC,WAAW,GAAGF,aAAa,CAAC3d,GAAG,CAAC2xB,KAAK,CAAC,CAAC,CAAC,CAAC5wC,IAAI,CAAC4zC,eAAe,CAAC;IACpE,MAAMvmC,OAAO,GAAG,EAAE;IAClB,KAAK,IAAI7lB,EAAE,GAAGo1C,aAAa,EAAEp1C,EAAE,CAACisC,EAAE,CAACqJ,WAAW,CAAC,EAAEt1C,EAAE,GAAGA,EAAE,CAACy3B,GAAG,CAAC,CAAC,CAAC,EAAE;MAC/D5R,OAAO,CAACvlB,IAAI,CAAC;QACXN,EAAE;QACFurC,OAAO;QACPnvC,IAAI,EAAEA,CAAA,KAAM,IAAI,CAAC82C,MAAM,CAAC3qC,GAAG,CAACvI,EAAE;MAChC,CAAC,CAAC;IACJ;IACA,OAAO6lB,OAAO;EAChB;EACA,MAAM8gC,0BAA0BA,CAACpnD,OAAO,EAAE;IACxC,MAAM4sD,oBAAoB,GAAG,MAAM3O,mBAAmB,CAAC,IAAI,CAACnlC,eAAe,CAAC2vB,WAAW,CAAC,CAAC,EAAEzoC,OAAO,CAACyN,KAAK,EAAEzN,OAAO,CAAC0N,eAAe,CAAC;IAClI,MAAM7Q,IAAI,GAAGvH,KAAK,CAACwvC,eAAe,CAAC/rB,MAAM,CAAC,CAAC,UAAU,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,EAAE,CAAC/Y,OAAO,CAACyrD,YAAY,EAAEzrD,OAAO,CAACkQ,EAAE,EAAElQ,OAAO,CAAC2Q,gBAAgB,EAAE3Q,OAAO,CAAC4Q,UAAU,EAAE5Q,OAAO,CAACsQ,oBAAoB,EAAEtQ,OAAO,CAACwQ,QAAQ,EAAEo8C,oBAAoB,EAAE5sD,OAAO,CAAC0N,eAAe,CAAC,CAAC;IACrT,OAAO;MACL2C,GAAG,EAAErQ,OAAO,CAACqQ,GAAG;MAChB63C,sBAAsB,EAAEloD,OAAO,CAACmQ,aAAa;MAC7C83C,oBAAoB,EAAEjoD,OAAO,CAACoQ,WAAW;MACzCvT;IACF,CAAC;EACH;AACF;AAEA,MAAMiwD,cAAc,CAAC;EAEnB7uD,WAAWA,CAAC6a,eAAe,EAAE;IAAA22B,eAAA,sBADfpwB,oBAAoB,CAAC9d,IAAI;IAKvC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAZEkuC,eAAA,gBAaQ,eAAetY,wBAAwB,CAAC,MAAMlmB,OAAO,IAAI;MAC/D,OAAOu5B,WAAW,CAACC,mBAAmB,CAAC;QACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;QACrCvY,MAAM,EAAE,MAAM;QACd0Y,IAAI,EAAE,CAAChI,OAAO;MAChB,CAAC,CAAC;IACJ,CAAC,CAAC;IAtBA,IAAI,CAAC6H,eAAe,GAAGA,eAAe;EACxC;AAsBF;AAEA,SAASi0C,KAAKA,CAACte,MAAM,EAAE;EACrB,OAAOn5C,KAAK,CAAC03D,UAAU,CAACl5D,YAAY,CAAC0S,KAAK,CAACioC,MAAM,CAAC,CAAC;AACrD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMwe,mBAAmB,CAAC;EAExBhvD,WAAWA,CAAC01C,MAAM,EAAE76B,eAAe,EAAE;IAAA22B,eAAA,sBADvB5vB,sBAAsB,CAACte,IAAI;IAMzC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAnBEkuC,eAAA,aAoBK,eAAetY,wBAAwB,CAAC,OAAOsuB,kBAAkB,EAAEj1C,QAAQ,EAAExK,OAAO,KAAK;MAAA,IAAAknD,qBAAA;MAC5F;MACA,MAAM7mB,aAAa,GAAG,QAAA6mB,qBAAA,GAAM,IAAI,CAACp0C,eAAe,CAAC0vB,SAAS,CAAC,CAAC,cAAA0kB,qBAAA,uBAAhCA,qBAAA,CAAkC5mB,UAAU,CAAC,CAAC;MAC1E,IAAImf,kBAAkB,KAAKpf,aAAa,EAAE;QACxC,MAAM,IAAIhrC,KAAK,CAAC,oEAAoE,CAAC;MACvF;MACA,IAAI2K,OAAO,aAAPA,OAAO,eAAPA,OAAO,CAAEuxC,aAAa,EAAE;QAC1B,MAAM,IAAIl8C,KAAK,CAAC,qFAAqF,CAAC;MACxG;MACA,MAAM8xD,WAAW,GAAG,MAAM,IAAI,CAACC,cAAc,CAAC,CAAC;MAC/C,MAAM3/C,KAAK,GAAG0/C,WAAW,CAACE,eAAe;MACzC,MAAMC,OAAO,GAAGP,KAAK,CAAC,UAAU,CAAC;MACjC,MAAM/O,UAAU,GAAG5oD,SAAS,CAAC6H,IAAI,CAACwQ,KAAK,CAAC,CAACyqB,GAAG,CAACo1B,OAAO,CAAC,CAACr1B,GAAG,CAACznB,QAAQ,CAAC;MACnE,MAAMwmB,EAAE,GAAGwT,WAAW,CAACC,mBAAmB,CAAC;QACzC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;QACrCvY,MAAM,EAAE,UAAU;QAClB0Y,IAAI,EAAE,CAACzI,QAAQ,CAAC;QAChB83B,SAAS,EAAE;UACThrC,KAAK,EAAE0gD;QACT;MACF,CAAC,CAAC;MACFhnB,EAAE,CAACkU,QAAQ,CAACc,OAAO,IAAI;QACrB,MAAM6d,KAAK,GAAG,IAAI,CAAC/wC,eAAe,CAAC68B,SAAS,CAAC,MAAM,EAAE3J,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAE4J,IAAI,CAAC;QACnE,MAAMC,aAAa,GAAGgU,KAAK,CAAC,CAAC,CAAC,CAAC5wC,IAAI,CAACs0C,qBAAqB;QACzD,MAAMxX,WAAW,GAAGF,aAAa,CAAC3d,GAAG,CAAC1nB,QAAQ,CAAC;QAC/C,MAAM8V,OAAO,GAAG,EAAE;QAClB,KAAK,IAAI7lB,EAAE,GAAGo1C,aAAa,EAAEp1C,EAAE,CAACisC,EAAE,CAACqJ,WAAW,CAAC,EAAEt1C,EAAE,GAAGA,EAAE,CAACy3B,GAAG,CAAC,CAAC,CAAC,EAAE;UAC/D5R,OAAO,CAACvlB,IAAI,CAAC;YACXN,EAAE;YACFurC,OAAO;YACPnvC,IAAI,EAAEA,CAAA,KAAM,IAAI,CAAC82C,MAAM,CAAC3qC,GAAG,CAACvI,EAAE;UAChC,CAAC,CAAC;QACJ;QACA,OAAO6lB,OAAO;MAChB,CAAC,CAAC;MACF,OAAO0Q,EAAE;IACX,CAAC,CAAC;IA5DA,IAAI,CAAC2c,MAAM,GAAGA,MAAM;IACpB,IAAI,CAAC76B,eAAe,GAAGA,eAAe;EACxC;EA2DA,MAAMs0C,cAAcA,CAAA,EAAG;IACrB,OAAO,IAAI,CAACt0C,eAAe,CAAC2R,IAAI,CAAC,aAAa,EAAE,EAAE,CAAC;EACrD;AACF;AAEA,MAAM+iC,iBAAiB,CAAC;EAEtBvvD,WAAWA,CAAC6a,eAAe,EAAE;IAAA22B,eAAA,sBADflvB,wBAAwB,CAAChf,IAAI;IAK3C;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAZEkuC,eAAA,iBAaS,eAAetY,wBAAwB,CAAC,MAAMlmB,OAAO,IAAI;MAChE,OAAOu5B,WAAW,CAACC,mBAAmB,CAAC;QACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;QACrCvY,MAAM,EAAE,QAAQ;QAChB0Y,IAAI,EAAE,CAAChI,OAAO;MAChB,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAZEw+B,eAAA,iBAaS,eAAetY,wBAAwB,CAAC,MAAMlmB,OAAO,IAAI;MAChE,OAAOu5B,WAAW,CAACC,mBAAmB,CAAC;QACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;QACrCvY,MAAM,EAAE,QAAQ;QAChB0Y,IAAI,EAAE,CAAChI,OAAO;MAChB,CAAC,CAAC;IACJ,CAAC,CAAC;IA3CA,IAAI,CAAC6H,eAAe,GAAGA,eAAe;EACxC;AA2CF;AAEA,MAAM20C,uBAAuB,CAAC;EAE5BxvD,WAAWA,CAAC6a,eAAe,EAAEmb,OAAO,EAAE;IAAAwb,eAAA,sBADxBjvB,8BAA8B,CAACjf,IAAI;IAMjD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAdEkuC,eAAA,iBAeS,eAAetY,wBAAwB,CAAC,OAAOlmB,OAAO,EAAE/B,QAAQ,KAAK;MAC5E,MAAM4B,GAAG,GAAG,MAAMgjC,kBAAkB,CAAC5kC,QAAQ,EAAE,IAAI,CAAC+kB,OAAO,CAAC;MAC5D,OAAOuW,WAAW,CAACC,mBAAmB,CAAC;QACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;QACrCvY,MAAM,EAAE,aAAa;QACrB0Y,IAAI,EAAE,CAAChI,OAAO,EAAEH,GAAG;MACrB,CAAC,CAAC;IACJ,CAAC,CAAC;IA1BA,IAAI,CAACgI,eAAe,GAAGA,eAAe;IACtC,IAAI,CAACmb,OAAO,GAAGA,OAAO;EACxB;AAyBF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMy5B,oBAAoB,CAAC;EAEzBzvD,WAAWA,CAAC6a,eAAe,EAAEmb,OAAO,EAAE;IAAAwb,eAAA,sBADxBnvB,2BAA2B,CAAC/e,IAAI;IAiC9C;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAtBEkuC,eAAA,cAuBM,eAAetY,wBAAwB,CAAC,MAAMjoB,QAAQ,IAAI;MAC9D,MAAMghC,cAAc,GAAGl7C,aAAa,CAACwR,KAAK,CAAC0I,QAAQ,CAAC;MACpD;MACAghC,cAAc,CAAC3sC,WAAW,GAAG,IAAI,CAACoqD,kBAAkB,CAACzd,cAAc,CAAC3sC,WAAW,CAAC;;MAEhF;MACA,MAAMzE,KAAK,GAAG,EAAE;MAChB,IAAIhJ,cAAc,CAACo6C,cAAc,CAACt+B,KAAK,CAAC,EAAE;QACxC9S,KAAK,CAACiC,IAAI,CAAC,IAAI,CAACkzB,OAAO,CAACkc,MAAM,CAACD,cAAc,CAACt+B,KAAK,CAAC,CAAC;MACvD,CAAC,MAAM,IAAI,OAAOs+B,cAAc,CAACt+B,KAAK,KAAK,QAAQ,EAAE;QACnD9S,KAAK,CAACiC,IAAI,CAACD,OAAO,CAACT,OAAO,CAAC6vC,cAAc,CAACt+B,KAAK,CAAC,CAAC;MACnD,CAAC,MAAM;QACL9S,KAAK,CAACiC,IAAI,CAACD,OAAO,CAACT,OAAO,CAAC/B,SAAS,CAAC,CAAC;MACxC;MACA,IAAIxI,cAAc,CAACo6C,cAAc,CAAC0d,aAAa,CAAC,EAAE;QAChD9uD,KAAK,CAACiC,IAAI,CAAC,IAAI,CAACkzB,OAAO,CAACkc,MAAM,CAACD,cAAc,CAAC0d,aAAa,CAAC,CAAC;MAC/D,CAAC,MAAM,IAAI,OAAO1d,cAAc,CAAC0d,aAAa,KAAK,QAAQ,EAAE;QAC3D9uD,KAAK,CAACiC,IAAI,CAACD,OAAO,CAACT,OAAO,CAAC6vC,cAAc,CAAC0d,aAAa,CAAC,CAAC;MAC3D,CAAC,MAAM;QACL9uD,KAAK,CAACiC,IAAI,CAACD,OAAO,CAACT,OAAO,CAAC/B,SAAS,CAAC,CAAC;MACxC;MACA,MAAM,CAACuvD,QAAQ,EAAEC,YAAY,CAAC,GAAG,MAAMhtD,OAAO,CAAC+M,GAAG,CAAC/O,KAAK,CAAC;MACzD,OAAO0rC,WAAW,CAACC,mBAAmB,CAAC;QACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;QACrCvY,MAAM,EAAE,mBAAmB;QAC3B0Y,IAAI,EAAE,CAAC;UACL1X,IAAI,KAAAxG,MAAA,CAAKm1C,cAAc,CAAC3uC,IAAI,IAAI,EAAE,CAAE;UACpCgC,WAAW,EAAE2sC,cAAc,CAAC3sC,WAAW,IAAI,EAAE;UAC7CwqD,QAAQ,EAAEF,QAAQ,IAAI,EAAE;UACxBG,YAAY,EAAEF,YAAY,IAAI;QAChC,CAAC;MACH,CAAC,CAAC;IACJ,CAAC,CAAC;IAtFA,IAAI,CAACh1C,eAAe,GAAGA,eAAe;IACtC,IAAI,CAACmb,OAAO,GAAGA,OAAO;EACxB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMjrB,GAAGA,CAAA,EAAG;IACV,MAAMkG,QAAQ,GAAG,MAAM,IAAI,CAAC4J,eAAe,CAAC2R,IAAI,CAAC,gBAAgB,EAAE,EAAE,CAAC;IACtE,IAAIvb,QAAQ,CAACsW,KAAK,CAACloB,KAAK,IAAIA,KAAK,KAAK,EAAE,CAAC,EAAE;MACzC,OAAOgB,SAAS;IAClB;IACA,OAAO;MACLiD,IAAI,EAAE2N,QAAQ,CAAC3N,IAAI;MACnBgC,WAAW,EAAE2L,QAAQ,CAAC3L,WAAW;MACjCqO,KAAK,EAAE1C,QAAQ,CAAC6+C,QAAQ;MACxBH,aAAa,EAAE1+C,QAAQ,CAAC8+C;IAC1B,CAAC;EACH;EA0DAL,kBAAkBA,CAACxvB,GAAG,EAAE;IACtB,IAAI,CAACA,GAAG,EAAE;MACR,OAAOA,GAAG;IACZ;IACA,MAAM8vB,SAAS,GAAGzuD,IAAI,CAACC,SAAS,CAAC0+B,GAAG,CAAC;IACrC,OAAO8vB,SAAS,CAAC/lD,KAAK,CAAC,CAAC,EAAE+lD,SAAS,CAAC7yD,MAAM,GAAG,CAAC,CAAC;EACjD;AACF;;AAEA;AACA;AACA;AACA;AACA,MAAM8yD,mCAAmC,CAAC;EAExCjwD,WAAWA,CAAC6a,eAAe,EAAEmb,OAAO,EAAE;IAAAwb,eAAA,sBADxBxvB,iCAAiC,CAAC1e,IAAI;IAMpD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAjBEkuC,eAAA,eAkBO,eAAetY,wBAAwB,CAAC,MAAM+vB,aAAa,IAAI;MACpE,MAAMC,WAAW,GAAGD,aAAa,CAAClnD,OAAO;MACzC,MAAM8kB,SAAS,GAAGoiC,aAAa,CAACpiC,SAAS;MACzC,MAAMwjB,SAAS,GAAG,MAAM,IAAI,CAACxvB,eAAe,CAAC8iC,gBAAgB,CAAC,CAAC;MAC/D,MAAMp1C,KAAK,GAAGwlC,OAAO,IAAI;QACvB,MAAM+f,CAAC,GAAG,IAAI,CAACjzC,eAAe,CAAC68B,SAAS,CAAC,2BAA2B,EAAE3J,OAAO,CAAC4J,IAAI,CAAC;QACnF,IAAImW,CAAC,CAAC3wD,MAAM,KAAK,CAAC,EAAE;UAClB,MAAM,IAAIC,KAAK,CAAC,kCAAkC,CAAC;QACrD;QACA,MAAMoF,EAAE,GAAGsrD,CAAC,CAAC,CAAC,CAAC,CAAC9yC,IAAI,CAAC0wC,aAAa;QAClC,OAAO;UACLlpD,EAAE;UACFurC;QACF,CAAC;MACH,CAAC;MACD,IAAI,MAAM,IAAI,CAACmiB,mBAAmB,CAAC,CAAC,EAAE;QACpC,MAAMjuD,OAAO,GAAG,MAAM,IAAI,CAACkuD,gCAAgC,CAACjH,WAAW,CAAC;QACxE,MAAM15C,KAAK,GAAGvN,OAAO,CAACuN,KAAK;;QAE3B;QACA,MAAMu5C,iBAAiB,CAAC,IAAI,CAACluC,eAAe,EAAErL,KAAK,EAAE05C,WAAW,CAACz5C,eAAe,EAAE46B,SAAS,CAAC;QAC5F,OAAOkC,WAAW,CAACC,mBAAmB,CAAC;UACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;UACrCvY,MAAM,EAAE,mBAAmB;UAC3B0Y,IAAI,EAAE,CAAC/Y,OAAO,EAAE4kB,SAAS,CAAC;UAC1BwjB,SAAS;UACT9hC;QACF,CAAC,CAAC;MACJ,CAAC,MAAM;QACL,MAAMtG,OAAO,GAAG,MAAM,IAAI,CAACknD,0BAA0B,CAACD,WAAW,CAAC;QAClE,MAAM15C,KAAK,GAAGvN,OAAO,CAACq3C,aAAa,CAACtf,GAAG,CAAC/3B,OAAO,CAACsQ,QAAQ,CAAC;;QAEzD;QACA,MAAMw2C,iBAAiB,CAAC,IAAI,CAACluC,eAAe,EAAErL,KAAK,EAAE05C,WAAW,CAACz5C,eAAe,EAAE46B,SAAS,CAAC;QAC5F,OAAOkC,WAAW,CAACC,mBAAmB,CAAC;UACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;UACrCvY,MAAM,EAAE,mBAAmB;UAC3B0Y,IAAI,EAAE,CAAC/Y,OAAO,EAAE4kB,SAAS,CAAC;UAC1BwjB,SAAS;UACT9hC;QACF,CAAC,CAAC;MACJ;IACF,CAAC,CAAC;IAEF;AACF;AACA;AACA;AACA;AACA;IALEipC,eAAA,oBAMY,eAAetY,wBAAwB,CAAC,MAAMkwB,cAAc,IAAI;MAC1E,MAAM8G,mBAAmB,GAAG,MAAM,IAAI,CAACA,mBAAmB,CAAC,CAAC;MAC5D,MAAM7G,gBAAgB,GAAG,CAAC,MAAMxmD,OAAO,CAAC+M,GAAG,CAACw5C,cAAc,CAACroD,GAAG,CAAC+7B,CAAC,IAAIozB,mBAAmB,GAAG,IAAI,CAACC,gCAAgC,CAACrzB,CAAC,CAAC/6B,OAAO,CAAC,GAAG,IAAI,CAAConD,0BAA0B,CAACrsB,CAAC,CAAC/6B,OAAO,CAAC,CAAC,CAAC,EAAEhB,GAAG,CAAC,CAACkB,OAAO,EAAEH,KAAK,KAAK;QACjN,MAAMg7B,CAAC,GAAGssB,cAAc,CAACtnD,KAAK,CAAC;QAC/B,MAAM+kB,SAAS,GAAGiW,CAAC,CAACjW,SAAS;QAC7B,MAAMrX,KAAK,GAAGstB,CAAC,CAAC/6B,OAAO,CAACyN,KAAK;QAC7B,IAAIrY,SAAS,CAAC6H,IAAI,CAACwQ,KAAK,CAAC,CAAC4O,EAAE,CAAC,CAAC,CAAC,EAAE;UAC/B,MAAM,IAAIhhB,KAAK,CAAC,uEAAuE,CAAC;QAC1F;QACA,OAAO;UACL6E,OAAO;UACP4kB;QACF,CAAC;MACH,CAAC,CAAC;MACF,MAAMmsB,eAAe,GAAG,IAAIp4B,eAAe,CAAC,IAAI,CAACC,eAAe,CAAC;MACjE,MAAMs4B,OAAO,GAAGkW,gBAAgB,CAACtoD,GAAG,CAAC0lC,CAAC,IAAI;QACxC,IAAIypB,mBAAmB,EAAE;UACvB,OAAOld,eAAe,CAACl4B,MAAM,CAAC,mBAAmB,EAAE,CAAC2rB,CAAC,CAACxkC,OAAO,EAAEwkC,CAAC,CAAC5f,SAAS,CAAC,CAAC;QAC9E,CAAC,MAAM;UACL,OAAOmsB,eAAe,CAACl4B,MAAM,CAAC,mBAAmB,EAAE,CAAC2rB,CAAC,CAACxkC,OAAO,EAAEwkC,CAAC,CAAC5f,SAAS,CAAC,CAAC;QAC9E;MACF,CAAC,CAAC;MACF,IAAIqC,WAAW,CAAC,WAAW,EAAE,IAAI,CAACrO,eAAe,CAAC,EAAE;QAClD,OAAO0xB,WAAW,CAACC,mBAAmB,CAAC;UACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;UACrCvY,MAAM,EAAE,WAAW;UACnB0Y,IAAI,EAAE,CAACm4B,OAAO,CAAC;UACf5qC,KAAK,EAAEwlC,OAAO,IAAI;YAChB,MAAMuB,MAAM,GAAG,IAAI,CAACz0B,eAAe,CAAC68B,SAAS,CAAC,2BAA2B,EAAE3J,OAAO,CAAC4J,IAAI,CAAC;YACxF,IAAIrI,MAAM,CAACnyC,MAAM,KAAK,CAAC,EAAE;cACvB,MAAM,IAAIC,KAAK,CAAC,kCAAkC,CAAC;YACrD;YACA,OAAOkyC,MAAM,CAACvuC,GAAG,CAACqwB,GAAG,KAAK;cACxB5uB,EAAE,EAAE4uB,GAAG,CAACpW,IAAI,CAAC0wC,aAAa;cAC1B3d;YACF,CAAC,CAAC,CAAC;UACL;QACF,CAAC,CAAC;MACJ,CAAC,MAAM;QACL,MAAM,IAAI3wC,KAAK,CAAC,2CAA2C,CAAC;MAC9D;IACF,CAAC,CAAC;IAjHA,IAAI,CAACyd,eAAe,GAAGA,eAAe;IACtC,IAAI,CAACmb,OAAO,GAAGA,OAAO;EACxB;EAiHA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMie,MAAMA,CAACgV,aAAa,EAAE;IAC1B,MAAMiH,mBAAmB,GAAG,MAAM,IAAI,CAACA,mBAAmB,CAAC,CAAC;IAC5D,MAAMhH,WAAW,GAAGD,aAAa,CAAClnD,OAAO;IACzC,MAAM8kB,SAAS,GAAGoiC,aAAa,CAACpiC,SAAS;IACzC,IAAI5kB,OAAO;IACX,IAAIqnD,YAAY;IAChB,IAAI4G,mBAAmB,EAAE;MACvBjuD,OAAO,GAAG,MAAM,IAAI,CAACkuD,gCAAgC,CAACjH,WAAW,CAAC;MAClEI,YAAY,GAAG,MAAM,IAAI,CAACzuC,eAAe,CAAC2R,IAAI,CAAC,QAAQ,EAAE,CAACvqB,OAAO,EAAE4kB,SAAS,CAAC,CAAC;IAChF,CAAC,MAAM;MACL5kB,OAAO,GAAG,MAAM,IAAI,CAACknD,0BAA0B,CAACD,WAAW,CAAC;MAC5DI,YAAY,GAAG,MAAM,IAAI,CAACzuC,eAAe,CAAC2R,IAAI,CAAC,QAAQ,EAAE,CAACvqB,OAAO,EAAE4kB,SAAS,CAAC,CAAC;IAChF;IACA,OAAOyiC,YAAY,CAAC,CAAC,CAAC;EACxB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMC,QAAQA,CAACL,WAAW,EAAE;IAC1B,OAAO,CAAC,MAAM,IAAI,CAACM,aAAa,CAAC,CAACN,WAAW,CAAC,CAAC,EAAE,CAAC,CAAC;EACrD;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMM,aAAaA,CAACC,cAAc,EAAE;IAClC,MAAMyG,mBAAmB,GAAG,MAAM,IAAI,CAACA,mBAAmB,CAAC,CAAC;IAC5D,MAAMvG,cAAc,GAAG,MAAM9mD,OAAO,CAAC+M,GAAG,CAAC65C,cAAc,CAAC1oD,GAAG,CAACovB,CAAC,IAAIjd,6BAA6B,CAACrD,UAAU,CAACsgB,CAAC,CAAC,CAAC,CAAC;IAC9G,MAAM4lB,SAAS,GAAG4T,cAAc,CAAC5oD,GAAG,CAAC87B,CAAC,IAAIA,CAAC,CAAC5rB,QAAQ,CAAC;IACrD,MAAMklC,IAAI,GAAG,MAAML,mBAAmB,CAACC,SAAS,EAAE,IAAI,CAAC/f,OAAO,CAAC;IAC/D,MAAM5yB,OAAO,GAAG,MAAM,IAAI,CAACyX,eAAe,CAAC28B,UAAU,CAAC,CAAC;IACvD,MAAMhsC,MAAM,GAAG,IAAI,CAACqP,eAAe,CAAC0vB,SAAS,CAAC,CAAC;IAC/C9yC,SAAS,CAAC+T,MAAM,EAAE,qBAAqB,CAAC;IACxC,OAAO,MAAM3I,OAAO,CAAC+M,GAAG,CAAC+5C,cAAc,CAAC5oD,GAAG,CAAC,OAAOovB,CAAC,EAAE1hB,CAAC,KAAK;MAC1D,MAAMoE,GAAG,GAAGsjC,IAAI,CAAC1nC,CAAC,CAAC;MACnB,MAAMm7C,YAAY,GAAG,MAAMz2C,8BAA8B,CAACtD,UAAU,CAAC;QACnE,GAAGsgB,CAAC;QACJtd;MACF,CAAC,CAAC;MACF,IAAIgU,SAAS;MACb,IAAIqpC,mBAAmB,EAAE;QACvBrpC,SAAS,GAAG,MAAM,IAAI,CAAChM,eAAe,CAACkkC,aAAa,CAACvzC,MAAM,EAAE;UAC3DlI,IAAI,EAAE,aAAa;UACnBpG,OAAO,EAAE,GAAG;UACZkG,OAAO;UACPqmC,iBAAiB,EAAE,IAAI,CAAC5uB,eAAe,CAAC7O;QAC1C,CAAC,EAAE;UACD69C,WAAW,EAAEv2C;QACf,CAAC,EAAE,MAAM,IAAI,CAAC68C,gCAAgC,CAACvG,YAAY,CAAC,CAAC;MAC/D,CAAC,MAAM;QACL/iC,SAAS,GAAG,MAAM,IAAI,CAAChM,eAAe,CAACkkC,aAAa,CAACvzC,MAAM,EAAE;UAC3DlI,IAAI,EAAE,qBAAqB;UAC3BpG,OAAO,EAAE,GAAG;UACZkG,OAAO;UACPqmC,iBAAiB,EAAE,MAAM,IAAI,CAAC5uB,eAAe,CAAC7O;QAChD,CAAC,EAAE;UACD69C,WAAW,EAAEr2C;QACf,CAAC;QACD;QACA,MAAM,IAAI,CAAC21C,0BAA0B,CAACS,YAAY,CAAC,CAAC;MACtD;MACA,OAAO;QACL7nD,OAAO,EAAE6nD,YAAY;QACrB/iC,SAAS,EAAEA,SAAS,CAAC3nB,QAAQ,CAAC;MAChC,CAAC;IACH,CAAC,CAAC,CAAC;EACL;;EAEA;AACF;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMiqD,0BAA0BA,CAACD,WAAW,EAAE;IAC5C,MAAMkH,uBAAuB,GAAG,MAAMpQ,mBAAmB,CAAC,IAAI,CAACnlC,eAAe,CAAC2vB,WAAW,CAAC,CAAC,EAAE0e,WAAW,CAAC15C,KAAK,EAAE05C,WAAW,CAACz5C,eAAe,CAAC;IAC7I,OAAO;MACLwC,EAAE,EAAEi3C,WAAW,CAACj3C,EAAE;MAClBS,gBAAgB,EAAEw2C,WAAW,CAACx2C,gBAAgB;MAC9CC,UAAU,EAAEu2C,WAAW,CAACv2C,UAAU;MAClCN,oBAAoB,EAAE62C,WAAW,CAAC72C,oBAAoB;MACtDQ,GAAG,EAAEq2C,WAAW,CAACr2C,GAAG;MACpBN,QAAQ,EAAE22C,WAAW,CAAC32C,QAAQ;MAC9B+mC,aAAa,EAAE8W,uBAAuB;MACtC7W,QAAQ,EAAE2P,WAAW,CAACz5C,eAAe;MACrCw6C,sBAAsB,EAAEf,WAAW,CAACh3C,aAAa;MACjD83C,oBAAoB,EAAEd,WAAW,CAAC/2C,WAAW;MAC7CC,GAAG,EAAE82C,WAAW,CAAC92C;IACnB,CAAC;EACH;EACA,MAAM+9C,gCAAgCA,CAACjH,WAAW,EAAE;IAClD,MAAMkH,uBAAuB,GAAG,MAAMpQ,mBAAmB,CAAC,IAAI,CAACnlC,eAAe,CAAC2vB,WAAW,CAAC,CAAC,EAAE0e,WAAW,CAAC15C,KAAK,EAAE05C,WAAW,CAACz5C,eAAe,CAAC;IAC7I,OAAO;MACLwC,EAAE,EAAEi3C,WAAW,CAACj3C,EAAE;MAClBzC,KAAK,EAAE4gD,uBAAuB;MAC9Bv9C,GAAG,EAAEq2C,WAAW,CAACr2C,GAAG;MACpB0mC,QAAQ,EAAE2P,WAAW,CAACz5C,eAAe;MACrCu6C,oBAAoB,EAAEd,WAAW,CAAC/2C,WAAW;MAC7C83C,sBAAsB,EAAEf,WAAW,CAACh3C,aAAa;MACjDE,GAAG,EAAE82C,WAAW,CAAC92C,GAAG;MACpBM,gBAAgB,EAAEw2C,WAAW,CAACx2C,gBAAgB;MAC9CC,UAAU,EAAEu2C,WAAW,CAACv2C,UAAU;MAClCN,oBAAoB,EAAE62C,WAAW,CAAC72C;IACpC,CAAC;EACH;EACA,MAAM69C,mBAAmBA,CAAA,EAAG;IAC1B,OAAOjnC,qBAAqB,CAAC,IAAI,CAACpO,eAAe,EAAE,uBAAuB,CAAC;EAC7E;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMw1C,MAAM,CAAC;EAEX,IAAIjtD,OAAOA,CAAA,EAAG;IACZ,OAAO,IAAI,CAACgnD,QAAQ;EACtB;EACApqD,WAAWA,CAAC6a,eAAe,EAAEmb,OAAO,EAAE5yB,OAAO,EAAE;IAAAouC,eAAA,sBAJjChvB,WAAW,CAAClf,IAAI;IAyG9B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAZEkuC,eAAA,mBAaW,eAAetY,wBAAwB,CAAC,OAAOjnB,EAAE,EAAEe,OAAO,KAAK;MACxE,MAAM,CAAChU,IAAI,EAAEsxD,GAAG,CAAC,GAAG,MAAMztD,OAAO,CAAC+M,GAAG,CAAC,CAAC,IAAI,CAACiL,eAAe,CAACwxB,gBAAgB,CAAC,CAAC,EAAElK,cAAc,CAAClwB,EAAE,CAAC,CAAC,CAAC;MACpG,OAAOs6B,WAAW,CAACC,mBAAmB,CAAC;QACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;QACrCvY,MAAM,EAAE,uCAAuC;QAC/C0Y,IAAI,EAAE,CAAChc,IAAI,EAAEsxD,GAAG,EAAEt9C,OAAO;MAC3B,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAbEw+B,eAAA,uBAce,eAAetY,wBAAwB,CAAC,OAAOl6B,IAAI,EAAEiT,EAAE,EAAEe,OAAO,KAAK;MAClF,MAAM,CAACu9C,WAAW,EAAEjI,SAAS,CAAC,GAAG,MAAMzlD,OAAO,CAAC+M,GAAG,CAAC,CAACuyB,cAAc,CAACnjC,IAAI,CAAC,EAAEmjC,cAAc,CAAClwB,EAAE,CAAC,CAAC,CAAC;MAC9F,OAAOs6B,WAAW,CAACC,mBAAmB,CAAC;QACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;QACrCvY,MAAM,EAAE,uCAAuC;QAC/C0Y,IAAI,EAAE,CAACu1C,WAAW,EAAEjI,SAAS,EAAEt1C,OAAO;MACxC,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAXEw+B,eAAA,4BAYoB,eAAetY,wBAAwB,CAAC,OAAOs3B,QAAQ,EAAEC,QAAQ,KAAK;MACxF,OAAOlkB,WAAW,CAACC,mBAAmB,CAAC;QACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;QACrCvY,MAAM,EAAE,mBAAmB;QAC3B0Y,IAAI,EAAE,CAAC,MAAMmnB,cAAc,CAACquB,QAAQ,CAAC,EAAEC,QAAQ;MACjD,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAbEjf,eAAA,8BAcsB,eAAetY,wBAAwB,CAAC,OAAOs3B,QAAQ,EAAEx9C,OAAO,KAAK;MACzF,OAAOu5B,WAAW,CAACC,mBAAmB,CAAC;QACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;QACrCvY,MAAM,EAAE,SAAS;QACjB0Y,IAAI,EAAE,CAAC,MAAMmnB,cAAc,CAACquB,QAAQ,CAAC,EAAEx9C,OAAO;MAChD,CAAC,CAAC;IACJ,CAAC,CAAC;IA4GF;IAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IApBEw+B,eAAA,eAqBO,eAAetY,wBAAwB,CAAC,MAAMjoB,QAAQ,IAAI;MAC/D,OAAO,IAAI,CAACo5C,MAAM,CAACpxB,OAAO,CAAC,MAAM,IAAI,CAACpe,eAAe,CAACwxB,gBAAgB,CAAC,CAAC,EAAEp7B,QAAQ,CAAC;IACrF,CAAC,CAAC;IAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAvBEugC,eAAA,iBAwBS,eAAetY,wBAAwB,CAAC,OAAOoxB,QAAQ,EAAEr5C,QAAQ,KAAK;MAC7E,OAAOi5C,aAAa,CAAC,IAAI,CAACK,QAAQ,EAAExoC,oBAAoB,CAAC,CAAC9P,EAAE,CAACgnB,OAAO,CAACqxB,QAAQ,EAAEr5C,QAAQ,CAAC;IAC1F,CAAC,CAAC;IAeF;IAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAxBEugC,eAAA,oBAyBY,eAAetY,wBAAwB,CAAC,MAAM6c,SAAS,IAAI;MACrE,OAAO,IAAI,CAAC2a,WAAW,CAACz3B,OAAO,CAAC,MAAM,IAAI,CAACpe,eAAe,CAACwxB,gBAAgB,CAAC,CAAC,EAAE0J,SAAS,CAAC;IAC3F,CAAC,CAAC;IAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IA3BEvE,eAAA,sBA4Bc,eAAetY,wBAAwB,CAAC,OAAOoxB,QAAQ,EAAEvU,SAAS,KAAK;MAAA,IAAA4a,eAAA;MACnF,OAAOzG,aAAa,EAAAyG,eAAA,GAAC,IAAI,CAACpG,QAAQ,cAAAoG,eAAA,uBAAbA,eAAA,CAAe9vD,KAAK,EAAEihB,0BAA0B,CAAC,CAAC7P,EAAE,CAACgnB,OAAO,CAACqxB,QAAQ,EAAEvU,SAAS,CAAC;IACxG,CAAC,CAAC;IAEF;IAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IATEvE,eAAA,eAUO,eAAetY,wBAAwB,CAAC,MAAMlmB,OAAO,IAAI;MAC9D,OAAOk3C,aAAa,CAAC,IAAI,CAACO,QAAQ,EAAErpC,oBAAoB,CAAC,CAACwL,KAAK,CAACqM,OAAO,CAACjmB,OAAO,CAAC;IAClF,CAAC,CAAC;IAEF;IAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAbEw+B,eAAA,iBAcS,eAAetY,wBAAwB,CAAC,MAAMlmB,OAAO,IAAI;MAChE,OAAOk3C,aAAa,CAAC,IAAI,CAAC0G,WAAW,EAAEtuC,wBAAwB,CAAC,CAACuuC,MAAM,CAAC53B,OAAO,CAACjmB,OAAO,CAAC;IAC1F,CAAC,CAAC;IAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAbEw+B,eAAA,iBAcS,eAAetY,wBAAwB,CAAC,MAAMlmB,OAAO,IAAI;MAChE,OAAOk3C,aAAa,CAAC,IAAI,CAAC0G,WAAW,EAAEtuC,wBAAwB,CAAC,CAACwuC,MAAM,CAAC73B,OAAO,CAACjmB,OAAO,CAAC;IAC1F,CAAC,CAAC;IAEF;IAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IA1BEw+B,eAAA,mBA2BW,eAAetY,wBAAwB,CAAC,OAAO6c,SAAS,EAAEhuC,OAAO,KAAK;MAC/E,OAAOmiD,aAAa,CAAC,IAAI,CAAC6G,YAAY,EAAElvC,yBAAyB,CAAC,CAACmvC,QAAQ,CAAC/3B,OAAO,CAAC8c,SAAS,EAAEhuC,OAAO,CAAC;IACzG,CAAC,CAAC;IAEF;IAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAfEypC,eAAA,iBAgBS,eAAetY,wBAAwB,CAAC,OAAOlmB,OAAO,EAAE/B,QAAQ,KAAK;MAC5E,OAAOi5C,aAAa,CAAC,IAAI,CAAC+G,iBAAiB,EAAE1uC,8BAA8B,CAAC,CAACzY,MAAM,CAACmvB,OAAO,CAACjmB,OAAO,EAAE/B,QAAQ,CAAC;IAChH,CAAC,CAAC;IAEF;IAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAnBEugC,eAAA,gBAoBQ,eAAetY,wBAAwB,CAAC,OAAO3mB,QAAQ,EAAExK,OAAO,KAAK;MAC3E,OAAO,IAAI,CAAC4iD,OAAO,CAAC1xB,OAAO,CAAC,MAAM,IAAI,CAACpe,eAAe,CAACwxB,gBAAgB,CAAC,CAAC,EAAE95B,QAAQ,EAAExK,OAAO,CAAC;IAC/F,CAAC,CAAC;IAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IArBEypC,eAAA,kBAsBU,eAAetY,wBAAwB,CAAC,OAAOsuB,kBAAkB,EAAEj1C,QAAQ,EAAExK,OAAO,KAAK;MACjG,MAAMmpD,mBAAmB,GAAG,IAAI,CAACA,mBAAmB;MACpD,MAAMlP,KAAK,GAAG,IAAI,CAACmP,WAAW;MAC9B,MAAMC,SAAS,GAAG,IAAI,CAACA,SAAS;MAChC,IAAIF,mBAAmB,EAAE;QACvB,OAAOA,mBAAmB,CAACj/C,EAAE,CAACgnB,OAAO,CAACuuB,kBAAkB,EAAEj1C,QAAQ,EAAExK,OAAO,CAAC;MAC9E;MACA,IAAIi6C,KAAK,EAAE;QACT,OAAOA,KAAK,CAAC/vC,EAAE,CAACgnB,OAAO,CAACuuB,kBAAkB,EAAEj1C,QAAQ,EAAExK,OAAO,CAAC;MAChE;MACA,IAAIqpD,SAAS,EAAE;QACb,OAAOA,SAAS,CAACn/C,EAAE,CAACgnB,OAAO,CAACuuB,kBAAkB,EAAEj1C,QAAQ,EAAExK,OAAO,CAAC;MACpE;MACA,MAAM,IAAIuV,4BAA4B,CAACqE,wBAAwB,CAAC;IAClE,CAAC,CAAC;IAnlBA,IAAI,CAAC9G,eAAe,GAAGA,eAAe;IACtC,IAAI,CAACmb,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACq7B,KAAK,GAAG,IAAI,CAACC,sBAAsB,CAAC,CAAC;IAC1C,IAAI,CAAC/G,QAAQ,GAAG,IAAI,CAACgH,oBAAoB,CAAC,CAAC;IAC3C,IAAI,CAAC9G,QAAQ,GAAG,IAAI,CAAC+G,oBAAoB,CAAC,CAAC;IAC3C,IAAI,CAACT,YAAY,GAAG,IAAI,CAACU,wBAAwB,CAAC,CAAC;IACnD,IAAI,CAACC,cAAc,GAAG,IAAI,CAACC,sBAAsB,CAAC,CAAC;IACnD,IAAI,CAAC1G,iBAAiB,GAAG,IAAI,CAAC2G,6BAA6B,CAAC,CAAC;IAC7D,IAAI,CAACV,mBAAmB,GAAG,IAAI,CAACW,mCAAmC,CAAC,CAAC;IACrE,IAAI,CAACV,WAAW,GAAG,IAAI,CAACW,qBAAqB,CAAC,CAAC;IAC/C,IAAI,CAACV,SAAS,GAAG,IAAI,CAACW,yBAAyB,CAAC,CAAC;IACjD,IAAI,CAACC,oBAAoB,GAAG,IAAI,CAACC,0BAA0B,CAAC,CAAC;IAC7D,IAAI,CAACrB,WAAW,GAAG,IAAI,CAACsB,uBAAuB,CAAC,CAAC;IACjD,IAAI,CAACjB,iBAAiB,GAAG,IAAI,CAACkB,6BAA6B,CAAC,CAAC;IAC7D,IAAI,CAAC/H,QAAQ,GAAGhnD,OAAO;EACzB;;EAEA;AACF;AACA;EACE+nD,gBAAgBA,CAACjrD,OAAO,EAAE;IACxB,IAAI,CAAC2a,eAAe,CAACwiC,sBAAsB,CAACn9C,OAAO,CAAC;EACtD;EACAmoC,UAAUA,CAAA,EAAG;IACX,OAAO,IAAI,CAACxtB,eAAe,CAAC7O,OAAO;EACrC;;EAEA;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMjB,GAAGA,CAACiI,OAAO,EAAE;IACjB,MAAM,CAAC82B,KAAK,EAAE74B,QAAQ,CAAC,GAAG,MAAMpO,OAAO,CAAC+M,GAAG,CAAC,CAAC,IAAI,CAACy9C,OAAO,CAACr6C,OAAO,CAAC,CAACslB,KAAK,CAAC,MAAMhhC,SAAS,CAAC+W,WAAW,CAAC,EAAE,IAAI,CAAC69C,gBAAgB,CAACl5C,OAAO,CAAC,CAACslB,KAAK,CAAC,OAAO;MACjJ91B,EAAE,EAAEwQ,OAAO,CAAC9T,QAAQ,CAAC,CAAC;MACtB2T,GAAG,EAAE,EAAE;MACP,GAAGiiC;IACL,CAAC,CAAC,CAAC,CAAC,CAAC;IACL,OAAO;MACLhL,KAAK;MACL74B,QAAQ;MACRoC,IAAI,EAAE,QAAQ;MACd++C,MAAM,EAAE;IACV,CAAC;EACH;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACE,MAAM/E,OAAOA,CAACr6C,OAAO,EAAE;IACrB,OAAO,MAAM,IAAI,CAAC6H,eAAe,CAAC2R,IAAI,CAAC,SAAS,EAAE,CAACxZ,OAAO,CAAC,CAAC;EAC9D;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMo4C,SAASA,CAACp/C,OAAO,EAAE;IACvB,OAAO,MAAM,IAAI,CAAC6O,eAAe,CAAC2R,IAAI,CAAC,WAAW,EAAE,CAAC,MAAM2V,cAAc,CAACn2B,OAAO,CAAC,CAAC,CAAC;EACtF;;EAEA;AACF;AACA;EACE,MAAMg7C,OAAOA,CAAA,EAAG;IACd,OAAO,MAAM,IAAI,CAACoE,SAAS,CAAC,MAAM,IAAI,CAACvwC,eAAe,CAACwxB,gBAAgB,CAAC,CAAC,CAAC;EAC5E;;EAEA;AACF;AACA;AACA;AACA;EACE,MAAMgmB,UAAUA,CAACrmD,OAAO,EAAEwkD,QAAQ,EAAE;IAClC,MAAM,CAAC8B,QAAQ,EAAEC,SAAS,CAAC,GAAG,MAAM1vD,OAAO,CAAC+M,GAAG,CAAC,CAACuyB,cAAc,CAACn2B,OAAO,CAAC,EAAEm2B,cAAc,CAACquB,QAAQ,CAAC,CAAC,CAAC;IACpG,OAAO,MAAM,IAAI,CAAC31C,eAAe,CAAC2R,IAAI,CAAC,kBAAkB,EAAE,CAAC8lC,QAAQ,EAAEC,SAAS,CAAC,CAAC;EACnF;EAyFA;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMrf,MAAMA,CAAC4Z,WAAW,EAAE;IACxB,OAAO5C,aAAa,CAAC,IAAI,CAACmH,KAAK,EAAEjvC,kBAAkB,CAAC,CAACxS,GAAG,CAACk9C,WAAW,CAAC;EACvE;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAM0F,YAAYA,CAAA,EAAG;IACnB,OAAOtI,aAAa,CAAC,IAAI,CAACmH,KAAK,EAAEjvC,kBAAkB,CAAC,CAAC6qC,SAAS,CAAC,CAAC;EAClE;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMC,UAAUA,CAAA,EAAG;IACjB,OAAO,IAAI,CAACjB,iBAAiB,CAAC,CAAC;EACjC;;EAEA;AACF;AACA;AACA;EACE,MAAMqB,sBAAsBA,CAAA,EAAG;IAC7B,OAAOpD,aAAa,CAAC,IAAI,CAACmH,KAAK,EAAEjvC,kBAAkB,CAAC,CAACkrC,sBAAsB,CAAC,CAAC;EAC/E;;EAEA;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMmF,QAAQA,CAACpL,aAAa,EAAE;IAAA,IAAAqL,WAAA;IAC5B,IAAIrL,aAAa,EAAE;MACjBA,aAAa,GAAG,MAAMllB,cAAc,CAACklB,aAAa,CAAC;IACrD;IACA,KAAAqL,WAAA,GAAI,IAAI,CAACrB,KAAK,cAAAqB,WAAA,eAAVA,WAAA,CAAY9F,KAAK,EAAE;MACrB,OAAO,IAAI,CAACyE,KAAK,CAACzE,KAAK,CAACh9C,GAAG,CAACy3C,aAAa,CAAC;IAC5C,CAAC,MAAM;MACL,MAAM,CAACr7C,OAAO,EAAEihD,SAAS,CAAC,GAAG,MAAMpqD,OAAO,CAAC+M,GAAG,CAAC,CAACy3C,aAAa,IAAI,IAAI,CAACxsC,eAAe,CAACwxB,gBAAgB,CAAC,CAAC,EAAE,IAAI,CAACmmB,YAAY,CAAC,CAAC,CAAC,CAAC;MAC/H,OAAO,MAAM3vD,OAAO,CAAC+M,GAAG,CAAC,CAACq9C,SAAS,IAAI,EAAE,EAAExkD,MAAM,CAACgG,CAAC;QAAA,IAAAkkD,QAAA;QAAA,OAAI,CAAA3mD,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAE7C,WAAW,CAAC,CAAC,QAAAwpD,QAAA,GAAKlkD,CAAC,CAACq7B,KAAK,cAAA6oB,QAAA,uBAAPA,QAAA,CAASxpD,WAAW,CAAC,CAAC;MAAA,EAAC,CAACpI,GAAG,CAAC0N,CAAC,IAAI,IAAI,CAAC1D,GAAG,CAAC0D,CAAC,CAACuE,OAAO,CAAC,CAAC,CAAC;IAC1I;EACF;;EAEA;AACF;AACA;AACA;EACE,MAAM4/C,gBAAgBA,CAACvL,aAAa,EAAE;IAAA,IAAAwL,YAAA;IACpC,IAAIxL,aAAa,EAAE;MACjBA,aAAa,GAAG,MAAMllB,cAAc,CAACklB,aAAa,CAAC;IACrD;IACA,KAAAwL,YAAA,GAAI,IAAI,CAACxB,KAAK,cAAAwB,YAAA,eAAVA,YAAA,CAAYjG,KAAK,EAAE;MACrB,OAAO,IAAI,CAACyE,KAAK,CAACzE,KAAK,CAACJ,QAAQ,CAACnF,aAAa,CAAC;IACjD,CAAC,MAAM;MACL,MAAM,CAACr7C,OAAO,EAAEihD,SAAS,CAAC,GAAG,MAAMpqD,OAAO,CAAC+M,GAAG,CAAC,CAACy3C,aAAa,IAAI,IAAI,CAACxsC,eAAe,CAACwxB,gBAAgB,CAAC,CAAC,EAAE,IAAI,CAACmmB,YAAY,CAAC,CAAC,CAAC,CAAC;MAC/H,OAAO,CAACvF,SAAS,IAAI,EAAE,EAAExkD,MAAM,CAACgG,CAAC;QAAA,IAAAqkD,SAAA;QAAA,OAAI,CAAA9mD,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAE7C,WAAW,CAAC,CAAC,QAAA2pD,SAAA,GAAKrkD,CAAC,CAACq7B,KAAK,cAAAgpB,SAAA,uBAAPA,SAAA,CAAS3pD,WAAW,CAAC,CAAC;MAAA,EAAC,CAACpI,GAAG,CAAC0N,CAAC,IAAItX,SAAS,CAAC6H,IAAI,CAACyP,CAAC,CAACuE,OAAO,CAAC,CAAC;IAC7H;EACF;EAyDA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAM61C,kBAAkBA,CAACyB,QAAQ,EAAEr5C,QAAQ,EAAE;IAC3C,OAAO,IAAI,CAACo5C,MAAM,CAACpxB,OAAO,CAACqxB,QAAQ,EAAEr5C,QAAQ,CAAC;EAChD;EA8OA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMw2C,mBAAmBA,CAACD,kBAAkB,EAAEj1C,QAAQ,EAAExK,OAAO,EAAE;IAC/D,MAAMmpD,mBAAmB,GAAG,IAAI,CAACA,mBAAmB;IACpD,MAAMlP,KAAK,GAAG,IAAI,CAACmP,WAAW;IAC9B,IAAID,mBAAmB,EAAE;MACvB,OAAOA,mBAAmB,CAAClM,UAAU,CAACyC,mBAAmB,CAACD,kBAAkB,EAAEj1C,QAAQ,EAAExK,OAAO,CAAC;IAClG;IACA,IAAIi6C,KAAK,EAAE;MACT,OAAOA,KAAK,CAACyF,mBAAmB,CAACD,kBAAkB,EAAEj1C,QAAQ,EAAExK,OAAO,CAAC;IACzE;IACA,MAAM,IAAIuV,4BAA4B,CAACqE,wBAAwB,CAAC;EAClE;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMwrC,kBAAkBA,CAAA,EAAG;IACzB,MAAMjpB,QAAQ,GAAG,IAAI,CAACrpB,eAAe;IACrC,IAAIqO,WAAW,CAAC,aAAa,EAAEgb,QAAQ,CAAC,EAAE;MACxC,OAAO,IAAI,CAACrpB,eAAe,CAAC2R,IAAI,CAAC,aAAa,EAAE,EAAE,CAAC;IACrD;IACA,IAAItD,WAAW,CAAC,oBAAoB,EAAEgb,QAAQ,CAAC,EAAE;MAC/C,OAAO,IAAI,CAACrpB,eAAe,CAAC2R,IAAI,CAAC,oBAAoB,EAAE,EAAE,CAAC;IAC5D;IACA,MAAM,IAAIpvB,KAAK,CAAC,2DAA2D,CAAC;EAC9E;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAM21D,oBAAoBA,CAAA,EAAG;IAC3B,MAAM,CAAC9G,iBAAiB,EAAEkB,kBAAkB,CAAC,GAAG,MAAMtqD,OAAO,CAAC+M,GAAG,CAAC,CAAC,IAAI,CAACq8C,iBAAiB,CAAC,CAAC,EAAE,IAAI,CAACkB,kBAAkB,CAAC,CAAC,CAAC,CAAC;IACxH,OAAOlB,iBAAiB,CAACzJ,GAAG,CAAC2K,kBAAkB,CAAC;EAClD;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAIvF,eAAeA,CAAA,EAAG;IACpB,OAAOsC,aAAa,CAAC,IAAI,CAACgH,mBAAmB,EAAE1vC,+BAA+B,CAAC,CAACwjC,UAAU;EAC5F;;EAEA;;EAEA;AACF;AACA;AACA;AACA;EACE,IAAIgO,UAAUA,CAAA,EAAG;IACf,OAAO9I,aAAa,CAAC,IAAI,CAACwH,cAAc,EAAEpwC,uBAAuB,CAAC;EACpE;;EAEA;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAIuF,SAASA,CAAA,EAAG;IACd,OAAOqjC,aAAa,CAAC,IAAI,CAACe,iBAAiB,EAAEjpC,iCAAiC,CAAC;EACjF;;EAEA;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAImqC,QAAQA,CAAA,EAAG;IAAA,IAAA8G,kBAAA;IACb,OAAO/I,aAAa,EAAA+I,kBAAA,GAAC,IAAI,CAAClC,YAAY,cAAAkC,kBAAA,uBAAjBA,kBAAA,CAAmB9G,QAAQ,EAAE9qC,sBAAsB,CAAC;EAC3E;;EAEA;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI6xC,cAAcA,CAAA,EAAG;IACnB,OAAOhJ,aAAa,CAAC,IAAI,CAAC8H,oBAAoB,EAAE3vC,2BAA2B,CAAC;EAC9E;;EAEA;AACF;AACA;;EAEE;AACF;AACA;EACE,MAAM6pC,gBAAgBA,CAACl5C,OAAO,EAAE;IAC9B,MAAMgiC,QAAQ,GAAG,MAAM,IAAI,CAACn6B,eAAe,CAAC2R,IAAI,CAAC,UAAU,EAAE,CAACxZ,OAAO,CAAC,CAAC;IACvE,IAAI,CAACgiC,QAAQ,EAAE;MACb,MAAM,IAAIz5B,aAAa,CAAC,CAAC;IAC3B;IACA,OAAOw5B,kBAAkB,CAAC/hC,OAAO,EAAEgiC,QAAQ,EAAE,IAAI,CAAChf,OAAO,CAAC;EAC5D;;EAEA;AACF;AACA;AACA;EACE,MAAMi2B,iBAAiBA,CAAA,EAAG;IACxB,IAAI/iC,WAAW,CAAC,mBAAmB,EAAE,IAAI,CAACrO,eAAe,CAAC,EAAE;MAC1D,IAAIoxC,iBAAiB,GAAG,MAAM,IAAI,CAACpxC,eAAe,CAAC2R,IAAI,CAAC,mBAAmB,EAAE,EAAE,CAAC;MAChF;MACA,IAAItD,WAAW,CAAC,cAAc,EAAE,IAAI,CAACrO,eAAe,CAAC,EAAE;QACrDoxC,iBAAiB,GAAGA,iBAAiB,CAACzJ,GAAG,CAAC,MAAM,IAAI,CAAC3nC,eAAe,CAAC2R,IAAI,CAAC,cAAc,EAAE,EAAE,CAAC,CAAC;MAChG;MACA,OAAOy/B,iBAAiB;IAC1B,CAAC,MAAM,IAAI/iC,WAAW,CAAC,aAAa,EAAE,IAAI,CAACrO,eAAe,CAAC,EAAE;MAC3D,OAAO,MAAM,IAAI,CAACA,eAAe,CAAC2R,IAAI,CAAC,aAAa,EAAE,EAAE,CAAC;IAC3D,CAAC,MAAM;MACL,MAAM,IAAIpvB,KAAK,CAAC,yHAAyH,CAAC;IAC5I;EACF;EACAk0D,sBAAsBA,CAAA,EAAG;IACvB,IAAIroC,qBAAqB,CAAC,IAAI,CAACpO,eAAe,EAAE,cAAc,CAAC,IAAIqO,WAAW,CAAC,mBAAmB,EAAE,IAAI,CAACrO,eAAe,CAAC,EAAE;MACzH,OAAO,IAAI8xC,YAAY,CAAC,IAAI,EAAE,IAAI,CAAC9xC,eAAe,CAAC;IACrD;IACA,OAAOxa,SAAS;EAClB;EACAkxD,oBAAoBA,CAAA,EAAG;IACrB,IAAItoC,qBAAqB,CAAC,IAAI,CAACpO,eAAe,EAAE,gBAAgB,CAAC,EAAE;MACjE,OAAO,IAAIwxC,cAAc,CAAC,IAAI,EAAE,IAAI,CAACxxC,eAAe,EAAE,IAAI,CAACmb,OAAO,CAAC;IACrE;IACA,OAAO31B,SAAS;EAClB;EACAmxD,oBAAoBA,CAAA,EAAG;IACrB,IAAIvoC,qBAAqB,CAAC,IAAI,CAACpO,eAAe,EAAE,gBAAgB,CAAC,EAAE;MACjE,OAAO,IAAIg0C,cAAc,CAAC,IAAI,CAACh0C,eAAe,CAAC;IACjD;IACA,OAAOxa,SAAS;EAClB;EACAoxD,wBAAwBA,CAAA,EAAG;IACzB,IAAIxoC,qBAAqB,CAAC,IAAI,CAACpO,eAAe,EAAE,oBAAoB,CAAC,EAAE;MACrE,OAAO,IAAImxC,kBAAkB,CAAC,IAAI,EAAE,IAAI,CAACnxC,eAAe,EAAE,IAAI,CAACmb,OAAO,CAAC;IACzE;IACA,OAAO31B,SAAS;EAClB;EACAsxD,sBAAsBA,CAAA,EAAG;IACvB,IAAI1oC,qBAAqB,CAAC,IAAI,CAACpO,eAAe,EAAE,kBAAkB,CAAC,EAAE;MACnE,OAAO,IAAI4yC,gBAAgB,CAAC,IAAI,EAAE,IAAI,CAAC5yC,eAAe,EAAE,IAAI,CAACmb,OAAO,CAAC;IACvE;IACA,OAAO31B,SAAS;EAClB;EACAuxD,6BAA6BA,CAAA,EAAG;IAC9B,IAAI3oC,qBAAqB,CAAC,IAAI,CAACpO,eAAe,EAAE,uBAAuB,CAAC,IAAIoO,qBAAqB,CAAC,IAAI,CAACpO,eAAe,EAAE,uBAAuB,CAAC,EAAE;MAChJ,OAAO,IAAIo1C,mCAAmC,CAAC,IAAI,CAACp1C,eAAe,EAAE,IAAI,CAACmb,OAAO,CAAC;IACpF;IACA,OAAO31B,SAAS;EAClB;EACAwxD,mCAAmCA,CAAA,EAAG;IACpC,IAAI5oC,qBAAqB,CAAC,IAAI,CAACpO,eAAe,EAAE,yBAAyB,CAAC,IAAIoO,qBAAqB,CAAC,IAAI,CAACpO,eAAe,EAAE,yBAAyB,CAAC,IAAIoO,qBAAqB,CAAC,IAAI,CAACpO,eAAe,EAAE,qBAAqB,CAAC,IAAIoO,qBAAqB,CAAC,IAAI,CAACpO,eAAe,EAAE,qBAAqB,CAAC,EAAE;MAChS,OAAO,IAAI8wC,6BAA6B,CAAC,IAAI,EAAE,IAAI,CAAC9wC,eAAe,EAAE,IAAI,CAACmb,OAAO,CAAC;IACpF;IACA,OAAO31B,SAAS;EAClB;EACAyxD,qBAAqBA,CAAA,EAAG;IACtB,IAAI7oC,qBAAqB,CAAC,IAAI,CAACpO,eAAe,EAAE,mBAAmB,CAAC,EAAE;MACpE,OAAO,IAAIkxC,eAAe,CAAC,IAAI,EAAE,IAAI,CAAClxC,eAAe,CAAC;IACxD;IACA,OAAOxa,SAAS;EAClB;EACA0xD,yBAAyBA,CAAA,EAAG;IAC1B,IAAI9oC,qBAAqB,CAAC,IAAI,CAACpO,eAAe,EAAE,iBAAiB,CAAC,EAAE;MAClE,OAAO,IAAIm0C,mBAAmB,CAAC,IAAI,EAAE,IAAI,CAACn0C,eAAe,CAAC;IAC5D;IACA,OAAOxa,SAAS;EAClB;EACA4xD,0BAA0BA,CAAA,EAAG;IAC3B,IAAIhpC,qBAAqB,CAAC,IAAI,CAACpO,eAAe,EAAE,sBAAsB,CAAC,EAAE;MACvE,OAAO,IAAI40C,oBAAoB,CAAC,IAAI,CAAC50C,eAAe,EAAE,IAAI,CAACmb,OAAO,CAAC;IACrE;IACA,OAAO31B,SAAS;EAClB;EACA6xD,uBAAuBA,CAAA,EAAG;IACxB,IAAIjpC,qBAAqB,CAAC,IAAI,CAACpO,eAAe,EAAE,mBAAmB,CAAC,EAAE;MACpE,OAAO,IAAI00C,iBAAiB,CAAC,IAAI,CAAC10C,eAAe,CAAC;IACpD;IACA,OAAOxa,SAAS;EAClB;EACA8xD,6BAA6BA,CAAA,EAAG;IAC9B,IAAIlpC,qBAAqB,CAAC,IAAI,CAACpO,eAAe,EAAE,yBAAyB,CAAC,EAAE;MAC1E,OAAO,IAAI20C,uBAAuB,CAAC,IAAI,CAAC30C,eAAe,EAAE,IAAI,CAACmb,OAAO,CAAC;IACxE;IACA,OAAO31B,SAAS;EAClB;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAM8yD,oBAAoB,CAAC;EAEzBnzD,WAAWA,CAAC41C,OAAO,EAAE/6B,eAAe,EAAEmb,OAAO,EAAE;IAAAwb,eAAA,sBADjCnuB,8BAA8B,CAAC/f,IAAI;IAOjD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAhCEkuC,eAAA,aAiCK,eAAetY,wBAAwB,CAAC,OAAOjnB,EAAE,EAAEmhD,kBAAkB,KAAK;MAC7E,MAAMrd,SAAS,GAAGqd,kBAAkB,CAACryD,GAAG,CAAC7K,CAAC,IAAIA,CAAC,CAAC+a,QAAQ,CAAC;MACzD,MAAMoiD,QAAQ,GAAGD,kBAAkB,CAACryD,GAAG,CAAC7K,CAAC,IAAIA,CAAC,CAACk8D,MAAM,CAAC;MACtD,MAAMjc,IAAI,GAAG,MAAML,mBAAmB,CAACC,SAAS,EAAE,IAAI,CAAC/f,OAAO,CAAC;MAC/D,MAAM8d,eAAe,GAAG,MAAM3R,cAAc,CAAClwB,EAAE,CAAC;MAChD,MAAM+gC,eAAe,GAAG,IAAIp4B,eAAe,CAAC,IAAI,CAACC,eAAe,CAAC;MACjE,MAAMs4B,OAAO,GAAG,MAAMtwC,OAAO,CAAC+M,GAAG,CAACumC,IAAI,CAACp1C,GAAG,CAAC,OAAO8R,GAAG,EAAE/Q,KAAK,KAAKkxC,eAAe,CAACl4B,MAAM,CAAC,QAAQ,EAAE,CAACg5B,eAAe,EAAEx8C,SAAS,CAAC4yC,UAAU,EAAEr3B,GAAG,EAAEwgD,QAAQ,CAACvxD,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;MAClK,OAAOyqC,WAAW,CAACC,mBAAmB,CAAC;QACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;QACrCvY,MAAM,EAAE,WAAW;QACnB0Y,IAAI,EAAE,CAACm4B,OAAO,CAAC;QACf5qC,KAAK,EAAEwlC,OAAO,IAAI;UAChB,MAAMuB,MAAM,GAAG,IAAI,CAACz0B,eAAe,CAAC68B,SAAS,CAAC,cAAc,EAAE3J,OAAO,CAAC4J,IAAI,CAAC;UAC3E,IAAIrI,MAAM,CAACnyC,MAAM,KAAK,CAAC,IAAImyC,MAAM,CAACnyC,MAAM,GAAG44C,SAAS,CAAC54C,MAAM,EAAE;YAC3D,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;UAChE;UACA,OAAOkyC,MAAM,CAACvuC,GAAG,CAAC6H,CAAC,IAAI;YACrB,MAAMpG,EAAE,GAAGoG,CAAC,CAACoS,IAAI,CAAC0wC,aAAa;YAC/B,OAAO;cACLlpD,EAAE;cACFurC,OAAO;cACPnvC,IAAI,EAAEA,CAAA,KAAM,IAAI,CAACg3C,OAAO,CAAC7qC,GAAG,CAACvI,EAAE;YACjC,CAAC;UACH,CAAC,CAAC;QACJ;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;IAhEA,IAAI,CAACozC,OAAO,GAAGA,OAAO;IACtB,IAAI,CAAC/6B,eAAe,GAAGA,eAAe;IACtC,IAAI,CAACmb,OAAO,GAAGA,OAAO;EACxB;AA8DF;AAEA,MAAMs9B,eAAe,CAAC;EAEpBtzD,WAAWA,CAAC6a,eAAe,EAAE;IAAA22B,eAAA,sBADf7uB,wBAAwB,CAACrf,IAAI;IAK3C;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAjBEkuC,eAAA,iBAkBS,eAAetY,wBAAwB,CAAC,OAAOlmB,OAAO,EAAEw9B,MAAM,KAAK;MAC1E,MAAM+iB,OAAO,GAAG,MAAM,IAAI,CAAC14C,eAAe,CAACwxB,gBAAgB,CAAC,CAAC;MAC7D,OAAO,IAAI,CAACrtC,IAAI,CAACi6B,OAAO,CAACs6B,OAAO,EAAEvgD,OAAO,EAAEw9B,MAAM,CAAC;IACpD,CAAC,CAAC;IAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IApBEgB,eAAA,eAqBO,eAAetY,wBAAwB,CAAC,OAAOq6B,OAAO,EAAEvgD,OAAO,EAAEw9B,MAAM,KAAK;MACjF,OAAOjE,WAAW,CAACC,mBAAmB,CAAC;QACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;QACrCvY,MAAM,EAAE,MAAM;QACd0Y,IAAI,EAAE,CAAC,MAAMmnB,cAAc,CAACoxB,OAAO,CAAC,EAAEvgD,OAAO,EAAEw9B,MAAM;MACvD,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAjBEgB,eAAA,gBAkBQ,eAAetY,wBAAwB,CAAC,OAAOszB,QAAQ,EAAEgH,OAAO,KAAK;MAC3E,MAAMD,OAAO,GAAG,MAAM,IAAI,CAAC14C,eAAe,CAACwxB,gBAAgB,CAAC,CAAC;MAC7D,OAAO,IAAI,CAAConB,SAAS,CAACx6B,OAAO,CAACs6B,OAAO,EAAE/G,QAAQ,EAAEgH,OAAO,CAAC;IAC3D,CAAC,CAAC;IAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IApBEhiB,eAAA,oBAqBY,eAAetY,wBAAwB,CAAC,OAAOq6B,OAAO,EAAE/G,QAAQ,EAAEgH,OAAO,KAAK;MACxF,OAAOjnB,WAAW,CAACC,mBAAmB,CAAC;QACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;QACrCvY,MAAM,EAAE,WAAW;QACnB0Y,IAAI,EAAE,CAAC,MAAMmnB,cAAc,CAACoxB,OAAO,CAAC,EAAE/G,QAAQ,EAAEgH,OAAO;MACzD,CAAC,CAAC;IACJ,CAAC,CAAC;IAzGA,IAAI,CAAC34C,eAAe,GAAGA,eAAe;EACxC;AAyGF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAM64C,iBAAiB,CAAC;EAEtB1zD,WAAWA,CAAC41C,OAAO,EAAE/6B,eAAe,EAAE;IAAA22B,eAAA,sBADxBjuB,0BAA0B,CAACjgB,IAAI;IAE3C,IAAI,CAACsyC,OAAO,GAAGA,OAAO;IACtB,IAAI,CAAC/6B,eAAe,GAAGA,eAAe;EACxC;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMjL,GAAGA,CAACk9C,WAAW,EAAE;IACrB,MAAMn9B,KAAK,GAAGx4B,SAAS,CAAC6H,IAAI,CAAC,CAAA8tD,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEn9B,KAAK,KAAI,CAAC,CAAC,CAACle,QAAQ,CAAC,CAAC;IAChE,MAAMuiC,KAAK,GAAG78C,SAAS,CAAC6H,IAAI,CAAC,CAAA8tD,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAE9Y,KAAK,KAAIn9C,uBAAuB,CAAC,CAAC4a,QAAQ,CAAC,CAAC;IACtF,MAAMu7C,KAAK,GAAGt+C,IAAI,CAACtK,GAAG,CAAC,CAAC,MAAM,IAAI,CAAC8oD,UAAU,CAAC,CAAC,EAAEz7C,QAAQ,CAAC,CAAC,EAAEke,KAAK,GAAGqkB,KAAK,CAAC;IAC3E,OAAO,MAAMnxC,OAAO,CAAC+M,GAAG,CAAC,CAAC,GAAGiQ,KAAK,CAACmtC,KAAK,GAAGr9B,KAAK,CAAC,CAAC1J,IAAI,CAAC,CAAC,CAAC,CAACllB,GAAG,CAAC0N,CAAC,IAAI,IAAI,CAACmnC,OAAO,CAAC7qC,GAAG,CAAC,CAAC4kB,KAAK,GAAGlhB,CAAC,EAAEvP,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;EAC/G;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACE,MAAMguD,UAAUA,CAAA,EAAG;IACjB,OAAO,MAAM,IAAI,CAACryC,eAAe,CAAC2R,IAAI,CAAC,mBAAmB,EAAE,EAAE,CAAC;EACjE;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACE,MAAM8gC,sBAAsBA,CAACt6C,OAAO,EAAE;IACpC,OAAO,MAAM,IAAI,CAAC6H,eAAe,CAAC2R,IAAI,CAAC,aAAa,EAAE,CAACxZ,OAAO,CAAC,CAAC;EAClE;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAM45C,KAAKA,CAACvF,aAAa,EAAE;IACzB,MAAM,CAACr7C,OAAO,EAAEghD,KAAK,CAAC,GAAG,MAAMnqD,OAAO,CAAC+M,GAAG,CAAC,CAACuyB,cAAc,CAACklB,aAAa,KAAK,MAAM,IAAI,CAACxsC,eAAe,CAACwxB,gBAAgB,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAACxxB,eAAe,CAAC2R,IAAI,CAAC,mBAAmB,EAAE,EAAE,CAAC,CAAC,CAAC;IAClL,MAAMmnC,QAAQ,GAAG,MAAM,IAAI,CAAC94C,eAAe,CAAC2R,IAAI,CAAC,gBAAgB,EAAE,CAAC3M,KAAK,CAACmtC,KAAK,CAACv7C,QAAQ,CAAC,CAAC,CAAC,CAACqO,IAAI,CAAC9T,OAAO,CAAC,EAAE6T,KAAK,CAAC7gB,IAAI,CAAC6gB,KAAK,CAACmtC,KAAK,CAACv7C,QAAQ,CAAC,CAAC,CAAC,CAACwU,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IACvJ,MAAM2tC,aAAa,GAAGD,QAAQ,CAAC5yD,GAAG,CAAC,CAACrK,CAAC,EAAE+X,CAAC,KAAK;MAC3C,OAAO;QACLuE,OAAO,EAAEvE,CAAC;QACVu4C,OAAO,EAAEtwD;MACX,CAAC;IACH,CAAC,CAAC,CAAC+R,MAAM,CAAC/R,CAAC,IAAIA,CAAC,CAACswD,OAAO,CAAC5oC,EAAE,CAAC,CAAC,CAAC,CAAC;IAC/B,MAAM2vC,IAAI,GAAG,CAAC,MAAMlrD,OAAO,CAAC+M,GAAG,CAACgkD,aAAa,CAAC7yD,GAAG,CAACq2B,IAAI,IAAI,IAAI,CAACwe,OAAO,CAAC7qC,GAAG,CAACqsB,IAAI,CAACpkB,OAAO,CAAC9T,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE6B,GAAG,CAAC,CAAC8yD,eAAe,EAAE/xD,KAAK,MAAM;MACtI,GAAG+xD,eAAe;MAClB/pB,KAAK,EAAE99B,OAAO;MACd8nD,aAAa,EAAEF,aAAa,CAAC9xD,KAAK,CAAC,CAACklD,OAAO,CAAC9nD,QAAQ,CAAC;IACvD,CAAC,CAAC,CAAC;IACH,OAAO6uD,IAAI;EACb;AACF;AAEA,eAAegG,eAAeA,CAAC/nD,OAAO,EAAE5K,QAAQ,EAAE;EAChD,IAAI;IACF,MAAM8iC,QAAQ,GAAG,IAAI3sC,QAAQ,CAACyU,OAAO,EAAE1T,oBAAoB,EAAE8I,QAAQ,CAAC;IACtE,MAAM,CAACiS,IAAI,EAAEnW,OAAO,CAAC,GAAG,MAAM2F,OAAO,CAAC+M,GAAG,CAAC,CAACvY,KAAK,CAAC28D,YAAY,CAAC,MAAM9vB,QAAQ,CAAC9e,YAAY,CAAC,CAAC,CAAC,CAAC;IAAA,CAC5FlG,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,EAAE,MAAMglB,QAAQ,CAAC+vB,eAAe,CAAC,CAAC,CAAC,CAAC;IACzD,OAAO;MACL5gD,IAAI;MACJnW;IACF,CAAC;EACH,CAAC,CAAC,OAAO0L,CAAC,EAAE;IACV,OAAOvI,SAAS;EAClB;AACF;AAEA,MAAM6zD,mBAAmB,CAAC;EAGxB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEEl0D,WAAWA,CAAC41C,OAAO,EAAE/6B,eAAe,EAAEmb,OAAO,EAAE;IAAAwb,eAAA,sBAlCjCtuB,gCAAgC,CAAC5f,IAAI;IAyCnD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAzBEkuC,eAAA,mBA0BW,eAAetY,wBAAwB,CAAC,OAAO6c,SAAS,EAAEhuC,OAAO,KAAK;MAC/E,MAAMkvC,eAAe,GAAG,MAAM,IAAI,CAACrB,OAAO,CAACqW,iBAAiB,CAAC,CAAC;MAC9D,MAAMprD,KAAK,GAAG,MAAMi1C,mBAAmB,CAACC,SAAS,EAAE,IAAI,CAAC/f,OAAO,EAAEihB,eAAe,CAACxlC,QAAQ,CAAC,CAAC,EAAE1J,OAAO,CAAC;MACrG;MACA,MAAM0uC,OAAO,GAAG51C,KAAK,CAAC,CAAC,CAAC,CAAC07B,SAAS,CAAC,CAAC,EAAE17B,KAAK,CAAC,CAAC,CAAC,CAAC61C,WAAW,CAAC,GAAG,CAAC,CAAC;MAChE,KAAK,IAAIjoC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG5N,KAAK,CAAC1D,MAAM,EAAEsR,CAAC,EAAE,EAAE;QACrC,MAAMoE,GAAG,GAAGhS,KAAK,CAAC4N,CAAC,CAAC,CAAC8tB,SAAS,CAAC,CAAC,EAAE17B,KAAK,CAAC4N,CAAC,CAAC,CAACioC,WAAW,CAAC,GAAG,CAAC,CAAC;QAC5D,IAAID,OAAO,KAAK5jC,GAAG,EAAE;UACnB,MAAM,IAAIzV,KAAK,2FAAAN,MAAA,CAA2F25C,OAAO,iBAAA35C,MAAA,CAAc+V,GAAG,MAAG,CAAC;QACxI;MACF;MACA,MAAMtK,KAAK,GAAGwlC,OAAO,IAAI;QACvB,MAAM6d,KAAK,GAAG,IAAI,CAAC/wC,eAAe,CAAC68B,SAAS,CAAC,kBAAkB,EAAE3J,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAE4J,IAAI,CAAC;QAC/E,MAAMC,aAAa,GAAGgU,KAAK,CAAC,CAAC,CAAC,CAAC5wC,IAAI,CAAC68B,YAAY;QAChD,MAAMC,WAAW,GAAG8T,KAAK,CAAC,CAAC,CAAC,CAAC5wC,IAAI,CAAC+8B,UAAU;QAC5C,MAAM1vB,OAAO,GAAG,EAAE;QAClB,KAAK,IAAI7lB,EAAE,GAAGo1C,aAAa,EAAEp1C,EAAE,CAACw1C,GAAG,CAACF,WAAW,CAAC,EAAEt1C,EAAE,GAAGA,EAAE,CAACy3B,GAAG,CAAC,CAAC,CAAC,EAAE;UAChE5R,OAAO,CAACvlB,IAAI,CAAC;YACXN,EAAE;YACFurC,OAAO;YACPnvC,IAAI,EAAEA,CAAA,KAAM,IAAI,CAACg3C,OAAO,CAACsW,gBAAgB,CAAC1pD,EAAE;UAC9C,CAAC,CAAC;QACJ;QACA,OAAO6lB,OAAO;MAChB,CAAC;MACD,MAAM8rC,YAAY,GAAG,MAAMJ,eAAe,CAAC,IAAI,CAACl5C,eAAe,CAAC7O,OAAO,EAAE,IAAI,CAAC6O,eAAe,CAAC2vB,WAAW,CAAC,CAAC,CAAC;MAC5G,IAAI,IAAI,CAAC4pB,2BAA2B,CAAC,IAAI,CAACv5C,eAAe,EAAEs5C,YAAY,CAAC,EAAE;QACxE,OAAO5nB,WAAW,CAACC,mBAAmB,CAAC;UACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;UACrCvY,MAAM,EAAE,UAAU;UAClB0Y,IAAI,EAAE,CAACna,KAAK,CAAC1D,MAAM,KAAAL,MAAA,CAAK25C,OAAO,CAACnrC,QAAQ,CAAC,GAAG,CAAC,GAAGmrC,OAAO,MAAA35C,MAAA,CAAM25C,OAAO,MAAG,EAAG;UAC1EluC;QACF,CAAC,CAAC;MACJ,CAAC,MAAM;QACL;QACA,OAAOgkC,WAAW,CAACC,mBAAmB,CAAC;UACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;UACrCvY,MAAM,EAAE,UAAU;UAClB0Y,IAAI,EAAE,CAACna,KAAK,CAAC1D,MAAM,KAAAL,MAAA,CAAK25C,OAAO,CAACnrC,QAAQ,CAAC,GAAG,CAAC,GAAGmrC,OAAO,MAAA35C,MAAA,CAAM25C,OAAO,MAAG,GAAIp/C,KAAK,CAAC0a,WAAW,CAAC,EAAE,CAAC,CAAC;UACjGxJ;QACF,CAAC,CAAC;MACJ;IACF,CAAC,CAAC;IA1EA,IAAI,CAACqtC,OAAO,GAAGA,OAAO;IACtB,IAAI,CAAC/6B,eAAe,GAAGA,eAAe;IACtC,IAAI,CAACmb,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACm2B,QAAQ,GAAG,IAAI,CAACkI,uBAAuB,CAAC,CAAC;EAChD;EAwEA;AACF;AACA;EACEA,uBAAuBA,CAAA,EAAG;IACxB,IAAIprC,qBAAqB,CAAC,IAAI,CAACpO,eAAe,EAAE,mBAAmB,CAAC,EAAE;MACpE,OAAO,IAAI87B,aAAa,CAAC,IAAI,CAAC97B,eAAe,EAAE,IAAI,CAACmb,OAAO,EAAE/S,0BAA0B,CAAC3f,IAAI,EAAE,MAAM,IAAI,CAACsyC,OAAO,CAACqW,iBAAiB,CAAC,CAAC,CAAC;IACvI;IACA,OAAO5rD,SAAS;EAClB;EACA+zD,2BAA2BA,CAACv5C,eAAe,EAAEd,IAAI,EAAE;IACjD,OAAOA,IAAI,IAAIA,IAAI,CAAC1G,IAAI,KAAK,aAAa,IAAI0G,IAAI,CAAC7c,OAAO,GAAG,CAAC,IAAI,KAAK;EACzE;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMo3D,eAAe,CAAC;EAGpB;AACF;AACA;;EAEEt0D,WAAWA,CAAC41C,OAAO,EAAE/6B,eAAe,EAAEmb,OAAO,EAAE;IAAAwb,eAAA,sBANjCluB,wBAAwB,CAAChgB,IAAI;IAa3C;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IA5BEkuC,eAAA,aA6BK,eAAetY,wBAAwB,CAAC,OAAOjnB,EAAE,EAAEmhD,kBAAkB,KAAK;MAC7E,MAAMr6B,EAAE,GAAG,MAAM,IAAI,CAAC8vB,kBAAkB,CAAC52C,EAAE,EAAEmhD,kBAAkB,CAAC;MAChEr6B,EAAE,CAACkU,QAAQ,CAACc,OAAO,IAAI;QACrB,MAAM6d,KAAK,GAAG,IAAI,CAAC/wC,eAAe,CAAC68B,SAAS,CAAC,gBAAgB,EAAE3J,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAE4J,IAAI,CAAC;QAC7E,IAAIiU,KAAK,CAACzuD,MAAM,KAAK,CAAC,EAAE;UACtB,MAAM,IAAIC,KAAK,CAAC,qCAAqC,CAAC;QACxD;QACA,MAAMoF,EAAE,GAAGopD,KAAK,CAAC,CAAC,CAAC,CAAC5wC,IAAI,CAACxY,EAAE;QAC3B,OAAO;UACLA,EAAE;UACFurC,OAAO;UACPnvC,IAAI,EAAEA,CAAA,KAAM,IAAI,CAACg3C,OAAO,CAAC7qC,GAAG,CAACvI,EAAE,CAACtD,QAAQ,CAAC,CAAC;QAC5C,CAAC;MACH,CAAC,CAAC;MACF,OAAO65B,EAAE;IACX,CAAC,CAAC;IAcF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAhBEyY,eAAA,6BAiBqB,eAAetY,wBAAwB,CAAC,OAAOjnB,EAAE,EAAEe,OAAO,EAAEuhD,gBAAgB,KAAK;MACpG,MAAMtjD,QAAQ,GAAG,MAAM,IAAI,CAAC2kC,OAAO,CAACsW,gBAAgB,CAACl5C,OAAO,CAAC;MAC7D,OAAOu5B,WAAW,CAACC,mBAAmB,CAAC;QACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;QACrCvY,MAAM,EAAE,QAAQ;QAChB0Y,IAAI,EAAE,CAAC,MAAMmnB,cAAc,CAAClwB,EAAE,CAAC,EAAEe,OAAO,EAAE/B,QAAQ,CAAC4B,GAAG,EAAE0hD,gBAAgB,CAAC;QACzEhsD,KAAK,EAAEwlC,OAAO,IAAI;UAChB,OAAO;YACLvrC,EAAE,EAAErL,SAAS,CAAC6H,IAAI,CAACgU,OAAO,CAAC;YAC3B+6B,OAAO;YACPnvC,IAAI,EAAEA,CAAA,KAAM,IAAI,CAACg3C,OAAO,CAAC7qC,GAAG,CAACiI,OAAO;UACtC,CAAC;QACH;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;IA/FA,IAAI,CAAC4iC,OAAO,GAAGA,OAAO;IACtB,IAAI,CAAC/6B,eAAe,GAAGA,eAAe;IACtC,IAAI,CAACmb,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACn1B,KAAK,GAAG,IAAI,CAAC2zD,0BAA0B,CAAC,CAAC;EAChD;EAgDA;AACF;AACA;EACE,MAAM3L,kBAAkBA,CAAC52C,EAAE,EAAEmhD,kBAAkB,EAAE;IAC/C,MAAMvgD,GAAG,GAAG,MAAMgjC,kBAAkB,CAACud,kBAAkB,CAACniD,QAAQ,EAAE,IAAI,CAAC+kB,OAAO,CAAC;IAC/E,OAAOuW,WAAW,CAACC,mBAAmB,CAAC;MACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;MACrCvY,MAAM,EAAE,QAAQ;MAChB0Y,IAAI,EAAE,CAAC,MAAMmnB,cAAc,CAAClwB,EAAE,CAAC,EAAE3a,SAAS,CAAC4yC,UAAU,EAAEr3B,GAAG,EAAEugD,kBAAkB,CAAChB,MAAM;IACvF,CAAC,CAAC;EACJ;EAkCAoC,0BAA0BA,CAAA,EAAG;IAC3B,IAAIvrC,qBAAqB,CAAC,IAAI,CAACpO,eAAe,EAAE,sBAAsB,CAAC,EAAE;MACvE,OAAO,IAAIs4C,oBAAoB,CAAC,IAAI,CAACvd,OAAO,EAAE,IAAI,CAAC/6B,eAAe,EAAE,IAAI,CAACmb,OAAO,CAAC;IACnF;EACF;AACF;;AAEA;AACA;AACA;AACA,MAAMy+B,mBAAmB,GAAG,eAAe,CAAC,MAAMv9D,CAAC,CAAC+L,MAAM,CAAC;EACzD+I,OAAO,EAAEW,kBAAkB;EAC3B4F,QAAQ,EAAE1c,YAAY,CAAC+N,OAAO,CAAC,CAAC;AAClC,CAAC,CAAC,EAAE,CAAC;;AAEL;AACA;AACA;AACA,MAAM8wD,kBAAkB,GAAG,eAAe,CAAC,MAAMx9D,CAAC,CAACqH,KAAK,CAAC,CAACrH,CAAC,CAACiM,KAAK,CAACjM,CAAC,CAACsH,MAAM,CAAC,CAAC,CAAC,CAACM,SAAS,CAAC,MAAM6Q,OAAO,IAAI,MAAM9M,OAAO,CAAC+M,GAAG,CAACD,OAAO,CAAC5O,GAAG,CAACiL,OAAO,IAAIyoD,mBAAmB,CAAC5kD,UAAU,CAAC;EAC/K7D;AACF,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE9U,CAAC,CAACiM,KAAK,CAACsxD,mBAAmB,CAAC,CAAC,CAAC,EAAE,CAAC;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAME,gBAAgB,CAAC;EAErB30D,WAAWA,CAAC6a,eAAe,EAAE;IAAA22B,eAAA,sBADfxuB,4BAA4B,CAAC1f,IAAI;IA4B/C;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IArBEkuC,eAAA,aAsBK,eAAetY,wBAAwB,CAAC,OAAOsuB,kBAAkB,EAAEx0C,OAAO,EAAET,QAAQ,EAAExK,OAAO,KAAK;MACrG,OAAO,MAAM,IAAI,CAAC0/C,mBAAmB,CAACD,kBAAkB,EAAEx0C,OAAO,EAAET,QAAQ,EAAExK,OAAO,CAAC;IACvF,CAAC,CAAC;IAlDA,IAAI,CAAC8S,eAAe,GAAGA,eAAe;EACxC;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAM4sC,mBAAmBA,CAACD,kBAAkB,EAAEx0C,OAAO,EAAET,QAAQ,EAAExK,OAAO,EAAE;IACxE,IAAIsiC,SAAS,GAAG,CAAC,CAAC;IAClB,IAAItiC,OAAO,IAAIA,OAAO,CAACuxC,aAAa,EAAE;MACpCjP,SAAS,GAAG,MAAMwhB,kBAAkB,CAAC,IAAI,CAAChxC,eAAe,EAAE9S,OAAO,CAACuxC,aAAa,EAAE/mC,QAAQ,EAAExK,OAAO,CAAC0H,eAAe,EAAE1H,OAAO,CAACu4C,mBAAmB,CAAC;IACnJ;IACA,OAAO/T,WAAW,CAACC,mBAAmB,CAAC;MACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;MACrCvY,MAAM,EAAE,OAAO;MACf0Y,IAAI,EAAE,CAAC,MAAMmnB,cAAc,CAACqlB,kBAAkB,CAAC,EAAEx0C,OAAO,EAAET,QAAQ,CAAC;MACnE83B;IACF,CAAC,CAAC;EACJ;AA2BF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMuqB,8BAA8B,CAAC;EAEnC50D,WAAWA,CAAC6a,eAAe,EAAEmb,OAAO,EAAE;IAAAwb,eAAA,sBADxB3uB,mCAAmC,CAACvf,IAAI;IAQtD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IApBEkuC,eAAA,aAqBK,eAAetY,wBAAwB,CAAC,OAAOsuB,kBAAkB,EAAEx0C,OAAO,EAAET,QAAQ,EAAExK,OAAO,KAAK;MACrG,OAAO,MAAM,IAAI,CAACi9C,UAAU,CAACyC,mBAAmB,CAACD,kBAAkB,EAAEx0C,OAAO,EAAET,QAAQ,EAAExK,OAAO,CAAC;IAClG,CAAC,CAAC;IA7BA,IAAI,CAAC8S,eAAe,GAAGA,eAAe;IACtC,IAAI,CAACmb,OAAO,GAAGA,OAAO;IACtB,MAAM/kB,QAAQ,GAAG,IAAIqgC,gBAAgB,CAAC,IAAI,CAACz2B,eAAe,EAAE5F,oBAAoB,EAAE,IAAI,CAAC+gB,OAAO,CAAC;IAC/F,IAAI,CAACgvB,UAAU,GAAG,IAAI0C,0BAA0B,CAAC7sC,eAAe,EAAE5J,QAAQ,EAAE,IAAI,CAAC+kB,OAAO,CAAC;EAC3F;AA0BF;;AAEA;AACA;AACA;AACA;AACA,MAAM6+B,wBAAwB,CAAC;EAE7B70D,WAAWA,CAAC6a,eAAe,EAAEmb,OAAO,EAAE8c,KAAK,EAAE;IAAAtB,eAAA,sBAD/BpuB,kCAAkC,CAAC9f,IAAI;IAOrD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAfEkuC,eAAA,eAgBO,eAAetY,wBAAwB,CAAC,MAAM+vB,aAAa,IAAI;MACpE,MAAMC,WAAW,GAAGD,aAAa,CAAClnD,OAAO;MACzC,MAAM8kB,SAAS,GAAGoiC,aAAa,CAACpiC,SAAS;MACzC,MAAM5kB,OAAO,GAAG,MAAM,IAAI,CAACknD,0BAA0B,CAACD,WAAW,CAAC;MAClE,MAAM7e,SAAS,GAAG,MAAM,IAAI,CAACxvB,eAAe,CAAC8iC,gBAAgB,CAAC,CAAC;MAC/D;MACA,MAAMoL,iBAAiB,CAAC,IAAI,CAACluC,eAAe,EAAE5Y,OAAO,CAACq3C,aAAa,CAACtf,GAAG,CAAC/3B,OAAO,CAACsQ,QAAQ,CAAC,EAAE22C,WAAW,CAACz5C,eAAe,EAAE46B,SAAS,CAAC;MAClI,OAAOkC,WAAW,CAACC,mBAAmB,CAAC;QACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;QACrCvY,MAAM,EAAE,mBAAmB;QAC3B0Y,IAAI,EAAE,CAAC/Y,OAAO,EAAE4kB,SAAS,CAAC;QAC1BwjB,SAAS;QACT9hC,KAAK,EAAEwlC,OAAO,IAAI;UAChB,MAAM+f,CAAC,GAAG,IAAI,CAACjzC,eAAe,CAAC68B,SAAS,CAAC,2BAA2B,EAAE3J,OAAO,CAAC4J,IAAI,CAAC;UACnF,IAAImW,CAAC,CAAC3wD,MAAM,KAAK,CAAC,EAAE;YAClB,MAAM,IAAIC,KAAK,CAAC,kCAAkC,CAAC;UACrD;UACA,MAAMoF,EAAE,GAAGsrD,CAAC,CAAC,CAAC,CAAC,CAAC9yC,IAAI,CAAC0wC,aAAa;UAClC,OAAO;YACLlpD,EAAE;YACFurC;UACF,CAAC;QACH;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAfEyD,eAAA,oBAgBY,eAAetY,wBAAwB,CAAC,MAAMkwB,cAAc,IAAI;MAC1E,MAAMC,gBAAgB,GAAG,MAAMxmD,OAAO,CAAC+M,GAAG,CAACw5C,cAAc,CAACroD,GAAG,CAAC,MAAM+7B,CAAC,IAAI;QACvE,MAAM76B,OAAO,GAAG,MAAM,IAAI,CAACknD,0BAA0B,CAACrsB,CAAC,CAAC/6B,OAAO,CAAC;QAChE,MAAM8kB,SAAS,GAAGiW,CAAC,CAACjW,SAAS;QAC7B,MAAMrX,KAAK,GAAGstB,CAAC,CAAC/6B,OAAO,CAACyN,KAAK;QAC7B,IAAIrY,SAAS,CAAC6H,IAAI,CAACwQ,KAAK,CAAC,CAAC4O,EAAE,CAAC,CAAC,CAAC,EAAE;UAC/B,MAAM,IAAIhhB,KAAK,CAAC,uEAAuE,CAAC;QAC1F;QACA,OAAO;UACL6E,OAAO;UACP4kB;QACF,CAAC;MACH,CAAC,CAAC,CAAC;MACH,MAAMmsB,eAAe,GAAG,IAAIp4B,eAAe,CAAC,IAAI,CAACC,eAAe,CAAC;MACjE,MAAMs4B,OAAO,GAAGkW,gBAAgB,CAACtoD,GAAG,CAAC0lC,CAAC,IAAI;QACxC,OAAOuM,eAAe,CAACl4B,MAAM,CAAC,mBAAmB,EAAE,CAAC2rB,CAAC,CAACxkC,OAAO,EAAEwkC,CAAC,CAAC5f,SAAS,CAAC,CAAC;MAC9E,CAAC,CAAC;MACF,IAAIqC,WAAW,CAAC,WAAW,EAAE,IAAI,CAACrO,eAAe,CAAC,EAAE;QAClD,OAAO0xB,WAAW,CAACC,mBAAmB,CAAC;UACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;UACrCvY,MAAM,EAAE,WAAW;UACnB0Y,IAAI,EAAE,CAACm4B,OAAO,CAAC;UACf5qC,KAAK,EAAEwlC,OAAO,IAAI;YAChB,MAAMuB,MAAM,GAAG,IAAI,CAACz0B,eAAe,CAAC68B,SAAS,CAAC,2BAA2B,EAAE3J,OAAO,CAAC4J,IAAI,CAAC;YACxF,IAAIrI,MAAM,CAACnyC,MAAM,KAAK,CAAC,EAAE;cACvB,MAAM,IAAIC,KAAK,CAAC,kCAAkC,CAAC;YACrD;YACA,OAAOkyC,MAAM,CAACvuC,GAAG,CAACqwB,GAAG,KAAK;cACxB5uB,EAAE,EAAE4uB,GAAG,CAACpW,IAAI,CAAC0wC,aAAa;cAC1B3d;YACF,CAAC,CAAC,CAAC;UACL;QACF,CAAC,CAAC;MACJ,CAAC,MAAM;QACL,MAAM,IAAI3wC,KAAK,CAAC,2CAA2C,CAAC;MAC9D;IACF,CAAC,CAAC;IAnGA,IAAI,CAACyd,eAAe,GAAGA,eAAe;IACtC,IAAI,CAACmb,OAAO,GAAGA,OAAO;IACtB,IAAI,CAAC8c,KAAK,GAAGA,KAAK;EACpB;EAkGA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMmB,MAAMA,CAACgV,aAAa,EAAE;IAC1B,MAAMC,WAAW,GAAGD,aAAa,CAAClnD,OAAO;IACzC,MAAM8kB,SAAS,GAAGoiC,aAAa,CAACpiC,SAAS;IACzC,MAAM5kB,OAAO,GAAG,MAAM,IAAI,CAACknD,0BAA0B,CAACD,WAAW,CAAC;IAClE,MAAMI,YAAY,GAAG,MAAM,IAAI,CAACzuC,eAAe,CAAC2R,IAAI,CAAC,QAAQ,EAAE,CAACvqB,OAAO,EAAE4kB,SAAS,CAAC,CAAC;IACpF,OAAOyiC,YAAY,CAAC,CAAC,CAAC;EACxB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMC,QAAQA,CAACiF,aAAa,EAAE;IAC5B,MAAMzsD,OAAO,GAAG;MACd,GAAGysD,aAAa;MAChBx7C,OAAO,EAAE1b,SAAS,CAAC4yC;IACrB,CAAC;IACD,OAAO,IAAI,CAAC4qB,mBAAmB,CAAC/yD,OAAO,CAAC;EAC1C;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAM+yD,mBAAmBA,CAACtG,aAAa,EAAE;IACvC,MAAMuG,QAAQ,GAAG,MAAM,IAAI,CAACC,yBAAyB,CAAC,CAACxG,aAAa,CAAC,CAAC;IACtE,OAAOuG,QAAQ,CAAC,CAAC,CAAC;EACpB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMvL,aAAaA,CAACC,cAAc,EAAE;IAClC,MAAMsL,QAAQ,GAAGtL,cAAc,CAAC1oD,GAAG,CAACgB,OAAO,KAAK;MAC9C,GAAGA,OAAO;MACViR,OAAO,EAAE1b,SAAS,CAAC4yC;IACrB,CAAC,CAAC,CAAC;IACH,OAAO,IAAI,CAAC8qB,yBAAyB,CAACD,QAAQ,CAAC;EACjD;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMC,yBAAyBA,CAACvL,cAAc,EAAE;IAAA,IAAAwL,YAAA;IAC9C,QAAAA,YAAA,GAAM,IAAI,CAACniB,KAAK,cAAAmiB,YAAA,uBAAVA,YAAA,CAAYhhB,MAAM,CAAC,CAAC,QAAQ,CAAC,EAAE,MAAM,IAAI,CAACp5B,eAAe,CAACwxB,gBAAgB,CAAC,CAAC,CAAC;IACnF,MAAMsd,cAAc,GAAG,MAAM9mD,OAAO,CAAC+M,GAAG,CAAC65C,cAAc,CAAC1oD,GAAG,CAACovB,CAAC,IAAIpd,oCAAoC,CAAClD,UAAU,CAACsgB,CAAC,CAAC,CAAC,CAAC;IACrH,MAAM4lB,SAAS,GAAG4T,cAAc,CAAC5oD,GAAG,CAAC87B,CAAC,IAAIA,CAAC,CAAC5rB,QAAQ,CAAC;IACrD,MAAMklC,IAAI,GAAG,MAAML,mBAAmB,CAACC,SAAS,EAAE,IAAI,CAAC/f,OAAO,CAAC;IAC/D,MAAM5yB,OAAO,GAAG,MAAM,IAAI,CAACyX,eAAe,CAAC28B,UAAU,CAAC,CAAC;IACvD,MAAMhsC,MAAM,GAAG,IAAI,CAACqP,eAAe,CAAC0vB,SAAS,CAAC,CAAC;IAC/C9yC,SAAS,CAAC+T,MAAM,EAAE,qBAAqB,CAAC;IACxC,MAAM0pD,YAAY,GAAG,MAAMnB,eAAe,CAAC,IAAI,CAACl5C,eAAe,CAAC7O,OAAO,EAAE,IAAI,CAAC6O,eAAe,CAAC2vB,WAAW,CAAC,CAAC,CAAC;IAC5G,MAAM+M,gBAAgB,GAAG,CAAA2d,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAE7hD,IAAI,MAAK,cAAc;IAC9D,OAAO,MAAMxQ,OAAO,CAAC+M,GAAG,CAAC+5C,cAAc,CAAC5oD,GAAG,CAAC,OAAOovB,CAAC,EAAE1hB,CAAC,KAAK;MAC1D,MAAMoE,GAAG,GAAGsjC,IAAI,CAAC1nC,CAAC,CAAC;MACnB,MAAMm7C,YAAY,GAAG,MAAM32C,0BAA0B,CAACpD,UAAU,CAAC;QAC/D,GAAGsgB,CAAC;QACJtd;MACF,CAAC,CAAC;MACF,MAAMgU,SAAS,GAAG,MAAM,IAAI,CAAChM,eAAe,CAACkkC,aAAa,CAACvzC,MAAM,EAAE;QACjElI,IAAI,EAAEi0C,gBAAgB,GAAG,cAAc,GAAG,sBAAsB;QAChEr6C,OAAO,EAAE,GAAG;QACZkG,OAAO;QACPqmC,iBAAiB,EAAE,IAAI,CAAC5uB,eAAe,CAAC7O;MAC1C,CAAC,EAAE;QACD69C,WAAW,EAAEt2C;MACf,CAAC;MACD;MACA,MAAM,IAAI,CAAC41C,0BAA0B,CAACS,YAAY,CAAC,CAAC;MACpD,OAAO;QACL7nD,OAAO,EAAE6nD,YAAY;QACrB/iC,SAAS,EAAEA,SAAS,CAAC3nB,QAAQ,CAAC;MAChC,CAAC;IACH,CAAC,CAAC,CAAC;EACL;;EAEA;AACF;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMiqD,0BAA0BA,CAACD,WAAW,EAAE;IAC5C,MAAMkH,uBAAuB,GAAG,MAAMpQ,mBAAmB,CAAC,IAAI,CAACnlC,eAAe,CAAC2vB,WAAW,CAAC,CAAC,EAAE0e,WAAW,CAAC15C,KAAK,EAAE05C,WAAW,CAACz5C,eAAe,CAAC;IAC7I,OAAO;MACLwC,EAAE,EAAEi3C,WAAW,CAACj3C,EAAE;MAClBe,OAAO,EAAEk2C,WAAW,CAACl2C,OAAO;MAC5BH,GAAG,EAAEq2C,WAAW,CAACr2C,GAAG;MACpBN,QAAQ,EAAE22C,WAAW,CAAC32C,QAAQ;MAC9B+mC,aAAa,EAAE8W,uBAAuB;MACtC7W,QAAQ,EAAE2P,WAAW,CAACz5C,eAAe;MACrCw6C,sBAAsB,EAAEf,WAAW,CAACh3C,aAAa;MACjD83C,oBAAoB,EAAEd,WAAW,CAAC/2C,WAAW;MAC7CC,GAAG,EAAE82C,WAAW,CAAC92C,GAAG;MACpBM,gBAAgB,EAAEw2C,WAAW,CAACx2C,gBAAgB;MAC9CC,UAAU,EAAEu2C,WAAW,CAACv2C,UAAU;MAClCN,oBAAoB,EAAE62C,WAAW,CAAC72C;IACpC,CAAC;EACH;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM8iD,OAAO,CAAC;EAEZ,IAAI/xD,OAAOA,CAAA,EAAG;IACZ,OAAO,IAAI,CAACgnD,QAAQ;EACtB;EACApqD,WAAWA,CAAC6a,eAAe,EAAEmb,OAAO,EAAE5yB,OAAO,EAAE;IAAAouC,eAAA,sBAJjC9tB,eAAe,CAACpgB,IAAI;IA4GlC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAdEkuC,eAAA,mBAeW,eAAetY,wBAAwB,CAAC,CAAC,MAAM;MACxD,IAAIsqB,KAAK,GAAG,IAAI;MAChB,OAAO,gBAAgBvxC,EAAE,EAAEe,OAAO,EAAEw9B,MAAM,EAAE;QAC1C,IAAI5xC,IAAI,GAAGwB,SAAS,CAACjD,MAAM,GAAG,CAAC,IAAIiD,SAAS,CAAC,CAAC,CAAC,KAAKC,SAAS,GAAGD,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QAClF,MAAMpB,IAAI,GAAG,MAAMwkD,KAAK,CAAC3oC,eAAe,CAACwxB,gBAAgB,CAAC,CAAC;QAC3D,OAAOE,WAAW,CAACC,mBAAmB,CAAC;UACrC3xB,eAAe,EAAE2oC,KAAK,CAAC3oC,eAAe;UACtCvY,MAAM,EAAE,kBAAkB;UAC1B0Y,IAAI,EAAE,CAAChc,IAAI,EAAE,MAAMmjC,cAAc,CAAClwB,EAAE,CAAC,EAAEe,OAAO,EAAEw9B,MAAM,EAAE5xC,IAAI;QAC9D,CAAC,CAAC;MACJ,CAAC;IACH,CAAC,EAAE,CAAC,CAAC;IAEL;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAdE4yC,eAAA,uBAee,eAAetY,wBAAwB,CAAC,CAAC,MAAM;MAC5D,IAAI2uB,MAAM,GAAG,IAAI;MACjB,OAAO,gBAAgB7oD,IAAI,EAAEiT,EAAE,EAAEe,OAAO,EAAEw9B,MAAM,EAAE;QAChD,IAAI5xC,IAAI,GAAGwB,SAAS,CAACjD,MAAM,GAAG,CAAC,IAAIiD,SAAS,CAAC,CAAC,CAAC,KAAKC,SAAS,GAAGD,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QAClF,OAAOmsC,WAAW,CAACC,mBAAmB,CAAC;UACrC3xB,eAAe,EAAEgtC,MAAM,CAAChtC,eAAe;UACvCvY,MAAM,EAAE,kBAAkB;UAC1B0Y,IAAI,EAAE,CAAC,MAAMmnB,cAAc,CAACnjC,IAAI,CAAC,EAAE,MAAMmjC,cAAc,CAAClwB,EAAE,CAAC,EAAEe,OAAO,EAAEw9B,MAAM,EAAE5xC,IAAI;QACpF,CAAC,CAAC;MACJ,CAAC;IACH,CAAC,EAAE,CAAC,CAAC;IAEL;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAXE4yC,eAAA,4BAYoB,eAAetY,wBAAwB,CAAC,OAAOs3B,QAAQ,EAAEC,QAAQ,KAAK;MACxF,OAAOlkB,WAAW,CAACC,mBAAmB,CAAC;QACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;QACrCvY,MAAM,EAAE,mBAAmB;QAC3B0Y,IAAI,EAAE,CAACw1C,QAAQ,EAAEC,QAAQ;MAC3B,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IA9BEjf,eAAA,kBA+BU,eAAetY,wBAAwB,CAAC,CAAC,MAAM;MACvD,IAAIk8B,MAAM,GAAG,IAAI;MACjB,OAAO,gBAAgBpiD,OAAO,EAAEwgC,SAAS,EAAE+c,WAAW,EAAE;QACtD,IAAI3xD,IAAI,GAAGwB,SAAS,CAACjD,MAAM,GAAG,CAAC,IAAIiD,SAAS,CAAC,CAAC,CAAC,KAAKC,SAAS,GAAGD,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QAClF,MAAMpB,IAAI,GAAGuxD,WAAW,GAAG,MAAMpuB,cAAc,CAACouB,WAAW,CAAC,GAAG,MAAM6E,MAAM,CAACv6C,eAAe,CAACwxB,gBAAgB,CAAC,CAAC;QAC9G,MAAM+e,SAAS,GAAG,MAAMgK,MAAM,CAAChK,SAAS,CAACpsD,IAAI,EAAEgU,OAAO,CAAC;QACvD,MAAMoC,KAAK,GAAG,MAAMs/C,kBAAkB,CAAC7kD,UAAU,CAAC2jC,SAAS,CAAC;QAC5D,MAAM6hB,cAAc,GAAGjgD,KAAK,CAACpN,MAAM,CAAC,CAACstD,IAAI,EAAEvsD,IAAI,KAAK;UAClD,OAAO5R,SAAS,CAAC6H,IAAI,CAACs2D,IAAI,CAAC,CAACr7B,GAAG,CAAC9iC,SAAS,CAAC6H,IAAI,CAAC,CAAA+J,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEwJ,QAAQ,KAAI,CAAC,CAAC,CAAC;QACtE,CAAC,EAAEpb,SAAS,CAAC6H,IAAI,CAAC,CAAC,CAAC,CAAC;QACrB,IAAIosD,SAAS,CAAC3c,EAAE,CAACt3C,SAAS,CAAC6H,IAAI,CAACq2D,cAAc,CAAC,CAAC,EAAE;UAChD,MAAM,IAAIj4D,KAAK,oBAAAN,MAAA,CAAoBsuD,SAAS,CAAClsD,QAAQ,CAAC,CAAC,kCAAApC,MAAA,CAA+Bu4D,cAAc,CAACn2D,QAAQ,CAAC,CAAC,WAAQ,CAAC;QAC1H;QACA,MAAM8zC,eAAe,GAAG,IAAIp4B,eAAe,CAACw6C,MAAM,CAACv6C,eAAe,CAAC;QACnE,MAAMs4B,OAAO,GAAG/9B,KAAK,CAACrU,GAAG,CAACw1B,IAAI,IAAI;UAChC,IAAI;YACFvqB,OAAO,EAAEiG,EAAE;YACXM;UACF,CAAC,GAAGgkB,IAAI;UACR,OAAOyc,eAAe,CAACl4B,MAAM,CAAC,kBAAkB,EAAE,CAAC9b,IAAI,EAAEiT,EAAE,EAAEe,OAAO,EAAET,QAAQ,EAAE3T,IAAI,CAAC,CAAC;QACxF,CAAC,CAAC;QACF,OAAO2tC,WAAW,CAACC,mBAAmB,CAAC;UACrC3xB,eAAe,EAAEu6C,MAAM,CAACv6C,eAAe;UACvCvY,MAAM,EAAE,WAAW;UACnB0Y,IAAI,EAAE,CAACm4B,OAAO;QAChB,CAAC,CAAC;MACJ,CAAC;IACH,CAAC,EAAE,CAAC,CAAC;IAqFL;IAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IA5BE3B,eAAA,eA6BO,eAAetY,wBAAwB,CAAC,MAAMk6B,kBAAkB,IAAI;MACzE,OAAO,IAAI,CAAC/I,MAAM,CAACpxB,OAAO,CAAC,MAAM,IAAI,CAACpe,eAAe,CAACwxB,gBAAgB,CAAC,CAAC,EAAE+mB,kBAAkB,CAAC;IAC/F,CAAC,CAAC;IAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IA5BE5hB,eAAA,iBA6BS,eAAetY,wBAAwB,CAAC,OAAOoxB,QAAQ,EAAE8I,kBAAkB,KAAK;MACvF,OAAOlJ,aAAa,CAAC,IAAI,CAACK,QAAQ,EAAEjnC,wBAAwB,CAAC,CAACrR,EAAE,CAACgnB,OAAO,CAACqxB,QAAQ,EAAE8I,kBAAkB,CAAC;IACxG,CAAC,CAAC;IAeF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAbE5hB,eAAA,+BAcuB,eAAetY,wBAAwB,CAAC,OAAOlmB,OAAO,EAAEuhD,gBAAgB,KAAK;MAClG,OAAOrK,aAAa,CAAC,IAAI,CAACK,QAAQ,EAAEjnC,wBAAwB,CAAC,CAACiyC,kBAAkB,CAACt8B,OAAO,CAAC,MAAM,IAAI,CAACpe,eAAe,CAACwxB,gBAAgB,CAAC,CAAC,EAAEr5B,OAAO,EAAEuhD,gBAAgB,CAAC;IACpK,CAAC,CAAC;IAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;IAPE/iB,eAAA,iCAQyB,eAAetY,wBAAwB,CAAC,OAAOoxB,QAAQ,EAAEt3C,OAAO,EAAEuhD,gBAAgB,KAAK;MAC9G,OAAOrK,aAAa,CAAC,IAAI,CAACK,QAAQ,EAAEjnC,wBAAwB,CAAC,CAACiyC,kBAAkB,CAACt8B,OAAO,CAACqxB,QAAQ,EAAEt3C,OAAO,EAAEuhD,gBAAgB,CAAC;IAC/H,CAAC,CAAC;IAEF;IAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IA9BE/iB,eAAA,oBA+BY,eAAetY,wBAAwB,CAAC,MAAMk6B,kBAAkB,IAAI;MAC9E,OAAO,IAAI,CAAC1C,WAAW,CAACz3B,OAAO,CAAC,MAAM,IAAI,CAACpe,eAAe,CAACwxB,gBAAgB,CAAC,CAAC,EAAE+mB,kBAAkB,CAAC;IACpG,CAAC,CAAC;IAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAjCE5hB,eAAA,sBAkCc,eAAetY,wBAAwB,CAAC,OAAOoxB,QAAQ,EAAE8I,kBAAkB,KAAK;MAAA,IAAAoC,eAAA;MAC5F,OAAOtL,aAAa,EAAAsL,eAAA,GAAC,IAAI,CAACjL,QAAQ,cAAAiL,eAAA,uBAAbA,eAAA,CAAe30D,KAAK,EAAEwiB,8BAA8B,CAAC,CAACpR,EAAE,CAACgnB,OAAO,CAACqxB,QAAQ,EAAE8I,kBAAkB,CAAC;IACrH,CAAC,CAAC;IAEF;IAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAlBE5hB,eAAA,eAmBO,eAAetY,wBAAwB,CAAC,OAAOlmB,OAAO,EAAEw9B,MAAM,KAAK;MACxE,OAAO0Z,aAAa,CAAC,IAAI,CAACO,QAAQ,EAAE9nC,wBAAwB,CAAC,CAAC+nC,MAAM,CAACzxB,OAAO,CAACjmB,OAAO,EAAEw9B,MAAM,CAAC;IAC/F,CAAC,CAAC;IAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IArBEgB,eAAA,mBAsBW,eAAetY,wBAAwB,CAAC,OAAOq6B,OAAO,EAAEvgD,OAAO,EAAEw9B,MAAM,KAAK;MACrF,OAAO0Z,aAAa,CAAC,IAAI,CAACO,QAAQ,EAAE9nC,wBAAwB,CAAC,CAAC3jB,IAAI,CAACi6B,OAAO,CAACs6B,OAAO,EAAEvgD,OAAO,EAAEw9B,MAAM,CAAC;IACtG,CAAC,CAAC;IAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAlBEgB,eAAA,oBAmBY,eAAetY,wBAAwB,CAAC,OAAOszB,QAAQ,EAAEgH,OAAO,KAAK;MAC/E,OAAOtJ,aAAa,CAAC,IAAI,CAACO,QAAQ,EAAE9nC,wBAAwB,CAAC,CAAC9hB,KAAK,CAACo4B,OAAO,CAACuzB,QAAQ,EAAEgH,OAAO,CAAC;IAChG,CAAC,CAAC;IAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IArBEhiB,eAAA,wBAsBgB,eAAetY,wBAAwB,CAAC,OAAOq6B,OAAO,EAAE/G,QAAQ,EAAEgH,OAAO,KAAK;MAC5F,OAAOtJ,aAAa,CAAC,IAAI,CAACO,QAAQ,EAAE9nC,wBAAwB,CAAC,CAAC8wC,SAAS,CAACx6B,OAAO,CAACs6B,OAAO,EAAE/G,QAAQ,EAAEgH,OAAO,CAAC;IAC7G,CAAC,CAAC;IAEF;IAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IA1BEhiB,eAAA,mBA2BW,eAAetY,wBAAwB,CAAC,OAAO6c,SAAS,EAAEhuC,OAAO,KAAK;MAC/E,OAAOmiD,aAAa,CAAC,IAAI,CAAC6G,YAAY,EAAE7tC,gCAAgC,CAAC,CAAC8tC,QAAQ,CAAC/3B,OAAO,CAAC8c,SAAS,EAAEhuC,OAAO,CAAC;IAChH,CAAC,CAAC;IA0BF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IApBEypC,eAAA,gBAqBQ,eAAetY,wBAAwB,CAAC,OAAOlmB,OAAO,EAAET,QAAQ,EAAExK,OAAO,KAAK;MACpF,OAAO,IAAI,CAAC4iD,OAAO,CAAC1xB,OAAO,CAAC,MAAM,IAAI,CAACpe,eAAe,CAACwxB,gBAAgB,CAAC,CAAC,EAAEr5B,OAAO,EAAET,QAAQ,EAAExK,OAAO,CAAC;IACxG,CAAC,CAAC;IAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAtBEypC,eAAA,kBAuBU,eAAetY,wBAAwB,CAAC,OAAOsuB,kBAAkB,EAAEx0C,OAAO,EAAET,QAAQ,EAAExK,OAAO,KAAK;MAC1G,MAAMmpD,mBAAmB,GAAG,IAAI,CAACA,mBAAmB;MACpD,MAAMlP,KAAK,GAAG,IAAI,CAACmP,WAAW;MAC9B,IAAID,mBAAmB,EAAE;QACvB,OAAOA,mBAAmB,CAACj/C,EAAE,CAACgnB,OAAO,CAACuuB,kBAAkB,EAAEx0C,OAAO,EAAET,QAAQ,EAAExK,OAAO,CAAC;MACvF;MACA,IAAIi6C,KAAK,EAAE;QACT,OAAOA,KAAK,CAAC/vC,EAAE,CAACgnB,OAAO,CAACuuB,kBAAkB,EAAEx0C,OAAO,EAAET,QAAQ,EAAExK,OAAO,CAAC;MACzE;MACA,MAAM,IAAIuV,4BAA4B,CAAC0F,4BAA4B,CAAC;IACtE,CAAC,CAAC;IAltBA,IAAI,CAACnI,eAAe,GAAGA,eAAe;IACtC,IAAI,CAACmb,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACq7B,KAAK,GAAG,IAAI,CAACoE,uBAAuB,CAAC,CAAC;IAC3C,IAAI,CAAClL,QAAQ,GAAG,IAAI,CAACmL,qBAAqB,CAAC,CAAC;IAC5C,IAAI,CAACjL,QAAQ,GAAG,IAAI,CAACkL,qBAAqB,CAAC,CAAC;IAC5C,IAAI,CAAC5E,YAAY,GAAG,IAAI,CAAC6E,yBAAyB,CAAC,CAAC;IACpD,IAAI,CAAC3K,iBAAiB,GAAG,IAAI,CAAC4K,8BAA8B,CAAC,CAAC;IAC9D,IAAI,CAAC1E,WAAW,GAAG,IAAI,CAAC2E,sBAAsB,CAAC,CAAC;IAChD,IAAI,CAAC5E,mBAAmB,GAAG,IAAI,CAAC6E,oCAAoC,CAAC,CAAC;IACtE,IAAI,CAAC3L,QAAQ,GAAGhnD,OAAO;EACzB;;EAEA;AACF;AACA;EACE+nD,gBAAgBA,CAACjrD,OAAO,EAAE;IACxB,IAAI,CAAC2a,eAAe,CAACwiC,sBAAsB,CAACn9C,OAAO,CAAC;EACtD;EACAmoC,UAAUA,CAAA,EAAG;IACX,OAAO,IAAI,CAACxtB,eAAe,CAAC7O,OAAO;EACrC;;EAEA;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMjB,GAAGA,CAACiI,OAAO,EAAE;IACjB,MAAM,CAACo/C,MAAM,EAAEnhD,QAAQ,CAAC,GAAG,MAAMpO,OAAO,CAAC+M,GAAG,CAAC,CAAC,IAAI,CAACiL,eAAe,CAAC2R,IAAI,CAAC,aAAa,EAAE,CAACxZ,OAAO,CAAC,CAAC,CAACslB,KAAK,CAAC,MAAMnhC,SAAS,CAAC6H,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAACktD,gBAAgB,CAACl5C,OAAO,CAAC,CAACslB,KAAK,CAAC,OAAO;MAC5K91B,EAAE,EAAEwQ,OAAO,CAAC9T,QAAQ,CAAC,CAAC;MACtB2T,GAAG,EAAE,EAAE;MACP,GAAGiiC;IACL,CAAC,CAAC,CAAC,CAAC,CAAC;IACL,OAAO;MACLhL,KAAK,EAAExyC,SAAS,CAAC+W,WAAW;MAC5B4C,QAAQ;MACRoC,IAAI,EAAE,SAAS;MACf++C,MAAM,EAAEA,MAAM,CAAClzD,QAAQ,CAAC;IAC1B,CAAC;EACH;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMmsD,WAAWA,CAACr4C,OAAO,EAAE;IACzB,IAAIiW,qBAAqB,CAAC,IAAI,CAACpO,eAAe,EAAE,eAAe,CAAC,EAAE;MAChE,OAAO,MAAM,IAAI,CAACA,eAAe,CAAC2R,IAAI,CAAC,aAAa,EAAE,CAACxZ,OAAO,CAAC,CAAC;IAClE,CAAC,MAAM;MACL,MAAM,IAAIsK,4BAA4B,CAACmG,sBAAsB,CAAC;IAChE;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAM2nC,SAASA,CAACp/C,OAAO,EAAEgH,OAAO,EAAE;IAChC,OAAO,MAAM,IAAI,CAAC6H,eAAe,CAAC2R,IAAI,CAAC,WAAW,EAAE,CAAC,MAAM2V,cAAc,CAACn2B,OAAO,CAAC,EAAEgH,OAAO,CAAC,CAAC;EAC/F;;EAEA;AACF;AACA;EACE,MAAMg0C,OAAOA,CAACh0C,OAAO,EAAE;IACrB,OAAO,MAAM,IAAI,CAACo4C,SAAS,CAAC,MAAM,IAAI,CAACvwC,eAAe,CAACwxB,gBAAgB,CAAC,CAAC,EAAEr5B,OAAO,CAAC;EACrF;;EAEA;AACF;AACA;AACA;AACA;EACE,MAAMq/C,UAAUA,CAACrmD,OAAO,EAAEwkD,QAAQ,EAAE;IAClC,OAAO,MAAM,IAAI,CAAC31C,eAAe,CAAC2R,IAAI,CAAC,kBAAkB,EAAE,CAAC,MAAM2V,cAAc,CAACn2B,OAAO,CAAC,EAAE,MAAMm2B,cAAc,CAACquB,QAAQ,CAAC,CAAC,CAAC;EAC7H;EAyIA;AACF;AACA;AACA;EACE,MAAMvE,iBAAiBA,CAAA,EAAG;IACxB,IAAI/iC,WAAW,CAAC,mBAAmB,EAAE,IAAI,CAACrO,eAAe,CAAC,EAAE;MAC1D,OAAO,MAAM,IAAI,CAACA,eAAe,CAAC2R,IAAI,CAAC,mBAAmB,EAAE,EAAE,CAAC;IACjE,CAAC,MAAM;MACL,MAAM,IAAIpvB,KAAK,CAAC,qGAAqG,CAAC;IACxH;EACF;;EAEA;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAM81C,MAAMA,CAAC4Z,WAAW,EAAE;IACxB,OAAO5C,aAAa,CAAC,IAAI,CAACmH,KAAK,EAAE9tC,0BAA0B,CAAC,CAAC3T,GAAG,CAACk9C,WAAW,CAAC;EAC/E;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMI,UAAUA,CAAA,EAAG;IACjB,OAAOhD,aAAa,CAAC,IAAI,CAACmH,KAAK,EAAE9tC,0BAA0B,CAAC,CAAC2pC,UAAU,CAAC,CAAC;EAC3E;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMI,sBAAsBA,CAACt6C,OAAO,EAAE;IACpC,OAAOk3C,aAAa,CAAC,IAAI,CAACmH,KAAK,EAAE9tC,0BAA0B,CAAC,CAAC+pC,sBAAsB,CAACt6C,OAAO,CAAC;EAC9F;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMy/C,QAAQA,CAACpL,aAAa,EAAE;IAC5B,IAAIA,aAAa,EAAE;MACjBA,aAAa,GAAG,MAAMllB,cAAc,CAACklB,aAAa,CAAC;IACrD;IACA,OAAO6C,aAAa,CAAC,IAAI,CAACmH,KAAK,EAAE9tC,0BAA0B,CAAC,CAACqpC,KAAK,CAACvF,aAAa,CAAC;EACnF;EAsEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMwB,kBAAkBA,CAACyB,QAAQ,EAAE8I,kBAAkB,EAAE;IACrD,OAAOlJ,aAAa,CAAC,IAAI,CAACK,QAAQ,EAAEjnC,wBAAwB,CAAC,CAACulC,kBAAkB,CAACyB,QAAQ,EAAE8I,kBAAkB,CAAC;EAChH;EAgPA;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAM3L,mBAAmBA,CAACD,kBAAkB,EAAEx0C,OAAO,EAAET,QAAQ,EAAExK,OAAO,EAAE;IACxE,MAAMmpD,mBAAmB,GAAG,IAAI,CAACA,mBAAmB;IACpD,MAAMlP,KAAK,GAAG,IAAI,CAACmP,WAAW;IAC9B,IAAID,mBAAmB,EAAE;MACvB,OAAOA,mBAAmB,CAAClM,UAAU,CAACyC,mBAAmB,CAACD,kBAAkB,EAAEx0C,OAAO,EAAET,QAAQ,EAAExK,OAAO,CAAC;IAC3G;IACA,IAAIi6C,KAAK,EAAE;MACT,OAAOA,KAAK,CAACyF,mBAAmB,CAACD,kBAAkB,EAAEx0C,OAAO,EAAET,QAAQ,EAAExK,OAAO,CAAC;IAClF;IACA,MAAM,IAAIuV,4BAA4B,CAAC0F,4BAA4B,CAAC;EACtE;EA8DA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI4kC,eAAeA,CAAA,EAAG;IACpB,OAAOsC,aAAa,CAAC,IAAI,CAACgH,mBAAmB,EAAEruC,mCAAmC,CAAC,CAACmiC,UAAU;EAChG;;EAEA;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAIn+B,SAASA,CAAA,EAAG;IACd,OAAOqjC,aAAa,CAAC,IAAI,CAACe,iBAAiB,EAAE7nC,kCAAkC,CAAC;EAClF;;EAEA;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI+oC,QAAQA,CAAA,EAAG;IAAA,IAAA6J,mBAAA;IACb,OAAO9L,aAAa,EAAA8L,mBAAA,GAAC,IAAI,CAACjF,YAAY,cAAAiF,mBAAA,uBAAjBA,mBAAA,CAAmB7J,QAAQ,EAAElpC,0BAA0B,CAAC;EAC/E;;EAEA;AACF;AACA;;EAEE;AACF;AACA;AACA;EACE,MAAMipC,gBAAgBA,CAACl5C,OAAO,EAAE;IAC9B,MAAMgiC,QAAQ,GAAG,MAAM,IAAI,CAACn6B,eAAe,CAAC2R,IAAI,CAAC,KAAK,EAAE,CAACxZ,OAAO,CAAC,CAAC;IAClE,IAAI,CAACgiC,QAAQ,EAAE;MACb,MAAM,IAAIz5B,aAAa,CAAC,CAAC;IAC3B;IACA,OAAOw5B,kBAAkB,CAAC/hC,OAAO,EAAEgiC,QAAQ,EAAE,IAAI,CAAChf,OAAO,CAAC;EAC5D;EACAy/B,uBAAuBA,CAAA,EAAG;IACxB,IAAIxsC,qBAAqB,CAAC,IAAI,CAACpO,eAAe,EAAE,mBAAmB,CAAC,EAAE;MACpE,OAAO,IAAI64C,iBAAiB,CAAC,IAAI,EAAE,IAAI,CAAC74C,eAAe,CAAC;IAC1D;EACF;EACA66C,qBAAqBA,CAAA,EAAG;IACtB,IAAIzsC,qBAAqB,CAAC,IAAI,CAACpO,eAAe,EAAE,iBAAiB,CAAC,EAAE;MAClE,OAAO,IAAIy5C,eAAe,CAAC,IAAI,EAAE,IAAI,CAACz5C,eAAe,EAAE,IAAI,CAACmb,OAAO,CAAC;IACtE;IACA,OAAO31B,SAAS;EAClB;EACAs1D,qBAAqBA,CAAA,EAAG;IACtB,IAAI1sC,qBAAqB,CAAC,IAAI,CAACpO,eAAe,EAAE,iBAAiB,CAAC,EAAE;MAClE,OAAO,IAAIy4C,eAAe,CAAC,IAAI,CAACz4C,eAAe,CAAC;IAClD;IACA,OAAOxa,SAAS;EAClB;EACAu1D,yBAAyBA,CAAA,EAAG;IAC1B,IAAI3sC,qBAAqB,CAAC,IAAI,CAACpO,eAAe,EAAE,uBAAuB,CAAC,IAAIoO,qBAAqB,CAAC,IAAI,CAACpO,eAAe,EAAE,uBAAuB,CAAC,EAAE;MAChJ,OAAO,IAAIq5C,mBAAmB,CAAC,IAAI,EAAE,IAAI,CAACr5C,eAAe,EAAE,IAAI,CAACmb,OAAO,CAAC;IAC1E;IACA,OAAO31B,SAAS;EAClB;EACAw1D,8BAA8BA,CAAA,EAAG;IAC/B,IAAI5sC,qBAAqB,CAAC,IAAI,CAACpO,eAAe,EAAE,0BAA0B,CAAC,EAAE;MAC3E,OAAO,IAAIg6C,wBAAwB,CAAC,IAAI,CAACh6C,eAAe,EAAE,IAAI,CAACmb,OAAO,CAAC;IACzE;IACA,OAAO31B,SAAS;EAClB;EACAy1D,sBAAsBA,CAAA,EAAG;IACvB,IAAI7sC,qBAAqB,CAAC,IAAI,CAACpO,eAAe,EAAE,oBAAoB,CAAC,EAAE;MACrE,OAAO,IAAI85C,gBAAgB,CAAC,IAAI,CAAC95C,eAAe,CAAC;IACnD;IACA,OAAOxa,SAAS;EAClB;EACA01D,oCAAoCA,CAAA,EAAG;IACrC,IAAI9sC,qBAAqB,CAAC,IAAI,CAACpO,eAAe,EAAE,0BAA0B,CAAC,IAAIoO,qBAAqB,CAAC,IAAI,CAACpO,eAAe,EAAE,0BAA0B,CAAC,IAAIoO,qBAAqB,CAAC,IAAI,CAACpO,eAAe,EAAE,sBAAsB,CAAC,IAAIoO,qBAAqB,CAAC,IAAI,CAACpO,eAAe,EAAE,sBAAsB,CAAC,EAAE;MACpS,OAAO,IAAI+5C,8BAA8B,CAAC,IAAI,CAAC/5C,eAAe,EAAE,IAAI,CAACmb,OAAO,CAAC;IAC/E;IACA,OAAO31B,SAAS;EAClB;AACF;AAEA,SAAS41D,oBAAoBA,CAACxmD,eAAe,EAAE;EAC7C,IAAIqqC,aAAa,CAACrqC,eAAe,CAAC,EAAE;IAClC,OAAOxC,oBAAoB;EAC7B;EACA,OAAOwC,eAAe;AACxB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeymD,0BAA0BA,CAAC90D,QAAQ,EAAE+0D,0BAA0B,EAAEC,aAAa,EAAEpjD,OAAO,EAAE82B,KAAK,EAAE;EAC7G,IAAI;IACF,MAAMwL,MAAM,GAAG,IAAI/9C,QAAQ,CAAC6+D,aAAa,EAAEr+D,SAAS,EAAEqJ,QAAQ,CAAC;IAC/D,MAAMm0C,QAAQ,GAAG,MAAMD,MAAM,CAACG,iBAAiB,CAAC5R,mBAAmB,CAAC;IACpE,MAAM2R,SAAS,GAAG,MAAMF,MAAM,CAACG,iBAAiB,CAAC3R,oBAAoB,CAAC;IACtE,IAAIyR,QAAQ,EAAE;MAAA,IAAA8gB,gBAAA;MACZ,MAAM5jB,KAAK,GAAG,IAAIl7C,QAAQ,CAAC6+D,aAAa,EAAE39D,SAAS,EAAE2I,QAAQ,CAAC;MAC9D,MAAMqvD,QAAQ,GAAG,MAAMhe,KAAK,CAAC6jB,gBAAgB,CAACxsB,KAAK,EAAEqsB,0BAA0B,CAAC;MAChF,IAAI1F,QAAQ,EAAE;QACZ,OAAO,IAAI;MACb;;MAEA;MACA,IAAI8F,eAAe;MACnB,IAAI;QACFA,eAAe,GAAG,MAAM9jB,KAAK,CAAC+jB,WAAW,CAACxjD,OAAO,CAAC;MACpD,CAAC,CAAC,OAAOpK,CAAC,EAAE,CAAC;MACb,OAAO,EAAAytD,gBAAA,GAAAE,eAAe,cAAAF,gBAAA,uBAAfA,gBAAA,CAAiBltD,WAAW,CAAC,CAAC,MAAKgtD,0BAA0B,CAAChtD,WAAW,CAAC,CAAC;IACpF,CAAC,MAAM,IAAIqsC,SAAS,EAAE;MACpB,MAAM/C,KAAK,GAAG,IAAIl7C,QAAQ,CAAC6+D,aAAa,EAAE59D,UAAU,EAAE4I,QAAQ,CAAC;MAC/D,OAAO,MAAMqxC,KAAK,CAAC6jB,gBAAgB,CAACxsB,KAAK,EAAEqsB,0BAA0B,CAAC;IACxE,CAAC,MAAM;MACLhhC,OAAO,CAACnzB,KAAK,CAAC,kDAAkD,CAAC;MACjE,OAAO,KAAK;IACd;EACF,CAAC,CAAC,OAAOme,GAAG,EAAE;IACZgV,OAAO,CAACnzB,KAAK,CAAC,sCAAsC,EAAEme,GAAG,CAAC;IAC1D,OAAO,KAAK;EACd;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAes2C,mBAAmBA,CAAC57C,eAAe,EAAE67C,kBAAkB,EAAEN,aAAa,EAAEpjD,OAAO,EAAEhU,IAAI,EAAE;EACpG,MAAMs2C,MAAM,GAAG,IAAIkI,eAAe,CAAC3iC,eAAe,CAAC0iC,mBAAmB,CAAC,CAAC,EAAE6Y,aAAa,EAAEr+D,SAAS,EAAE8iB,eAAe,CAAC9S,OAAO,EAAE8S,eAAe,CAACmb,OAAO,CAAC;EACrJ,MAAMuf,QAAQ,GAAG,MAAMD,MAAM,CAAC9oB,IAAI,CAAC,mBAAmB,EAAE,CAACqX,mBAAmB,CAAC,CAAC;EAC9E,MAAM2R,SAAS,GAAG,MAAMF,MAAM,CAAC9oB,IAAI,CAAC,mBAAmB,EAAE,CAACsX,oBAAoB,CAAC,CAAC;EAChF;EACA,IAAIyR,QAAQ,EAAE;IACZ,MAAM9C,KAAK,GAAG,IAAI+K,eAAe,CAAC3iC,eAAe,CAAC0iC,mBAAmB,CAAC,CAAC,EAAE6Y,aAAa,EAAE39D,SAAS,EAAEoiB,eAAe,CAAC9S,OAAO,EAAE8S,eAAe,CAACmb,OAAO,CAAC;IACpJ,MAAMy6B,QAAQ,GAAG,MAAMhe,KAAK,CAACjmB,IAAI,CAAC,kBAAkB,EAAE,CAACxtB,IAAI,EAAE03D,kBAAkB,CAAC,CAAC;IACjF,IAAI,CAACjG,QAAQ,EAAE;MACb,MAAMkG,eAAe,GAAG,CAAC,MAAMlkB,KAAK,CAACjmB,IAAI,CAAC,aAAa,EAAE,CAACxZ,OAAO,CAAC,CAAC,EAAE7J,WAAW,CAAC,CAAC,KAAKutD,kBAAkB,CAACvtD,WAAW,CAAC,CAAC;MACvH,IAAI,CAACwtD,eAAe,EAAE;QACpB,MAAMlkB,KAAK,CAACpV,eAAe,CAAC,mBAAmB,EAAE,CAACq5B,kBAAkB,EAAE,IAAI,CAAC,CAAC;MAC9E;IACF;EACF,CAAC,MAAM,IAAIlhB,SAAS,EAAE;IACpB,MAAM/C,KAAK,GAAG,IAAI+K,eAAe,CAAC3iC,eAAe,CAAC0iC,mBAAmB,CAAC,CAAC,EAAE6Y,aAAa,EAAE59D,UAAU,EAAEqiB,eAAe,CAAC9S,OAAO,EAAE8S,eAAe,CAACmb,OAAO,CAAC;IACrJ,MAAMy6B,QAAQ,GAAG,MAAMhe,KAAK,CAACjmB,IAAI,CAAC,kBAAkB,EAAE,CAACxtB,IAAI,EAAE03D,kBAAkB,CAAC,CAAC;IACjF,IAAI,CAACjG,QAAQ,EAAE;MACb,MAAMhe,KAAK,CAACpV,eAAe,CAAC,mBAAmB,EAAE,CAACq5B,kBAAkB,EAAE,IAAI,CAAC,CAAC;IAC9E;EACF,CAAC,MAAM;IACL,MAAMt5D,KAAK,CAAC,8CAA8C,CAAC;EAC7D;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASw5D,uBAAuBA,CAACC,KAAK,EAAE;EACtCp/D,SAAS,CAACo/D,KAAK,CAACC,oBAAoB,KAAKz2D,SAAS,IAAIw2D,KAAK,CAACC,oBAAoB,KAAK,IAAI,EAAE,oCAAoC,CAAC;EAChIr/D,SAAS,CAACo/D,KAAK,CAACE,mBAAmB,KAAK12D,SAAS,IAAIw2D,KAAK,CAACE,mBAAmB,KAAK,IAAI,EAAE,0BAA0B,CAAC;EACpHt/D,SAAS,CAACo/D,KAAK,CAACG,wBAAwB,KAAK32D,SAAS,IAAIw2D,KAAK,CAACG,wBAAwB,KAAK,IAAI,EAAE,8BAA8B,CAAC;EAClIv/D,SAAS,CAACo/D,KAAK,CAACzd,cAAc,KAAK/4C,SAAS,IAAIw2D,KAAK,CAACzd,cAAc,KAAK,IAAI,EAAE,wBAAwB,CAAC;EACxG3hD,SAAS,CAACo/D,KAAK,CAAC7jD,OAAO,KAAK3S,SAAS,IAAIw2D,KAAK,CAAC7jD,OAAO,KAAK,IAAI,EAAE,sBAAsB,CAAC;EACxFvb,SAAS,CAACo/D,KAAK,CAACtkD,QAAQ,KAAKlS,SAAS,IAAIw2D,KAAK,CAACtkD,QAAQ,KAAK,IAAI,EAAE,sBAAsB,CAAC;EAC1F,QAAQskD,KAAK,CAACxjD,IAAI;IAChB,KAAK,mBAAmB;MACtB;QACE5b,SAAS,CAACo/D,KAAK,CAACI,oBAAoB,KAAK52D,SAAS,IAAIw2D,KAAK,CAACI,oBAAoB,KAAK,IAAI,EAAE,2BAA2B,CAAC;MACzH;EACJ;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeC,QAAQA,CAAC91D,QAAQ,EAAEyb,SAAS,EAAEs6C,KAAK,EAAE;EAClD,OAAO;IACL5kD,QAAQ,EAAE4kD,KAAK,CAACC,eAAe;IAC/B9d,aAAa,EAAE6d,KAAK,CAAC7d,aAAa;IAClC+d,uBAAuB,EAAEF,KAAK,CAAC5d,QAAQ;IACvC+d,YAAY,EAAEH,KAAK,CAACI,OAAO;IAC3BH,eAAe,EAAED,KAAK,CAACK,cAAc;IACrCC,aAAa,EAAE,MAAM9V,kBAAkB,CAACvgD,QAAQ,EAAE+1D,KAAK,CAAC5d,QAAQ,EAAE4d,KAAK,CAACK,cAAc,CAACx9B,GAAG,CAACm9B,KAAK,CAAC7d,aAAa,CAAC,CAAC;IAChHz8B;EACF,CAAC;AACH;AACA,SAAS66C,YAAYA,CAACC,YAAY,EAAEC,WAAW,EAAEC,SAAS,EAAE;EAC1DA,SAAS,GAAG1gE,SAAS,CAAC6H,IAAI,CAAC64D,SAAS,CAAC;EACrCF,YAAY,GAAGxgE,SAAS,CAAC6H,IAAI,CAAC24D,YAAY,CAAC;EAC3CC,WAAW,GAAGzgE,SAAS,CAAC6H,IAAI,CAAC44D,WAAW,CAAC;EACzC,IAAID,YAAY,CAAC5W,EAAE,CAAC5pD,SAAS,CAAC6H,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;IACtC,OAAO,KAAK;EACd;EACA,MAAMqI,MAAM,GAAGuwD,WAAW,CAACpV,GAAG,CAACmV,YAAY,CAAC,CAAC39B,GAAG,CAAC/iC,OAAO,CAAC,CAACqjC,GAAG,CAACq9B,YAAY,CAAC;EAC3E,OAAOtwD,MAAM,CAACywD,GAAG,CAACD,SAAS,CAAC;AAC9B;AACA,eAAeE,eAAeA,CAACpoC,KAAK,EAAEhE,GAAG,EAAE5Q,EAAE,EAAE;EAC7C,MAAM8yC,OAAO,GAAG,EAAE;EAClB,OAAOliC,GAAG,GAAGgE,KAAK,GAAG94B,uBAAuB,EAAE;IAC5Cg3D,OAAO,CAAC/qD,IAAI,CAACiY,EAAE,CAAC4U,KAAK,EAAEA,KAAK,GAAG94B,uBAAuB,GAAG,CAAC,CAAC,CAAC;IAC5D84B,KAAK,IAAI94B,uBAAuB;EAClC;EACAg3D,OAAO,CAAC/qD,IAAI,CAACiY,EAAE,CAAC4U,KAAK,EAAEhE,GAAG,GAAG,CAAC,CAAC,CAAC;EAChC,OAAO,MAAM9oB,OAAO,CAAC+M,GAAG,CAACi+C,OAAO,CAAC;AACnC;;AAEA;AACA;AACA;AACA;AACA,MAAMmK,cAAc,CAAC;EACnBh4D,WAAWA,CAAC6a,eAAe,EAAE;IAC3B,IAAI,CAACA,eAAe,GAAGA,eAAe;EACxC;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEo9C,sBAAsBA,CAACC,QAAQ,EAAE;IAC/B,IAAI,CAACr9C,eAAe,CAACs9C,WAAW,CAACp0B,SAAS,CAACwI,WAAW,EAAE2rB,QAAQ,CAAC;EACnE;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEE,yBAAyBA,CAACF,QAAQ,EAAE;IAClC,IAAI,CAACr9C,eAAe,CAACw9C,GAAG,CAACt0B,SAAS,CAACwI,WAAW,EAAE2rB,QAAQ,CAAC;EAC3D;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEI,gBAAgBA;EAChB;EACArZ,SAAS,EAAEiZ,QAAQ,EAAE;IACnB;IACA,MAAMtM,KAAK,GAAG,IAAI,CAAC/wC,eAAe,CAACI,YAAY,CAACC,SAAS,CAACq9C,QAAQ,CAACtZ,SAAS,CAAC;IAC7E,MAAMjzC,OAAO,GAAG,IAAI,CAAC6O,eAAe,CAAC7O,OAAO;IAC5C,MAAMvD,MAAM,GAAG;MACbuD,OAAO;MACPszC,MAAM,EAAE,CAAC,IAAI,CAACzkC,eAAe,CAACI,YAAY,CAACC,SAAS,CAACikC,aAAa,CAACyM,KAAK,CAAC;IAC3E,CAAC;IACD,MAAM4M,eAAe,GAAGpnC,GAAG,IAAI;MAC7B,MAAMqnC,SAAS,GAAG,IAAI,CAAC59C,eAAe,CAACI,YAAY,CAACC,SAAS,CAACskC,QAAQ,CAACpuB,GAAG,CAAC;MAC3E8mC,QAAQ,CAAC,IAAI,CAACQ,eAAe,CAACD,SAAS,CAACE,aAAa,EAAEF,SAAS,CAACz9C,IAAI,EAAEoW,GAAG,CAAC,CAAC;IAC9E,CAAC;IACD,IAAI,CAACvW,eAAe,CAAC2vB,WAAW,CAAC,CAAC,CAACouB,EAAE,CAACnwD,MAAM,EAAE+vD,eAAe,CAAC;IAC9D,OAAO,MAAM;MACX,IAAI,CAAC39C,eAAe,CAAC2vB,WAAW,CAAC,CAAC,CAAC6tB,GAAG,CAAC5vD,MAAM,EAAE+vD,eAAe,CAAC;IACjE,CAAC;EACH;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEK,iBAAiBA,CAACX,QAAQ,EAAE;IAC1B,MAAMlsD,OAAO,GAAG,IAAI,CAAC6O,eAAe,CAAC7O,OAAO;IAC5C,MAAMvD,MAAM,GAAG;MACbuD;IACF,CAAC;IACD,MAAMwsD,eAAe,GAAGpnC,GAAG,IAAI;MAC7B,IAAI;QACF,MAAMqnC,SAAS,GAAG,IAAI,CAAC59C,eAAe,CAACI,YAAY,CAACC,SAAS,CAACskC,QAAQ,CAACpuB,GAAG,CAAC;QAC3E8mC,QAAQ,CAAC,IAAI,CAACQ,eAAe,CAACD,SAAS,CAACE,aAAa,EAAEF,SAAS,CAACz9C,IAAI,EAAEoW,GAAG,CAAC,CAAC;MAC9E,CAAC,CAAC,OAAOxoB,CAAC,EAAE;QACVusB,OAAO,CAACnzB,KAAK,CAAC,wBAAwB,EAAEovB,GAAG,EAAExoB,CAAC,CAAC;MACjD;IACF,CAAC;IACD,IAAI,CAACiS,eAAe,CAAC2vB,WAAW,CAAC,CAAC,CAACouB,EAAE,CAACnwD,MAAM,EAAE+vD,eAAe,CAAC;IAC9D,OAAO,MAAM;MACX,IAAI,CAAC39C,eAAe,CAAC2vB,WAAW,CAAC,CAAC,CAAC6tB,GAAG,CAAC5vD,MAAM,EAAE+vD,eAAe,CAAC;IACjE,CAAC;EACH;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEM,mBAAmBA;EACnB;EACA7Z,SAAS,EAAEiZ,QAAQ,EAAE;IACnB;IACA,MAAMtM,KAAK,GAAG,IAAI,CAAC/wC,eAAe,CAACI,YAAY,CAACC,SAAS,CAACq9C,QAAQ,CAACtZ,SAAS,CAAC;IAC7E,IAAI,CAACpkC,eAAe,CAACI,YAAY,CAACo9C,GAAG,CAACzM,KAAK,CAACtoD,IAAI,EAAE40D,QAAQ,CAAC;EAC7D;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEa,kBAAkBA,CAAA,EAAG;IACnB,IAAI,CAACl+C,eAAe,CAACI,YAAY,CAAC89C,kBAAkB,CAAC,CAAC;IACtD,MAAM/sD,OAAO,GAAG,IAAI,CAAC6O,eAAe,CAAC7O,OAAO;IAC5C,MAAMvD,MAAM,GAAG;MACbuD;IACF,CAAC;IACD,IAAI,CAAC6O,eAAe,CAAC2vB,WAAW,CAAC,CAAC,CAACuuB,kBAAkB,CAACtwD,MAAM,CAAC;EAC/D;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMuwD,YAAYA,CAAA,EAAG;IACnB,IAAIC,OAAO,GAAG74D,SAAS,CAACjD,MAAM,GAAG,CAAC,IAAIiD,SAAS,CAAC,CAAC,CAAC,KAAKC,SAAS,GAAGD,SAAS,CAAC,CAAC,CAAC,GAAG;MAChF84D,SAAS,EAAE,CAAC;MACZC,OAAO,EAAE,QAAQ;MACjBC,KAAK,EAAE;IACT,CAAC;IACD,MAAM9pB,MAAM,GAAG,MAAM,IAAI,CAACz0B,eAAe,CAACI,YAAY,CAACo+C,WAAW,CAAC,CAAC,CAAC,EAAEJ,OAAO,CAACC,SAAS,EAAED,OAAO,CAACE,OAAO,CAAC;IAC1G,MAAMG,aAAa,GAAGhqB,MAAM,CAAC+D,IAAI,CAAC,CAACn9C,CAAC,EAAEQ,CAAC,KAAK;MAC1C,OAAOuiE,OAAO,CAACG,KAAK,KAAK,MAAM,GAAG1iE,CAAC,CAAC6iE,WAAW,GAAGrjE,CAAC,CAACqjE,WAAW,GAAGrjE,CAAC,CAACqjE,WAAW,GAAG7iE,CAAC,CAAC6iE,WAAW;IACjG,CAAC,CAAC;IACF,OAAO,IAAI,CAACC,WAAW,CAACF,aAAa,CAAC;EACxC;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMG,SAASA,CAACxa,SAAS,EAAE;IACzB,IAAIl3C,OAAO,GAAG3H,SAAS,CAACjD,MAAM,GAAG,CAAC,IAAIiD,SAAS,CAAC,CAAC,CAAC,KAAKC,SAAS,GAAGD,SAAS,CAAC,CAAC,CAAC,GAAG;MAChF84D,SAAS,EAAE,CAAC;MACZC,OAAO,EAAE,QAAQ;MACjBC,KAAK,EAAE;IACT,CAAC;IACD,MAAMM,cAAc,GAAG,IAAI,CAAC7+C,eAAe,CAACI,YAAY,CAACC,SAAS,CAACq9C,QAAQ,CAACtZ,SAAS,CAAC;IACtF,MAAMjkC,IAAI,GAAGjT,OAAO,CAACkxD,OAAO,GAAGS,cAAc,CAAChkD,MAAM,CAAC3U,GAAG,CAAC6H,CAAC,IAAIb,OAAO,CAACkxD,OAAO,CAACrwD,CAAC,CAACtF,IAAI,CAAC,CAAC,GAAG,EAAE;IAC3F,MAAMmF,MAAM,GAAG,IAAI,CAACoS,eAAe,CAACI,YAAY,CAACg+C,OAAO,CAACS,cAAc,CAACp2D,IAAI,CAAC,CAAC,GAAG0X,IAAI,CAAC;IACtF,MAAMs0B,MAAM,GAAG,MAAM,IAAI,CAACz0B,eAAe,CAACI,YAAY,CAACo+C,WAAW,CAAC5wD,MAAM,EAAEV,OAAO,CAACmxD,SAAS,EAAEnxD,OAAO,CAACoxD,OAAO,CAAC;IAC9G,MAAMG,aAAa,GAAGhqB,MAAM,CAAC+D,IAAI,CAAC,CAACn9C,CAAC,EAAEQ,CAAC,KAAK;MAC1C,OAAOqR,OAAO,CAACqxD,KAAK,KAAK,MAAM,GAAG1iE,CAAC,CAAC6iE,WAAW,GAAGrjE,CAAC,CAACqjE,WAAW,GAAGrjE,CAAC,CAACqjE,WAAW,GAAG7iE,CAAC,CAAC6iE,WAAW;IACjG,CAAC,CAAC;IACF,OAAO,IAAI,CAACC,WAAW,CAACF,aAAa,CAAC;EACxC;EACAE,WAAWA,CAAClqB,MAAM,EAAE;IAClB,OAAOA,MAAM,CAACvuC,GAAG,CAAC6H,CAAC,IAAI;MACrB,MAAM60B,WAAW,GAAGzX,MAAM,CAACk2B,WAAW,CAACl2B,MAAM,CAACwF,OAAO,CAAC5iB,CAAC,CAAC,CAACH,MAAM,CAACvS,CAAC,IAAI,OAAOA,CAAC,CAAC,CAAC,CAAC,KAAK,UAAU,IAAIA,CAAC,CAAC,CAAC,CAAC,KAAK,MAAM,CAAC,CAAC;MACpH,IAAI0S,CAAC,CAACoS,IAAI,EAAE;QACV,MAAMwQ,OAAO,GAAGxF,MAAM,CAACwF,OAAO,CAAC5iB,CAAC,CAACoS,IAAI,CAAC;QACtC,MAAMA,IAAI,GAAGwQ,OAAO,CAACvhB,KAAK,CAACuhB,OAAO,CAACruB,MAAM,GAAG,CAAC,EAAEquB,OAAO,CAACruB,MAAM,CAAC;QAC9D,MAAMyB,IAAI,GAAG,CAAC,CAAC;QACf,KAAK,MAAM,CAACoqB,GAAG,EAAE3pB,KAAK,CAAC,IAAI2b,IAAI,EAAE;UAC/Bpc,IAAI,CAACoqB,GAAG,CAAC,GAAG3pB,KAAK;QACnB;QACA,OAAO;UACL4/C,SAAS,EAAEr2C,CAAC,CAACgjD,KAAK,IAAI,EAAE;UACxBhtD,IAAI,EAAEA,IAAI;UACV6+B;QACF,CAAC;MACH;MACA,OAAO;QACLwhB,SAAS,EAAEr2C,CAAC,CAACgjD,KAAK,IAAI,EAAE;QACxBhtD,IAAI,EAAE,CAAC,CAAC;QACR6+B;MACF,CAAC;IACH,CAAC,CAAC;EACJ;EACAi7B,eAAeA,CAAC9M,KAAK,EAAE5wC,IAAI,EAAE2+C,MAAM,EAAE;IACnC,MAAMl8B,WAAW,GAAGzX,MAAM,CAACk2B,WAAW,CAACl2B,MAAM,CAACwF,OAAO,CAACmuC,MAAM,CAAC,CAAClxD,MAAM,CAACvS,CAAC,IAAI,OAAOA,CAAC,CAAC,CAAC,CAAC,KAAK,UAAU,IAAIA,CAAC,CAAC,CAAC,CAAC,KAAK,MAAM,CAAC,CAAC;IACzH,MAAMmyB,OAAO,GAAG,CAAC,CAAC;IAClBujC,KAAK,CAACl2C,MAAM,CAAC9T,OAAO,CAAC,CAACi1D,KAAK,EAAE/0D,KAAK,KAAK;MACrC,IAAI+d,KAAK,CAAC2F,OAAO,CAACxK,IAAI,CAAClZ,KAAK,CAAC,CAAC,EAAE;QAC9B,MAAM0T,UAAU,GAAGqhD,KAAK,CAACrhD,UAAU;QACnC,IAAIA,UAAU,EAAE;UACd,MAAMinB,GAAG,GAAGzhB,IAAI,CAAClZ,KAAK,CAAC;UACvB,IAAI+0D,KAAK,CAACxjD,IAAI,KAAK,SAAS,EAAE;YAC5B;YACA,MAAMumD,QAAQ,GAAG,EAAE;YACnB,KAAK,IAAInrD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGguB,GAAG,CAACt/B,MAAM,EAAEsR,CAAC,EAAE,EAAE;cACnC,MAAMorD,KAAK,GAAGp9B,GAAG,CAAChuB,CAAC,CAAC;cACpB,MAAMqrD,GAAG,GAAG,CAAC,CAAC;cACd,KAAK,IAAI7pC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGza,UAAU,CAACrY,MAAM,EAAE8yB,CAAC,EAAE,EAAE;gBAC1C,MAAM3sB,IAAI,GAAGkS,UAAU,CAACya,CAAC,CAAC,CAAC3sB,IAAI;gBAC/Bw2D,GAAG,CAACx2D,IAAI,CAAC,GAAGu2D,KAAK,CAAC5pC,CAAC,CAAC;cACtB;cACA2pC,QAAQ,CAAC92D,IAAI,CAACg3D,GAAG,CAAC;YACpB;YACAzxC,OAAO,CAACwuC,KAAK,CAACvzD,IAAI,CAAC,GAAGs2D,QAAQ;UAChC,CAAC,MAAM;YACL;YACA,MAAME,GAAG,GAAG,CAAC,CAAC;YACd,KAAK,IAAIrrD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+G,UAAU,CAACrY,MAAM,EAAEsR,CAAC,EAAE,EAAE;cAC1C,MAAMnL,IAAI,GAAGkS,UAAU,CAAC/G,CAAC,CAAC,CAACnL,IAAI;cAC/Bw2D,GAAG,CAACx2D,IAAI,CAAC,GAAGm5B,GAAG,CAAChuB,CAAC,CAAC;YACpB;YACA4Z,OAAO,CAACwuC,KAAK,CAACvzD,IAAI,CAAC,GAAGw2D,GAAG;UAC3B;QACF;MACF,CAAC,MAAM;QACLzxC,OAAO,CAACwuC,KAAK,CAACvzD,IAAI,CAAC,GAAG0X,IAAI,CAAClZ,KAAK,CAAC;MACnC;IACF,CAAC,CAAC;IACF,OAAO;MACLm9C,SAAS,EAAE2M,KAAK,CAACtoD,IAAI;MACrB1E,IAAI,EAAEypB,OAAO;MACboV;IACF,CAAC;EACH;AACF;;AAEA;AACA;AACA;AACA,MAAMs8B,8BAA8B,GAAG,eAAe,CAAC,MAAM7iE,CAAC,CAAC+L,MAAM,CAAC;EACpE;AACF;AACA;EACE6zD,oBAAoB,EAAEnqD,kBAAkB;EACxC;AACF;AACA;EACEqG,OAAO,EAAE/T,kBAAkB;EAC3B;AACF;AACA;AACA;AACA;EACEsT,QAAQ,EAAEtT,kBAAkB,CAAC2E,OAAO,CAAC,CAAC,CAAC;EACvC;AACF;AACA;EACEyzD,uBAAuB,EAAE1qD,kBAAkB,CAAC/I,OAAO,CAACqJ,oBAAoB,CAAC;EACzE;AACF;AACA;EACEqsC,aAAa,EAAEzjD,YAAY;EAC3B;AACF;AACA;EACEujD,cAAc,EAAE7qC,aAAa,CAAC3K,OAAO,CAAC,IAAIsI,IAAI,CAAC,CAAC,CAAC;EACjD;AACF;AACA;EACE8tD,YAAY,EAAElrD,aAAa;EAC3B;AACF;AACA;EACEmrD,iBAAiB,EAAE/iE,CAAC,CAAC0N,OAAO,CAAC,CAAC,CAAChB,OAAO,CAAC,KAAK;AAC9C,CAAC,CAAC,EAAE,CAAC;;AAEL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAMs2D,mBAAmB,CAAC;EACxBl6D,WAAWA,CAAC6a,eAAe,EAAE;IAC3B,IAAI,CAACA,eAAe,GAAGA,eAAe;EACxC;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEs/C,uBAAuBA,CAACpc,IAAI,EAAE;IAC5B,IAAI,CAACljC,eAAe,CAACijC,uBAAuB,CAACC,IAAI,CAAC;EACpD;AACF;;AAEA;AACA;AACA;AACA;AACA,MAAMqc,gBAAgB,CAAC;EACrBp6D,WAAWA,CAAC6a,eAAe,EAAE;IAC3B,IAAI,CAACA,eAAe,GAAGA,eAAe;EACxC;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMw/C,SAASA;EACf;EACAt/C,EAAE,EAAEC,IAAI,EAAE;IACR,MAAM,CAACxL,KAAK,EAAE8qD,QAAQ,CAAC,GAAG,MAAMz3D,OAAO,CAAC+M,GAAG,CAAC,CAAC,IAAI,CAACiL,eAAe,CAAC2vB,WAAW,CAAC,CAAC,CAACjR,WAAW,CAAC,CAAC,EAAE,IAAI,CAAC1e,eAAe,CAAC+yB,WAAW,CAAC7yB,EAAE,EAAEC,IAAI,CAAC,CAAC,CAAC;IAC3I,OAAO3jB,KAAK,CAACinB,WAAW,CAACg8C,QAAQ,CAACtgC,GAAG,CAACxqB,KAAK,CAAC,CAAC;EAC/C;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAM+qD,UAAUA;EAChB;EACAx/C,EAAE,EAAEC,IAAI,EAAE;IACR,OAAO,IAAI,CAACH,eAAe,CAAC+yB,WAAW,CAAC7yB,EAAE,EAAEC,IAAI,CAAC;EACnD;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMw/C,qBAAqBA,CAAA,EAAG;IAC5B,MAAMhrD,KAAK,GAAG,MAAM,IAAI,CAACqL,eAAe,CAAC2vB,WAAW,CAAC,CAAC,CAACjR,WAAW,CAAC,CAAC;IACpE,OAAOliC,KAAK,CAACwqD,WAAW,CAACryC,KAAK,EAAE,MAAM,CAAC;EACzC;AACF;;AAEA;AACA;AACA;AACA;AACA,MAAMirD,2BAA2B,CAAC;EAGhC;;EAEAz6D,WAAWA,CAAC6a,eAAe,EAAEmb,OAAO,EAAE;IAAAwb,eAAA,sBAJxB/sB,uBAAuB,CAACnhB,IAAI;IAoL1C;AACF;AACA;IAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAhCEkuC,eAAA,wBAiCgB,eAAetY,wBAAwB,CAAC,MAAMwhC,OAAO,IAAI;MACvE,MAAMC,aAAa,GAAG,MAAMZ,8BAA8B,CAAClqD,UAAU,CAAC6qD,OAAO,CAAC;MAC9E,MAAMjE,mBAAmB,CAAC,IAAI,CAAC57C,eAAe,EAAE,IAAI,CAACwtB,UAAU,CAAC,CAAC,EAAEsyB,aAAa,CAAC7D,oBAAoB,EAAE6D,aAAa,CAAC3nD,OAAO,EAAE,MAAM,IAAI,CAAC6H,eAAe,CAACwxB,gBAAgB,CAAC,CAAC,CAAC;MAC5K,MAAM+jB,uBAAuB,GAAG,MAAMpQ,mBAAmB,CAAC,IAAI,CAACnlC,eAAe,CAAC2vB,WAAW,CAAC,CAAC,EAAEmwB,aAAa,CAACrhB,aAAa,EAAEqhB,aAAa,CAACtD,uBAAuB,CAAC;MACjK,MAAM79B,KAAK,GAAG,MAAM,IAAI,CAAC3e,eAAe,CAAC2vB,WAAW,CAAC,CAAC,CAAC9Q,QAAQ,CAAC,QAAQ,CAAC;MACzE,MAAMkhC,SAAS,GAAGphC,KAAK,CAAChgB,SAAS;MACjC,IAAImhD,aAAa,CAACvhB,cAAc,CAAC3K,EAAE,CAACmsB,SAAS,CAAC,EAAE;QAC9CD,aAAa,CAACvhB,cAAc,GAAGjiD,SAAS,CAAC6H,IAAI,CAAC47D,SAAS,CAAC;MAC1D;MACA,OAAOruB,WAAW,CAACC,mBAAmB,CAAC;QACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;QACrCvY,MAAM,EAAE,eAAe;QACvB0Y,IAAI,EAAE,CAAC;UACLo7C,aAAa,EAAEuE,aAAa,CAAC7D,oBAAoB;UACjD9jD,OAAO,EAAE2nD,aAAa,CAAC3nD,OAAO;UAC9BT,QAAQ,EAAEooD,aAAa,CAACpoD,QAAQ;UAChCgnC,QAAQ,EAAE0c,oBAAoB,CAAC0E,aAAa,CAACtD,uBAAuB,CAAC;UACrE/d,aAAa,EAAE8W,uBAAuB;UACtChX,cAAc,EAAEuhB,aAAa,CAACvhB,cAAc;UAC5C4gB,YAAY,EAAEW,aAAa,CAACX,YAAY;UACxCa,QAAQ,EAAEF,aAAa,CAACV;QAC1B,CAAC,CAAC;QACF1xD,KAAK,EAAEwlC,OAAO,IAAI;UAChB,MAAM6d,KAAK,GAAG,IAAI,CAAC/wC,eAAe,CAAC68B,SAAS,CAAC,YAAY,EAAE3J,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAE4J,IAAI,CAAC;UACzE,OAAO;YACLn1C,EAAE,EAAEopD,KAAK,CAAC,CAAC,CAAC,CAAC5wC,IAAI,CAAC6B,SAAS;YAC3BkxB;UACF,CAAC;QACH;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAVEyD,eAAA,8BAWsB,eAAetY,wBAAwB,CAAC,MAAM4hC,QAAQ,IAAI;MAC9E,MAAMl8D,IAAI,GAAG,MAAMiE,OAAO,CAAC+M,GAAG,CAACkrD,QAAQ,CAAC/5D,GAAG,CAAC,MAAM25D,OAAO,IAAI;QAC3D,MAAM3hC,EAAE,GAAG,MAAM,IAAI,CAACgiC,aAAa,CAAC9hC,OAAO,CAACyhC,OAAO,CAAC;QACpD,OAAO3hC,EAAE,CAACje,MAAM,CAAC,CAAC;MACpB,CAAC,CAAC,CAAC;MACH,OAAOyxB,WAAW,CAACC,mBAAmB,CAAC;QACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;QACrCvY,MAAM,EAAE,WAAW;QACnB0Y,IAAI,EAAE,CAACpc,IAAI,CAAC;QACZ2J,KAAK,EAAEwlC,OAAO,IAAI;UAChB,MAAMuB,MAAM,GAAG,IAAI,CAACz0B,eAAe,CAAC68B,SAAS,CAAC,YAAY,EAAE3J,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAE4J,IAAI,CAAC;UAC1E,OAAOrI,MAAM,CAACvuC,GAAG,CAAC6qD,KAAK,IAAI;YACzB,OAAO;cACLppD,EAAE,EAAEopD,KAAK,CAAC5wC,IAAI,CAAC6B,SAAS;cACxBkxB;YACF,CAAC;UACH,CAAC,CAAC;QACJ;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAnCEyD,eAAA,wBAoCgB,eAAetY,wBAAwB,CAAC,OAAOrc,SAAS,EAAE69C,OAAO,KAAK;MACpF,MAAMC,aAAa,GAAG,MAAMZ,8BAA8B,CAAClqD,UAAU,CAAC6qD,OAAO,CAAC;MAC9E,MAAMjE,mBAAmB,CAAC,IAAI,CAAC57C,eAAe,EAAE,IAAI,CAACwtB,UAAU,CAAC,CAAC,EAAEsyB,aAAa,CAAC7D,oBAAoB,EAAE6D,aAAa,CAAC3nD,OAAO,EAAE,MAAM,IAAI,CAAC6H,eAAe,CAACwxB,gBAAgB,CAAC,CAAC,CAAC;MAC5K,MAAM+jB,uBAAuB,GAAG,MAAMpQ,mBAAmB,CAAC,IAAI,CAACnlC,eAAe,CAAC2vB,WAAW,CAAC,CAAC,EAAEmwB,aAAa,CAACrhB,aAAa,EAAEqhB,aAAa,CAACtD,uBAAuB,CAAC;MACjK,OAAO9qB,WAAW,CAACC,mBAAmB,CAAC;QACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;QACrCvY,MAAM,EAAE,eAAe;QACvB0Y,IAAI,EAAE,CAAC6B,SAAS,EAAE;UAChBu5C,aAAa,EAAEuE,aAAa,CAAC7D,oBAAoB;UACjD9jD,OAAO,EAAE2nD,aAAa,CAAC3nD,OAAO;UAC9BT,QAAQ,EAAEooD,aAAa,CAACpoD,QAAQ;UAChCgnC,QAAQ,EAAE0c,oBAAoB,CAAC0E,aAAa,CAACtD,uBAAuB,CAAC;UACrE/d,aAAa,EAAE8W,uBAAuB;UACtChX,cAAc,EAAEuhB,aAAa,CAACvhB,cAAc;UAC5C4gB,YAAY,EAAEW,aAAa,CAACX,YAAY;UACxCa,QAAQ,EAAEF,aAAa,CAACV;QAC1B,CAAC,CAAC;QACF1xD,KAAK,EAAEwlC,OAAO,IAAI;UAChB,MAAM6d,KAAK,GAAG,IAAI,CAAC/wC,eAAe,CAAC68B,SAAS,CAAC,gBAAgB,EAAE3J,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAE4J,IAAI,CAAC;UAC7E,OAAO;YACLn1C,EAAE,EAAEopD,KAAK,CAAC,CAAC,CAAC,CAAC5wC,IAAI,CAAC6B,SAAS;YAC3BkxB;UACF,CAAC;QACH;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAbEyD,eAAA,wBAcgB,eAAetY,wBAAwB,CAAC,MAAMrc,SAAS,IAAI;MACzE,OAAO0vB,WAAW,CAACC,mBAAmB,CAAC;QACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;QACrCvY,MAAM,EAAE,eAAe;QACvB0Y,IAAI,EAAE,CAAC6B,SAAS;MAClB,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAnBE20B,eAAA,yBAoBiB,eAAetY,wBAAwB,CAAC,OAAOrc,SAAS,EAAEu6C,eAAe,EAAE9M,QAAQ,KAAK;MACvG,IAAIA,QAAQ,EAAE;QACZA,QAAQ,GAAG,MAAMnoB,cAAc,CAACmoB,QAAQ,CAAC;MAC3C;MACA,MAAMoQ,OAAO,GAAG,MAAM,IAAI,CAACM,eAAe,CAAC7jE,SAAS,CAAC6H,IAAI,CAAC6d,SAAS,CAAC,CAAC;MACrE,MAAM;QACJo+C,KAAK;QACLj5D;MACF,CAAC,GAAG,MAAM,IAAI,CAACk5D,mBAAmB,CAACR,OAAO,EAAEtD,eAAe,CAAC;MAC5D,IAAI,CAAC6D,KAAK,EAAE;QACV,MAAM,IAAI79D,KAAK,YAAAN,MAAA,CAAY+f,SAAS,2BAAA/f,MAAA,CAAwBkF,KAAK,CAAE,CAAC;MACtE;MACA,MAAMm5D,MAAM,GAAG7Q,QAAQ,GAAGA,QAAQ,GAAG,MAAM,IAAI,CAACzvC,eAAe,CAACwxB,gBAAgB,CAAC,CAAC;MAClF,MAAM95B,QAAQ,GAAGpb,SAAS,CAAC6H,IAAI,CAACo4D,eAAe,CAAC;MAChD,MAAM/3D,KAAK,GAAGlI,SAAS,CAAC6H,IAAI,CAAC07D,OAAO,CAACphB,aAAa,CAAC,CAACtf,GAAG,CAACznB,QAAQ,CAAC;MACjE,MAAM83B,SAAS,GAAG,CAAC,MAAM,IAAI,CAACxvB,eAAe,CAAC8iC,gBAAgB,CAAC,CAAC,KAAK,CAAC,CAAC;MACvE,MAAMoL,iBAAiB,CAAC,IAAI,CAACluC,eAAe,EAAExb,KAAK,EAAEq7D,OAAO,CAACrD,uBAAuB,EAAEhtB,SAAS,CAAC;MAChG,OAAOkC,WAAW,CAACC,mBAAmB,CAAC;QACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;QACrCvY,MAAM,EAAE,gBAAgB;QACxB0Y,IAAI,EAAE,CAAC6B,SAAS,EAAEs+C,MAAM,EAAE5oD,QAAQ,EAAEmoD,OAAO,CAACrD,uBAAuB,EAAEh4D,KAAK,CAAC;QAC3EgrC;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAhBEmH,eAAA,yCAiBiC,eAAetY,wBAAwB,CAAC,OAAOrc,SAAS,EAAEu+C,KAAK,KAAK;MACnG,MAAM/I,UAAU,GAAG,MAAM,IAAI,CAACgJ,yBAAyB,CAACx+C,SAAS,EAAEu+C,KAAK,CAAC;MACzE,IAAI,CAAC/I,UAAU,EAAE;QACf,OAAO9lB,WAAW,CAACC,mBAAmB,CAAC;UACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;UACrCvY,MAAM,EAAE,wBAAwB;UAChC0Y,IAAI,EAAE,CAAC6B,SAAS,EAAEu+C,KAAK,EAAE,IAAI;QAC/B,CAAC,CAAC;MACJ,CAAC,MAAM;QACL,MAAM,IAAIh+D,KAAK,UAAAN,MAAA,CAAUs+D,KAAK,oCAAAt+D,MAAA,CAAiC+f,SAAS,MAAG,CAAC;MAC9E;IACF,CAAC,CAAC;IAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAbE20B,eAAA,gDAcwC,eAAetY,wBAAwB,CAAC,OAAOrc,SAAS,EAAEu+C,KAAK,KAAK;MAC1G,MAAM/I,UAAU,GAAG,MAAM,IAAI,CAACgJ,yBAAyB,CAACx+C,SAAS,EAAEu+C,KAAK,CAAC;MACzE,IAAI/I,UAAU,EAAE;QACd,OAAO9lB,WAAW,CAACC,mBAAmB,CAAC;UACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;UACrCvY,MAAM,EAAE,wBAAwB;UAChC0Y,IAAI,EAAE,CAAC6B,SAAS,EAAEu+C,KAAK,EAAE,KAAK;QAChC,CAAC,CAAC;MACJ,CAAC,MAAM;QACL,MAAM,IAAIh+D,KAAK,UAAAN,MAAA,CAAUs+D,KAAK,gCAAAt+D,MAAA,CAA6B+f,SAAS,MAAG,CAAC;MAC1E;IACF,CAAC,CAAC;IAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAhBE20B,eAAA,oCAiB4B,eAAetY,wBAAwB,CAAC,OAAOrc,SAAS,EAAEw6C,uBAAuB,EAAEiE,uBAAuB,KAAK;MACzI,MAAMZ,OAAO,GAAG,MAAM,IAAI,CAACM,eAAe,CAAC7jE,SAAS,CAAC6H,IAAI,CAAC6d,SAAS,CAAC,CAAC;MACrE,MAAM0+C,uBAAuB,GAAG,MAAMp5B,cAAc,CAACk1B,uBAAuB,CAAC;MAC7E,IAAIkE,uBAAuB,KAAKb,OAAO,CAACrD,uBAAuB,EAAE;QAC/D5/D,SAAS,CAAC6jE,uBAAuB,KAAKZ,OAAO,CAACphB,aAAa,EAAE,oDAAoD,CAAC;MACpH;MACA,MAAMkiB,aAAa,GAAG,MAAM,IAAI,CAAC3gD,eAAe,CAAC2R,IAAI,CAAC,yBAAyB,EAAE,CAAC3P,SAAS,EAAE0+C,uBAAuB,CAAC,CAAC;MACtH9jE,SAAS,CAAC6jE,uBAAuB,KAAKE,aAAa,EAAE,4CAA4C,CAAC;MAClG,OAAOjvB,WAAW,CAACC,mBAAmB,CAAC;QACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;QACrCvY,MAAM,EAAE,2BAA2B;QACnC0Y,IAAI,EAAE,CAAC6B,SAAS,EAAE0+C,uBAAuB,EAAED,uBAAuB;MACpE,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAfE9pB,eAAA,2CAgBmC,eAAetY,wBAAwB,CAAC,OAAOrc,SAAS,EAAEw6C,uBAAuB,KAAK;MACvH,MAAMqD,OAAO,GAAG,MAAM,IAAI,CAACM,eAAe,CAAC7jE,SAAS,CAAC6H,IAAI,CAAC6d,SAAS,CAAC,CAAC;MACrE,MAAM0+C,uBAAuB,GAAG,MAAMp5B,cAAc,CAACk1B,uBAAuB,CAAC;MAC7E,IAAIkE,uBAAuB,KAAKb,OAAO,CAACrD,uBAAuB,EAAE;QAC/D,MAAM,IAAIj6D,KAAK,mDAAmD,CAAC;MACrE;MACA,MAAMo+D,aAAa,GAAG,MAAM,IAAI,CAAC3gD,eAAe,CAAC2R,IAAI,CAAC,yBAAyB,EAAE,CAAC3P,SAAS,EAAE0+C,uBAAuB,CAAC,CAAC;MACtH9jE,SAAS,CAAC,CAAC+jE,aAAa,CAACpjB,MAAM,CAAC,CAAC,EAAE,wBAAwB,CAAC;MAC5D,OAAO7L,WAAW,CAACC,mBAAmB,CAAC;QACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;QACrCvY,MAAM,EAAE,2BAA2B;QACnC0Y,IAAI,EAAE,CAAC6B,SAAS,EAAE0+C,uBAAuB,EAAEpkE,SAAS,CAAC6H,IAAI,CAAC,CAAC,CAAC;MAC9D,CAAC,CAAC;IACJ,CAAC,CAAC;IA5gBA,IAAI,CAAC6b,eAAe,GAAGA,eAAe;IACtC,IAAI,CAACmb,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACsZ,MAAM,GAAG,IAAI0oB,cAAc,CAAC,IAAI,CAACn9C,eAAe,CAAC;IACtD,IAAI,CAAC4gD,OAAO,GAAG,IAAI7gD,eAAe,CAAC,IAAI,CAACC,eAAe,CAAC;IACxD,IAAI,CAAC6gD,WAAW,GAAG,IAAIxB,mBAAmB,CAAC,IAAI,CAACr/C,eAAe,CAAC;IAChE,IAAI,CAAC8gD,SAAS,GAAG,IAAIvB,gBAAgB,CAAC,IAAI,CAACv/C,eAAe,CAAC;EAC7D;EACAwtB,UAAUA,CAAA,EAAG;IACX,OAAO,IAAI,CAACxtB,eAAe,CAAC7O,OAAO;EACrC;;EAEA;AACF;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAM4vD,aAAaA,CAAA,EAAG;IACpB,OAAO,MAAM,IAAI,CAAC/gD,eAAe,CAAC2R,IAAI,CAAC,eAAe,EAAE,EAAE,CAAC;EAC7D;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAM0mB,MAAMA,CAACzqC,MAAM,EAAE;IACnB,MAAMozD,aAAa,GAAG,MAAM,IAAI,CAACD,aAAa,CAAC,CAAC;IAChD,MAAMjsC,KAAK,GAAGx4B,SAAS,CAAC6H,IAAI,CAAC,CAAAyJ,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEknB,KAAK,KAAI,CAAC,CAAC,CAACle,QAAQ,CAAC,CAAC;IAC3D,MAAMka,GAAG,GAAGkwC,aAAa,CAACpqD,QAAQ,CAAC,CAAC;IACpC,IAAIka,GAAG,KAAK,CAAC,EAAE;MACb,MAAM,IAAIvuB,KAAK,qCAAqC,CAAC;IACvD;IACA,IAAI0+D,WAAW,GAAG,EAAE;IACpB,MAAMjO,OAAO,GAAG,MAAMkK,eAAe,CAACpoC,KAAK,EAAEhE,GAAG,EAAE,CAACo5B,OAAO,EAAEgX,KAAK,KAAK,IAAI,CAAClhD,eAAe,CAAC2R,IAAI,CAAC,gBAAgB,EAAE,CAACu4B,OAAO,EAAEgX,KAAK,CAAC,CAAC,CAAC;IACpID,WAAW,GAAGjO,OAAO,CAAC52B,IAAI,CAAC,CAAC;IAC5B,MAAM+kC,gBAAgB,GAAG,MAAM,IAAI,CAACC,WAAW,CAACH,WAAW,EAAErzD,MAAM,CAAC;IACpE,OAAO,MAAM5F,OAAO,CAAC+M,GAAG,CAACosD,gBAAgB,CAACj7D,GAAG,CAAC25D,OAAO,IAAI,IAAI,CAACwB,UAAU,CAACxB,OAAO,CAAC,CAAC,CAAC;EACrF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMyB,WAAWA,CAAC1zD,MAAM,EAAE;IACxB,MAAMozD,aAAa,GAAG,MAAM,IAAI,CAACD,aAAa,CAAC,CAAC;IAChD,MAAMjsC,KAAK,GAAGx4B,SAAS,CAAC6H,IAAI,CAAC,CAAAyJ,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEknB,KAAK,KAAI,CAAC,CAAC,CAACle,QAAQ,CAAC,CAAC;IAC3D,MAAMka,GAAG,GAAGkwC,aAAa,CAACpqD,QAAQ,CAAC,CAAC;IACpC,IAAIka,GAAG,KAAK,CAAC,EAAE;MACb,MAAM,IAAIvuB,KAAK,qCAAqC,CAAC;IACvD;IACA,IAAI0+D,WAAW,GAAG,EAAE;IACpB,MAAMjO,OAAO,GAAG,MAAMkK,eAAe,CAACpoC,KAAK,EAAEhE,GAAG,EAAE,CAACo5B,OAAO,EAAEgX,KAAK,KAAK,IAAI,CAAClhD,eAAe,CAAC2R,IAAI,CAAC,qBAAqB,EAAE,CAACu4B,OAAO,EAAEgX,KAAK,CAAC,CAAC,CAAC;IACzID,WAAW,GAAGjO,OAAO,CAAC52B,IAAI,CAAC,CAAC;IAC5B,MAAM+kC,gBAAgB,GAAG,MAAM,IAAI,CAACC,WAAW,CAACH,WAAW,EAAErzD,MAAM,CAAC;IACpE,OAAO,MAAM5F,OAAO,CAAC+M,GAAG,CAACosD,gBAAgB,CAACj7D,GAAG,CAAC25D,OAAO,IAAI,IAAI,CAACwB,UAAU,CAACxB,OAAO,CAAC,CAAC,CAAC;EACrF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAM0B,UAAUA,CAACv/C,SAAS,EAAE;IAC1B,MAAM69C,OAAO,GAAG,MAAM,IAAI,CAAC7/C,eAAe,CAAC2R,IAAI,CAAC,YAAY,EAAE,CAAC3P,SAAS,CAAC,CAAC;IAC1E,OAAO,MAAM,IAAI,CAACq/C,UAAU,CAACxB,OAAO,CAAC;EACvC;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMW,yBAAyBA,CAACx+C,SAAS,EAAEu+C,KAAK,EAAE;IAChD,MAAMV,OAAO,GAAG,MAAM,IAAI,CAACM,eAAe,CAAC7jE,SAAS,CAAC6H,IAAI,CAAC6d,SAAS,CAAC,CAAC;IACrE,IAAI,CAAC69C,OAAO,CAACT,iBAAiB,EAAE;MAC9B,MAAM,IAAI78D,KAAK,YAAAN,MAAA,CAAY+f,SAAS,gCAA6B,CAAC;IACpE;IACA,OAAO,MAAM,IAAI,CAAChC,eAAe,CAAC2R,IAAI,CAAC,2BAA2B,EAAE,CAAC3P,SAAS,EAAE,MAAMslB,cAAc,CAACi5B,KAAK,CAAC,CAAC,CAAC;EAC/G;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMiB,4BAA4BA,CAACx/C,SAAS,EAAE08B,QAAQ,EAAE;IACtD,MAAM,IAAI,CAACyhB,eAAe,CAAC7jE,SAAS,CAAC6H,IAAI,CAAC6d,SAAS,CAAC,CAAC;IACrD,OAAO,MAAM,IAAI,CAAChC,eAAe,CAAC2R,IAAI,CAAC,8BAA8B,EAAE,CAAC3P,SAAS,EAAE,MAAMslB,cAAc,CAACoX,QAAQ,CAAC,CAAC,CAAC;EACrH;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAM+iB,uBAAuBA,CAACz/C,SAAS,EAAEw6C,uBAAuB,EAAE;IAChE,MAAMqD,OAAO,GAAG,MAAM,IAAI,CAACM,eAAe,CAAC7jE,SAAS,CAAC6H,IAAI,CAAC6d,SAAS,CAAC,CAAC;IACrE,MAAM0+C,uBAAuB,GAAG,MAAMp5B,cAAc,CAACk1B,uBAAuB,CAAC;IAC7E,IAAIkE,uBAAuB,KAAKb,OAAO,CAACrD,uBAAuB,EAAE;MAC/D,OAAOqD,OAAO,CAACphB,aAAa;IAC9B;IACA,MAAMijB,kBAAkB,GAAG,MAAM,IAAI,CAACF,4BAA4B,CAACx/C,SAAS,EAAE0+C,uBAAuB,CAAC;IACtG,IAAI,CAACgB,kBAAkB,EAAE;MACvB,MAAM,IAAIn/D,KAAK,aAAAN,MAAA,CAAay+D,uBAAuB,mCAAAz+D,MAAA,CAAgC+f,SAAS,MAAG,CAAC;IAClG;IACA,OAAO,MAAM,IAAI,CAAChC,eAAe,CAAC2R,IAAI,CAAC,yBAAyB,EAAE,CAAC3P,SAAS,EAAE0+C,uBAAuB,CAAC,CAAC;EACzG;EAiWA;AACF;AACA;EAEE;AACF;AACA;AACA;AACA;EACE,MAAMP,eAAeA,CAACn+C,SAAS,EAAE;IAC/B,IAAI;MACF,OAAO,MAAM,IAAI,CAACu/C,UAAU,CAACv/C,SAAS,CAAC;IACzC,CAAC,CAAC,OAAOsD,GAAG,EAAE;MACZgV,OAAO,CAACnzB,KAAK,sCAAAlF,MAAA,CAAsC+f,SAAS,CAAE,CAAC;MAC/D,MAAMsD,GAAG;IACX;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACE,MAAM+7C,UAAUA,CAACxB,OAAO,EAAE;IACxB,IAAIhrB,MAAM,GAAG2T,MAAM,CAACmZ,KAAK;IACzB,MAAMhjC,KAAK,GAAG,MAAM,IAAI,CAAC3e,eAAe,CAAC2vB,WAAW,CAAC,CAAC,CAAC9Q,QAAQ,CAAC,QAAQ,CAAC;IACzE,MAAMkhC,SAAS,GAAGphC,KAAK,CAAChgB,SAAS;IACjC,QAAQkhD,OAAO,CAAChrB,MAAM;MACpB,KAAK,CAAC;QACJA,MAAM,GAAGv4C,SAAS,CAAC6H,IAAI,CAAC07D,OAAO,CAACthB,cAAc,CAAC,CAACh7B,EAAE,CAACw8C,SAAS,CAAC,GAAGvX,MAAM,CAACoZ,OAAO,GAAGtlE,SAAS,CAAC6H,IAAI,CAAC07D,OAAO,CAACV,YAAY,CAAC,CAACvrB,EAAE,CAACmsB,SAAS,CAAC,GAAGvX,MAAM,CAACqZ,OAAO,GAAGrZ,MAAM,CAACsZ,MAAM;QACpK;MACF,KAAK,CAAC;QACJjtB,MAAM,GAAG2T,MAAM,CAACuZ,SAAS;QACzB;MACF,KAAK,CAAC;QACJltB,MAAM,GAAG2T,MAAM,CAACwZ,SAAS;QACzB;IACJ;IACA,OAAO;MACL/F,oBAAoB,EAAE4D,OAAO,CAACtE,aAAa;MAC3CiB,uBAAuB,EAAEqD,OAAO,CAACnhB,QAAQ;MACzCD,aAAa,EAAEohB,OAAO,CAACphB,aAAa,CAACp6C,QAAQ,CAAC,CAAC;MAC/C49D,qBAAqB,EAAE,MAAMnb,kBAAkB,CAAC,IAAI,CAAC9mC,eAAe,CAAC2vB,WAAW,CAAC,CAAC,EAAEkwB,OAAO,CAACnhB,QAAQ,EAAEmhB,OAAO,CAACphB,aAAa,CAAC;MAC5H92C,EAAE,EAAEk4D,OAAO,CAAC79C,SAAS,CAAC3d,QAAQ,CAAC,CAAC;MAChC8T,OAAO,EAAE0nD,OAAO,CAAC1nD,OAAO,CAAC9T,QAAQ,CAAC,CAAC;MACnCqT,QAAQ,EAAEmoD,OAAO,CAACnoD,QAAQ,CAACrT,QAAQ,CAAC,CAAC;MACrC69D,kBAAkB,EAAE5lE,SAAS,CAAC6H,IAAI,CAAC07D,OAAO,CAACthB,cAAc,CAAC,CAAC3nC,QAAQ,CAAC,CAAC;MACrEghC,KAAK,EAAE,MAAM4C,6BAA6B,CAACqlB,OAAO,CAACtE,aAAa,EAAE,IAAI,CAACv7C,eAAe,CAAC2vB,WAAW,CAAC,CAAC,EAAEkwB,OAAO,CAAC1nD,OAAO,EAAE,IAAI,CAACgjB,OAAO,CAAC;MACpIgnC,gBAAgB,EAAE7lE,SAAS,CAAC6H,IAAI,CAAC07D,OAAO,CAACV,YAAY,CAAC,CAACvoD,QAAQ,CAAC,CAAC;MACjEwrD,cAAc,EAAEvC,OAAO,CAACwC,cAAc;MACtCjD,iBAAiB,EAAES,OAAO,CAACG,QAAQ;MACnCnrB,MAAM,EAAEA;IACV,CAAC;EACH;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMwrB,mBAAmBA,CAACR,OAAO,EAAEnoD,QAAQ,EAAE;IAC3C,MAAMk+C,QAAQ,GAAG,MAAMyF,0BAA0B,CAAC,IAAI,CAACr7C,eAAe,CAAC2vB,WAAW,CAAC,CAAC,EAAE,IAAI,CAACnC,UAAU,CAAC,CAAC,EAAEqyB,OAAO,CAAC5D,oBAAoB,EAAE4D,OAAO,CAAC1nD,OAAO,EAAE0nD,OAAO,CAACuC,cAAc,CAAC;IAC/K,IAAI,CAACxM,QAAQ,EAAE;MACb,OAAO;QACLwK,KAAK,EAAE,KAAK;QACZj5D,KAAK,YAAAlF,MAAA,CAAY49D,OAAO,CAAC1nD,OAAO,uBAAAlW,MAAA,CAAoB49D,OAAO,CAAC5D,oBAAoB;MAClF,CAAC;IACH;IACA,MAAM11D,QAAQ,GAAG,IAAI,CAACyZ,eAAe,CAAC2vB,WAAW,CAAC,CAAC;IACnD,MAAM8K,MAAM,GAAG,IAAI/9C,QAAQ,CAACmjE,OAAO,CAAC5D,oBAAoB,EAAE/+D,SAAS,EAAEqJ,QAAQ,CAAC;IAC9E,MAAMm0C,QAAQ,GAAG,MAAMD,MAAM,CAACG,iBAAiB,CAAC5R,mBAAmB,CAAC;IACpE,MAAM2R,SAAS,GAAG,MAAMF,MAAM,CAACG,iBAAiB,CAAC3R,oBAAoB,CAAC;IACtE,IAAIyR,QAAQ,EAAE;MAAA,IAAA4nB,MAAA;MACZ,MAAM1qB,KAAK,GAAG,IAAIl7C,QAAQ,CAACmjE,OAAO,CAAC5D,oBAAoB,EAAEr+D,SAAS,EAAE2I,QAAQ,CAAC;;MAE7E;MACA,IAAI0oC,KAAK;MACT,IAAI;QACFA,KAAK,GAAG,MAAM2I,KAAK,CAAC4a,OAAO,CAACqN,OAAO,CAAC1nD,OAAO,CAAC;MAC9C,CAAC,CAAC,OAAOpK,CAAC,EAAE,CAAC;MACb,MAAMqyD,KAAK,GAAG,EAAAkC,MAAA,GAAArzB,KAAK,cAAAqzB,MAAA,uBAALA,MAAA,CAAOh0D,WAAW,CAAC,CAAC,MAAKuxD,OAAO,CAACuC,cAAc,CAAC9zD,WAAW,CAAC,CAAC;MAC3E,OAAO;QACL8xD,KAAK;QACLj5D,KAAK,EAAEi5D,KAAK,GAAG56D,SAAS,wCAAAvD,MAAA,CAAwC49D,OAAO,CAAC1nD,OAAO,uBAAAlW,MAAA,CAAoB49D,OAAO,CAAC5D,oBAAoB;MACjI,CAAC;IACH,CAAC,MAAM,IAAIthB,SAAS,EAAE;MACpB,MAAM/C,KAAK,GAAG,IAAIl7C,QAAQ,CAACmjE,OAAO,CAAC5D,oBAAoB,EAAEt+D,UAAU,EAAE4I,QAAQ,CAAC;MAC9E,MAAM4lD,OAAO,GAAG,MAAMvU,KAAK,CAAC2Y,SAAS,CAACsP,OAAO,CAACuC,cAAc,EAAEvC,OAAO,CAAC1nD,OAAO,CAAC;MAC9E,MAAMioD,KAAK,GAAGjU,OAAO,CAAC8Q,GAAG,CAACvlD,QAAQ,IAAImoD,OAAO,CAACnoD,QAAQ,CAAC;MACvD,OAAO;QACL0oD,KAAK;QACLj5D,KAAK,EAAEi5D,KAAK,GAAG56D,SAAS,oDAAAvD,MAAA,CAAoD49D,OAAO,CAAC1nD,OAAO,uBAAAlW,MAAA,CAAoB49D,OAAO,CAAC5D,oBAAoB;MAC7I,CAAC;IACH,CAAC,MAAM;MACL,OAAO;QACLmE,KAAK,EAAE,KAAK;QACZj5D,KAAK,EAAE;MACT,CAAC;IACH;EACF;EACA,MAAMi6D,WAAWA,CAACnB,QAAQ,EAAEryD,MAAM,EAAE;IAClC,IAAIqzD,WAAW,GAAG,CAAC,GAAGhB,QAAQ,CAAC;IAC/B,IAAIryD,MAAM,EAAE;MACV,IAAIA,MAAM,CAAC20D,MAAM,EAAE;QACjB,MAAMC,cAAc,GAAG,MAAMl7B,cAAc,CAAC15B,MAAM,CAAC20D,MAAM,CAAC;QAC1DtB,WAAW,GAAGA,WAAW,CAACrzD,MAAM,CAAC20D,MAAM,IAAIA,MAAM,CAACF,cAAc,CAACh+D,QAAQ,CAAC,CAAC,CAACiK,WAAW,CAAC,CAAC,MAAKk0D,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEn+D,QAAQ,CAAC,CAAC,CAACiK,WAAW,CAAC,CAAC,EAAC;MACzI;MACA,IAAIV,MAAM,CAAC60D,aAAa,EAAE;QACxB,MAAMC,aAAa,GAAG,MAAMp7B,cAAc,CAAC15B,MAAM,CAAC60D,aAAa,CAAC;QAChExB,WAAW,GAAGA,WAAW,CAACrzD,MAAM,CAAC60D,aAAa,IAAIA,aAAa,CAAClH,aAAa,CAACl3D,QAAQ,CAAC,CAAC,CAACiK,WAAW,CAAC,CAAC,MAAKo0D,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEr+D,QAAQ,CAAC,CAAC,CAACiK,WAAW,CAAC,CAAC,EAAC;MACrJ;MACA,IAAIV,MAAM,CAACuK,OAAO,KAAK3S,SAAS,EAAE;QAChCy7D,WAAW,GAAGA,WAAW,CAACrzD,MAAM,CAAC60D,aAAa;UAAA,IAAAE,eAAA;UAAA,OAAIF,aAAa,CAACtqD,OAAO,CAAC9T,QAAQ,CAAC,CAAC,MAAKuJ,MAAM,aAANA,MAAM,gBAAA+0D,eAAA,GAAN/0D,MAAM,CAAEuK,OAAO,cAAAwqD,eAAA,uBAAfA,eAAA,CAAiBt+D,QAAQ,CAAC,CAAC;QAAA,EAAC;MACrH;IACF;IACA,OAAOuJ,MAAM,aAANA,MAAM,eAANA,MAAM,CAAEurC,KAAK,IAAIvrC,MAAM,CAACurC,KAAK,GAAG8nB,WAAW,CAAC3+D,MAAM,GAAG2+D,WAAW,CAAC7xD,KAAK,CAAC,CAAC,EAAExB,MAAM,CAACurC,KAAK,CAAC,GAAG8nB,WAAW;EAC9G;AACF;;AAEA;AACA;AACA;AACA,MAAM2B,+BAA+B,GAAG,eAAe,CAAC,MAAMvmE,CAAC,CAAC+L,MAAM,CAAC;EACrE;AACF;AACA;EACE6zD,oBAAoB,EAAEnqD,kBAAkB;EACxC;AACF;AACA;EACEqG,OAAO,EAAE/T,kBAAkB;EAC3B;AACF;AACA;AACA;AACA;EACEsT,QAAQ,EAAEtT,kBAAkB,CAAC2E,OAAO,CAAC,CAAC,CAAC;EACvC;AACF;AACA;EACEyzD,uBAAuB,EAAE1qD,kBAAkB,CAAC/I,OAAO,CAACqJ,oBAAoB,CAAC;EACzE;AACF;AACA;EACEywD,gBAAgB,EAAE7nE,YAAY;EAC9B;AACF;AACA;EACE8nE,eAAe,EAAE9nE,YAAY;EAC7B;AACF;AACA;AACA;AACA;AACA;EACE+nE,mBAAmB,EAAE3+D,kBAAkB,CAAC2E,OAAO,CAAC,GAAG,CAAC;EACpD;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEi6D,YAAY,EAAE5+D,kBAAkB,CAAC2E,OAAO,CAAC,GAAG,CAAC;EAC7C;;EAEA;AACF;AACA;EACEw1C,cAAc,EAAE7qC,aAAa,CAAC3K,OAAO,CAAC,IAAIsI,IAAI,CAAC,CAAC,CAAC;EACjD;AACF;AACA;EACE8tD,YAAY,EAAElrD;AAChB,CAAC,CAAC,EAAE,CAAC;;AAEL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAMgvD,4BAA4B,CAAC;EAGjC;;EAEA99D,WAAWA,CAAC6a,eAAe,EAAEmb,OAAO,EAAE;IAAAwb,eAAA,sBAJxB9sB,wBAAwB,CAACphB,IAAI;IAyL3C;AACF;AACA;IAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAtCEkuC,eAAA,wBAuCgB,eAAetY,wBAAwB,CAAC,MAAM6kC,OAAO,IAAI;MACvE,MAAMC,aAAa,GAAGP,+BAA+B,CAACl1D,KAAK,CAACw1D,OAAO,CAAC;MACpE,MAAMtH,mBAAmB,CAAC,IAAI,CAAC57C,eAAe,EAAE,IAAI,CAACwtB,UAAU,CAAC,CAAC,EAAE21B,aAAa,CAAClH,oBAAoB,EAAEkH,aAAa,CAAChrD,OAAO,EAAE,MAAM,IAAI,CAAC6H,eAAe,CAACwxB,gBAAgB,CAAC,CAAC,CAAC;MAC5K,MAAM4xB,sBAAsB,GAAG,MAAMje,mBAAmB,CAAC,IAAI,CAACnlC,eAAe,CAAC2vB,WAAW,CAAC,CAAC,EAAEwzB,aAAa,CAACL,eAAe,EAAEK,aAAa,CAAC3G,uBAAuB,CAAC;MAClK,MAAM6G,sBAAsB,GAAG,MAAMle,mBAAmB,CAAC,IAAI,CAACnlC,eAAe,CAAC2vB,WAAW,CAAC,CAAC,EAAEwzB,aAAa,CAACN,gBAAgB,EAAEM,aAAa,CAAC3G,uBAAuB,CAAC;MACnK,MAAM79B,KAAK,GAAG,MAAM,IAAI,CAAC3e,eAAe,CAAC2vB,WAAW,CAAC,CAAC,CAAC9Q,QAAQ,CAAC,QAAQ,CAAC;MACzE,MAAMkhC,SAAS,GAAGphC,KAAK,CAAChgB,SAAS;MACjC,IAAIwkD,aAAa,CAAC5kB,cAAc,CAAC3K,EAAE,CAACmsB,SAAS,CAAC,EAAE;QAC9CoD,aAAa,CAAC5kB,cAAc,GAAGjiD,SAAS,CAAC6H,IAAI,CAAC47D,SAAS,CAAC;MAC1D;MACA,OAAOruB,WAAW,CAACC,mBAAmB,CAAC;QACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;QACrCvY,MAAM,EAAE,eAAe;QACvB0Y,IAAI,EAAE,CAAC;UACLo7C,aAAa,EAAE4H,aAAa,CAAClH,oBAAoB;UACjD9jD,OAAO,EAAEgrD,aAAa,CAAChrD,OAAO;UAC9BT,QAAQ,EAAEyrD,aAAa,CAACzrD,QAAQ;UAChCgnC,QAAQ,EAAE0c,oBAAoB,CAAC+H,aAAa,CAAC3G,uBAAuB,CAAC;UACrEqG,gBAAgB,EAAEQ,sBAAsB;UACxCP,eAAe,EAAEM,sBAAsB;UACvCL,mBAAmB,EAAEI,aAAa,CAACJ,mBAAmB;UACtDC,YAAY,EAAEG,aAAa,CAACH,YAAY;UACxCzkB,cAAc,EAAE4kB,aAAa,CAAC5kB,cAAc;UAC5C4gB,YAAY,EAAEgE,aAAa,CAAChE;QAC9B,CAAC,CAAC;QACFzxD,KAAK,EAAEwlC,OAAO,IAAI;UAChB,MAAM6d,KAAK,GAAG,IAAI,CAAC/wC,eAAe,CAAC68B,SAAS,CAAC,YAAY,EAAE3J,OAAO,CAAC4J,IAAI,CAAC,CAAC,CAAC,CAAC;UAC3E,OAAO;YACLn1C,EAAE,EAAEopD,KAAK,CAAC5wC,IAAI,CAACmjD,SAAS;YACxBpwB;UACF,CAAC;QACH;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAVEyD,eAAA,8BAWsB,eAAetY,wBAAwB,CAAC,MAAM4hC,QAAQ,IAAI;MAC9E,MAAMl8D,IAAI,GAAG,MAAMiE,OAAO,CAAC+M,GAAG,CAACkrD,QAAQ,CAAC/5D,GAAG,CAAC,MAAM25D,OAAO,IAAI;QAC3D,MAAM3hC,EAAE,GAAG,MAAM,IAAI,CAACqlC,aAAa,CAACnlC,OAAO,CAACyhC,OAAO,CAAC;QACpD,OAAO3hC,EAAE,CAACje,MAAM,CAAC,CAAC;MACpB,CAAC,CAAC,CAAC;MACH,OAAOyxB,WAAW,CAACC,mBAAmB,CAAC;QACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;QACrCvY,MAAM,EAAE,WAAW;QACnB0Y,IAAI,EAAE,CAACpc,IAAI,CAAC;QACZ2J,KAAK,EAAEwlC,OAAO,IAAI;UAChB,MAAMuB,MAAM,GAAG,IAAI,CAACz0B,eAAe,CAAC68B,SAAS,CAAC,YAAY,EAAE3J,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAE4J,IAAI,CAAC;UAC1E,OAAOrI,MAAM,CAACvuC,GAAG,CAAC6qD,KAAK,IAAI;YACzB,OAAO;cACLppD,EAAE,EAAEopD,KAAK,CAAC5wC,IAAI,CAACmjD,SAAS;cACxBpwB;YACF,CAAC;UACH,CAAC,CAAC;QACJ;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAfEyD,eAAA,wBAgBgB,eAAetY,wBAAwB,CAAC,MAAMilC,SAAS,IAAI;MACzE,MAAMJ,OAAO,GAAG,MAAM,IAAI,CAACM,eAAe,CAAClnE,SAAS,CAAC6H,IAAI,CAACm/D,SAAS,CAAC,CAAC;MACrE,MAAM3sD,gBAAgB,GAAG,MAAMwoC,qBAAqB,CAAC,IAAI,CAACn/B,eAAe,CAAC2vB,WAAW,CAAC,CAAC,EAAEuzB,OAAO,CAAC1G,uBAAuB,CAAC;MACzH,OAAO,IAAI,CAACiH,OAAO,CAACrlC,OAAO,CAACklC,SAAS,EAAE9mE,KAAK,CAACwqD,WAAW,CAACkc,OAAO,CAACJ,eAAe,EAAEnsD,gBAAgB,CAAChO,QAAQ,CAAC,CAAC;IAC/G,CAAC,CAAC;IAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAlBEguC,eAAA,kBAmBU,eAAetY,wBAAwB,CAAC,OAAOilC,SAAS,EAAEI,SAAS,KAAK;MAChF,MAAMR,OAAO,GAAG,MAAM,IAAI,CAACM,eAAe,CAAClnE,SAAS,CAAC6H,IAAI,CAACm/D,SAAS,CAAC,CAAC;MACrE,MAAMK,mBAAmB,GAAG,MAAMxe,mBAAmB,CAAC,IAAI,CAACnlC,eAAe,CAAC2vB,WAAW,CAAC,CAAC,EAAE+zB,SAAS,EAAER,OAAO,CAAC1G,uBAAuB,CAAC;MACrI,IAAImH,mBAAmB,CAACzd,EAAE,CAAC5pD,SAAS,CAAC6H,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;QAC7C,MAAM,IAAI5B,KAAK,CAAC,gCAAgC,CAAC;MACnD;MACA,IAAIjG,SAAS,CAAC6H,IAAI,CAAC++D,OAAO,CAACJ,eAAe,CAAC,CAACv/C,EAAE,CAAC,CAAC,CAAC,IAAIogD,mBAAmB,CAACpgD,EAAE,CAAC2/C,OAAO,CAACJ,eAAe,CAAC,EAAE;QACpG,MAAM,IAAIvgE,KAAK,CAAC,0DAA0D,CAAC;MAC7E;MACA,MAAMqhE,UAAU,GAAG,MAAM,IAAI,CAACC,aAAa,CAACP,SAAS,CAAC;MACtD,IAAIM,UAAU,EAAE;QACd,MAAME,SAAS,GAAG,MAAM,IAAI,CAACjH,YAAY,CAACyG,SAAS,EAAEK,mBAAmB,CAAC;QACzE/mE,SAAS,CAACknE,SAAS,EAAE,0EAA0E,CAAC;MAClG,CAAC,MAAM;QACL,MAAMC,UAAU,GAAGJ,mBAAmB;QACtC,MAAMd,gBAAgB,GAAGvmE,SAAS,CAAC6H,IAAI,CAAC++D,OAAO,CAACL,gBAAgB,CAAC;QACjEjmE,SAAS,CAACmnE,UAAU,CAAC9G,GAAG,CAAC4F,gBAAgB,CAAC,EAAE,kDAAkD,CAAC;MACjG;MACA,MAAMrzB,SAAS,GAAG,CAAC,MAAM,IAAI,CAACxvB,eAAe,CAAC8iC,gBAAgB,CAAC,CAAC,KAAK,CAAC,CAAC;MACvE,MAAMoL,iBAAiB,CAAC,IAAI,CAACluC,eAAe,EAAE2jD,mBAAmB,EAAET,OAAO,CAAC1G,uBAAuB,EAAEhtB,SAAS,CAAC;MAC9G,OAAOkC,WAAW,CAACC,mBAAmB,CAAC;QACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;QACrCvY,MAAM,EAAE,cAAc;QACtB0Y,IAAI,EAAE,CAACmjD,SAAS,EAAEK,mBAAmB,CAAC;QACtCn0B;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAfEmH,eAAA,wBAgBgB,eAAetY,wBAAwB,CAAC,MAAMilC,SAAS,IAAI;MACzE,MAAMM,UAAU,GAAG,MAAM,IAAI,CAACC,aAAa,CAACP,SAAS,CAAC;MACtD,IAAIM,UAAU,EAAE;QACd,MAAM,IAAIrhE,KAAK,qBAAqB,CAAC;MACvC;MACA,OAAOmvC,WAAW,CAACC,mBAAmB,CAAC;QACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;QACrCvY,MAAM,EAAE,eAAe;QACvB0Y,IAAI,EAAE,CAACmjD,SAAS;MAClB,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAhBE3sB,eAAA,gCAiBwB,eAAetY,wBAAwB,CAAC,OAAOilC,SAAS,EAAEU,QAAQ,KAAK;MAC7F,IAAI,CAACA,QAAQ,EAAE;QACbA,QAAQ,GAAG,MAAM,IAAI,CAAChkD,eAAe,CAACwxB,gBAAgB,CAAC,CAAC;MAC1D;MACA,MAAM0xB,OAAO,GAAG,MAAM,IAAI,CAACM,eAAe,CAAClnE,SAAS,CAAC6H,IAAI,CAACm/D,SAAS,CAAC,CAAC;MACrE,IAAI;QACF,OAAO5xB,WAAW,CAACC,mBAAmB,CAAC;UACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;UACrCvY,MAAM,EAAE,sBAAsB;UAC9B0Y,IAAI,EAAE,CAAC7jB,SAAS,CAAC6H,IAAI,CAACm/D,SAAS,CAAC;QAClC,CAAC,CAAC;MACJ,CAAC,CAAC,OAAOh+C,GAAG,EAAE;QACZ,IAAIA,GAAG,CAACle,OAAO,CAACyI,QAAQ,CAAC,oCAAoC,CAAC,EAAE;UAC9D,MAAM,IAAI0S,uBAAuB,CAAC+gD,SAAS,CAACj/D,QAAQ,CAAC,CAAC,EAAE6+D,OAAO,CAACf,gBAAgB,CAAC99D,QAAQ,CAAC,CAAC,CAAC;QAC9F,CAAC,MAAM;UACL,MAAMihB,GAAG;QACX;MACF;IACF,CAAC,CAAC;IAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAfEqxB,eAAA,gCAgBwB,eAAetY,wBAAwB,CAAC,MAAMilC,SAAS,IAAI;MACjF,MAAMJ,OAAO,GAAG,MAAM,IAAI,CAACM,eAAe,CAAClnE,SAAS,CAAC6H,IAAI,CAACm/D,SAAS,CAAC,CAAC;MACrE,IAAI;QACF,OAAO5xB,WAAW,CAACC,mBAAmB,CAAC;UACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;UACrCvY,MAAM,EAAE,sBAAsB;UAC9B0Y,IAAI,EAAE,CAAC7jB,SAAS,CAAC6H,IAAI,CAACm/D,SAAS,CAAC;QAClC,CAAC,CAAC;MACJ,CAAC,CAAC,OAAOh+C,GAAG,EAAE;QACZ,IAAIA,GAAG,CAACle,OAAO,CAACyI,QAAQ,CAAC,oCAAoC,CAAC,EAAE;UAC9D,MAAM,IAAI0S,uBAAuB,CAAC+gD,SAAS,CAACj/D,QAAQ,CAAC,CAAC,EAAE6+D,OAAO,CAACf,gBAAgB,CAAC99D,QAAQ,CAAC,CAAC,CAAC;QAC9F,CAAC,MAAM;UACL,MAAMihB,GAAG;QACX;MACF;IACF,CAAC,CAAC;IAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAfEqxB,eAAA,sBAgBc,eAAetY,wBAAwB,CAAC,MAAMilC,SAAS,IAAI;MACvE,MAAMJ,OAAO,GAAG,MAAM,IAAI,CAACM,eAAe,CAAClnE,SAAS,CAAC6H,IAAI,CAACm/D,SAAS,CAAC,CAAC;MACrE,IAAI;QACF,MAAMM,UAAU,GAAG,MAAM,IAAI,CAACC,aAAa,CAACP,SAAS,CAAC;QACtD1mE,SAAS,CAACgnE,UAAU,EAAE,sBAAsB,CAAC;QAC7C,MAAMK,cAAc,GAAG,IAAI,CAACrD,OAAO,CAAC3gD,MAAM,CAAC,sBAAsB,EAAE,CAACqjD,SAAS,CAAC,CAAC;QAC/E,MAAMY,aAAa,GAAG,IAAI,CAACtD,OAAO,CAAC3gD,MAAM,CAAC,sBAAsB,EAAE,CAACqjD,SAAS,CAAC,CAAC;QAC9E,OAAO5xB,WAAW,CAACC,mBAAmB,CAAC;UACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;UACrCvY,MAAM,EAAE,WAAW;UACnB0Y,IAAI,EAAE,CAAC,CAAC8jD,cAAc,EAAEC,aAAa,CAAC;QACxC,CAAC,CAAC;MACJ,CAAC,CAAC,OAAO5+C,GAAG,EAAE;QACZ,IAAIA,GAAG,CAACle,OAAO,CAACyI,QAAQ,CAAC,oCAAoC,CAAC,EAAE;UAC9D,MAAM,IAAI0S,uBAAuB,CAAC+gD,SAAS,CAACj/D,QAAQ,CAAC,CAAC,EAAE6+D,OAAO,CAACf,gBAAgB,CAAC99D,QAAQ,CAAC,CAAC,CAAC;QAC9F,CAAC,MAAM;UACL,MAAMihB,GAAG;QACX;MACF;IACF,CAAC,CAAC;IA5eA,IAAI,CAACtF,eAAe,GAAGA,eAAe;IACtC,IAAI,CAACmb,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACsZ,MAAM,GAAG,IAAI0oB,cAAc,CAAC,IAAI,CAACn9C,eAAe,CAAC;IACtD,IAAI,CAAC4gD,OAAO,GAAG,IAAI7gD,eAAe,CAAC,IAAI,CAACC,eAAe,CAAC;IACxD,IAAI,CAAC6gD,WAAW,GAAG,IAAIxB,mBAAmB,CAAC,IAAI,CAACr/C,eAAe,CAAC;IAChE,IAAI,CAAC8gD,SAAS,GAAG,IAAIvB,gBAAgB,CAAC,IAAI,CAACv/C,eAAe,CAAC;EAC7D;EACAwtB,UAAUA,CAAA,EAAG;IACX,OAAO,IAAI,CAACxtB,eAAe,CAAC7O,OAAO;EACrC;;EAEA;AACF;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAM4vD,aAAaA,CAAA,EAAG;IACpB,OAAO,MAAM,IAAI,CAAC/gD,eAAe,CAAC2R,IAAI,CAAC,eAAe,EAAE,EAAE,CAAC;EAC7D;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAM0mB,MAAMA,CAACzqC,MAAM,EAAE;IACnB,MAAMu2D,aAAa,GAAG,MAAM,IAAI,CAACpD,aAAa,CAAC,CAAC;IAChD,MAAMjsC,KAAK,GAAGx4B,SAAS,CAAC6H,IAAI,CAAC,CAAAyJ,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEknB,KAAK,KAAI,CAAC,CAAC,CAACle,QAAQ,CAAC,CAAC;IAC3D,MAAMka,GAAG,GAAGqzC,aAAa,CAACvtD,QAAQ,CAAC,CAAC;IACpC,IAAIka,GAAG,KAAK,CAAC,EAAE;MACb,MAAM,IAAIvuB,KAAK,qCAAqC,CAAC;IACvD;IACA,IAAI6hE,WAAW,GAAG,EAAE;IACpB,MAAMpR,OAAO,GAAG,MAAMkK,eAAe,CAACpoC,KAAK,EAAEhE,GAAG,EAAE,CAACo5B,OAAO,EAAEgX,KAAK,KAAK,IAAI,CAAClhD,eAAe,CAAC2R,IAAI,CAAC,gBAAgB,EAAE,CAACu4B,OAAO,EAAEgX,KAAK,CAAC,CAAC,CAAC;IACpIkD,WAAW,GAAGpR,OAAO,CAAC52B,IAAI,CAAC,CAAC;IAC5B,MAAMioC,gBAAgB,GAAG,MAAM,IAAI,CAACjD,WAAW,CAACgD,WAAW,EAAEx2D,MAAM,CAAC;IACpE,OAAO,MAAM5F,OAAO,CAAC+M,GAAG,CAACsvD,gBAAgB,CAACn+D,GAAG,CAACg9D,OAAO,IAAI,IAAI,CAACoB,UAAU,CAACpB,OAAO,CAAC,CAAC,CAAC;EACrF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAM5B,WAAWA,CAAC1zD,MAAM,EAAE;IACxB,MAAMu2D,aAAa,GAAG,MAAM,IAAI,CAACpD,aAAa,CAAC,CAAC;IAChD,MAAMjsC,KAAK,GAAGx4B,SAAS,CAAC6H,IAAI,CAAC,CAAAyJ,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEknB,KAAK,KAAI,CAAC,CAAC,CAACle,QAAQ,CAAC,CAAC;IAC3D,MAAMka,GAAG,GAAGqzC,aAAa,CAACvtD,QAAQ,CAAC,CAAC;IACpC,IAAIka,GAAG,KAAK,CAAC,EAAE;MACb,MAAM,IAAIvuB,KAAK,qCAAqC,CAAC;IACvD;IACA,IAAI6hE,WAAW,GAAG,EAAE;IACpB,MAAMpR,OAAO,GAAG,MAAMkK,eAAe,CAACpoC,KAAK,EAAEhE,GAAG,EAAE,CAACo5B,OAAO,EAAEgX,KAAK,KAAK,IAAI,CAAClhD,eAAe,CAAC2R,IAAI,CAAC,qBAAqB,EAAE,CAACu4B,OAAO,EAAEgX,KAAK,CAAC,CAAC,CAAC;IACzIkD,WAAW,GAAGpR,OAAO,CAAC52B,IAAI,CAAC,CAAC;IAC5B,MAAMioC,gBAAgB,GAAG,MAAM,IAAI,CAACjD,WAAW,CAACgD,WAAW,EAAEx2D,MAAM,CAAC;IACpE,OAAO,MAAM5F,OAAO,CAAC+M,GAAG,CAACsvD,gBAAgB,CAACn+D,GAAG,CAACg9D,OAAO,IAAI,IAAI,CAACoB,UAAU,CAACpB,OAAO,CAAC,CAAC,CAAC;EACrF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMqB,UAAUA,CAACjB,SAAS,EAAE;IAC1B,MAAMJ,OAAO,GAAG,MAAM,IAAI,CAACljD,eAAe,CAAC2R,IAAI,CAAC,YAAY,EAAE,CAAC2xC,SAAS,CAAC,CAAC;IAC1E,OAAO,MAAM,IAAI,CAACgB,UAAU,CAACpB,OAAO,CAAC;EACvC;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMW,aAAaA,CAACP,SAAS,EAAE;IAC7B,MAAM,IAAI,CAACE,eAAe,CAAClnE,SAAS,CAAC6H,IAAI,CAACm/D,SAAS,CAAC,CAAC;IACrD,MAAMkB,GAAG,GAAG,MAAM,IAAI,CAACxkD,eAAe,CAAC2R,IAAI,CAAC,eAAe,EAAE,CAAC2xC,SAAS,CAAC,CAAC;IACzE,IAAIkB,GAAG,CAACC,OAAO,KAAKhoE,SAAS,CAAC+W,WAAW,EAAE;MACzC,OAAOhO,SAAS;IAClB;IACA,OAAO,MAAM,IAAI,CAACk/D,MAAM,CAACpB,SAAS,CAACj/D,QAAQ,CAAC,CAAC,EAAEmgE,GAAG,CAACC,OAAO,EAAED,GAAG,CAACG,SAAS,EAAEH,GAAG,CAACI,UAAU,CAACvgE,QAAQ,CAAC,CAAC,CAAC;EACvG;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMw4D,YAAYA,CAACyG,SAAS,EAAEI,SAAS,EAAE;IACvC,OAAO,MAAM,IAAI,CAAC1jD,eAAe,CAAC2R,IAAI,CAAC,iBAAiB,EAAE,CAAC2xC,SAAS,EAAEI,SAAS,CAAC,CAAC;EACnF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMmB,SAASA,CAACvB,SAAS,EAAE;IACzB,MAAMJ,OAAO,GAAG,MAAM,IAAI,CAACM,eAAe,CAAClnE,SAAS,CAAC6H,IAAI,CAACm/D,SAAS,CAAC,CAAC;IACrE,MAAMkB,GAAG,GAAG,MAAM,IAAI,CAACxkD,eAAe,CAAC2R,IAAI,CAAC,eAAe,EAAE,CAAC2xC,SAAS,CAAC,CAAC;IACzE,MAAMhyD,GAAG,GAAGhV,SAAS,CAAC6H,IAAI,CAAC0P,IAAI,CAACC,KAAK,CAACzC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;IACzD,MAAMkR,OAAO,GAAGlmB,SAAS,CAAC6H,IAAI,CAAC++D,OAAO,CAACf,gBAAgB,CAAC;;IAExD;IACA,IAAI7wD,GAAG,CAACiS,EAAE,CAACf,OAAO,CAAC,IAAIgiD,GAAG,CAACC,OAAO,KAAKhoE,SAAS,CAAC+W,WAAW,EAAE;MAC5D,OAAOgxD,GAAG,CAACC,OAAO;IACpB;IACA;;IAEA;IACA,MAAMK,aAAa,GAAG,IAAI3H,cAAc,CAAC,IAAI,CAACn9C,eAAe,CAAC;IAC9D,MAAM+kD,cAAc,GAAG,MAAMD,aAAa,CAAClG,SAAS,CAAC,eAAe,CAAC;IACrE,MAAMoG,MAAM,GAAGD,cAAc,CAACxxD,IAAI,CAAClY,CAAC,IAAIA,CAAC,CAAC0I,IAAI,CAACu/D,SAAS,CAACpd,EAAE,CAAC5pD,SAAS,CAAC6H,IAAI,CAACm/D,SAAS,CAAC,CAAC,CAAC;IACvF,IAAI,CAAC0B,MAAM,EAAE;MACX,MAAM,IAAIziE,KAAK,mCAAAN,MAAA,CAAmCqhE,SAAS,wBAAqB,CAAC;IACnF;IACA,OAAO0B,MAAM,CAACjhE,IAAI,CAACkhE,aAAa;EAClC;EA4TA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMC,eAAeA,CAAC5B,SAAS,EAAE;IAC/B,OAAO,CAAC,MAAM,IAAI,CAACiB,UAAU,CAACjB,SAAS,CAAC,EAAEN,YAAY;EACxD;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMmC,iBAAiBA,CAAC7B,SAAS,EAAE;IACjC;IACA,MAAM,CAAC8B,mBAAmB,EAAExB,UAAU,EAAEV,OAAO,CAAC,GAAG,MAAMl7D,OAAO,CAAC+M,GAAG,CAAC,CAAC,IAAI,CAACmwD,eAAe,CAAC5B,SAAS,CAAC,EAAE,IAAI,CAACO,aAAa,CAACP,SAAS,CAAC,EAAE,IAAI,CAACE,eAAe,CAAClnE,SAAS,CAAC6H,IAAI,CAACm/D,SAAS,CAAC,CAAC,CAAC,CAAC;IACvL,MAAM+B,wBAAwB,GAAGzB,UAAU;IAC3C;IACAtnE,SAAS,CAAC6H,IAAI,CAACy/D,UAAU,CAACF,SAAS,CAAC;IACpC;IACApnE,SAAS,CAAC6H,IAAI,CAAC++D,OAAO,CAACL,gBAAgB,CAAC;IACxC,MAAMyC,cAAc,GAAGD,wBAAwB,CAACjmC,GAAG;IACnD;IACA;IACAimC,wBAAwB,CAAClmC,GAAG,CAACimC,mBAAmB,CAAC,CAAC3lC,GAAG,CAAC,KAAK,CAAC,CAAC;;IAE7D;IACA,OAAOqnB,kBAAkB,CAAC,IAAI,CAAC9mC,eAAe,CAAC2vB,WAAW,CAAC,CAAC,EAAEuzB,OAAO,CAAC1G,uBAAuB,EAAE8I,cAAc,CAAC;EAChH;;EAEA;AACF;AACA;;EAEE;AACF;AACA;AACA;AACA;EACE,MAAM9B,eAAeA,CAACF,SAAS,EAAE;IAC/B,IAAI;MACF,OAAO,MAAM,IAAI,CAACiB,UAAU,CAACjB,SAAS,CAAC;IACzC,CAAC,CAAC,OAAOh+C,GAAG,EAAE;MACZgV,OAAO,CAACnzB,KAAK,sCAAAlF,MAAA,CAAsCqhE,SAAS,CAAE,CAAC;MAC/D,MAAMh+C,GAAG;IACX;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACE,MAAMg/C,UAAUA,CAACpB,OAAO,EAAE;IACxB,IAAIruB,MAAM,GAAG2T,MAAM,CAACmZ,KAAK;IACzB,MAAMhjC,KAAK,GAAG,MAAM,IAAI,CAAC3e,eAAe,CAAC2vB,WAAW,CAAC,CAAC,CAAC9Q,QAAQ,CAAC,QAAQ,CAAC;IACzE,MAAMkhC,SAAS,GAAGphC,KAAK,CAAChgB,SAAS;IACjC,QAAQukD,OAAO,CAACruB,MAAM;MACpB,KAAK,CAAC;QACJA,MAAM,GAAGv4C,SAAS,CAAC6H,IAAI,CAAC++D,OAAO,CAAC3kB,cAAc,CAAC,CAACh7B,EAAE,CAACw8C,SAAS,CAAC,GAAGvX,MAAM,CAACoZ,OAAO,GAAGtlE,SAAS,CAAC6H,IAAI,CAAC++D,OAAO,CAAC/D,YAAY,CAAC,CAACvrB,EAAE,CAACmsB,SAAS,CAAC,GAAGvX,MAAM,CAACqZ,OAAO,GAAGrZ,MAAM,CAACsZ,MAAM;QACpK;MACF,KAAK,CAAC;QACJjtB,MAAM,GAAG2T,MAAM,CAACuZ,SAAS;QACzB;MACF,KAAK,CAAC;QACJltB,MAAM,GAAG2T,MAAM,CAACwZ,SAAS;QACzB;IACJ;IACA,OAAO;MACLr6D,EAAE,EAAEu7D,OAAO,CAACI,SAAS,CAACj/D,QAAQ,CAAC,CAAC;MAChC+9D,cAAc,EAAEc,OAAO,CAACqC,cAAc;MACtCtJ,oBAAoB,EAAEiH,OAAO,CAAC3H,aAAa;MAC3CpjD,OAAO,EAAE+qD,OAAO,CAAC/qD,OAAO,CAAC9T,QAAQ,CAAC,CAAC;MACnCqT,QAAQ,EAAEwrD,OAAO,CAACxrD,QAAQ,CAACrT,QAAQ,CAAC,CAAC;MACrCm4D,uBAAuB,EAAE0G,OAAO,CAACxkB,QAAQ;MACzCmkB,gBAAgB,EAAEK,OAAO,CAACL,gBAAgB,CAACx+D,QAAQ,CAAC,CAAC;MACrDmhE,uBAAuB,EAAE,MAAM1e,kBAAkB,CAAC,IAAI,CAAC9mC,eAAe,CAAC2vB,WAAW,CAAC,CAAC,EAAEuzB,OAAO,CAACxkB,QAAQ,EAAEwkB,OAAO,CAACL,gBAAgB,CAAC;MACjIC,eAAe,EAAEI,OAAO,CAACJ,eAAe,CAACz+D,QAAQ,CAAC,CAAC;MACnDohE,mBAAmB,EAAE,MAAM3e,kBAAkB,CAAC,IAAI,CAAC9mC,eAAe,CAAC2vB,WAAW,CAAC,CAAC,EAAEuzB,OAAO,CAACxkB,QAAQ,EAAEwkB,OAAO,CAACJ,eAAe,CAAC;MAC5HC,mBAAmB,EAAEzmE,SAAS,CAAC6H,IAAI,CAAC++D,OAAO,CAACH,mBAAmB,CAAC,CAACnsD,QAAQ,CAAC,CAAC;MAC3EosD,YAAY,EAAE1mE,SAAS,CAAC6H,IAAI,CAAC++D,OAAO,CAACF,YAAY,CAAC,CAACpsD,QAAQ,CAAC,CAAC;MAC7DsrD,kBAAkB,EAAE5lE,SAAS,CAAC6H,IAAI,CAAC++D,OAAO,CAAC3kB,cAAc,CAAC,CAAC3nC,QAAQ,CAAC,CAAC;MACrEurD,gBAAgB,EAAE7lE,SAAS,CAAC6H,IAAI,CAAC++D,OAAO,CAAC/D,YAAY,CAAC,CAACvoD,QAAQ,CAAC,CAAC;MACjEghC,KAAK,EAAE,MAAM4C,6BAA6B,CAAC0oB,OAAO,CAAC3H,aAAa,EAAE,IAAI,CAACv7C,eAAe,CAAC2vB,WAAW,CAAC,CAAC,EAAEuzB,OAAO,CAAC/qD,OAAO,EAAE,IAAI,CAACgjB,OAAO,CAAC;MACpI0Z,MAAM,EAAEA;IACV,CAAC;EACH;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACE,MAAM6vB,MAAMA,CAACpB,SAAS,EAAEoC,aAAa,EAAElJ,uBAAuB,EAAEkH,SAAS,EAAE;IACzE,MAAMiC,qBAAqB,GAAG,MAAMr+B,cAAc,CAACo+B,aAAa,CAAC;IACjE,MAAMhF,uBAAuB,GAAG,MAAMp5B,cAAc,CAACk1B,uBAAuB,CAAC;IAC7E,OAAO;MACL8G,SAAS;MACToC,aAAa,EAAEC,qBAAqB;MACpCnJ,uBAAuB,EAAEkE,uBAAuB;MAChDgD,SAAS;MACTkC,sBAAsB,EAAE,MAAM9e,kBAAkB,CAAC,IAAI,CAAC9mC,eAAe,CAAC2vB,WAAW,CAAC,CAAC,EAAE+wB,uBAAuB,EAAEgD,SAAS;IACzH,CAAC;EACH;EACA,MAAMtC,WAAWA,CAACyE,QAAQ,EAAEj4D,MAAM,EAAE;IAClC,IAAIw2D,WAAW,GAAG,CAAC,GAAGyB,QAAQ,CAAC;IAC/B,IAAIj4D,MAAM,EAAE;MACV,IAAIA,MAAM,CAAC20D,MAAM,EAAE;QACjB,MAAMC,cAAc,GAAG,MAAMl7B,cAAc,CAAC15B,MAAM,CAAC20D,MAAM,CAAC;QAC1D6B,WAAW,GAAGA,WAAW,CAACx2D,MAAM,CAAC20D,MAAM,IAAIA,MAAM,CAACgD,cAAc,CAAClhE,QAAQ,CAAC,CAAC,CAACiK,WAAW,CAAC,CAAC,MAAKk0D,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEn+D,QAAQ,CAAC,CAAC,CAACiK,WAAW,CAAC,CAAC,EAAC;MACzI;MACA,IAAIV,MAAM,CAAC60D,aAAa,EAAE;QACxB,MAAMC,aAAa,GAAG,MAAMp7B,cAAc,CAAC15B,MAAM,CAAC60D,aAAa,CAAC;QAChE2B,WAAW,GAAGA,WAAW,CAACx2D,MAAM,CAAC60D,aAAa,IAAIA,aAAa,CAAClH,aAAa,CAACl3D,QAAQ,CAAC,CAAC,CAACiK,WAAW,CAAC,CAAC,MAAKo0D,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEr+D,QAAQ,CAAC,CAAC,CAACiK,WAAW,CAAC,CAAC,EAAC;MACrJ;MACA,IAAIV,MAAM,CAACuK,OAAO,KAAK3S,SAAS,EAAE;QAChC4+D,WAAW,GAAGA,WAAW,CAACx2D,MAAM,CAAC60D,aAAa;UAAA,IAAAqD,gBAAA;UAAA,OAAIrD,aAAa,CAACtqD,OAAO,CAAC9T,QAAQ,CAAC,CAAC,MAAKuJ,MAAM,aAANA,MAAM,gBAAAk4D,gBAAA,GAANl4D,MAAM,CAAEuK,OAAO,cAAA2tD,gBAAA,uBAAfA,gBAAA,CAAiBzhE,QAAQ,CAAC,CAAC;QAAA,EAAC;MACrH;IACF;IACA,OAAOuJ,MAAM,aAANA,MAAM,eAANA,MAAM,CAAEurC,KAAK,IAAIvrC,MAAM,CAACurC,KAAK,GAAGirB,WAAW,CAAC9hE,MAAM,GAAG8hE,WAAW,CAACh1D,KAAK,CAAC,CAAC,EAAExB,MAAM,CAACurC,KAAK,CAAC,GAAGirB,WAAW;EAC9G;AACF;;AAEA;AACA;AACA;AACA,MAAM2B,sBAAsB,GAAG,eAAe,CAAC,MAAM1pE,CAAC,CAAC+L,MAAM,CAAC;EAC5D;AACF;AACA;EACE6zD,oBAAoB,EAAEnqD,kBAAkB;EACxC;AACF;AACA;EACEqG,OAAO,EAAE/T,kBAAkB;EAC3B;AACF;AACA;AACA;AACA;EACEsT,QAAQ,EAAEtT,kBAAkB,CAAC2E,OAAO,CAAC,CAAC,CAAC;EACvC;AACF;AACA;EACEyzD,uBAAuB,EAAE1qD,kBAAkB,CAAC/I,OAAO,CAACqJ,oBAAoB,CAAC;EACzE;AACF;AACA;EACE8yC,UAAU,EAAElqD,YAAY;EACxB;AACF;AACA;EACEmkE,YAAY,EAAElrD;AAChB,CAAC,CAAC,EAAE,CAAC;;AAEL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM+xD,mBAAmB,CAAC;EAGxB;;EAEA7gE,WAAWA,CAAC6a,eAAe,EAAEmb,OAAO,EAAE;IAAAwb,eAAA,sBAJxB7sB,cAAc,CAACrhB,IAAI;IA0GjC;AACF;AACA;IAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IA9BEkuC,eAAA,oBA+BY,eAAetY,wBAAwB,CAAC,MAAMi+B,KAAK,IAAI;MACjE,MAAM2J,WAAW,GAAG,MAAMF,sBAAsB,CAAC/wD,UAAU,CAACsnD,KAAK,CAAC;MAClE,MAAM/zD,OAAO,GAAG,MAAM,IAAI,CAACyX,eAAe,CAAC28B,UAAU,CAAC,CAAC;MACvD,MAAM+B,QAAQ,GAAGO,aAAa,CAACgnB,WAAW,CAACzJ,uBAAuB,CAAC,GAAGnqD,aAAa,CAAC9J,OAAO,CAAC,CAACgK,OAAO,CAACpB,OAAO,GAAG80D,WAAW,CAACzJ,uBAAuB;MAClJ,MAAM1I,oBAAoB,GAAG,MAAM3O,mBAAmB,CAAC,IAAI,CAACnlC,eAAe,CAAC2vB,WAAW,CAAC,CAAC,EAAEs2B,WAAW,CAAC/gB,UAAU,EAAExG,QAAQ,CAAC;MAC5H,MAAMlP,SAAS,GAAG,MAAM,IAAI,CAACxvB,eAAe,CAAC8iC,gBAAgB,CAAC,CAAC;MAC/D,MAAMoL,iBAAiB,CAAC,IAAI,CAACluC,eAAe,EAAE8zC,oBAAoB,EAAEpV,QAAQ,EAAElP,SAAS,CAAC;MACxF,OAAOkC,WAAW,CAACC,mBAAmB,CAAC;QACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;QACrCvY,MAAM,EAAE,WAAW;QACnB0Y,IAAI,EAAE,CAAC;UACLo7C,aAAa,EAAE0K,WAAW,CAAChK,oBAAoB;UAC/C9jD,OAAO,EAAE8tD,WAAW,CAAC9tD,OAAO;UAC5BT,QAAQ,EAAEuuD,WAAW,CAACvuD,QAAQ;UAC9BgnC,QAAQ,EAAEA,QAAQ;UAClBwG,UAAU,EAAE4O,oBAAoB;UAChCoS,mBAAmB,EAAED,WAAW,CAAC9G;QACnC,CAAC,CAAC;QACFzxD,KAAK,EAAEwlC,OAAO,IAAI;UAChB,MAAM6d,KAAK,GAAG,IAAI,CAAC/wC,eAAe,CAAC68B,SAAS,CAAC,UAAU,EAAE3J,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAE4J,IAAI,CAAC;UACvE,OAAO;YACLn1C,EAAE,EAAEopD,KAAK,CAAC,CAAC,CAAC,CAAC5wC,IAAI,CAACgmD,OAAO;YACzBjzB;UACF,CAAC;QACH;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAfEyD,eAAA,sBAgBc,eAAetY,wBAAwB,CAAC,MAAM8nC,OAAO,IAAI;MACrE,OAAOz0B,WAAW,CAACC,mBAAmB,CAAC;QACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;QACrCvY,MAAM,EAAE,aAAa;QACrB0Y,IAAI,EAAE,CAACgmD,OAAO;MAChB,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAdExvB,eAAA,sBAec,eAAetY,wBAAwB,CAAC,MAAM8nC,OAAO,IAAI;MACrE,MAAM7J,KAAK,GAAG,MAAM,IAAI,CAAC8J,aAAa,CAAC9pE,SAAS,CAAC6H,IAAI,CAACgiE,OAAO,CAAC,CAAC;MAC/D,MAAM;QACJ/F,KAAK;QACLj5D;MACF,CAAC,GAAG,MAAM,IAAI,CAACk/D,iBAAiB,CAAC/J,KAAK,CAAC;MACvC,IAAI,CAAC8D,KAAK,EAAE;QACV,MAAM,IAAI79D,KAAK,UAAAN,MAAA,CAAUkkE,OAAO,2BAAAlkE,MAAA,CAAwBkF,KAAK,CAAE,CAAC;MAClE;MACA,MAAMqoC,SAAS,GAAG,CAAC,MAAM,IAAI,CAACxvB,eAAe,CAAC8iC,gBAAgB,CAAC,CAAC,KAAK,CAAC,CAAC;MACvE,MAAM8Y,mBAAmB,CAAC,IAAI,CAAC57C,eAAe,EAAE,IAAI,CAACwtB,UAAU,CAAC,CAAC,EAAE8uB,KAAK,CAACL,oBAAoB,EAAEK,KAAK,CAACnkD,OAAO,EAAE,MAAM,IAAI,CAAC6H,eAAe,CAACwxB,gBAAgB,CAAC,CAAC,CAAC;MAC5J,OAAOE,WAAW,CAACC,mBAAmB,CAAC;QACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;QACrCvY,MAAM,EAAE,aAAa;QACrB0Y,IAAI,EAAE,CAACgmD,OAAO,CAAC;QACf32B;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;IA5NA,IAAI,CAACxvB,eAAe,GAAGA,eAAe;IACtC,IAAI,CAACmb,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACsZ,MAAM,GAAG,IAAI0oB,cAAc,CAAC,IAAI,CAACn9C,eAAe,CAAC;IACtD,IAAI,CAAC4gD,OAAO,GAAG,IAAI7gD,eAAe,CAAC,IAAI,CAACC,eAAe,CAAC;IACxD,IAAI,CAAC6gD,WAAW,GAAG,IAAIxB,mBAAmB,CAAC,IAAI,CAACr/C,eAAe,CAAC;IAChE,IAAI,CAAC8gD,SAAS,GAAG,IAAIvB,gBAAgB,CAAC,IAAI,CAACv/C,eAAe,CAAC;EAC7D;EACAwtB,UAAUA,CAAA,EAAG;IACX,OAAO,IAAI,CAACxtB,eAAe,CAAC7O,OAAO;EACrC;;EAEA;AACF;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAM4vD,aAAaA,CAAA,EAAG;IACpB,OAAO,MAAM,IAAI,CAAC/gD,eAAe,CAAC2R,IAAI,CAAC,aAAa,EAAE,EAAE,CAAC;EAC3D;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAM0mB,MAAMA,CAACzqC,MAAM,EAAE;IACnB,MAAM04D,WAAW,GAAG,MAAM,IAAI,CAACvF,aAAa,CAAC,CAAC;IAC9C,MAAMjsC,KAAK,GAAGx4B,SAAS,CAAC6H,IAAI,CAAC,CAAAyJ,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEknB,KAAK,KAAI,CAAC,CAAC,CAACle,QAAQ,CAAC,CAAC;IAC3D,MAAMka,GAAG,GAAGw1C,WAAW,CAAC1vD,QAAQ,CAAC,CAAC;IAClC,IAAIka,GAAG,KAAK,CAAC,EAAE;MACb,MAAM,IAAIvuB,KAAK,mCAAmC,CAAC;IACrD;IACA,IAAIgkE,SAAS,GAAG,EAAE;IAClB,MAAMvT,OAAO,GAAG,MAAMkK,eAAe,CAACpoC,KAAK,EAAEhE,GAAG,EAAE,CAACo5B,OAAO,EAAEgX,KAAK,KAAK,IAAI,CAAClhD,eAAe,CAAC2R,IAAI,CAAC,cAAc,EAAE,CAACu4B,OAAO,EAAEgX,KAAK,CAAC,CAAC,CAAC;IAClIqF,SAAS,GAAGvT,OAAO,CAAC52B,IAAI,CAAC,CAAC;IAC1B,MAAMoqC,cAAc,GAAG,MAAM,IAAI,CAACpF,WAAW,CAACmF,SAAS,EAAE34D,MAAM,CAAC;IAChE,OAAO,MAAM5F,OAAO,CAAC+M,GAAG,CAACyxD,cAAc,CAACtgE,GAAG,CAACo2D,KAAK,IAAI,IAAI,CAACD,QAAQ,CAACC,KAAK,CAAC,CAAC,CAAC;EAC7E;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMgF,WAAWA,CAAC1zD,MAAM,EAAE;IACxB,MAAM04D,WAAW,GAAG,MAAM,IAAI,CAACvF,aAAa,CAAC,CAAC;IAC9C,MAAMjsC,KAAK,GAAGx4B,SAAS,CAAC6H,IAAI,CAAC,CAAAyJ,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEknB,KAAK,KAAI,CAAC,CAAC,CAACle,QAAQ,CAAC,CAAC;IAC3D,MAAMka,GAAG,GAAGw1C,WAAW,CAAC1vD,QAAQ,CAAC,CAAC;IAClC,IAAIka,GAAG,KAAK,CAAC,EAAE;MACb,MAAM,IAAIvuB,KAAK,mCAAmC,CAAC;IACrD;IACA,IAAIgkE,SAAS,GAAG,EAAE;IAClB,MAAMvT,OAAO,GAAG,MAAMkK,eAAe,CAACpoC,KAAK,EAAEhE,GAAG,EAAE,CAACo5B,OAAO,EAAEgX,KAAK,KAAK,IAAI,CAAClhD,eAAe,CAAC2R,IAAI,CAAC,mBAAmB,EAAE,CAACu4B,OAAO,EAAEgX,KAAK,CAAC,CAAC,CAAC;IACvIqF,SAAS,GAAGvT,OAAO,CAAC52B,IAAI,CAAC,CAAC;IAC1B,MAAMoqC,cAAc,GAAG,MAAM,IAAI,CAACpF,WAAW,CAACmF,SAAS,EAAE34D,MAAM,CAAC;IAChE,OAAO,MAAM5F,OAAO,CAAC+M,GAAG,CAACyxD,cAAc,CAACtgE,GAAG,CAACo2D,KAAK,IAAI,IAAI,CAACD,QAAQ,CAACC,KAAK,CAAC,CAAC,CAAC;EAC7E;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMmK,QAAQA,CAACN,OAAO,EAAE;IACtB,MAAM7J,KAAK,GAAG,MAAM,IAAI,CAACt8C,eAAe,CAAC2R,IAAI,CAAC,UAAU,EAAE,CAACw0C,OAAO,CAAC,CAAC;IACpE,OAAO,MAAM,IAAI,CAAC9J,QAAQ,CAACC,KAAK,CAAC;EACnC;EA2HA;AACF;AACA;EAEE;AACF;AACA;AACA;AACA;EACE,MAAM8J,aAAaA,CAACD,OAAO,EAAE;IAC3B,IAAI;MACF,OAAO,MAAM,IAAI,CAACM,QAAQ,CAACN,OAAO,CAAC;IACrC,CAAC,CAAC,OAAO7gD,GAAG,EAAE;MACZgV,OAAO,CAACnzB,KAAK,oCAAAlF,MAAA,CAAoCkkE,OAAO,CAAE,CAAC;MAC3D,MAAM7gD,GAAG;IACX;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACE,MAAM+2C,QAAQA,CAACC,KAAK,EAAE;IACpB,IAAIznB,MAAM,GAAG2T,MAAM,CAACmZ,KAAK;IACzB,MAAMhjC,KAAK,GAAG,MAAM,IAAI,CAAC3e,eAAe,CAAC2vB,WAAW,CAAC,CAAC,CAAC9Q,QAAQ,CAAC,QAAQ,CAAC;IACzE,MAAMkhC,SAAS,GAAGphC,KAAK,CAAChgB,SAAS;IACjC,QAAQ29C,KAAK,CAACznB,MAAM;MAClB,KAAK,CAAC;QACJA,MAAM,GAAGv4C,SAAS,CAAC6H,IAAI,CAACm4D,KAAK,CAAC4J,mBAAmB,CAAC,CAACtyB,EAAE,CAACmsB,SAAS,CAAC,GAAGvX,MAAM,CAACqZ,OAAO,GAAGrZ,MAAM,CAACsZ,MAAM;QACjG;MACF,KAAK,CAAC;QACJjtB,MAAM,GAAG2T,MAAM,CAACuZ,SAAS;QACzB;MACF,KAAK,CAAC;QACJltB,MAAM,GAAG2T,MAAM,CAACwZ,SAAS;QACzB;IACJ;IACA,OAAO;MACLr6D,EAAE,EAAE20D,KAAK,CAAC6J,OAAO,CAAC9hE,QAAQ,CAAC,CAAC;MAC5BqiE,cAAc,EAAEpK,KAAK,CAACI,OAAO;MAC7BT,oBAAoB,EAAEK,KAAK,CAACf,aAAa;MACzCiB,uBAAuB,EAAEF,KAAK,CAAC5d,QAAQ;MACvCvmC,OAAO,EAAEmkD,KAAK,CAACnkD,OAAO,CAAC9T,QAAQ,CAAC,CAAC;MACjCqT,QAAQ,EAAE4kD,KAAK,CAAC5kD,QAAQ,CAACrT,QAAQ,CAAC,CAAC;MACnC6gD,UAAU,EAAEoX,KAAK,CAACpX,UAAU,CAAC7gD,QAAQ,CAAC,CAAC;MACvCu4D,aAAa,EAAE,MAAM9V,kBAAkB,CAAC,IAAI,CAAC9mC,eAAe,CAAC2vB,WAAW,CAAC,CAAC,EAAE2sB,KAAK,CAAC5d,QAAQ,EAAE4d,KAAK,CAACpX,UAAU,CAAC;MAC7GtN,KAAK,EAAE,MAAM4C,6BAA6B,CAAC8hB,KAAK,CAACf,aAAa,EAAE,IAAI,CAACv7C,eAAe,CAAC2vB,WAAW,CAAC,CAAC,EAAE2sB,KAAK,CAACnkD,OAAO,EAAE,IAAI,CAACgjB,OAAO,CAAC;MAChIgnC,gBAAgB,EAAE7lE,SAAS,CAAC6H,IAAI,CAACm4D,KAAK,CAAC4J,mBAAmB,CAAC,CAACtvD,QAAQ,CAAC,CAAC;MACtEi+B,MAAM,EAAEA;IACV,CAAC;EACH;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMwxB,iBAAiBA,CAAC/J,KAAK,EAAE;IAC7B,MAAMhrD,GAAG,GAAGhV,SAAS,CAAC6H,IAAI,CAAC0P,IAAI,CAACC,KAAK,CAACzC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;IACzD,IAAIA,GAAG,CAACiS,EAAE,CAAC+4C,KAAK,CAAC6F,gBAAgB,CAAC,EAAE;MAClC,OAAO;QACL/B,KAAK,EAAE,KAAK;QACZj5D,KAAK,mBAAAlF,MAAA,CAAmBq6D,KAAK,CAAC30D,EAAE;MAClC,CAAC;IACH;IACA,MAAMY,OAAO,GAAG,MAAM,IAAI,CAACyX,eAAe,CAAC28B,UAAU,CAAC,CAAC;IACvD,MAAM+B,QAAQ,GAAGO,aAAa,CAACqd,KAAK,CAACE,uBAAuB,CAAC,GAAGnqD,aAAa,CAAC9J,OAAO,CAAC,CAACgK,OAAO,CAACpB,OAAO,GAAGmrD,KAAK,CAACE,uBAAuB;IACtI,MAAMj2D,QAAQ,GAAG,IAAI,CAACyZ,eAAe,CAAC2vB,WAAW,CAAC,CAAC;IACnD,MAAM0P,KAAK,GAAG,IAAIsD,eAAe,CAACp8C,QAAQ,EAAEm4C,QAAQ,EAAErhD,QAAQ,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC89B,OAAO,CAAC;IACjF,MAAMwrC,cAAc,GAAG,MAAMtnB,KAAK,CAAC1tB,IAAI,CAAC,WAAW,EAAE,CAAC2qC,KAAK,CAACoK,cAAc,CAAC,CAAC;IAC5E,IAAIC,cAAc,CAAC/yB,EAAE,CAAC0oB,KAAK,CAACpX,UAAU,CAAC,EAAE;MACvC,OAAO;QACLkb,KAAK,EAAE,KAAK;QACZj5D,KAAK,aAAAlF,MAAA,CAAaq6D,KAAK,CAACoK,cAAc,4CAAAzkE,MAAA,CAAyCy8C,QAAQ;MACzF,CAAC;IACH;IACA,MAAMkoB,gBAAgB,GAAG,MAAMvnB,KAAK,CAAC1tB,IAAI,CAAC,WAAW,EAAE,CAAC2qC,KAAK,CAACoK,cAAc,EAAE,IAAI,CAACl5B,UAAU,CAAC,CAAC,CAAC,CAAC;IACjG,IAAIo5B,gBAAgB,CAAChzB,EAAE,CAAC0oB,KAAK,CAACpX,UAAU,CAAC,EAAE;MACzC,OAAO;QACLkb,KAAK,EAAE,KAAK;QACZj5D,KAAK,aAAAlF,MAAA,CAAaq6D,KAAK,CAACoK,cAAc,8CAAAzkE,MAAA,CAA2Cy8C,QAAQ;MAC3F,CAAC;IACH;IACA,OAAO;MACL0hB,KAAK,EAAE,IAAI;MACXj5D,KAAK,EAAE;IACT,CAAC;EACH;EACA,MAAMi6D,WAAWA,CAACyF,MAAM,EAAEj5D,MAAM,EAAE;IAChC,IAAI24D,SAAS,GAAG,CAAC,GAAGM,MAAM,CAAC;IAC3B,IAAIj5D,MAAM,EAAE;MACV,IAAIA,MAAM,CAAC8uD,OAAO,EAAE;QAClB,MAAMoK,eAAe,GAAG,MAAMx/B,cAAc,CAAC15B,MAAM,CAAC8uD,OAAO,CAAC;QAC5D6J,SAAS,GAAGA,SAAS,CAAC34D,MAAM,CAAC8uD,OAAO,IAAIA,OAAO,CAACA,OAAO,CAACr4D,QAAQ,CAAC,CAAC,CAACiK,WAAW,CAAC,CAAC,MAAKw4D,eAAe,aAAfA,eAAe,uBAAfA,eAAe,CAAEziE,QAAQ,CAAC,CAAC,CAACiK,WAAW,CAAC,CAAC,EAAC;MACjI;MACA,IAAIV,MAAM,CAAC60D,aAAa,EAAE;QACxB,MAAMC,aAAa,GAAG,MAAMp7B,cAAc,CAAC15B,MAAM,CAAC60D,aAAa,CAAC;QAChE8D,SAAS,GAAGA,SAAS,CAAC34D,MAAM,CAAC60D,aAAa,IAAIA,aAAa,CAAClH,aAAa,CAACl3D,QAAQ,CAAC,CAAC,CAACiK,WAAW,CAAC,CAAC,MAAKo0D,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEr+D,QAAQ,CAAC,CAAC,CAACiK,WAAW,CAAC,CAAC,EAAC;MACjJ;MACA,IAAIV,MAAM,CAACuK,OAAO,KAAK3S,SAAS,EAAE;QAChC+gE,SAAS,GAAGA,SAAS,CAAC34D,MAAM,CAAC60D,aAAa;UAAA,IAAAsE,gBAAA;UAAA,OAAItE,aAAa,CAACtqD,OAAO,CAAC9T,QAAQ,CAAC,CAAC,MAAKuJ,MAAM,aAANA,MAAM,gBAAAm5D,gBAAA,GAANn5D,MAAM,CAAEuK,OAAO,cAAA4uD,gBAAA,uBAAfA,gBAAA,CAAiB1iE,QAAQ,CAAC,CAAC;QAAA,EAAC;MACjH;IACF;IACA,OAAOuJ,MAAM,aAANA,MAAM,eAANA,MAAM,CAAEurC,KAAK,IAAIvrC,MAAM,CAACurC,KAAK,GAAGotB,SAAS,CAACjkE,MAAM,GAAGikE,SAAS,CAACn3D,KAAK,CAAC,CAAC,EAAExB,MAAM,CAACurC,KAAK,CAAC,GAAGotB,SAAS;EACxG;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMS,mBAAmB,CAAC;EAExB7hE,WAAWA,CAAC6a,eAAe,EAAE;IAAA22B,eAAA,sBADfztB,oBAAoB,CAACzgB,IAAI;IAwBvC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAbEkuC,eAAA,cAcM,eAAetY,wBAAwB,CAAC,MAAM4oC,eAAe,IAAI;MACrE,MAAMx7C,MAAM,GAAG,MAAMjS,uBAAuB,CAACxE,UAAU,CAACiyD,eAAe,CAAC;MACxE,OAAOv1B,WAAW,CAACC,mBAAmB,CAAC;QACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;QACrCvY,MAAM,EAAE,oBAAoB;QAC5B0Y,IAAI,EAAE,CAACsL,MAAM,CAAC/R,sBAAsB,EAAE+R,MAAM,CAAChS,yBAAyB;MACxE,CAAC,CAAC;IACJ,CAAC,CAAC;IA3CA,IAAI,CAACuG,eAAe,GAAGA,eAAe;EACxC;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAM9P,GAAGA,CAAA,EAAG;IACV,MAAM,CAACg3D,oBAAoB,EAAEC,cAAc,CAAC,GAAG,MAAM,IAAI,CAACnnD,eAAe,CAAC2R,IAAI,CAAC,oBAAoB,EAAE,EAAE,CAAC;IACxG,OAAOnY,uBAAuB,CAACxE,UAAU,CAAC;MACxC0E,sBAAsB,EAAEwtD,oBAAoB;MAC5CztD,yBAAyB,EAAE0tD;IAC7B,CAAC,CAAC;EACJ;AAwBF;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASC,oBAAoBA,CAACnoD,GAAG,EAAE7I,QAAQ,EAAE;EAC3C,MAAM20B,SAAS,GAAGhwB,SAAS,CAACrN,KAAK,CAACuR,GAAG,IAAI,EAAE,CAAC;EAC5C,MAAMw1B,MAAM,GAAG1J,SAAS,CAACn9B,MAAM,CAAC4d,EAAE,IAAIA,EAAE,CAAChT,IAAI,KAAK,OAAO,CAAC;EAC1D,MAAMiT,MAAM,GAAG,EAAE;EACjB,KAAK,MAAM1d,CAAC,IAAI0mC,MAAM,EAAE;IACtB,MAAM5oB,GAAG,GAAGhB,0BAA0B,CAAC9c,CAAC,CAACtF,IAAI,EAAE2N,QAAQ,EAAE,QAAQ,CAAC;IAClEqV,MAAM,CAACxjB,IAAI,CAAC;MACV4S,MAAM,EAAE9M,CAAC,CAAC8M,MAAM,IAAI,EAAE;MACtBC,OAAO,EAAE/M,CAAC,CAAC+M,OAAO,IAAI,EAAE;MACxBrS,IAAI,EAAEsF,CAAC,CAACtF,IAAI,IAAI,SAAS;MACzBwjB,OAAO,EAAEJ;IACX,CAAC,CAAC;EACJ;EACA,OAAOJ,MAAM;AACf;;AAEA;AACA;AACA;AACA,GAHA,CAGI;AACJ,MAAM47C,yBAAyB,CAAC;EAC9BliE,WAAWA,CAAC6a,eAAe,EAAEmb,OAAO,EAAE;IACpC,IAAI,CAACnb,eAAe,GAAGA,eAAe;IACtC,IAAI,CAACmb,OAAO,GAAGA,OAAO;EACxB;;EAEA;AACF;AACA;AACA;EACE,MAAMjrB,GAAGA,CAAA,EAAG;IACV,IAAI,IAAI,CAACo3D,eAAe,EAAE;MACxB,OAAO,IAAI,CAACA,eAAe;IAC7B;IACA,IAAI,CAACA,eAAe,GAAG,MAAMjqC,gCAAgC,CAAC,IAAI,CAACrd,eAAe,CAAC7O,OAAO,EAAE,IAAI,CAAC6O,eAAe,CAAC2vB,WAAW,CAAC,CAAC,EAAE,IAAI,CAACxU,OAAO,EAAE,IAAI,CAACnb,eAAe,CAAC9S,OAAO,CAAC;IAC3K,OAAO,IAAI,CAACo6D,eAAe;EAC7B;;EAEA;AACF;AACA;EACE,MAAMC,gBAAgBA,CAAA,EAAG;IAAA,IAAAC,mBAAA;IACvB,IAAIjnC,iBAAiB;IACrB,IAAI;MACFA,iBAAiB,GAAG,MAAM,IAAI,CAACrwB,GAAG,CAAC,CAAC;IACtC,CAAC,CAAC,OAAOnC,CAAC,EAAE;MACV;IAAA;IAEF;IACA,OAAOud,uBAAuB,CAACvQ,SAAS,CAACrN,KAAK,CAAC,IAAI,CAACsS,eAAe,CAACf,GAAG,CAAC,GAAAuoD,mBAAA,GAAEjnC,iBAAiB,cAAAinC,mBAAA,uBAAjBA,mBAAA,CAAmBpxD,QAAQ,CAAC;EACxG;;EAEA;AACF;AACA;EACE,MAAMqxD,aAAaA,CAAA,EAAG;IAAA,IAAAC,mBAAA;IACpB,IAAInnC,iBAAiB;IACrB,IAAI;MACFA,iBAAiB,GAAG,MAAM,IAAI,CAACrwB,GAAG,CAAC,CAAC;IACtC,CAAC,CAAC,OAAOnC,CAAC,EAAE;MACV;IAAA;IAEF;IACA,OAAOq5D,oBAAoB,CAACrsD,SAAS,CAACrN,KAAK,CAAC,IAAI,CAACsS,eAAe,CAACf,GAAG,CAAC,GAAAyoD,mBAAA,GAAEnnC,iBAAiB,cAAAmnC,mBAAA,uBAAjBA,mBAAA,CAAmBtxD,QAAQ,CAAC;EACrG;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAMuxD,aAAa,CAAC;EAElBxiE,WAAWA,CAAC6a,eAAe,EAAE;IAAA22B,eAAA,sBADfptB,aAAa,CAAC9gB,IAAI;IAmBhC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAZEkuC,eAAA,cAaM,eAAetY,wBAAwB,CAAC,MAAMltB,OAAO,IAAI;MAC7D,MAAM8nC,eAAe,GAAG,MAAM3R,cAAc,CAACn2B,OAAO,CAAC;MACrD,OAAOugC,WAAW,CAACC,mBAAmB,CAAC;QACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;QACrCvY,MAAM,EAAE,UAAU;QAClB0Y,IAAI,EAAE,CAAC84B,eAAe;MACxB,CAAC,CAAC;IACJ,CAAC,CAAC;IArCA,IAAI,CAACj5B,eAAe,GAAGA,eAAe;EACxC;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAM9P,GAAGA,CAAA,EAAG;IACV,OAAO,IAAI,CAAC8P,eAAe,CAAC2R,IAAI,CAAC,OAAO,EAAE,EAAE,CAAC;EAC/C;AAuBF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMi2C,cAAc,CAAC;EAEnBziE,WAAWA,CAAC6a,eAAe,EAAE5J,QAAQ,EAAE+kB,OAAO,EAAE;IAAAwb,eAAA,sBADlCrtB,cAAc,CAAC7gB,IAAI;IAwBjC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IATEkuC,eAAA,cAUM,eAAetY,wBAAwB,CAAC,MAAMwpC,MAAM,IAAI;MAC5D,IAAIz5C,qBAAqB,CAAC,IAAI,CAACpO,eAAe,EAAE,QAAQ,CAAC,EAAE;QACzD,OAAO0xB,WAAW,CAACC,mBAAmB,CAAC;UACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;UACrCvY,MAAM,EAAE,WAAW;UACnB0Y,IAAI,EAAE,CAAC0nD,MAAM;QACf,CAAC,CAAC;MACJ;MACA,OAAO,MAAM,IAAI,CAACzxD,QAAQ,CAACnH,MAAM,CAACmvB,OAAO,CAAC;QACxCplB,OAAO,EAAE6uD;MACX,CAAC,CAAC;IACJ,CAAC,CAAC;IA3CA,IAAI,CAAC7nD,eAAe,GAAGA,eAAe;IACtC,IAAI,CAAC5J,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAAC+kB,OAAO,GAAGA,OAAO;EACxB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMjrB,GAAGA,CAAA,EAAG;IACV,IAAIke,qBAAqB,CAAC,IAAI,CAACpO,eAAe,EAAE,QAAQ,CAAC,EAAE;MACzD,OAAO,MAAM,IAAI,CAACA,eAAe,CAAC2R,IAAI,CAAC,QAAQ,EAAE,EAAE,CAAC;IACtD;IACA,OAAO10B,2BAA2B,CAAC,CAAC,MAAM,IAAI,CAACmZ,QAAQ,CAAClG,GAAG,CAAC,CAAC,EAAE8I,OAAO,IAAI,EAAE,EAAE,IAAI,CAACmiB,OAAO,CAAC2sC,cAAc,CAAC,CAAC,CAAC;EAC9G;AAwBF;;AAEA;AACA;AACA;AACA,eAAeC,wBAAwBA,CAACC,oBAAoB,EAAE7sC,OAAO,EAAE;EACrE,MAAMuM,IAAI,GAAG,MAAME,sBAAsB,CAACogC,oBAAoB,EAAE7sC,OAAO,CAAC;EACxE,OAAO2P,+BAA+B,CAACpD,IAAI,CAACzoB,GAAG,CAAC;AAClD;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAesoD,gBAAgBA,CAACS,oBAAoB,EAAE7sC,OAAO,EAAE;EAC7D,MAAM/kB,QAAQ,GAAG,MAAMwxB,sBAAsB,CAACogC,oBAAoB,EAAE7sC,OAAO,CAAC;EAC5E,OAAO7P,uBAAuB,CAAClV,QAAQ,CAAC6I,GAAG,EAAE7I,QAAQ,CAACA,QAAQ,CAAC;AACjE;AAEA,SAAS6xD,oBAAoBA,CAACC,QAAQ,EAAE;EACtC,OAAO,GAAG,GAAGA,QAAQ,CAAChiE,GAAG,CAAC0N,CAAC,IAAI;IAC7B,OAAOA,CAAC,CAAC4E,IAAI,KAAK,OAAO,GAAGyvD,oBAAoB,CAACr0D,CAAC,CAAC+G,UAAU,CAAC,GAAG/G,CAAC,CAAC4E,IAAI,KAAK,SAAS,GAAGyvD,oBAAoB,CAACr0D,CAAC,CAAC+G,UAAU,CAAC,OAAO,GAAG/G,CAAC,CAAC4E,IAAI;EAC5I,CAAC,CAAC,CAACxV,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG;AACpB;AACA,SAASmlE,uBAAuBA,CAACC,aAAa,EAAEC,SAAS,EAAE;EACzD,MAAMC,eAAe,GAAG,IAAI9rE,KAAK,CAACkF,SAAS,CAAC2mE,SAAS,CAAC;EACtD,MAAME,eAAe,GAAG,EAAE;EAC1B;EACA,KAAK,MAAMC,UAAU,IAAIr9C,MAAM,CAAC+B,MAAM,CAACo7C,eAAe,CAAC/8C,SAAS,CAAC,EAAE;IACjE,MAAMrL,EAAE,GAAGooD,eAAe,CAACn0B,WAAW,CAACm0B,eAAe,CAACn7C,UAAU,CAACq7C,UAAU,CAAC,CAAC;IAC9E,IAAItoD,EAAE,CAACzX,IAAI,CAACoH,QAAQ,CAAC,GAAG,CAAC,EAAE;MACzB;IACF;IACA04D,eAAe,CAACtgE,IAAI,CAAC;MACnBwgE,gBAAgB,EAAEH,eAAe,CAACn7C,UAAU,CAACjN,EAAE,CAAC;MAChDg0B,iBAAiB,EAAEh0B,EAAE,CAACzX,IAAI,GAAGw/D,oBAAoB,CAAC/nD,EAAE,CAACrF,MAAM,CAAC;MAC5DutD,aAAa,EAAEA;IACjB,CAAC,CAAC;EACJ;EACA,OAAOG,eAAe;AACxB;AACA,SAASG,0BAA0BA,CAACC,YAAY,EAAE;EAChD,MAAMC,kBAAkB,GAAG,IAAIpsE,KAAK,CAACkF,SAAS,CAACinE,YAAY,CAAC;EAC5D,MAAME,kBAAkB,GAAG,EAAE;EAC7B;;EAEA,KAAK,MAAML,UAAU,IAAIr9C,MAAM,CAAC+B,MAAM,CAAC07C,kBAAkB,CAACr9C,SAAS,CAAC,EAAE;IACpE,MAAMrL,EAAE,GAAG0oD,kBAAkB,CAACz0B,WAAW,CAACy0B,kBAAkB,CAACz7C,UAAU,CAACq7C,UAAU,CAAC,CAAC;IACpF,IAAItoD,EAAE,CAACzX,IAAI,CAACmiB,UAAU,CAAC,GAAG,CAAC,EAAE;MAC3B;IACF;IACAi+C,kBAAkB,CAAC5gE,IAAI,CAAC;MACtBwgE,gBAAgB,EAAEG,kBAAkB,CAACz7C,UAAU,CAACjN,EAAE,CAAC;MACnDg0B,iBAAiB,EAAEh0B,EAAE,CAACzX,IAAI,GAAGw/D,oBAAoB,CAAC/nD,EAAE,CAACrF,MAAM;IAC7D,CAAC,CAAC;EACJ;EACA,OAAOguD,kBAAkB;AAC3B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeC,iBAAiBA,CAAC7tD,WAAW,EAAEkgB,OAAO,EAAE50B,QAAQ,EAAE8kC,cAAc,EAAEriC,QAAQ,EAAEE,SAAS,EAAE;EACpG8hC,MAAM,CAACC,iBAAiB,GAAG,CAAC,CAAC;EAC7B,MAAM5H,qBAAqB,GAAGgI,cAAc,GAAGA,cAAc,GAAG,MAAM7H,wBAAwB,CAACj9B,QAAQ,CAAC;EACxG,MAAMwiE,YAAY,GAAG,CAAC,CAAC;EACvB,MAAMC,mBAAmB,GAAG,EAAE;EAC9B,MAAM;IACJ9gC,gBAAgB;IAChBC;EACF,CAAC,GAAG,MAAMF,2BAA2B,CAAChtB,WAAW,EAAEkgB,OAAO,CAAC;EAC3D,MAAMne,iBAAiB,GAAGmrB,gBAAgB,aAAhBA,gBAAgB,uBAAhBA,gBAAgB,CAAEnrB,iBAAiB;EAC7D,IAAI,CAAAmrB,gBAAgB,aAAhBA,gBAAgB,uBAAhBA,gBAAgB,CAAEprB,UAAU,MAAK,QAAQ,IAAIC,iBAAiB,EAAE;IAClEpgB,SAAS,CAACoM,QAAQ,IAAIE,SAAS,EAAE,gCAAgC,CAAC;IAClE,MAAM+/D,mBAAmB,GAAG,MAAMjhE,OAAO,CAAC+M,GAAG,CAACiI,iBAAiB,CAAC9W,GAAG,CAAC6H,CAAC,IAAI;MACvE,OAAOq7B,iCAAiC,CAACr7B,CAAC,CAACoP,gBAAgB,EAAEpP,CAAC,CAACkP,aAAa,EAAElP,CAAC,CAACmP,gBAAgB,EAAEie,OAAO,EAAEnyB,QAAQ,EAAEE,SAAS,CAAC;IACjI,CAAC,CAAC,CAAC;IACH,MAAMggE,cAAc,GAAG,CAAC,MAAMlhE,OAAO,CAAC+M,GAAG,CAACk0D,mBAAmB,CAAC/iE,GAAG,CAAC,MAAMjK,CAAC,IAAI;MAC3E,OAAOgsC,2BAA2B,CAAChsC,CAAC,CAACgf,WAAW,EAAEkgB,OAAO,CAAC;IAC5D,CAAC,CAAC,CAAC,EAAEj1B,GAAG,CAACijE,eAAe,IAAIA,eAAe,CAACjhC,gBAAgB,CAAC;;IAE7D;IACA,MAAMkhC,oBAAoB,GAAG,MAAMphE,OAAO,CAAC+M,GAAG,CAACm0D,cAAc,CAAChjE,GAAG,CAAC,MAAMkQ,QAAQ,IAAI;MAClF,MAAM8I,IAAI,GAAG,MAAMksB,qBAAqB,CAAC,QAAQ,EAAE7kC,QAAQ,EAAE40B,OAAO,EAAEkI,qBAAqB,EAAE;QAC3FjtB,QAAQ,EAAEA;MACZ,CAAC,EAAEpN,QAAQ,EAAEE,SAAS,CAAC;MACvB,OAAOgW,IAAI;IACb,CAAC,CAAC,CAAC;;IAEH;IACA,MAAMmqD,QAAQ,GAAG,EAAE;IACnBH,cAAc,CAACniE,OAAO,CAAC,CAACqP,QAAQ,EAAEnP,KAAK,KAAK;MAC1C,MAAMsT,KAAK,GAAG4tD,uBAAuB,CAACiB,oBAAoB,CAACniE,KAAK,CAAC,CAAC27B,WAAW,CAAC4I,gBAAgB,EAAEp1B,QAAQ,CAAC6I,GAAG,CAAC;MAC7GoqD,QAAQ,CAACphE,IAAI,CAAC,GAAGsS,KAAK,CAAC;IACzB,CAAC,CAAC;;IAEF;IACA,MAAM+uD,oBAAoB,GAAG,MAAMl+B,qBAAqB,CAAC,QAAQ,EAAE7kC,QAAQ,EAAE40B,OAAO,EAAEkI,qBAAqB,EAAE;MAC3GjgB,YAAY,EAAE,WAAW;MACzB/F,iBAAiB,EAAE;QACjBksD,aAAa,EAAE;UACb/kE,KAAK,EAAE6kE;QACT;MACF;IACF,CAAC,EAAErgE,QAAQ,EAAEE,SAAS,CAAC;;IAEvB;IACA6/D,YAAY,CAAC,YAAY,CAAC,GAAG;MAC3BvkE,KAAK,EAAE8kE,oBAAoB,CAAC1mC,WAAW,CAAC4I;IAC1C,CAAC;IACDw9B,mBAAmB,CAAC/gE,IAAI,CAAC,GAAGmhE,oBAAoB,EAAEE,oBAAoB,CAAC;EACzE,CAAC,MAAM,IAAI,CAAAnhC,gBAAgB,aAAhBA,gBAAgB,uBAAhBA,gBAAgB,CAAEprB,UAAU,MAAK,SAAS,IAAIC,iBAAiB,EAAE;IAC1EpgB,SAAS,CAACoM,QAAQ,IAAIE,SAAS,EAAE,gCAAgC,CAAC;IAClE,MAAM+/D,mBAAmB,GAAG,MAAMjhE,OAAO,CAAC+M,GAAG,CAACiI,iBAAiB,CAAC9W,GAAG,CAAC6H,CAAC,IAAI;MACvE,OAAOq7B,iCAAiC,CAACr7B,CAAC,CAACoP,gBAAgB,EAAEpP,CAAC,CAACkP,aAAa,EAAElP,CAAC,CAACmP,gBAAgB,EAAEie,OAAO,EAAEnyB,QAAQ,EAAEE,SAAS,CAAC;IACjI,CAAC,CAAC,CAAC;IACH,MAAMsgE,iBAAiB,GAAG,CAAC,MAAMxhE,OAAO,CAAC+M,GAAG,CAACk0D,mBAAmB,CAAC/iE,GAAG,CAAC,MAAMjK,CAAC,IAAI;MAC9E,OAAOgsC,2BAA2B,CAAChsC,CAAC,CAACgf,WAAW,EAAEkgB,OAAO,CAAC;IAC5D,CAAC,CAAC,CAAC,EAAEj1B,GAAG,CAACijE,eAAe,IAAIA,eAAe,CAACjhC,gBAAgB,CAAC;;IAE7D;IACA,MAAMuhC,uBAAuB,GAAG,MAAMzhE,OAAO,CAAC+M,GAAG,CAACy0D,iBAAiB,CAACtjE,GAAG,CAAC,MAAMkQ,QAAQ,IAAI;MACxF,MAAM8I,IAAI,GAAG,MAAMksB,qBAAqB,CAAC,WAAW,EAAE7kC,QAAQ,EAAE40B,OAAO,EAAEkI,qBAAqB,EAAE;QAC9FjtB,QAAQ,EAAEA;MACZ,CAAC,EAAEpN,QAAQ,EAAEE,SAAS,CAAC;MACvB,OAAOgW,IAAI;IACb,CAAC,CAAC,CAAC;;IAEH;IACA,MAAMwqD,WAAW,GAAG,EAAE;IACtBF,iBAAiB,CAACziE,OAAO,CAAC,CAACqP,QAAQ,EAAEnP,KAAK,KAAK;MAC7C,MAAM4hE,kBAAkB,GAAGH,0BAA0B,CAACtyD,QAAQ,CAAC6I,GAAG,CAAC;MACnEyqD,WAAW,CAACzhE,IAAI,CAAC;QACfmO,QAAQ,EAAE;UACR3N,IAAI,EAAE2N,QAAQ,CAAC3N,IAAI;UACnBkhE,WAAW,EAAE,EAAE;UACfC,cAAc,EAAEH,uBAAuB,CAACxiE,KAAK,CAAC,CAAC27B,WAAW,CAAC4I;QAC7D,CAAC;QACDjgB,SAAS,EAAEs9C;MACb,CAAC,CAAC;IACJ,CAAC,CAAC;;IAEF;IACAE,YAAY,CAAC,aAAa,CAAC,GAAG;MAC5BvkE,KAAK,EAAEklE;IACT,CAAC;IACDV,mBAAmB,CAAC/gE,IAAI,CAAC,GAAGwhE,uBAAuB,CAAC;EACtD;EACA,MAAMI,wBAAwB,GAAG,MAAMz+B,qBAAqB,CAAC,gBAAgB,EAAE7kC,QAAQ,EAAE40B,OAAO,EAAEkI,qBAAqB,EAAE;IACvHjtB,QAAQ,EAAE8xB,gBAAgB;IAC1B7qB,iBAAiB,EAAE0rD;EACrB,CAAC,EAAE//D,QAAQ,EAAEE,SAAS,CAAC;;EAEvB;EACA,MAAM4gE,WAAW,GAAG,MAAM1+B,qBAAqB,CAAC,OAAO,EAAE7kC,QAAQ,EAAE40B,OAAO,EAAEkI,qBAAqB,EAAE;IACjGjgB,YAAY,EAAE;EAChB,CAAC,EAAEpa,QAAQ,EAAEE,SAAS,CAAC;EACvB8/D,mBAAmB,CAAC/gE,IAAI,CAAC6hE,WAAW,CAAC;EACrCd,mBAAmB,CAAC/gE,IAAI,CAAC,GAAGkjB,MAAM,CAAC+B,MAAM,CAAC8d,MAAM,CAACC,iBAAiB,CAAC,CAAC;EACpE+9B,mBAAmB,CAAC/gE,IAAI,CAAC4hE,wBAAwB,CAAC;EAClD,OAAOb,mBAAmB;AAC5B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAee,2BAA2BA,CAACp5D,MAAM,EAAEiyB,WAAW,EAAE11B,OAAO,EAAE;EACvE,IAAIsS,QAAQ,GAAGja,SAAS,CAACjD,MAAM,GAAG,CAAC,IAAIiD,SAAS,CAAC,CAAC,CAAC,KAAKC,SAAS,GAAGD,SAAS,CAAC,CAAC,CAAC,GAAG,OAAO;EAC1F;EACA3I,SAAS,CAAC+T,MAAM,CAACpK,QAAQ,EAAE,mBAAmB,CAAC;EAC/C,MAAMglC,gBAAgB,GAAG,MAAMjJ,kBAAkB,CAACM,WAAW,CAAC4I,gBAAgB,EAAE76B,MAAM,CAACpK,QAAQ,CAAC;EAChG,IAAI,CAACglC,gBAAgB,EAAE;IAAA,IAAAy+B,iBAAA,EAAAC,kBAAA;IACrB3vC,OAAO,CAAC4vC,KAAK,+CAAAjoE,MAAA,CAA+C2gC,WAAW,CAAC4I,gBAAgB,CAAE,CAAC;IAC3F,MAAMtN,EAAE,GAAG;MACT9mB,EAAE,EAAEwrB,WAAW,CAACxrB,EAAE;MAClBrT,IAAI,EAAE6+B,WAAW,CAAC7+B;IACpB,CAAC;IACD,IAAI;MACF,MAAM4M,MAAM,CAACoiC,WAAW,CAAC7U,EAAE,CAAC;IAC9B,CAAC,CAAC,OAAOnwB,CAAC,EAAE;MACVusB,OAAO,CAAC4vC,KAAK,CAAC,iDAAiD,EAAEn8D,CAAC,CAAC;MACnEmwB,EAAE,CAAC1e,QAAQ,GAAGljB,SAAS,CAAC6H,IAAI,CAACqb,QAAQ,CAAC;IACxC;IACAtS,OAAO,aAAPA,OAAO,gBAAA88D,iBAAA,GAAP98D,OAAO,CAAEi9D,QAAQ,cAAAH,iBAAA,eAAjBA,iBAAA,CAAA94C,IAAA,CAAAhkB,OAAO,EAAa,WAAW,EAAE,QAAQ,CAAC;IAC1C,MAAM,CAAC,MAAMyD,MAAM,CAAC6xB,eAAe,CAACtE,EAAE,CAAC,EAAEiV,IAAI,CAAC,CAAC;IAC/CjmC,OAAO,aAAPA,OAAO,gBAAA+8D,kBAAA,GAAP/8D,OAAO,CAAEi9D,QAAQ,cAAAF,kBAAA,eAAjBA,kBAAA,CAAA/4C,IAAA,CAAAhkB,OAAO,EAAa,UAAU,EAAE,QAAQ,CAAC;EAC3C;AACF;AAEA,SAASk9D,oBAAoBA,CAACC,QAAQ,EAAE;EACtC,IAAI7qD,QAAQ,GAAGhjB,KAAK,CAACqmC,QAAQ,CAACwnC,QAAQ,CAAC,CAACnkE,GAAG,CAACs+C,CAAC,IAAIA,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAACr3C,MAAM,CAAC,CAACm9D,GAAG,EAAE9lB,CAAC,KAAK8lB,GAAG,GAAG9lB,CAAC,CAAC,GAAG,GAAG,GAAG6lB,QAAQ,CAAC/nE,MAAM,GAAG,CAAC,GAAG,CAAC,GAAGuR,IAAI,CAAC4rC,IAAI,CAAC4qB,QAAQ,CAAC/nE,MAAM,GAAG,EAAE,CAAC,GAAG,KAAK,GAAG,KAAK;EAChLkd,QAAQ,GAAG3L,IAAI,CAACC,KAAK,CAAC0L,QAAQ,GAAG,EAAE,GAAG,EAAE,CAAC;EACzC,OAAOA,QAAQ;AACjB;AAEA,SAAS+qD,wBAAwBA,CAACC,YAAY,EAAE;EAC9C,IAAIC,aAAa,GAAGllE,SAAS,CAACjD,MAAM,GAAG,CAAC,IAAIiD,SAAS,CAAC,CAAC,CAAC,KAAKC,SAAS,GAAGD,SAAS,CAAC,CAAC,CAAC,GAAG48B,sBAAsB;EAC9GqoC,YAAY,GAAGA,YAAY,CAAC58D,MAAM,CAACswB,EAAE,IAAI;IACvC,OAAOA,EAAE,CAACn6B,IAAI,CAACzB,MAAM,GAAG,CAAC;EAC3B,CAAC,CAAC;EACF,IAAIkoE,YAAY,CAACloE,MAAM,KAAK,CAAC,EAAE;IAC7B,OAAO,EAAE;EACX;EACA,MAAMooE,kBAAkB,GAAG,EAAE;EAC7B,IAAIJ,GAAG,GAAG,CAAC;EACX,IAAItkE,KAAK,GAAG,EAAE;EACdwkE,YAAY,CAACzjE,OAAO,CAACm3B,EAAE,IAAI;IACzB,MAAMyV,GAAG,GAAGy2B,oBAAoB,CAAClsC,EAAE,CAACn6B,IAAI,CAAC;IACzC,IAAIumE,GAAG,GAAG32B,GAAG,GAAG82B,aAAa,EAAE;MAC7B,IAAIzkE,KAAK,CAAC1D,MAAM,KAAK,CAAC,EAAE;QACtBooE,kBAAkB,CAACziE,IAAI,CAAC,CAACi2B,EAAE,CAAC,CAAC;MAC/B,CAAC,MAAM;QACLwsC,kBAAkB,CAACziE,IAAI,CAACjC,KAAK,CAAC;QAC9BskE,GAAG,GAAG32B,GAAG;QACT3tC,KAAK,GAAG,CAACk4B,EAAE,CAAC;MACd;IACF,CAAC,MAAM;MACLosC,GAAG,IAAI32B,GAAG;MACV3tC,KAAK,CAACiC,IAAI,CAACi2B,EAAE,CAAC;IAChB;EACF,CAAC,CAAC;EACF,IAAIl4B,KAAK,CAAC1D,MAAM,GAAG,CAAC,EAAE;IACpBooE,kBAAkB,CAACziE,IAAI,CAACjC,KAAK,CAAC;EAChC;EACA,OAAO0kE,kBAAkB;AAC3B;AAEA,eAAeC,2BAA2BA,CAACh6D,MAAM,EAAE65D,YAAY,EAAEt9D,OAAO,EAAE;EAAA,IAAA09D,kBAAA,EAAAC,kBAAA;EACxE,MAAMH,kBAAkB,GAAGH,wBAAwB,CAACC,YAAY,CAAC;EACjE,IAAIE,kBAAkB,CAACpoE,MAAM,KAAK,CAAC,EAAE;IACnC;EACF;EACA4K,OAAO,aAAPA,OAAO,gBAAA09D,kBAAA,GAAP19D,OAAO,CAAEi9D,QAAQ,cAAAS,kBAAA,eAAjBA,kBAAA,CAAA15C,IAAA,CAAAhkB,OAAO,EAAa,WAAW,EAAE,OAAO,CAAC;EACzC,MAAM49D,UAAU,GAAG,MAAM9iE,OAAO,CAAC+M,GAAG,CAAC21D,kBAAkB,CAACxkE,GAAG,CAAC6kE,OAAO,IAAI;IACrE;IACA,MAAMC,QAAQ,GAAG,IAAIruE,eAAe,CAAC0lC,YAAY,EAAED,iBAAiB,CAAC,CAACqN,OAAO,CAAC9+B,MAAM,CAAC,CAAC0J,MAAM,CAAC0wD,OAAO,CAAC;IACrG,OAAOC,QAAQ;EACjB,CAAC,CAAC,CAAC;EACH,MAAMhjE,OAAO,CAAC+M,GAAG,CAAC+1D,UAAU,CAAC5kE,GAAG,CAACg4B,EAAE,IAAI;IACrC,OAAOA,EAAE,CAAC+sC,QAAQ,CAAC,CAAC;EACtB,CAAC,CAAC,CAAC;EACH/9D,OAAO,aAAPA,OAAO,gBAAA29D,kBAAA,GAAP39D,OAAO,CAAEi9D,QAAQ,cAAAU,kBAAA,eAAjBA,kBAAA,CAAA35C,IAAA,CAAAhkB,OAAO,EAAa,UAAU,EAAE,OAAO,CAAC;AAC1C;AAEA,eAAeg+D,0BAA0BA,CAACzjC,kBAAkB,EAAEtM,OAAO,EAAE;EACrE,MAAM;IACJgN;EACF,CAAC,GAAG,MAAMF,2BAA2B,CAACR,kBAAkB,EAAEtM,OAAO,CAAC;EAClE,MAAM3d,YAAY,GAAG,CAAA2qB,gBAAgB,aAAhBA,gBAAgB,uBAAhBA,gBAAgB,CAAE3qB,YAAY,KAAI,EAAE;EACzD,OAAOA,YAAY;AACrB;;AAEA;AACA;AACA;AACA,eAAe2tD,YAAYA,CAACxyB,SAAS,EAAEpyC,QAAQ,EAAE40B,OAAO,EAAE;EACxD,OAAO,CAAC,MAAMnzB,OAAO,CAAC+M,GAAG,CAAC4jC,SAAS,CAACzyC,GAAG,CAACiL,OAAO,IAAIksB,gCAAgC,CAAClsB,OAAO,EAAE5K,QAAQ,EAAE40B,OAAO,CAAC,CAACsC,KAAK,CAACnY,GAAG,IAAI;IAC3HgV,OAAO,CAACnzB,KAAK,gCAAAlF,MAAA,CAAgCkP,OAAO,GAAImU,GAAG,CAAC;IAC5D,OAAO;MACLrG,GAAG,EAAE;IACP,CAAC;EACH,CAAC,CAAC,CAAC,CAAC,EAAE/Y,GAAG,CAACkQ,QAAQ,IAAIA,QAAQ,CAAC6I,GAAG,CAAC;AACrC;;AAEA;AACA;AACA;AACA,eAAemsD,qBAAqBA,CAACj6D,OAAO,EAAE8N,GAAG,EAAE1Y,QAAQ,EAAE2G,OAAO,EAAEiuB,OAAO,EAAE;EAC7E,IAAIkwC,UAAU,GAAG,EAAE;EACnB,IAAI;IACF;IACA,MAAMlqC,cAAc,GAAGrT,gBAAgB,CAAC/S,SAAS,CAACrN,KAAK,CAACuR,GAAG,CAAC,EAAE,cAAc,CAAC;IAC7E,MAAMqsD,YAAY,GAAGx9C,gBAAgB,CAAC/S,SAAS,CAACrN,KAAK,CAACuR,GAAG,CAAC,EAAE,iBAAiB,CAAC;IAC9E,IAAIqsD,YAAY,EAAE;MAChB,MAAMjiC,QAAQ,GAAG,IAAIsZ,eAAe,CAACp8C,QAAQ,EAAE4K,OAAO,EAAE4X,mBAAmB,EAAE7b,OAAO,EAAEiuB,OAAO,CAAC;MAC9F,MAAMowC,OAAO,GAAG,MAAMliC,QAAQ,CAACnY,IAAI,CAAC,kBAAkB,CAAC;;MAEvD;MACA,MAAMs6C,eAAe,GAAGD,OAAO,CAACrlE,GAAG,CAACq2B,IAAI,IAAIA,IAAI,CAACnmB,QAAQ,CAACwzD,cAAc,CAAC;;MAEzE;MACAyB,UAAU,GAAG,MAAMF,YAAY,CAACK,eAAe,EAAEjlE,QAAQ,EAAE40B,OAAO,CAAC;IACrE,CAAC,MAAM,IAAIgG,cAAc,EAAE;MACzB,MAAMkI,QAAQ,GAAG,IAAIsZ,eAAe,CAACp8C,QAAQ,EAAE4K,OAAO,EAAE2X,gBAAgB,EAAE5b,OAAO,EAAEiuB,OAAO,CAAC;MAC3F,MAAMswC,SAAS,GAAG,MAAMpiC,QAAQ,CAACnY,IAAI,CAAC,eAAe,CAAC;;MAEtD;MACA,MAAMw6C,UAAU,GAAGD,SAAS,CAACvlE,GAAG,CAACq2B,IAAI,IAAIA,IAAI,CAAC6rC,aAAa,CAAC;MAC5D,MAAMmD,OAAO,GAAGvmD,KAAK,CAAC7gB,IAAI,CAAC,IAAIkpB,GAAG,CAACq+C,UAAU,CAAC,CAAC;;MAE/C;MACAL,UAAU,GAAG,MAAMF,YAAY,CAACI,OAAO,EAAEhlE,QAAQ,EAAE40B,OAAO,CAAC;IAC7D;EACF,CAAC,CAAC,OAAO7V,GAAG,EAAE,CAAC;EACf,OAAO+lD,UAAU,CAAC/oE,MAAM,GAAG,CAAC,GAAG45B,QAAQ,CAAC,CAACjd,GAAG,EAAE,GAAGosD,UAAU,CAAC,CAAC,GAAGpsD,GAAG;AACrE;AAEA,MAAM0sD,sBAAsB,GAAG,eAAe9yD,oBAAoB,CAACmB,KAAK,CAAC1F,YAAY,CAAC,CAAC0F,KAAK,CAACH,kBAAkB,CAAC;AAChH,MAAM+xD,uBAAuB,GAAG,eAAe1yD,0BAA0B,CAACc,KAAK,CAAC1F,YAAY,CAAC,CAAC0F,KAAK,CAACH,kBAAkB,CAAC;AACvH,MAAMgyD,uBAAuB,GAAG,eAAeF,sBAAsB,CAAC3xD,KAAK,CAACR,uBAAuB,CAAC,CAACQ,KAAK,CAACV,uBAAuB,CAAC,CAACU,KAAK,CAACL,4BAA4B,CAAC;AACvK,MAAMmyD,uBAAuB,GAAG;EAC9BzxD,MAAM,EAAEwxD,uBAAuB;EAC/BvxD,MAAM,EAAEsxD,uBAAuB;EAC/BrxD,KAAK,EAAEoxD;AACT,CAAC;AAED,MAAMI,sBAAsB,GAAG,eAAelzD,oBAAoB,CAACmB,KAAK,CAACb,mBAAmB,CAAC,CAACa,KAAK,CAACH,kBAAkB,CAAC;AACvH,MAAMmyD,uBAAuB,GAAG,eAAe9yD,0BAA0B,CAACc,KAAK,CAACb,mBAAmB,CAAC,CAACa,KAAK,CAACH,kBAAkB,CAAC;AAC9H,MAAMoyD,uBAAuB,GAAG,eAAeF,sBAAsB,CAAC/xD,KAAK,CAACL,4BAA4B,CAAC;AACzG,MAAMuyD,uBAAuB,GAAG;EAC9B7xD,MAAM,EAAE4xD,uBAAuB;EAC/B3xD,MAAM,EAAE0xD,uBAAuB;EAC/BzxD,KAAK,EAAEwxD;AACT,CAAC;AAED,MAAMI,UAAU,GAAG,CAAC,OAAO,CAAC;AAC5B,MAAMC,uBAAuB,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,UAAU,CAAC;AAC/D,MAAMC,0BAA0B,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,OAAO,CAAC;AAC/D,MAAMC,mBAAmB,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,UAAU,CAAC;AACpE,MAAMC,yBAAyB,GAAG,CAAC,OAAO,EAAE,UAAU,CAAC;AACvD,MAAMC,wBAAwB,GAAG,CAAC,OAAO,EAAE,UAAU,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,CAAC;AAEnF,MAAMC,qBAAqB,GAAG;EAC5BC,IAAI,EAAE,MAAM;EACZ36C,KAAK,EAAE,OAAO;EACd,cAAc,EAAE,cAAc;EAC9B46C,OAAO,EAAE,SAAS;EAClBC,WAAW,EAAE,aAAa;EAC1B,gBAAgB,EAAE,gBAAgB;EAClCC,SAAS,EAAE,WAAW;EACtB,gBAAgB,EAAE,gBAAgB;EAClC,UAAU,EAAE,UAAU;EACtBr7C,IAAI,EAAE,MAAM;EACZ,gBAAgB,EAAE,gBAAgB;EAClCzN,KAAK,EAAE,OAAO;EACd,YAAY,EAAE;AAChB,CAAC;AACD,MAAM+oD,sBAAsB,GAAG;EAC7BrkE,IAAI,EAAE,aAAa;EACnB8hB,YAAY,EAAEkiD,qBAAqB,CAAC,cAAc,CAAC;EACnD/1B,MAAM,EAAEpS,yBAAyB;EACjC2T,KAAK,EAAEm0B,uBAAuB;EAC9BW,UAAU,EAAE,eAAAA,CAAA,EAAkB;IAC5B,KAAK,IAAIC,IAAI,GAAGznE,SAAS,CAACjD,MAAM,EAAEo5B,IAAI,GAAG,IAAI1W,KAAK,CAACgoD,IAAI,CAAC,EAAEC,IAAI,GAAG,CAAC,EAAEA,IAAI,GAAGD,IAAI,EAAEC,IAAI,EAAE,EAAE;MACvFvxC,IAAI,CAACuxC,IAAI,CAAC,GAAG1nE,SAAS,CAAC0nE,IAAI,CAAC;IAC9B;IACA,IAAI,CAAC5nE,OAAO,EAAE8L,OAAO,EAAEgqB,OAAO,EAAEjuB,OAAO,CAAC,GAAGwuB,IAAI;IAC/C,MAAM,GAAGn1B,QAAQ,CAAC,GAAGmK,oBAAoB,CAACrL,OAAO,EAAE6H,OAAO,CAAC;IAC3D,MAAM,CAAC+R,GAAG,EAAEoqB,QAAQ,EAAE6jC,QAAQ,CAAC,GAAG,MAAMllE,OAAO,CAAC+M,GAAG,CAAC,CAAC+3D,sBAAsB,CAACK,MAAM,CAACh8D,OAAO,EAAE5K,QAAQ,EAAE40B,OAAO,CAAC,EAAE,MAAM,CAAC,wCAAwC,CAAC,EAAE50B,QAAQ,CAAC6H,UAAU,CAAC,CAAC,CAAC,CAAC;IACzL,OAAO,IAAIi7B,QAAQ,CAAC+jC,WAAW,CAAC/nE,OAAO,EAAE8L,OAAO,EAAEgqB,OAAO,EAAEjuB,OAAO,EAAE+R,GAAG,EAAEiuD,QAAQ,CAAC3kE,OAAO,CAAC;EAC5F,CAAC;EACD4kE,MAAM,EAAE,MAAAA,CAAOh8D,OAAO,EAAE5K,QAAQ,EAAE40B,OAAO,KAAK;IAC5C,MAAMlc,GAAG,GAAG,MAAM8e,mBAAmB,CAAC5sB,OAAO,EAAE5K,QAAQ,EAAE40B,OAAO,CAAC;IACjE,IAAIlc,GAAG,EAAE;MACP,OAAOA,GAAG;IACZ;IACA;IACA,MAAMo7C,YAAY,GAAG,MAAMgT,eAAe,CAACl8D,OAAO,EAAE5K,QAAQ,CAAC;IAC7D,OAAO,CAAC8zD,YAAY,IAAIA,YAAY,CAACh4D,OAAO,GAAG,CAAC,GAAG,CAAC,MAAM,MAAM,CAAC,uDAAuD,CAAC,EAAE0G,OAAO,GAAG,CAAC,MAAM,MAAM,CAAC,0DAA0D,CAAC,EAAEA,OAAO;EACzN;AACF,CAAC;AACD,MAAMukE,kBAAkB,GAAG;EACzB7kE,IAAI,EAAE,cAAc;EACpB8hB,YAAY,EAAEkiD,qBAAqB,CAAC,SAAS,CAAC;EAC9C/1B,MAAM,EAAEhQ,0BAA0B;EAClCuR,KAAK,EAAEm0B,uBAAuB;EAC9BW,UAAU,EAAE,eAAAA,CAAA,EAAkB;IAC5B,KAAK,IAAIQ,KAAK,GAAGhoE,SAAS,CAACjD,MAAM,EAAE+qD,KAAK,GAAG,IAAIroC,KAAK,CAACuoD,KAAK,CAAC,EAAEC,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGD,KAAK,EAAEC,KAAK,EAAE,EAAE;MAC9FngB,KAAK,CAACmgB,KAAK,CAAC,GAAGjoE,SAAS,CAACioE,KAAK,CAAC;IACjC;IACA,IAAI,CAACnoE,OAAO,EAAE8L,OAAO,EAAEgqB,OAAO,EAAEjuB,OAAO,CAAC,GAAGmgD,KAAK;IAChD,MAAM,GAAG9mD,QAAQ,CAAC,GAAGmK,oBAAoB,CAACrL,OAAO,EAAE6H,OAAO,CAAC;IAC3D,MAAM,CAAC+R,GAAG,EAAEoqB,QAAQ,EAAE6jC,QAAQ,CAAC,GAAG,MAAMllE,OAAO,CAAC+M,GAAG,CAAC,CAACu4D,kBAAkB,CAACH,MAAM,CAACh8D,OAAO,EAAE5K,QAAQ,EAAE40B,OAAO,CAAC,EAAE,MAAM,CAAC,mCAAmC,CAAC,EAAE50B,QAAQ,CAAC6H,UAAU,CAAC,CAAC,CAAC,CAAC;IAChL,OAAO,IAAIi7B,QAAQ,CAACokC,OAAO,CAACpoE,OAAO,EAAE8L,OAAO,EAAEgqB,OAAO,EAAEjuB,OAAO,EAAE+R,GAAG,EAAEiuD,QAAQ,CAAC3kE,OAAO,CAAC;EACxF,CAAC;EACD4kE,MAAM,EAAE,MAAAA,CAAOh8D,OAAO,EAAE5K,QAAQ,EAAE40B,OAAO,KAAK;IAC5C,MAAMlc,GAAG,GAAG,MAAM8e,mBAAmB,CAAC5sB,OAAO,EAAE5K,QAAQ,EAAE40B,OAAO,CAAC;IACjE,IAAIlc,GAAG,EAAE;MACP,OAAOA,GAAG;IACZ;IACA;IACA,OAAO,CAAC,MAAM,MAAM,CAAC,wDAAwD,CAAC,EAAElW,OAAO;EACzF;AACF,CAAC;AACD,MAAM2kE,sBAAsB,GAAG;EAC7BjlE,IAAI,EAAE,aAAa;EACnB8hB,YAAY,EAAEkiD,qBAAqB,CAACG,WAAW;EAC/Cl2B,MAAM,EAAEhS,yBAAyB;EACjCuT,KAAK,EAAEo0B,0BAA0B;EACjCU,UAAU,EAAE,eAAAA,CAAA,EAAkB;IAC5B,KAAK,IAAIY,KAAK,GAAGpoE,SAAS,CAACjD,MAAM,EAAEsrE,KAAK,GAAG,IAAI5oD,KAAK,CAAC2oD,KAAK,CAAC,EAAEE,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGF,KAAK,EAAEE,KAAK,EAAE,EAAE;MAC9FD,KAAK,CAACC,KAAK,CAAC,GAAGtoE,SAAS,CAACsoE,KAAK,CAAC;IACjC;IACA,IAAI,CAACxoE,OAAO,EAAE8L,OAAO,EAAEgqB,OAAO,EAAEjuB,OAAO,CAAC,GAAG0gE,KAAK;IAChD,MAAM,GAAGrnE,QAAQ,CAAC,GAAGmK,oBAAoB,CAACrL,OAAO,EAAE6H,OAAO,CAAC;IAC3D,MAAM,CAAC+R,GAAG,EAAEoqB,QAAQ,EAAE6jC,QAAQ,CAAC,GAAG,MAAMllE,OAAO,CAAC+M,GAAG,CAAC,CAAC24D,sBAAsB,CAACP,MAAM,CAACh8D,OAAO,EAAE5K,QAAQ,EAAE40B,OAAO,CAAC,EAAE,MAAM,CAAC,uCAAuC,CAAC,EAAE50B,QAAQ,CAAC6H,UAAU,CAAC,CAAC,CAAC,CAAC;IACxL,OAAO,IAAIi7B,QAAQ,CAACykC,WAAW,CAACzoE,OAAO,EAAE8L,OAAO,EAAEgqB,OAAO,EAAEjuB,OAAO,EAAE+R,GAAG,EAAEiuD,QAAQ,CAAC3kE,OAAO,CAAC;EAC5F,CAAC;EACD4kE,MAAM,EAAE,MAAAA,CAAOh8D,OAAO,EAAE5K,QAAQ,EAAE40B,OAAO,KAAK;IAC5C,MAAMlc,GAAG,GAAG,MAAM8e,mBAAmB,CAAC5sB,OAAO,EAAE5K,QAAQ,EAAE40B,OAAO,CAAC;IACjE,IAAIlc,GAAG,EAAE;MACP,OAAOA,GAAG;IACZ;;IAEA;IACA,OAAO,CAAC,MAAM,MAAM,CAAC,uDAAuD,CAAC,EAAElW,OAAO;EACxF;AACF,CAAC;AACD,MAAMglE,wBAAwB,GAAG;EAC/BtlE,IAAI,EAAE,eAAe;EACrB8hB,YAAY,EAAEkiD,qBAAqB,CAAC,gBAAgB,CAAC;EACrD/1B,MAAM,EAAEhS,yBAAyB;EACjCuT,KAAK,EAAEo0B,0BAA0B;EACjCU,UAAU,EAAE,eAAAA,CAAA,EAAkB;IAC5B,KAAK,IAAIiB,KAAK,GAAGzoE,SAAS,CAACjD,MAAM,EAAE2rE,KAAK,GAAG,IAAIjpD,KAAK,CAACgpD,KAAK,CAAC,EAAEE,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGF,KAAK,EAAEE,KAAK,EAAE,EAAE;MAC9FD,KAAK,CAACC,KAAK,CAAC,GAAG3oE,SAAS,CAAC2oE,KAAK,CAAC;IACjC;IACA,IAAI,CAAC7oE,OAAO,EAAE8L,OAAO,EAAEgqB,OAAO,EAAEjuB,OAAO,CAAC,GAAG+gE,KAAK;IAChD,MAAM,GAAG1nE,QAAQ,CAAC,GAAGmK,oBAAoB,CAACrL,OAAO,EAAE6H,OAAO,CAAC;IAC3D,MAAM,CAAC+R,GAAG,EAAEoqB,QAAQ,EAAE6jC,QAAQ,CAAC,GAAG,MAAMllE,OAAO,CAAC+M,GAAG,CAAC,CAACg5D,wBAAwB,CAACZ,MAAM,CAACh8D,OAAO,EAAE5K,QAAQ,EAAE40B,OAAO,EAAEjuB,OAAO,CAAC,EAAE,MAAM,CAAC,yCAAyC,CAAC,EAAE3G,QAAQ,CAAC6H,UAAU,CAAC,CAAC,CAAC,CAAC;IACrM,OAAO,IAAIi7B,QAAQ,CAAC8kC,aAAa,CAAC9oE,OAAO,EAAE8L,OAAO,EAAEgqB,OAAO,EAAEjuB,OAAO,EAAE+R,GAAG,EAAEiuD,QAAQ,CAAC3kE,OAAO,CAAC;EAC9F,CAAC;EACD4kE,MAAM,EAAE,MAAAA,CAAOh8D,OAAO,EAAE5K,QAAQ,EAAE40B,OAAO,EAAEjuB,OAAO,KAAK;IACrD,MAAM3E,OAAO,GAAG,CAAC,MAAMhC,QAAQ,CAAC6H,UAAU,CAAC,CAAC,EAAE7F,OAAO;IACrD,MAAM6lE,QAAQ,GAAG7lE,OAAO,KAAK,GAAG,IAAIA,OAAO,KAAK,GAAG;;IAEnD;IACA;IACA,IAAI6lE,QAAQ,EAAE;MACZ,MAAM9kC,iBAAiB,GAAG,MAAMF,iCAAiC,CAACD,iBAAiB,EAAE,eAAe,EAAE,QAAQ,EAAEhO,OAAO,EAAEjuB,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAElE,QAAQ,EAAEkE,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEhE,SAAS,CAAC;MAC/J,MAAM8O,GAAG,GAAGsxB,iBAAiB,CAACruB,WAAW;MACzC,MAAMuC,YAAY,GAAG,MAAM0tD,0BAA0B,CAAClzD,GAAG,EAAEmjB,OAAO,CAAC;MACnE,OAAO3d,YAAY;IACrB;IACA,MAAMyB,GAAG,GAAG,MAAM8e,mBAAmB,CAAC5sB,OAAO,EAAE5K,QAAQ,EAAE40B,OAAO,CAAC;IACjE,IAAIlc,GAAG,EAAE;MACP,OAAO,MAAMmsD,qBAAqB,CAACj6D,OAAO,EAAE8N,GAAG,EAAE1Y,QAAQ,EAAE,CAAC,CAAC,EAAE40B,OAAO,CAAC;IACzE;;IAEA;IACA,MAAMkzC,QAAQ,GAAG,CAAC,MAAM,MAAM,CAAC,yDAAyD,CAAC,EAAEtlE,OAAO;IAClG,OAAO,MAAMqiE,qBAAqB,CAACj6D,OAAO,EAAE4J,SAAS,CAACrN,KAAK,CAAC2gE,QAAQ,IAAI,EAAE,CAAC,EAAE9nE,QAAQ,EAAE,CAAC,CAAC,EAAE40B,OAAO,CAAC;EACrG;AACF,CAAC;AACD,MAAMmzC,oBAAoB,GAAG;EAC3B7lE,IAAI,EAAE,WAAW;EACjB8hB,YAAY,EAAEkiD,qBAAqB,CAACI,SAAS;EAC7Cn2B,MAAM,EAAEw1B,uBAAuB;EAC/Bj0B,KAAK,EAAEu0B,wBAAwB;EAC/BO,UAAU,EAAE,eAAAA,CAAA,EAAkB;IAC5B,KAAK,IAAIwB,KAAK,GAAGhpE,SAAS,CAACjD,MAAM,EAAEksE,KAAK,GAAG,IAAIxpD,KAAK,CAACupD,KAAK,CAAC,EAAEE,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGF,KAAK,EAAEE,KAAK,EAAE,EAAE;MAC9FD,KAAK,CAACC,KAAK,CAAC,GAAGlpE,SAAS,CAACkpE,KAAK,CAAC;IACjC;IACA,IAAI,CAACppE,OAAO,EAAE8L,OAAO,EAAEgqB,OAAO,EAAEjuB,OAAO,CAAC,GAAGshE,KAAK;IAChD,MAAM,GAAGjoE,QAAQ,CAAC,GAAGmK,oBAAoB,CAACrL,OAAO,EAAE6H,OAAO,CAAC;IAC3D,MAAM,CAAC+R,GAAG,EAAEoqB,QAAQ,EAAE6jC,QAAQ,CAAC,GAAG,MAAMllE,OAAO,CAAC+M,GAAG,CAAC,CAACu5D,oBAAoB,CAACnB,MAAM,CAACh8D,OAAO,EAAE5K,QAAQ,EAAE40B,OAAO,CAAC,EAAE,MAAM,CAAC,qCAAqC,CAAC,EAAE50B,QAAQ,CAAC6H,UAAU,CAAC,CAAC,CAAC,CAAC;IACpL,OAAO,IAAIi7B,QAAQ,CAACqlC,SAAS,CAACrpE,OAAO,EAAE8L,OAAO,EAAEgqB,OAAO,EAAEjuB,OAAO,EAAE+R,GAAG,EAAEiuD,QAAQ,CAAC3kE,OAAO,CAAC;EAC1F,CAAC;EACD4kE,MAAM,EAAE,MAAAA,CAAOh8D,OAAO,EAAE5K,QAAQ,EAAE40B,OAAO,KAAK;IAC5C,MAAMlc,GAAG,GAAG,MAAM8e,mBAAmB,CAAC5sB,OAAO,EAAE5K,QAAQ,EAAE40B,OAAO,CAAC;IACjE,IAAIlc,GAAG,EAAE;MACP,OAAOA,GAAG;IACZ;IACA;IACA,OAAO,CAAC,MAAM,MAAM,CAAC,qDAAqD,CAAC,EAAElW,OAAO;EACtF;AACF,CAAC;AACD,MAAM4lE,wBAAwB,GAAG;EAC/BlmE,IAAI,EAAE,aAAa;EACnB8hB,YAAY,EAAEkiD,qBAAqB,CAAC,gBAAgB,CAAC;EACrD/1B,MAAM,EAAEpQ,yBAAyB;EACjC2R,KAAK,EAAEm0B,uBAAuB;EAC9BW,UAAU,EAAE,eAAAA,CAAA,EAAkB;IAC5B,KAAK,IAAI6B,KAAK,GAAGrpE,SAAS,CAACjD,MAAM,EAAEusE,KAAK,GAAG,IAAI7pD,KAAK,CAAC4pD,KAAK,CAAC,EAAEE,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGF,KAAK,EAAEE,KAAK,EAAE,EAAE;MAC9FD,KAAK,CAACC,KAAK,CAAC,GAAGvpE,SAAS,CAACupE,KAAK,CAAC;IACjC;IACA,IAAI,CAACzpE,OAAO,EAAE8L,OAAO,EAAEgqB,OAAO,EAAEjuB,OAAO,CAAC,GAAG2hE,KAAK;IAChD,MAAM,GAAGtoE,QAAQ,CAAC,GAAGmK,oBAAoB,CAACrL,OAAO,EAAE6H,OAAO,CAAC;IAC3D,MAAM,CAAC+R,GAAG,EAAEoqB,QAAQ,EAAE6jC,QAAQ,CAAC,GAAG,MAAMllE,OAAO,CAAC+M,GAAG,CAAC,CAAC45D,wBAAwB,CAACxB,MAAM,CAACh8D,OAAO,EAAE5K,QAAQ,EAAE40B,OAAO,CAAC,EAAE,MAAM,CAAC,0CAA0C,CAAC,EAAE50B,QAAQ,CAAC6H,UAAU,CAAC,CAAC,CAAC,CAAC;IAC7L,OAAO,IAAIi7B,QAAQ,CAAC0lC,aAAa,CAAC1pE,OAAO,EAAE8L,OAAO,EAAEgqB,OAAO,EAAEjuB,OAAO,EAAE+R,GAAG,EAAEiuD,QAAQ,CAAC3kE,OAAO,CAAC;EAC9F,CAAC;EACD4kE,MAAM,EAAE,MAAAA,CAAOh8D,OAAO,EAAE5K,QAAQ,EAAE40B,OAAO,KAAK;IAC5C,MAAMlc,GAAG,GAAG,MAAM8e,mBAAmB,CAAC5sB,OAAO,EAAE5K,QAAQ,EAAE40B,OAAO,CAAC;IACjE,IAAIlc,GAAG,EAAE;MACP,OAAOA,GAAG;IACZ;IACA;IACA,OAAO,CAAC,MAAM,MAAM,CAAC,uDAAuD,CAAC,EAAElW,OAAO;EACxF;AACF,CAAC;AACD,MAAMimE,kBAAkB,GAAG;EACzBvmE,IAAI,EAAE,YAAY;EAClB8hB,YAAY,EAAEkiD,qBAAqB,CAAC,UAAU,CAAC;EAC/C/1B,MAAM,EAAExS,wBAAwB;EAChC+T,KAAK,EAAEm0B,uBAAuB;EAC9BW,UAAU,EAAE,eAAAA,CAAA,EAAkB;IAC5B,KAAK,IAAIkC,KAAK,GAAG1pE,SAAS,CAACjD,MAAM,EAAE4sE,KAAK,GAAG,IAAIlqD,KAAK,CAACiqD,KAAK,CAAC,EAAEE,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGF,KAAK,EAAEE,KAAK,EAAE,EAAE;MAC9FD,KAAK,CAACC,KAAK,CAAC,GAAG5pE,SAAS,CAAC4pE,KAAK,CAAC;IACjC;IACA,IAAI,CAAC9pE,OAAO,EAAE8L,OAAO,EAAEgqB,OAAO,EAAEjuB,OAAO,CAAC,GAAGgiE,KAAK;IAChD,MAAM,GAAG3oE,QAAQ,CAAC,GAAGmK,oBAAoB,CAACrL,OAAO,EAAE6H,OAAO,CAAC;IAC3D,MAAM,CAAC+R,GAAG,EAAEoqB,QAAQ,EAAE6jC,QAAQ,CAAC,GAAG,MAAMllE,OAAO,CAAC+M,GAAG,CAAC,CAACi6D,kBAAkB,CAAC7B,MAAM,CAACh8D,OAAO,EAAE5K,QAAQ,EAAE40B,OAAO,CAAC,EAAE,MAAM,CAAC,oCAAoC,CAAC,EAAE50B,QAAQ,CAAC6H,UAAU,CAAC,CAAC,CAAC,CAAC;IACjL,OAAO,IAAIi7B,QAAQ,CAAC+lC,OAAO,CAAC/pE,OAAO,EAAE8L,OAAO,EAAEgqB,OAAO,EAAEjuB,OAAO,EAAE+R,GAAG,EAAEiuD,QAAQ,CAAC3kE,OAAO,CAAC;EACxF,CAAC;EACD4kE,MAAM,EAAE,MAAAA,CAAOh8D,OAAO,EAAE5K,QAAQ,EAAE40B,OAAO,KAAK;IAC5C,MAAMlc,GAAG,GAAG,MAAM8e,mBAAmB,CAAC5sB,OAAO,EAAE5K,QAAQ,EAAE40B,OAAO,CAAC;IACjE,IAAIlc,GAAG,EAAE;MACP,OAAOA,GAAG;IACZ;IACA;IACA,MAAMo7C,YAAY,GAAG,MAAMgT,eAAe,CAACl8D,OAAO,EAAE5K,QAAQ,CAAC;IAC7D,OAAO,CAAC8zD,YAAY,IAAIA,YAAY,CAACh4D,OAAO,GAAG,CAAC,GAAG,CAAC,MAAM,MAAM,CAAC,sDAAsD,CAAC,EAAE0G,OAAO,GAAG,CAAC,MAAM,MAAM,CAAC,yDAAyD,CAAC,EAAEA,OAAO;EACvN;AACF,CAAC;AACD,MAAMsmE,eAAe,GAAG;EACtB5mE,IAAI,EAAE,MAAM;EACZ8hB,YAAY,EAAEkiD,qBAAqB,CAAC,MAAM,CAAC;EAC3C/1B,MAAM,EAAE5R,kBAAkB;EAC1BmT,KAAK,EAAEq0B,mBAAmB;EAC1BS,UAAU,EAAE,eAAAA,CAAA,EAAkB;IAC5B,KAAK,IAAIuC,KAAK,GAAG/pE,SAAS,CAACjD,MAAM,EAAEitE,KAAK,GAAG,IAAIvqD,KAAK,CAACsqD,KAAK,CAAC,EAAEE,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGF,KAAK,EAAEE,KAAK,EAAE,EAAE;MAC9FD,KAAK,CAACC,KAAK,CAAC,GAAGjqE,SAAS,CAACiqE,KAAK,CAAC;IACjC;IACA,IAAI,CAACnqE,OAAO,EAAE8L,OAAO,EAAEgqB,OAAO,EAAEjuB,OAAO,CAAC,GAAGqiE,KAAK;IAChD,MAAM,GAAGhpE,QAAQ,CAAC,GAAGmK,oBAAoB,CAACrL,OAAO,EAAE6H,OAAO,CAAC;IAC3D,MAAM,CAAC+R,GAAG,EAAEoqB,QAAQ,EAAE6jC,QAAQ,CAAC,GAAG,MAAMllE,OAAO,CAAC+M,GAAG,CAAC,CAACs6D,eAAe,CAAClC,MAAM,CAACh8D,OAAO,EAAE5K,QAAQ,EAAE40B,OAAO,CAAC,EAAE,MAAM,CAAC,gCAAgC,CAAC,EAAE50B,QAAQ,CAAC6H,UAAU,CAAC,CAAC,CAAC,CAAC;IAC1K,OAAO,IAAIi7B,QAAQ,CAAComC,IAAI,CAACpqE,OAAO,EAAE8L,OAAO,EAAEgqB,OAAO,EAAEjuB,OAAO,EAAE+R,GAAG,EAAEiuD,QAAQ,CAAC3kE,OAAO,CAAC;EACrF,CAAC;EACD4kE,MAAM,EAAE,MAAAA,CAAOh8D,OAAO,EAAE5K,QAAQ,EAAE40B,OAAO,KAAK;IAC5C,MAAMlc,GAAG,GAAG,MAAM8e,mBAAmB,CAAC5sB,OAAO,EAAE5K,QAAQ,EAAE40B,OAAO,CAAC;IACjE,IAAIlc,GAAG,EAAE;MACP,OAAOA,GAAG;IACZ;IACA;IACA,OAAOlE,SAAS,CAACrN,KAAK,CAAC,CAAC,MAAM,MAAM,CAAC,gDAAgD,CAAC,EAAE3E,OAAO,IAAI,EAAE,CAAC;EACxG;AACF,CAAC;AACD,MAAM2mE,wBAAwB,GAAG;EAC/BjnE,IAAI,EAAE,eAAe;EACrB8hB,YAAY,EAAEkiD,qBAAqB,CAAC,gBAAgB,CAAC;EACrD/1B,MAAM,EAAExS,wBAAwB;EAChC+T,KAAK,EAAEm0B,uBAAuB;EAC9BW,UAAU,EAAE,eAAAA,CAAA,EAAkB;IAC5B,KAAK,IAAI4C,KAAK,GAAGpqE,SAAS,CAACjD,MAAM,EAAEstE,KAAK,GAAG,IAAI5qD,KAAK,CAAC2qD,KAAK,CAAC,EAAEE,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGF,KAAK,EAAEE,KAAK,EAAE,EAAE;MAC9FD,KAAK,CAACC,KAAK,CAAC,GAAGtqE,SAAS,CAACsqE,KAAK,CAAC;IACjC;IACA,IAAI,CAACxqE,OAAO,EAAE8L,OAAO,EAAEgqB,OAAO,EAAEjuB,OAAO,CAAC,GAAG0iE,KAAK;IAChD,MAAM,GAAGrpE,QAAQ,CAAC,GAAGmK,oBAAoB,CAACrL,OAAO,EAAE6H,OAAO,CAAC;IAC3D,MAAM,CAAC+R,GAAG,EAAEoqB,QAAQ,EAAE6jC,QAAQ,CAAC,GAAG,MAAMllE,OAAO,CAAC+M,GAAG,CAAC,CAAC26D,wBAAwB,CAACvC,MAAM,CAACh8D,OAAO,EAAE5K,QAAQ,EAAE40B,OAAO,CAAC,EAAE,MAAM,CAAC,0CAA0C,CAAC,EAAE50B,QAAQ,CAAC6H,UAAU,CAAC,CAAC,CAAC,CAAC;IAC7L,OAAO,IAAIi7B,QAAQ,CAACymC,aAAa,CAACzqE,OAAO,EAAE8L,OAAO,EAAEgqB,OAAO,EAAEjuB,OAAO,EAAE+R,GAAG,EAAEiuD,QAAQ,CAAC3kE,OAAO,CAAC;EAC9F,CAAC;EACD4kE,MAAM,EAAE,MAAAA,CAAOh8D,OAAO,EAAE5K,QAAQ,EAAE40B,OAAO,KAAK;IAC5C,MAAMlc,GAAG,GAAG,MAAM8e,mBAAmB,CAAC5sB,OAAO,EAAE5K,QAAQ,EAAE40B,OAAO,CAAC;IACjE,IAAIlc,GAAG,EAAE;MACP,OAAOA,GAAG;IACZ;IACA;IACA,MAAMo7C,YAAY,GAAG,MAAMgT,eAAe,CAACl8D,OAAO,EAAE5K,QAAQ,CAAC;IAC7D,OAAO,CAAC8zD,YAAY,IAAIA,YAAY,CAACh4D,OAAO,GAAG,CAAC,GAAG,CAAC,MAAM,MAAM,CAAC,yDAAyD,CAAC,EAAE0G,OAAO,GAAG,CAAC,MAAM,MAAM,CAAC,4DAA4D,CAAC,EAAEA,OAAO;EAC7N;AACF,CAAC;AACD,MAAMgnE,gBAAgB,GAAG;EACvBtnE,IAAI,EAAE,OAAO;EACb8hB,YAAY,EAAEkiD,qBAAqB,CAAC,OAAO,CAAC;EAC5C/1B,MAAM,EAAE5Q,oBAAoB;EAC5BmS,KAAK,EAAEk0B,UAAU;EACjBY,UAAU,EAAE,eAAAA,CAAA,EAAkB;IAC5B,KAAK,IAAIiD,MAAM,GAAGzqE,SAAS,CAACjD,MAAM,EAAE2tE,MAAM,GAAG,IAAIjrD,KAAK,CAACgrD,MAAM,CAAC,EAAEE,MAAM,GAAG,CAAC,EAAEA,MAAM,GAAGF,MAAM,EAAEE,MAAM,EAAE,EAAE;MACrGD,MAAM,CAACC,MAAM,CAAC,GAAG3qE,SAAS,CAAC2qE,MAAM,CAAC;IACpC;IACA,IAAI,CAAC7qE,OAAO,EAAE8L,OAAO,EAAEgqB,OAAO,EAAEjuB,OAAO,CAAC,GAAG+iE,MAAM;IACjD,MAAM,GAAG1pE,QAAQ,CAAC,GAAGmK,oBAAoB,CAACrL,OAAO,EAAE6H,OAAO,CAAC;IAC3D,MAAM,CAAC+R,GAAG,EAAEoqB,QAAQ,EAAE6jC,QAAQ,CAAC,GAAG,MAAMllE,OAAO,CAAC+M,GAAG,CAAC,CAACg7D,gBAAgB,CAAC5C,MAAM,CAACh8D,OAAO,EAAE5K,QAAQ,EAAE40B,OAAO,CAAC,EAAE,MAAM,CAAC,iCAAiC,CAAC,EAAE50B,QAAQ,CAAC6H,UAAU,CAAC,CAAC,CAAC,CAAC;IAC5K,OAAO,IAAIi7B,QAAQ,CAAC8mC,KAAK,CAAC9qE,OAAO,EAAE8L,OAAO,EAAEgqB,OAAO,EAAEjuB,OAAO,EAAE+R,GAAG,EAAEiuD,QAAQ,CAAC3kE,OAAO,CAAC;EACtF,CAAC;EACD4kE,MAAM,EAAE,MAAAA,CAAOh8D,OAAO,EAAE5K,QAAQ,EAAE40B,OAAO,KAAK;IAC5C,MAAMlc,GAAG,GAAG,MAAM8e,mBAAmB,CAAC5sB,OAAO,EAAE5K,QAAQ,EAAE40B,OAAO,CAAC;IACjE,IAAIlc,GAAG,EAAE;MACP,OAAOA,GAAG;IACZ;IACA;IACA,OAAO,CAAC,MAAM,MAAM,CAAC,iDAAiD,CAAC,EAAElW,OAAO;EAClF;AACF,CAAC;AACD,MAAMqnE,oBAAoB,GAAG;EAC3B3nE,IAAI,EAAE,WAAW;EACjB8hB,YAAY,EAAEkiD,qBAAqB,CAAC,YAAY,CAAC;EACjD/1B,MAAM,EAAEo1B,uBAAuB;EAC/B7zB,KAAK,EAAEs0B,yBAAyB;EAChCQ,UAAU,EAAE,eAAAA,CAAA,EAAkB;IAC5B,KAAK,IAAIsD,MAAM,GAAG9qE,SAAS,CAACjD,MAAM,EAAEguE,MAAM,GAAG,IAAItrD,KAAK,CAACqrD,MAAM,CAAC,EAAEE,MAAM,GAAG,CAAC,EAAEA,MAAM,GAAGF,MAAM,EAAEE,MAAM,EAAE,EAAE;MACrGD,MAAM,CAACC,MAAM,CAAC,GAAGhrE,SAAS,CAACgrE,MAAM,CAAC;IACpC;IACA,IAAI,CAAClrE,OAAO,EAAE8L,OAAO,EAAEgqB,OAAO,EAAEjuB,OAAO,CAAC,GAAGojE,MAAM;IACjD,MAAM,GAAG/pE,QAAQ,CAAC,GAAGmK,oBAAoB,CAACrL,OAAO,EAAE6H,OAAO,CAAC;IAC3D,MAAM,CAAC+R,GAAG,EAAEoqB,QAAQ,EAAE6jC,QAAQ,CAAC,GAAG,MAAMllE,OAAO,CAAC+M,GAAG,CAAC,CAACq7D,oBAAoB,CAACjD,MAAM,CAACh8D,OAAO,EAAE5K,QAAQ,EAAE40B,OAAO,CAAC,EAAE,MAAM,CAAC,sCAAsC,CAAC,EAAE50B,QAAQ,CAAC6H,UAAU,CAAC,CAAC,CAAC,CAAC;IACrL,OAAO,IAAIi7B,QAAQ,CAACmnC,SAAS,CAACnrE,OAAO,EAAE8L,OAAO,EAAEgqB,OAAO,EAAEjuB,OAAO,EAAE+R,GAAG,EAAEiuD,QAAQ,CAAC3kE,OAAO,CAAC;EAC1F,CAAC;EACD4kE,MAAM,EAAE,MAAAA,CAAOh8D,OAAO,EAAE5K,QAAQ,EAAE40B,OAAO,KAAK;IAC5C,MAAMlc,GAAG,GAAG,MAAM8e,mBAAmB,CAAC5sB,OAAO,EAAE5K,QAAQ,EAAE40B,OAAO,CAAC;IACjE,IAAIlc,GAAG,EAAE;MACP,OAAOA,GAAG;IACZ;IACA;IACA,MAAMo7C,YAAY,GAAG,MAAMgT,eAAe,CAACl8D,OAAO,EAAE5K,QAAQ,CAAC;IAC7D,OAAO,CAAC8zD,YAAY,IAAIA,YAAY,CAACh4D,OAAO,GAAG,CAAC,GAAG,CAAC,MAAM,MAAM,CAAC,qDAAqD,CAAC,EAAE0G,OAAO,GAAG,CAAC,MAAM,MAAM,CAAC,wDAAwD,CAAC,EAAEA,OAAO;EACrN;AACF,CAAC;AACD,MAAM0nE,gBAAgB,GAAG;EACvBhoE,IAAI,EAAE,YAAY;EAClB8hB,YAAY,EAAEkiD,qBAAqB,CAAC16C,KAAK;EACzC2kB,MAAM,EAAExQ,wBAAwB;EAChC+R,KAAK,EAAEm0B,uBAAuB;EAC9BW,UAAU,EAAE,eAAAA,CAAA,EAAkB;IAC5B,KAAK,IAAI2D,MAAM,GAAGnrE,SAAS,CAACjD,MAAM,EAAEquE,MAAM,GAAG,IAAI3rD,KAAK,CAAC0rD,MAAM,CAAC,EAAEE,MAAM,GAAG,CAAC,EAAEA,MAAM,GAAGF,MAAM,EAAEE,MAAM,EAAE,EAAE;MACrGD,MAAM,CAACC,MAAM,CAAC,GAAGrrE,SAAS,CAACqrE,MAAM,CAAC;IACpC;IACA,IAAI,CAACvrE,OAAO,EAAE8L,OAAO,EAAEgqB,OAAO,EAAEjuB,OAAO,CAAC,GAAGyjE,MAAM;IACjD,MAAM,GAAGpqE,QAAQ,CAAC,GAAGmK,oBAAoB,CAACrL,OAAO,EAAE6H,OAAO,CAAC;IAC3D,MAAM,CAAC+R,GAAG,EAAEoqB,QAAQ,EAAE6jC,QAAQ,CAAC,GAAG,MAAMllE,OAAO,CAAC+M,GAAG,CAAC,CAAC07D,gBAAgB,CAACtD,MAAM,CAACh8D,OAAO,EAAE5K,QAAQ,EAAE40B,OAAO,CAAC,EAAE,MAAM,CAAC,iCAAiC,CAAC,EAAE50B,QAAQ,CAAC6H,UAAU,CAAC,CAAC,CAAC,CAAC;IAC5K,OAAO,IAAIi7B,QAAQ,CAACwnC,KAAK,CAACxrE,OAAO,EAAE8L,OAAO,EAAEgqB,OAAO,EAAEjuB,OAAO,EAAE+R,GAAG,EAAEiuD,QAAQ,CAAC3kE,OAAO,CAAC;EACtF,CAAC;EACD4kE,MAAM,EAAE,MAAAA,CAAOh8D,OAAO,EAAE5K,QAAQ,EAAE40B,OAAO,KAAK;IAC5C,MAAMlc,GAAG,GAAG,MAAM8e,mBAAmB,CAAC5sB,OAAO,EAAE5K,QAAQ,EAAE40B,OAAO,CAAC;IACjE,IAAIlc,GAAG,EAAE;MACP,OAAOA,GAAG;IACZ;IACA;IACA,OAAO,CAAC,MAAM,MAAM,CAAC,sDAAsD,CAAC,EAAElW,OAAO;EACvF;AACF,CAAC;AACD,MAAM+nE,eAAe,GAAG;EACtBroE,IAAI,EAAE,WAAW;EACjB8hB,YAAY,EAAEkiD,qBAAqB,CAACC,IAAI;EACxCh2B,MAAM,EAAErP,kBAAkB;EAC1B4Q,KAAK,EAAE,EAAE;EACT80B,UAAU,EAAE,eAAAA,CAAA,EAAkB;IAC5B,KAAK,IAAIgE,MAAM,GAAGxrE,SAAS,CAACjD,MAAM,EAAE0uE,MAAM,GAAG,IAAIhsD,KAAK,CAAC+rD,MAAM,CAAC,EAAEE,MAAM,GAAG,CAAC,EAAEA,MAAM,GAAGF,MAAM,EAAEE,MAAM,EAAE,EAAE;MACrGD,MAAM,CAACC,MAAM,CAAC,GAAG1rE,SAAS,CAAC0rE,MAAM,CAAC;IACpC;IACA,IAAI,CAAC5rE,OAAO,EAAE8L,OAAO,EAAEgqB,OAAO,EAAEjuB,OAAO,CAAC,GAAG8jE,MAAM;IACjD,MAAM,GAAGzqE,QAAQ,CAAC,GAAGmK,oBAAoB,CAACrL,OAAO,EAAE6H,OAAO,CAAC;IAC3D,MAAM,CAAC+R,GAAG,EAAEoqB,QAAQ,EAAE6jC,QAAQ,CAAC,GAAG,MAAMllE,OAAO,CAAC+M,GAAG,CAAC,CAAC+7D,eAAe,CAAC3D,MAAM,CAACh8D,OAAO,EAAE5K,QAAQ,EAAE40B,OAAO,CAAC,EAAE,MAAM,CAAC,gCAAgC,CAAC,EAAE50B,QAAQ,CAAC6H,UAAU,CAAC,CAAC,CAAC,CAAC;IAC1K,OAAO,IAAIi7B,QAAQ,CAAC6nC,IAAI,CAAC7rE,OAAO,EAAE8L,OAAO,EAAEgqB,OAAO,EAAEjuB,OAAO,EAAE+R,GAAG,EAAEiuD,QAAQ,CAAC3kE,OAAO,CAAC;EACrF,CAAC;EACD4kE,MAAM,EAAE,MAAAA,CAAOh8D,OAAO,EAAE5K,QAAQ,EAAE40B,OAAO,KAAK;IAC5C,MAAMlc,GAAG,GAAG,MAAM8e,mBAAmB,CAAC5sB,OAAO,EAAE5K,QAAQ,EAAE40B,OAAO,CAAC;IACjE,IAAIlc,GAAG,EAAE;MACP,OAAOA,GAAG;IACZ;IACA;IACA,OAAO,CAAC,MAAM,MAAM,CAAC,qDAAqD,CAAC,EAAElW,OAAO;EACtF;AACF,CAAC;AACD,eAAeskE,eAAeA,CAACl8D,OAAO,EAAE5K,QAAQ,EAAE;EAChD,IAAI;IACF,OAAO,MAAM2yD,eAAe,CAAC/nD,OAAO,EAAE5K,QAAQ,CAAC;EACjD,CAAC,CAAC,OAAOwH,CAAC,EAAE;IACV,OAAOvI,SAAS;EAClB;AACF;;AAEA;AACA;AACA;AACA;AACA,MAAM2rE,sBAAsB,GAAG;EAC7B,CAAC1E,qBAAqB,CAAC,cAAc,CAAC,GAAGK,sBAAsB;EAC/D,CAACL,qBAAqB,CAACE,OAAO,GAAGW,kBAAkB;EACnD,CAACb,qBAAqB,CAACG,WAAW,GAAGc,sBAAsB;EAC3D,CAACjB,qBAAqB,CAAC,gBAAgB,CAAC,GAAGsB,wBAAwB;EACnE,CAACtB,qBAAqB,CAACI,SAAS,GAAGyB,oBAAoB;EACvD,CAAC7B,qBAAqB,CAAC,gBAAgB,CAAC,GAAGkC,wBAAwB;EACnE,CAAClC,qBAAqB,CAAC,UAAU,CAAC,GAAGuC,kBAAkB;EACvD,CAACvC,qBAAqB,CAACj7C,IAAI,GAAG69C,eAAe;EAC7C,CAAC5C,qBAAqB,CAAC,gBAAgB,CAAC,GAAGiD,wBAAwB;EACnE,CAACjD,qBAAqB,CAAC1oD,KAAK,GAAGgsD,gBAAgB;EAC/C,CAACtD,qBAAqB,CAAC,YAAY,CAAC,GAAG2D,oBAAoB;EAC3D,CAAC3D,qBAAqB,CAAC16C,KAAK,GAAG0+C,gBAAgB;EAC/C,CAAChE,qBAAqB,CAACC,IAAI,GAAGoE;AAChC,CAAC;AACD,MAAMM,6BAA6B,GAAG;EACpC,CAAC3E,qBAAqB,CAAC,cAAc,CAAC,GAAG,uDAAuD;EAChG,CAACA,qBAAqB,CAACE,OAAO,GAAG,EAAE;EACnC,CAACF,qBAAqB,CAACG,WAAW,GAAG,wEAAwE;EAC7G,CAACH,qBAAqB,CAAC,gBAAgB,CAAC,GAAG,2EAA2E;EACtH,CAACA,qBAAqB,CAACI,SAAS,GAAG,EAAE;EACrC,CAACJ,qBAAqB,CAAC,gBAAgB,CAAC,GAAG,EAAE;EAC7C,CAACA,qBAAqB,CAAC,UAAU,CAAC,GAAG,uDAAuD;EAC5F,CAACA,qBAAqB,CAACj7C,IAAI,GAAG,EAAE;EAChC,CAACi7C,qBAAqB,CAAC,gBAAgB,CAAC,GAAG,uDAAuD;EAClG,CAACA,qBAAqB,CAAC1oD,KAAK,GAAG,EAAE;EACjC,CAAC0oD,qBAAqB,CAAC,YAAY,CAAC,GAAG,kEAAkE;EACzG,CAACA,qBAAqB,CAAC16C,KAAK,GAAG,EAAE;EACjC,CAAC06C,qBAAqB,CAACC,IAAI,GAAG;AAChC,CAAC;AACD,MAAM2E,eAAe,GAAG;EACtB5oE,IAAI,EAAE,eAAe;EACrB8hB,YAAY,EAAE,QAAQ;EACtBmsB,MAAM,EAAE,CAAC,CAAC;EACVuB,KAAK,EAAEH;AACT,CAAC;AACD,MAAMw5B,aAAa,GAAG;EACpB,GAAGH,sBAAsB;EACzB,CAACE,eAAe,CAAC9mD,YAAY,GAAG8mD;AAClC,CAAC;;AAED;AACA;AACA;AACA,SAASE,4BAA4BA,CAAC9oE,IAAI,EAAE;EAAA,IAAA+oE,mBAAA;EAC1C,OAAO,EAAAA,mBAAA,GAAArmD,MAAM,CAAC+B,MAAM,CAACokD,aAAa,CAAC,CAAC/9D,IAAI,CAAC81B,QAAQ,IAAIA,QAAQ,CAAC5gC,IAAI,KAAKA,IAAI,CAAC,cAAA+oE,mBAAA,uBAArEA,mBAAA,CAAuEjnD,YAAY,KAAI,QAAQ;AACxG;AACA,SAASknD,eAAeA,CAACj5D,IAAI,EAAE;EAAA,IAAAk5D,oBAAA;EAC7B,QAAAA,oBAAA,GAAOvmD,MAAM,CAAC+B,MAAM,CAACokD,aAAa,CAAC,CAAC/9D,IAAI,CAAC81B,QAAQ,IAAIA,QAAQ,CAAC9e,YAAY,KAAK/R,IAAI,CAAC,cAAAk5D,oBAAA,uBAA7EA,oBAAA,CAA+EjpE,IAAI;AAC5F;AAEA,MAAMkpE,uBAAuB,GAAG,eAAet1E,CAAC,CAAC+L,MAAM,CAAC;EACtDwpE,SAAS,EAAE59D,eAAe;EAC1B69D,cAAc,EAAE59D,aAAa;EAC7B69D,8BAA8B,EAAE,eAAe92E,YAAY,CAAC+N,OAAO,CAAC,CAAC,CAAC;EACtEgpE,mBAAmB,EAAE,eAAe11E,CAAC,CAACiM,KAAK,CAACwJ,kBAAkB;AAChE,CAAC,CAAC;AACF,MAAMkgE,wBAAwB,GAAG,eAAe31E,CAAC,CAACiM,KAAK,EAAE,eAAejM,CAAC,CAAC+L,MAAM,CAAC;EAC/EuI,MAAM,EAAEmB,kBAAkB;EAC1BmgE,SAAS,EAAE,eAAe51E,CAAC,CAAC0N,OAAO,CAAC,CAAC;EACrCmoE,WAAW,EAAEP;AACf,CAAC,CAAC,CAAC;AACH,MAAMQ,uBAAuB,GAAG,CAAC;EAC/B1pE,IAAI,EAAE,QAAQ;EACd+P,IAAI,EAAE;AACR,CAAC,EAAE;EACD/P,IAAI,EAAE,iBAAiB;EACvB+P,IAAI,EAAE;AACR,CAAC,EAAE;EACD/P,IAAI,EAAE,gCAAgC;EACtC+P,IAAI,EAAE;AACR,CAAC,EAAE;EACD/P,IAAI,EAAE,0BAA0B;EAChC+P,IAAI,EAAE;AACR,CAAC,EAAE;EACD/P,IAAI,EAAE,wBAAwB;EAC9B+P,IAAI,EAAE;AACR,CAAC,EAAE;EACD/P,IAAI,EAAE,2BAA2B;EACjC+P,IAAI,EAAE;AACR,CAAC,EAAE;EACD/P,IAAI,EAAE,yBAAyB;EAC/B+P,IAAI,EAAE;AACR,CAAC,EAAE;EACD/P,IAAI,EAAE,KAAK;EACX+P,IAAI,EAAE;AACR,CAAC,CAAC;AAEF,MAAM45D,kBAAkB,CAAC;EAEvBjtE,WAAWA,CAAC6a,eAAe,EAAE;IAAA22B,eAAA,sBADf3sB,2BAA2B,CAACvhB,IAAI;IAuN9C;AACF;AACA;IAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAdEkuC,eAAA,gCAewB,eAAetY,wBAAwB,CAAC,MAAMkP,aAAa,IAAI;MACrF,MAAM8kC,qBAAqB,GAAG,MAAM/qC,cAAc,CAACiG,aAAa,CAAC;MACjE,OAAOmE,WAAW,CAACC,mBAAmB,CAAC;QACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;QACrCvY,MAAM,EAAE,UAAU;QAClB0Y,IAAI,EAAE,CAACkyD,qBAAqB,EAAE,IAAI;MACpC,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAdE17B,eAAA,iCAeyB,eAAetY,wBAAwB,CAAC,MAAMkP,aAAa,IAAI;MACtF,MAAM8kC,qBAAqB,GAAG,MAAM/qC,cAAc,CAACiG,aAAa,CAAC;MACjE,OAAOmE,WAAW,CAACC,mBAAmB,CAAC;QACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;QACrCvY,MAAM,EAAE,UAAU;QAClB0Y,IAAI,EAAE,CAACkyD,qBAAqB,EAAE,KAAK;MACrC,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAfE17B,eAAA,2BAgBmB,eAAetY,wBAAwB,CAAC,OAAOkP,aAAa,EAAE2kC,WAAW,KAAK;MAC/F,MAAMG,qBAAqB,GAAG,MAAM/qC,cAAc,CAACiG,aAAa,CAAC;MACjE,MAAM+kC,mBAAmB,GAAG,MAAMX,uBAAuB,CAAC38D,UAAU,CAACk9D,WAAW,CAAC;MACjF,IAAI,MAAM,IAAI,CAACK,OAAO,CAACF,qBAAqB,CAAC,EAAE;QAC7C,MAAM,IAAI9vE,KAAK,CAAC,4EAA4E,CAAC;MAC/F;MACA,IAAI,MAAM,IAAI,CAACgC,QAAQ,CAAC8tE,qBAAqB,CAAC,EAAE;QAC9C,MAAM,IAAI9vE,KAAK,CAAC,uIAAuI,CAAC;MAC1J;MACA,OAAO,MAAM,IAAI,CAACiwE,2BAA2B,CAACH,qBAAqB,EAAEC,mBAAmB,CAAC;IAC3F,CAAC,CAAC;IAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAfE37B,eAAA,4BAgBoB,eAAetY,wBAAwB,CAAC,OAAOkP,aAAa,EAAE2kC,WAAW,KAAK;MAChG,MAAMG,qBAAqB,GAAG,MAAM/qC,cAAc,CAACiG,aAAa,CAAC;MACjE,MAAM+kC,mBAAmB,GAAG,MAAMX,uBAAuB,CAAC38D,UAAU,CAACk9D,WAAW,CAAC;MACjF,IAAI,MAAM,IAAI,CAACK,OAAO,CAACF,qBAAqB,CAAC,EAAE;QAC7C,MAAM,IAAI9vE,KAAK,CAAC,6EAA6E,CAAC;MAChG;MACA,IAAI,EAAE,MAAM,IAAI,CAACgC,QAAQ,CAAC8tE,qBAAqB,CAAC,CAAC,EAAE;QACjD,MAAM,IAAI9vE,KAAK,CAAC,+FAA+F,CAAC;MAClH;MACA,OAAO,MAAM,IAAI,CAACiwE,2BAA2B,CAACH,qBAAqB,EAAEC,mBAAmB,CAAC;IAC3F,CAAC,CAAC;IAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAdE37B,eAAA,uBAee,eAAetY,wBAAwB,CAAC,MAAMkP,aAAa,IAAI;MAC5E,MAAM8kC,qBAAqB,GAAG,MAAM/qC,cAAc,CAACiG,aAAa,CAAC;MACjE,IAAI,MAAM,IAAI,CAACglC,OAAO,CAACF,qBAAqB,CAAC,EAAE;QAC7C,MAAM,IAAI9vE,KAAK,CAAC,oEAAoE,CAAC;MACvF;MACA,IAAI,EAAE,MAAM,IAAI,CAACgC,QAAQ,CAAC8tE,qBAAqB,CAAC,CAAC,EAAE;QACjD,MAAM,IAAI9vE,KAAK,CAAC,+FAA+F,CAAC;MAClH;MACA,OAAO,MAAM,IAAI,CAACiwE,2BAA2B,CAACH,qBAAqB,EAAE;QACnET,SAAS,EAAEt1E,SAAS,CAAC6H,IAAI,CAAC,CAAC,CAAC;QAC5B0tE,cAAc,EAAEv1E,SAAS,CAAC6H,IAAI,CAAC,CAAC,CAAC;QACjC4tE,mBAAmB,EAAE,EAAE;QACvBD,8BAA8B,EAAE;MAClC,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAfEn7B,eAAA,iCAgByB,eAAetY,wBAAwB,CAAC,OAAOkP,aAAa,EAAElW,MAAM,KAAK;MAChG,MAAMg7C,qBAAqB,GAAG,MAAM/qC,cAAc,CAACiG,aAAa,CAAC;MACjE,MAAMklC,cAAc,GAAG,MAAMnrC,cAAc,CAACjQ,MAAM,CAAC;MACnD,IAAI,MAAM,IAAI,CAACk7C,OAAO,CAACF,qBAAqB,CAAC,EAAE;QAC7C,MAAM,IAAI9vE,KAAK,CAAC,kEAAkE,CAAC;MACrF;MACA,IAAI,EAAE,MAAM,IAAI,CAACgC,QAAQ,CAAC8tE,qBAAqB,CAAC,CAAC,EAAE;QACjD,MAAM,IAAI9vE,KAAK,CAAC,+FAA+F,CAAC;MAClH;MACA,MAAM2vE,WAAW,GAAG,MAAM,IAAI,CAAClyD,eAAe,CAAC2R,IAAI,CAAC,yBAAyB,EAAE,CAAC0gD,qBAAqB,CAAC,CAAC;MACvG,IAAIH,WAAW,CAACQ,eAAe,CAAC7iE,QAAQ,CAACwnB,MAAM,CAAC,EAAE;QAChD,MAAM,IAAI90B,KAAK,CAAC,4BAA4B,CAAC;MAC/C;MACA,MAAMowE,UAAU,GAAG,CAAC,GAAGT,WAAW,CAACQ,eAAe,EAAED,cAAc,CAAC;MACnE,OAAO,MAAM,IAAI,CAACD,2BAA2B,CAACH,qBAAqB,EAAE;QACnET,SAAS,EAAEt1E,SAAS,CAAC6H,IAAI,CAAC+tE,WAAW,CAAC3zB,cAAc,CAAC;QACrDszB,cAAc,EAAEv1E,SAAS,CAAC6H,IAAI,CAAC+tE,WAAW,CAAC/S,YAAY,CAAC;QACxD4S,mBAAmB,EAAEY,UAAU;QAC/Bb,8BAA8B,EAAEI,WAAW,CAACJ,8BAA8B,CAACztE,QAAQ,CAAC;MACtF,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAfEsyC,eAAA,oCAgB4B,eAAetY,wBAAwB,CAAC,OAAOkP,aAAa,EAAElW,MAAM,KAAK;MACnG,MAAMg7C,qBAAqB,GAAG,MAAM/qC,cAAc,CAACiG,aAAa,CAAC;MACjE,MAAMklC,cAAc,GAAG,MAAMnrC,cAAc,CAACjQ,MAAM,CAAC;MACnD,IAAI,MAAM,IAAI,CAACk7C,OAAO,CAACF,qBAAqB,CAAC,EAAE;QAC7C,MAAM,IAAI9vE,KAAK,CAAC,kEAAkE,CAAC;MACrF;MACA,IAAI,EAAE,MAAM,IAAI,CAACgC,QAAQ,CAAC8tE,qBAAqB,CAAC,CAAC,EAAE;QACjD,MAAM,IAAI9vE,KAAK,CAAC,+FAA+F,CAAC;MAClH;MACA,MAAM2vE,WAAW,GAAG,MAAM,IAAI,CAAClyD,eAAe,CAAC2R,IAAI,CAAC,yBAAyB,EAAE,CAAC0gD,qBAAqB,CAAC,CAAC;MACvG,IAAI,CAACH,WAAW,CAACQ,eAAe,CAAC7iE,QAAQ,CAAC4iE,cAAc,CAAC,EAAE;QACzD,MAAM,IAAIlwE,KAAK,CAAC,kCAAkC,CAAC;MACrD;MACA,MAAMowE,UAAU,GAAGT,WAAW,CAACQ,eAAe,CAAC9kE,MAAM,CAACglE,cAAc,IAAIp2E,KAAK,CAACgxC,UAAU,CAAColC,cAAc,CAAC,KAAKp2E,KAAK,CAACgxC,UAAU,CAACilC,cAAc,CAAC,CAAC;MAC9I,OAAO,MAAM,IAAI,CAACD,2BAA2B,CAACH,qBAAqB,EAAE;QACnET,SAAS,EAAEt1E,SAAS,CAAC6H,IAAI,CAAC+tE,WAAW,CAAC3zB,cAAc,CAAC;QACrDszB,cAAc,EAAEv1E,SAAS,CAAC6H,IAAI,CAAC+tE,WAAW,CAAC/S,YAAY,CAAC;QACxD4S,mBAAmB,EAAEY,UAAU;QAC/Bb,8BAA8B,EAAEI,WAAW,CAACJ,8BAA8B,CAACztE,QAAQ,CAAC;MACtF,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAdEsyC,eAAA,8BAesB,eAAetY,wBAAwB,CAAC,MAAMw0C,kBAAkB,IAAI;MACxF,MAAMC,gBAAgB,GAAG,MAAMd,wBAAwB,CAACh9D,UAAU,CAAC69D,kBAAkB,CAAC;;MAEtF;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MAEI;MACA,IAAI,IAAI,CAACE,mBAAmB,CAACD,gBAAgB,CAAC,EAAE;QAC9C,MAAM,IAAIvwE,KAAK,CAAC,mCAAmC,CAAC;MACtD;MACA,MAAMywE,YAAY,GAAG,EAAE;MACvB,MAAMC,eAAe,GAAG,EAAE;MAC1B,MAAMC,qBAAqB,GAAG,EAAE;MAChC,MAAMC,gBAAgB,GAAG,EAAE;;MAE3B;MACA,MAAMC,SAAS,GAAG,MAAM,IAAI,CAACC,YAAY,CAAC,CAAC;MAC3C,MAAMC,cAAc,GAAGR,gBAAgB,CAACllE,MAAM,CAAC2uB,IAAI,IAAIA,IAAI,CAAC01C,SAAS,CAAC,CAAC/rE,GAAG,CAACq2B,IAAI,IAAIA,IAAI,CAAC5rB,MAAM,CAAC;MAC/FyiE,SAAS,CAACrsE,OAAO,CAACwwC,KAAK,IAAI;QACzB,IAAI,CAAC+7B,cAAc,CAACzjE,QAAQ,CAAC0nC,KAAK,CAAC,EAAE;UACnC07B,eAAe,CAAChrE,IAAI,CAAC,IAAI,CAAC+X,eAAe,CAAC6xB,aAAa,CAACxxB,SAAS,CAACC,kBAAkB,CAAC,UAAU,EAAE,CAACi3B,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC;QACnH;MACF,CAAC,CAAC;;MAEF;MACA,MAAMg8B,UAAU,GAAG,MAAM,IAAI,CAACC,aAAa,CAAC,CAAC;MAC7C,MAAMC,gBAAgB,GAAGX,gBAAgB,CAACllE,MAAM,CAAC2uB,IAAI,IAAI;QACvD,OAAO,CAACA,IAAI,CAAC01C,SAAS;MACxB,CAAC,CAAC,CAAC/rE,GAAG,CAACq2B,IAAI,IAAIA,IAAI,CAAC5rB,MAAM,CAAC;MAC3B,MAAM3I,OAAO,CAAC+M,GAAG,CAACw+D,UAAU,CAACrtE,GAAG,CAAC,MAAMq2B,IAAI,IAAI;QAC7C,IAAI,CAACk3C,gBAAgB,CAAC5jE,QAAQ,CAAC0sB,IAAI,CAAC5rB,MAAM,CAAC,EAAE;UAC3C,MAAM5M,IAAI,GAAG,MAAM,IAAI,CAAC2vE,4BAA4B,CAACn3C,IAAI,CAAC5rB,MAAM,EAAE;YAChEihE,SAAS,EAAEt1E,SAAS,CAAC6H,IAAI,CAAC,CAAC,CAAC;YAC5B0tE,cAAc,EAAEv1E,SAAS,CAAC6H,IAAI,CAAC,CAAC,CAAC;YACjC4tE,mBAAmB,EAAE,EAAE;YACvBD,8BAA8B,EAAE;UAClC,CAAC,CAAC;UACFqB,gBAAgB,CAAClrE,IAAI,CAAClE,IAAI,CAAC;QAC7B;MACF,CAAC,CAAC,CAAC;MACH,KAAK,MAAM4vE,MAAM,IAAIb,gBAAgB,EAAE;QACrC;QACA,IAAIa,MAAM,CAAC1B,SAAS,EAAE;UACpBe,YAAY,CAAC/qE,IAAI,CAAC,IAAI,CAAC+X,eAAe,CAAC6xB,aAAa,CAACxxB,SAAS,CAACC,kBAAkB,CAAC,UAAU,EAAE,CAACqzD,MAAM,CAAChjE,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC;QACvH,CAAC,MAAM;UACL;UACA,MAAM5M,IAAI,GAAG,MAAM,IAAI,CAAC2vE,4BAA4B,CAACC,MAAM,CAAChjE,MAAM,EAAEgjE,MAAM,CAACzB,WAAW,CAAC;UACvFgB,qBAAqB,CAACjrE,IAAI,CAAClE,IAAI,CAAC;QAClC;MACF;MACA,MAAMA,IAAI,GAAG,EAAE;MACfkvE,eAAe,CAAClsE,OAAO,CAACw1B,IAAI,IAAI;QAC9Bx4B,IAAI,CAACkE,IAAI,CAACs0B,IAAI,CAAC;MACjB,CAAC,CAAC;MACF42C,gBAAgB,CAACpsE,OAAO,CAACw1B,IAAI,IAAI;QAC/Bx4B,IAAI,CAACkE,IAAI,CAACs0B,IAAI,CAAC;MACjB,CAAC,CAAC;MACF22C,qBAAqB,CAACnsE,OAAO,CAACw1B,IAAI,IAAI;QACpCx4B,IAAI,CAACkE,IAAI,CAACs0B,IAAI,CAAC;MACjB,CAAC,CAAC;MACF,OAAOmV,WAAW,CAACC,mBAAmB,CAAC;QACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;QACrCvY,MAAM,EAAE,WAAW;QACnB0Y,IAAI,EAAE,CAACpc,IAAI;MACb,CAAC,CAAC;IACJ,CAAC,CAAC;IArgBA,IAAI,CAACic,eAAe,GAAGA,eAAe;EACxC;EACAwtB,UAAUA,CAAA,EAAG;IACX,OAAO,IAAI,CAACxtB,eAAe,CAAC7O,OAAO;EACrC;;EAEA;AACF;AACA;;EAEE4hE,mBAAmBA,CAAC78D,QAAQ,EAAE;IAC5B,MAAM09D,aAAa,GAAG,CAAC,CAAC;IACxB,MAAMC,OAAO,GAAG39D,QAAQ,CAAChQ,GAAG,CAACq2B,IAAI,IAAIA,IAAI,CAAC5rB,MAAM,CAAC;IACjD,KAAK,MAAMA,MAAM,IAAIkjE,OAAO,EAAE;MAC5B,IAAI,CAACD,aAAa,CAACjjE,MAAM,CAAC,EAAE;QAC1BijE,aAAa,CAACjjE,MAAM,CAAC,GAAG,IAAI;MAC9B,CAAC,MAAM;QACL,OAAO,IAAI;MACb;IACF;IACA,OAAO,KAAK;EACd;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEmjE,4BAA4BA,CAAC5B,WAAW,EAAE;IACxC,OAAO;MACLN,SAAS,EAAE,IAAIvgE,IAAI,CAAC2oB,QAAQ,CAACk4C,WAAW,CAAC3zB,cAAc,CAACl6C,QAAQ,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;MAC3EwtE,cAAc,EAAE,IAAIxgE,IAAI,CAAC2oB,QAAQ,CAACk4C,WAAW,CAAC/S,YAAY,CAAC96D,QAAQ,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;MAC9EytE,8BAA8B,EAAEx1E,SAAS,CAAC6H,IAAI,CAAC+tE,WAAW,CAACJ,8BAA8B,CAAC;MAC1FC,mBAAmB,EAAEG,WAAW,CAACQ;IACnC,CAAC;EACH;EACA,MAAMF,2BAA2BA,CAACjlC,aAAa,EAAE2kC,WAAW,EAAE;IAC5D,MAAM;MACJhrE,OAAO;MACP8kB;IACF,CAAC,GAAG,MAAM,IAAI,CAAC+nD,eAAe,CAACxmC,aAAa,EAAE2kC,WAAW,CAAC;IAC1D,MAAM,CAAC8B,OAAO,CAAC,GAAG,MAAM,IAAI,CAACh0D,eAAe,CAAC2R,IAAI,CAAC,+BAA+B,EAAE,CAACzqB,OAAO,EAAE8kB,SAAS,CAAC,CAAC;IACxG,IAAI,CAACgoD,OAAO,EAAE;MACZ,MAAM,IAAIzxE,KAAK,qBAAqB,CAAC;IACvC;IACA,OAAOmvC,WAAW,CAACC,mBAAmB,CAAC;MACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;MACrCvY,MAAM,EAAE,yBAAyB;MACjC0Y,IAAI,EAAE,CAACjZ,OAAO,EAAE8kB,SAAS;IAC3B,CAAC,CAAC;EACJ;EACA,MAAM0nD,4BAA4BA,CAACnmC,aAAa,EAAE2kC,WAAW,EAAE;IAC7D,MAAM;MACJhrE,OAAO;MACP8kB;IACF,CAAC,GAAG,MAAM,IAAI,CAAC+nD,eAAe,CAACxmC,aAAa,EAAE2kC,WAAW,CAAC;IAC1D,MAAM+B,aAAa,GAAG,MAAM,IAAI,CAACj0D,eAAe,CAAC2R,IAAI,CAAC,+BAA+B,EAAE,CAACzqB,OAAO,EAAE8kB,SAAS,CAAC,CAAC;IAC5G,IAAI,CAACioD,aAAa,EAAE;MAClB,MAAM,IAAI1xE,KAAK,qBAAqB,CAAC;IACvC;IACA,OAAO,IAAI,CAACyd,eAAe,CAAC6xB,aAAa,CAACxxB,SAAS,CAACC,kBAAkB,CAAC,yBAAyB,EAAE,CAACpZ,OAAO,EAAE8kB,SAAS,CAAC,CAAC;EACzH;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAM+nD,eAAeA,CAACxmC,aAAa,EAAE2kC,WAAW,EAAE;IAChD;IACA,MAAMhrE,OAAO,GAAG;MACdyJ,MAAM,EAAE48B,aAAa;MACrBmlC,eAAe,EAAER,WAAW,CAACH,mBAAmB;MAChDD,8BAA8B,EAAEt1E,KAAK,CAAC03D,UAAU,CAACge,WAAW,CAACJ,8BAA8B,CAAC;MAC5FoC,wBAAwB,EAAEhC,WAAW,CAACN,SAAS;MAC/CuC,sBAAsB,EAAEjC,WAAW,CAACL,cAAc;MAClDuC,yBAAyB,EAAE,CAAC;MAC5B;MACAC,uBAAuB,EAAE/3E,SAAS,CAAC6H,IAAI,CAAC0P,IAAI,CAACC,KAAK,CAAC,IAAIzC,IAAI,CAACA,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,CAAC,CAACyC,OAAO,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;MAC3HwD,GAAG,EAAEV,mBAAmB,CAACrR,SAAS;IACpC,CAAC;;IAED;IACA,MAAM+C,OAAO,GAAG,MAAM,IAAI,CAACyX,eAAe,CAAC28B,UAAU,CAAC,CAAC;IACvD,MAAM23B,eAAe,GAAG,IAAI,CAACt0D,eAAe,CAAC0vB,SAAS,CAAC,CAAC;IACxD9yC,SAAS,CAAC03E,eAAe,EAAE,qBAAqB,CAAC;IACjD,MAAMtoD,SAAS,GAAG,MAAM,IAAI,CAAChM,eAAe,CAACkkC,aAAa,CAACowB,eAAe,EAAE;MAC1E7rE,IAAI,EAAE,SAAS;MACfpG,OAAO,EAAE,GAAG;MACZkG,OAAO;MACPqmC,iBAAiB,EAAE,IAAI,CAACpB,UAAU,CAAC;IACrC,CAAC,EAAE;MACD2kC;IACF,CAAC,EAAEjrE,OAAO,CAAC;IACX,OAAO;MACLA,OAAO;MACP8kB;IACF,CAAC;EACH;;EAEA;AACF;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMumD,OAAOA,CAAChlC,aAAa,EAAE;IAC3B,MAAM8kC,qBAAqB,GAAG,MAAM/qC,cAAc,CAACiG,aAAa,CAAC;IACjE,OAAO,MAAM,IAAI,CAACvtB,eAAe,CAAC2R,IAAI,CAAC,SAAS,EAAE,CAAC0gD,qBAAqB,CAAC,CAAC;EAC5E;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAM9tE,QAAQA,CAACgpC,aAAa,EAAE;IAC5B,MAAM8kC,qBAAqB,GAAG,MAAM/qC,cAAc,CAACiG,aAAa,CAAC;IACjE,OAAO,MAAM,IAAI,CAACvtB,eAAe,CAAC2R,IAAI,CAAC,gBAAgB,EAAE,CAAC0gD,qBAAqB,CAAC,CAAC;EACnF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMgB,YAAYA,CAAA,EAAG;IACnB,OAAO,MAAM,IAAI,CAACrzD,eAAe,CAAC2R,IAAI,CAAC,cAAc,EAAE,EAAE,CAAC;EAC5D;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAM6hD,aAAaA,CAAA,EAAG;IACpB,MAAMe,sBAAsB,GAAG,MAAM,IAAI,CAACv0D,eAAe,CAAC2R,IAAI,CAAC,qBAAqB,EAAE,EAAE,CAAC;IACzF,OAAO,MAAM3pB,OAAO,CAAC+M,GAAG,CAACw/D,sBAAsB,CAACruE,GAAG,CAAC,MAAMsuE,qBAAqB,IAAI;MACjF,MAAM7jE,MAAM,GAAG6jE,qBAAqB,CAAC7jE,MAAM;MAC3C,MAAMuhE,WAAW,GAAG,IAAI,CAAC4B,4BAA4B,CAACU,qBAAqB,CAAC;MAC5E,OAAO;QACL7jE,MAAM;QACNuhE;MACF,CAAC;IACH,CAAC,CAAC,CAAC;EACL;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMuC,sBAAsBA,CAAA,EAAG;IAC7B,MAAMrB,SAAS,GAAG,MAAM,IAAI,CAACC,YAAY,CAAC,CAAC;IAC3C,MAAMqB,iBAAiB,GAAGtB,SAAS,CAACltE,GAAG,CAACqxC,KAAK,IAAI;MAC/C,OAAO;QACLg7B,OAAO,EAAE,IAAI;QACb5hE,MAAM,EAAE4mC,KAAK;QACb26B,WAAW,EAAE;UACXN,SAAS,EAAE,IAAIvgE,IAAI,CAAC,CAAC,CAAC;UACtBwgE,cAAc,EAAE,IAAIxgE,IAAI,CAAC,CAAC,CAAC;UAC3BygE,8BAA8B,EAAEx1E,SAAS,CAAC6H,IAAI,CAAC,CAAC,CAAC;UACjD4tE,mBAAmB,EAAE;QACvB;MACF,CAAC;IACH,CAAC,CAAC;IACF,MAAMwB,UAAU,GAAG,MAAM,IAAI,CAACC,aAAa,CAAC,CAAC;IAC7C,OAAO,CAAC,GAAGkB,iBAAiB,EAAE,GAAGnB,UAAU,CAAC;EAC9C;AAmTF;;AAEA;AACA,MAAMoB,OAAO,CAAC;EAEZxvE,WAAWA,CAAC6a,eAAe,EAAE;IAAA22B,eAAA,sBADf1sB,eAAe,CAACxhB,IAAI;IAmGlC;AACF;AACA;IAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAdEkuC,eAAA,gCAewB,eAAetY,wBAAwB,CAAC,MAAMkP,aAAa,IAAI;MACrF,OAAO8hB,aAAa,CAAC,IAAI,CAACulB,kBAAkB,EAAE5qD,2BAA2B,CAAC,CAAC6qD,qBAAqB,CAACz2C,OAAO,CAACmP,aAAa,CAAC;IACzH,CAAC,CAAC;IAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAdEoJ,eAAA,iCAeyB,eAAetY,wBAAwB,CAAC,MAAMkP,aAAa,IAAI;MACtF,OAAO8hB,aAAa,CAAC,IAAI,CAACulB,kBAAkB,EAAE5qD,2BAA2B,CAAC,CAAC8qD,sBAAsB,CAAC12C,OAAO,CAACmP,aAAa,CAAC;IAC1H,CAAC,CAAC;IAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAfEoJ,eAAA,2BAgBmB,eAAetY,wBAAwB,CAAC,OAAOkP,aAAa,EAAE2kC,WAAW,KAAK;MAC/F,OAAO7iB,aAAa,CAAC,IAAI,CAACulB,kBAAkB,EAAE5qD,2BAA2B,CAAC,CAAC+qD,gBAAgB,CAAC32C,OAAO,CAACmP,aAAa,EAAE2kC,WAAW,CAAC;IACjI,CAAC,CAAC;IAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAfEv7B,eAAA,4BAgBoB,eAAetY,wBAAwB,CAAC,OAAOkP,aAAa,EAAE2kC,WAAW,KAAK;MAChG,OAAO7iB,aAAa,CAAC,IAAI,CAACulB,kBAAkB,EAAE5qD,2BAA2B,CAAC,CAACgrD,iBAAiB,CAAC52C,OAAO,CAACmP,aAAa,EAAE2kC,WAAW,CAAC;IAClI,CAAC,CAAC;IAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAdEv7B,eAAA,uBAee,eAAetY,wBAAwB,CAAC,MAAMkP,aAAa,IAAI;MAC5E,OAAO8hB,aAAa,CAAC,IAAI,CAACulB,kBAAkB,EAAE5qD,2BAA2B,CAAC,CAACirD,YAAY,CAAC72C,OAAO,CAACmP,aAAa,CAAC;IAChH,CAAC,CAAC;IAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAfEoJ,eAAA,iCAgByB,eAAetY,wBAAwB,CAAC,OAAOkP,aAAa,EAAElW,MAAM,KAAK;MAChG,OAAOg4B,aAAa,CAAC,IAAI,CAACulB,kBAAkB,EAAE5qD,2BAA2B,CAAC,CAACkrD,sBAAsB,CAAC92C,OAAO,CAACmP,aAAa,EAAElW,MAAM,CAAC;IAClI,CAAC,CAAC;IAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAfEsf,eAAA,oCAgB4B,eAAetY,wBAAwB,CAAC,OAAOkP,aAAa,EAAElW,MAAM,KAAK;MACnG,OAAOg4B,aAAa,CAAC,IAAI,CAACulB,kBAAkB,EAAE5qD,2BAA2B,CAAC,CAACmrD,yBAAyB,CAAC/2C,OAAO,CAACmP,aAAa,EAAElW,MAAM,CAAC;IACrI,CAAC,CAAC;IAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAdEsf,eAAA,8BAesB,eAAetY,wBAAwB,CAAC,MAAMw0C,kBAAkB,IAAI;MACxF,OAAOxjB,aAAa,CAAC,IAAI,CAACulB,kBAAkB,EAAE5qD,2BAA2B,CAAC,CAACorD,mBAAmB,CAACh3C,OAAO,CAACy0C,kBAAkB,CAAC;IAC5H,CAAC,CAAC;IA/PA,IAAI,CAAC7yD,eAAe,GAAGA,eAAe;IACtC,IAAI,CAAC40D,kBAAkB,GAAG,IAAI,CAACS,wBAAwB,CAAC,CAAC;EAC3D;EACAA,wBAAwBA,CAAA,EAAG;IACzB,IAAIjnD,qBAAqB,CAAC,IAAI,CAACpO,eAAe,EAAE,oBAAoB,CAAC,EAAE;MACrE,OAAO,IAAIoyD,kBAAkB,CAAC,IAAI,CAACpyD,eAAe,CAAC;IACrD;IACA,OAAOxa,SAAS;EAClB;EACAgoC,UAAUA,CAAA,EAAG;IACX,OAAO,IAAI,CAACxtB,eAAe,CAAC7O,OAAO;EACrC;;EAEA;AACF;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMohE,OAAOA,CAAChlC,aAAa,EAAE;IAC3B,OAAO8hB,aAAa,CAAC,IAAI,CAACulB,kBAAkB,EAAE5qD,2BAA2B,CAAC,CAACuoD,OAAO,CAAChlC,aAAa,CAAC;EACnG;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMhpC,QAAQA,CAACgpC,aAAa,EAAE;IAC5B,OAAO8hB,aAAa,CAAC,IAAI,CAACulB,kBAAkB,EAAE5qD,2BAA2B,CAAC,CAACzlB,QAAQ,CAACgpC,aAAa,CAAC;EACpG;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAM8lC,YAAYA,CAAA,EAAG;IACnB,OAAOhkB,aAAa,CAAC,IAAI,CAACulB,kBAAkB,EAAE5qD,2BAA2B,CAAC,CAACqpD,YAAY,CAAC,CAAC;EAC3F;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMG,aAAaA,CAAA,EAAG;IACpB,OAAOnkB,aAAa,CAAC,IAAI,CAACulB,kBAAkB,EAAE5qD,2BAA2B,CAAC,CAACwpD,aAAa,CAAC,CAAC;EAC5F;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMiB,sBAAsBA,CAAA,EAAG;IAC7B,OAAOplB,aAAa,CAAC,IAAI,CAACulB,kBAAkB,EAAE5qD,2BAA2B,CAAC,CAACyqD,sBAAsB,CAAC,CAAC;EACrG;AAiKF;;AAEA;AACA,MAAMa,cAAc,CAAC;EAGnB;;EAEAnwE,WAAWA,CAAC6a,eAAe,EAAE;IAAA22B,eAAA,sBAJf5sB,uBAAuB,CAACthB,IAAI;IAiF1C;AACF;AACA;IAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAhBEkuC,eAAA,wBAiBgB,eAAetY,wBAAwB,CAAC,OAAOk3C,YAAY,EAAEC,SAAS,KAAK;MACzF,IAAI,MAAM,IAAI,CAACC,iBAAiB,CAACF,YAAY,EAAEC,SAAS,CAAC,EAAE;QACzD,MAAM,IAAIjzE,KAAK,wCAAAN,MAAA,CAAwCszE,YAAY,CAAE,CAAC;MACxE;MACA,IAAIxxE,IAAI,GAAGvH,KAAK,CAAC0a,WAAW,CAAC,EAAE,CAAC;MAChC,IAAIs+D,SAAS,EAAE;QACbzxE,IAAI,GAAGyxE,SAAS;MAClB;MACA,OAAO9jC,WAAW,CAACC,mBAAmB,CAAC;QACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;QACrCvY,MAAM,EAAE,eAAe;QACvB0Y,IAAI,EAAE,CAACo1D,YAAY,EAAExxE,IAAI,CAAC;QAC1B2J,KAAK,EAAEwlC,OAAO,IAAI;UAChB,MAAM6d,KAAK,GAAG,IAAI,CAAC/wC,eAAe,CAAC68B,SAAS,CAAC,gBAAgB,EAAE3J,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAE4J,IAAI,CAAC;UAC7E,OAAO;YACL3rC,OAAO,EAAE4/C,KAAK,CAAC,CAAC,CAAC,CAAC5wC,IAAI,CAACu4C,OAAO;YAC9BxlB;UACF,CAAC;QACH;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;IArHA,IAAI,CAAClzB,eAAe,GAAGA,eAAe;IACtC,IAAI,CAACy0B,MAAM,GAAG,IAAI0oB,cAAc,CAAC,IAAI,CAACn9C,eAAe,CAAC;EACxD;EACAwtB,UAAUA,CAAA,EAAG;IACX,OAAO,IAAI,CAACxtB,eAAe,CAAC7O,OAAO;EACrC;;EAEA;AACF;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMukE,qBAAqBA,CAACn+B,KAAK,EAAEi+B,SAAS,EAAE;IAC5C,IAAIzxE,IAAI,GAAGvH,KAAK,CAAC0a,WAAW,CAAC,EAAE,CAAC;IAChC,IAAIs+D,SAAS,EAAE;MACbzxE,IAAI,GAAGyxE,SAAS;IAClB;IACA,OAAO,IAAI,CAACx1D,eAAe,CAAC2R,IAAI,CAAC,YAAY,EAAE,CAAC4lB,KAAK,EAAExzC,IAAI,CAAC,CAAC;EAC/D;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAM4xE,qBAAqBA,CAAChlE,MAAM,EAAE;IAClC,OAAO,IAAI,CAACqP,eAAe,CAAC2R,IAAI,CAAC,qBAAqB,EAAE,CAAChhB,MAAM,CAAC,CAAC;EACnE;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMilE,cAAcA,CAAA,EAAG;IACrB,OAAO,MAAM,IAAI,CAAC51D,eAAe,CAAC2R,IAAI,CAAC,gBAAgB,EAAE,EAAE,CAAC;EAC9D;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACE,MAAM8jD,iBAAiBA,CAACl+B,KAAK,EAAEi+B,SAAS,EAAE;IACxC,MAAMK,IAAI,GAAG,MAAM,IAAI,CAACH,qBAAqB,CAACn+B,KAAK,EAAEi+B,SAAS,CAAC;IAC/D,OAAOlzC,kBAAkB,CAACuzC,IAAI,EAAE,IAAI,CAAC71D,eAAe,CAAC2vB,WAAW,CAAC,CAAC,CAAC;EACrE;AA4CF;;AAEA;AACA;AACA;AACA,MAAMmmC,WAAW,CAAC;EAEhB3wE,WAAWA,CAAC6a,eAAe,EAAE;IAAA22B,eAAA,sBADfvsB,uBAAuB,CAAC3hB,IAAI;IAY1C;AACF;AACA;IAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAnCEkuC,eAAA,eAoCO,eAAetY,wBAAwB,CAAC,OAAO6gB,YAAY,EAAE62B,UAAU,EAAEC,QAAQ,KAAK;MAC3F,OAAOtkC,WAAW,CAACC,mBAAmB,CAAC;QACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;QACrCvY,MAAM,EAAE,gBAAgB;QACxB0Y,IAAI,EAAE,CAAC++B,YAAY,EAAE62B,UAAU,EAAEC,QAAQ,CAAC;QAC1CtoE,KAAK,EAAEwlC,OAAO,IAAI;UAChB,MAAMuB,MAAM,GAAG,IAAI,CAACz0B,eAAe,CAAC68B,SAAS,CAAC,eAAe,EAAE3J,OAAO,CAAC4J,IAAI,CAAC;UAC5E,MAAMm5B,WAAW,GAAGxhC,MAAM,CAACvuC,GAAG,CAAC6H,CAAC,IAAI;YAClC,OAAO;cACLgsC,SAAS,EAAEhsC,CAAC,CAACoS,IAAI,CAAC45B,SAAS;cAC3B5hC,OAAO,EAAEpK,CAAC,CAACoS,IAAI,CAAChI,OAAO,CAACvB,QAAQ,CAAC,CAAC;cAClC++B,MAAM,EAAE5nC,CAAC,CAACoS,IAAI,CAACw1B,MAAM,CAACtxC,QAAQ,CAAC;YACjC,CAAC;UACH,CAAC,CAAC;UACF,OAAO;YACL6xE,mBAAmB,EAAEF,QAAQ,CAAC1zE,MAAM,GAAG2zE,WAAW,CAAC3zE,MAAM;YACzD6zE,eAAe,EAAEF,WAAW,CAAC3zE,MAAM;YACnC2zE;UACF,CAAC;QACH;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;IAvEA,IAAI,CAACj2D,eAAe,GAAGA,eAAe;EACxC;;EAEA;AACF;AACA;EACEwtB,UAAUA,CAAA,EAAG;IACX,OAAO,IAAI,CAACxtB,eAAe,CAAC7O,OAAO;EACrC;AAgEF;;AAEA;AACA;AACA;AACA,MAAMilE,SAAS,CAAC;EAEdjxE,WAAWA,CAAC6a,eAAe,EAAE;IAAA22B,eAAA,sBADfzsB,qBAAqB,CAACzhB,IAAI;IAYxC;AACF;AACA;IAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAjCEkuC,eAAA,eAkCO,eAAetY,wBAAwB,CAAC,OAAO6gB,YAAY,EAAE62B,UAAU,EAAEC,QAAQ,KAAK;MAC3F,OAAOtkC,WAAW,CAACC,mBAAmB,CAAC;QACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;QACrCvY,MAAM,EAAE,cAAc;QACtB0Y,IAAI,EAAE,CAAC++B,YAAY,EAAE62B,UAAU,EAAEC,QAAQ,CAAC;QAC1CtoE,KAAK,EAAEwlC,OAAO,IAAI;UAChB,MAAMuB,MAAM,GAAG,IAAI,CAACz0B,eAAe,CAAC68B,SAAS,CAAC,eAAe,EAAE3J,OAAO,CAAC4J,IAAI,CAAC;UAC5E,MAAMm5B,WAAW,GAAGxhC,MAAM,CAACvuC,GAAG,CAAC6H,CAAC,IAAI;YAClC,OAAO;cACLgsC,SAAS,EAAEhsC,CAAC,CAACoS,IAAI,CAAC45B,SAAS;cAC3BpE,MAAM,EAAE5nC,CAAC,CAACoS,IAAI,CAACw1B,MAAM,CAACtxC,QAAQ,CAAC;YACjC,CAAC;UACH,CAAC,CAAC;UACF,OAAO;YACL6xE,mBAAmB,EAAEF,QAAQ,CAAC1zE,MAAM,GAAG2zE,WAAW,CAAC3zE,MAAM;YACzD6zE,eAAe,EAAEF,WAAW,CAAC3zE,MAAM;YACnC2zE;UACF,CAAC;QACH;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;IApEA,IAAI,CAACj2D,eAAe,GAAGA,eAAe;EACxC;;EAEA;AACF;AACA;EACEwtB,UAAUA,CAAA,EAAG;IACX,OAAO,IAAI,CAACxtB,eAAe,CAAC7O,OAAO;EACrC;AA6DF;;AAEA;AACA;AACA;AACA,MAAMklE,UAAU,CAAC;EAEflxE,WAAWA,CAAC6a,eAAe,EAAE;IAAA22B,eAAA,sBADfxsB,sBAAsB,CAAC1hB,IAAI;IAYzC;AACF;AACA;IAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAjCEkuC,eAAA,eAkCO,eAAetY,wBAAwB,CAAC,OAAO6gB,YAAY,EAAE62B,UAAU,EAAEC,QAAQ,KAAK;MAC3F,OAAOtkC,WAAW,CAACC,mBAAmB,CAAC;QACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;QACrCvY,MAAM,EAAE,eAAe;QACvB0Y,IAAI,EAAE,CAAC++B,YAAY,EAAE62B,UAAU,EAAEC,QAAQ,CAAC;QAC1CtoE,KAAK,EAAEwlC,OAAO,IAAI;UAChB,MAAMuB,MAAM,GAAG,IAAI,CAACz0B,eAAe,CAAC68B,SAAS,CAAC,eAAe,EAAE3J,OAAO,CAAC4J,IAAI,CAAC;UAC5E,MAAMm5B,WAAW,GAAGxhC,MAAM,CAACvuC,GAAG,CAAC6H,CAAC,IAAI;YAClC,OAAO;cACLgsC,SAAS,EAAEhsC,CAAC,CAACoS,IAAI,CAAC45B,SAAS;cAC3B5hC,OAAO,EAAEpK,CAAC,CAACoS,IAAI,CAAChI,OAAO,CAACvB,QAAQ,CAAC;YACnC,CAAC;UACH,CAAC,CAAC;UACF,OAAO;YACLs/D,mBAAmB,EAAEF,QAAQ,CAAC1zE,MAAM,GAAG2zE,WAAW,CAAC3zE,MAAM;YACzD6zE,eAAe,EAAEF,WAAW,CAAC3zE,MAAM;YACnC2zE;UACF,CAAC;QACH;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;IApEA,IAAI,CAACj2D,eAAe,GAAGA,eAAe;EACxC;;EAEA;AACF;AACA;EACEwtB,UAAUA,CAAA,EAAG;IACX,OAAO,IAAI,CAACxtB,eAAe,CAAC7O,OAAO;EACrC;AA6DF;AAEA,MAAMmlE,gBAAgB,CAAC;EAErBnxE,WAAWA,CAAC6a,eAAe,EAAE;IAAA22B,eAAA,sBADfhtB,wBAAwB,CAAClhB,IAAI;IA0C3C;AACF;AACA;IAEE;AACF;AACA;IAFEkuC,eAAA,cAGM,eAAetY,wBAAwB,CAAC,MAAMk4C,SAAS,IAAI;MAC/D,OAAO7kC,WAAW,CAACC,mBAAmB,CAAC;QACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;QACrCvY,MAAM,EAAE,cAAc;QACtB0Y,IAAI,EAAE,CAACo2D,SAAS,CAACjjD,SAAS,CAAC;QAC3B5lB,KAAK,EAAE,MAAMwlC,OAAO,IAAI;UACtB,MAAMuB,MAAM,GAAG,IAAI,CAACz0B,eAAe,CAAC68B,SAAS,CAAC,gBAAgB,EAAE3J,OAAO,CAAC4J,IAAI,CAAC;UAC7E,IAAIrI,MAAM,CAACnyC,MAAM,GAAG,CAAC,EAAE;YACrB,MAAM,IAAIC,KAAK,CAAC,+BAA+B,CAAC;UAClD;UACA,MAAMomE,YAAY,GAAG4N,SAAS,CAAC5N,YAAY,GAAG5tD,SAAS,CAACrN,KAAK,CAAC6oE,SAAS,CAAC5N,YAAY,CAAC,GAAG,CAAC,MAAMtrC,gCAAgC,CAACk5C,SAAS,CAACjjD,SAAS,CAACld,QAAQ,CAACwzD,cAAc,EAAE,IAAI,CAAC5pD,eAAe,CAAC2vB,WAAW,CAAC,CAAC,EAAE,IAAI,CAAC3vB,eAAe,CAACmb,OAAO,CAAC,EAAElc,GAAG;UACnP,MAAMu3D,QAAQ,GAAG,IAAI,CAACC,eAAe,CAAC9N,YAAY,EAAE4N,SAAS,CAACjjD,SAAS,CAAC;UACxE,MAAMuvB,UAAU,GAAG3mB,QAAQ,CAAC,CAACnhB,SAAS,CAACrN,KAAK,CAAC,IAAI,CAACsS,eAAe,CAACf,GAAG,CAAC,EAAEu3D,QAAQ,CAAC,CAAC;UAClF,IAAI,CAACx2D,eAAe,CAAC4iC,SAAS,CAACC,UAAU,CAAC;UAC1C,OAAO3P,OAAO;QAChB;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF;AACF;AACA;IAFEyD,eAAA,sBAGc,eAAetY,wBAAwB,CAAC,MAAMk4C,SAAS,IAAI;MACvE,IAAI5N,YAAY,GAAG4N,SAAS,CAAC5N,YAAY;MACzC,IAAI,CAACA,YAAY,EAAE;QACjB,MAAMvyD,QAAQ,GAAG,MAAMinB,gCAAgC,CAACk5C,SAAS,CAACG,gBAAgB,EAAE,IAAI,CAAC12D,eAAe,CAAC2vB,WAAW,CAAC,CAAC,EAAE,IAAI,CAAC3vB,eAAe,CAACmb,OAAO,EAAE,IAAI,CAACnb,eAAe,CAAC9S,OAAO,CAAC;QACnLy7D,YAAY,GAAGvyD,QAAQ,CAAC6I,GAAG;MAC7B;MACAriB,SAAS,CAAC+rE,YAAY,EAAE,uBAAuB,CAAC;MAChD,IAAIgO,oBAAoB,GAAG,EAAE;MAC7B,IAAIJ,SAAS,CAAC/M,iBAAiB,EAAE;QAC/B,IAAI,OAAO+M,SAAS,CAAC/M,iBAAiB,KAAK,QAAQ,EAAE;UACnDmN,oBAAoB,GAAGJ,SAAS,CAAC/M,iBAAiB;QACpD,CAAC,MAAM;UACL,MAAMpyB,cAAc,GAAG,MAAMv+B,oBAAoB,CAAC7D,UAAU,CAACuhE,SAAS,CAAC/M,iBAAiB,CAAC;UACzFmN,oBAAoB,GAAG,MAAM,IAAI,CAAC32D,eAAe,CAACmb,OAAO,CAACkc,MAAM,CAACD,cAAc,CAAC;QAClF;MACF;MACA,MAAMyxB,kBAAkB,GAAGH,0BAA0B,CAAC3tD,SAAS,CAACrN,KAAK,CAACi7D,YAAY,CAAC,CAAC;MACpF,MAAMr1C,SAAS,GAAG;QAChBld,QAAQ,EAAE;UACR3N,IAAI,EAAE8tE,SAAS,CAACt5D,aAAa;UAC7B0sD,WAAW,EAAEgN,oBAAoB;UACjC/M,cAAc,EAAE2M,SAAS,CAACG;QAC5B,CAAC;QACDnrD,SAAS,EAAEs9C;MACb,CAAC;MACD,OAAO,IAAI,CAACzpC,GAAG,CAAChB,OAAO,CAAC;QACtB9K,SAAS;QACTq1C;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF;AACF;AACA;IAFEhyB,eAAA,uBAGe,eAAetY,wBAAwB,CAAC,MAAMk4C,SAAS,IAAI;MACxE,MAAMl0E,OAAO,GAAGk0E,SAAS,CAACl0E,OAAO,IAAI,QAAQ;MAC7C,MAAM;QACJu0E,wBAAwB;QACxBpN;MACF,CAAC,GAAG,MAAM,IAAI,CAACqN,eAAe,CAACN,SAAS,CAACt5D,aAAa,EAAEs5D,SAAS,CAACp5D,gBAAgB,IAAIgsB,iBAAiB,EAAE9mC,OAAO,CAAC;MACjH,OAAO,IAAI,CAACy0E,WAAW,CAAC14C,OAAO,CAAC;QAC9BnhB,aAAa,EAAEs5D,SAAS,CAACt5D,aAAa;QACtCy5D,gBAAgB,EAAEE,wBAAwB;QAC1CpN,iBAAiB,EAAE+M,SAAS,CAACQ,yBAAyB,IAAIvN;MAC5D,CAAC,CAAC;IACJ,CAAC,CAAC;IAAA7yB,eAAA,kBACQ,eAAetY,wBAAwB,CAAC,MAAMk4C,SAAS,IAAI;MACnE,OAAO7kC,WAAW,CAACC,mBAAmB,CAAC;QACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;QACrCvY,MAAM,EAAE,kBAAkB;QAC1B0Y,IAAI,EAAE,CAACo2D,SAAS,CAACjjD,SAAS,CAAC;QAC3B5lB,KAAK,EAAE,MAAMwlC,OAAO,IAAI;UACtB,MAAMuB,MAAM,GAAG,IAAI,CAACz0B,eAAe,CAAC68B,SAAS,CAAC,mBAAmB,EAAE3J,OAAO,CAAC4J,IAAI,CAAC;UAChF,IAAIrI,MAAM,CAACnyC,MAAM,GAAG,CAAC,EAAE;YACrB,MAAM,IAAIC,KAAK,CAAC,kCAAkC,CAAC;UACrD;UACA,MAAMomE,YAAY,GAAG4N,SAAS,CAAC5N,YAAY,GAAG5tD,SAAS,CAACrN,KAAK,CAAC6oE,SAAS,CAAC5N,YAAY,CAAC,GAAG,CAAC,MAAMtrC,gCAAgC,CAACk5C,SAAS,CAACjjD,SAAS,CAACld,QAAQ,CAACwzD,cAAc,EAAE,IAAI,CAAC5pD,eAAe,CAAC2vB,WAAW,CAAC,CAAC,EAAE,IAAI,CAAC3vB,eAAe,CAACmb,OAAO,CAAC,EAAElc,GAAG;UACnP,MAAMkN,WAAW,GAAG,IAAI,CAAC6qD,kBAAkB,CAACj8D,SAAS,CAACrN,KAAK,CAAC,IAAI,CAACsS,eAAe,CAACf,GAAG,CAAC,EAAE0pD,YAAY,CAAC;UACpG,MAAM6N,QAAQ,GAAG,IAAI,CAACC,eAAe,CAAC9N,YAAY,EAAE4N,SAAS,CAACjjD,SAAS,CAAC;UACxE,MAAMuvB,UAAU,GAAG3mB,QAAQ,CAAC,CAAC/P,WAAW,EAAEqqD,QAAQ,CAAC,CAAC;UACpD,IAAI,CAACx2D,eAAe,CAAC4iC,SAAS,CAACC,UAAU,CAAC;UAC1C,OAAO3P,OAAO;QAChB;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;IAAAyD,eAAA,0BACgB,eAAetY,wBAAwB,CAAC,MAAMk4C,SAAS,IAAI;MAC3E,IAAI5N,YAAY,GAAG4N,SAAS,CAAC5N,YAAY;MACzC,IAAI,CAACA,YAAY,EAAE;QACjB,MAAMvyD,QAAQ,GAAG,MAAMinB,gCAAgC,CAACk5C,SAAS,CAACG,gBAAgB,EAAE,IAAI,CAAC12D,eAAe,CAAC2vB,WAAW,CAAC,CAAC,EAAE,IAAI,CAAC3vB,eAAe,CAACmb,OAAO,EAAE,IAAI,CAACnb,eAAe,CAAC9S,OAAO,CAAC;QACnLy7D,YAAY,GAAGvyD,QAAQ,CAAC6I,GAAG;MAC7B;MACAriB,SAAS,CAAC+rE,YAAY,EAAE,uBAAuB,CAAC;MAChD,IAAIgO,oBAAoB,GAAG,EAAE;MAC7B,IAAIJ,SAAS,CAAC/M,iBAAiB,EAAE;QAC/B,IAAI,OAAO+M,SAAS,CAAC/M,iBAAiB,KAAK,QAAQ,EAAE;UACnDmN,oBAAoB,GAAGJ,SAAS,CAAC/M,iBAAiB;QACpD,CAAC,MAAM;UACL,MAAMpyB,cAAc,GAAG,MAAMv+B,oBAAoB,CAAC7D,UAAU,CAACuhE,SAAS,CAAC/M,iBAAiB,CAAC;UACzFmN,oBAAoB,GAAG,MAAM,IAAI,CAAC32D,eAAe,CAACmb,OAAO,CAACkc,MAAM,CAACD,cAAc,CAAC;QAClF;MACF;MACA,MAAMyxB,kBAAkB,GAAGH,0BAA0B,CAAC3tD,SAAS,CAACrN,KAAK,CAACi7D,YAAY,CAAC,CAAC;MACpF,MAAMr1C,SAAS,GAAG;QAChBld,QAAQ,EAAE;UACR3N,IAAI,EAAE8tE,SAAS,CAACt5D,aAAa;UAC7B0sD,WAAW,EAAEgN,oBAAoB;UACjC/M,cAAc,EAAE2M,SAAS,CAACG;QAC5B,CAAC;QACDnrD,SAAS,EAAEs9C;MACb,CAAC;MACD,OAAO,IAAI,CAACxkD,OAAO,CAAC+Z,OAAO,CAAC;QAC1B9K,SAAS;QACTq1C;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;IAAAhyB,eAAA,2BACiB,eAAetY,wBAAwB,CAAC,MAAMk4C,SAAS,IAAI;MAC5E,MAAMl0E,OAAO,GAAGk0E,SAAS,CAACl0E,OAAO,IAAI,QAAQ;MAC7C,MAAM;QACJu0E,wBAAwB;QACxBpN;MACF,CAAC,GAAG,MAAM,IAAI,CAACqN,eAAe,CAACN,SAAS,CAACt5D,aAAa,EAAEs5D,SAAS,CAACp5D,gBAAgB,IAAIgsB,iBAAiB,EAAE9mC,OAAO,CAAC;MACjH,OAAO,IAAI,CAAC40E,eAAe,CAAC74C,OAAO,CAAC;QAClCnhB,aAAa,EAAEs5D,SAAS,CAACt5D,aAAa;QACtCy5D,gBAAgB,EAAEE,wBAAwB;QAC1CpN,iBAAiB,EAAE+M,SAAS,CAACQ,yBAAyB,IAAIvN;MAC5D,CAAC,CAAC;IACJ,CAAC,CAAC;IAAA7yB,eAAA,iBACO,eAAetY,wBAAwB,CAAC,MAAMk4C,SAAS,IAAI;MAClE,MAAMG,gBAAgB,GAAG,MAAM,IAAI,CAACQ,mBAAmB,CAACX,SAAS,CAACt5D,aAAa,CAAC;MAChF,OAAOy0B,WAAW,CAACC,mBAAmB,CAAC;QACrC3xB,eAAe,EAAE,IAAI,CAACA,eAAe;QACrCvY,MAAM,EAAE,iBAAiB;QACzB0Y,IAAI,EAAE,CAACo2D,SAAS,CAACt5D,aAAa,CAAC;QAC/BvP,KAAK,EAAE,MAAMwlC,OAAO,IAAI;UACtB,MAAMuB,MAAM,GAAG,IAAI,CAACz0B,eAAe,CAAC68B,SAAS,CAAC,kBAAkB,EAAE3J,OAAO,CAAC4J,IAAI,CAAC;UAC/E,IAAIrI,MAAM,CAACnyC,MAAM,GAAG,CAAC,EAAE;YACrB,MAAM,IAAIC,KAAK,CAAC,iCAAiC,CAAC;UACpD;UACA,MAAMomE,YAAY,GAAG,CAAC,MAAMtrC,gCAAgC,CAACq5C,gBAAgB,EAAE,IAAI,CAAC12D,eAAe,CAAC2vB,WAAW,CAAC,CAAC,EAAE,IAAI,CAAC3vB,eAAe,CAACmb,OAAO,CAAC,EAAElc,GAAG;UACrJ,MAAM4jC,UAAU,GAAG,IAAI,CAACm0B,kBAAkB,CAACj8D,SAAS,CAACrN,KAAK,CAAC,IAAI,CAACsS,eAAe,CAACf,GAAG,CAAC,EAAE0pD,YAAY,CAAC;UACnG,IAAI,CAAC3oD,eAAe,CAAC4iC,SAAS,CAACC,UAAU,CAAC;UAC1C,OAAO3P,OAAO;QAChB;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;IAjMA,IAAI,CAAClzB,eAAe,GAAGA,eAAe;EACxC;EACAwtB,UAAUA,CAAA,EAAG;IACX,OAAO,IAAI,CAACxtB,eAAe,CAACI,YAAY,CAACjP,OAAO;EAClD;;EAEA;AACF;AACA;;EAEE,MAAMknC,MAAMA,CAAA,EAAG;IACb,MAAMvb,UAAU,GAAG,MAAM,IAAI,CAAC9c,eAAe,CAACI,YAAY,CAAC+2D,gBAAgB,CAAC,CAAC;IAC7E,OAAOr6C,UAAU;EACnB;EACA,MAAM5sB,GAAGA,CAAC+M,aAAa,EAAE;IACvB,MAAMqW,SAAS,GAAG,MAAM,IAAI,CAACtT,eAAe,CAACI,YAAY,CAACg3D,YAAY,CAACn6D,aAAa,CAAC;IACrF,OAAOqW,SAAS;EAClB;EACA,MAAM4jD,mBAAmBA,CAACj6D,aAAa,EAAE;IACvC,MAAMqW,SAAS,GAAG,MAAM,IAAI,CAACpjB,GAAG,CAAC+M,aAAa,CAAC;IAC/C,OAAOqW,SAAS,CAACld,QAAQ,CAACwzD,cAAc;EAC1C;EACA,MAAMyN,eAAeA,CAACp6D,aAAa,EAAE;IACnC,MAAMqW,SAAS,GAAG,MAAM,IAAI,CAACpjB,GAAG,CAAC+M,aAAa,CAAC;IAC/C,OAAOqW,SAAS,CAAC/H,SAAS;EAC5B;EACA,MAAM+rD,uBAAuBA,CAACC,aAAa,EAAE;IAC3C,IAAIjqD,QAAQ,GAAGiqD,aAAa,CAAC9O,gBAAgB;IAC7C,IAAI,CAACn7C,QAAQ,EAAE;MACb1wB,SAAS,CAAC26E,aAAa,CAACrjC,iBAAiB,EAAE,iEAAiE,CAAC;MAC7G5mB,QAAQ,GAAG9wB,KAAK,CAACmL,EAAE,CAAC4vE,aAAa,CAACrjC,iBAAiB,CAAC,CAACxS,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC;IACvE;IACA,MAAM8nC,iBAAiB,GAAG,MAAM,IAAI,CAACxpD,eAAe,CAACI,YAAY,CAACo3D,sBAAsB,CAAClqD,QAAQ,CAAC;IAClG,OAAOk8C,iBAAiB;EAC1B;EACA,MAAMiO,8BAA8BA,CAACF,aAAa,EAAE;IAClD,MAAM/N,iBAAiB,GAAG,MAAM,IAAI,CAAC8N,uBAAuB,CAACC,aAAa,CAAC;IAC3E,OAAO/N,iBAAiB,CAACI,cAAc;EACzC;EA6JA;AACF;AACA;;EAEE6M,eAAeA,CAAC9N,YAAY,EAAEr1C,SAAS,EAAE;IACvC,MAAMokD,qBAAqB,GAAG,IAAIl7E,KAAK,CAACkF,SAAS,CAACinE,YAAY,CAAC;IAC/D,MAAMgP,0BAA0B,GAAGrkD,SAAS,CAAC/H,SAAS,CAACrlB,GAAG,CAACga,EAAE,IAAIA,EAAE,CAACuoD,gBAAgB,CAAC;IACrF,MAAMmP,QAAQ,GAAGjP,YAAY,CAAC/6D,MAAM,CAAC2uB,IAAI,IAAI;MAC3C,MAAMisC,UAAU,GAAGr9C,MAAM,CAAC+B,MAAM,CAAC,IAAI1wB,KAAK,CAACkF,SAAS,CAAC,CAAC66B,IAAI,CAAC,CAAC,CAAChR,SAAS,CAAC;MACvE,IAAIi9C,UAAU,CAAClmE,MAAM,KAAK,CAAC,EAAE;QAC3B,OAAO,KAAK;MACd;MACA,MAAMu1E,SAAS,GAAGH,qBAAqB,CAACvqD,UAAU,CAACq7C,UAAU,CAAC,CAAC,CAAC,CAAC;MACjE,OAAOmP,0BAA0B,CAAC9nE,QAAQ,CAACgoE,SAAS,CAAC;IACvD,CAAC,CAAC;IACF,OAAOD,QAAQ;EACjB;EACAZ,kBAAkBA,CAACc,OAAO,EAAEC,WAAW,EAAE;IACvC,MAAMC,gBAAgB,GAAG,IAAIx7E,KAAK,CAACkF,SAAS,CAACo2E,OAAO,CAAC;IACrD,MAAMG,iBAAiB,GAAG,IAAIz7E,KAAK,CAACkF,SAAS,CAACq2E,WAAW,CAAC;IAC1D,MAAMG,iBAAiB,GAAG/sD,MAAM,CAAC+B,MAAM,CAAC+qD,iBAAiB,CAAC1sD,SAAS,CAAC,CAACrlB,GAAG,CAACga,EAAE,IAAI+3D,iBAAiB,CAAC9qD,UAAU,CAACjN,EAAE,CAAC,CAAC;IAChH,MAAM03D,QAAQ,GAAGE,OAAO,CAAClqE,MAAM,CAAC2uB,IAAI,IAAI;MACtC,MAAMisC,UAAU,GAAGr9C,MAAM,CAAC+B,MAAM,CAAC,IAAI1wB,KAAK,CAACkF,SAAS,CAAC,CAAC66B,IAAI,CAAC,CAAC,CAAChR,SAAS,CAAC;MACvE,IAAIi9C,UAAU,CAAClmE,MAAM,KAAK,CAAC,EAAE;QAC3B,OAAO,KAAK;MACd;MACA,MAAMu1E,SAAS,GAAGG,gBAAgB,CAAC7qD,UAAU,CAACq7C,UAAU,CAAC,CAAC,CAAC,CAAC;MAC5D,OAAO,CAAC0P,iBAAiB,CAACroE,QAAQ,CAACgoE,SAAS,CAAC;IAC/C,CAAC,CAAC;IACF,OAAOD,QAAQ;EACjB;EACA,MAAMf,eAAeA,CAAC55D,aAAa,EAAEE,gBAAgB,EAAE;IAAA,IAAAg7D,oBAAA;IACrD,IAAI91E,OAAO,GAAGkD,SAAS,CAACjD,MAAM,GAAG,CAAC,IAAIiD,SAAS,CAAC,CAAC,CAAC,KAAKC,SAAS,GAAGD,SAAS,CAAC,CAAC,CAAC,GAAG,QAAQ;IAC1F,MAAM6yE,SAAS,GAAG,MAAMhvC,iCAAiC,CAACjsB,gBAAgB,EAAEF,aAAa,EAAE5a,OAAO,EAAE,IAAI,CAAC2d,eAAe,CAACmb,OAAO,EAAE,IAAI,CAACnb,eAAe,CAAC9S,OAAO,CAAClE,QAAQ,EAAE,IAAI,CAACgX,eAAe,CAAC9S,OAAO,CAAChE,SAAS,CAAC;IAChN,MAAM06B,cAAc,GAAG,MAAMklC,iBAAiB,CAACsP,SAAS,CAACn9D,WAAW,EAAE,IAAI,CAAC+E,eAAe,CAACmb,OAAO,EAAE,IAAI,CAACnb,eAAe,CAAC2vB,WAAW,CAAC,CAAC,EAAE,EAAE,EAAE,IAAI,CAAC3vB,eAAe,CAAC9S,OAAO,CAAClE,QAAQ,EAAE,IAAI,CAACgX,eAAe,CAAC9S,OAAO,CAAChE,SAAS,CAAC;IAC1N,MAAMuxB,qBAAqB,IAAA09C,oBAAA,GAAGv0C,cAAc,CAACrwB,IAAI,CAACK,CAAC,IAAIA,CAAC,CAAC4E,IAAI,KAAK,gBAAgB,CAAC,cAAA2/D,oBAAA,uBAArDA,oBAAA,CAAuDv1C,WAAW,CAAC4I,gBAAgB;;IAEjH;;IAEA;IACA,MAAM6sC,kBAAkB,GAAGz0C,cAAc,CAACh2B,MAAM,CAACgG,CAAC,IAAIA,CAAC,CAACgvB,WAAW,CAAC7+B,IAAI,IAAI6P,CAAC,CAACgvB,WAAW,CAAC7+B,IAAI,CAACzB,MAAM,GAAG,CAAC,CAAC;IAC1G,MAAMg2E,2BAA2B,GAAGD,kBAAkB,CAACzqE,MAAM,CAACgG,CAAC,IAAI;MACjE,OAAOA,CAAC,CAAC4E,IAAI,KAAK,OAAO;IAC3B,CAAC,CAAC,CAACtS,GAAG,CAAC0N,CAAC,IAAIA,CAAC,CAACgvB,WAAW,CAAC;IAC1B,MAAM21C,gCAAgC,GAAGF,kBAAkB,CAACzqE,MAAM,CAACgG,CAAC,IAAI;MACtE,OAAOA,CAAC,CAAC4E,IAAI,KAAK,OAAO;IAC3B,CAAC,CAAC,CAACtS,GAAG,CAAC0N,CAAC,IAAIA,CAAC,CAACgvB,WAAW,CAAC;IAC1B,MAAMjyB,MAAM,GAAG,IAAI,CAACqP,eAAe,CAAC0vB,SAAS,CAAC,CAAC;IAC/C9yC,SAAS,CAAC+T,MAAM,EAAE,oBAAoB,CAAC;;IAEvC;IACA,MAAMg6D,2BAA2B,CAACh6D,MAAM,EAAE4nE,gCAAgC,EAAE,CAAC,CAAC,CAAC;;IAE/E;IACA;IACA,KAAK,MAAMr6C,EAAE,IAAIo6C,2BAA2B,EAAE;MAC5C,IAAI;QACF,MAAMvO,2BAA2B,CAACp5D,MAAM,EAAEutB,EAAE,CAAC;MAC/C,CAAC,CAAC,OAAOnwB,CAAC,EAAE;QACVusB,OAAO,CAAC4vC,KAAK,gCAAAjoE,MAAA,CAAgCi8B,EAAE,CAACsN,gBAAgB,GAAIz9B,CAAC,aAADA,CAAC,uBAADA,CAAC,CAAE3G,OAAO,CAAC;MACjF;IACF;IACA,OAAO;MACLwvE,wBAAwB,EAAEn8C,qBAAqB;MAC/C+uC,iBAAiB,EAAE4O,SAAS,CAACn9D;IAC/B,CAAC;EACH;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMu9D,aAAa,CAAC;EAClB;;EAEA,IAAIv5D,GAAGA,CAAA,EAAG;IACR,OAAOlE,SAAS,CAACrN,KAAK,CAAC,IAAI,CAACsS,eAAe,CAACf,GAAG,IAAI,EAAE,CAAC;EACxD;;EAEA;AACF;AACA;EACE,IAAIw5D,SAASA,CAAA,EAAG;IACd,OAAOppB,aAAa,CAAC,IAAI,CAACqpB,eAAe,CAAC,CAAC,EAAE1vD,eAAe,CAAC;EAC/D;;EAEA;AACF;AACA;EACE,IAAIivB,KAAKA,CAAA,EAAG;IACV,OAAOoX,aAAa,CAAC,IAAI,CAACspB,WAAW,CAAC,CAAC,EAAEvvD,mBAAmB,CAAC;EAC/D;;EAEA;AACF;AACA;EACE,IAAIwvD,KAAKA,CAAA,EAAG;IACV,OAAOvpB,aAAa,CAAC,IAAI,CAACwpB,kBAAkB,CAAC,CAAC,EAAE5vD,oBAAoB,CAAC;EACvE;;EAEA;AACF;AACA;EACE,IAAI6vD,YAAYA,CAAA,EAAG;IACjB,OAAOzpB,aAAa,CAAC,IAAI,CAAC0pB,kBAAkB,CAAC,CAAC,EAAE7vD,oBAAoB,CAAC;EACvE;;EAEA;AACF;AACA;EACE,IAAI+lB,KAAKA,CAAA,EAAG;IACV,OAAOogB,aAAa,CAAC,IAAI,CAAC2pB,aAAa,CAAC,CAAC,EAAEzvD,aAAa,CAAC;EAC3D;;EAEA;AACF;AACA;EACE,IAAI81B,KAAKA,CAAA,EAAG;IACV,OAAOgQ,aAAa,CAAC,IAAI,CAAC4pB,WAAW,CAAC,CAAC,EAAE3yD,aAAa,CAAC;EACzD;;EAEA;AACF;AACA;EACE,IAAIu0B,MAAMA,CAAA,EAAG;IACX,OAAOwU,aAAa,CAAC,IAAI,CAAC6pB,YAAY,CAAC,CAAC,EAAEvxD,WAAW,CAAC;EACxD;;EAEA;AACF;AACA;EACE,IAAIozB,OAAOA,CAAA,EAAG;IACZ,OAAOsU,aAAa,CAAC,IAAI,CAAC8pB,aAAa,CAAC,CAAC,EAAEtwD,eAAe,CAAC;EAC7D;;EAEA;AACF;AACA;EACE,IAAIuwD,GAAGA,CAAA,EAAG;IACR,OAAO/pB,aAAa,CAAC,IAAI,CAACgqB,SAAS,CAAC,CAAC,EAAE/vD,cAAc,CAAC;EACxD;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAIgwD,cAAcA,CAAA,EAAG;IACnB,OAAOjqB,aAAa,CAAC,IAAI,CAACkqB,oBAAoB,CAAC,CAAC,EAAE3vD,uBAAuB,CAAC;EAC5E;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI4vD,eAAeA,CAAA,EAAG;IACpB,OAAOnqB,aAAa,CAAC,IAAI,CAACoqB,qBAAqB,CAAC,CAAC,EAAE5vD,wBAAwB,CAAC;EAC9E;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAIg9C,MAAMA,CAAA,EAAG;IACX,OAAOxX,aAAa,CAAC,IAAI,CAACqqB,YAAY,CAAC,CAAC,EAAE5vD,cAAc,CAAC;EAC3D;EACA,IAAI6vD,SAASA,CAAA,EAAG;IACd,OAAOtqB,aAAa,CAAC,IAAI,CAACuqB,eAAe,CAAC,CAAC,EAAE1vD,qBAAqB,CAAC;EACrE;EACA,IAAI2vD,UAAUA,CAAA,EAAG;IACf,OAAOxqB,aAAa,CAAC,IAAI,CAACyqB,gBAAgB,CAAC,CAAC,EAAE3vD,sBAAsB,CAAC;EACvE;EACA,IAAI4vD,WAAWA,CAAA,EAAG;IAChB,OAAO1qB,aAAa,CAAC,IAAI,CAAC2qB,iBAAiB,CAAC,CAAC,EAAE5vD,uBAAuB,CAAC;EACzE;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A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"},"metadata":{},"sourceType":"module","externalDependencies":[]}